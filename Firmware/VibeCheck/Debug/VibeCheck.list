
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b7b4  0800b7b4  0000c7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b800  0800b800  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800b804  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d4  24000010  0800b814  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005e4  0800b814  0000d5e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020ae1  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003544  00000000  00000000  0002db1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001523  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000411a  00000000  00000000  0003406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024727  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001693b3  00000000  00000000  0005c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c5c5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075f0  00000000  00000000  001c5ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001cd294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b79c 	.word	0x0800b79c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b79c 	.word	0x0800b79c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000600:	f000 fe92 	bl	8001328 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 fbcc 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f82a 	bl	8000660 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800060c:	f000 f896 	bl	800073c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fd80 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 fd5e 	bl	80010d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000618:	f000 f9a6 	bl	8000968 <MX_DAC1_Init>
  MX_I2C2_Init();
 800061c:	f000 f9d6 	bl	80009cc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000620:	f000 fa14 	bl	8000a4c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000624:	f000 fa68 	bl	8000af8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000628:	f000 fabc 	bl	8000ba4 <MX_SPI4_Init>
  MX_TIM4_Init();
 800062c:	f000 fc40 	bl	8000eb0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000630:	f000 fbb0 	bl	8000d94 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fd02 	bl	800103c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000638:	f000 fb0a 	bl	8000c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 800063c:	f000 fb5c 	bl	8000cf8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000640:	f000 f8ac 	bl	800079c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000644:	f000 f926 	bl	8000894 <MX_ADC2_Init>
  MX_UART7_Init();
 8000648:	f000 fcaa 	bl	8000fa0 <MX_UART7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc);
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <main+0x60>)
 800064e:	f001 fb69 	bl	8001d24 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000652:	4802      	ldr	r0, [pc, #8]	@ (800065c <main+0x60>)
 8000654:	f001 fb70 	bl	8001d38 <VibeCheck_Loop>
 8000658:	e7fb      	b.n	8000652 <main+0x56>
 800065a:	bf00      	nop
 800065c:	240005dc 	.word	0x240005dc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	224c      	movs	r2, #76	@ 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00b f868 	bl	800b744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00b f862 	bl	800b744 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f005 fa33 	bl	8005aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <SystemClock_Config+0xd8>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <SystemClock_Config+0xd8>)
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xd8>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemClock_Config+0xd8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b0:	d1f8      	bne.n	80006a4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c8:	2328      	movs	r3, #40	@ 0x28
 80006ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d8:	230c      	movs	r3, #12
 80006da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006dc:	2300      	movs	r3, #0
 80006de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fa39 	bl	8005b60 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f4:	f000 fe44 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	233f      	movs	r3, #63	@ 0x3f
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000704:	2308      	movs	r3, #8
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000716:	2340      	movs	r3, #64	@ 0x40
 8000718:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2103      	movs	r1, #3
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fdf8 	bl	8006314 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800072a:	f000 fe29 	bl	8001380 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3770      	adds	r7, #112	@ 0x70
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58024800 	.word	0x58024800

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ae      	sub	sp, #184	@ 0xb8
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	22b8      	movs	r2, #184	@ 0xb8
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00a fffb 	bl	800b744 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800074e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800076e:	23c0      	movs	r3, #192	@ 0xc0
 8000770:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f006 f952 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800078e:	f000 fdf7 	bl	8001380 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	37b8      	adds	r7, #184	@ 0xb8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	@ 0x30
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2224      	movs	r2, #36	@ 0x24
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f00a ffc5 	bl	800b744 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007bc:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xec>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007e6:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800081c:	2201      	movs	r2, #1
 800081e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000822:	f001 fd95 	bl	8002350 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800082c:	f000 fda8 	bl	8001380 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800083c:	f002 fdd4 	bl	80033e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000846:	f000 fd9b 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_ADC1_Init+0xf0>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_ADC1_Init+0xf4>)
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800086e:	f001 ff77 	bl	8002760 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000878:	f000 fd82 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3730      	adds	r7, #48	@ 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2400002c 	.word	0x2400002c
 8000888:	40022000 	.word	0x40022000
 800088c:	10c00010 	.word	0x10c00010
 8000890:	47ff0000 	.word	0x47ff0000

08000894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2224      	movs	r2, #36	@ 0x24
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a ff4f 	bl	800b744 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008a8:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_ADC2_Init+0xc8>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_ADC2_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_ADC2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_ADC2_Init+0xc4>)
 8000908:	2201      	movs	r2, #1
 800090a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090c:	4812      	ldr	r0, [pc, #72]	@ (8000958 <MX_ADC2_Init+0xc4>)
 800090e:	f001 fd1f 	bl	8002350 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000918:	f000 fd32 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_ADC2_Init+0xcc>)
 800091e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000928:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_ADC2_Init+0xd0>)
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <MX_ADC2_Init+0xc4>)
 8000940:	f001 ff0e 	bl	8002760 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800094a:	f000 fd19 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	@ 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2400009c 	.word	0x2400009c
 800095c:	40022100 	.word	0x40022100
 8000960:	0c900008 	.word	0x0c900008
 8000964:	47ff0000 	.word	0x47ff0000

08000968 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2224      	movs	r2, #36	@ 0x24
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00a fee5 	bl	800b744 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_DAC1_Init+0x5c>)
 800097c:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_DAC1_Init+0x60>)
 800097e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000980:	4810      	ldr	r0, [pc, #64]	@ (80009c4 <MX_DAC1_Init+0x5c>)
 8000982:	f002 ff9b 	bl	80038bc <HAL_DAC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800098c:	f000 fcf8 	bl	8001380 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000994:	2306      	movs	r3, #6
 8000996:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <MX_DAC1_Init+0x5c>)
 80009ac:	f002 ffa8 	bl	8003900 <HAL_DAC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 fce3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400010c 	.word	0x2400010c
 80009c8:	40007400 	.word	0x40007400

080009cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <MX_I2C2_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <MX_I2C2_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_I2C2_Init+0x74>)
 8000a08:	f004 ff3c 	bl	8005884 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 fcb5 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <MX_I2C2_Init+0x74>)
 8000a1a:	f004 ffcf 	bl	80059bc <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 fcac 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_I2C2_Init+0x74>)
 8000a2c:	f005 f811 	bl	8005a52 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 fca3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000198 	.word	0x24000198
 8000a44:	40005800 	.word	0x40005800
 8000a48:	307075b1 	.word	0x307075b1

08000a4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a52:	4a28      	ldr	r2, [pc, #160]	@ (8000af4 <MX_SPI2_Init+0xa8>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a58:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a66:	2203      	movs	r2, #3
 8000a68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_SPI2_Init+0xa4>)
 8000adc:	f008 fb8c 	bl	80091f8 <HAL_SPI_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ae6:	f000 fc4b 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	240001ec 	.word	0x240001ec
 8000af4:	40003800 	.word	0x40003800

08000af8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000afe:	4a28      	ldr	r2, [pc, #160]	@ (8000ba0 <MX_SPI3_Init+0xa8>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b10:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b12:	2203      	movs	r2, #3
 8000b14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b24:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_SPI3_Init+0xa4>)
 8000b88:	f008 fb36 	bl	80091f8 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000b92:	f000 fbf5 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000274 	.word	0x24000274
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000baa:	4a28      	ldr	r2, [pc, #160]	@ (8000c4c <MX_SPI4_Init+0xa8>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bb0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bd0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bfa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_SPI4_Init+0xa4>)
 8000c34:	f008 fae0 	bl	80091f8 <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c3e:	f000 fb9f 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240002fc 	.word	0x240002fc
 8000c4c:	40013400 	.word	0x40013400

08000c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c70:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <MX_TIM1_Init+0xa4>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9a:	4815      	ldr	r0, [pc, #84]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000c9c:	f008 fbeb 	bl	8009476 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ca6:	f000 fb6b 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480e      	ldr	r0, [pc, #56]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000cb8:	f008 fdaa 	bl	8009810 <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cc2:	f000 fb5d 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	@ (8000cf0 <MX_TIM1_Init+0xa0>)
 8000cd8:	f009 fab8 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ce2:	f000 fb4d 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	24000384 	.word	0x24000384
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d3e:	4814      	ldr	r0, [pc, #80]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d40:	f008 fb99 	bl	8009476 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d4a:	f000 fb19 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d5c:	f008 fd58 	bl	8009810 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d66:	f000 fb0b 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <MX_TIM2_Init+0x98>)
 8000d78:	f009 fa68 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d82:	f000 fafd 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	240003d0 	.word	0x240003d0

08000d94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000dc8:	4a38      	ldr	r2, [pc, #224]	@ (8000eac <MX_TIM3_Init+0x118>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dec:	482e      	ldr	r0, [pc, #184]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000dee:	f008 fb42 	bl	8009476 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000df8:	f000 fac2 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e0a:	f008 fd01 	bl	8009810 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e14:	f000 fab4 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e18:	4823      	ldr	r0, [pc, #140]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e1a:	f008 fb83 	bl	8009524 <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e24:	f000 faac 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	481c      	ldr	r0, [pc, #112]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e38:	f009 fa08 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e42:	f000 fa9d 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e46:	2360      	movs	r3, #96	@ 0x60
 8000e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e5e:	f008 fbc3 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e68:	f000 fa8a 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e74:	f008 fbb8 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000e7e:	f000 fa7f 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2208      	movs	r2, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e8a:	f008 fbad 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e94:	f000 fa74 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <MX_TIM3_Init+0x114>)
 8000e9a:	f000 fd71 	bl	8001980 <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3738      	adds	r7, #56	@ 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2400041c 	.word	0x2400041c
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	@ 0x38
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f9c <MX_TIM4_Init+0xec>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000efa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f08:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f0a:	f008 fab4 	bl	8009476 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f14:	f000 fa34 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f26:	f008 fc73 	bl	8009810 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f30:	f000 fa26 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f36:	f008 faf5 	bl	8009524 <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f40:	f000 fa1e 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f54:	f009 f97a 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f5e:	f000 fa0f 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	@ 0x60
 8000f64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f7a:	f008 fb35 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f84:	f000 f9fc 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f8a:	f000 fcf9 	bl	8001980 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	@ 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000468 	.word	0x24000468
 8000f9c:	40000800 	.word	0x40000800

08000fa0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fa6:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <MX_UART7_Init+0x98>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fcc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fd0:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000fea:	4812      	ldr	r0, [pc, #72]	@ (8001034 <MX_UART7_Init+0x94>)
 8000fec:	f009 f9ca 	bl	800a384 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f9c3 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_UART7_Init+0x94>)
 8000ffe:	f00a fad6 	bl	800b5ae <HAL_UARTEx_SetTxFifoThreshold>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001008:	f000 f9ba 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MX_UART7_Init+0x94>)
 8001010:	f00a fb0b 	bl	800b62a <HAL_UARTEx_SetRxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 800101a:	f000 f9b1 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_UART7_Init+0x94>)
 8001020:	f00a fa8c 	bl	800b53c <HAL_UARTEx_DisableFifoMode>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 800102a:	f000 f9a9 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	240004b4 	.word	0x240004b4
 8001038:	40007800 	.word	0x40007800

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f009 f97d 	bl	800a384 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f976 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f00a fa89 	bl	800b5ae <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f96d 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f00a fabe 	bl	800b62a <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f964 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f00a fa3f 	bl	800b53c <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f95c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	24000548 	.word	0x24000548
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <MX_DMA_Init+0x3c>)
 80010dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <MX_DMA_Init+0x3c>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_DMA_Init+0x3c>)
 80010ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	200b      	movs	r0, #11
 80010fe:	f002 fb30 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001102:	200b      	movs	r0, #11
 8001104:	f002 fb47 	bl	8003796 <HAL_NVIC_EnableIRQ>

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112a:	4b79      	ldr	r3, [pc, #484]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	4a77      	ldr	r2, [pc, #476]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113a:	4b75      	ldr	r3, [pc, #468]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b71      	ldr	r3, [pc, #452]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	4a70      	ldr	r2, [pc, #448]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001158:	4b6d      	ldr	r3, [pc, #436]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	4b6a      	ldr	r3, [pc, #424]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	4a68      	ldr	r2, [pc, #416]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800116e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001176:	4b66      	ldr	r3, [pc, #408]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b62      	ldr	r3, [pc, #392]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	4a61      	ldr	r2, [pc, #388]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001194:	4b5e      	ldr	r3, [pc, #376]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	4a59      	ldr	r2, [pc, #356]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b2:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	4b53      	ldr	r3, [pc, #332]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001310 <MX_GPIO_Init+0x1fc>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	484c      	ldr	r0, [pc, #304]	@ (8001314 <MX_GPIO_Init+0x200>)
 80011e4:	f004 fb34 	bl	8005850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	484a      	ldr	r0, [pc, #296]	@ (8001318 <MX_GPIO_Init+0x204>)
 80011ee:	f004 fb2f 	bl	8005850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	210b      	movs	r1, #11
 80011f6:	4849      	ldr	r0, [pc, #292]	@ (800131c <MX_GPIO_Init+0x208>)
 80011f8:	f004 fb2a 	bl	8005850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001202:	4847      	ldr	r0, [pc, #284]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001204:	f004 fb24 	bl	8005850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	4845      	ldr	r0, [pc, #276]	@ (8001324 <MX_GPIO_Init+0x210>)
 800120e:	f004 fb1f 	bl	8005850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001212:	2308      	movs	r3, #8
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	483b      	ldr	r0, [pc, #236]	@ (8001314 <MX_GPIO_Init+0x200>)
 8001226:	f004 f96b 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800122a:	2310      	movs	r3, #16
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4834      	ldr	r0, [pc, #208]	@ (8001314 <MX_GPIO_Init+0x200>)
 8001242:	f004 f95d 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 8001246:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	482f      	ldr	r0, [pc, #188]	@ (8001318 <MX_GPIO_Init+0x204>)
 800125c:	f004 f950 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4828      	ldr	r0, [pc, #160]	@ (8001318 <MX_GPIO_Init+0x204>)
 8001278:	f004 f942 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 800127c:	230b      	movs	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4822      	ldr	r0, [pc, #136]	@ (800131c <MX_GPIO_Init+0x208>)
 8001294:	f004 f934 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001298:	f248 0304 	movw	r3, #32772	@ 0x8004
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481b      	ldr	r0, [pc, #108]	@ (800131c <MX_GPIO_Init+0x208>)
 80012ae:	f004 f927 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 80012b2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4815      	ldr	r0, [pc, #84]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80012cc:	f004 f918 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 80012d0:	f240 3306 	movw	r3, #774	@ 0x306
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <MX_GPIO_Init+0x210>)
 80012e6:	f004 f90b 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4808      	ldr	r0, [pc, #32]	@ (8001324 <MX_GPIO_Init+0x210>)
 8001302:	f004 f8fd 	bl	8005500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	@ 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	58024400 	.word	0x58024400
 8001314:	58021000 	.word	0x58021000
 8001318:	58020800 	.word	0x58020800
 800131c:	58020000 	.word	0x58020000
 8001320:	58020400 	.word	0x58020400
 8001324:	58020c00 	.word	0x58020c00

08001328 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800133a:	f002 fa47 	bl	80037cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800133e:	2301      	movs	r3, #1
 8001340:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001342:	2300      	movs	r3, #0
 8001344:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800134a:	231f      	movs	r3, #31
 800134c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800134e:	2387      	movs	r3, #135	@ 0x87
 8001350:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001352:	2300      	movs	r3, #0
 8001354:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001356:	2300      	movs	r3, #0
 8001358:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800135e:	2301      	movs	r3, #1
 8001360:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800136a:	463b      	mov	r3, r7
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fa65 	bl	800383c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001372:	2004      	movs	r0, #4
 8001374:	f002 fa42 	bl	80037fc <HAL_MPU_Enable>

}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_MspInit+0x30>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001398:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x30>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x30>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	58024400 	.word	0x58024400

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a39      	ldr	r2, [pc, #228]	@ (80014c4 <HAL_ADC_MspInit+0x104>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d133      	bne.n	800144a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013e2:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a37      	ldr	r2, [pc, #220]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 80013ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ec:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10e      	bne.n	8001412 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 80013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013fa:	4a34      	ldr	r2, [pc, #208]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001406:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001430:	2330      	movs	r3, #48	@ 0x30
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4823      	ldr	r0, [pc, #140]	@ (80014d0 <HAL_ADC_MspInit+0x110>)
 8001444:	f004 f85c 	bl	8005500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001448:	e037      	b.n	80014ba <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <HAL_ADC_MspInit+0x114>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d132      	bne.n	80014ba <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 800145c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <HAL_ADC_MspInit+0x108>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10e      	bne.n	8001484 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800146c:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_ADC_MspInit+0x10c>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a2:	23c0      	movs	r3, #192	@ 0xc0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <HAL_ADC_MspInit+0x118>)
 80014b6:	f004 f823 	bl	8005500 <HAL_GPIO_Init>
}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	@ 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	240005dc 	.word	0x240005dc
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020800 	.word	0x58020800
 80014d4:	40022100 	.word	0x40022100
 80014d8:	58020000 	.word	0x58020000

080014dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a30      	ldr	r2, [pc, #192]	@ (80015bc <HAL_DAC_MspInit+0xe0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d159      	bne.n	80015b2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80014fe:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 8001500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001504:	4a2e      	ldr	r2, [pc, #184]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 8001506:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800150a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800150e:	4b2c      	ldr	r3, [pc, #176]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 8001510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	4a27      	ldr	r2, [pc, #156]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_DAC_MspInit+0xe4>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153a:	2310      	movs	r3, #16
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153e:	2303      	movs	r3, #3
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	481d      	ldr	r0, [pc, #116]	@ (80015c4 <HAL_DAC_MspInit+0xe8>)
 800154e:	f003 ffd7 	bl	8005500 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <HAL_DAC_MspInit+0xf0>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 800155a:	2243      	movs	r2, #67	@ 0x43
 800155c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001560:	2240      	movs	r2, #64	@ 0x40
 8001562:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001578:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 800157c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001580:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001588:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001596:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 8001598:	f002 faf4 	bl	8003b84 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80015a2:	f7ff feed 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_DAC_MspInit+0xec>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	@ 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40007400 	.word	0x40007400
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020000 	.word	0x58020000
 80015c8:	24000120 	.word	0x24000120
 80015cc:	40020010 	.word	0x40020010

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b8      	sub	sp, #224	@ 0xe0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22b8      	movs	r2, #184	@ 0xb8
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a f8a7 	bl	800b744 <memset>
  if(hi2c->Instance==I2C2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d146      	bne.n	800168e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001600:	f04f 0208 	mov.w	r2, #8
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f005 fa08 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001622:	f7ff fead 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001644:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800165e:	2304      	movs	r3, #4
 8001660:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <HAL_I2C_MspInit+0xd0>)
 800166c:	f003 ff48 	bl	8005500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 8001672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 8001678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800167c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 8001682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800168e:	bf00      	nop
 8001690:	37e0      	adds	r7, #224	@ 0xe0
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40005800 	.word	0x40005800
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020400 	.word	0x58020400

080016a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0bc      	sub	sp, #240	@ 0xf0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	22b8      	movs	r2, #184	@ 0xb8
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00a f83d 	bl	800b744 <memset>
  if(hspi->Instance==SPI2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a72      	ldr	r2, [pc, #456]	@ (8001898 <HAL_SPI_MspInit+0x1f4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d146      	bne.n	8001762 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f99f 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80016f4:	f7ff fe44 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016f8:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 80016fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016fe:	4a67      	ldr	r2, [pc, #412]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001708:	4b64      	ldr	r3, [pc, #400]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800170a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b61      	ldr	r3, [pc, #388]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	4a5f      	ldr	r2, [pc, #380]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001726:	4b5d      	ldr	r3, [pc, #372]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001734:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174e:	2305      	movs	r3, #5
 8001750:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001758:	4619      	mov	r1, r3
 800175a:	4851      	ldr	r0, [pc, #324]	@ (80018a0 <HAL_SPI_MspInit+0x1fc>)
 800175c:	f003 fed0 	bl	8005500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001760:	e096      	b.n	8001890 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a4f      	ldr	r2, [pc, #316]	@ (80018a4 <HAL_SPI_MspInit+0x200>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d146      	bne.n	80017fa <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800176c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001778:	2300      	movs	r3, #0
 800177a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f005 f953 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800178c:	f7ff fdf8 	bl	8001380 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001790:	4b42      	ldr	r3, [pc, #264]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001796:	4a41      	ldr	r2, [pc, #260]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017a0:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 80017a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	4a39      	ldr	r2, [pc, #228]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e6:	2306      	movs	r3, #6
 80017e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017f0:	4619      	mov	r1, r3
 80017f2:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <HAL_SPI_MspInit+0x204>)
 80017f4:	f003 fe84 	bl	8005500 <HAL_GPIO_Init>
}
 80017f8:	e04a      	b.n	8001890 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2b      	ldr	r2, [pc, #172]	@ (80018ac <HAL_SPI_MspInit+0x208>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d145      	bne.n	8001890 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f906 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001826:	f7ff fdab 	bl	8001380 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001830:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001832:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800183c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	4a13      	ldr	r2, [pc, #76]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 8001850:	f043 0310 	orr.w	r3, r3, #16
 8001854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_SPI_MspInit+0x1f8>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001866:	2364      	movs	r3, #100	@ 0x64
 8001868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800187e:	2305      	movs	r3, #5
 8001880:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001884:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001888:	4619      	mov	r1, r3
 800188a:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <HAL_SPI_MspInit+0x20c>)
 800188c:	f003 fe38 	bl	8005500 <HAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	37f0      	adds	r7, #240	@ 0xf0
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40003800 	.word	0x40003800
 800189c:	58024400 	.word	0x58024400
 80018a0:	58020400 	.word	0x58020400
 80018a4:	40003c00 	.word	0x40003c00
 80018a8:	58020800 	.word	0x58020800
 80018ac:	40013400 	.word	0x40013400
 80018b0:	58021000 	.word	0x58021000

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001970 <HAL_TIM_Base_MspInit+0xbc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10f      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 80018c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018cc:	4a29      	ldr	r2, [pc, #164]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 80018d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018e4:	e03d      	b.n	8001962 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ee:	d10f      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 80018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 8001902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
}
 800190e:	e028      	b.n	8001962 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <HAL_TIM_Base_MspInit+0xc4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 800192c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	e013      	b.n	8001962 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0f      	ldr	r2, [pc, #60]	@ (800197c <HAL_TIM_Base_MspInit+0xc8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d10e      	bne.n	8001962 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 8001946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_TIM_Base_MspInit+0xc0>)
 8001956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40010000 	.word	0x40010000
 8001974:	58024400 	.word	0x58024400
 8001978:	40000400 	.word	0x40000400
 800197c:	40000800 	.word	0x40000800

08001980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a26      	ldr	r2, [pc, #152]	@ (8001a38 <HAL_TIM_MspPostInit+0xb8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d120      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a8:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b2:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 80019c0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019d2:	2302      	movs	r3, #2
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4818      	ldr	r0, [pc, #96]	@ (8001a40 <HAL_TIM_MspPostInit+0xc0>)
 80019de:	f003 fd8f 	bl	8005500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019e2:	e024      	b.n	8001a2e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a16      	ldr	r2, [pc, #88]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11f      	bne.n	8001a2e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_TIM_MspPostInit+0xbc>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <HAL_TIM_MspPostInit+0xc8>)
 8001a2a:	f003 fd69 	bl	8005500 <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58020800 	.word	0x58020800
 8001a44:	40000800 	.word	0x40000800
 8001a48:	58020c00 	.word	0x58020c00

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ba      	sub	sp, #232	@ 0xe8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	22b8      	movs	r2, #184	@ 0xb8
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f009 fe69 	bl	800b744 <memset>
  if(huart->Instance==UART7)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	@ (8001bac <HAL_UART_MspInit+0x160>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d147      	bne.n	8001b0c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001a7c:	f04f 0202 	mov.w	r2, #2
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 ffca 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a9e:	f7ff fc6f 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa8:	4a41      	ldr	r2, [pc, #260]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001aaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001aae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad0:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ade:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001af8:	2307      	movs	r3, #7
 8001afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b02:	4619      	mov	r1, r3
 8001b04:	482b      	ldr	r0, [pc, #172]	@ (8001bb4 <HAL_UART_MspInit+0x168>)
 8001b06:	f003 fcfb 	bl	8005500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b0a:	e04a      	b.n	8001ba2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a29      	ldr	r2, [pc, #164]	@ (8001bb8 <HAL_UART_MspInit+0x16c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d145      	bne.n	8001ba2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b16:	f04f 0201 	mov.w	r2, #1
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 ff7d 	bl	8006a2c <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001b38:	f7ff fc22 	bl	8001380 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b42:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b4c:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_UART_MspInit+0x164>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001b78:	23c0      	movs	r3, #192	@ 0xc0
 8001b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b90:	2307      	movs	r3, #7
 8001b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <HAL_UART_MspInit+0x170>)
 8001b9e:	f003 fcaf 	bl	8005500 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	37e8      	adds	r7, #232	@ 0xe8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40007800 	.word	0x40007800
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58021000 	.word	0x58021000
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	58020400 	.word	0x58020400

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c16:	f000 f935 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <DMA1_Stream0_IRQHandler+0x10>)
 8001c26:	f002 fb05 	bl	8004234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000120 	.word	0x24000120

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c38:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <SystemInit+0xd0>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c3e:	4a31      	ldr	r2, [pc, #196]	@ (8001d04 <SystemInit+0xd0>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <SystemInit+0xd4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d807      	bhi.n	8001c64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c54:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <SystemInit+0xd4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 030f 	bic.w	r3, r3, #15
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d08 <SystemInit+0xd4>)
 8001c5e:	f043 0307 	orr.w	r3, r3, #7
 8001c62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c64:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <SystemInit+0xd8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <SystemInit+0xd8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c70:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <SystemInit+0xd8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c76:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <SystemInit+0xd8>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4924      	ldr	r1, [pc, #144]	@ (8001d0c <SystemInit+0xd8>)
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <SystemInit+0xdc>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <SystemInit+0xd4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <SystemInit+0xd4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 030f 	bic.w	r3, r3, #15
 8001c96:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <SystemInit+0xd4>)
 8001c98:	f043 0307 	orr.w	r3, r3, #7
 8001c9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <SystemInit+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <SystemInit+0xd8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <SystemInit+0xd8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <SystemInit+0xd8>)
 8001cb2:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <SystemInit+0xe0>)
 8001cb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <SystemInit+0xd8>)
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <SystemInit+0xe4>)
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <SystemInit+0xd8>)
 8001cbe:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <SystemInit+0xe8>)
 8001cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <SystemInit+0xd8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <SystemInit+0xd8>)
 8001cca:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <SystemInit+0xe8>)
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <SystemInit+0xd8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <SystemInit+0xd8>)
 8001cd6:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <SystemInit+0xe8>)
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <SystemInit+0xd8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <SystemInit+0xd8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	@ (8001d0c <SystemInit+0xd8>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <SystemInit+0xd8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <SystemInit+0xec>)
 8001cf4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001cf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00
 8001d08:	52002000 	.word	0x52002000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d14:	02020200 	.word	0x02020200
 8001d18:	01ff0000 	.word	0x01ff0000
 8001d1c:	01010280 	.word	0x01010280
 8001d20:	52004000 	.word	0x52004000

08001d24 <VibeCheck_Init>:


#include "vibecheck.h"

void VibeCheck_Init(VibeCheck* vc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7ff ff70 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f009 fceb 	bl	800b754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7fe fc3d 	bl	80005fc <main>
  bx  lr
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d8c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001d90:	0800b804 	.word	0x0800b804
  ldr r2, =_sbss
 8001d94:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001d98:	240005e4 	.word	0x240005e4

08001d9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC3_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f001 fcd0 	bl	800374c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dac:	f004 fc68 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_Init+0x68>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4913      	ldr	r1, [pc, #76]	@ (8001e0c <HAL_Init+0x6c>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_Init+0x68>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e0c <HAL_Init+0x6c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_Init+0x70>)
 8001de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_Init+0x74>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	200f      	movs	r0, #15
 8001dec:	f000 f814 	bl	8001e18 <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e002      	b.n	8001e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfa:	f7ff fac7 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	0800b7b4 	.word	0x0800b7b4
 8001e10:	24000004 	.word	0x24000004
 8001e14:	24000000 	.word	0x24000000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_InitTick+0x60>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e021      	b.n	8001e70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <HAL_InitTick+0x64>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_InitTick+0x60>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fcb5 	bl	80037b2 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f001 fc7f 	bl	8003762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <HAL_InitTick+0x68>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2400000c 	.word	0x2400000c
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	24000008 	.word	0x24000008

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2400000c 	.word	0x2400000c
 8001ea8:	240005e0 	.word	0x240005e0

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	240005e0 	.word	0x240005e0

08001ec4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3360      	adds	r3, #96	@ 0x60
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <LL_ADC_SetOffset+0x60>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10b      	bne.n	8001f68 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f66:	e00b      	b.n	8001f80 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	58026000 	.word	0x58026000

08001f90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3360      	adds	r3, #96	@ 0x60
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3360      	adds	r3, #96	@ 0x60
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
  }
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	58026000 	.word	0x58026000

08002034 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <LL_ADC_SetOffsetSaturation+0x40>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10e      	bne.n	8002066 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3360      	adds	r3, #96	@ 0x60
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	58026000 	.word	0x58026000

08002078 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LL_ADC_SetOffsetSign+0x40>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d10e      	bne.n	80020aa <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3360      	adds	r3, #96	@ 0x60
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	58026000 	.word	0x58026000

080020bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3360      	adds	r3, #96	@ 0x60
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a0c      	ldr	r2, [pc, #48]	@ (800210c <LL_ADC_SetOffsetState+0x50>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80020ee:	e007      	b.n	8002100 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	58026000 	.word	0x58026000

08002110 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3330      	adds	r3, #48	@ 0x30
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	211f      	movs	r1, #31
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 011f 	and.w	r1, r3, #31
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <LL_ADC_SetChannelSingleDiff+0x78>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d115      	bne.n	8002200 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	43db      	mvns	r3, r3
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0318 	and.w	r3, r3, #24
 80021ea:	4914      	ldr	r1, [pc, #80]	@ (800223c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	400b      	ands	r3, r1
 80021f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80021fe:	e014      	b.n	800222a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0318 	and.w	r3, r3, #24
 8002216:	4909      	ldr	r1, [pc, #36]	@ (800223c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002218:	40d9      	lsrs	r1, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	400b      	ands	r3, r1
 800221e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	58026000 	.word	0x58026000
 800223c:	000fffff 	.word	0x000fffff

08002240 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <LL_ADC_DisableDeepPowerDown+0x20>)
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6093      	str	r3, [r2, #8]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	5fffffc0 	.word	0x5fffffc0

08002264 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002278:	d101      	bne.n	800227e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800229a:	4013      	ands	r3, r2
 800229c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	6fffffc0 	.word	0x6fffffc0

080022b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022c8:	d101      	bne.n	80022ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_IsEnabled+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_IsEnabled+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d101      	bne.n	800231a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b08      	cmp	r3, #8
 800233a:	d101      	bne.n	8002340 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1ee      	b.n	8002748 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff f821 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff67 	bl	8002264 <LL_ADC_IsDeepPowerDownEnabled>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff4d 	bl	8002240 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff82 	bl	80022b4 <LL_ADC_IsInternalRegulatorEnabled>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d114      	bne.n	80023e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff66 	bl	800228c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <HAL_ADC_Init+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	4a8e      	ldr	r2, [pc, #568]	@ (8002600 <HAL_ADC_Init+0x2b0>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	3301      	adds	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023d2:	e002      	b.n	80023da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff65 	bl	80022b4 <LL_ADC_IsInternalRegulatorEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	f043 0210 	orr.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff76 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002416:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 8188 	bne.w	8002736 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8184 	bne.w	8002736 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002436:	f043 0202 	orr.w	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff4a 	bl	80022dc <LL_ADC_IsEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d136      	bne.n	80024bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6c      	ldr	r2, [pc, #432]	@ (8002604 <HAL_ADC_Init+0x2b4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_ADC_Init+0x112>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6a      	ldr	r2, [pc, #424]	@ (8002608 <HAL_ADC_Init+0x2b8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_ADC_Init+0x130>
 8002462:	4868      	ldr	r0, [pc, #416]	@ (8002604 <HAL_ADC_Init+0x2b4>)
 8002464:	f7ff ff3a 	bl	80022dc <LL_ADC_IsEnabled>
 8002468:	4604      	mov	r4, r0
 800246a:	4867      	ldr	r0, [pc, #412]	@ (8002608 <HAL_ADC_Init+0x2b8>)
 800246c:	f7ff ff36 	bl	80022dc <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	4323      	orrs	r3, r4
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e008      	b.n	8002492 <HAL_ADC_Init+0x142>
 8002480:	4862      	ldr	r0, [pc, #392]	@ (800260c <HAL_ADC_Init+0x2bc>)
 8002482:	f7ff ff2b 	bl	80022dc <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a5a      	ldr	r2, [pc, #360]	@ (8002604 <HAL_ADC_Init+0x2b4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Init+0x15a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a58      	ldr	r2, [pc, #352]	@ (8002608 <HAL_ADC_Init+0x2b8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x15e>
 80024aa:	4a59      	ldr	r2, [pc, #356]	@ (8002610 <HAL_ADC_Init+0x2c0>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_Init+0x160>
 80024ae:	4a59      	ldr	r2, [pc, #356]	@ (8002614 <HAL_ADC_Init+0x2c4>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff fd04 	bl	8001ec4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_ADC_Init+0x2bc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d129      	bne.n	800251a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e5b      	ldrb	r3, [r3, #25]
 80024ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80024d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d013      	beq.n	8002508 <HAL_ADC_Init+0x1b8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	d00d      	beq.n	8002504 <HAL_ADC_Init+0x1b4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b1c      	cmp	r3, #28
 80024ee:	d007      	beq.n	8002500 <HAL_ADC_Init+0x1b0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b18      	cmp	r3, #24
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_Init+0x1ac>
 80024f8:	2318      	movs	r3, #24
 80024fa:	e006      	b.n	800250a <HAL_ADC_Init+0x1ba>
 80024fc:	2300      	movs	r3, #0
 80024fe:	e004      	b.n	800250a <HAL_ADC_Init+0x1ba>
 8002500:	2310      	movs	r3, #16
 8002502:	e002      	b.n	800250a <HAL_ADC_Init+0x1ba>
 8002504:	2308      	movs	r3, #8
 8002506:	e000      	b.n	800250a <HAL_ADC_Init+0x1ba>
 8002508:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800250a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e00e      	b.n	8002538 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e5b      	ldrb	r3, [r3, #25]
 800251e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002524:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800252a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002532:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d106      	bne.n	8002550 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	3b01      	subs	r3, #1
 8002548:	045b      	lsls	r3, r3, #17
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	@ (800260c <HAL_ADC_Init+0x2bc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_ADC_Init+0x2c8>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	e009      	b.n	80025b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_ADC_Init+0x2cc>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	69b9      	ldr	r1, [r7, #24]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fea1 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 80025c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff feae 	bl	8002328 <LL_ADC_INJ_IsConversionOngoing>
 80025cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 808e 	bne.w	80026f2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 808a 	bne.w	80026f2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <HAL_ADC_Init+0x2bc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d11b      	bne.n	8002620 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e018      	b.n	800262e <HAL_ADC_Init+0x2de>
 80025fc:	24000000 	.word	0x24000000
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	40022000 	.word	0x40022000
 8002608:	40022100 	.word	0x40022100
 800260c:	58026000 	.word	0x58026000
 8002610:	40022300 	.word	0x40022300
 8002614:	58026300 	.word	0x58026300
 8002618:	fff04007 	.word	0xfff04007
 800261c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
 8002624:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_ADC_Init+0x400>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	69b9      	ldr	r1, [r7, #24]
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002648:	2b01      	cmp	r3, #1
 800264a:	d137      	bne.n	80026bc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3f      	ldr	r2, [pc, #252]	@ (8002754 <HAL_ADC_Init+0x404>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d116      	bne.n	800268a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	4b3d      	ldr	r3, [pc, #244]	@ (8002758 <HAL_ADC_Init+0x408>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800267a:	430a      	orrs	r2, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	e020      	b.n	80026cc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	4b32      	ldr	r3, [pc, #200]	@ (800275c <HAL_ADC_Init+0x40c>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002698:	3a01      	subs	r2, #1
 800269a:	0411      	lsls	r1, r2, #16
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80026ac:	430a      	orrs	r2, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e007      	b.n	80026cc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_ADC_Init+0x404>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fd67 	bl	80031c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10c      	bne.n	8002714 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	f023 010f 	bic.w	r1, r3, #15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30
 8002712:	e007      	b.n	8002724 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 020f 	bic.w	r2, r2, #15
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002728:	f023 0303 	bic.w	r3, r3, #3
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
 8002734:	e007      	b.n	8002746 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002746:	7ffb      	ldrb	r3, [r7, #31]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3724      	adds	r7, #36	@ 0x24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	ffffbffc 	.word	0xffffbffc
 8002754:	58026000 	.word	0x58026000
 8002758:	fc00f81f 	.word	0xfc00f81f
 800275c:	fc00f81e 	.word	0xfc00f81e

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b0b9      	sub	sp, #228	@ 0xe4
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800277a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4aab      	ldr	r2, [pc, #684]	@ (8002a30 <HAL_ADC_ConfigChannel+0x2d0>)
 8002782:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x34>
 800278e:	2302      	movs	r3, #2
 8002790:	f000 bcfe 	b.w	8003190 <HAL_ADC_ConfigChannel+0xa30>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fdae 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 84e2 	bne.w	8003172 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db38      	blt.n	8002828 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a9e      	ldr	r2, [pc, #632]	@ (8002a34 <HAL_ADC_ConfigChannel+0x2d4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d033      	beq.n	8002828 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7e>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	e01d      	b.n	800281a <HAL_ADC_ConfigChannel+0xba>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e004      	b.n	8002810 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2201      	movs	r2, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	69d1      	ldr	r1, [r2, #28]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f7ff fc6b 	bl	8002110 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fd5f 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002844:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd6b 	bl	8002328 <LL_ADC_INJ_IsConversionOngoing>
 8002852:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8270 	bne.w	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 826b 	bne.w	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	461a      	mov	r2, r3
 8002878:	f7ff fc76 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6c      	ldr	r2, [pc, #432]	@ (8002a34 <HAL_ADC_ConfigChannel+0x2d4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10d      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028a0:	e032      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028a2:	4b65      	ldr	r3, [pc, #404]	@ (8002a38 <HAL_ADC_ConfigChannel+0x2d8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80028aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x168>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	e01d      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1a4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x18e>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	e00a      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1a4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d048      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6919      	ldr	r1, [r3, #16]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002920:	f7ff fb04 	bl	8001f2c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a42      	ldr	r2, [pc, #264]	@ (8002a34 <HAL_ADC_ConfigChannel+0x2d4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d119      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	461a      	mov	r2, r3
 800293c:	f7ff fb9c 	bl	8002078 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1f8>
 8002952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002956:	e000      	b.n	800295a <HAL_ADC_ConfigChannel+0x1fa>
 8002958:	2300      	movs	r3, #0
 800295a:	461a      	mov	r2, r3
 800295c:	f7ff fb6a 	bl	8002034 <LL_ADC_SetOffsetSaturation>
 8002960:	e1ee      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_ADC_ConfigChannel+0x21a>
 8002974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002978:	e000      	b.n	800297c <HAL_ADC_ConfigChannel+0x21c>
 800297a:	2300      	movs	r3, #0
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fb37 	bl	8001ff0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6919      	ldr	r1, [r3, #16]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7e1b      	ldrb	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x238>
 8002992:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002996:	e000      	b.n	800299a <HAL_ADC_ConfigChannel+0x23a>
 8002998:	2300      	movs	r3, #0
 800299a:	461a      	mov	r2, r3
 800299c:	f7ff fb0e 	bl	8001fbc <LL_ADC_SetDataRightShift>
 80029a0:	e1ce      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <HAL_ADC_ConfigChannel+0x2d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	f040 8181 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff faeb 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_ADC_ConfigChannel+0x27a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fae0 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	e01e      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x2b8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fad5 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80029f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	e004      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x2dc>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	e01e      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x30e>
 8002a30:	47ff0000 	.word	0x47ff0000
 8002a34:	58026000 	.word	0x58026000
 8002a38:	5c001000 	.word	0x5c001000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb1e 	bl	80020bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fa82 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x34c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fa77 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	e01e      	b.n	8002aea <HAL_ADC_ConfigChannel+0x38a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fa6c 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e004      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x3a2>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	e018      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x3d4>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fabb 	bl	80020bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fa1f 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x412>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2102      	movs	r1, #2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa14 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	e01e      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x450>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2102      	movs	r1, #2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fa09 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e004      	b.n	8002bae <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x468>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	e014      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x492>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e004      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fa5c 	bl	80020bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2103      	movs	r1, #3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f9c0 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x4d0>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2103      	movs	r1, #3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f9b5 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	e017      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x500>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2103      	movs	r1, #3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f9aa 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x518>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	e011      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x53c>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d14f      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fa07 	bl	80020bc <LL_ADC_SetOffsetState>
 8002cae:	e047      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cd2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cf6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	069b      	lsls	r3, r3, #26
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d1a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	069b      	lsls	r3, r3, #26
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fac9 	bl	80022dc <LL_ADC_IsEnabled>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8219 	bne.w	8003184 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f7ff fa2e 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4aa1      	ldr	r2, [pc, #644]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x890>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	f040 812e 	bne.w	8002fcc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x638>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2b09      	cmp	r3, #9
 8002d8e:	bf94      	ite	ls
 8002d90:	2301      	movls	r3, #1
 8002d92:	2300      	movhi	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e019      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x66c>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	bf94      	ite	ls
 8002dc6:	2301      	movls	r3, #1
 8002dc8:	2300      	movhi	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d079      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x68c>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	069b      	lsls	r3, r3, #26
 8002de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dea:	e015      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x6b8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	069b      	lsls	r3, r3, #26
 8002e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x6d8>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	e017      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x708>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2101      	movs	r1, #1
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	ea42 0103 	orr.w	r1, r2, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x72e>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	e018      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x760>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e003      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	e07e      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x780>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	069b      	lsls	r3, r3, #26
 8002eda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ede:	e015      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x7ac>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	069b      	lsls	r3, r3, #26
 8002f08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x7cc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	e017      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x7fc>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	61bb      	str	r3, [r7, #24]
  return result;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	ea42 0103 	orr.w	r1, r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x828>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	3301      	adds	r3, #1
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b1e      	subs	r3, #30
 8002f80:	051b      	lsls	r3, r3, #20
 8002f82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	e01b      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x860>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	60fb      	str	r3, [r7, #12]
  return result;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e003      	b.n	8002fac <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 021f 	and.w	r2, r3, #31
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3b1e      	subs	r3, #30
 8002fba:	051b      	lsls	r3, r3, #20
 8002fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	6892      	ldr	r2, [r2, #8]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7ff f8ce 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f280 80d7 	bge.w	8003184 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a06      	ldr	r2, [pc, #24]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x894>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x88a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x898>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10a      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x8a0>
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <HAL_ADC_ConfigChannel+0x89c>)
 8002fec:	e009      	b.n	8003002 <HAL_ADC_ConfigChannel+0x8a2>
 8002fee:	bf00      	nop
 8002ff0:	47ff0000 	.word	0x47ff0000
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022300 	.word	0x40022300
 8003000:	4b65      	ldr	r3, [pc, #404]	@ (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ff84 	bl	8001f10 <LL_ADC_GetCommonPathInternalCh>
 8003008:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a62      	ldr	r2, [pc, #392]	@ (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x8c0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10e      	bne.n	800303e <HAL_ADC_ConfigChannel+0x8de>
 8003020:	485e      	ldr	r0, [pc, #376]	@ (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 8003022:	f7ff f95b 	bl	80022dc <LL_ADC_IsEnabled>
 8003026:	4604      	mov	r4, r0
 8003028:	485d      	ldr	r0, [pc, #372]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 800302a:	f7ff f957 	bl	80022dc <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	4323      	orrs	r3, r4
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e008      	b.n	8003050 <HAL_ADC_ConfigChannel+0x8f0>
 800303e:	4859      	ldr	r0, [pc, #356]	@ (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003040:	f7ff f94c 	bl	80022dc <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8084 	beq.w	800315e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_ADC_ConfigChannel+0xa48>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d132      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x966>
 8003060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d12c      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4c      	ldr	r2, [pc, #304]	@ (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f040 8086 	bne.w	8003184 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a47      	ldr	r2, [pc, #284]	@ (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_ADC_ConfigChannel+0x92c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a46      	ldr	r2, [pc, #280]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x930>
 800308c:	4a47      	ldr	r2, [pc, #284]	@ (80031ac <HAL_ADC_ConfigChannel+0xa4c>)
 800308e:	e000      	b.n	8003092 <HAL_ADC_ConfigChannel+0x932>
 8003090:	4a41      	ldr	r2, [pc, #260]	@ (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003092:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003096:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7fe ff24 	bl	8001eea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a2:	4b43      	ldr	r3, [pc, #268]	@ (80031b0 <HAL_ADC_ConfigChannel+0xa50>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	4a42      	ldr	r2, [pc, #264]	@ (80031b4 <HAL_ADC_ConfigChannel+0xa54>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	3301      	adds	r3, #1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030b6:	e002      	b.n	80030be <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c4:	e05e      	b.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3b      	ldr	r2, [pc, #236]	@ (80031b8 <HAL_ADC_ConfigChannel+0xa58>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d120      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x9b2>
 80030d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11a      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d14e      	bne.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x99a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x99e>
 80030fa:	4a2c      	ldr	r2, [pc, #176]	@ (80031ac <HAL_ADC_ConfigChannel+0xa4c>)
 80030fc:	e000      	b.n	8003100 <HAL_ADC_ConfigChannel+0x9a0>
 80030fe:	4a26      	ldr	r2, [pc, #152]	@ (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003104:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f7fe feed 	bl	8001eea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003110:	e038      	b.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a29      	ldr	r2, [pc, #164]	@ (80031bc <HAL_ADC_ConfigChannel+0xa5c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d133      	bne.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
 800311c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d12d      	bne.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d128      	bne.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a19      	ldr	r2, [pc, #100]	@ (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x9e6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x9ea>
 8003146:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_ADC_ConfigChannel+0xa4c>)
 8003148:	e000      	b.n	800314c <HAL_ADC_ConfigChannel+0x9ec>
 800314a:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 800314c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003150:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f7fe fec7 	bl	8001eea <LL_ADC_SetCommonPathInternalCh>
 800315c:	e012      	b.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003170:	e008      	b.n	8003184 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800318c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003190:	4618      	mov	r0, r3
 8003192:	37e4      	adds	r7, #228	@ 0xe4
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	58026300 	.word	0x58026300
 800319c:	40022000 	.word	0x40022000
 80031a0:	40022100 	.word	0x40022100
 80031a4:	58026000 	.word	0x58026000
 80031a8:	c7520000 	.word	0xc7520000
 80031ac:	40022300 	.word	0x40022300
 80031b0:	24000000 	.word	0x24000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	c3210000 	.word	0xc3210000
 80031bc:	cb840000 	.word	0xcb840000

080031c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003380 <ADC_ConfigureBoostMode+0x1c0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <ADC_ConfigureBoostMode+0x1c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <ADC_ConfigureBoostMode+0x1c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d109      	bne.n	80031f0 <ADC_ConfigureBoostMode+0x30>
 80031dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003388 <ADC_ConfigureBoostMode+0x1c8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e008      	b.n	8003202 <ADC_ConfigureBoostMode+0x42>
 80031f0:	4b66      	ldr	r3, [pc, #408]	@ (800338c <ADC_ConfigureBoostMode+0x1cc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01c      	beq.n	8003240 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003206:	f003 fbb5 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 800320a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003214:	d010      	beq.n	8003238 <ADC_ConfigureBoostMode+0x78>
 8003216:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800321a:	d873      	bhi.n	8003304 <ADC_ConfigureBoostMode+0x144>
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d002      	beq.n	8003228 <ADC_ConfigureBoostMode+0x68>
 8003222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003226:	d16d      	bne.n	8003304 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	60fb      	str	r3, [r7, #12]
        break;
 8003236:	e068      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	60fb      	str	r3, [r7, #12]
        break;
 800323e:	e064      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003240:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f004 fd90 	bl	8007d6c <HAL_RCCEx_GetPeriphCLKFreq>
 800324c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003256:	d051      	beq.n	80032fc <ADC_ConfigureBoostMode+0x13c>
 8003258:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800325c:	d854      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 800325e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003262:	d047      	beq.n	80032f4 <ADC_ConfigureBoostMode+0x134>
 8003264:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003268:	d84e      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 800326a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800326e:	d03d      	beq.n	80032ec <ADC_ConfigureBoostMode+0x12c>
 8003270:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003274:	d848      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800327a:	d033      	beq.n	80032e4 <ADC_ConfigureBoostMode+0x124>
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d842      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 8003282:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003286:	d029      	beq.n	80032dc <ADC_ConfigureBoostMode+0x11c>
 8003288:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800328c:	d83c      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 800328e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003292:	d01a      	beq.n	80032ca <ADC_ConfigureBoostMode+0x10a>
 8003294:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003298:	d836      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 800329a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800329e:	d014      	beq.n	80032ca <ADC_ConfigureBoostMode+0x10a>
 80032a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032a4:	d830      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 80032a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032aa:	d00e      	beq.n	80032ca <ADC_ConfigureBoostMode+0x10a>
 80032ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032b0:	d82a      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 80032b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032b6:	d008      	beq.n	80032ca <ADC_ConfigureBoostMode+0x10a>
 80032b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032bc:	d824      	bhi.n	8003308 <ADC_ConfigureBoostMode+0x148>
 80032be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032c2:	d002      	beq.n	80032ca <ADC_ConfigureBoostMode+0x10a>
 80032c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032c8:	d11e      	bne.n	8003308 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	60fb      	str	r3, [r7, #12]
        break;
 80032da:	e016      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
        break;
 80032e2:	e012      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	60fb      	str	r3, [r7, #12]
        break;
 80032ea:	e00e      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	60fb      	str	r3, [r7, #12]
        break;
 80032f2:	e00a      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	09db      	lsrs	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
        break;
 80032fa:	e006      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	60fb      	str	r3, [r7, #12]
        break;
 8003302:	e002      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003308:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <ADC_ConfigureBoostMode+0x1d0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d808      	bhi.n	800332a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003326:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003328:	e025      	b.n	8003376 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <ADC_ConfigureBoostMode+0x1d4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d80a      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	e016      	b.n	8003376 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <ADC_ConfigureBoostMode+0x1d8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d80a      	bhi.n	8003366 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	e007      	b.n	8003376 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40022000 	.word	0x40022000
 8003384:	40022100 	.word	0x40022100
 8003388:	40022300 	.word	0x40022300
 800338c:	58026300 	.word	0x58026300
 8003390:	005f5e10 	.word	0x005f5e10
 8003394:	00bebc20 	.word	0x00bebc20
 8003398:	017d7840 	.word	0x017d7840

0800339c <LL_ADC_IsEnabled>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <LL_ADC_IsEnabled+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_ADC_IsEnabled+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d101      	bne.n	80033da <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b0a3      	sub	sp, #140	@ 0x8c
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003402:	2302      	movs	r3, #2
 8003404:	e0c1      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5e      	ldr	r2, [pc, #376]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d102      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003420:	4b5d      	ldr	r3, [pc, #372]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e001      	b.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0a0      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffb9 	bl	80033c2 <LL_ADC_REG_IsConversionOngoing>
 8003450:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ffb2 	bl	80033c2 <LL_ADC_REG_IsConversionOngoing>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 8081 	bne.w	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d17c      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a46      	ldr	r2, [pc, #280]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003482:	4b46      	ldr	r3, [pc, #280]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003484:	e000      	b.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003486:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003488:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d039      	beq.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	431a      	orrs	r2, r3
 80034a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a39      	ldr	r2, [pc, #228]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10e      	bne.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80034b8:	4836      	ldr	r0, [pc, #216]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034ba:	f7ff ff6f 	bl	800339c <LL_ADC_IsEnabled>
 80034be:	4604      	mov	r4, r0
 80034c0:	4835      	ldr	r0, [pc, #212]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034c2:	f7ff ff6b 	bl	800339c <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4323      	orrs	r3, r4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e008      	b.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80034d6:	4833      	ldr	r0, [pc, #204]	@ (80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80034d8:	f7ff ff60 	bl	800339c <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d047      	beq.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b2d      	ldr	r3, [pc, #180]	@ (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	6811      	ldr	r1, [r2, #0]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	6892      	ldr	r2, [r2, #8]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	431a      	orrs	r2, r3
 8003500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003502:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003504:	e03a      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800350e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003510:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10e      	bne.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003526:	481b      	ldr	r0, [pc, #108]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003528:	f7ff ff38 	bl	800339c <LL_ADC_IsEnabled>
 800352c:	4604      	mov	r4, r0
 800352e:	481a      	ldr	r0, [pc, #104]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003530:	f7ff ff34 	bl	800339c <LL_ADC_IsEnabled>
 8003534:	4603      	mov	r3, r0
 8003536:	4323      	orrs	r3, r4
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e008      	b.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003544:	4817      	ldr	r0, [pc, #92]	@ (80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003546:	f7ff ff29 	bl	800339c <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d010      	beq.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800355a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003560:	4013      	ands	r3, r2
 8003562:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003564:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003566:	e009      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800357a:	e000      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800357c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003586:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800358a:	4618      	mov	r0, r3
 800358c:	378c      	adds	r7, #140	@ 0x8c
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40022100 	.word	0x40022100
 800359c:	40022300 	.word	0x40022300
 80035a0:	58026300 	.word	0x58026300
 80035a4:	58026000 	.word	0x58026000
 80035a8:	fffff0e0 	.word	0xfffff0e0

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <__NVIC_SetPriorityGrouping+0x40>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <__NVIC_SetPriorityGrouping+0x40>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	05fa0000 	.word	0x05fa0000

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	@ (8003648 <__NVIC_EnableIRQ+0x38>)
 800362a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	db0a      	blt.n	8003676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	490c      	ldr	r1, [pc, #48]	@ (8003698 <__NVIC_SetPriority+0x4c>)
 8003666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	440b      	add	r3, r1
 8003670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003674:	e00a      	b.n	800368c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4908      	ldr	r1, [pc, #32]	@ (800369c <__NVIC_SetPriority+0x50>)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	3b04      	subs	r3, #4
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	440b      	add	r3, r1
 800368a:	761a      	strb	r2, [r3, #24]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f1c3 0307 	rsb	r3, r3, #7
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf28      	it	cs
 80036be:	2304      	movcs	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d902      	bls.n	80036d0 <NVIC_EncodePriority+0x30>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b03      	subs	r3, #3
 80036ce:	e000      	b.n	80036d2 <NVIC_EncodePriority+0x32>
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	4313      	orrs	r3, r2
         );
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003718:	d301      	bcc.n	800371e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371a:	2301      	movs	r3, #1
 800371c:	e00f      	b.n	800373e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <SysTick_Config+0x40>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003726:	210f      	movs	r1, #15
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f7ff ff8e 	bl	800364c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <SysTick_Config+0x40>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003736:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <SysTick_Config+0x40>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	e000e010 	.word	0xe000e010

0800374c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff29 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003770:	f7ff ff40 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff ff90 	bl	80036a0 <NVIC_EncodePriority>
 8003780:	4602      	mov	r2, r0
 8003782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff5f 	bl	800364c <__NVIC_SetPriority>
}
 800378e:	bf00      	nop
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff33 	bl	8003610 <__NVIC_EnableIRQ>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffa4 	bl	8003708 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80037d0:	f3bf 8f5f 	dmb	sy
}
 80037d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <HAL_MPU_Disable+0x28>)
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	4a06      	ldr	r2, [pc, #24]	@ (80037f4 <HAL_MPU_Disable+0x28>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80037e2:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_MPU_Disable+0x2c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	605a      	str	r2, [r3, #4]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	e000ed90 	.word	0xe000ed90

080037fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003804:	4a0b      	ldr	r2, [pc, #44]	@ (8003834 <HAL_MPU_Enable+0x38>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800380e:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <HAL_MPU_Enable+0x3c>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <HAL_MPU_Enable+0x3c>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003818:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800381a:	f3bf 8f4f 	dsb	sy
}
 800381e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003820:	f3bf 8f6f 	isb	sy
}
 8003824:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed90 	.word	0xe000ed90
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	785a      	ldrb	r2, [r3, #1]
 8003848:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <HAL_MPU_ConfigRegion+0x7c>)
 800384a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_MPU_ConfigRegion+0x7c>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <HAL_MPU_ConfigRegion+0x7c>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_MPU_ConfigRegion+0x7c>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7adb      	ldrb	r3, [r3, #11]
 800386a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800386c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7a9b      	ldrb	r3, [r3, #10]
 8003872:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003874:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7b5b      	ldrb	r3, [r3, #13]
 800387a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800387c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7b9b      	ldrb	r3, [r3, #14]
 8003882:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7bdb      	ldrb	r3, [r3, #15]
 800388a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800388c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7a5b      	ldrb	r3, [r3, #9]
 8003892:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7a1b      	ldrb	r3, [r3, #8]
 800389a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800389c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a4:	4a04      	ldr	r2, [pc, #16]	@ (80038b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a8:	6113      	str	r3, [r2, #16]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000ed90 	.word	0xe000ed90

080038bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e014      	b.n	80038f8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	791b      	ldrb	r3, [r3, #4]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fdfc 	bl	80014dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_DAC_ConfigChannel+0x1e>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e12a      	b.n	8003b78 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	795b      	ldrb	r3, [r3, #5]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_DAC_ConfigChannel+0x2e>
 800392a:	2302      	movs	r3, #2
 800392c:	e124      	b.n	8003b78 <HAL_DAC_ConfigChannel+0x278>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2202      	movs	r2, #2
 8003938:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d17a      	bne.n	8003a38 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003942:	f7fe fab3 	bl	8001eac <HAL_GetTick>
 8003946:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13d      	bne.n	80039ca <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800394e:	e018      	b.n	8003982 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003950:	f7fe faac 	bl	8001eac <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d911      	bls.n	8003982 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003964:	4b86      	ldr	r3, [pc, #536]	@ (8003b80 <HAL_DAC_ConfigChannel+0x280>)
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f043 0208 	orr.w	r2, r3, #8
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2203      	movs	r2, #3
 800397c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0fa      	b.n	8003b78 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003988:	4b7d      	ldr	r3, [pc, #500]	@ (8003b80 <HAL_DAC_ConfigChannel+0x280>)
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1df      	bne.n	8003950 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	6992      	ldr	r2, [r2, #24]
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
 800399a:	e020      	b.n	80039de <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800399c:	f7fe fa86 	bl	8001eac <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d90f      	bls.n	80039ca <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da0a      	bge.n	80039ca <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f043 0208 	orr.w	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2203      	movs	r2, #3
 80039c4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0d6      	b.n	8003b78 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dbe3      	blt.n	800399c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	6992      	ldr	r2, [r2, #24]
 80039dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	ea02 0103 	and.w	r1, r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	21ff      	movs	r1, #255	@ 0xff
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	ea02 0103 	and.w	r1, r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d11d      	bne.n	8003a7c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	221f      	movs	r2, #31
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	e00f      	b.n	8003ac6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d102      	bne.n	8003ab4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	e008      	b.n	8003ac6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	e001      	b.n	8003ac6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	22c0      	movs	r2, #192	@ 0xc0
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	400a      	ands	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20008000 	.word	0x20008000

08003b84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b8c:	f7fe f98e 	bl	8001eac <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e312      	b.n	80041c2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a66      	ldr	r2, [pc, #408]	@ (8003d3c <HAL_DMA_Init+0x1b8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d04a      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_DMA_Init+0x1bc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d045      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a63      	ldr	r2, [pc, #396]	@ (8003d44 <HAL_DMA_Init+0x1c0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d040      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a62      	ldr	r2, [pc, #392]	@ (8003d48 <HAL_DMA_Init+0x1c4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d03b      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a60      	ldr	r2, [pc, #384]	@ (8003d4c <HAL_DMA_Init+0x1c8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d036      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8003d50 <HAL_DMA_Init+0x1cc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d031      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d54 <HAL_DMA_Init+0x1d0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02c      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d58 <HAL_DMA_Init+0x1d4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d027      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d5c <HAL_DMA_Init+0x1d8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d022      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a59      	ldr	r2, [pc, #356]	@ (8003d60 <HAL_DMA_Init+0x1dc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01d      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a57      	ldr	r2, [pc, #348]	@ (8003d64 <HAL_DMA_Init+0x1e0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d018      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_DMA_Init+0x1e4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a54      	ldr	r2, [pc, #336]	@ (8003d6c <HAL_DMA_Init+0x1e8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a53      	ldr	r2, [pc, #332]	@ (8003d70 <HAL_DMA_Init+0x1ec>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	@ (8003d74 <HAL_DMA_Init+0x1f0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_DMA_Init+0xb8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a50      	ldr	r2, [pc, #320]	@ (8003d78 <HAL_DMA_Init+0x1f4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_DMA_Init+0xbc>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_DMA_Init+0xbe>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 813c 	beq.w	8003ec0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a37      	ldr	r2, [pc, #220]	@ (8003d3c <HAL_DMA_Init+0x1b8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04a      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a36      	ldr	r2, [pc, #216]	@ (8003d40 <HAL_DMA_Init+0x1bc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d045      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a34      	ldr	r2, [pc, #208]	@ (8003d44 <HAL_DMA_Init+0x1c0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d040      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a33      	ldr	r2, [pc, #204]	@ (8003d48 <HAL_DMA_Init+0x1c4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d03b      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a31      	ldr	r2, [pc, #196]	@ (8003d4c <HAL_DMA_Init+0x1c8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d036      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <HAL_DMA_Init+0x1cc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d031      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2e      	ldr	r2, [pc, #184]	@ (8003d54 <HAL_DMA_Init+0x1d0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02c      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <HAL_DMA_Init+0x1d4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d027      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2b      	ldr	r2, [pc, #172]	@ (8003d5c <HAL_DMA_Init+0x1d8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_DMA_Init+0x1dc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d01d      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	@ (8003d64 <HAL_DMA_Init+0x1e0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <HAL_DMA_Init+0x1e4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	@ (8003d6c <HAL_DMA_Init+0x1e8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <HAL_DMA_Init+0x1ec>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	@ (8003d74 <HAL_DMA_Init+0x1f0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_DMA_Init+0x174>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	@ (8003d78 <HAL_DMA_Init+0x1f4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <HAL_DMA_Init+0x186>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e007      	b.n	8003d1a <HAL_DMA_Init+0x196>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d1a:	e02f      	b.n	8003d7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d1c:	f7fe f8c6 	bl	8001eac <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d928      	bls.n	8003d7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2203      	movs	r2, #3
 8003d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e242      	b.n	80041c2 <HAL_DMA_Init+0x63e>
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1c8      	bne.n	8003d1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4b83      	ldr	r3, [pc, #524]	@ (8003fa4 <HAL_DMA_Init+0x420>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003da2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d107      	bne.n	8003de0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b28      	cmp	r3, #40	@ 0x28
 8003de6:	d903      	bls.n	8003df0 <HAL_DMA_Init+0x26c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dee:	d91f      	bls.n	8003e30 <HAL_DMA_Init+0x2ac>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003df6:	d903      	bls.n	8003e00 <HAL_DMA_Init+0x27c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b42      	cmp	r3, #66	@ 0x42
 8003dfe:	d917      	bls.n	8003e30 <HAL_DMA_Init+0x2ac>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b46      	cmp	r3, #70	@ 0x46
 8003e06:	d903      	bls.n	8003e10 <HAL_DMA_Init+0x28c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b48      	cmp	r3, #72	@ 0x48
 8003e0e:	d90f      	bls.n	8003e30 <HAL_DMA_Init+0x2ac>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e16:	d903      	bls.n	8003e20 <HAL_DMA_Init+0x29c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b52      	cmp	r3, #82	@ 0x52
 8003e1e:	d907      	bls.n	8003e30 <HAL_DMA_Init+0x2ac>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b73      	cmp	r3, #115	@ 0x73
 8003e26:	d905      	bls.n	8003e34 <HAL_DMA_Init+0x2b0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b77      	cmp	r3, #119	@ 0x77
 8003e2e:	d801      	bhi.n	8003e34 <HAL_DMA_Init+0x2b0>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_Init+0x2b2>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e40:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f023 0307 	bic.w	r3, r3, #7
 8003e58:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d117      	bne.n	8003e9c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f001 f9b4 	bl	80051ec <DMA_CheckFifoParam>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e192      	b.n	80041c2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 f8ef 	bl	8005088 <DMA_CalcBaseAndBitshift>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	223f      	movs	r2, #63	@ 0x3f
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	e0c8      	b.n	8004052 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <HAL_DMA_Init+0x424>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a37      	ldr	r2, [pc, #220]	@ (8003fac <HAL_DMA_Init+0x428>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a35      	ldr	r2, [pc, #212]	@ (8003fb0 <HAL_DMA_Init+0x42c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	@ (8003fb4 <HAL_DMA_Init+0x430>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <HAL_DMA_Init+0x434>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a31      	ldr	r2, [pc, #196]	@ (8003fbc <HAL_DMA_Init+0x438>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <HAL_DMA_Init+0x43c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_Init+0x38c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <HAL_DMA_Init+0x440>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMA_Init+0x390>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_DMA_Init+0x392>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8092 	beq.w	8004040 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a21      	ldr	r2, [pc, #132]	@ (8003fa8 <HAL_DMA_Init+0x424>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d021      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	@ (8003fac <HAL_DMA_Init+0x428>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01c      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <HAL_DMA_Init+0x42c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <HAL_DMA_Init+0x430>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d012      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <HAL_DMA_Init+0x434>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00d      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <HAL_DMA_Init+0x438>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d008      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <HAL_DMA_Init+0x43c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <HAL_DMA_Init+0x3e6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	@ (8003fc4 <HAL_DMA_Init+0x440>)
 8003f68:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_DMA_Init+0x444>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b40      	cmp	r3, #64	@ 0x40
 8003f90:	d01c      	beq.n	8003fcc <HAL_DMA_Init+0x448>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d102      	bne.n	8003fa0 <HAL_DMA_Init+0x41c>
 8003f9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f9e:	e016      	b.n	8003fce <HAL_DMA_Init+0x44a>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e014      	b.n	8003fce <HAL_DMA_Init+0x44a>
 8003fa4:	fe10803f 	.word	0xfe10803f
 8003fa8:	58025408 	.word	0x58025408
 8003fac:	5802541c 	.word	0x5802541c
 8003fb0:	58025430 	.word	0x58025430
 8003fb4:	58025444 	.word	0x58025444
 8003fb8:	58025458 	.word	0x58025458
 8003fbc:	5802546c 	.word	0x5802546c
 8003fc0:	58025480 	.word	0x58025480
 8003fc4:	58025494 	.word	0x58025494
 8003fc8:	fffe000f 	.word	0xfffe000f
 8003fcc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ffc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b6e      	ldr	r3, [pc, #440]	@ (80041cc <HAL_DMA_Init+0x648>)
 8004014:	4413      	add	r3, r2
 8004016:	4a6e      	ldr	r2, [pc, #440]	@ (80041d0 <HAL_DMA_Init+0x64c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	009a      	lsls	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 f82f 	bl	8005088 <DMA_CalcBaseAndBitshift>
 800402a:	4603      	mov	r3, r0
 800402c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2201      	movs	r2, #1
 8004038:	409a      	lsls	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e008      	b.n	8004052 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2240      	movs	r2, #64	@ 0x40
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0b7      	b.n	80041c2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5f      	ldr	r2, [pc, #380]	@ (80041d4 <HAL_DMA_Init+0x650>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d072      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a5d      	ldr	r2, [pc, #372]	@ (80041d8 <HAL_DMA_Init+0x654>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d06d      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5c      	ldr	r2, [pc, #368]	@ (80041dc <HAL_DMA_Init+0x658>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d068      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5a      	ldr	r2, [pc, #360]	@ (80041e0 <HAL_DMA_Init+0x65c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d063      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a59      	ldr	r2, [pc, #356]	@ (80041e4 <HAL_DMA_Init+0x660>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d05e      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a57      	ldr	r2, [pc, #348]	@ (80041e8 <HAL_DMA_Init+0x664>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d059      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a56      	ldr	r2, [pc, #344]	@ (80041ec <HAL_DMA_Init+0x668>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d054      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a54      	ldr	r2, [pc, #336]	@ (80041f0 <HAL_DMA_Init+0x66c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04f      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a53      	ldr	r2, [pc, #332]	@ (80041f4 <HAL_DMA_Init+0x670>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d04a      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a51      	ldr	r2, [pc, #324]	@ (80041f8 <HAL_DMA_Init+0x674>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d045      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a50      	ldr	r2, [pc, #320]	@ (80041fc <HAL_DMA_Init+0x678>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004200 <HAL_DMA_Init+0x67c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d03b      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004204 <HAL_DMA_Init+0x680>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d036      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004208 <HAL_DMA_Init+0x684>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4a      	ldr	r2, [pc, #296]	@ (800420c <HAL_DMA_Init+0x688>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d02c      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a48      	ldr	r2, [pc, #288]	@ (8004210 <HAL_DMA_Init+0x68c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a47      	ldr	r2, [pc, #284]	@ (8004214 <HAL_DMA_Init+0x690>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a45      	ldr	r2, [pc, #276]	@ (8004218 <HAL_DMA_Init+0x694>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a44      	ldr	r2, [pc, #272]	@ (800421c <HAL_DMA_Init+0x698>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a42      	ldr	r2, [pc, #264]	@ (8004220 <HAL_DMA_Init+0x69c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a41      	ldr	r2, [pc, #260]	@ (8004224 <HAL_DMA_Init+0x6a0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a3f      	ldr	r2, [pc, #252]	@ (8004228 <HAL_DMA_Init+0x6a4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3e      	ldr	r2, [pc, #248]	@ (800422c <HAL_DMA_Init+0x6a8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_DMA_Init+0x5be>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3c      	ldr	r2, [pc, #240]	@ (8004230 <HAL_DMA_Init+0x6ac>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_DMA_Init+0x5c2>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_DMA_Init+0x5c4>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d032      	beq.n	80041b2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 f8c9 	bl	80052e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d102      	bne.n	8004160 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004174:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_DMA_Init+0x61c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b08      	cmp	r3, #8
 8004184:	d80c      	bhi.n	80041a0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 f946 	bl	8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e008      	b.n	80041b2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	a7fdabf8 	.word	0xa7fdabf8
 80041d0:	cccccccd 	.word	0xcccccccd
 80041d4:	40020010 	.word	0x40020010
 80041d8:	40020028 	.word	0x40020028
 80041dc:	40020040 	.word	0x40020040
 80041e0:	40020058 	.word	0x40020058
 80041e4:	40020070 	.word	0x40020070
 80041e8:	40020088 	.word	0x40020088
 80041ec:	400200a0 	.word	0x400200a0
 80041f0:	400200b8 	.word	0x400200b8
 80041f4:	40020410 	.word	0x40020410
 80041f8:	40020428 	.word	0x40020428
 80041fc:	40020440 	.word	0x40020440
 8004200:	40020458 	.word	0x40020458
 8004204:	40020470 	.word	0x40020470
 8004208:	40020488 	.word	0x40020488
 800420c:	400204a0 	.word	0x400204a0
 8004210:	400204b8 	.word	0x400204b8
 8004214:	58025408 	.word	0x58025408
 8004218:	5802541c 	.word	0x5802541c
 800421c:	58025430 	.word	0x58025430
 8004220:	58025444 	.word	0x58025444
 8004224:	58025458 	.word	0x58025458
 8004228:	5802546c 	.word	0x5802546c
 800422c:	58025480 	.word	0x58025480
 8004230:	58025494 	.word	0x58025494

08004234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	@ 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004240:	4b67      	ldr	r3, [pc, #412]	@ (80043e0 <HAL_DMA_IRQHandler+0x1ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a67      	ldr	r2, [pc, #412]	@ (80043e4 <HAL_DMA_IRQHandler+0x1b0>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a5f      	ldr	r2, [pc, #380]	@ (80043e8 <HAL_DMA_IRQHandler+0x1b4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d04a      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a5d      	ldr	r2, [pc, #372]	@ (80043ec <HAL_DMA_IRQHandler+0x1b8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d045      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a5c      	ldr	r2, [pc, #368]	@ (80043f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d040      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a5a      	ldr	r2, [pc, #360]	@ (80043f4 <HAL_DMA_IRQHandler+0x1c0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d03b      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a59      	ldr	r2, [pc, #356]	@ (80043f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d036      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a57      	ldr	r2, [pc, #348]	@ (80043fc <HAL_DMA_IRQHandler+0x1c8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d031      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a56      	ldr	r2, [pc, #344]	@ (8004400 <HAL_DMA_IRQHandler+0x1cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d02c      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a54      	ldr	r2, [pc, #336]	@ (8004404 <HAL_DMA_IRQHandler+0x1d0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d027      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a53      	ldr	r2, [pc, #332]	@ (8004408 <HAL_DMA_IRQHandler+0x1d4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a51      	ldr	r2, [pc, #324]	@ (800440c <HAL_DMA_IRQHandler+0x1d8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a50      	ldr	r2, [pc, #320]	@ (8004410 <HAL_DMA_IRQHandler+0x1dc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004414 <HAL_DMA_IRQHandler+0x1e0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004418 <HAL_DMA_IRQHandler+0x1e4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4b      	ldr	r2, [pc, #300]	@ (800441c <HAL_DMA_IRQHandler+0x1e8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004420 <HAL_DMA_IRQHandler+0x1ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_DMA_IRQHandler+0xd2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a48      	ldr	r2, [pc, #288]	@ (8004424 <HAL_DMA_IRQHandler+0x1f0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_DMA_IRQHandler+0xd6>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_DMA_IRQHandler+0xd8>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 842b 	beq.w	8004b68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2208      	movs	r2, #8
 800431c:	409a      	lsls	r2, r3
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80a2 	beq.w	800446c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2e      	ldr	r2, [pc, #184]	@ (80043e8 <HAL_DMA_IRQHandler+0x1b4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2d      	ldr	r2, [pc, #180]	@ (80043ec <HAL_DMA_IRQHandler+0x1b8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2b      	ldr	r2, [pc, #172]	@ (80043f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2a      	ldr	r2, [pc, #168]	@ (80043f4 <HAL_DMA_IRQHandler+0x1c0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a28      	ldr	r2, [pc, #160]	@ (80043f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a27      	ldr	r2, [pc, #156]	@ (80043fc <HAL_DMA_IRQHandler+0x1c8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a25      	ldr	r2, [pc, #148]	@ (8004400 <HAL_DMA_IRQHandler+0x1cc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a24      	ldr	r2, [pc, #144]	@ (8004404 <HAL_DMA_IRQHandler+0x1d0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a22      	ldr	r2, [pc, #136]	@ (8004408 <HAL_DMA_IRQHandler+0x1d4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	@ (800440c <HAL_DMA_IRQHandler+0x1d8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1f      	ldr	r2, [pc, #124]	@ (8004410 <HAL_DMA_IRQHandler+0x1dc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1e      	ldr	r2, [pc, #120]	@ (8004414 <HAL_DMA_IRQHandler+0x1e0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <HAL_DMA_IRQHandler+0x1e4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_DMA_IRQHandler+0x1e8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_DMA_IRQHandler+0x1ec>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x194>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <HAL_DMA_IRQHandler+0x1f0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d12f      	bne.n	8004428 <HAL_DMA_IRQHandler+0x1f4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e02e      	b.n	800443c <HAL_DMA_IRQHandler+0x208>
 80043de:	bf00      	nop
 80043e0:	24000000 	.word	0x24000000
 80043e4:	1b4e81b5 	.word	0x1b4e81b5
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2208      	movs	r2, #8
 800445a:	409a      	lsls	r2, r3
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	fa22 f303 	lsr.w	r3, r2, r3
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d06e      	beq.n	8004560 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a69      	ldr	r2, [pc, #420]	@ (800462c <HAL_DMA_IRQHandler+0x3f8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_DMA_IRQHandler+0x3fc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a66      	ldr	r2, [pc, #408]	@ (8004634 <HAL_DMA_IRQHandler+0x400>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a64      	ldr	r2, [pc, #400]	@ (8004638 <HAL_DMA_IRQHandler+0x404>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a63      	ldr	r2, [pc, #396]	@ (800463c <HAL_DMA_IRQHandler+0x408>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a61      	ldr	r2, [pc, #388]	@ (8004640 <HAL_DMA_IRQHandler+0x40c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a60      	ldr	r2, [pc, #384]	@ (8004644 <HAL_DMA_IRQHandler+0x410>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_DMA_IRQHandler+0x414>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5d      	ldr	r2, [pc, #372]	@ (800464c <HAL_DMA_IRQHandler+0x418>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_DMA_IRQHandler+0x41c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004654 <HAL_DMA_IRQHandler+0x420>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_DMA_IRQHandler+0x424>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a57      	ldr	r2, [pc, #348]	@ (800465c <HAL_DMA_IRQHandler+0x428>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a55      	ldr	r2, [pc, #340]	@ (8004660 <HAL_DMA_IRQHandler+0x42c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a54      	ldr	r2, [pc, #336]	@ (8004664 <HAL_DMA_IRQHandler+0x430>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_IRQHandler+0x2ee>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a52      	ldr	r2, [pc, #328]	@ (8004668 <HAL_DMA_IRQHandler+0x434>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10a      	bne.n	8004538 <HAL_DMA_IRQHandler+0x304>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e003      	b.n	8004540 <HAL_DMA_IRQHandler+0x30c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	f043 0202 	orr.w	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2204      	movs	r2, #4
 800456a:	409a      	lsls	r2, r3
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 808f 	beq.w	8004694 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	@ (800462c <HAL_DMA_IRQHandler+0x3f8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d04a      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	@ (8004630 <HAL_DMA_IRQHandler+0x3fc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d045      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <HAL_DMA_IRQHandler+0x400>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d040      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a27      	ldr	r2, [pc, #156]	@ (8004638 <HAL_DMA_IRQHandler+0x404>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d03b      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <HAL_DMA_IRQHandler+0x408>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d036      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <HAL_DMA_IRQHandler+0x40c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d031      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <HAL_DMA_IRQHandler+0x410>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d02c      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <HAL_DMA_IRQHandler+0x414>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d027      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a20      	ldr	r2, [pc, #128]	@ (800464c <HAL_DMA_IRQHandler+0x418>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d022      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004650 <HAL_DMA_IRQHandler+0x41c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1d      	ldr	r2, [pc, #116]	@ (8004654 <HAL_DMA_IRQHandler+0x420>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_DMA_IRQHandler+0x424>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1a      	ldr	r2, [pc, #104]	@ (800465c <HAL_DMA_IRQHandler+0x428>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_DMA_IRQHandler+0x42c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <HAL_DMA_IRQHandler+0x430>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_DMA_IRQHandler+0x3e2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <HAL_DMA_IRQHandler+0x434>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d12a      	bne.n	800466c <HAL_DMA_IRQHandler+0x438>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e023      	b.n	8004674 <HAL_DMA_IRQHandler+0x440>
 800462c:	40020010 	.word	0x40020010
 8004630:	40020028 	.word	0x40020028
 8004634:	40020040 	.word	0x40020040
 8004638:	40020058 	.word	0x40020058
 800463c:	40020070 	.word	0x40020070
 8004640:	40020088 	.word	0x40020088
 8004644:	400200a0 	.word	0x400200a0
 8004648:	400200b8 	.word	0x400200b8
 800464c:	40020410 	.word	0x40020410
 8004650:	40020428 	.word	0x40020428
 8004654:	40020440 	.word	0x40020440
 8004658:	40020458 	.word	0x40020458
 800465c:	40020470 	.word	0x40020470
 8004660:	40020488 	.word	0x40020488
 8004664:	400204a0 	.word	0x400204a0
 8004668:	400204b8 	.word	0x400204b8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2204      	movs	r2, #4
 8004682:	409a      	lsls	r2, r3
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2210      	movs	r2, #16
 800469e:	409a      	lsls	r2, r3
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a6 	beq.w	80047f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a85      	ldr	r2, [pc, #532]	@ (80048c4 <HAL_DMA_IRQHandler+0x690>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04a      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a83      	ldr	r2, [pc, #524]	@ (80048c8 <HAL_DMA_IRQHandler+0x694>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d045      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a82      	ldr	r2, [pc, #520]	@ (80048cc <HAL_DMA_IRQHandler+0x698>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d040      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a80      	ldr	r2, [pc, #512]	@ (80048d0 <HAL_DMA_IRQHandler+0x69c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d03b      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7f      	ldr	r2, [pc, #508]	@ (80048d4 <HAL_DMA_IRQHandler+0x6a0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d036      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7d      	ldr	r2, [pc, #500]	@ (80048d8 <HAL_DMA_IRQHandler+0x6a4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d031      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_DMA_IRQHandler+0x6a8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02c      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a7a      	ldr	r2, [pc, #488]	@ (80048e0 <HAL_DMA_IRQHandler+0x6ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a79      	ldr	r2, [pc, #484]	@ (80048e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a77      	ldr	r2, [pc, #476]	@ (80048e8 <HAL_DMA_IRQHandler+0x6b4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a76      	ldr	r2, [pc, #472]	@ (80048ec <HAL_DMA_IRQHandler+0x6b8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a74      	ldr	r2, [pc, #464]	@ (80048f0 <HAL_DMA_IRQHandler+0x6bc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a73      	ldr	r2, [pc, #460]	@ (80048f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a71      	ldr	r2, [pc, #452]	@ (80048f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a70      	ldr	r2, [pc, #448]	@ (80048fc <HAL_DMA_IRQHandler+0x6c8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_DMA_IRQHandler+0x516>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	@ (8004900 <HAL_DMA_IRQHandler+0x6cc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10a      	bne.n	8004760 <HAL_DMA_IRQHandler+0x52c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e009      	b.n	8004774 <HAL_DMA_IRQHandler+0x540>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03e      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2210      	movs	r2, #16
 8004782:	409a      	lsls	r2, r3
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d018      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d024      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
 80047b4:	e01f      	b.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
 80047c6:	e016      	b.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0208 	bic.w	r2, r2, #8
 80047e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2220      	movs	r2, #32
 8004800:	409a      	lsls	r2, r3
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8110 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <HAL_DMA_IRQHandler+0x690>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04a      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <HAL_DMA_IRQHandler+0x694>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d045      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a29      	ldr	r2, [pc, #164]	@ (80048cc <HAL_DMA_IRQHandler+0x698>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a28      	ldr	r2, [pc, #160]	@ (80048d0 <HAL_DMA_IRQHandler+0x69c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d03b      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <HAL_DMA_IRQHandler+0x6a0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d036      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a25      	ldr	r2, [pc, #148]	@ (80048d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d031      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a23      	ldr	r2, [pc, #140]	@ (80048dc <HAL_DMA_IRQHandler+0x6a8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02c      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a22      	ldr	r2, [pc, #136]	@ (80048e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d027      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a20      	ldr	r2, [pc, #128]	@ (80048e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d022      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <HAL_DMA_IRQHandler+0x6b4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01d      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <HAL_DMA_IRQHandler+0x6b8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d018      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1c      	ldr	r2, [pc, #112]	@ (80048f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <HAL_DMA_IRQHandler+0x6c0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00e      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a19      	ldr	r2, [pc, #100]	@ (80048f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	@ (80048fc <HAL_DMA_IRQHandler+0x6c8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_DMA_IRQHandler+0x678>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a16      	ldr	r2, [pc, #88]	@ (8004900 <HAL_DMA_IRQHandler+0x6cc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d12b      	bne.n	8004904 <HAL_DMA_IRQHandler+0x6d0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e02a      	b.n	8004918 <HAL_DMA_IRQHandler+0x6e4>
 80048c2:	bf00      	nop
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8087 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2220      	movs	r2, #32
 8004928:	409a      	lsls	r2, r3
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b04      	cmp	r3, #4
 8004938:	d139      	bne.n	80049ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0216 	bic.w	r2, r2, #22
 8004948:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004958:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_DMA_IRQHandler+0x736>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	223f      	movs	r2, #63	@ 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 834a 	beq.w	8005038 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
          }
          return;
 80049ac:	e344      	b.n	8005038 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d018      	beq.n	80049ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
 80049da:	e027      	b.n	8004a2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d023      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e01e      	b.n	8004a2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10f      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0210 	bic.w	r2, r2, #16
 8004a0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8306 	beq.w	8005042 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8088 	beq.w	8004b54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2204      	movs	r2, #4
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a7a      	ldr	r2, [pc, #488]	@ (8004c3c <HAL_DMA_IRQHandler+0xa08>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d04a      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a79      	ldr	r2, [pc, #484]	@ (8004c40 <HAL_DMA_IRQHandler+0xa0c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d045      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a77      	ldr	r2, [pc, #476]	@ (8004c44 <HAL_DMA_IRQHandler+0xa10>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d040      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a76      	ldr	r2, [pc, #472]	@ (8004c48 <HAL_DMA_IRQHandler+0xa14>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a74      	ldr	r2, [pc, #464]	@ (8004c4c <HAL_DMA_IRQHandler+0xa18>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d036      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a73      	ldr	r2, [pc, #460]	@ (8004c50 <HAL_DMA_IRQHandler+0xa1c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d031      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a71      	ldr	r2, [pc, #452]	@ (8004c54 <HAL_DMA_IRQHandler+0xa20>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02c      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a70      	ldr	r2, [pc, #448]	@ (8004c58 <HAL_DMA_IRQHandler+0xa24>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d027      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8004c5c <HAL_DMA_IRQHandler+0xa28>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8004c60 <HAL_DMA_IRQHandler+0xa2c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c64 <HAL_DMA_IRQHandler+0xa30>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6a      	ldr	r2, [pc, #424]	@ (8004c68 <HAL_DMA_IRQHandler+0xa34>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a68      	ldr	r2, [pc, #416]	@ (8004c6c <HAL_DMA_IRQHandler+0xa38>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a67      	ldr	r2, [pc, #412]	@ (8004c70 <HAL_DMA_IRQHandler+0xa3c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a65      	ldr	r2, [pc, #404]	@ (8004c74 <HAL_DMA_IRQHandler+0xa40>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_DMA_IRQHandler+0x8b8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a64      	ldr	r2, [pc, #400]	@ (8004c78 <HAL_DMA_IRQHandler+0xa44>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <HAL_DMA_IRQHandler+0x8ca>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e007      	b.n	8004b0e <HAL_DMA_IRQHandler+0x8da>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d307      	bcc.n	8004b2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f2      	bne.n	8004b0e <HAL_DMA_IRQHandler+0x8da>
 8004b28:	e000      	b.n	8004b2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004b42:	e003      	b.n	8004b4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8272 	beq.w	8005042 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
 8004b66:	e26c      	b.n	8005042 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a43      	ldr	r2, [pc, #268]	@ (8004c7c <HAL_DMA_IRQHandler+0xa48>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d022      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a42      	ldr	r2, [pc, #264]	@ (8004c80 <HAL_DMA_IRQHandler+0xa4c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d01d      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_DMA_IRQHandler+0xa50>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c88 <HAL_DMA_IRQHandler+0xa54>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3d      	ldr	r2, [pc, #244]	@ (8004c8c <HAL_DMA_IRQHandler+0xa58>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c90 <HAL_DMA_IRQHandler+0xa5c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8004c94 <HAL_DMA_IRQHandler+0xa60>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x984>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a39      	ldr	r2, [pc, #228]	@ (8004c98 <HAL_DMA_IRQHandler+0xa64>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x988>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_DMA_IRQHandler+0x98a>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 823f 	beq.w	8005042 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80cd 	beq.w	8004d7c <HAL_DMA_IRQHandler+0xb48>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80c7 	beq.w	8004d7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d049      	beq.n	8004c9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8210 	beq.w	800503c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c24:	e20a      	b.n	800503c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8206 	beq.w	800503c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c38:	e200      	b.n	800503c <HAL_DMA_IRQHandler+0xe08>
 8004c3a:	bf00      	nop
 8004c3c:	40020010 	.word	0x40020010
 8004c40:	40020028 	.word	0x40020028
 8004c44:	40020040 	.word	0x40020040
 8004c48:	40020058 	.word	0x40020058
 8004c4c:	40020070 	.word	0x40020070
 8004c50:	40020088 	.word	0x40020088
 8004c54:	400200a0 	.word	0x400200a0
 8004c58:	400200b8 	.word	0x400200b8
 8004c5c:	40020410 	.word	0x40020410
 8004c60:	40020428 	.word	0x40020428
 8004c64:	40020440 	.word	0x40020440
 8004c68:	40020458 	.word	0x40020458
 8004c6c:	40020470 	.word	0x40020470
 8004c70:	40020488 	.word	0x40020488
 8004c74:	400204a0 	.word	0x400204a0
 8004c78:	400204b8 	.word	0x400204b8
 8004c7c:	58025408 	.word	0x58025408
 8004c80:	5802541c 	.word	0x5802541c
 8004c84:	58025430 	.word	0x58025430
 8004c88:	58025444 	.word	0x58025444
 8004c8c:	58025458 	.word	0x58025458
 8004c90:	5802546c 	.word	0x5802546c
 8004c94:	58025480 	.word	0x58025480
 8004c98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d160      	bne.n	8004d68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7f      	ldr	r2, [pc, #508]	@ (8004ea8 <HAL_DMA_IRQHandler+0xc74>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04a      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8004eac <HAL_DMA_IRQHandler+0xc78>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d045      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb0 <HAL_DMA_IRQHandler+0xc7c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004eb4 <HAL_DMA_IRQHandler+0xc80>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a79      	ldr	r2, [pc, #484]	@ (8004eb8 <HAL_DMA_IRQHandler+0xc84>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d036      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	@ (8004ebc <HAL_DMA_IRQHandler+0xc88>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a76      	ldr	r2, [pc, #472]	@ (8004ec0 <HAL_DMA_IRQHandler+0xc8c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d02c      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a74      	ldr	r2, [pc, #464]	@ (8004ec4 <HAL_DMA_IRQHandler+0xc90>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d027      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	@ (8004ec8 <HAL_DMA_IRQHandler+0xc94>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a71      	ldr	r2, [pc, #452]	@ (8004ecc <HAL_DMA_IRQHandler+0xc98>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	@ (8004ed0 <HAL_DMA_IRQHandler+0xc9c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed4 <HAL_DMA_IRQHandler+0xca0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	@ (8004ed8 <HAL_DMA_IRQHandler+0xca4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004edc <HAL_DMA_IRQHandler+0xca8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee0 <HAL_DMA_IRQHandler+0xcac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xb12>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	@ (8004ee4 <HAL_DMA_IRQHandler+0xcb0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <HAL_DMA_IRQHandler+0xb24>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0208 	bic.w	r2, r2, #8
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e007      	b.n	8004d68 <HAL_DMA_IRQHandler+0xb34>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8165 	beq.w	800503c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d7a:	e15f      	b.n	800503c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2202      	movs	r2, #2
 8004d86:	409a      	lsls	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80c5 	beq.w	8004f1c <HAL_DMA_IRQHandler+0xce8>
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80bf 	beq.w	8004f1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	2202      	movs	r2, #2
 8004da8:	409a      	lsls	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d018      	beq.n	8004dea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 813a 	beq.w	8005040 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd4:	e134      	b.n	8005040 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8130 	beq.w	8005040 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de8:	e12a      	b.n	8005040 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 8089 	bne.w	8004f08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <HAL_DMA_IRQHandler+0xc74>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d04a      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	@ (8004eac <HAL_DMA_IRQHandler+0xc78>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d045      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a28      	ldr	r2, [pc, #160]	@ (8004eb0 <HAL_DMA_IRQHandler+0xc7c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d040      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a26      	ldr	r2, [pc, #152]	@ (8004eb4 <HAL_DMA_IRQHandler+0xc80>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d03b      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a25      	ldr	r2, [pc, #148]	@ (8004eb8 <HAL_DMA_IRQHandler+0xc84>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d036      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	@ (8004ebc <HAL_DMA_IRQHandler+0xc88>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d031      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <HAL_DMA_IRQHandler+0xc8c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d02c      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <HAL_DMA_IRQHandler+0xc90>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d027      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <HAL_DMA_IRQHandler+0xc94>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <HAL_DMA_IRQHandler+0xc98>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed0 <HAL_DMA_IRQHandler+0xc9c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed4 <HAL_DMA_IRQHandler+0xca0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a19      	ldr	r2, [pc, #100]	@ (8004ed8 <HAL_DMA_IRQHandler+0xca4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <HAL_DMA_IRQHandler+0xca8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a16      	ldr	r2, [pc, #88]	@ (8004ee0 <HAL_DMA_IRQHandler+0xcac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xc62>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a14      	ldr	r2, [pc, #80]	@ (8004ee4 <HAL_DMA_IRQHandler+0xcb0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d128      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0xcb4>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0214 	bic.w	r2, r2, #20
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e027      	b.n	8004ef8 <HAL_DMA_IRQHandler+0xcc4>
 8004ea8:	40020010 	.word	0x40020010
 8004eac:	40020028 	.word	0x40020028
 8004eb0:	40020040 	.word	0x40020040
 8004eb4:	40020058 	.word	0x40020058
 8004eb8:	40020070 	.word	0x40020070
 8004ebc:	40020088 	.word	0x40020088
 8004ec0:	400200a0 	.word	0x400200a0
 8004ec4:	400200b8 	.word	0x400200b8
 8004ec8:	40020410 	.word	0x40020410
 8004ecc:	40020428 	.word	0x40020428
 8004ed0:	40020440 	.word	0x40020440
 8004ed4:	40020458 	.word	0x40020458
 8004ed8:	40020470 	.word	0x40020470
 8004edc:	40020488 	.word	0x40020488
 8004ee0:	400204a0 	.word	0x400204a0
 8004ee4:	400204b8 	.word	0x400204b8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 020a 	bic.w	r2, r2, #10
 8004ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8097 	beq.w	8005040 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1a:	e091      	b.n	8005040 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2208      	movs	r2, #8
 8004f26:	409a      	lsls	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8088 	beq.w	8005042 <HAL_DMA_IRQHandler+0xe0e>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8082 	beq.w	8005042 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a41      	ldr	r2, [pc, #260]	@ (8005048 <HAL_DMA_IRQHandler+0xe14>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04a      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800504c <HAL_DMA_IRQHandler+0xe18>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d045      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3e      	ldr	r2, [pc, #248]	@ (8005050 <HAL_DMA_IRQHandler+0xe1c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d040      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3c      	ldr	r2, [pc, #240]	@ (8005054 <HAL_DMA_IRQHandler+0xe20>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d03b      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005058 <HAL_DMA_IRQHandler+0xe24>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d036      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a39      	ldr	r2, [pc, #228]	@ (800505c <HAL_DMA_IRQHandler+0xe28>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d031      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a38      	ldr	r2, [pc, #224]	@ (8005060 <HAL_DMA_IRQHandler+0xe2c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d02c      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a36      	ldr	r2, [pc, #216]	@ (8005064 <HAL_DMA_IRQHandler+0xe30>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a35      	ldr	r2, [pc, #212]	@ (8005068 <HAL_DMA_IRQHandler+0xe34>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a33      	ldr	r2, [pc, #204]	@ (800506c <HAL_DMA_IRQHandler+0xe38>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a32      	ldr	r2, [pc, #200]	@ (8005070 <HAL_DMA_IRQHandler+0xe3c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <HAL_DMA_IRQHandler+0xe40>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <HAL_DMA_IRQHandler+0xe44>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800507c <HAL_DMA_IRQHandler+0xe48>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2c      	ldr	r2, [pc, #176]	@ (8005080 <HAL_DMA_IRQHandler+0xe4c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_DMA_IRQHandler+0xdaa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <HAL_DMA_IRQHandler+0xe50>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0xdbc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 021c 	bic.w	r2, r2, #28
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <HAL_DMA_IRQHandler+0xdcc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 020e 	bic.w	r2, r2, #14
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
 8005036:	e004      	b.n	8005042 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005040:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005042:	3728      	adds	r7, #40	@ 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8

08005088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a42      	ldr	r2, [pc, #264]	@ (80051a0 <DMA_CalcBaseAndBitshift+0x118>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d04a      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a41      	ldr	r2, [pc, #260]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d045      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3f      	ldr	r2, [pc, #252]	@ (80051a8 <DMA_CalcBaseAndBitshift+0x120>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d040      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3e      	ldr	r2, [pc, #248]	@ (80051ac <DMA_CalcBaseAndBitshift+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d03b      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3c      	ldr	r2, [pc, #240]	@ (80051b0 <DMA_CalcBaseAndBitshift+0x128>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d036      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	@ (80051b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d031      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a39      	ldr	r2, [pc, #228]	@ (80051b8 <DMA_CalcBaseAndBitshift+0x130>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d02c      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a38      	ldr	r2, [pc, #224]	@ (80051bc <DMA_CalcBaseAndBitshift+0x134>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d027      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a36      	ldr	r2, [pc, #216]	@ (80051c0 <DMA_CalcBaseAndBitshift+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d022      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a35      	ldr	r2, [pc, #212]	@ (80051c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d01d      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a33      	ldr	r2, [pc, #204]	@ (80051c8 <DMA_CalcBaseAndBitshift+0x140>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a32      	ldr	r2, [pc, #200]	@ (80051cc <DMA_CalcBaseAndBitshift+0x144>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a30      	ldr	r2, [pc, #192]	@ (80051d0 <DMA_CalcBaseAndBitshift+0x148>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2f      	ldr	r2, [pc, #188]	@ (80051d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2d      	ldr	r2, [pc, #180]	@ (80051d8 <DMA_CalcBaseAndBitshift+0x150>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <DMA_CalcBaseAndBitshift+0xa8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2c      	ldr	r2, [pc, #176]	@ (80051dc <DMA_CalcBaseAndBitshift+0x154>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <DMA_CalcBaseAndBitshift+0xac>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <DMA_CalcBaseAndBitshift+0xae>
 8005134:	2300      	movs	r3, #0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d024      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	3b10      	subs	r3, #16
 8005142:	4a27      	ldr	r2, [pc, #156]	@ (80051e0 <DMA_CalcBaseAndBitshift+0x158>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005154:	5cd3      	ldrb	r3, [r2, r3]
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d908      	bls.n	8005174 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <DMA_CalcBaseAndBitshift+0x160>)
 800516a:	4013      	ands	r3, r2
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	659a      	str	r2, [r3, #88]	@ 0x58
 8005172:	e00d      	b.n	8005190 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <DMA_CalcBaseAndBitshift+0x160>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6593      	str	r3, [r2, #88]	@ 0x58
 8005182:	e005      	b.n	8005190 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40020010 	.word	0x40020010
 80051a4:	40020028 	.word	0x40020028
 80051a8:	40020040 	.word	0x40020040
 80051ac:	40020058 	.word	0x40020058
 80051b0:	40020070 	.word	0x40020070
 80051b4:	40020088 	.word	0x40020088
 80051b8:	400200a0 	.word	0x400200a0
 80051bc:	400200b8 	.word	0x400200b8
 80051c0:	40020410 	.word	0x40020410
 80051c4:	40020428 	.word	0x40020428
 80051c8:	40020440 	.word	0x40020440
 80051cc:	40020458 	.word	0x40020458
 80051d0:	40020470 	.word	0x40020470
 80051d4:	40020488 	.word	0x40020488
 80051d8:	400204a0 	.word	0x400204a0
 80051dc:	400204b8 	.word	0x400204b8
 80051e0:	aaaaaaab 	.word	0xaaaaaaab
 80051e4:	0800b7c4 	.word	0x0800b7c4
 80051e8:	fffffc00 	.word	0xfffffc00

080051ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d120      	bne.n	8005242 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	2b03      	cmp	r3, #3
 8005206:	d858      	bhi.n	80052ba <DMA_CheckFifoParam+0xce>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <DMA_CheckFifoParam+0x24>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005221 	.word	0x08005221
 8005214:	08005233 	.word	0x08005233
 8005218:	08005221 	.word	0x08005221
 800521c:	080052bb 	.word	0x080052bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d048      	beq.n	80052be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005230:	e045      	b.n	80052be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800523a:	d142      	bne.n	80052c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005240:	e03f      	b.n	80052c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524a:	d123      	bne.n	8005294 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	2b03      	cmp	r3, #3
 8005252:	d838      	bhi.n	80052c6 <DMA_CheckFifoParam+0xda>
 8005254:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <DMA_CheckFifoParam+0x70>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	0800526d 	.word	0x0800526d
 8005260:	08005273 	.word	0x08005273
 8005264:	0800526d 	.word	0x0800526d
 8005268:	08005285 	.word	0x08005285
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
        break;
 8005270:	e030      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d025      	beq.n	80052ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005282:	e022      	b.n	80052ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800528c:	d11f      	bne.n	80052ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005292:	e01c      	b.n	80052ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	2b02      	cmp	r3, #2
 800529a:	d902      	bls.n	80052a2 <DMA_CheckFifoParam+0xb6>
 800529c:	2b03      	cmp	r3, #3
 800529e:	d003      	beq.n	80052a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052a0:	e018      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
        break;
 80052a6:	e015      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
    break;
 80052b8:	e00b      	b.n	80052d2 <DMA_CheckFifoParam+0xe6>
        break;
 80052ba:	bf00      	nop
 80052bc:	e00a      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        break;
 80052be:	bf00      	nop
 80052c0:	e008      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        break;
 80052c2:	bf00      	nop
 80052c4:	e006      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        break;
 80052c6:	bf00      	nop
 80052c8:	e004      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        break;
 80052ca:	bf00      	nop
 80052cc:	e002      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
        break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <DMA_CheckFifoParam+0xe8>
    break;
 80052d2:	bf00      	nop
    }
  }

  return status;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a38      	ldr	r2, [pc, #224]	@ (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a36      	ldr	r2, [pc, #216]	@ (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01d      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a35      	ldr	r2, [pc, #212]	@ (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a33      	ldr	r2, [pc, #204]	@ (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a32      	ldr	r2, [pc, #200]	@ (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a30      	ldr	r2, [pc, #192]	@ (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2f      	ldr	r2, [pc, #188]	@ (80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2d      	ldr	r2, [pc, #180]	@ (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	3b08      	subs	r3, #8
 8005354:	4a28      	ldr	r2, [pc, #160]	@ (80053f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4b26      	ldr	r3, [pc, #152]	@ (80053fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a24      	ldr	r2, [pc, #144]	@ (8005400 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005370:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005380:	e024      	b.n	80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	3b10      	subs	r3, #16
 800538a:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a1c      	ldr	r2, [pc, #112]	@ (8005408 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d806      	bhi.n	80053aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a1b      	ldr	r2, [pc, #108]	@ (800540c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d902      	bls.n	80053aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3308      	adds	r3, #8
 80053a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4b18      	ldr	r3, [pc, #96]	@ (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a16      	ldr	r2, [pc, #88]	@ (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80053bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	58025408 	.word	0x58025408
 80053dc:	5802541c 	.word	0x5802541c
 80053e0:	58025430 	.word	0x58025430
 80053e4:	58025444 	.word	0x58025444
 80053e8:	58025458 	.word	0x58025458
 80053ec:	5802546c 	.word	0x5802546c
 80053f0:	58025480 	.word	0x58025480
 80053f4:	58025494 	.word	0x58025494
 80053f8:	cccccccd 	.word	0xcccccccd
 80053fc:	16009600 	.word	0x16009600
 8005400:	58025880 	.word	0x58025880
 8005404:	aaaaaaab 	.word	0xaaaaaaab
 8005408:	400204b8 	.word	0x400204b8
 800540c:	4002040f 	.word	0x4002040f
 8005410:	10008200 	.word	0x10008200
 8005414:	40020880 	.word	0x40020880

08005418 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d04a      	beq.n	80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d847      	bhi.n	80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01d      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a22      	ldr	r2, [pc, #136]	@ (80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a21      	ldr	r2, [pc, #132]	@ (80054dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1e      	ldr	r2, [pc, #120]	@ (80054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4b17      	ldr	r3, [pc, #92]	@ (80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a15      	ldr	r2, [pc, #84]	@ (80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80054a2:	e009      	b.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b14      	ldr	r3, [pc, #80]	@ (80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80054b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	58025408 	.word	0x58025408
 80054d4:	5802541c 	.word	0x5802541c
 80054d8:	58025430 	.word	0x58025430
 80054dc:	58025444 	.word	0x58025444
 80054e0:	58025458 	.word	0x58025458
 80054e4:	5802546c 	.word	0x5802546c
 80054e8:	58025480 	.word	0x58025480
 80054ec:	58025494 	.word	0x58025494
 80054f0:	1600963f 	.word	0x1600963f
 80054f4:	58025940 	.word	0x58025940
 80054f8:	1000823f 	.word	0x1000823f
 80054fc:	40020940 	.word	0x40020940

08005500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	@ 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800550e:	4b86      	ldr	r3, [pc, #536]	@ (8005728 <HAL_GPIO_Init+0x228>)
 8005510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005512:	e18c      	b.n	800582e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	4013      	ands	r3, r2
 8005522:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 817e 	beq.w	8005828 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d005      	beq.n	8005544 <HAL_GPIO_Init+0x44>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d130      	bne.n	80055a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	2203      	movs	r2, #3
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800557a:	2201      	movs	r2, #1
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f003 0201 	and.w	r2, r3, #1
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d017      	beq.n	80055e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	2203      	movs	r2, #3
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d123      	bne.n	8005636 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4313      	orrs	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	08da      	lsrs	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3208      	adds	r2, #8
 8005630:	69b9      	ldr	r1, [r7, #24]
 8005632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	2203      	movs	r2, #3
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43db      	mvns	r3, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 0203 	and.w	r2, r3, #3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4313      	orrs	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80d8 	beq.w	8005828 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005678:	4b2c      	ldr	r3, [pc, #176]	@ (800572c <HAL_GPIO_Init+0x22c>)
 800567a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800567e:	4a2b      	ldr	r2, [pc, #172]	@ (800572c <HAL_GPIO_Init+0x22c>)
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005688:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_GPIO_Init+0x22c>)
 800568a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005696:	4a26      	ldr	r2, [pc, #152]	@ (8005730 <HAL_GPIO_Init+0x230>)
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	3302      	adds	r3, #2
 800569e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	220f      	movs	r2, #15
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005734 <HAL_GPIO_Init+0x234>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d04a      	beq.n	8005758 <HAL_GPIO_Init+0x258>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <HAL_GPIO_Init+0x238>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d02b      	beq.n	8005722 <HAL_GPIO_Init+0x222>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1b      	ldr	r2, [pc, #108]	@ (800573c <HAL_GPIO_Init+0x23c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d025      	beq.n	800571e <HAL_GPIO_Init+0x21e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005740 <HAL_GPIO_Init+0x240>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01f      	beq.n	800571a <HAL_GPIO_Init+0x21a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <HAL_GPIO_Init+0x244>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d019      	beq.n	8005716 <HAL_GPIO_Init+0x216>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a18      	ldr	r2, [pc, #96]	@ (8005748 <HAL_GPIO_Init+0x248>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_GPIO_Init+0x212>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a17      	ldr	r2, [pc, #92]	@ (800574c <HAL_GPIO_Init+0x24c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00d      	beq.n	800570e <HAL_GPIO_Init+0x20e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <HAL_GPIO_Init+0x250>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <HAL_GPIO_Init+0x20a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <HAL_GPIO_Init+0x254>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d101      	bne.n	8005706 <HAL_GPIO_Init+0x206>
 8005702:	2309      	movs	r3, #9
 8005704:	e029      	b.n	800575a <HAL_GPIO_Init+0x25a>
 8005706:	230a      	movs	r3, #10
 8005708:	e027      	b.n	800575a <HAL_GPIO_Init+0x25a>
 800570a:	2307      	movs	r3, #7
 800570c:	e025      	b.n	800575a <HAL_GPIO_Init+0x25a>
 800570e:	2306      	movs	r3, #6
 8005710:	e023      	b.n	800575a <HAL_GPIO_Init+0x25a>
 8005712:	2305      	movs	r3, #5
 8005714:	e021      	b.n	800575a <HAL_GPIO_Init+0x25a>
 8005716:	2304      	movs	r3, #4
 8005718:	e01f      	b.n	800575a <HAL_GPIO_Init+0x25a>
 800571a:	2303      	movs	r3, #3
 800571c:	e01d      	b.n	800575a <HAL_GPIO_Init+0x25a>
 800571e:	2302      	movs	r3, #2
 8005720:	e01b      	b.n	800575a <HAL_GPIO_Init+0x25a>
 8005722:	2301      	movs	r3, #1
 8005724:	e019      	b.n	800575a <HAL_GPIO_Init+0x25a>
 8005726:	bf00      	nop
 8005728:	58000080 	.word	0x58000080
 800572c:	58024400 	.word	0x58024400
 8005730:	58000400 	.word	0x58000400
 8005734:	58020000 	.word	0x58020000
 8005738:	58020400 	.word	0x58020400
 800573c:	58020800 	.word	0x58020800
 8005740:	58020c00 	.word	0x58020c00
 8005744:	58021000 	.word	0x58021000
 8005748:	58021400 	.word	0x58021400
 800574c:	58021800 	.word	0x58021800
 8005750:	58021c00 	.word	0x58021c00
 8005754:	58022400 	.word	0x58022400
 8005758:	2300      	movs	r3, #0
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	f002 0203 	and.w	r2, r2, #3
 8005760:	0092      	lsls	r2, r2, #2
 8005762:	4093      	lsls	r3, r2
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800576a:	4938      	ldr	r1, [pc, #224]	@ (800584c <HAL_GPIO_Init+0x34c>)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	3302      	adds	r3, #2
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800579e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3301      	adds	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f ae6b 	bne.w	8005514 <HAL_GPIO_Init+0x14>
  }
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	3724      	adds	r7, #36	@ 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	58000400 	.word	0x58000400

08005850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
 800585c:	4613      	mov	r3, r2
 800585e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005860:	787b      	ldrb	r3, [r7, #1]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800586c:	e003      	b.n	8005876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800586e:	887b      	ldrh	r3, [r7, #2]
 8005870:	041a      	lsls	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	619a      	str	r2, [r3, #24]
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e08b      	b.n	80059ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb fe90 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	@ 0x24
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d107      	bne.n	80058fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	e006      	b.n	800590c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800590a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d108      	bne.n	8005926 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	e007      	b.n	8005936 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <HAL_I2C_Init+0x134>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	02008000 	.word	0x02008000

080059bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d138      	bne.n	8005a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059dc:	2302      	movs	r3, #2
 80059de:	e032      	b.n	8005a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	@ 0x24
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d139      	bne.n	8005adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e033      	b.n	8005ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2224      	movs	r2, #36	@ 0x24
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <HAL_PWREx_ConfigSupply+0x70>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d00a      	beq.n	8005b16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b00:	4b16      	ldr	r3, [pc, #88]	@ (8005b5c <HAL_PWREx_ConfigSupply+0x70>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d001      	beq.n	8005b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e01f      	b.n	8005b52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e01d      	b.n	8005b52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b16:	4b11      	ldr	r3, [pc, #68]	@ (8005b5c <HAL_PWREx_ConfigSupply+0x70>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f023 0207 	bic.w	r2, r3, #7
 8005b1e:	490f      	ldr	r1, [pc, #60]	@ (8005b5c <HAL_PWREx_ConfigSupply+0x70>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b26:	f7fc f9c1 	bl	8001eac <HAL_GetTick>
 8005b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b2c:	e009      	b.n	8005b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b2e:	f7fc f9bd 	bl	8001eac <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b3c:	d901      	bls.n	8005b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e007      	b.n	8005b52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_PWREx_ConfigSupply+0x70>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4e:	d1ee      	bne.n	8005b2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	58024800 	.word	0x58024800

08005b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	@ 0x30
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e3c8      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8087 	beq.w	8005c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b80:	4b88      	ldr	r3, [pc, #544]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b8a:	4b86      	ldr	r3, [pc, #536]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d007      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x46>
 8005b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b98:	2b18      	cmp	r3, #24
 8005b9a:	d110      	bne.n	8005bbe <HAL_RCC_OscConfig+0x5e>
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d10b      	bne.n	8005bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d06c      	beq.n	8005c8c <HAL_RCC_OscConfig+0x12c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d168      	bne.n	8005c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e3a2      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x76>
 8005bc8:	4b76      	ldr	r3, [pc, #472]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a75      	ldr	r2, [pc, #468]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e02e      	b.n	8005c34 <HAL_RCC_OscConfig+0xd4>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x98>
 8005bde:	4b71      	ldr	r3, [pc, #452]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a70      	ldr	r2, [pc, #448]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b6e      	ldr	r3, [pc, #440]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a6d      	ldr	r2, [pc, #436]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e01d      	b.n	8005c34 <HAL_RCC_OscConfig+0xd4>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCC_OscConfig+0xbc>
 8005c02:	4b68      	ldr	r3, [pc, #416]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a67      	ldr	r2, [pc, #412]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	4b65      	ldr	r3, [pc, #404]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a64      	ldr	r2, [pc, #400]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCC_OscConfig+0xd4>
 8005c1c:	4b61      	ldr	r3, [pc, #388]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a60      	ldr	r2, [pc, #384]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	4b5e      	ldr	r3, [pc, #376]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fc f936 	bl	8001eac <HAL_GetTick>
 8005c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c44:	f7fc f932 	bl	8001eac <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	@ 0x64
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e356      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c56:	4b53      	ldr	r3, [pc, #332]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCC_OscConfig+0xe4>
 8005c62:	e014      	b.n	8005c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fc f922 	bl	8001eac <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fc f91e 	bl	8001eac <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	@ 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e342      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c7e:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x10c>
 8005c8a:	e000      	b.n	8005c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 808c 	beq.w	8005db4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c9c:	4b41      	ldr	r3, [pc, #260]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ca4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x162>
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b18      	cmp	r3, #24
 8005cb6:	d137      	bne.n	8005d28 <HAL_RCC_OscConfig+0x1c8>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d132      	bne.n	8005d28 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc2:	4b38      	ldr	r3, [pc, #224]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_RCC_OscConfig+0x17a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e314      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cda:	4b32      	ldr	r3, [pc, #200]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 0219 	bic.w	r2, r3, #25
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	492f      	ldr	r1, [pc, #188]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc f8de 	bl	8001eac <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf4:	f7fc f8da 	bl	8001eac <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e2fe      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d06:	4b27      	ldr	r3, [pc, #156]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d12:	4b24      	ldr	r3, [pc, #144]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	061b      	lsls	r3, r3, #24
 8005d20:	4920      	ldr	r1, [pc, #128]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d26:	e045      	b.n	8005db4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d026      	beq.n	8005d7e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d30:	4b1c      	ldr	r3, [pc, #112]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 0219 	bic.w	r2, r3, #25
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4919      	ldr	r1, [pc, #100]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fc f8b3 	bl	8001eac <HAL_GetTick>
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4a:	f7fc f8af 	bl	8001eac <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e2d3      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5c:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	061b      	lsls	r3, r3, #24
 8005d76:	490b      	ldr	r1, [pc, #44]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	e01a      	b.n	8005db4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a08      	ldr	r2, [pc, #32]	@ (8005da4 <HAL_RCC_OscConfig+0x244>)
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fc f88f 	bl	8001eac <HAL_GetTick>
 8005d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d92:	f7fc f88b 	bl	8001eac <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d903      	bls.n	8005da8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e2af      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
 8005da4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005da8:	4b96      	ldr	r3, [pc, #600]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d06a      	beq.n	8005e96 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc0:	4b90      	ldr	r3, [pc, #576]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dca:	4b8e      	ldr	r3, [pc, #568]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dce:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d007      	beq.n	8005de6 <HAL_RCC_OscConfig+0x286>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b18      	cmp	r3, #24
 8005dda:	d11b      	bne.n	8005e14 <HAL_RCC_OscConfig+0x2b4>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d116      	bne.n	8005e14 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005de6:	4b87      	ldr	r3, [pc, #540]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_RCC_OscConfig+0x29e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d001      	beq.n	8005dfe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e282      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dfe:	4b81      	ldr	r3, [pc, #516]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	497d      	ldr	r1, [pc, #500]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e12:	e040      	b.n	8005e96 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d023      	beq.n	8005e64 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e1c:	4b79      	ldr	r3, [pc, #484]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a78      	ldr	r2, [pc, #480]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fc f840 	bl	8001eac <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e30:	f7fc f83c 	bl	8001eac <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e260      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e42:	4b70      	ldr	r3, [pc, #448]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	4969      	ldr	r1, [pc, #420]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60cb      	str	r3, [r1, #12]
 8005e62:	e018      	b.n	8005e96 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e64:	4b67      	ldr	r3, [pc, #412]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a66      	ldr	r2, [pc, #408]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc f81c 	bl	8001eac <HAL_GetTick>
 8005e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e78:	f7fc f818 	bl	8001eac <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e23c      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d036      	beq.n	8005f10 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d019      	beq.n	8005ede <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eaa:	4b56      	ldr	r3, [pc, #344]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eae:	4a55      	ldr	r2, [pc, #340]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb6:	f7fb fff9 	bl	8001eac <HAL_GetTick>
 8005eba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fb fff5 	bl	8001eac <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e219      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x35e>
 8005edc:	e018      	b.n	8005f10 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ede:	4b49      	ldr	r3, [pc, #292]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee2:	4a48      	ldr	r2, [pc, #288]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fb ffdf 	bl	8001eac <HAL_GetTick>
 8005eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef2:	f7fb ffdb 	bl	8001eac <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1ff      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f04:	4b3f      	ldr	r3, [pc, #252]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d036      	beq.n	8005f8a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d019      	beq.n	8005f58 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f24:	4b37      	ldr	r3, [pc, #220]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a36      	ldr	r2, [pc, #216]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f30:	f7fb ffbc 	bl	8001eac <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f38:	f7fb ffb8 	bl	8001eac <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1dc      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x3d8>
 8005f56:	e018      	b.n	8005f8a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f58:	4b2a      	ldr	r3, [pc, #168]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a29      	ldr	r2, [pc, #164]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f64:	f7fb ffa2 	bl	8001eac <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f6c:	f7fb ff9e 	bl	8001eac <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e1c2      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f7e:	4b21      	ldr	r3, [pc, #132]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8086 	beq.w	80060a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <HAL_RCC_OscConfig+0x4a8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <HAL_RCC_OscConfig+0x4a8>)
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fa4:	f7fb ff82 	bl	8001eac <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fac:	f7fb ff7e 	bl	8001eac <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	@ 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1a2      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fbe:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <HAL_RCC_OscConfig+0x4a8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x480>
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fde:	e032      	b.n	8006046 <HAL_RCC_OscConfig+0x4e6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d111      	bne.n	800600c <HAL_RCC_OscConfig+0x4ac>
 8005fe8:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fec:	4a05      	ldr	r2, [pc, #20]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff4:	4b03      	ldr	r3, [pc, #12]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	4a02      	ldr	r2, [pc, #8]	@ (8006004 <HAL_RCC_OscConfig+0x4a4>)
 8005ffa:	f023 0304 	bic.w	r3, r3, #4
 8005ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006000:	e021      	b.n	8006046 <HAL_RCC_OscConfig+0x4e6>
 8006002:	bf00      	nop
 8006004:	58024400 	.word	0x58024400
 8006008:	58024800 	.word	0x58024800
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b05      	cmp	r3, #5
 8006012:	d10c      	bne.n	800602e <HAL_RCC_OscConfig+0x4ce>
 8006014:	4b83      	ldr	r3, [pc, #524]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006018:	4a82      	ldr	r2, [pc, #520]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800601a:	f043 0304 	orr.w	r3, r3, #4
 800601e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006020:	4b80      	ldr	r3, [pc, #512]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006024:	4a7f      	ldr	r2, [pc, #508]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6713      	str	r3, [r2, #112]	@ 0x70
 800602c:	e00b      	b.n	8006046 <HAL_RCC_OscConfig+0x4e6>
 800602e:	4b7d      	ldr	r3, [pc, #500]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	4a7c      	ldr	r2, [pc, #496]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	@ 0x70
 800603a:	4b7a      	ldr	r3, [pc, #488]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	4a79      	ldr	r2, [pc, #484]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d015      	beq.n	800607a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fb ff2d 	bl	8001eac <HAL_GetTick>
 8006052:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006054:	e00a      	b.n	800606c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fb ff29 	bl	8001eac <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e14b      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800606c:	4b6d      	ldr	r3, [pc, #436]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ee      	beq.n	8006056 <HAL_RCC_OscConfig+0x4f6>
 8006078:	e014      	b.n	80060a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fb ff17 	bl	8001eac <HAL_GetTick>
 800607e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fb ff13 	bl	8001eac <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e135      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006098:	4b62      	ldr	r3, [pc, #392]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ee      	bne.n	8006082 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 812a 	beq.w	8006302 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060b6:	2b18      	cmp	r3, #24
 80060b8:	f000 80ba 	beq.w	8006230 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	f040 8095 	bne.w	80061f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b57      	ldr	r3, [pc, #348]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a56      	ldr	r2, [pc, #344]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80060cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb feeb 	bl	8001eac <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060da:	f7fb fee7 	bl	8001eac <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e10b      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80060fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006228 <HAL_RCC_OscConfig+0x6c8>)
 80060fe:	4013      	ands	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006108:	0112      	lsls	r2, r2, #4
 800610a:	430a      	orrs	r2, r1
 800610c:	4945      	ldr	r1, [pc, #276]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800610e:	4313      	orrs	r3, r2
 8006110:	628b      	str	r3, [r1, #40]	@ 0x28
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	3b01      	subs	r3, #1
 8006118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006120:	3b01      	subs	r3, #1
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	b29b      	uxth	r3, r3
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	3b01      	subs	r3, #1
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613a:	3b01      	subs	r3, #1
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006142:	4938      	ldr	r1, [pc, #224]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006148:	4b36      	ldr	r3, [pc, #216]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	4a35      	ldr	r2, [pc, #212]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006154:	4b33      	ldr	r3, [pc, #204]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006158:	4b34      	ldr	r3, [pc, #208]	@ (800622c <HAL_RCC_OscConfig+0x6cc>)
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006160:	00d2      	lsls	r2, r2, #3
 8006162:	4930      	ldr	r1, [pc, #192]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006168:	4b2e      	ldr	r3, [pc, #184]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	f023 020c 	bic.w	r2, r3, #12
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	492b      	ldr	r1, [pc, #172]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800617a:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	f023 0202 	bic.w	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	4927      	ldr	r1, [pc, #156]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006188:	4313      	orrs	r3, r2
 800618a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800618c:	4b25      	ldr	r3, [pc, #148]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	4a24      	ldr	r2, [pc, #144]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b22      	ldr	r3, [pc, #136]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061bc:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a18      	ldr	r2, [pc, #96]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fb fe70 	bl	8001eac <HAL_GetTick>
 80061cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d0:	f7fb fe6c 	bl	8001eac <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e090      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x670>
 80061ee:	e088      	b.n	8006302 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fb fe56 	bl	8001eac <HAL_GetTick>
 8006200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006204:	f7fb fe52 	bl	8001eac <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e076      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006216:	4b03      	ldr	r3, [pc, #12]	@ (8006224 <HAL_RCC_OscConfig+0x6c4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x6a4>
 8006222:	e06e      	b.n	8006302 <HAL_RCC_OscConfig+0x7a2>
 8006224:	58024400 	.word	0x58024400
 8006228:	fffffc0c 	.word	0xfffffc0c
 800622c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006230:	4b36      	ldr	r3, [pc, #216]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006236:	4b35      	ldr	r3, [pc, #212]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	2b01      	cmp	r3, #1
 8006242:	d031      	beq.n	80062a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f003 0203 	and.w	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d12a      	bne.n	80062a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800625e:	429a      	cmp	r2, r3
 8006260:	d122      	bne.n	80062a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d11a      	bne.n	80062a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	0a5b      	lsrs	r3, r3, #9
 8006276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006280:	429a      	cmp	r2, r3
 8006282:	d111      	bne.n	80062a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006292:	429a      	cmp	r2, r3
 8006294:	d108      	bne.n	80062a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	0e1b      	lsrs	r3, r3, #24
 800629a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e02b      	b.n	8006304 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062ac:	4b17      	ldr	r3, [pc, #92]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d01f      	beq.n	8006302 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80062c2:	4b12      	ldr	r3, [pc, #72]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	4a11      	ldr	r2, [pc, #68]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062ce:	f7fb fded 	bl	8001eac <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062d4:	bf00      	nop
 80062d6:	f7fb fde9 	bl	8001eac <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	4293      	cmp	r3, r2
 80062e0:	d0f9      	beq.n	80062d6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062e2:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <HAL_RCC_OscConfig+0x7b0>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80062ee:	00d2      	lsls	r2, r2, #3
 80062f0:	4906      	ldr	r1, [pc, #24]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80062f6:	4b05      	ldr	r3, [pc, #20]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	4a04      	ldr	r2, [pc, #16]	@ (800630c <HAL_RCC_OscConfig+0x7ac>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3730      	adds	r7, #48	@ 0x30
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	58024400 	.word	0x58024400
 8006310:	ffff0007 	.word	0xffff0007

08006314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e19c      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006328:	4b8a      	ldr	r3, [pc, #552]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d910      	bls.n	8006358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b87      	ldr	r3, [pc, #540]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 020f 	bic.w	r2, r3, #15
 800633e:	4985      	ldr	r1, [pc, #532]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b83      	ldr	r3, [pc, #524]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e184      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	4b7b      	ldr	r3, [pc, #492]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006370:	429a      	cmp	r2, r3
 8006372:	d908      	bls.n	8006386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006374:	4b78      	ldr	r3, [pc, #480]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	4975      	ldr	r1, [pc, #468]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006382:	4313      	orrs	r3, r2
 8006384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695a      	ldr	r2, [r3, #20]
 8006396:	4b70      	ldr	r3, [pc, #448]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639e:	429a      	cmp	r2, r3
 80063a0:	d908      	bls.n	80063b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	496a      	ldr	r1, [pc, #424]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	4b64      	ldr	r3, [pc, #400]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d908      	bls.n	80063e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063d0:	4b61      	ldr	r3, [pc, #388]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	495e      	ldr	r1, [pc, #376]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	4b59      	ldr	r3, [pc, #356]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d908      	bls.n	8006410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063fe:	4b56      	ldr	r3, [pc, #344]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	4953      	ldr	r1, [pc, #332]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800640c:	4313      	orrs	r3, r2
 800640e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d010      	beq.n	800643e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	4b4d      	ldr	r3, [pc, #308]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	429a      	cmp	r2, r3
 800642a:	d908      	bls.n	800643e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800642c:	4b4a      	ldr	r3, [pc, #296]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f023 020f 	bic.w	r2, r3, #15
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4947      	ldr	r1, [pc, #284]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800643a:	4313      	orrs	r3, r2
 800643c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d055      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800644a:	4b43      	ldr	r3, [pc, #268]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4940      	ldr	r1, [pc, #256]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006458:	4313      	orrs	r3, r2
 800645a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d107      	bne.n	8006474 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006464:	4b3c      	ldr	r3, [pc, #240]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d121      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0f6      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b03      	cmp	r3, #3
 800647a:	d107      	bne.n	800648c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800647c:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d115      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0ea      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006494:	4b30      	ldr	r3, [pc, #192]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0de      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0d6      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b4:	4b28      	ldr	r3, [pc, #160]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f023 0207 	bic.w	r2, r3, #7
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4925      	ldr	r1, [pc, #148]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c6:	f7fb fcf1 	bl	8001eac <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064cc:	e00a      	b.n	80064e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ce:	f7fb fced 	bl	8001eac <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064dc:	4293      	cmp	r3, r2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e0be      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d1eb      	bne.n	80064ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d010      	beq.n	8006524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	4b14      	ldr	r3, [pc, #80]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	429a      	cmp	r2, r3
 8006510:	d208      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006512:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f023 020f 	bic.w	r2, r3, #15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	490e      	ldr	r1, [pc, #56]	@ (8006558 <HAL_RCC_ClockConfig+0x244>)
 8006520:	4313      	orrs	r3, r2
 8006522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006524:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d214      	bcs.n	800655c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b08      	ldr	r3, [pc, #32]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 020f 	bic.w	r2, r3, #15
 800653a:	4906      	ldr	r1, [pc, #24]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006542:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <HAL_RCC_ClockConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d005      	beq.n	800655c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e086      	b.n	8006662 <HAL_RCC_ClockConfig+0x34e>
 8006554:	52002000 	.word	0x52002000
 8006558:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b3f      	ldr	r3, [pc, #252]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006574:	429a      	cmp	r2, r3
 8006576:	d208      	bcs.n	800658a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006578:	4b3c      	ldr	r3, [pc, #240]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	4939      	ldr	r1, [pc, #228]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 8006586:	4313      	orrs	r3, r2
 8006588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	4b34      	ldr	r3, [pc, #208]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d208      	bcs.n	80065b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065a6:	4b31      	ldr	r3, [pc, #196]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	492e      	ldr	r1, [pc, #184]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	4b28      	ldr	r3, [pc, #160]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d208      	bcs.n	80065e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d4:	4b25      	ldr	r3, [pc, #148]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	4922      	ldr	r1, [pc, #136]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d010      	beq.n	8006614 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065fe:	429a      	cmp	r2, r3
 8006600:	d208      	bcs.n	8006614 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006602:	4b1a      	ldr	r3, [pc, #104]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4917      	ldr	r1, [pc, #92]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 8006610:	4313      	orrs	r3, r2
 8006612:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006614:	f000 f834 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b14      	ldr	r3, [pc, #80]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	4912      	ldr	r1, [pc, #72]	@ (8006670 <HAL_RCC_ClockConfig+0x35c>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006632:	4b0e      	ldr	r3, [pc, #56]	@ (800666c <HAL_RCC_ClockConfig+0x358>)
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	4a0d      	ldr	r2, [pc, #52]	@ (8006670 <HAL_RCC_ClockConfig+0x35c>)
 800663c:	5cd3      	ldrb	r3, [r2, r3]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
 8006648:	4a0a      	ldr	r2, [pc, #40]	@ (8006674 <HAL_RCC_ClockConfig+0x360>)
 800664a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800664c:	4a0a      	ldr	r2, [pc, #40]	@ (8006678 <HAL_RCC_ClockConfig+0x364>)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <HAL_RCC_ClockConfig+0x368>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fb fbde 	bl	8001e18 <HAL_InitTick>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
 8006670:	0800b7b4 	.word	0x0800b7b4
 8006674:	24000004 	.word	0x24000004
 8006678:	24000000 	.word	0x24000000
 800667c:	24000008 	.word	0x24000008

08006680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	b089      	sub	sp, #36	@ 0x24
 8006684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006686:	4bb3      	ldr	r3, [pc, #716]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800668e:	2b18      	cmp	r3, #24
 8006690:	f200 8155 	bhi.w	800693e <HAL_RCC_GetSysClockFreq+0x2be>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	08006701 	.word	0x08006701
 80066a0:	0800693f 	.word	0x0800693f
 80066a4:	0800693f 	.word	0x0800693f
 80066a8:	0800693f 	.word	0x0800693f
 80066ac:	0800693f 	.word	0x0800693f
 80066b0:	0800693f 	.word	0x0800693f
 80066b4:	0800693f 	.word	0x0800693f
 80066b8:	0800693f 	.word	0x0800693f
 80066bc:	08006727 	.word	0x08006727
 80066c0:	0800693f 	.word	0x0800693f
 80066c4:	0800693f 	.word	0x0800693f
 80066c8:	0800693f 	.word	0x0800693f
 80066cc:	0800693f 	.word	0x0800693f
 80066d0:	0800693f 	.word	0x0800693f
 80066d4:	0800693f 	.word	0x0800693f
 80066d8:	0800693f 	.word	0x0800693f
 80066dc:	0800672d 	.word	0x0800672d
 80066e0:	0800693f 	.word	0x0800693f
 80066e4:	0800693f 	.word	0x0800693f
 80066e8:	0800693f 	.word	0x0800693f
 80066ec:	0800693f 	.word	0x0800693f
 80066f0:	0800693f 	.word	0x0800693f
 80066f4:	0800693f 	.word	0x0800693f
 80066f8:	0800693f 	.word	0x0800693f
 80066fc:	08006733 	.word	0x08006733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006700:	4b94      	ldr	r3, [pc, #592]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800670c:	4b91      	ldr	r3, [pc, #580]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	4a90      	ldr	r2, [pc, #576]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
 800671c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800671e:	e111      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006720:	4b8d      	ldr	r3, [pc, #564]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006722:	61bb      	str	r3, [r7, #24]
      break;
 8006724:	e10e      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006726:	4b8d      	ldr	r3, [pc, #564]	@ (800695c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006728:	61bb      	str	r3, [r7, #24]
      break;
 800672a:	e10b      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800672c:	4b8c      	ldr	r3, [pc, #560]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800672e:	61bb      	str	r3, [r7, #24]
      break;
 8006730:	e108      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006732:	4b88      	ldr	r3, [pc, #544]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800673c:	4b85      	ldr	r3, [pc, #532]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	091b      	lsrs	r3, r3, #4
 8006742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006748:	4b82      	ldr	r3, [pc, #520]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006752:	4b80      	ldr	r3, [pc, #512]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	08db      	lsrs	r3, r3, #3
 8006758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80e1 	beq.w	8006938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b02      	cmp	r3, #2
 800677a:	f000 8083 	beq.w	8006884 <HAL_RCC_GetSysClockFreq+0x204>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b02      	cmp	r3, #2
 8006782:	f200 80a1 	bhi.w	80068c8 <HAL_RCC_GetSysClockFreq+0x248>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_RCC_GetSysClockFreq+0x114>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d056      	beq.n	8006840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006792:	e099      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006794:	4b6f      	ldr	r3, [pc, #444]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02d      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	08db      	lsrs	r3, r3, #3
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
 80067b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b62      	ldr	r3, [pc, #392]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a02 	vldr	s12, [r7, #8]
 80067de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80067fa:	e087      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b51      	ldr	r3, [pc, #324]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006822:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800683e:	e065      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800696c <HAL_RCC_GetSysClockFreq+0x2ec>
 800684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006852:	4b40      	ldr	r3, [pc, #256]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006862:	ed97 6a02 	vldr	s12, [r7, #8]
 8006866:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006882:	e043      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b2f      	ldr	r3, [pc, #188]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068c6:	e021      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800696c <HAL_RCC_GetSysClockFreq+0x2ec>
 80068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068da:	4b1e      	ldr	r3, [pc, #120]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800690a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800690c:	4b11      	ldr	r3, [pc, #68]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	0a5b      	lsrs	r3, r3, #9
 8006912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006916:	3301      	adds	r3, #1
 8006918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006924:	edd7 6a07 	vldr	s13, [r7, #28]
 8006928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800692c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006930:	ee17 3a90 	vmov	r3, s15
 8006934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006936:	e005      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
      break;
 800693c:	e002      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800693e:	4b07      	ldr	r3, [pc, #28]	@ (800695c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006940:	61bb      	str	r3, [r7, #24]
      break;
 8006942:	bf00      	nop
  }

  return sysclockfreq;
 8006944:	69bb      	ldr	r3, [r7, #24]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3724      	adds	r7, #36	@ 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	58024400 	.word	0x58024400
 8006958:	03d09000 	.word	0x03d09000
 800695c:	003d0900 	.word	0x003d0900
 8006960:	016e3600 	.word	0x016e3600
 8006964:	46000000 	.word	0x46000000
 8006968:	4c742400 	.word	0x4c742400
 800696c:	4a742400 	.word	0x4a742400
 8006970:	4bb71b00 	.word	0x4bb71b00

08006974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800697a:	f7ff fe81 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 800697e:	4602      	mov	r2, r0
 8006980:	4b10      	ldr	r3, [pc, #64]	@ (80069c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	490f      	ldr	r1, [pc, #60]	@ (80069c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800698c:	5ccb      	ldrb	r3, [r1, r3]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	fa22 f303 	lsr.w	r3, r2, r3
 8006996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006998:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80069a2:	5cd3      	ldrb	r3, [r2, r3]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	fa22 f303 	lsr.w	r3, r2, r3
 80069ae:	4a07      	ldr	r2, [pc, #28]	@ (80069cc <HAL_RCC_GetHCLKFreq+0x58>)
 80069b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b2:	4a07      	ldr	r2, [pc, #28]	@ (80069d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069b8:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <HAL_RCC_GetHCLKFreq+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	58024400 	.word	0x58024400
 80069c8:	0800b7b4 	.word	0x0800b7b4
 80069cc:	24000004 	.word	0x24000004
 80069d0:	24000000 	.word	0x24000000

080069d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069d8:	f7ff ffcc 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4904      	ldr	r1, [pc, #16]	@ (80069fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	58024400 	.word	0x58024400
 80069fc:	0800b7b4 	.word	0x0800b7b4

08006a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a04:	f7ff ffb6 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4904      	ldr	r1, [pc, #16]	@ (8006a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	58024400 	.word	0x58024400
 8006a28:	0800b7b4 	.word	0x0800b7b4

08006a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a30:	b0c6      	sub	sp, #280	@ 0x118
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a50:	2500      	movs	r5, #0
 8006a52:	ea54 0305 	orrs.w	r3, r4, r5
 8006a56:	d049      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a62:	d02f      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a68:	d828      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a6e:	d01a      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a74:	d822      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7e:	d007      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a80:	e01c      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a82:	4bab      	ldr	r3, [pc, #684]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	4aaa      	ldr	r2, [pc, #680]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a8e:	e01a      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	3308      	adds	r3, #8
 8006a96:	2102      	movs	r1, #2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f002 fa49 	bl	8008f30 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aa4:	e00f      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	3328      	adds	r3, #40	@ 0x28
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f002 faf0 	bl	8009094 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aba:	e004      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ace:	4b98      	ldr	r3, [pc, #608]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006adc:	4a94      	ldr	r2, [pc, #592]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ae2:	e003      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006af8:	f04f 0900 	mov.w	r9, #0
 8006afc:	ea58 0309 	orrs.w	r3, r8, r9
 8006b00:	d047      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d82a      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b29 	.word	0x08006b29
 8006b18:	08006b37 	.word	0x08006b37
 8006b1c:	08006b4d 	.word	0x08006b4d
 8006b20:	08006b6b 	.word	0x08006b6b
 8006b24:	08006b6b 	.word	0x08006b6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b28:	4b81      	ldr	r3, [pc, #516]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	4a80      	ldr	r2, [pc, #512]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b34:	e01a      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 f9f6 	bl	8008f30 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b4a:	e00f      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	3328      	adds	r3, #40	@ 0x28
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f002 fa9d 	bl	8009094 <RCCEx_PLL3_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b60:	e004      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b68:	e000      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b74:	4b6e      	ldr	r3, [pc, #440]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b78:	f023 0107 	bic.w	r1, r3, #7
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b82:	4a6b      	ldr	r2, [pc, #428]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b88:	e003      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006b9e:	f04f 0b00 	mov.w	fp, #0
 8006ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ba6:	d05b      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bb0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bb4:	d03b      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bb6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bba:	d834      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bc0:	d037      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bc6:	d82e      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bcc:	d033      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006bce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bd2:	d828      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd8:	d01a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bde:	d822      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006be8:	d007      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006bea:	e01c      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bec:	4b50      	ldr	r3, [pc, #320]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	4a4f      	ldr	r2, [pc, #316]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e01e      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 f994 	bl	8008f30 <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e013      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	3328      	adds	r3, #40	@ 0x28
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 fa3b 	bl	8009094 <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c24:	e008      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c2c:	e004      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e002      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c40:	4b3b      	ldr	r3, [pc, #236]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c44:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c50:	4a37      	ldr	r2, [pc, #220]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d05d      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006c8c:	d03b      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c8e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006c92:	d834      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c98:	d037      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c9e:	d82e      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ca0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ca4:	d033      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006ca6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006caa:	d828      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb0:	d01a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb6:	d822      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cc0:	d007      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cc2:	e01c      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	4a19      	ldr	r2, [pc, #100]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e01e      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 f928 	bl	8008f30 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e013      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	3328      	adds	r3, #40	@ 0x28
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 f9cf 	bl	8009094 <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e008      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d28:	4a01      	ldr	r2, [pc, #4]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d2e:	e005      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d03a      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d62:	2b30      	cmp	r3, #48	@ 0x30
 8006d64:	d01f      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006d66:	2b30      	cmp	r3, #48	@ 0x30
 8006d68:	d819      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d00c      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d815      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d019      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d111      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7a:	4baa      	ldr	r3, [pc, #680]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	4aa9      	ldr	r2, [pc, #676]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d86:	e011      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f002 f8cd 	bl	8008f30 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d9c:	e006      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006db4:	4b9b      	ldr	r3, [pc, #620]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc2:	4a98      	ldr	r2, [pc, #608]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dc8:	e003      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006de8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006dec:	460b      	mov	r3, r1
 8006dee:	4313      	orrs	r3, r2
 8006df0:	d051      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dfc:	d035      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e02:	d82e      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e08:	d031      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e0e:	d828      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e14:	d01a      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1a:	d822      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e24:	d007      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e26:	e01c      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e28:	4b7e      	ldr	r3, [pc, #504]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4a7d      	ldr	r2, [pc, #500]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e34:	e01c      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 f876 	bl	8008f30 <RCCEx_PLL2_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e4a:	e011      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	3328      	adds	r3, #40	@ 0x28
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 f91d 	bl	8009094 <RCCEx_PLL3_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e68:	e002      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e78:	4b6a      	ldr	r3, [pc, #424]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e86:	4a67      	ldr	r2, [pc, #412]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e8c:	e003      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d053      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ec0:	d033      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006ec2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ec6:	d82c      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ecc:	d02f      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ed2:	d826      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ed8:	d02b      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ede:	d820      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee4:	d012      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eea:	d81a      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d022      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d115      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	3308      	adds	r3, #8
 8006efc:	2101      	movs	r1, #1
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 f816 	bl	8008f30 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e015      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	2101      	movs	r1, #1
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 f8bd 	bl	8009094 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f20:	e00a      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f28:	e006      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e004      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f40:	4b38      	ldr	r3, [pc, #224]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f4e:	4a35      	ldr	r2, [pc, #212]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f54:	e003      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	d058      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f8a:	d033      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f90:	d82c      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f96:	d02f      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9c:	d826      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa2:	d02b      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa8:	d820      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fae:	d012      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb4:	d81a      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d022      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fbe:	d115      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 ffb1 	bl	8008f30 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e015      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 f858 	bl	8009094 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fea:	e00a      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ff2:	e006      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e002      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ffc:	bf00      	nop
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10e      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800700a:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800701a:	4a02      	ldr	r2, [pc, #8]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800703c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007046:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800704a:	460b      	mov	r3, r1
 800704c:	4313      	orrs	r3, r2
 800704e:	d037      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705a:	d00e      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800705c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007060:	d816      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d018      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800706a:	d111      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4bc4      	ldr	r3, [pc, #784]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4ac3      	ldr	r2, [pc, #780]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007078:	e00f      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	3308      	adds	r3, #8
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f001 ff54 	bl	8008f30 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800708e:	e004      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007096:	e000      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070a2:	4bb7      	ldr	r3, [pc, #732]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b0:	4ab3      	ldr	r2, [pc, #716]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b2:	430b      	orrs	r3, r1
 80070b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80070b6:	e003      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070d0:	2300      	movs	r3, #0
 80070d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d039      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d81c      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	0800712d 	.word	0x0800712d
 80070f4:	08007101 	.word	0x08007101
 80070f8:	0800710f 	.word	0x0800710f
 80070fc:	0800712d 	.word	0x0800712d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b9f      	ldr	r3, [pc, #636]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4a9e      	ldr	r2, [pc, #632]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800710c:	e00f      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	3308      	adds	r3, #8
 8007114:	2102      	movs	r1, #2
 8007116:	4618      	mov	r0, r3
 8007118:	f001 ff0a 	bl	8008f30 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007122:	e004      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800712a:	e000      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800712c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007136:	4b92      	ldr	r3, [pc, #584]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713a:	f023 0103 	bic.w	r1, r3, #3
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	4a8e      	ldr	r2, [pc, #568]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007146:	430b      	orrs	r3, r1
 8007148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007164:	2300      	movs	r3, #0
 8007166:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800716a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800716e:	460b      	mov	r3, r1
 8007170:	4313      	orrs	r3, r2
 8007172:	f000 8099 	beq.w	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007176:	4b83      	ldr	r3, [pc, #524]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a82      	ldr	r2, [pc, #520]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007182:	f7fa fe93 	bl	8001eac <HAL_GetTick>
 8007186:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800718a:	e00b      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800718c:	f7fa fe8e 	bl	8001eac <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b64      	cmp	r3, #100	@ 0x64
 800719a:	d903      	bls.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071a2:	e005      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071a4:	4b77      	ldr	r3, [pc, #476]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ed      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d173      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071b8:	4b71      	ldr	r3, [pc, #452]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071c4:	4053      	eors	r3, r2
 80071c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d015      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ce:	4b6c      	ldr	r3, [pc, #432]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071da:	4b69      	ldr	r3, [pc, #420]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071de:	4a68      	ldr	r2, [pc, #416]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071e6:	4b66      	ldr	r3, [pc, #408]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ea:	4a65      	ldr	r2, [pc, #404]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071f2:	4a63      	ldr	r2, [pc, #396]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007206:	d118      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fa fe50 	bl	8001eac <HAL_GetTick>
 800720c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007210:	e00d      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007212:	f7fa fe4b 	bl	8001eac <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800721c:	1ad2      	subs	r2, r2, r3
 800721e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800722c:	e005      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800722e:	4b54      	ldr	r3, [pc, #336]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0eb      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800723a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800723e:	2b00      	cmp	r3, #0
 8007240:	d129      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800724a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800724e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007252:	d10e      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007254:	4b4a      	ldr	r3, [pc, #296]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007264:	091a      	lsrs	r2, r3, #4
 8007266:	4b48      	ldr	r3, [pc, #288]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007268:	4013      	ands	r3, r2
 800726a:	4a45      	ldr	r2, [pc, #276]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6113      	str	r3, [r2, #16]
 8007270:	e005      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007272:	4b43      	ldr	r3, [pc, #268]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	4a42      	ldr	r2, [pc, #264]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007278:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800727c:	6113      	str	r3, [r2, #16]
 800727e:	4b40      	ldr	r3, [pc, #256]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007280:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800728a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728e:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6713      	str	r3, [r2, #112]	@ 0x70
 8007294:	e008      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800729a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800729e:	e003      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f002 0301 	and.w	r3, r2, #1
 80072b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072c2:	460b      	mov	r3, r1
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f000 808f 	beq.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072d0:	2b28      	cmp	r3, #40	@ 0x28
 80072d2:	d871      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072d4:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080073c1 	.word	0x080073c1
 80072e0:	080073b9 	.word	0x080073b9
 80072e4:	080073b9 	.word	0x080073b9
 80072e8:	080073b9 	.word	0x080073b9
 80072ec:	080073b9 	.word	0x080073b9
 80072f0:	080073b9 	.word	0x080073b9
 80072f4:	080073b9 	.word	0x080073b9
 80072f8:	080073b9 	.word	0x080073b9
 80072fc:	0800738d 	.word	0x0800738d
 8007300:	080073b9 	.word	0x080073b9
 8007304:	080073b9 	.word	0x080073b9
 8007308:	080073b9 	.word	0x080073b9
 800730c:	080073b9 	.word	0x080073b9
 8007310:	080073b9 	.word	0x080073b9
 8007314:	080073b9 	.word	0x080073b9
 8007318:	080073b9 	.word	0x080073b9
 800731c:	080073a3 	.word	0x080073a3
 8007320:	080073b9 	.word	0x080073b9
 8007324:	080073b9 	.word	0x080073b9
 8007328:	080073b9 	.word	0x080073b9
 800732c:	080073b9 	.word	0x080073b9
 8007330:	080073b9 	.word	0x080073b9
 8007334:	080073b9 	.word	0x080073b9
 8007338:	080073b9 	.word	0x080073b9
 800733c:	080073c1 	.word	0x080073c1
 8007340:	080073b9 	.word	0x080073b9
 8007344:	080073b9 	.word	0x080073b9
 8007348:	080073b9 	.word	0x080073b9
 800734c:	080073b9 	.word	0x080073b9
 8007350:	080073b9 	.word	0x080073b9
 8007354:	080073b9 	.word	0x080073b9
 8007358:	080073b9 	.word	0x080073b9
 800735c:	080073c1 	.word	0x080073c1
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073b9 	.word	0x080073b9
 8007368:	080073b9 	.word	0x080073b9
 800736c:	080073b9 	.word	0x080073b9
 8007370:	080073b9 	.word	0x080073b9
 8007374:	080073b9 	.word	0x080073b9
 8007378:	080073b9 	.word	0x080073b9
 800737c:	080073c1 	.word	0x080073c1
 8007380:	58024400 	.word	0x58024400
 8007384:	58024800 	.word	0x58024800
 8007388:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	3308      	adds	r3, #8
 8007392:	2101      	movs	r1, #1
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fdcb 	bl	8008f30 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2101      	movs	r1, #1
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 fe72 	bl	8009094 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073ca:	4bbf      	ldr	r3, [pc, #764]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073d8:	4abb      	ldr	r2, [pc, #748]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073da:	430b      	orrs	r3, r1
 80073dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f002 0302 	and.w	r3, r2, #2
 80073f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d041      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740e:	2b05      	cmp	r3, #5
 8007410:	d824      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007412:	a201      	add	r2, pc, #4	@ (adr r2, 8007418 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	08007465 	.word	0x08007465
 800741c:	08007431 	.word	0x08007431
 8007420:	08007447 	.word	0x08007447
 8007424:	08007465 	.word	0x08007465
 8007428:	08007465 	.word	0x08007465
 800742c:	08007465 	.word	0x08007465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	3308      	adds	r3, #8
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fd79 	bl	8008f30 <RCCEx_PLL2_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007444:	e00f      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744a:	3328      	adds	r3, #40	@ 0x28
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fe20 	bl	8009094 <RCCEx_PLL3_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800745a:	e004      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007462:	e000      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800746e:	4b96      	ldr	r3, [pc, #600]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007472:	f023 0107 	bic.w	r1, r3, #7
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747c:	4a92      	ldr	r2, [pc, #584]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800747e:	430b      	orrs	r3, r1
 8007480:	6553      	str	r3, [r2, #84]	@ 0x54
 8007482:	e003      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f002 0304 	and.w	r3, r2, #4
 8007498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800749c:	2300      	movs	r3, #0
 800749e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074a6:	460b      	mov	r3, r1
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d044      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	2b05      	cmp	r3, #5
 80074b6:	d825      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074b8:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	0800750d 	.word	0x0800750d
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074ef 	.word	0x080074ef
 80074cc:	0800750d 	.word	0x0800750d
 80074d0:	0800750d 	.word	0x0800750d
 80074d4:	0800750d 	.word	0x0800750d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074dc:	3308      	adds	r3, #8
 80074de:	2101      	movs	r1, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fd25 	bl	8008f30 <RCCEx_PLL2_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074ec:	e00f      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	3328      	adds	r3, #40	@ 0x28
 80074f4:	2101      	movs	r1, #1
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fdcc 	bl	8009094 <RCCEx_PLL3_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007502:	e004      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800750c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007516:	4b6c      	ldr	r3, [pc, #432]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751a:	f023 0107 	bic.w	r1, r3, #7
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007526:	4a68      	ldr	r2, [pc, #416]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007528:	430b      	orrs	r3, r1
 800752a:	6593      	str	r3, [r2, #88]	@ 0x58
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f002 0320 	and.w	r3, r2, #32
 8007542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007546:	2300      	movs	r3, #0
 8007548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800754c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d055      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800755e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007562:	d033      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007568:	d82c      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d02f      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007574:	d826      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007576:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800757a:	d02b      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800757c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007580:	d820      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007586:	d012      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758c:	d81a      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d022      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007596:	d115      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	3308      	adds	r3, #8
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fcc5 	bl	8008f30 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e015      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3328      	adds	r3, #40	@ 0x28
 80075b4:	2102      	movs	r1, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fd6c 	bl	8009094 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e00a      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075ca:	e006      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075cc:	bf00      	nop
 80075ce:	e004      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d0:	bf00      	nop
 80075d2:	e002      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075e2:	4b39      	ldr	r3, [pc, #228]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f2:	4a35      	ldr	r2, [pc, #212]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80075f8:	e003      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800760e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007612:	2300      	movs	r3, #0
 8007614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007618:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800761c:	460b      	mov	r3, r1
 800761e:	4313      	orrs	r3, r2
 8007620:	d058      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800762a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800762e:	d033      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007630:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007634:	d82c      	bhi.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800763a:	d02f      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007640:	d826      	bhi.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007642:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007646:	d02b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007648:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800764c:	d820      	bhi.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007652:	d012      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007658:	d81a      	bhi.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d022      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007662:	d115      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007668:	3308      	adds	r3, #8
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f001 fc5f 	bl	8008f30 <RCCEx_PLL2_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007678:	e015      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	3328      	adds	r3, #40	@ 0x28
 8007680:	2102      	movs	r1, #2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fd06 	bl	8009094 <RCCEx_PLL3_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800768e:	e00a      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007696:	e006      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007698:	bf00      	nop
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800769c:	bf00      	nop
 800769e:	e002      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a0:	bf00      	nop
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10e      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076ae:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076be:	4a02      	ldr	r2, [pc, #8]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c4:	e006      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80076ee:	460b      	mov	r3, r1
 80076f0:	4313      	orrs	r3, r2
 80076f2:	d055      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007700:	d033      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007702:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007706:	d82c      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800770c:	d02f      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800770e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007712:	d826      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007714:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007718:	d02b      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800771a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800771e:	d820      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007724:	d012      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800772a:	d81a      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d022      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007734:	d115      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	3308      	adds	r3, #8
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fbf6 	bl	8008f30 <RCCEx_PLL2_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800774a:	e015      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	3328      	adds	r3, #40	@ 0x28
 8007752:	2102      	movs	r1, #2
 8007754:	4618      	mov	r0, r3
 8007756:	f001 fc9d 	bl	8009094 <RCCEx_PLL3_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007760:	e00a      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007768:	e006      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800776a:	bf00      	nop
 800776c:	e004      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10b      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007780:	4ba0      	ldr	r3, [pc, #640]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007784:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007790:	4a9c      	ldr	r2, [pc, #624]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007792:	430b      	orrs	r3, r1
 8007794:	6593      	str	r3, [r2, #88]	@ 0x58
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800779c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 0308 	and.w	r3, r2, #8
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d01e      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	3328      	adds	r3, #40	@ 0x28
 80077d4:	2102      	movs	r1, #2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 fc5c 	bl	8009094 <RCCEx_PLL3_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80077e8:	4b86      	ldr	r3, [pc, #536]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f8:	4a82      	ldr	r2, [pc, #520]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f002 0310 	and.w	r3, r2, #16
 800780a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800780e:	2300      	movs	r3, #0
 8007810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007814:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007818:	460b      	mov	r3, r1
 800781a:	4313      	orrs	r3, r2
 800781c:	d01e      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800782a:	d10c      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	3328      	adds	r3, #40	@ 0x28
 8007832:	2102      	movs	r1, #2
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fc2d 	bl	8009094 <RCCEx_PLL3_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007846:	4b6f      	ldr	r3, [pc, #444]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007856:	4a6b      	ldr	r2, [pc, #428]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007858:	430b      	orrs	r3, r1
 800785a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800786a:	2300      	movs	r3, #0
 800786c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800786e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d03e      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007884:	d022      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800788a:	d81b      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007894:	d00b      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007896:	e015      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	3308      	adds	r3, #8
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 fb45 	bl	8008f30 <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078ac:	e00f      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	3328      	adds	r3, #40	@ 0x28
 80078b4:	2102      	movs	r1, #2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fbec 	bl	8009094 <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078c2:	e004      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ca:	e000      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80078cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078e6:	4a47      	ldr	r2, [pc, #284]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078e8:	430b      	orrs	r3, r1
 80078ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007902:	673b      	str	r3, [r7, #112]	@ 0x70
 8007904:	2300      	movs	r3, #0
 8007906:	677b      	str	r3, [r7, #116]	@ 0x74
 8007908:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800790c:	460b      	mov	r3, r1
 800790e:	4313      	orrs	r3, r2
 8007910:	d03b      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800791a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800791e:	d01f      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007924:	d818      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800792a:	d003      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800792c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007930:	d007      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007932:	e011      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007934:	4b33      	ldr	r3, [pc, #204]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	4a32      	ldr	r2, [pc, #200]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800793a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800793e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007940:	e00f      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007946:	3328      	adds	r3, #40	@ 0x28
 8007948:	2101      	movs	r1, #1
 800794a:	4618      	mov	r0, r3
 800794c:	f001 fba2 	bl	8009094 <RCCEx_PLL3_Config>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007956:	e004      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800796a:	4b26      	ldr	r3, [pc, #152]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797a:	4a22      	ldr	r2, [pc, #136]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800797c:	430b      	orrs	r3, r1
 800797e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007996:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007998:	2300      	movs	r3, #0
 800799a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800799c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079a0:	460b      	mov	r3, r1
 80079a2:	4313      	orrs	r3, r2
 80079a4:	d034      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b4:	d007      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079b6:	e011      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b8:	4b12      	ldr	r3, [pc, #72]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	4a11      	ldr	r2, [pc, #68]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079c4:	e00e      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	3308      	adds	r3, #8
 80079cc:	2102      	movs	r1, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 faae 	bl	8008f30 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079da:	e003      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10d      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fa:	4a02      	ldr	r2, [pc, #8]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a00:	e006      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a1e:	2300      	movs	r3, #0
 8007a20:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a22:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d00c      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	3328      	adds	r3, #40	@ 0x28
 8007a32:	2102      	movs	r1, #2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 fb2d 	bl	8009094 <RCCEx_PLL3_Config>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a54:	2300      	movs	r3, #0
 8007a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a58:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	d036      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a6c:	d018      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a72:	d811      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a78:	d014      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7e:	d80b      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d011      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a88:	d106      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8a:	4bb7      	ldr	r3, [pc, #732]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	4ab6      	ldr	r2, [pc, #728]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a96:	e008      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a9e:	e004      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ab2:	4bad      	ldr	r3, [pc, #692]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ac0:	4aa9      	ldr	r2, [pc, #676]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ade:	2300      	movs	r3, #0
 8007ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ae2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007aec:	4b9e      	ldr	r3, [pc, #632]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afa:	4a9b      	ldr	r2, [pc, #620]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b0e:	2300      	movs	r3, #0
 8007b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d009      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b1c:	4b92      	ldr	r3, [pc, #584]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b2a:	4a8f      	ldr	r2, [pc, #572]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b3e:	2300      	movs	r3, #0
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b46:	460b      	mov	r3, r1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d00e      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b4c:	4b86      	ldr	r3, [pc, #536]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	4a85      	ldr	r2, [pc, #532]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b56:	6113      	str	r3, [r2, #16]
 8007b58:	4b83      	ldr	r3, [pc, #524]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b5a:	6919      	ldr	r1, [r3, #16]
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b64:	4a80      	ldr	r2, [pc, #512]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b66:	430b      	orrs	r3, r1
 8007b68:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b78:	2300      	movs	r3, #0
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b80:	460b      	mov	r3, r1
 8007b82:	4313      	orrs	r3, r2
 8007b84:	d009      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b86:	4b78      	ldr	r3, [pc, #480]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b94:	4a74      	ldr	r2, [pc, #464]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b96:	430b      	orrs	r3, r1
 8007b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ba8:	2300      	movs	r3, #0
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	d00a      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc6:	4a68      	ldr	r2, [pc, #416]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bde:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d011      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bec:	3308      	adds	r3, #8
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 f99d 	bl	8008f30 <RCCEx_PLL2_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	2100      	movs	r1, #0
 8007c16:	6239      	str	r1, [r7, #32]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d011      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f97d 	bl	8008f30 <RCCEx_PLL2_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	2100      	movs	r1, #0
 8007c56:	61b9      	str	r1, [r7, #24]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d011      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f95d 	bl	8008f30 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	2100      	movs	r1, #0
 8007c96:	6139      	str	r1, [r7, #16]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d011      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	3328      	adds	r3, #40	@ 0x28
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f9ef 	bl	8009094 <RCCEx_PLL3_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	d011      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	3328      	adds	r3, #40	@ 0x28
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f9cf 	bl	8009094 <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	2100      	movs	r1, #0
 8007d16:	6039      	str	r1, [r7, #0]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d011      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	3328      	adds	r3, #40	@ 0x28
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f9af 	bl	8009094 <RCCEx_PLL3_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007d4c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e000      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007d60:	46bd      	mov	sp, r7
 8007d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400

08007d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b090      	sub	sp, #64	@ 0x40
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	f040 8094 	bne.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d84:	4b9b      	ldr	r3, [pc, #620]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	f200 8087 	bhi.w	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d96:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007e01 	.word	0x08007e01
 8007da8:	08007e9d 	.word	0x08007e9d
 8007dac:	08007e29 	.word	0x08007e29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007db0:	4b90      	ldr	r3, [pc, #576]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dbc:	d108      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 ff62 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dcc:	f000 bc93 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd4:	f000 bc8f 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd8:	4b86      	ldr	r3, [pc, #536]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007de4:	d108      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de6:	f107 0318 	add.w	r3, r7, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fca6 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	f000 bc7f 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	f000 bc7b 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e00:	4b7c      	ldr	r3, [pc, #496]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0c:	d108      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fde6 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1c:	f000 bc6b 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e24:	f000 bc67 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e28:	4b72      	ldr	r3, [pc, #456]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e32:	4b70      	ldr	r3, [pc, #448]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d10c      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e44:	4b6b      	ldr	r3, [pc, #428]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	08db      	lsrs	r3, r3, #3
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007e50:	fa22 f303 	lsr.w	r3, r2, r3
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e56:	e01f      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e58:	4b66      	ldr	r3, [pc, #408]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e64:	d106      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e6c:	d102      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e6e:	4b63      	ldr	r3, [pc, #396]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e72:	e011      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e74:	4b5f      	ldr	r3, [pc, #380]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e80:	d106      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e88:	d102      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e94:	f000 bc2f 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e98:	f000 bc2d 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e9c:	4b59      	ldr	r3, [pc, #356]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	f000 bc29 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	f000 bc25 	b.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	f040 80a7 	bne.w	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007eba:	4b4e      	ldr	r3, [pc, #312]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ebe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007ec2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007eca:	d054      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ed2:	f200 808b 	bhi.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007edc:	f000 8083 	beq.w	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ee6:	f200 8081 	bhi.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef0:	d02f      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef8:	d878      	bhi.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f06:	d012      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007f08:	e070      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f16:	d107      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 feb5 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f26:	e3e6      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e3e3      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f2e:	4b31      	ldr	r3, [pc, #196]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f3c:	f107 0318 	add.w	r3, r7, #24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fbfb 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4a:	e3d4      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f50:	e3d1      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f52:	4b28      	ldr	r3, [pc, #160]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f5e:	d107      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f60:	f107 030c 	add.w	r3, r7, #12
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fd3d 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f6e:	e3c2      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f74:	e3bf      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f76:	4b1f      	ldr	r3, [pc, #124]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f80:	4b1c      	ldr	r3, [pc, #112]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d10c      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f92:	4b18      	ldr	r3, [pc, #96]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	08db      	lsrs	r3, r3, #3
 8007f98:	f003 0303 	and.w	r3, r3, #3
 8007f9c:	4a16      	ldr	r2, [pc, #88]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa4:	e01e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fa6:	4b13      	ldr	r3, [pc, #76]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb2:	d106      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fba:	d102      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc0:	e010      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fce:	d106      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd6:	d102      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fd8:	4b09      	ldr	r3, [pc, #36]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fe2:	e388      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fe4:	e387      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fe6:	4b07      	ldr	r3, [pc, #28]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fea:	e384      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff0:	e381      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ff2:	bf00      	nop
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	03d09000 	.word	0x03d09000
 8007ffc:	003d0900 	.word	0x003d0900
 8008000:	016e3600 	.word	0x016e3600
 8008004:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008010:	430b      	orrs	r3, r1
 8008012:	f040 809c 	bne.w	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008016:	4b9e      	ldr	r3, [pc, #632]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800801e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008026:	d054      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800802e:	f200 808b 	bhi.w	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008038:	f000 8083 	beq.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008042:	f200 8081 	bhi.w	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800804c:	d02f      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008054:	d878      	bhi.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008062:	d012      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008064:	e070      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008066:	4b8a      	ldr	r3, [pc, #552]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008072:	d107      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fe07 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008082:	e338      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e335      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800808a:	4b81      	ldr	r3, [pc, #516]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008096:	d107      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008098:	f107 0318 	add.w	r3, r7, #24
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fb4d 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080a6:	e326      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ac:	e323      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080ae:	4b78      	ldr	r3, [pc, #480]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ba:	d107      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fc8f 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ca:	e314      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d0:	e311      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d10c      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80080e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ee:	4b68      	ldr	r3, [pc, #416]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	4a66      	ldr	r2, [pc, #408]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008100:	e01e      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008102:	4b63      	ldr	r3, [pc, #396]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800810e:	d106      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008116:	d102      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008118:	4b5f      	ldr	r3, [pc, #380]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800811a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800811c:	e010      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800811e:	4b5c      	ldr	r3, [pc, #368]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800812a:	d106      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800812c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008132:	d102      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008134:	4b59      	ldr	r3, [pc, #356]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008138:	e002      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800813e:	e2da      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008140:	e2d9      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008142:	4b57      	ldr	r3, [pc, #348]	@ (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008146:	e2d6      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814c:	e2d3      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800814e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008152:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008156:	430b      	orrs	r3, r1
 8008158:	f040 80a7 	bne.w	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800815c:	4b4c      	ldr	r3, [pc, #304]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008164:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800816c:	d055      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008174:	f200 8096 	bhi.w	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800817e:	f000 8084 	beq.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008188:	f200 808c 	bhi.w	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008192:	d030      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819a:	f200 8083 	bhi.w	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081aa:	d012      	beq.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081ac:	e07a      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081ae:	4b38      	ldr	r3, [pc, #224]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ba:	d107      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fd63 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ca:	e294      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d0:	e291      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081de:	d107      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e0:	f107 0318 	add.w	r3, r7, #24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 faa9 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ee:	e282      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f4:	e27f      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081f6:	4b26      	ldr	r3, [pc, #152]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008202:	d107      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fbeb 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008212:	e270      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008218:	e26d      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800821a:	4b1d      	ldr	r3, [pc, #116]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800821c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800821e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008224:	4b1a      	ldr	r3, [pc, #104]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b04      	cmp	r3, #4
 800822e:	d10c      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008236:	4b16      	ldr	r3, [pc, #88]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	4a14      	ldr	r2, [pc, #80]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008242:	fa22 f303 	lsr.w	r3, r2, r3
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008248:	e01e      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800824a:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008256:	d106      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800825e:	d102      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008260:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008264:	e010      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008266:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800826e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008272:	d106      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827a:	d102      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800827c:	4b07      	ldr	r3, [pc, #28]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008286:	e236      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008288:	e235      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800828a:	4b05      	ldr	r3, [pc, #20]	@ (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828e:	e232      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008290:	58024400 	.word	0x58024400
 8008294:	03d09000 	.word	0x03d09000
 8008298:	003d0900 	.word	0x003d0900
 800829c:	016e3600 	.word	0x016e3600
 80082a0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e225      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ae:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80082b2:	430b      	orrs	r3, r1
 80082b4:	f040 8085 	bne.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082b8:	4b9c      	ldr	r3, [pc, #624]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082c8:	d06b      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80082ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d0:	d874      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082d8:	d056      	beq.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e0:	d86c      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082e8:	d03b      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f0:	d864      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f8:	d021      	beq.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008300:	d85c      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830e:	d004      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008310:	e054      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008312:	f7fe fb5f 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 8008316:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008318:	e1ed      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831a:	4b84      	ldr	r3, [pc, #528]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008326:	d107      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008328:	f107 0318 	add.w	r3, r7, #24
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fa05 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008336:	e1de      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833c:	e1db      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800833e:	4b7b      	ldr	r3, [pc, #492]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800834a:	d107      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fb47 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835a:	e1cc      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008360:	e1c9      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008362:	4b72      	ldr	r3, [pc, #456]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b04      	cmp	r3, #4
 800836c:	d109      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800836e:	4b6f      	ldr	r3, [pc, #444]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	08db      	lsrs	r3, r3, #3
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	4a6d      	ldr	r2, [pc, #436]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008380:	e1b9      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008386:	e1b6      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008388:	4b68      	ldr	r3, [pc, #416]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008394:	d102      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008396:	4b67      	ldr	r3, [pc, #412]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839a:	e1ac      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a0:	e1a9      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083a2:	4b62      	ldr	r3, [pc, #392]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80083b0:	4b61      	ldr	r3, [pc, #388]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b4:	e19f      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ba:	e19c      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c0:	e199      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80083ca:	430b      	orrs	r3, r1
 80083cc:	d173      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083ce:	4b57      	ldr	r3, [pc, #348]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083de:	d02f      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80083e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e6:	d863      	bhi.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f4:	d012      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80083f6:	e05b      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083f8:	4b4c      	ldr	r3, [pc, #304]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008404:	d107      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008406:	f107 0318 	add.w	r3, r7, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f996 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008414:	e16f      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800841a:	e16c      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800841c:	4b43      	ldr	r3, [pc, #268]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008428:	d107      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800842a:	f107 030c 	add.w	r3, r7, #12
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fad8 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008438:	e15d      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800843e:	e15a      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008440:	4b3a      	ldr	r3, [pc, #232]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008444:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800844a:	4b38      	ldr	r3, [pc, #224]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b04      	cmp	r3, #4
 8008454:	d10c      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800845c:	4b33      	ldr	r3, [pc, #204]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	08db      	lsrs	r3, r3, #3
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	4a32      	ldr	r2, [pc, #200]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008468:	fa22 f303 	lsr.w	r3, r2, r3
 800846c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800846e:	e01e      	b.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008470:	4b2e      	ldr	r3, [pc, #184]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800847c:	d106      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008484:	d102      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008486:	4b2b      	ldr	r3, [pc, #172]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800848a:	e010      	b.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800848c:	4b27      	ldr	r3, [pc, #156]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008498:	d106      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800849a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a0:	d102      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084a2:	4b25      	ldr	r3, [pc, #148]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80084a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084a6:	e002      	b.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084ac:	e123      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084ae:	e122      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084b4:	e11f      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80084be:	430b      	orrs	r3, r1
 80084c0:	d13c      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084c2:	4b1a      	ldr	r3, [pc, #104]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d8:	d012      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80084da:	e023      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fbcc 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e0fd      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fe:	e0fa      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008500:	4b0a      	ldr	r3, [pc, #40]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800850c:	d107      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800850e:	f107 0318 	add.w	r3, r7, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f912 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851c:	e0eb      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008522:	e0e8      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008528:	e0e5      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	03d09000 	.word	0x03d09000
 8008534:	003d0900 	.word	0x003d0900
 8008538:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800853c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008540:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008544:	430b      	orrs	r3, r1
 8008546:	f040 8085 	bne.w	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800854a:	4b6d      	ldr	r3, [pc, #436]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800854c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008552:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800855a:	d06b      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008562:	d874      	bhi.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800856a:	d056      	beq.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008572:	d86c      	bhi.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800857a:	d03b      	beq.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008582:	d864      	bhi.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858a:	d021      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008592:	d85c      	bhi.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800859a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a0:	d004      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085a2:	e054      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085a4:	f000 f8b4 	bl	8008710 <HAL_RCCEx_GetD3PCLK1Freq>
 80085a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085aa:	e0a4      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ac:	4b54      	ldr	r3, [pc, #336]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ba:	f107 0318 	add.w	r3, r7, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f8bc 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c8:	e095      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ce:	e092      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d0:	4b4b      	ldr	r3, [pc, #300]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085dc:	d107      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f9fe 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ec:	e083      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f2:	e080      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085f4:	4b42      	ldr	r3, [pc, #264]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d109      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008600:	4b3f      	ldr	r3, [pc, #252]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	08db      	lsrs	r3, r3, #3
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	4a3e      	ldr	r2, [pc, #248]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800860c:	fa22 f303 	lsr.w	r3, r2, r3
 8008610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008612:	e070      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008618:	e06d      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800861a:	4b39      	ldr	r3, [pc, #228]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008628:	4b37      	ldr	r3, [pc, #220]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862c:	e063      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008632:	e060      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008634:	4b32      	ldr	r3, [pc, #200]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800863c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008640:	d102      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008642:	4b32      	ldr	r3, [pc, #200]	@ (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008646:	e056      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864c:	e053      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008652:	e050      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008658:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800865c:	430b      	orrs	r3, r1
 800865e:	d148      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008660:	4b27      	ldr	r3, [pc, #156]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008668:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008670:	d02a      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008678:	d838      	bhi.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800867a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008686:	d00d      	beq.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008688:	e030      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800868a:	4b1d      	ldr	r3, [pc, #116]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008696:	d102      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008698:	4b1c      	ldr	r3, [pc, #112]	@ (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869c:	e02b      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a2:	e028      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a4:	4b16      	ldr	r3, [pc, #88]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b0:	d107      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fae8 	bl	8008c8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c0:	e019      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c6:	e016      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d4:	d107      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d6:	f107 0318 	add.w	r3, r7, #24
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f82e 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e4:	e007      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ea:	e004      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f0:	e001      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3740      	adds	r7, #64	@ 0x40
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58024400 	.word	0x58024400
 8008704:	03d09000 	.word	0x03d09000
 8008708:	003d0900 	.word	0x003d0900
 800870c:	016e3600 	.word	0x016e3600

08008710 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008714:	f7fe f92e 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 8008718:	4602      	mov	r2, r0
 800871a:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	4904      	ldr	r1, [pc, #16]	@ (8008738 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008726:	5ccb      	ldrb	r3, [r1, r3]
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008730:	4618      	mov	r0, r3
 8008732:	bd80      	pop	{r7, pc}
 8008734:	58024400 	.word	0x58024400
 8008738:	0800b7b4 	.word	0x0800b7b4

0800873c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800873c:	b480      	push	{r7}
 800873e:	b089      	sub	sp, #36	@ 0x24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008744:	4ba1      	ldr	r3, [pc, #644]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800874e:	4b9f      	ldr	r3, [pc, #636]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008752:	0b1b      	lsrs	r3, r3, #12
 8008754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008758:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800875a:	4b9c      	ldr	r3, [pc, #624]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008766:	4b99      	ldr	r3, [pc, #612]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876a:	08db      	lsrs	r3, r3, #3
 800876c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	fb02 f303 	mul.w	r3, r2, r3
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8111 	beq.w	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b02      	cmp	r3, #2
 800878e:	f000 8083 	beq.w	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b02      	cmp	r3, #2
 8008796:	f200 80a1 	bhi.w	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d056      	beq.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087a6:	e099      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a8:	4b88      	ldr	r3, [pc, #544]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02d      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087b4:	4b85      	ldr	r3, [pc, #532]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	08db      	lsrs	r3, r3, #3
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	4a84      	ldr	r2, [pc, #528]	@ (80089d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
 80087c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b7b      	ldr	r3, [pc, #492]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800880e:	e087      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b6a      	ldr	r3, [pc, #424]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008852:	e065      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b59      	ldr	r3, [pc, #356]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a03 	vldr	s12, [r7, #12]
 800887a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008896:	e043      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b48      	ldr	r3, [pc, #288]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088da:	e021      	b.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b37      	ldr	r3, [pc, #220]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008920:	4b2a      	ldr	r3, [pc, #168]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008924:	0a5b      	lsrs	r3, r3, #9
 8008926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800893a:	edd7 6a07 	vldr	s13, [r7, #28]
 800893e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008946:	ee17 2a90 	vmov	r2, s15
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800894e:	4b1f      	ldr	r3, [pc, #124]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008964:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008968:	edd7 6a07 	vldr	s13, [r7, #28]
 800896c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008974:	ee17 2a90 	vmov	r2, s15
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800897c:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008996:	edd7 6a07 	vldr	s13, [r7, #28]
 800899a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a2:	ee17 2a90 	vmov	r2, s15
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089aa:	e008      	b.n	80089be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	609a      	str	r2, [r3, #8]
}
 80089be:	bf00      	nop
 80089c0:	3724      	adds	r7, #36	@ 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	58024400 	.word	0x58024400
 80089d0:	03d09000 	.word	0x03d09000
 80089d4:	46000000 	.word	0x46000000
 80089d8:	4c742400 	.word	0x4c742400
 80089dc:	4a742400 	.word	0x4a742400
 80089e0:	4bb71b00 	.word	0x4bb71b00

080089e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b089      	sub	sp, #36	@ 0x24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	0d1b      	lsrs	r3, r3, #20
 80089fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a02:	4b9c      	ldr	r3, [pc, #624]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a0e:	4b99      	ldr	r3, [pc, #612]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8111 	beq.w	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f000 8083 	beq.w	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f200 80a1 	bhi.w	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d056      	beq.n	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a4e:	e099      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a50:	4b88      	ldr	r3, [pc, #544]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02d      	beq.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a5c:	4b85      	ldr	r3, [pc, #532]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a84      	ldr	r2, [pc, #528]	@ (8008c78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ab6:	e087      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b6a      	ldr	r3, [pc, #424]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	e065      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	e043      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b48      	ldr	r3, [pc, #288]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e021      	b.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b37      	ldr	r3, [pc, #220]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bcc:	0a5b      	lsrs	r3, r3, #9
 8008bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bee:	ee17 2a90 	vmov	r2, s15
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1c:	ee17 2a90 	vmov	r2, s15
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c24:	4b13      	ldr	r3, [pc, #76]	@ (8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c28:	0e1b      	lsrs	r3, r3, #24
 8008c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4a:	ee17 2a90 	vmov	r2, s15
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c52:	e008      	b.n	8008c66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	609a      	str	r2, [r3, #8]
}
 8008c66:	bf00      	nop
 8008c68:	3724      	adds	r7, #36	@ 0x24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
 8008c78:	03d09000 	.word	0x03d09000
 8008c7c:	46000000 	.word	0x46000000
 8008c80:	4c742400 	.word	0x4c742400
 8008c84:	4a742400 	.word	0x4a742400
 8008c88:	4bb71b00 	.word	0x4bb71b00

08008c8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b089      	sub	sp, #36	@ 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c94:	4ba0      	ldr	r3, [pc, #640]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	091b      	lsrs	r3, r3, #4
 8008ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ca8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008caa:	4b9b      	ldr	r3, [pc, #620]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cb4:	4b98      	ldr	r3, [pc, #608]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb8:	08db      	lsrs	r3, r3, #3
 8008cba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	fb02 f303 	mul.w	r3, r2, r3
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ccc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8111 	beq.w	8008efa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	f000 8083 	beq.w	8008de6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	f200 80a1 	bhi.w	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d056      	beq.n	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008cf4:	e099      	b.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf6:	4b88      	ldr	r3, [pc, #544]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d02d      	beq.n	8008d5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d02:	4b85      	ldr	r3, [pc, #532]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	4a83      	ldr	r2, [pc, #524]	@ (8008f1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d40:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d5c:	e087      	b.n	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	ee07 3a90 	vmov	s15, r3
 8008d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d68:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d70:	4b69      	ldr	r3, [pc, #420]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d84:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da0:	e065      	b.n	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db4:	4b58      	ldr	r3, [pc, #352]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de4:	e043      	b.n	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df8:	4b47      	ldr	r3, [pc, #284]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e28:	e021      	b.n	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e34:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3c:	4b36      	ldr	r3, [pc, #216]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e72:	0a5b      	lsrs	r3, r3, #9
 8008e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e78:	ee07 3a90 	vmov	s15, r3
 8008e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e94:	ee17 2a90 	vmov	r2, s15
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea0:	0c1b      	lsrs	r3, r3, #16
 8008ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec2:	ee17 2a90 	vmov	r2, s15
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008eca:	4b13      	ldr	r3, [pc, #76]	@ (8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ece:	0e1b      	lsrs	r3, r3, #24
 8008ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef0:	ee17 2a90 	vmov	r2, s15
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008ef8:	e008      	b.n	8008f0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	3724      	adds	r7, #36	@ 0x24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	58024400 	.word	0x58024400
 8008f1c:	03d09000 	.word	0x03d09000
 8008f20:	46000000 	.word	0x46000000
 8008f24:	4c742400 	.word	0x4c742400
 8008f28:	4a742400 	.word	0x4a742400
 8008f2c:	4bb71b00 	.word	0x4bb71b00

08008f30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f3e:	4b53      	ldr	r3, [pc, #332]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d101      	bne.n	8008f4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e099      	b.n	8009082 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a4e      	ldr	r2, [pc, #312]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f5a:	f7f8 ffa7 	bl	8001eac <HAL_GetTick>
 8008f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f60:	e008      	b.n	8008f74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f62:	f7f8 ffa3 	bl	8001eac <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d901      	bls.n	8008f74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e086      	b.n	8009082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f74:	4b45      	ldr	r3, [pc, #276]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1f0      	bne.n	8008f62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f80:	4b42      	ldr	r3, [pc, #264]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	031b      	lsls	r3, r3, #12
 8008f8e:	493f      	ldr	r1, [pc, #252]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	025b      	lsls	r3, r3, #9
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	061b      	lsls	r3, r3, #24
 8008fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fc4:	4931      	ldr	r1, [pc, #196]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008fca:	4b30      	ldr	r3, [pc, #192]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	492d      	ldr	r1, [pc, #180]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe0:	f023 0220 	bic.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	4928      	ldr	r1, [pc, #160]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fee:	4b27      	ldr	r3, [pc, #156]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	4a26      	ldr	r2, [pc, #152]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	f023 0310 	bic.w	r3, r3, #16
 8008ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ffa:	4b24      	ldr	r3, [pc, #144]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ffe:	4b24      	ldr	r3, [pc, #144]	@ (8009090 <RCCEx_PLL2_Config+0x160>)
 8009000:	4013      	ands	r3, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	69d2      	ldr	r2, [r2, #28]
 8009006:	00d2      	lsls	r2, r2, #3
 8009008:	4920      	ldr	r1, [pc, #128]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 800900a:	4313      	orrs	r3, r2
 800900c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800900e:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009012:	4a1e      	ldr	r2, [pc, #120]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009014:	f043 0310 	orr.w	r3, r3, #16
 8009018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009020:	4b1a      	ldr	r3, [pc, #104]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	4a19      	ldr	r2, [pc, #100]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800902a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800902c:	e00f      	b.n	800904e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009034:	4b15      	ldr	r3, [pc, #84]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	4a14      	ldr	r2, [pc, #80]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 800903a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800903e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009040:	e005      	b.n	800904e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009042:	4b12      	ldr	r3, [pc, #72]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009046:	4a11      	ldr	r2, [pc, #68]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800904c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800904e:	4b0f      	ldr	r3, [pc, #60]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a0e      	ldr	r2, [pc, #56]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800905a:	f7f8 ff27 	bl	8001eac <HAL_GetTick>
 800905e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009060:	e008      	b.n	8009074 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009062:	f7f8 ff23 	bl	8001eac <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b02      	cmp	r3, #2
 800906e:	d901      	bls.n	8009074 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e006      	b.n	8009082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009074:	4b05      	ldr	r3, [pc, #20]	@ (800908c <RCCEx_PLL2_Config+0x15c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0f0      	beq.n	8009062 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	58024400 	.word	0x58024400
 8009090:	ffff0007 	.word	0xffff0007

08009094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090a2:	4b53      	ldr	r3, [pc, #332]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d101      	bne.n	80090b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e099      	b.n	80091e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090b2:	4b4f      	ldr	r3, [pc, #316]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a4e      	ldr	r2, [pc, #312]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090be:	f7f8 fef5 	bl	8001eac <HAL_GetTick>
 80090c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090c4:	e008      	b.n	80090d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090c6:	f7f8 fef1 	bl	8001eac <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d901      	bls.n	80090d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e086      	b.n	80091e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090d8:	4b45      	ldr	r3, [pc, #276]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f0      	bne.n	80090c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090e4:	4b42      	ldr	r3, [pc, #264]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	051b      	lsls	r3, r3, #20
 80090f2:	493f      	ldr	r1, [pc, #252]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	3b01      	subs	r3, #1
 8009108:	025b      	lsls	r3, r3, #9
 800910a:	b29b      	uxth	r3, r3
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	3b01      	subs	r3, #1
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	3b01      	subs	r3, #1
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009128:	4931      	ldr	r1, [pc, #196]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800912e:	4b30      	ldr	r3, [pc, #192]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	492d      	ldr	r1, [pc, #180]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800913c:	4313      	orrs	r3, r2
 800913e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009140:	4b2b      	ldr	r3, [pc, #172]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	4928      	ldr	r1, [pc, #160]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009152:	4b27      	ldr	r3, [pc, #156]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009156:	4a26      	ldr	r2, [pc, #152]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800915e:	4b24      	ldr	r3, [pc, #144]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009162:	4b24      	ldr	r3, [pc, #144]	@ (80091f4 <RCCEx_PLL3_Config+0x160>)
 8009164:	4013      	ands	r3, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	69d2      	ldr	r2, [r2, #28]
 800916a:	00d2      	lsls	r2, r2, #3
 800916c:	4920      	ldr	r1, [pc, #128]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800916e:	4313      	orrs	r3, r2
 8009170:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009172:	4b1f      	ldr	r3, [pc, #124]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	4a1e      	ldr	r2, [pc, #120]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800917c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009184:	4b1a      	ldr	r3, [pc, #104]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	4a19      	ldr	r2, [pc, #100]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800918a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800918e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009190:	e00f      	b.n	80091b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d106      	bne.n	80091a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009198:	4b15      	ldr	r3, [pc, #84]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800919a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919c:	4a14      	ldr	r2, [pc, #80]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 800919e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091a4:	e005      	b.n	80091b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091a6:	4b12      	ldr	r3, [pc, #72]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	4a11      	ldr	r2, [pc, #68]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80091ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091b2:	4b0f      	ldr	r3, [pc, #60]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a0e      	ldr	r2, [pc, #56]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80091b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091be:	f7f8 fe75 	bl	8001eac <HAL_GetTick>
 80091c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091c4:	e008      	b.n	80091d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091c6:	f7f8 fe71 	bl	8001eac <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d901      	bls.n	80091d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e006      	b.n	80091e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <RCCEx_PLL3_Config+0x15c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0f0      	beq.n	80091c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
 80091f4:	ffff0007 	.word	0xffff0007

080091f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e10f      	b.n	800942a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a87      	ldr	r2, [pc, #540]	@ (8009434 <HAL_SPI_Init+0x23c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <HAL_SPI_Init+0x42>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a86      	ldr	r2, [pc, #536]	@ (8009438 <HAL_SPI_Init+0x240>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00a      	beq.n	800923a <HAL_SPI_Init+0x42>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a84      	ldr	r2, [pc, #528]	@ (800943c <HAL_SPI_Init+0x244>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d005      	beq.n	800923a <HAL_SPI_Init+0x42>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	2b0f      	cmp	r3, #15
 8009234:	d901      	bls.n	800923a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e0f7      	b.n	800942a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f900 	bl	8009440 <SPI_GetPacketSize>
 8009240:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7b      	ldr	r2, [pc, #492]	@ (8009434 <HAL_SPI_Init+0x23c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00c      	beq.n	8009266 <HAL_SPI_Init+0x6e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a79      	ldr	r2, [pc, #484]	@ (8009438 <HAL_SPI_Init+0x240>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d007      	beq.n	8009266 <HAL_SPI_Init+0x6e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a78      	ldr	r2, [pc, #480]	@ (800943c <HAL_SPI_Init+0x244>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Init+0x6e>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b08      	cmp	r3, #8
 8009264:	d811      	bhi.n	800928a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800926a:	4a72      	ldr	r2, [pc, #456]	@ (8009434 <HAL_SPI_Init+0x23c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d009      	beq.n	8009284 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a70      	ldr	r2, [pc, #448]	@ (8009438 <HAL_SPI_Init+0x240>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <HAL_SPI_Init+0x8c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a6f      	ldr	r2, [pc, #444]	@ (800943c <HAL_SPI_Init+0x244>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d104      	bne.n	800928e <HAL_SPI_Init+0x96>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b10      	cmp	r3, #16
 8009288:	d901      	bls.n	800928e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e0cd      	b.n	800942a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7f8 f9fe 	bl	80016a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80092ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092d4:	d119      	bne.n	800930a <HAL_SPI_Init+0x112>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092de:	d103      	bne.n	80092e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10c      	bne.n	800930a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f8:	d107      	bne.n	800930a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009308:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00f      	beq.n	8009336 <HAL_SPI_Init+0x13e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2b06      	cmp	r3, #6
 800931c:	d90b      	bls.n	8009336 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e007      	b.n	8009346 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009344:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69da      	ldr	r2, [r3, #28]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934e:	431a      	orrs	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009358:	ea42 0103 	orr.w	r1, r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	431a      	orrs	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093a6:	ea42 0103 	orr.w	r1, r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d113      	bne.n	80093e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40013000 	.word	0x40013000
 8009438:	40003800 	.word	0x40003800
 800943c:	40003c00 	.word	0x40003c00

08009440 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3307      	adds	r3, #7
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	fb02 f303 	mul.w	r3, r2, r3
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e049      	b.n	800951c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7f8 fa09 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f000 faa3 	bl	8009a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e049      	b.n	80095ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f841 	bl	80095d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f000 fa4c 	bl	8009a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009602:	2302      	movs	r3, #2
 8009604:	e0ff      	b.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b14      	cmp	r3, #20
 8009612:	f200 80f0 	bhi.w	80097f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009616:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009671 	.word	0x08009671
 8009620:	080097f7 	.word	0x080097f7
 8009624:	080097f7 	.word	0x080097f7
 8009628:	080097f7 	.word	0x080097f7
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080097f7 	.word	0x080097f7
 8009634:	080097f7 	.word	0x080097f7
 8009638:	080097f7 	.word	0x080097f7
 800963c:	080096f3 	.word	0x080096f3
 8009640:	080097f7 	.word	0x080097f7
 8009644:	080097f7 	.word	0x080097f7
 8009648:	080097f7 	.word	0x080097f7
 800964c:	08009733 	.word	0x08009733
 8009650:	080097f7 	.word	0x080097f7
 8009654:	080097f7 	.word	0x080097f7
 8009658:	080097f7 	.word	0x080097f7
 800965c:	08009775 	.word	0x08009775
 8009660:	080097f7 	.word	0x080097f7
 8009664:	080097f7 	.word	0x080097f7
 8009668:	080097f7 	.word	0x080097f7
 800966c:	080097b5 	.word	0x080097b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fa74 	bl	8009b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0208 	orr.w	r2, r2, #8
 800968a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0204 	bic.w	r2, r2, #4
 800969a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6999      	ldr	r1, [r3, #24]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	691a      	ldr	r2, [r3, #16]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	619a      	str	r2, [r3, #24]
      break;
 80096ae:	e0a5      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fae4 	bl	8009c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	699a      	ldr	r2, [r3, #24]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6999      	ldr	r1, [r3, #24]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	021a      	lsls	r2, r3, #8
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	619a      	str	r2, [r3, #24]
      break;
 80096f0:	e084      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fb4d 	bl	8009d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0208 	orr.w	r2, r2, #8
 800970c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69da      	ldr	r2, [r3, #28]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0204 	bic.w	r2, r2, #4
 800971c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69d9      	ldr	r1, [r3, #28]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	61da      	str	r2, [r3, #28]
      break;
 8009730:	e064      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fbb5 	bl	8009ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69da      	ldr	r2, [r3, #28]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800974c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69da      	ldr	r2, [r3, #28]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800975c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69d9      	ldr	r1, [r3, #28]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	021a      	lsls	r2, r3, #8
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	61da      	str	r2, [r3, #28]
      break;
 8009772:	e043      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fbfe 	bl	8009f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0208 	orr.w	r2, r2, #8
 800978e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0204 	bic.w	r2, r2, #4
 800979e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80097b2:	e023      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fc42 	bl	800a044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	021a      	lsls	r2, r3, #8
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80097f4:	e002      	b.n	80097fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
      break;
 80097fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop

08009810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_TIM_ConfigClockSource+0x1c>
 8009828:	2302      	movs	r3, #2
 800982a:	e0dc      	b.n	80099e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	4b6a      	ldr	r3, [pc, #424]	@ (80099f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009848:	4013      	ands	r3, r2
 800984a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a64      	ldr	r2, [pc, #400]	@ (80099f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	f000 80a9 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009868:	4a62      	ldr	r2, [pc, #392]	@ (80099f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	f200 80ae 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009870:	4a61      	ldr	r2, [pc, #388]	@ (80099f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009872:	4293      	cmp	r3, r2
 8009874:	f000 80a1 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009878:	4a5f      	ldr	r2, [pc, #380]	@ (80099f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	f200 80a6 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009880:	4a5e      	ldr	r2, [pc, #376]	@ (80099fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009882:	4293      	cmp	r3, r2
 8009884:	f000 8099 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009888:	4a5c      	ldr	r2, [pc, #368]	@ (80099fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800988a:	4293      	cmp	r3, r2
 800988c:	f200 809e 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009890:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009894:	f000 8091 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009898:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800989c:	f200 8096 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098a4:	f000 8089 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 80098a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098ac:	f200 808e 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b4:	d03e      	beq.n	8009934 <HAL_TIM_ConfigClockSource+0x124>
 80098b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ba:	f200 8087 	bhi.w	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c2:	f000 8086 	beq.w	80099d2 <HAL_TIM_ConfigClockSource+0x1c2>
 80098c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ca:	d87f      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098cc:	2b70      	cmp	r3, #112	@ 0x70
 80098ce:	d01a      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0xf6>
 80098d0:	2b70      	cmp	r3, #112	@ 0x70
 80098d2:	d87b      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098d4:	2b60      	cmp	r3, #96	@ 0x60
 80098d6:	d050      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x16a>
 80098d8:	2b60      	cmp	r3, #96	@ 0x60
 80098da:	d877      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098dc:	2b50      	cmp	r3, #80	@ 0x50
 80098de:	d03c      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x14a>
 80098e0:	2b50      	cmp	r3, #80	@ 0x50
 80098e2:	d873      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098e4:	2b40      	cmp	r3, #64	@ 0x40
 80098e6:	d058      	beq.n	800999a <HAL_TIM_ConfigClockSource+0x18a>
 80098e8:	2b40      	cmp	r3, #64	@ 0x40
 80098ea:	d86f      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098ec:	2b30      	cmp	r3, #48	@ 0x30
 80098ee:	d064      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 80098f0:	2b30      	cmp	r3, #48	@ 0x30
 80098f2:	d86b      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d060      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d867      	bhi.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d05c      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009900:	2b10      	cmp	r3, #16
 8009902:	d05a      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009904:	e062      	b.n	80099cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009916:	f000 fc79 	bl	800a20c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	609a      	str	r2, [r3, #8]
      break;
 8009932:	e04f      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009944:	f000 fc62 	bl	800a20c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009956:	609a      	str	r2, [r3, #8]
      break;
 8009958:	e03c      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009966:	461a      	mov	r2, r3
 8009968:	f000 fbd2 	bl	800a110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2150      	movs	r1, #80	@ 0x50
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fc2c 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009978:	e02c      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009986:	461a      	mov	r2, r3
 8009988:	f000 fbf1 	bl	800a16e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2160      	movs	r1, #96	@ 0x60
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fc1c 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009998:	e01c      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099a6:	461a      	mov	r2, r3
 80099a8:	f000 fbb2 	bl	800a110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2140      	movs	r1, #64	@ 0x40
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fc0c 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 80099b8:	e00c      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f000 fc03 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 80099ca:	e003      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
      break;
 80099d0:	e000      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80099d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	ffceff88 	.word	0xffceff88
 80099f4:	00100040 	.word	0x00100040
 80099f8:	00100030 	.word	0x00100030
 80099fc:	00100020 	.word	0x00100020

08009a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a4a      	ldr	r2, [pc, #296]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d013      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a1e:	d00f      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a47      	ldr	r2, [pc, #284]	@ (8009b40 <TIM_Base_SetConfig+0x140>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00b      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a46      	ldr	r2, [pc, #280]	@ (8009b44 <TIM_Base_SetConfig+0x144>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d007      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a45      	ldr	r2, [pc, #276]	@ (8009b48 <TIM_Base_SetConfig+0x148>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a44      	ldr	r2, [pc, #272]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d108      	bne.n	8009a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a39      	ldr	r2, [pc, #228]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d027      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a60:	d023      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a36      	ldr	r2, [pc, #216]	@ (8009b40 <TIM_Base_SetConfig+0x140>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01f      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a35      	ldr	r2, [pc, #212]	@ (8009b44 <TIM_Base_SetConfig+0x144>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a34      	ldr	r2, [pc, #208]	@ (8009b48 <TIM_Base_SetConfig+0x148>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a33      	ldr	r2, [pc, #204]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a32      	ldr	r2, [pc, #200]	@ (8009b50 <TIM_Base_SetConfig+0x150>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a31      	ldr	r2, [pc, #196]	@ (8009b54 <TIM_Base_SetConfig+0x154>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a30      	ldr	r2, [pc, #192]	@ (8009b58 <TIM_Base_SetConfig+0x158>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8009b5c <TIM_Base_SetConfig+0x15c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8009b60 <TIM_Base_SetConfig+0x160>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00f      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a18      	ldr	r2, [pc, #96]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a17      	ldr	r2, [pc, #92]	@ (8009b50 <TIM_Base_SetConfig+0x150>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d007      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a16      	ldr	r2, [pc, #88]	@ (8009b54 <TIM_Base_SetConfig+0x154>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d003      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a15      	ldr	r2, [pc, #84]	@ (8009b58 <TIM_Base_SetConfig+0x158>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d103      	bne.n	8009b10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d105      	bne.n	8009b2e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f023 0201 	bic.w	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	611a      	str	r2, [r3, #16]
  }
}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40000400 	.word	0x40000400
 8009b44:	40000800 	.word	0x40000800
 8009b48:	40000c00 	.word	0x40000c00
 8009b4c:	40010400 	.word	0x40010400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800
 8009b5c:	4000e000 	.word	0x4000e000
 8009b60:	4000e400 	.word	0x4000e400

08009b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	f023 0201 	bic.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4b37      	ldr	r3, [pc, #220]	@ (8009c6c <TIM_OC1_SetConfig+0x108>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f023 0302 	bic.w	r3, r3, #2
 8009bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a2d      	ldr	r2, [pc, #180]	@ (8009c70 <TIM_OC1_SetConfig+0x10c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00f      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c74 <TIM_OC1_SetConfig+0x110>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00b      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a2b      	ldr	r2, [pc, #172]	@ (8009c78 <TIM_OC1_SetConfig+0x114>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d007      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c7c <TIM_OC1_SetConfig+0x118>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d003      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a29      	ldr	r2, [pc, #164]	@ (8009c80 <TIM_OC1_SetConfig+0x11c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10c      	bne.n	8009bfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0308 	bic.w	r3, r3, #8
 8009be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f023 0304 	bic.w	r3, r3, #4
 8009bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c70 <TIM_OC1_SetConfig+0x10c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00f      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <TIM_OC1_SetConfig+0x110>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00b      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <TIM_OC1_SetConfig+0x114>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d007      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a19      	ldr	r2, [pc, #100]	@ (8009c7c <TIM_OC1_SetConfig+0x118>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d003      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a18      	ldr	r2, [pc, #96]	@ (8009c80 <TIM_OC1_SetConfig+0x11c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d111      	bne.n	8009c46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	fffeff8f 	.word	0xfffeff8f
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40010400 	.word	0x40010400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800

08009c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f023 0210 	bic.w	r2, r3, #16
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4b34      	ldr	r3, [pc, #208]	@ (8009d80 <TIM_OC2_SetConfig+0xfc>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0320 	bic.w	r3, r3, #32
 8009cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a29      	ldr	r2, [pc, #164]	@ (8009d84 <TIM_OC2_SetConfig+0x100>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d003      	beq.n	8009cec <TIM_OC2_SetConfig+0x68>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a28      	ldr	r2, [pc, #160]	@ (8009d88 <TIM_OC2_SetConfig+0x104>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d10d      	bne.n	8009d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d84 <TIM_OC2_SetConfig+0x100>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00f      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <TIM_OC2_SetConfig+0x104>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d00b      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009d8c <TIM_OC2_SetConfig+0x108>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d007      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	@ (8009d90 <TIM_OC2_SetConfig+0x10c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009d94 <TIM_OC2_SetConfig+0x110>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d113      	bne.n	8009d58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	621a      	str	r2, [r3, #32]
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	feff8fff 	.word	0xfeff8fff
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40010400 	.word	0x40010400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40014400 	.word	0x40014400
 8009d94:	40014800 	.word	0x40014800

08009d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4b33      	ldr	r3, [pc, #204]	@ (8009e90 <TIM_OC3_SetConfig+0xf8>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a28      	ldr	r2, [pc, #160]	@ (8009e94 <TIM_OC3_SetConfig+0xfc>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_OC3_SetConfig+0x66>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a27      	ldr	r2, [pc, #156]	@ (8009e98 <TIM_OC3_SetConfig+0x100>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d10d      	bne.n	8009e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e94 <TIM_OC3_SetConfig+0xfc>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d00f      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a1c      	ldr	r2, [pc, #112]	@ (8009e98 <TIM_OC3_SetConfig+0x100>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00b      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <TIM_OC3_SetConfig+0x104>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d007      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea0 <TIM_OC3_SetConfig+0x108>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d003      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ea4 <TIM_OC3_SetConfig+0x10c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d113      	bne.n	8009e6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	621a      	str	r2, [r3, #32]
}
 8009e84:	bf00      	nop
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	fffeff8f 	.word	0xfffeff8f
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400
 8009e9c:	40014000 	.word	0x40014000
 8009ea0:	40014400 	.word	0x40014400
 8009ea4:	40014800 	.word	0x40014800

08009ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4b24      	ldr	r3, [pc, #144]	@ (8009f64 <TIM_OC4_SetConfig+0xbc>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a19      	ldr	r2, [pc, #100]	@ (8009f68 <TIM_OC4_SetConfig+0xc0>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00f      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a18      	ldr	r2, [pc, #96]	@ (8009f6c <TIM_OC4_SetConfig+0xc4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00b      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a17      	ldr	r2, [pc, #92]	@ (8009f70 <TIM_OC4_SetConfig+0xc8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a16      	ldr	r2, [pc, #88]	@ (8009f74 <TIM_OC4_SetConfig+0xcc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a15      	ldr	r2, [pc, #84]	@ (8009f78 <TIM_OC4_SetConfig+0xd0>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d109      	bne.n	8009f3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	019b      	lsls	r3, r3, #6
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	feff8fff 	.word	0xfeff8fff
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400
 8009f70:	40014000 	.word	0x40014000
 8009f74:	40014400 	.word	0x40014400
 8009f78:	40014800 	.word	0x40014800

08009f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4b21      	ldr	r3, [pc, #132]	@ (800a02c <TIM_OC5_SetConfig+0xb0>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a18      	ldr	r2, [pc, #96]	@ (800a030 <TIM_OC5_SetConfig+0xb4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00f      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <TIM_OC5_SetConfig+0xb8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00b      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a16      	ldr	r2, [pc, #88]	@ (800a038 <TIM_OC5_SetConfig+0xbc>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d007      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a15      	ldr	r2, [pc, #84]	@ (800a03c <TIM_OC5_SetConfig+0xc0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a14      	ldr	r2, [pc, #80]	@ (800a040 <TIM_OC5_SetConfig+0xc4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d109      	bne.n	800a006 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	621a      	str	r2, [r3, #32]
}
 800a020:	bf00      	nop
 800a022:	371c      	adds	r7, #28
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	fffeff8f 	.word	0xfffeff8f
 800a030:	40010000 	.word	0x40010000
 800a034:	40010400 	.word	0x40010400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800

0800a044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4b22      	ldr	r3, [pc, #136]	@ (800a0f8 <TIM_OC6_SetConfig+0xb4>)
 800a070:	4013      	ands	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a19      	ldr	r2, [pc, #100]	@ (800a0fc <TIM_OC6_SetConfig+0xb8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d00f      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a18      	ldr	r2, [pc, #96]	@ (800a100 <TIM_OC6_SetConfig+0xbc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	@ (800a104 <TIM_OC6_SetConfig+0xc0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a16      	ldr	r2, [pc, #88]	@ (800a108 <TIM_OC6_SetConfig+0xc4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a15      	ldr	r2, [pc, #84]	@ (800a10c <TIM_OC6_SetConfig+0xc8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d109      	bne.n	800a0d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	feff8fff 	.word	0xfeff8fff
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40014400 	.word	0x40014400
 800a10c:	40014800 	.word	0x40014800

0800a110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	f023 0201 	bic.w	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f023 030a 	bic.w	r3, r3, #10
 800a14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a16e:	b480      	push	{r7}
 800a170:	b087      	sub	sp, #28
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	f023 0210 	bic.w	r2, r3, #16
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	031b      	lsls	r3, r3, #12
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4b09      	ldr	r3, [pc, #36]	@ (800a208 <TIM_ITRx_SetConfig+0x38>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f043 0307 	orr.w	r3, r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	609a      	str	r2, [r3, #8]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	ffcfff8f 	.word	0xffcfff8f

0800a20c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	021a      	lsls	r2, r3, #8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	431a      	orrs	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4313      	orrs	r3, r2
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	609a      	str	r2, [r3, #8]
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a260:	2302      	movs	r3, #2
 800a262:	e077      	b.n	800a354 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a35      	ldr	r2, [pc, #212]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d004      	beq.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a34      	ldr	r2, [pc, #208]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d108      	bne.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a29e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a25      	ldr	r2, [pc, #148]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d02c      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d6:	d027      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a22      	ldr	r2, [pc, #136]	@ (800a368 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d022      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a21      	ldr	r2, [pc, #132]	@ (800a36c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d01d      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d018      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d013      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1b      	ldr	r2, [pc, #108]	@ (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00e      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a1a      	ldr	r2, [pc, #104]	@ (800a378 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d009      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a18      	ldr	r2, [pc, #96]	@ (800a37c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d004      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a17      	ldr	r2, [pc, #92]	@ (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d10c      	bne.n	800a342 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a32e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	4313      	orrs	r3, r2
 800a338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40010000 	.word	0x40010000
 800a364:	40010400 	.word	0x40010400
 800a368:	40000400 	.word	0x40000400
 800a36c:	40000800 	.word	0x40000800
 800a370:	40000c00 	.word	0x40000c00
 800a374:	40001800 	.word	0x40001800
 800a378:	40014000 	.word	0x40014000
 800a37c:	4000e000 	.word	0x4000e000
 800a380:	4000e400 	.word	0x4000e400

0800a384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e042      	b.n	800a41c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d106      	bne.n	800a3ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7f7 fb4f 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2224      	movs	r2, #36	@ 0x24
 800a3b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fe94 	bl	800b0fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f825 	bl	800a424 <UART_SetConfig>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e01b      	b.n	800a41c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0201 	orr.w	r2, r2, #1
 800a412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 ff13 	bl	800b240 <UART_CheckIdleState>
 800a41a:	4603      	mov	r3, r0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a428:	b092      	sub	sp, #72	@ 0x48
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	431a      	orrs	r2, r3
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	4313      	orrs	r3, r2
 800a44a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	4bbe      	ldr	r3, [pc, #760]	@ (800a74c <UART_SetConfig+0x328>)
 800a454:	4013      	ands	r3, r2
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	6812      	ldr	r2, [r2, #0]
 800a45a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a45c:	430b      	orrs	r3, r1
 800a45e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4ab3      	ldr	r2, [pc, #716]	@ (800a750 <UART_SetConfig+0x32c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d004      	beq.n	800a490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a48c:	4313      	orrs	r3, r2
 800a48e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	4baf      	ldr	r3, [pc, #700]	@ (800a754 <UART_SetConfig+0x330>)
 800a498:	4013      	ands	r3, r2
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	f023 010f 	bic.w	r1, r3, #15
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4aa6      	ldr	r2, [pc, #664]	@ (800a758 <UART_SetConfig+0x334>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d177      	bne.n	800a5b4 <UART_SetConfig+0x190>
 800a4c4:	4ba5      	ldr	r3, [pc, #660]	@ (800a75c <UART_SetConfig+0x338>)
 800a4c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4cc:	2b28      	cmp	r3, #40	@ 0x28
 800a4ce:	d86d      	bhi.n	800a5ac <UART_SetConfig+0x188>
 800a4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <UART_SetConfig+0xb4>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a57d 	.word	0x0800a57d
 800a4dc:	0800a5ad 	.word	0x0800a5ad
 800a4e0:	0800a5ad 	.word	0x0800a5ad
 800a4e4:	0800a5ad 	.word	0x0800a5ad
 800a4e8:	0800a5ad 	.word	0x0800a5ad
 800a4ec:	0800a5ad 	.word	0x0800a5ad
 800a4f0:	0800a5ad 	.word	0x0800a5ad
 800a4f4:	0800a5ad 	.word	0x0800a5ad
 800a4f8:	0800a585 	.word	0x0800a585
 800a4fc:	0800a5ad 	.word	0x0800a5ad
 800a500:	0800a5ad 	.word	0x0800a5ad
 800a504:	0800a5ad 	.word	0x0800a5ad
 800a508:	0800a5ad 	.word	0x0800a5ad
 800a50c:	0800a5ad 	.word	0x0800a5ad
 800a510:	0800a5ad 	.word	0x0800a5ad
 800a514:	0800a5ad 	.word	0x0800a5ad
 800a518:	0800a58d 	.word	0x0800a58d
 800a51c:	0800a5ad 	.word	0x0800a5ad
 800a520:	0800a5ad 	.word	0x0800a5ad
 800a524:	0800a5ad 	.word	0x0800a5ad
 800a528:	0800a5ad 	.word	0x0800a5ad
 800a52c:	0800a5ad 	.word	0x0800a5ad
 800a530:	0800a5ad 	.word	0x0800a5ad
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a595 	.word	0x0800a595
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a5ad 	.word	0x0800a5ad
 800a544:	0800a5ad 	.word	0x0800a5ad
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a5ad 	.word	0x0800a5ad
 800a550:	0800a5ad 	.word	0x0800a5ad
 800a554:	0800a5ad 	.word	0x0800a5ad
 800a558:	0800a59d 	.word	0x0800a59d
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	0800a5ad 	.word	0x0800a5ad
 800a564:	0800a5ad 	.word	0x0800a5ad
 800a568:	0800a5ad 	.word	0x0800a5ad
 800a56c:	0800a5ad 	.word	0x0800a5ad
 800a570:	0800a5ad 	.word	0x0800a5ad
 800a574:	0800a5ad 	.word	0x0800a5ad
 800a578:	0800a5a5 	.word	0x0800a5a5
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e326      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a584:	2304      	movs	r3, #4
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e322      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a58c:	2308      	movs	r3, #8
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e31e      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a594:	2310      	movs	r3, #16
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e31a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a59c:	2320      	movs	r3, #32
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e316      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a5a4:	2340      	movs	r3, #64	@ 0x40
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e312      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a5ac:	2380      	movs	r3, #128	@ 0x80
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e30e      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a69      	ldr	r2, [pc, #420]	@ (800a760 <UART_SetConfig+0x33c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d130      	bne.n	800a620 <UART_SetConfig+0x1fc>
 800a5be:	4b67      	ldr	r3, [pc, #412]	@ (800a75c <UART_SetConfig+0x338>)
 800a5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b05      	cmp	r3, #5
 800a5c8:	d826      	bhi.n	800a618 <UART_SetConfig+0x1f4>
 800a5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d0 <UART_SetConfig+0x1ac>)
 800a5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d0:	0800a5e9 	.word	0x0800a5e9
 800a5d4:	0800a5f1 	.word	0x0800a5f1
 800a5d8:	0800a5f9 	.word	0x0800a5f9
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a611 	.word	0x0800a611
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e2f0      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e2ec      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a5f8:	2308      	movs	r3, #8
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e2e8      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a600:	2310      	movs	r3, #16
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e2e4      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a608:	2320      	movs	r3, #32
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60e:	e2e0      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a610:	2340      	movs	r3, #64	@ 0x40
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a616:	e2dc      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a618:	2380      	movs	r3, #128	@ 0x80
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e2d8      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a4f      	ldr	r2, [pc, #316]	@ (800a764 <UART_SetConfig+0x340>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d130      	bne.n	800a68c <UART_SetConfig+0x268>
 800a62a:	4b4c      	ldr	r3, [pc, #304]	@ (800a75c <UART_SetConfig+0x338>)
 800a62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	2b05      	cmp	r3, #5
 800a634:	d826      	bhi.n	800a684 <UART_SetConfig+0x260>
 800a636:	a201      	add	r2, pc, #4	@ (adr r2, 800a63c <UART_SetConfig+0x218>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a655 	.word	0x0800a655
 800a640:	0800a65d 	.word	0x0800a65d
 800a644:	0800a665 	.word	0x0800a665
 800a648:	0800a66d 	.word	0x0800a66d
 800a64c:	0800a675 	.word	0x0800a675
 800a650:	0800a67d 	.word	0x0800a67d
 800a654:	2300      	movs	r3, #0
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e2ba      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a65c:	2304      	movs	r3, #4
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e2b6      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a664:	2308      	movs	r3, #8
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e2b2      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a66c:	2310      	movs	r3, #16
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e2ae      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a674:	2320      	movs	r3, #32
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e2aa      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a67c:	2340      	movs	r3, #64	@ 0x40
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e2a6      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a684:	2380      	movs	r3, #128	@ 0x80
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e2a2      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a35      	ldr	r2, [pc, #212]	@ (800a768 <UART_SetConfig+0x344>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d130      	bne.n	800a6f8 <UART_SetConfig+0x2d4>
 800a696:	4b31      	ldr	r3, [pc, #196]	@ (800a75c <UART_SetConfig+0x338>)
 800a698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	2b05      	cmp	r3, #5
 800a6a0:	d826      	bhi.n	800a6f0 <UART_SetConfig+0x2cc>
 800a6a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a8 <UART_SetConfig+0x284>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6c9 	.word	0x0800a6c9
 800a6b0:	0800a6d1 	.word	0x0800a6d1
 800a6b4:	0800a6d9 	.word	0x0800a6d9
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e9 	.word	0x0800a6e9
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e284      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e280      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e27c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e278      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6e0:	2320      	movs	r3, #32
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e274      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6e8:	2340      	movs	r3, #64	@ 0x40
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e270      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6f0:	2380      	movs	r3, #128	@ 0x80
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e26c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a76c <UART_SetConfig+0x348>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d142      	bne.n	800a788 <UART_SetConfig+0x364>
 800a702:	4b16      	ldr	r3, [pc, #88]	@ (800a75c <UART_SetConfig+0x338>)
 800a704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	d838      	bhi.n	800a780 <UART_SetConfig+0x35c>
 800a70e:	a201      	add	r2, pc, #4	@ (adr r2, 800a714 <UART_SetConfig+0x2f0>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a72d 	.word	0x0800a72d
 800a718:	0800a735 	.word	0x0800a735
 800a71c:	0800a73d 	.word	0x0800a73d
 800a720:	0800a745 	.word	0x0800a745
 800a724:	0800a771 	.word	0x0800a771
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e24e      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a734:	2304      	movs	r3, #4
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e24a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a73c:	2308      	movs	r3, #8
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e246      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a744:	2310      	movs	r3, #16
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e242      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a74c:	cfff69f3 	.word	0xcfff69f3
 800a750:	58000c00 	.word	0x58000c00
 800a754:	11fff4ff 	.word	0x11fff4ff
 800a758:	40011000 	.word	0x40011000
 800a75c:	58024400 	.word	0x58024400
 800a760:	40004400 	.word	0x40004400
 800a764:	40004800 	.word	0x40004800
 800a768:	40004c00 	.word	0x40004c00
 800a76c:	40005000 	.word	0x40005000
 800a770:	2320      	movs	r3, #32
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e22c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a778:	2340      	movs	r3, #64	@ 0x40
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e228      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a780:	2380      	movs	r3, #128	@ 0x80
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e224      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4ab1      	ldr	r2, [pc, #708]	@ (800aa54 <UART_SetConfig+0x630>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d176      	bne.n	800a880 <UART_SetConfig+0x45c>
 800a792:	4bb1      	ldr	r3, [pc, #708]	@ (800aa58 <UART_SetConfig+0x634>)
 800a794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a79a:	2b28      	cmp	r3, #40	@ 0x28
 800a79c:	d86c      	bhi.n	800a878 <UART_SetConfig+0x454>
 800a79e:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <UART_SetConfig+0x380>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a849 	.word	0x0800a849
 800a7a8:	0800a879 	.word	0x0800a879
 800a7ac:	0800a879 	.word	0x0800a879
 800a7b0:	0800a879 	.word	0x0800a879
 800a7b4:	0800a879 	.word	0x0800a879
 800a7b8:	0800a879 	.word	0x0800a879
 800a7bc:	0800a879 	.word	0x0800a879
 800a7c0:	0800a879 	.word	0x0800a879
 800a7c4:	0800a851 	.word	0x0800a851
 800a7c8:	0800a879 	.word	0x0800a879
 800a7cc:	0800a879 	.word	0x0800a879
 800a7d0:	0800a879 	.word	0x0800a879
 800a7d4:	0800a879 	.word	0x0800a879
 800a7d8:	0800a879 	.word	0x0800a879
 800a7dc:	0800a879 	.word	0x0800a879
 800a7e0:	0800a879 	.word	0x0800a879
 800a7e4:	0800a859 	.word	0x0800a859
 800a7e8:	0800a879 	.word	0x0800a879
 800a7ec:	0800a879 	.word	0x0800a879
 800a7f0:	0800a879 	.word	0x0800a879
 800a7f4:	0800a879 	.word	0x0800a879
 800a7f8:	0800a879 	.word	0x0800a879
 800a7fc:	0800a879 	.word	0x0800a879
 800a800:	0800a879 	.word	0x0800a879
 800a804:	0800a861 	.word	0x0800a861
 800a808:	0800a879 	.word	0x0800a879
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a879 	.word	0x0800a879
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a879 	.word	0x0800a879
 800a81c:	0800a879 	.word	0x0800a879
 800a820:	0800a879 	.word	0x0800a879
 800a824:	0800a869 	.word	0x0800a869
 800a828:	0800a879 	.word	0x0800a879
 800a82c:	0800a879 	.word	0x0800a879
 800a830:	0800a879 	.word	0x0800a879
 800a834:	0800a879 	.word	0x0800a879
 800a838:	0800a879 	.word	0x0800a879
 800a83c:	0800a879 	.word	0x0800a879
 800a840:	0800a879 	.word	0x0800a879
 800a844:	0800a871 	.word	0x0800a871
 800a848:	2301      	movs	r3, #1
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e1c0      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a850:	2304      	movs	r3, #4
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e1bc      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a858:	2308      	movs	r3, #8
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e1b8      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a860:	2310      	movs	r3, #16
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e1b4      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a868:	2320      	movs	r3, #32
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e1b0      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a870:	2340      	movs	r3, #64	@ 0x40
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e1ac      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a878:	2380      	movs	r3, #128	@ 0x80
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e1a8      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a75      	ldr	r2, [pc, #468]	@ (800aa5c <UART_SetConfig+0x638>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d130      	bne.n	800a8ec <UART_SetConfig+0x4c8>
 800a88a:	4b73      	ldr	r3, [pc, #460]	@ (800aa58 <UART_SetConfig+0x634>)
 800a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	2b05      	cmp	r3, #5
 800a894:	d826      	bhi.n	800a8e4 <UART_SetConfig+0x4c0>
 800a896:	a201      	add	r2, pc, #4	@ (adr r2, 800a89c <UART_SetConfig+0x478>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8b5 	.word	0x0800a8b5
 800a8a0:	0800a8bd 	.word	0x0800a8bd
 800a8a4:	0800a8c5 	.word	0x0800a8c5
 800a8a8:	0800a8cd 	.word	0x0800a8cd
 800a8ac:	0800a8d5 	.word	0x0800a8d5
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e18a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8bc:	2304      	movs	r3, #4
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e186      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e182      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e17e      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e17a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8dc:	2340      	movs	r3, #64	@ 0x40
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e176      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8e4:	2380      	movs	r3, #128	@ 0x80
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e172      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a5b      	ldr	r2, [pc, #364]	@ (800aa60 <UART_SetConfig+0x63c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d130      	bne.n	800a958 <UART_SetConfig+0x534>
 800a8f6:	4b58      	ldr	r3, [pc, #352]	@ (800aa58 <UART_SetConfig+0x634>)
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	2b05      	cmp	r3, #5
 800a900:	d826      	bhi.n	800a950 <UART_SetConfig+0x52c>
 800a902:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <UART_SetConfig+0x4e4>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a921 	.word	0x0800a921
 800a90c:	0800a929 	.word	0x0800a929
 800a910:	0800a931 	.word	0x0800a931
 800a914:	0800a939 	.word	0x0800a939
 800a918:	0800a941 	.word	0x0800a941
 800a91c:	0800a949 	.word	0x0800a949
 800a920:	2300      	movs	r3, #0
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e154      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a928:	2304      	movs	r3, #4
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e150      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a930:	2308      	movs	r3, #8
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e14c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a938:	2310      	movs	r3, #16
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e148      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a940:	2320      	movs	r3, #32
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a946:	e144      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a948:	2340      	movs	r3, #64	@ 0x40
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94e:	e140      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a950:	2380      	movs	r3, #128	@ 0x80
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e13c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a41      	ldr	r2, [pc, #260]	@ (800aa64 <UART_SetConfig+0x640>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f040 8082 	bne.w	800aa68 <UART_SetConfig+0x644>
 800a964:	4b3c      	ldr	r3, [pc, #240]	@ (800aa58 <UART_SetConfig+0x634>)
 800a966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a96c:	2b28      	cmp	r3, #40	@ 0x28
 800a96e:	d86d      	bhi.n	800aa4c <UART_SetConfig+0x628>
 800a970:	a201      	add	r2, pc, #4	@ (adr r2, 800a978 <UART_SetConfig+0x554>)
 800a972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a976:	bf00      	nop
 800a978:	0800aa1d 	.word	0x0800aa1d
 800a97c:	0800aa4d 	.word	0x0800aa4d
 800a980:	0800aa4d 	.word	0x0800aa4d
 800a984:	0800aa4d 	.word	0x0800aa4d
 800a988:	0800aa4d 	.word	0x0800aa4d
 800a98c:	0800aa4d 	.word	0x0800aa4d
 800a990:	0800aa4d 	.word	0x0800aa4d
 800a994:	0800aa4d 	.word	0x0800aa4d
 800a998:	0800aa25 	.word	0x0800aa25
 800a99c:	0800aa4d 	.word	0x0800aa4d
 800a9a0:	0800aa4d 	.word	0x0800aa4d
 800a9a4:	0800aa4d 	.word	0x0800aa4d
 800a9a8:	0800aa4d 	.word	0x0800aa4d
 800a9ac:	0800aa4d 	.word	0x0800aa4d
 800a9b0:	0800aa4d 	.word	0x0800aa4d
 800a9b4:	0800aa4d 	.word	0x0800aa4d
 800a9b8:	0800aa2d 	.word	0x0800aa2d
 800a9bc:	0800aa4d 	.word	0x0800aa4d
 800a9c0:	0800aa4d 	.word	0x0800aa4d
 800a9c4:	0800aa4d 	.word	0x0800aa4d
 800a9c8:	0800aa4d 	.word	0x0800aa4d
 800a9cc:	0800aa4d 	.word	0x0800aa4d
 800a9d0:	0800aa4d 	.word	0x0800aa4d
 800a9d4:	0800aa4d 	.word	0x0800aa4d
 800a9d8:	0800aa35 	.word	0x0800aa35
 800a9dc:	0800aa4d 	.word	0x0800aa4d
 800a9e0:	0800aa4d 	.word	0x0800aa4d
 800a9e4:	0800aa4d 	.word	0x0800aa4d
 800a9e8:	0800aa4d 	.word	0x0800aa4d
 800a9ec:	0800aa4d 	.word	0x0800aa4d
 800a9f0:	0800aa4d 	.word	0x0800aa4d
 800a9f4:	0800aa4d 	.word	0x0800aa4d
 800a9f8:	0800aa3d 	.word	0x0800aa3d
 800a9fc:	0800aa4d 	.word	0x0800aa4d
 800aa00:	0800aa4d 	.word	0x0800aa4d
 800aa04:	0800aa4d 	.word	0x0800aa4d
 800aa08:	0800aa4d 	.word	0x0800aa4d
 800aa0c:	0800aa4d 	.word	0x0800aa4d
 800aa10:	0800aa4d 	.word	0x0800aa4d
 800aa14:	0800aa4d 	.word	0x0800aa4d
 800aa18:	0800aa45 	.word	0x0800aa45
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa22:	e0d6      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e0d2      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e0ce      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e0ca      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e0c6      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa44:	2340      	movs	r3, #64	@ 0x40
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e0c2      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa4c:	2380      	movs	r3, #128	@ 0x80
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e0be      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aa54:	40011400 	.word	0x40011400
 800aa58:	58024400 	.word	0x58024400
 800aa5c:	40007800 	.word	0x40007800
 800aa60:	40007c00 	.word	0x40007c00
 800aa64:	40011800 	.word	0x40011800
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4aad      	ldr	r2, [pc, #692]	@ (800ad24 <UART_SetConfig+0x900>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d176      	bne.n	800ab60 <UART_SetConfig+0x73c>
 800aa72:	4bad      	ldr	r3, [pc, #692]	@ (800ad28 <UART_SetConfig+0x904>)
 800aa74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa7a:	2b28      	cmp	r3, #40	@ 0x28
 800aa7c:	d86c      	bhi.n	800ab58 <UART_SetConfig+0x734>
 800aa7e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <UART_SetConfig+0x660>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800ab29 	.word	0x0800ab29
 800aa88:	0800ab59 	.word	0x0800ab59
 800aa8c:	0800ab59 	.word	0x0800ab59
 800aa90:	0800ab59 	.word	0x0800ab59
 800aa94:	0800ab59 	.word	0x0800ab59
 800aa98:	0800ab59 	.word	0x0800ab59
 800aa9c:	0800ab59 	.word	0x0800ab59
 800aaa0:	0800ab59 	.word	0x0800ab59
 800aaa4:	0800ab31 	.word	0x0800ab31
 800aaa8:	0800ab59 	.word	0x0800ab59
 800aaac:	0800ab59 	.word	0x0800ab59
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800ab59 	.word	0x0800ab59
 800aab8:	0800ab59 	.word	0x0800ab59
 800aabc:	0800ab59 	.word	0x0800ab59
 800aac0:	0800ab59 	.word	0x0800ab59
 800aac4:	0800ab39 	.word	0x0800ab39
 800aac8:	0800ab59 	.word	0x0800ab59
 800aacc:	0800ab59 	.word	0x0800ab59
 800aad0:	0800ab59 	.word	0x0800ab59
 800aad4:	0800ab59 	.word	0x0800ab59
 800aad8:	0800ab59 	.word	0x0800ab59
 800aadc:	0800ab59 	.word	0x0800ab59
 800aae0:	0800ab59 	.word	0x0800ab59
 800aae4:	0800ab41 	.word	0x0800ab41
 800aae8:	0800ab59 	.word	0x0800ab59
 800aaec:	0800ab59 	.word	0x0800ab59
 800aaf0:	0800ab59 	.word	0x0800ab59
 800aaf4:	0800ab59 	.word	0x0800ab59
 800aaf8:	0800ab59 	.word	0x0800ab59
 800aafc:	0800ab59 	.word	0x0800ab59
 800ab00:	0800ab59 	.word	0x0800ab59
 800ab04:	0800ab49 	.word	0x0800ab49
 800ab08:	0800ab59 	.word	0x0800ab59
 800ab0c:	0800ab59 	.word	0x0800ab59
 800ab10:	0800ab59 	.word	0x0800ab59
 800ab14:	0800ab59 	.word	0x0800ab59
 800ab18:	0800ab59 	.word	0x0800ab59
 800ab1c:	0800ab59 	.word	0x0800ab59
 800ab20:	0800ab59 	.word	0x0800ab59
 800ab24:	0800ab51 	.word	0x0800ab51
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e050      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e04c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e048      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e044      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab48:	2320      	movs	r3, #32
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e040      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab50:	2340      	movs	r3, #64	@ 0x40
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e03c      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab58:	2380      	movs	r3, #128	@ 0x80
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e038      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a71      	ldr	r2, [pc, #452]	@ (800ad2c <UART_SetConfig+0x908>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d130      	bne.n	800abcc <UART_SetConfig+0x7a8>
 800ab6a:	4b6f      	ldr	r3, [pc, #444]	@ (800ad28 <UART_SetConfig+0x904>)
 800ab6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	2b05      	cmp	r3, #5
 800ab74:	d826      	bhi.n	800abc4 <UART_SetConfig+0x7a0>
 800ab76:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0x758>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ab95 	.word	0x0800ab95
 800ab80:	0800ab9d 	.word	0x0800ab9d
 800ab84:	0800aba5 	.word	0x0800aba5
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abbd 	.word	0x0800abbd
 800ab94:	2302      	movs	r3, #2
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e01a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e016      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e012      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e00e      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800abb4:	2320      	movs	r3, #32
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e00a      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800abbc:	2340      	movs	r3, #64	@ 0x40
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e006      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800abc4:	2380      	movs	r3, #128	@ 0x80
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e002      	b.n	800abd2 <UART_SetConfig+0x7ae>
 800abcc:	2380      	movs	r3, #128	@ 0x80
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a55      	ldr	r2, [pc, #340]	@ (800ad2c <UART_SetConfig+0x908>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	f040 80f8 	bne.w	800adce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abe2:	2b20      	cmp	r3, #32
 800abe4:	dc46      	bgt.n	800ac74 <UART_SetConfig+0x850>
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	db75      	blt.n	800acd6 <UART_SetConfig+0x8b2>
 800abea:	3b02      	subs	r3, #2
 800abec:	2b1e      	cmp	r3, #30
 800abee:	d872      	bhi.n	800acd6 <UART_SetConfig+0x8b2>
 800abf0:	a201      	add	r2, pc, #4	@ (adr r2, 800abf8 <UART_SetConfig+0x7d4>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac7b 	.word	0x0800ac7b
 800abfc:	0800acd7 	.word	0x0800acd7
 800ac00:	0800ac83 	.word	0x0800ac83
 800ac04:	0800acd7 	.word	0x0800acd7
 800ac08:	0800acd7 	.word	0x0800acd7
 800ac0c:	0800acd7 	.word	0x0800acd7
 800ac10:	0800ac93 	.word	0x0800ac93
 800ac14:	0800acd7 	.word	0x0800acd7
 800ac18:	0800acd7 	.word	0x0800acd7
 800ac1c:	0800acd7 	.word	0x0800acd7
 800ac20:	0800acd7 	.word	0x0800acd7
 800ac24:	0800acd7 	.word	0x0800acd7
 800ac28:	0800acd7 	.word	0x0800acd7
 800ac2c:	0800acd7 	.word	0x0800acd7
 800ac30:	0800aca3 	.word	0x0800aca3
 800ac34:	0800acd7 	.word	0x0800acd7
 800ac38:	0800acd7 	.word	0x0800acd7
 800ac3c:	0800acd7 	.word	0x0800acd7
 800ac40:	0800acd7 	.word	0x0800acd7
 800ac44:	0800acd7 	.word	0x0800acd7
 800ac48:	0800acd7 	.word	0x0800acd7
 800ac4c:	0800acd7 	.word	0x0800acd7
 800ac50:	0800acd7 	.word	0x0800acd7
 800ac54:	0800acd7 	.word	0x0800acd7
 800ac58:	0800acd7 	.word	0x0800acd7
 800ac5c:	0800acd7 	.word	0x0800acd7
 800ac60:	0800acd7 	.word	0x0800acd7
 800ac64:	0800acd7 	.word	0x0800acd7
 800ac68:	0800acd7 	.word	0x0800acd7
 800ac6c:	0800acd7 	.word	0x0800acd7
 800ac70:	0800acc9 	.word	0x0800acc9
 800ac74:	2b40      	cmp	r3, #64	@ 0x40
 800ac76:	d02a      	beq.n	800acce <UART_SetConfig+0x8aa>
 800ac78:	e02d      	b.n	800acd6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac7a:	f7fd fd49 	bl	8008710 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac80:	e02f      	b.n	800ace2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fd fd58 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac90:	e027      	b.n	800ace2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac92:	f107 0318 	add.w	r3, r7, #24
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fd fea4 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca0:	e01f      	b.n	800ace2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca2:	4b21      	ldr	r3, [pc, #132]	@ (800ad28 <UART_SetConfig+0x904>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d009      	beq.n	800acc2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acae:	4b1e      	ldr	r3, [pc, #120]	@ (800ad28 <UART_SetConfig+0x904>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	08db      	lsrs	r3, r3, #3
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad30 <UART_SetConfig+0x90c>)
 800acba:	fa22 f303 	lsr.w	r3, r2, r3
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acc0:	e00f      	b.n	800ace2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800acc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad30 <UART_SetConfig+0x90c>)
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc6:	e00c      	b.n	800ace2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad34 <UART_SetConfig+0x910>)
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800accc:	e009      	b.n	800ace2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd4:	e005      	b.n	800ace2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ace0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ace2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 81ee 	beq.w	800b0c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acee:	4a12      	ldr	r2, [pc, #72]	@ (800ad38 <UART_SetConfig+0x914>)
 800acf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf4:	461a      	mov	r2, r3
 800acf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800acfc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d305      	bcc.n	800ad1a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d910      	bls.n	800ad3c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad20:	e1d1      	b.n	800b0c6 <UART_SetConfig+0xca2>
 800ad22:	bf00      	nop
 800ad24:	40011c00 	.word	0x40011c00
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	58000c00 	.word	0x58000c00
 800ad30:	03d09000 	.word	0x03d09000
 800ad34:	003d0900 	.word	0x003d0900
 800ad38:	0800b7cc 	.word	0x0800b7cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3e:	2200      	movs	r2, #0
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	60fa      	str	r2, [r7, #12]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad48:	4ac0      	ldr	r2, [pc, #768]	@ (800b04c <UART_SetConfig+0xc28>)
 800ad4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	2200      	movs	r2, #0
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad5e:	f7f5 fad5 	bl	800030c <__aeabi_uldivmod>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4610      	mov	r0, r2
 800ad68:	4619      	mov	r1, r3
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	020b      	lsls	r3, r1, #8
 800ad74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad78:	0202      	lsls	r2, r0, #8
 800ad7a:	6979      	ldr	r1, [r7, #20]
 800ad7c:	6849      	ldr	r1, [r1, #4]
 800ad7e:	0849      	lsrs	r1, r1, #1
 800ad80:	2000      	movs	r0, #0
 800ad82:	460c      	mov	r4, r1
 800ad84:	4605      	mov	r5, r0
 800ad86:	eb12 0804 	adds.w	r8, r2, r4
 800ad8a:	eb43 0905 	adc.w	r9, r3, r5
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	469a      	mov	sl, r3
 800ad96:	4693      	mov	fp, r2
 800ad98:	4652      	mov	r2, sl
 800ad9a:	465b      	mov	r3, fp
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4649      	mov	r1, r9
 800ada0:	f7f5 fab4 	bl	800030c <__aeabi_uldivmod>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4613      	mov	r3, r2
 800adaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adb2:	d308      	bcc.n	800adc6 <UART_SetConfig+0x9a2>
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adba:	d204      	bcs.n	800adc6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adc2:	60da      	str	r2, [r3, #12]
 800adc4:	e17f      	b.n	800b0c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800adcc:	e17b      	b.n	800b0c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800add6:	f040 80bd 	bne.w	800af54 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800adda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800adde:	2b20      	cmp	r3, #32
 800ade0:	dc48      	bgt.n	800ae74 <UART_SetConfig+0xa50>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	db7b      	blt.n	800aede <UART_SetConfig+0xaba>
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	d879      	bhi.n	800aede <UART_SetConfig+0xaba>
 800adea:	a201      	add	r2, pc, #4	@ (adr r2, 800adf0 <UART_SetConfig+0x9cc>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae7b 	.word	0x0800ae7b
 800adf4:	0800ae83 	.word	0x0800ae83
 800adf8:	0800aedf 	.word	0x0800aedf
 800adfc:	0800aedf 	.word	0x0800aedf
 800ae00:	0800ae8b 	.word	0x0800ae8b
 800ae04:	0800aedf 	.word	0x0800aedf
 800ae08:	0800aedf 	.word	0x0800aedf
 800ae0c:	0800aedf 	.word	0x0800aedf
 800ae10:	0800ae9b 	.word	0x0800ae9b
 800ae14:	0800aedf 	.word	0x0800aedf
 800ae18:	0800aedf 	.word	0x0800aedf
 800ae1c:	0800aedf 	.word	0x0800aedf
 800ae20:	0800aedf 	.word	0x0800aedf
 800ae24:	0800aedf 	.word	0x0800aedf
 800ae28:	0800aedf 	.word	0x0800aedf
 800ae2c:	0800aedf 	.word	0x0800aedf
 800ae30:	0800aeab 	.word	0x0800aeab
 800ae34:	0800aedf 	.word	0x0800aedf
 800ae38:	0800aedf 	.word	0x0800aedf
 800ae3c:	0800aedf 	.word	0x0800aedf
 800ae40:	0800aedf 	.word	0x0800aedf
 800ae44:	0800aedf 	.word	0x0800aedf
 800ae48:	0800aedf 	.word	0x0800aedf
 800ae4c:	0800aedf 	.word	0x0800aedf
 800ae50:	0800aedf 	.word	0x0800aedf
 800ae54:	0800aedf 	.word	0x0800aedf
 800ae58:	0800aedf 	.word	0x0800aedf
 800ae5c:	0800aedf 	.word	0x0800aedf
 800ae60:	0800aedf 	.word	0x0800aedf
 800ae64:	0800aedf 	.word	0x0800aedf
 800ae68:	0800aedf 	.word	0x0800aedf
 800ae6c:	0800aedf 	.word	0x0800aedf
 800ae70:	0800aed1 	.word	0x0800aed1
 800ae74:	2b40      	cmp	r3, #64	@ 0x40
 800ae76:	d02e      	beq.n	800aed6 <UART_SetConfig+0xab2>
 800ae78:	e031      	b.n	800aede <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae7a:	f7fb fdab 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 800ae7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae80:	e033      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae82:	f7fb fdbd 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 800ae86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae88:	e02f      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fd fc54 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae98:	e027      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9a:	f107 0318 	add.w	r3, r7, #24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd fda0 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea8:	e01f      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeaa:	4b69      	ldr	r3, [pc, #420]	@ (800b050 <UART_SetConfig+0xc2c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeb6:	4b66      	ldr	r3, [pc, #408]	@ (800b050 <UART_SetConfig+0xc2c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	4a64      	ldr	r2, [pc, #400]	@ (800b054 <UART_SetConfig+0xc30>)
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aec8:	e00f      	b.n	800aeea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aeca:	4b62      	ldr	r3, [pc, #392]	@ (800b054 <UART_SetConfig+0xc30>)
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aece:	e00c      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aed0:	4b61      	ldr	r3, [pc, #388]	@ (800b058 <UART_SetConfig+0xc34>)
 800aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed4:	e009      	b.n	800aeea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e005      	b.n	800aeea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aeea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 80ea 	beq.w	800b0c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef6:	4a55      	ldr	r2, [pc, #340]	@ (800b04c <UART_SetConfig+0xc28>)
 800aef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af00:	fbb3 f3f2 	udiv	r3, r3, r2
 800af04:	005a      	lsls	r2, r3, #1
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	085b      	lsrs	r3, r3, #1
 800af0c:	441a      	add	r2, r3
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	fbb2 f3f3 	udiv	r3, r2, r3
 800af16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	2b0f      	cmp	r3, #15
 800af1c:	d916      	bls.n	800af4c <UART_SetConfig+0xb28>
 800af1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af24:	d212      	bcs.n	800af4c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f023 030f 	bic.w	r3, r3, #15
 800af2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	085b      	lsrs	r3, r3, #1
 800af34:	b29b      	uxth	r3, r3
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af3e:	4313      	orrs	r3, r2
 800af40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af48:	60da      	str	r2, [r3, #12]
 800af4a:	e0bc      	b.n	800b0c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af52:	e0b8      	b.n	800b0c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af58:	2b20      	cmp	r3, #32
 800af5a:	dc4b      	bgt.n	800aff4 <UART_SetConfig+0xbd0>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f2c0 8087 	blt.w	800b070 <UART_SetConfig+0xc4c>
 800af62:	2b20      	cmp	r3, #32
 800af64:	f200 8084 	bhi.w	800b070 <UART_SetConfig+0xc4c>
 800af68:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <UART_SetConfig+0xb4c>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800affb 	.word	0x0800affb
 800af74:	0800b003 	.word	0x0800b003
 800af78:	0800b071 	.word	0x0800b071
 800af7c:	0800b071 	.word	0x0800b071
 800af80:	0800b00b 	.word	0x0800b00b
 800af84:	0800b071 	.word	0x0800b071
 800af88:	0800b071 	.word	0x0800b071
 800af8c:	0800b071 	.word	0x0800b071
 800af90:	0800b01b 	.word	0x0800b01b
 800af94:	0800b071 	.word	0x0800b071
 800af98:	0800b071 	.word	0x0800b071
 800af9c:	0800b071 	.word	0x0800b071
 800afa0:	0800b071 	.word	0x0800b071
 800afa4:	0800b071 	.word	0x0800b071
 800afa8:	0800b071 	.word	0x0800b071
 800afac:	0800b071 	.word	0x0800b071
 800afb0:	0800b02b 	.word	0x0800b02b
 800afb4:	0800b071 	.word	0x0800b071
 800afb8:	0800b071 	.word	0x0800b071
 800afbc:	0800b071 	.word	0x0800b071
 800afc0:	0800b071 	.word	0x0800b071
 800afc4:	0800b071 	.word	0x0800b071
 800afc8:	0800b071 	.word	0x0800b071
 800afcc:	0800b071 	.word	0x0800b071
 800afd0:	0800b071 	.word	0x0800b071
 800afd4:	0800b071 	.word	0x0800b071
 800afd8:	0800b071 	.word	0x0800b071
 800afdc:	0800b071 	.word	0x0800b071
 800afe0:	0800b071 	.word	0x0800b071
 800afe4:	0800b071 	.word	0x0800b071
 800afe8:	0800b071 	.word	0x0800b071
 800afec:	0800b071 	.word	0x0800b071
 800aff0:	0800b063 	.word	0x0800b063
 800aff4:	2b40      	cmp	r3, #64	@ 0x40
 800aff6:	d037      	beq.n	800b068 <UART_SetConfig+0xc44>
 800aff8:	e03a      	b.n	800b070 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800affa:	f7fb fceb 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 800affe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b000:	e03c      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b002:	f7fb fcfd 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 800b006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b008:	e038      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b00a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fb94 	bl	800873c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b018:	e030      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b01a:	f107 0318 	add.w	r3, r7, #24
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd fce0 	bl	80089e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b028:	e028      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b02a:	4b09      	ldr	r3, [pc, #36]	@ (800b050 <UART_SetConfig+0xc2c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0320 	and.w	r3, r3, #32
 800b032:	2b00      	cmp	r3, #0
 800b034:	d012      	beq.n	800b05c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b036:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <UART_SetConfig+0xc2c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	08db      	lsrs	r3, r3, #3
 800b03c:	f003 0303 	and.w	r3, r3, #3
 800b040:	4a04      	ldr	r2, [pc, #16]	@ (800b054 <UART_SetConfig+0xc30>)
 800b042:	fa22 f303 	lsr.w	r3, r2, r3
 800b046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b048:	e018      	b.n	800b07c <UART_SetConfig+0xc58>
 800b04a:	bf00      	nop
 800b04c:	0800b7cc 	.word	0x0800b7cc
 800b050:	58024400 	.word	0x58024400
 800b054:	03d09000 	.word	0x03d09000
 800b058:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b05c:	4b24      	ldr	r3, [pc, #144]	@ (800b0f0 <UART_SetConfig+0xccc>)
 800b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b060:	e00c      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b062:	4b24      	ldr	r3, [pc, #144]	@ (800b0f4 <UART_SetConfig+0xcd0>)
 800b064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b066:	e009      	b.n	800b07c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b06e:	e005      	b.n	800b07c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b07a:	bf00      	nop
    }

    if (pclk != 0U)
 800b07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d021      	beq.n	800b0c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f8 <UART_SetConfig+0xcd4>)
 800b088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b090:	fbb3 f2f2 	udiv	r2, r3, r2
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	085b      	lsrs	r3, r3, #1
 800b09a:	441a      	add	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a8:	2b0f      	cmp	r3, #15
 800b0aa:	d909      	bls.n	800b0c0 <UART_SetConfig+0xc9c>
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b2:	d205      	bcs.n	800b0c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60da      	str	r2, [r3, #12]
 800b0be:	e002      	b.n	800b0c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3748      	adds	r7, #72	@ 0x48
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0f0:	03d09000 	.word	0x03d09000
 800b0f4:	003d0900 	.word	0x003d0900
 800b0f8:	0800b7cc 	.word	0x0800b7cc

0800b0fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b108:	f003 0308 	and.w	r3, r3, #8
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00a      	beq.n	800b126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	430a      	orrs	r2, r1
 800b146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00a      	beq.n	800b16a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	430a      	orrs	r2, r1
 800b168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b190:	f003 0310 	and.w	r3, r3, #16
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00a      	beq.n	800b1ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b2:	f003 0320 	and.w	r3, r3, #32
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01a      	beq.n	800b212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1fa:	d10a      	bne.n	800b212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	430a      	orrs	r2, r1
 800b210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	430a      	orrs	r2, r1
 800b232:	605a      	str	r2, [r3, #4]
  }
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b098      	sub	sp, #96	@ 0x60
 800b244:	af02      	add	r7, sp, #8
 800b246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b250:	f7f6 fe2c 	bl	8001eac <HAL_GetTick>
 800b254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0308 	and.w	r3, r3, #8
 800b260:	2b08      	cmp	r3, #8
 800b262:	d12f      	bne.n	800b2c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b26c:	2200      	movs	r2, #0
 800b26e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f88e 	bl	800b394 <UART_WaitOnFlagUntilTimeout>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d022      	beq.n	800b2c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b292:	653b      	str	r3, [r7, #80]	@ 0x50
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	461a      	mov	r2, r3
 800b29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b29c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b29e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e6      	bne.n	800b27e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e063      	b.n	800b38c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d149      	bne.n	800b366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f857 	bl	800b394 <UART_WaitOnFlagUntilTimeout>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d03c      	beq.n	800b366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b30a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b30c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e6      	bne.n	800b2ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f023 0301 	bic.w	r3, r3, #1
 800b334:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3308      	adds	r3, #8
 800b33c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b33e:	61fa      	str	r2, [r7, #28]
 800b340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	69b9      	ldr	r1, [r7, #24]
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	617b      	str	r3, [r7, #20]
   return(result);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e5      	bne.n	800b31e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2220      	movs	r2, #32
 800b356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e012      	b.n	800b38c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2220      	movs	r2, #32
 800b36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3758      	adds	r7, #88	@ 0x58
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a4:	e04f      	b.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ac:	d04b      	beq.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ae:	f7f6 fd7d 	bl	8001eac <HAL_GetTick>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d302      	bcc.n	800b3c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e04e      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0304 	and.w	r3, r3, #4
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d037      	beq.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b80      	cmp	r3, #128	@ 0x80
 800b3da:	d034      	beq.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b40      	cmp	r3, #64	@ 0x40
 800b3e0:	d031      	beq.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d110      	bne.n	800b412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2208      	movs	r2, #8
 800b3f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f839 	bl	800b470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2208      	movs	r2, #8
 800b402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e029      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b41c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b420:	d111      	bne.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b42a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f000 f81f 	bl	800b470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e00f      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	69da      	ldr	r2, [r3, #28]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	4013      	ands	r3, r2
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	429a      	cmp	r2, r3
 800b454:	bf0c      	ite	eq
 800b456:	2301      	moveq	r3, #1
 800b458:	2300      	movne	r3, #0
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	429a      	cmp	r2, r3
 800b462:	d0a0      	beq.n	800b3a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b095      	sub	sp, #84	@ 0x54
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b48c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b496:	643b      	str	r3, [r7, #64]	@ 0x40
 800b498:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b49c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e6      	bne.n	800b478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b538 <UART_EndRxTransfer+0xc8>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e5      	bne.n	800b4aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d118      	bne.n	800b518 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f023 0310 	bic.w	r3, r3, #16
 800b4fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6979      	ldr	r1, [r7, #20]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	613b      	str	r3, [r7, #16]
   return(result);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e6      	bne.n	800b4e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b52c:	bf00      	nop
 800b52e:	3754      	adds	r7, #84	@ 0x54
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	effffffe 	.word	0xeffffffe

0800b53c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d101      	bne.n	800b552 <HAL_UARTEx_DisableFifoMode+0x16>
 800b54e:	2302      	movs	r3, #2
 800b550:	e027      	b.n	800b5a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2224      	movs	r2, #36	@ 0x24
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f022 0201 	bic.w	r2, r2, #1
 800b578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d101      	bne.n	800b5c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	e02d      	b.n	800b622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2224      	movs	r2, #36	@ 0x24
 800b5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f022 0201 	bic.w	r2, r2, #1
 800b5ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f850 	bl	800b6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d101      	bne.n	800b642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b63e:	2302      	movs	r3, #2
 800b640:	e02d      	b.n	800b69e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2224      	movs	r2, #36	@ 0x24
 800b64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0201 	bic.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f812 	bl	800b6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2220      	movs	r2, #32
 800b690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d108      	bne.n	800b6ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6c8:	e031      	b.n	800b72e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6ce:	2310      	movs	r3, #16
 800b6d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	0e5b      	lsrs	r3, r3, #25
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f003 0307 	and.w	r3, r3, #7
 800b6e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	0f5b      	lsrs	r3, r3, #29
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f003 0307 	and.w	r3, r3, #7
 800b6f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	7b3a      	ldrb	r2, [r7, #12]
 800b6f6:	4911      	ldr	r1, [pc, #68]	@ (800b73c <UARTEx_SetNbDataToProcess+0x94>)
 800b6f8:	5c8a      	ldrb	r2, [r1, r2]
 800b6fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6fe:	7b3a      	ldrb	r2, [r7, #12]
 800b700:	490f      	ldr	r1, [pc, #60]	@ (800b740 <UARTEx_SetNbDataToProcess+0x98>)
 800b702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b704:	fb93 f3f2 	sdiv	r3, r3, r2
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	7b7a      	ldrb	r2, [r7, #13]
 800b714:	4909      	ldr	r1, [pc, #36]	@ (800b73c <UARTEx_SetNbDataToProcess+0x94>)
 800b716:	5c8a      	ldrb	r2, [r1, r2]
 800b718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b71c:	7b7a      	ldrb	r2, [r7, #13]
 800b71e:	4908      	ldr	r1, [pc, #32]	@ (800b740 <UARTEx_SetNbDataToProcess+0x98>)
 800b720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b722:	fb93 f3f2 	sdiv	r3, r3, r2
 800b726:	b29a      	uxth	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b72e:	bf00      	nop
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	0800b7e4 	.word	0x0800b7e4
 800b740:	0800b7ec 	.word	0x0800b7ec

0800b744 <memset>:
 800b744:	4402      	add	r2, r0
 800b746:	4603      	mov	r3, r0
 800b748:	4293      	cmp	r3, r2
 800b74a:	d100      	bne.n	800b74e <memset+0xa>
 800b74c:	4770      	bx	lr
 800b74e:	f803 1b01 	strb.w	r1, [r3], #1
 800b752:	e7f9      	b.n	800b748 <memset+0x4>

0800b754 <__libc_init_array>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	4d0d      	ldr	r5, [pc, #52]	@ (800b78c <__libc_init_array+0x38>)
 800b758:	4c0d      	ldr	r4, [pc, #52]	@ (800b790 <__libc_init_array+0x3c>)
 800b75a:	1b64      	subs	r4, r4, r5
 800b75c:	10a4      	asrs	r4, r4, #2
 800b75e:	2600      	movs	r6, #0
 800b760:	42a6      	cmp	r6, r4
 800b762:	d109      	bne.n	800b778 <__libc_init_array+0x24>
 800b764:	4d0b      	ldr	r5, [pc, #44]	@ (800b794 <__libc_init_array+0x40>)
 800b766:	4c0c      	ldr	r4, [pc, #48]	@ (800b798 <__libc_init_array+0x44>)
 800b768:	f000 f818 	bl	800b79c <_init>
 800b76c:	1b64      	subs	r4, r4, r5
 800b76e:	10a4      	asrs	r4, r4, #2
 800b770:	2600      	movs	r6, #0
 800b772:	42a6      	cmp	r6, r4
 800b774:	d105      	bne.n	800b782 <__libc_init_array+0x2e>
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77c:	4798      	blx	r3
 800b77e:	3601      	adds	r6, #1
 800b780:	e7ee      	b.n	800b760 <__libc_init_array+0xc>
 800b782:	f855 3b04 	ldr.w	r3, [r5], #4
 800b786:	4798      	blx	r3
 800b788:	3601      	adds	r6, #1
 800b78a:	e7f2      	b.n	800b772 <__libc_init_array+0x1e>
 800b78c:	0800b7fc 	.word	0x0800b7fc
 800b790:	0800b7fc 	.word	0x0800b7fc
 800b794:	0800b7fc 	.word	0x0800b7fc
 800b798:	0800b800 	.word	0x0800b800

0800b79c <_init>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	bf00      	nop
 800b7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a2:	bc08      	pop	{r3}
 800b7a4:	469e      	mov	lr, r3
 800b7a6:	4770      	bx	lr

0800b7a8 <_fini>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr
