
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a460  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  0801a730  0801a730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b258  0801b258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b260  0801b260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b264  0801b264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801b268  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005f78  240002cc  0801b534  0001d2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006244  0801b534  0001e244  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035708  00000000  00000000  0001d2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006bf2  00000000  00000000  00052a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002710  00000000  00000000  000595f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e4e  00000000  00000000  0005bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b419  00000000  00000000  0005db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ca1e  00000000  00000000  00068f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171b0e  00000000  00000000  000a598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021749b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bca4  00000000  00000000  002174e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00223184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a718 	.word	0x0801a718

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801a718 	.word	0x0801a718

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f003 f8dc 	bl	8003c7e <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002dac 	.word	0x24002dac

08000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8000ade:	f003 feed 	bl	80048bc <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24002dcc 	.word	0x24002dcc

08000af0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8000afa:	f003 fefb 	bl	80048f4 <VibeCheckWaveGen_DMACpltCallback>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24002dcc 	.word	0x24002dcc

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b12:	f000 fec1 	bl	8001898 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f004 f9e9 	bl	8004eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f839 	bl	8000b90 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b1e:	f000 f8a7 	bl	8000c70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 fdab 	bl	800167c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b26:	f000 fd79 	bl	800161c <MX_DMA_Init>
  MX_DAC1_Init();
 8000b2a:	f000 f9b7 	bl	8000e9c <MX_DAC1_Init>
  MX_I2C2_Init();
 8000b2e:	f000 f9f1 	bl	8000f14 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000b32:	f000 fa2f 	bl	8000f94 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b36:	f000 fa83 	bl	8001040 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b3a:	f000 fad7 	bl	80010ec <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b3e:	f000 fc5b 	bl	80013f8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b42:	f000 fbcb 	bl	80012dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b46:	f000 fd1d 	bl	8001584 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b4a:	f000 fb25 	bl	8001198 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b4e:	f000 fb77 	bl	8001240 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b52:	f000 f8bd 	bl	8000cd0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b56:	f000 f937 	bl	8000dc8 <MX_ADC2_Init>
  MX_UART7_Init();
 8000b5a:	f000 fcc5 	bl	80014e8 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b5e:	f014 f97f 	bl	8014e60 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4);
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <main+0x70>)
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <main+0x74>)
 8000b68:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <main+0x78>)
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <main+0x7c>)
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <main+0x80>)
 8000b6e:	f001 fd81 	bl	8002674 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <main+0x80>)
 8000b74:	f001 ff08 	bl	8002988 <VibeCheck_Loop>
 8000b78:	e7fb      	b.n	8000b72 <main+0x66>
 8000b7a:	bf00      	nop
 8000b7c:	2400079c 	.word	0x2400079c
 8000b80:	240003c8 	.word	0x240003c8
 8000b84:	240006b8 	.word	0x240006b8
 8000b88:	24000750 	.word	0x24000750
 8000b8c:	24000988 	.word	0x24000988

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	224c      	movs	r2, #76	@ 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f016 fa1f 	bl	8016fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f016 fa19 	bl	8016fe2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f00a f885 	bl	800acc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd2:	bf00      	nop
 8000bd4:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be0:	d1f8      	bne.n	8000bd4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000be2:	2321      	movs	r3, #33	@ 0x21
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bfc:	2328      	movs	r3, #40	@ 0x28
 8000bfe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a f899 	bl	800ad54 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c28:	f000 fe62 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	233f      	movs	r3, #63	@ 0x3f
 8000c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2303      	movs	r3, #3
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c4a:	2340      	movs	r3, #64	@ 0x40
 8000c4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2103      	movs	r1, #3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00a fc58 	bl	800b508 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c5e:	f000 fe47 	bl	80018f0 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3770      	adds	r7, #112	@ 0x70
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024800 	.word	0x58024800

08000c70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ae      	sub	sp, #184	@ 0xb8
 8000c74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	22b8      	movs	r2, #184	@ 0xb8
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f016 f9b0 	bl	8016fe2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c92:	2310      	movs	r3, #16
 8000c94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ca2:	23c0      	movs	r3, #192	@ 0xc0
 8000ca4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a ffb2 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cc2:	f000 fe15 	bl	80018f0 <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	37b8      	adds	r7, #184	@ 0xb8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2224      	movs	r2, #36	@ 0x24
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f016 f97a 	bl	8016fe2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cee:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000cf0:	4a32      	ldr	r2, [pc, #200]	@ (8000dbc <MX_ADC1_Init+0xec>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000cf6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d54:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d56:	f004 fbc5 	bl	80054e4 <HAL_ADC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d60:	f000 fdc6 	bl	80018f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000d70:	f005 fc04 	bl	800657c <HAL_ADCEx_MultiModeConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d7a:	f000 fdb9 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_ADC1_Init+0xf0>)
 8000d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2306      	movs	r3, #6
 8000d84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_ADC1_Init+0xf4>)
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_ADC1_Init+0xe8>)
 8000da2:	f004 fda7 	bl	80058f4 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000dac:	f000 fda0 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	@ 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	240002e8 	.word	0x240002e8
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	10c00010 	.word	0x10c00010
 8000dc4:	47ff0000 	.word	0x47ff0000

08000dc8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2224      	movs	r2, #36	@ 0x24
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f016 f904 	bl	8016fe2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8000e90 <MX_ADC2_Init+0xc8>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000de2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000de8:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dee:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df4:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e42:	f004 fb4f 	bl	80054e4 <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e4c:	f000 fd50 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_ADC2_Init+0xcc>)
 8000e52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2306      	movs	r3, #6
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_ADC2_Init+0xd0>)
 8000e5e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e60:	2304      	movs	r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_ADC2_Init+0xc4>)
 8000e74:	f004 fd3e 	bl	80058f4 <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e7e:	f000 fd37 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000358 	.word	0x24000358
 8000e90:	40022100 	.word	0x40022100
 8000e94:	0c900008 	.word	0x0c900008
 8000e98:	47ff0000 	.word	0x47ff0000

08000e9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2224      	movs	r2, #36	@ 0x24
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f016 f89a 	bl	8016fe2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_DAC1_Init+0x70>)
 8000eb0:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <MX_DAC1_Init+0x74>)
 8000eb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eb4:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <MX_DAC1_Init+0x70>)
 8000eb6:	f005 fdcb 	bl	8006a50 <HAL_DAC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ec0:	f000 fd16 	bl	80018f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <MX_DAC1_Init+0x70>)
 8000ee0:	f005 fea2 	bl	8006c28 <HAL_DAC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000eea:	f000 fd01 	bl	80018f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_DAC1_Init+0x70>)
 8000ef6:	f005 fe97 	bl	8006c28 <HAL_DAC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000f00:	f000 fcf6 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	@ 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	240003c8 	.word	0x240003c8
 8000f10:	40007400 	.word	0x40007400

08000f14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C2_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C2_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f50:	f008 fae4 	bl	800951c <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fcc9 	bl	80018f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f62:	f008 fb77 	bl	8009654 <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fcc0 	bl	80018f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C2_Init+0x74>)
 8000f74:	f008 fbb9 	bl	80096ea <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fcb7 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240004cc 	.word	0x240004cc
 8000f8c:	40005800 	.word	0x40005800
 8000f90:	307075b1 	.word	0x307075b1

08000f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000f9a:	4a28      	ldr	r2, [pc, #160]	@ (800103c <MX_SPI2_Init+0xa8>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fa0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fe6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_SPI2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_SPI2_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_SPI2_Init+0xa4>)
 8001024:	f00d f9e2 	bl	800e3ec <HAL_SPI_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800102e:	f000 fc5f 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24000520 	.word	0x24000520
 800103c:	40003800 	.word	0x40003800

08001040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001046:	4a28      	ldr	r2, [pc, #160]	@ (80010e8 <MX_SPI3_Init+0xa8>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800104c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800105a:	2203      	movs	r2, #3
 800105c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800106c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001070:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_SPI3_Init+0xa4>)
 80010d0:	f00d f98c 	bl	800e3ec <HAL_SPI_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010da:	f000 fc09 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	240005a8 	.word	0x240005a8
 80010e8:	40003c00 	.word	0x40003c00

080010ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_SPI4_Init+0xa4>)
 80010f2:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <MX_SPI4_Init+0xa8>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_SPI4_Init+0xa4>)
 80010f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001106:	2203      	movs	r2, #3
 8001108:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001118:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800111c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001142:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_SPI4_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_SPI4_Init+0xa4>)
 800117c:	f00d f936 	bl	800e3ec <HAL_SPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001186:	f000 fbb3 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	24000630 	.word	0x24000630
 8001194:	40013400 	.word	0x40013400

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011b8:	4a20      	ldr	r2, [pc, #128]	@ (800123c <MX_TIM1_Init+0xa4>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e2:	4815      	ldr	r0, [pc, #84]	@ (8001238 <MX_TIM1_Init+0xa0>)
 80011e4:	f00d fa41 	bl	800e66a <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011ee:	f000 fb7f 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_TIM1_Init+0xa0>)
 8001200:	f00e f9f2 	bl	800f5e8 <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800120a:	f000 fb71 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800120e:	2320      	movs	r3, #32
 8001210:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <MX_TIM1_Init+0xa0>)
 8001220:	f00f f834 	bl	801028c <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800122a:	f000 fb61 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	240006b8 	.word	0x240006b8
 800123c:	40010000 	.word	0x40010000

08001240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM2_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_TIM2_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001288:	f00d f9ef 	bl	800e66a <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001292:	f000 fb2d 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM2_Init+0x98>)
 80012a4:	f00e f9a0 	bl	800f5e8 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ae:	f000 fb1f 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b2:	2320      	movs	r3, #32
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_TIM2_Init+0x98>)
 80012c0:	f00e ffe4 	bl	801028c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ca:	f000 fb11 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000704 	.word	0x24000704

080012dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	@ 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001310:	4a38      	ldr	r2, [pc, #224]	@ (80013f4 <MX_TIM3_Init+0x118>)
 8001312:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001314:	4b36      	ldr	r3, [pc, #216]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <MX_TIM3_Init+0x114>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001326:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <MX_TIM3_Init+0x114>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b30      	ldr	r3, [pc, #192]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001334:	482e      	ldr	r0, [pc, #184]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001336:	f00d f998 	bl	800e66a <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001340:	f000 fad6 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134e:	4619      	mov	r1, r3
 8001350:	4827      	ldr	r0, [pc, #156]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001352:	f00e f949 	bl	800f5e8 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800135c:	f000 fac8 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001360:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001362:	f00d fadd 	bl	800e920 <HAL_TIM_PWM_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800136c:	f000 fac0 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	@ (80013f0 <MX_TIM3_Init+0x114>)
 8001380:	f00e ff84 	bl	801028c <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800138a:	f000 fab1 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	@ 0x60
 8001390:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_TIM3_Init+0x114>)
 80013a6:	f00e f80b 	bl	800f3c0 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013b0:	f000 fa9e 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	2204      	movs	r2, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <MX_TIM3_Init+0x114>)
 80013bc:	f00e f800 	bl	800f3c0 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80013c6:	f000 fa93 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	2208      	movs	r2, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <MX_TIM3_Init+0x114>)
 80013d2:	f00d fff5 	bl	800f3c0 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80013dc:	f000 fa88 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <MX_TIM3_Init+0x114>)
 80013e2:	f000 fe87 	bl	80020f4 <HAL_TIM_MspPostInit>

}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	@ 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000750 	.word	0x24000750
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142a:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800142c:	4a2d      	ldr	r2, [pc, #180]	@ (80014e4 <MX_TIM4_Init+0xec>)
 800142e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001430:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800143e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001442:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001450:	4823      	ldr	r0, [pc, #140]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 8001452:	f00d f90a 	bl	800e66a <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800145c:	f000 fa48 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146a:	4619      	mov	r1, r3
 800146c:	481c      	ldr	r0, [pc, #112]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800146e:	f00e f8bb 	bl	800f5e8 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001478:	f000 fa3a 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800147c:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800147e:	f00d fa4f 	bl	800e920 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001488:	f000 fa32 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 800149c:	f00e fef6 	bl	801028c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014a6:	f000 fa23 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	@ 0x60
 80014ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 80014c2:	f00d ff7d 	bl	800f3c0 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014cc:	f000 fa10 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM4_Init+0xe8>)
 80014d2:	f000 fe0f 	bl	80020f4 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3738      	adds	r7, #56	@ 0x38
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2400079c 	.word	0x2400079c
 80014e4:	40000800 	.word	0x40000800

080014e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014ec:	4b23      	ldr	r3, [pc, #140]	@ (800157c <MX_UART7_Init+0x94>)
 80014ee:	4a24      	ldr	r2, [pc, #144]	@ (8001580 <MX_UART7_Init+0x98>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_UART7_Init+0x94>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <MX_UART7_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_UART7_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_UART7_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_UART7_Init+0x94>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_UART7_Init+0x94>)
 8001514:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001518:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_UART7_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_UART7_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_UART7_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_UART7_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001532:	4812      	ldr	r0, [pc, #72]	@ (800157c <MX_UART7_Init+0x94>)
 8001534:	f00e ff64 	bl	8010400 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 800153e:	f000 f9d7 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_UART7_Init+0x94>)
 8001546:	f010 f870 	bl	801162a <HAL_UARTEx_SetTxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001550:	f000 f9ce 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_UART7_Init+0x94>)
 8001558:	f010 f8a5 	bl	80116a6 <HAL_UARTEx_SetRxFifoThreshold>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001562:	f000 f9c5 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_UART7_Init+0x94>)
 8001568:	f010 f826 	bl	80115b8 <HAL_UARTEx_DisableFifoMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001572:	f000 f9bd 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	24000860 	.word	0x24000860
 8001580:	40007800 	.word	0x40007800

08001584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <MX_USART1_UART_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015ce:	f00e ff17 	bl	8010400 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f98a 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015e0:	f010 f823 	bl	801162a <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f981 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 80015f2:	f010 f858 	bl	80116a6 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f978 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_USART1_UART_Init+0x90>)
 8001602:	f00f ffd9 	bl	80115b8 <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f970 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240008f4 	.word	0x240008f4
 8001618:	40011000 	.word	0x40011000

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_DMA_Init+0x5c>)
 8001624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <MX_DMA_Init+0x5c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_DMA_Init+0x5c>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	200b      	movs	r0, #11
 8001646:	f005 f956 	bl	80068f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800164a:	200b      	movs	r0, #11
 800164c:	f005 f96d 	bl	800692a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	200c      	movs	r0, #12
 8001656:	f005 f94e 	bl	80068f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800165a:	200c      	movs	r0, #12
 800165c:	f005 f965 	bl	800692a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	200d      	movs	r0, #13
 8001666:	f005 f946 	bl	80068f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800166a:	200d      	movs	r0, #13
 800166c:	f005 f95d 	bl	800692a <HAL_NVIC_EnableIRQ>

}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58024400 	.word	0x58024400

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	@ 0x30
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	4b7b      	ldr	r3, [pc, #492]	@ (8001880 <MX_GPIO_Init+0x204>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	4a79      	ldr	r2, [pc, #484]	@ (8001880 <MX_GPIO_Init+0x204>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a2:	4b77      	ldr	r3, [pc, #476]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	4b73      	ldr	r3, [pc, #460]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a72      	ldr	r2, [pc, #456]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b68      	ldr	r3, [pc, #416]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b64      	ldr	r3, [pc, #400]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a63      	ldr	r2, [pc, #396]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b60      	ldr	r3, [pc, #384]	@ (8001880 <MX_GPIO_Init+0x204>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <MX_GPIO_Init+0x204>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a5b      	ldr	r2, [pc, #364]	@ (8001880 <MX_GPIO_Init+0x204>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b59      	ldr	r3, [pc, #356]	@ (8001880 <MX_GPIO_Init+0x204>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <MX_GPIO_Init+0x204>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a54      	ldr	r2, [pc, #336]	@ (8001880 <MX_GPIO_Init+0x204>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b51      	ldr	r3, [pc, #324]	@ (8001880 <MX_GPIO_Init+0x204>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2110      	movs	r1, #16
 800174a:	484e      	ldr	r0, [pc, #312]	@ (8001884 <MX_GPIO_Init+0x208>)
 800174c:	f007 fecc 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2104      	movs	r1, #4
 8001754:	484c      	ldr	r0, [pc, #304]	@ (8001888 <MX_GPIO_Init+0x20c>)
 8001756:	f007 fec7 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2101      	movs	r1, #1
 800175e:	484b      	ldr	r0, [pc, #300]	@ (800188c <MX_GPIO_Init+0x210>)
 8001760:	f007 fec2 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	210a      	movs	r1, #10
 8001768:	4848      	ldr	r0, [pc, #288]	@ (800188c <MX_GPIO_Init+0x210>)
 800176a:	f007 febd 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001774:	4846      	ldr	r0, [pc, #280]	@ (8001890 <MX_GPIO_Init+0x214>)
 8001776:	f007 feb7 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2101      	movs	r1, #1
 800177e:	4845      	ldr	r0, [pc, #276]	@ (8001894 <MX_GPIO_Init+0x218>)
 8001780:	f007 feb2 	bl	80094e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001784:	2308      	movs	r3, #8
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	483b      	ldr	r0, [pc, #236]	@ (8001884 <MX_GPIO_Init+0x208>)
 8001798:	f007 fce6 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800179c:	2310      	movs	r3, #16
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4834      	ldr	r0, [pc, #208]	@ (8001884 <MX_GPIO_Init+0x208>)
 80017b4:	f007 fcd8 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 80017b8:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	482e      	ldr	r0, [pc, #184]	@ (8001888 <MX_GPIO_Init+0x20c>)
 80017ce:	f007 fccb 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80017d2:	2304      	movs	r3, #4
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4827      	ldr	r0, [pc, #156]	@ (8001888 <MX_GPIO_Init+0x20c>)
 80017ea:	f007 fcbd 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 80017ee:	230b      	movs	r3, #11
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	@ (800188c <MX_GPIO_Init+0x210>)
 8001806:	f007 fcaf 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 800180a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	481b      	ldr	r0, [pc, #108]	@ (800188c <MX_GPIO_Init+0x210>)
 8001820:	f007 fca2 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001824:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4814      	ldr	r0, [pc, #80]	@ (8001890 <MX_GPIO_Init+0x214>)
 800183e:	f007 fc93 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001842:	f240 3306 	movw	r3, #774	@ 0x306
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	480f      	ldr	r0, [pc, #60]	@ (8001894 <MX_GPIO_Init+0x218>)
 8001858:	f007 fc86 	bl	8009168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4808      	ldr	r0, [pc, #32]	@ (8001894 <MX_GPIO_Init+0x218>)
 8001874:	f007 fc78 	bl	8009168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	@ 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	58024400 	.word	0x58024400
 8001884:	58021000 	.word	0x58021000
 8001888:	58020800 	.word	0x58020800
 800188c:	58020000 	.word	0x58020000
 8001890:	58020400 	.word	0x58020400
 8001894:	58020c00 	.word	0x58020c00

08001898 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018aa:	f005 f859 	bl	8006960 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018ba:	231f      	movs	r3, #31
 80018bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018be:	2387      	movs	r3, #135	@ 0x87
 80018c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018c6:	2300      	movs	r3, #0
 80018c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018da:	463b      	mov	r3, r7
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 f877 	bl	80069d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f005 f854 	bl	8006990 <HAL_MPU_Enable>

}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	745a      	strb	r2, [r3, #17]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	745a      	strb	r2, [r3, #17]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7c1b      	ldrb	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d030      	beq.n	80019d6 <Sequencer_Update+0x76>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d02c      	beq.n	80019d6 <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	d927      	bls.n	80019d6 <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	441a      	add	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10a      	bne.n	80019d2 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	7c5b      	ldrb	r3, [r3, #17]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	e002      	b.n	80019d2 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <Sequencer_Update+0x78>
		}
	}

	return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	741a      	strb	r2, [r3, #16]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	741a      	strb	r2, [r3, #16]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_MspInit+0x30>)
 8001a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_MspInit+0x30>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_MspInit+0x30>)
 8001a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	58024400 	.word	0x58024400

08001a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	@ 0x30
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a39      	ldr	r2, [pc, #228]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d133      	bne.n	8001ae6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a37      	ldr	r2, [pc, #220]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001a86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a88:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10e      	bne.n	8001aae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a90:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001acc:	2330      	movs	r3, #48	@ 0x30
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4823      	ldr	r0, [pc, #140]	@ (8001b6c <HAL_ADC_MspInit+0x110>)
 8001ae0:	f007 fb42 	bl	8009168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ae4:	e037      	b.n	8001b56 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <HAL_ADC_MspInit+0x114>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d132      	bne.n	8001b56 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001af8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d10e      	bne.n	8001b20 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b08:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3e:	23c0      	movs	r3, #192	@ 0xc0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <HAL_ADC_MspInit+0x118>)
 8001b52:	f007 fb09 	bl	8009168 <HAL_GPIO_Init>
}
 8001b56:	bf00      	nop
 8001b58:	3730      	adds	r7, #48	@ 0x30
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000
 8001b64:	24004508 	.word	0x24004508
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58020800 	.word	0x58020800
 8001b70:	40022100 	.word	0x40022100
 8001b74:	58020000 	.word	0x58020000

08001b78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <HAL_DAC_MspInit+0x140>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f040 808a 	bne.w	8001cb0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001b9c:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba2:	4a46      	ldr	r2, [pc, #280]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bac:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bca:	4b3c      	ldr	r3, [pc, #240]	@ (8001cbc <HAL_DAC_MspInit+0x144>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bd8:	2330      	movs	r3, #48	@ 0x30
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4835      	ldr	r0, [pc, #212]	@ (8001cc0 <HAL_DAC_MspInit+0x148>)
 8001bec:	f007 fabc 	bl	8009168 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001bf0:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001bf2:	4a35      	ldr	r2, [pc, #212]	@ (8001cc8 <HAL_DAC_MspInit+0x150>)
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001bf8:	2243      	movs	r2, #67	@ 0x43
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001bfe:	2240      	movs	r2, #64	@ 0x40
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c16:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c20:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c26:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2e:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c34:	4823      	ldr	r0, [pc, #140]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c36:	f005 f9c3 	bl	8006fc0 <HAL_DMA_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001c40:	f7ff fe56 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_DAC_MspInit+0x14c>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_DAC_MspInit+0x158>)
 8001c54:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c58:	2244      	movs	r2, #68	@ 0x44
 8001c5a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c6e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c76:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001c96:	f005 f993 	bl	8006fc0 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001ca0:	f7ff fe26 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <HAL_DAC_MspInit+0x154>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	@ 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40007400 	.word	0x40007400
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020000 	.word	0x58020000
 8001cc4:	240003dc 	.word	0x240003dc
 8001cc8:	40020010 	.word	0x40020010
 8001ccc:	24000454 	.word	0x24000454
 8001cd0:	40020028 	.word	0x40020028

08001cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0b8      	sub	sp, #224	@ 0xe0
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	22b8      	movs	r2, #184	@ 0xb8
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f015 f974 	bl	8016fe2 <memset>
  if(hi2c->Instance==I2C2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a27      	ldr	r2, [pc, #156]	@ (8001d9c <HAL_I2C_MspInit+0xc8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d146      	bne.n	8001d92 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d04:	f04f 0208 	mov.w	r2, #8
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 ff80 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d26:	f7ff fde3 	bl	80018f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d62:	2304      	movs	r3, #4
 8001d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <HAL_I2C_MspInit+0xd0>)
 8001d70:	f007 f9fa 	bl	8009168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_I2C_MspInit+0xcc>)
 8001d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d92:	bf00      	nop
 8001d94:	37e0      	adds	r7, #224	@ 0xe0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58020400 	.word	0x58020400

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0bc      	sub	sp, #240	@ 0xf0
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	22b8      	movs	r2, #184	@ 0xb8
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f015 f90a 	bl	8016fe2 <memset>
  if(hspi->Instance==SPI2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a72      	ldr	r2, [pc, #456]	@ (8001f9c <HAL_SPI_MspInit+0x1f4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d146      	bne.n	8001e66 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f009 ff17 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001df8:	f7ff fd7a 	bl	80018f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e02:	4a67      	ldr	r2, [pc, #412]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0c:	4b64      	ldr	r3, [pc, #400]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b61      	ldr	r3, [pc, #388]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e20:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001e38:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e52:	2305      	movs	r3, #5
 8001e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4851      	ldr	r0, [pc, #324]	@ (8001fa4 <HAL_SPI_MspInit+0x1fc>)
 8001e60:	f007 f982 	bl	8009168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e64:	e096      	b.n	8001f94 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa8 <HAL_SPI_MspInit+0x200>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d146      	bne.n	8001efe <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f009 fecb 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001e90:	f7ff fd2e 	bl	80018f0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e94:	4b42      	ldr	r3, [pc, #264]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9a:	4a41      	ldr	r2, [pc, #260]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ed0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ed4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eea:	2306      	movs	r3, #6
 8001eec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482d      	ldr	r0, [pc, #180]	@ (8001fac <HAL_SPI_MspInit+0x204>)
 8001ef8:	f007 f936 	bl	8009168 <HAL_GPIO_Init>
}
 8001efc:	e04a      	b.n	8001f94 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <HAL_SPI_MspInit+0x208>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d145      	bne.n	8001f94 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f009 fe7e 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001f2a:	f7ff fce1 	bl	80018f0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f52:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <HAL_SPI_MspInit+0x1f8>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f6a:	2364      	movs	r3, #100	@ 0x64
 8001f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f82:	2305      	movs	r3, #5
 8001f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4809      	ldr	r0, [pc, #36]	@ (8001fb4 <HAL_SPI_MspInit+0x20c>)
 8001f90:	f007 f8ea 	bl	8009168 <HAL_GPIO_Init>
}
 8001f94:	bf00      	nop
 8001f96:	37f0      	adds	r7, #240	@ 0xf0
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40003800 	.word	0x40003800
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	58020400 	.word	0x58020400
 8001fa8:	40003c00 	.word	0x40003c00
 8001fac:	58020800 	.word	0x58020800
 8001fb0:	40013400 	.word	0x40013400
 8001fb4:	58021000 	.word	0x58021000

08001fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a45      	ldr	r2, [pc, #276]	@ (80020dc <HAL_TIM_Base_MspInit+0x124>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10f      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd0:	4a43      	ldr	r2, [pc, #268]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8001fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fe8:	e074      	b.n	80020d4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff2:	d10f      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8001ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ffa:	4a39      	ldr	r2, [pc, #228]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8002006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	e05f      	b.n	80020d4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a32      	ldr	r2, [pc, #200]	@ (80020e4 <HAL_TIM_Base_MspInit+0x12c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d117      	bne.n	800204e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800201e:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8002020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002024:	4a2e      	ldr	r2, [pc, #184]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800202e:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8002030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	201d      	movs	r0, #29
 8002042:	f004 fc58 	bl	80068f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002046:	201d      	movs	r0, #29
 8002048:	f004 fc6f 	bl	800692a <HAL_NVIC_EnableIRQ>
}
 800204c:	e042      	b.n	80020d4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	@ (80020e8 <HAL_TIM_Base_MspInit+0x130>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d13d      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002058:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 800205a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205e:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_TIM_Base_MspInit+0x128>)
 800206a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002076:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 8002078:	4a1d      	ldr	r2, [pc, #116]	@ (80020f0 <HAL_TIM_Base_MspInit+0x138>)
 800207a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 800207e:	221d      	movs	r2, #29
 8002080:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 8002084:	2240      	movs	r2, #64	@ 0x40
 8002086:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 8002090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002094:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 8002098:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800209c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80020b8:	480c      	ldr	r0, [pc, #48]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020ba:	f004 ff81 	bl	8006fc0 <HAL_DMA_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80020c4:	f7ff fc14 	bl	80018f0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80020ce:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_TIM_Base_MspInit+0x134>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40010000 	.word	0x40010000
 80020e0:	58024400 	.word	0x58024400
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800
 80020ec:	240007e8 	.word	0x240007e8
 80020f0:	40020040 	.word	0x40020040

080020f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a26      	ldr	r2, [pc, #152]	@ (80021ac <HAL_TIM_MspPostInit+0xb8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d120      	bne.n	8002158 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211c:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002126:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002134:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002146:	2302      	movs	r3, #2
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4818      	ldr	r0, [pc, #96]	@ (80021b4 <HAL_TIM_MspPostInit+0xc0>)
 8002152:	f007 f809 	bl	8009168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002156:	e024      	b.n	80021a2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <HAL_TIM_MspPostInit+0xc4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11f      	bne.n	80021a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002192:	2302      	movs	r3, #2
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4807      	ldr	r0, [pc, #28]	@ (80021bc <HAL_TIM_MspPostInit+0xc8>)
 800219e:	f006 ffe3 	bl	8009168 <HAL_GPIO_Init>
}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	@ 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40000400 	.word	0x40000400
 80021b0:	58024400 	.word	0x58024400
 80021b4:	58020800 	.word	0x58020800
 80021b8:	40000800 	.word	0x40000800
 80021bc:	58020c00 	.word	0x58020c00

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ba      	sub	sp, #232	@ 0xe8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	22b8      	movs	r2, #184	@ 0xb8
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f014 fefe 	bl	8016fe2 <memset>
  if(huart->Instance==UART7)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_UART_MspInit+0x160>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d147      	bne.n	8002280 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80021f0:	f04f 0202 	mov.w	r2, #2
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	4618      	mov	r0, r3
 8002208:	f009 fd0a 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002212:	f7ff fb6d 	bl	80018f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <HAL_UART_MspInit+0x164>)
 8002218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800221c:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <HAL_UART_MspInit+0x164>)
 800221e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002222:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002226:	4b3f      	ldr	r3, [pc, #252]	@ (8002324 <HAL_UART_MspInit+0x164>)
 8002228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800222c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002234:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <HAL_UART_MspInit+0x164>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223a:	4a3a      	ldr	r2, [pc, #232]	@ (8002324 <HAL_UART_MspInit+0x164>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002244:	4b37      	ldr	r3, [pc, #220]	@ (8002324 <HAL_UART_MspInit+0x164>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002252:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800226c:	2307      	movs	r3, #7
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002272:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002276:	4619      	mov	r1, r3
 8002278:	482b      	ldr	r0, [pc, #172]	@ (8002328 <HAL_UART_MspInit+0x168>)
 800227a:	f006 ff75 	bl	8009168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800227e:	e04a      	b.n	8002316 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a29      	ldr	r2, [pc, #164]	@ (800232c <HAL_UART_MspInit+0x16c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d145      	bne.n	8002316 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800228a:	f04f 0201 	mov.w	r2, #1
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f009 fcbd 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80022ac:	f7ff fb20 	bl	80018f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	4a13      	ldr	r2, [pc, #76]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_UART_MspInit+0x164>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80022ec:	23c0      	movs	r3, #192	@ 0xc0
 80022ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002304:	2307      	movs	r3, #7
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	@ (8002330 <HAL_UART_MspInit+0x170>)
 8002312:	f006 ff29 	bl	8009168 <HAL_GPIO_Init>
}
 8002316:	bf00      	nop
 8002318:	37e8      	adds	r7, #232	@ 0xe8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40007800 	.word	0x40007800
 8002324:	58024400 	.word	0x58024400
 8002328:	58021000 	.word	0x58021000
 800232c:	40011000 	.word	0x40011000
 8002330:	58020400 	.word	0x58020400

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <NMI_Handler+0x4>

0800233c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <HardFault_Handler+0x4>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <MemManage_Handler+0x4>

0800234c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <UsageFault_Handler+0x4>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f002 fe21 	bl	8004fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <DMA1_Stream0_IRQHandler+0x10>)
 800239a:	f005 fbd3 	bl	8007b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	240003dc 	.word	0x240003dc

080023a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <DMA1_Stream1_IRQHandler+0x10>)
 80023ae:	f005 fbc9 	bl	8007b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	24000454 	.word	0x24000454

080023bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <DMA1_Stream2_IRQHandler+0x10>)
 80023c2:	f005 fbbf 	bl	8007b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	240007e8 	.word	0x240007e8

080023d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <TIM3_IRQHandler+0x10>)
 80023d6:	f00c feeb 	bl	800f1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	24000750 	.word	0x24000750

080023e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <OTG_HS_IRQHandler+0x10>)
 80023ea:	f007 fb0b 	bl	8009a04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	240059f4 	.word	0x240059f4

080023f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_kill>:

int _kill(int pid, int sig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002412:	f014 fe57 	bl	80170c4 <__errno>
 8002416:	4603      	mov	r3, r0
 8002418:	2216      	movs	r2, #22
 800241a:	601a      	str	r2, [r3, #0]
  return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_exit>:

void _exit (int status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffe7 	bl	8002408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800243a:	bf00      	nop
 800243c:	e7fd      	b.n	800243a <_exit+0x12>

0800243e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00a      	b.n	8002466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002450:	f3af 8000 	nop.w
 8002454:	4601      	mov	r1, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	b2ca      	uxtb	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	dbf0      	blt.n	8002450 <_read+0x12>
  }

  return len;
 800246e:	687b      	ldr	r3, [r7, #4]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e009      	b.n	800249e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	60ba      	str	r2, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbf1      	blt.n	800248a <_write+0x12>
  }
  return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_close>:

int _close(int file)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024d8:	605a      	str	r2, [r3, #4]
  return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_isatty>:

int _isatty(int file)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	@ (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f014 fdbc 	bl	80170c4 <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	24050000 	.word	0x24050000
 8002578:	00000400 	.word	0x00000400
 800257c:	2400450c 	.word	0x2400450c
 8002580:	24006248 	.word	0x24006248

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <SystemInit+0xd0>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <SystemInit+0xd0>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002598:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <SystemInit+0xd4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d807      	bhi.n	80025b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <SystemInit+0xd4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 030f 	bic.w	r3, r3, #15
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <SystemInit+0xd4>)
 80025ae:	f043 0307 	orr.w	r3, r3, #7
 80025b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <SystemInit+0xd8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a28      	ldr	r2, [pc, #160]	@ (800265c <SystemInit+0xd8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <SystemInit+0xd8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <SystemInit+0xd8>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4924      	ldr	r1, [pc, #144]	@ (800265c <SystemInit+0xd8>)
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <SystemInit+0xdc>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <SystemInit+0xd4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <SystemInit+0xd4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 030f 	bic.w	r3, r3, #15
 80025e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <SystemInit+0xd4>)
 80025e8:	f043 0307 	orr.w	r3, r3, #7
 80025ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <SystemInit+0xd8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <SystemInit+0xd8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025fa:	4b18      	ldr	r3, [pc, #96]	@ (800265c <SystemInit+0xd8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <SystemInit+0xd8>)
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <SystemInit+0xe0>)
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <SystemInit+0xd8>)
 8002608:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <SystemInit+0xe4>)
 800260a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800260c:	4b13      	ldr	r3, [pc, #76]	@ (800265c <SystemInit+0xd8>)
 800260e:	4a17      	ldr	r2, [pc, #92]	@ (800266c <SystemInit+0xe8>)
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002612:	4b12      	ldr	r3, [pc, #72]	@ (800265c <SystemInit+0xd8>)
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <SystemInit+0xd8>)
 800261a:	4a14      	ldr	r2, [pc, #80]	@ (800266c <SystemInit+0xe8>)
 800261c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <SystemInit+0xd8>)
 8002620:	2200      	movs	r2, #0
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002624:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <SystemInit+0xd8>)
 8002626:	4a11      	ldr	r2, [pc, #68]	@ (800266c <SystemInit+0xe8>)
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <SystemInit+0xd8>)
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <SystemInit+0xd8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a09      	ldr	r2, [pc, #36]	@ (800265c <SystemInit+0xd8>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <SystemInit+0xd8>)
 800263e:	2200      	movs	r2, #0
 8002640:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <SystemInit+0xec>)
 8002644:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	52002000 	.word	0x52002000
 800265c:	58024400 	.word	0x58024400
 8002660:	eaf6ed7f 	.word	0xeaf6ed7f
 8002664:	02020200 	.word	0x02020200
 8002668:	01ff0000 	.word	0x01ff0000
 800266c:	01010280 	.word	0x01010280
 8002670:	52004000 	.word	0x52004000

08002674 <VibeCheck_Init>:
void VibeCheck_Init(VibeCheck* vc,
		TIM_HandleTypeDef* htim_strobe,
		TIM_HandleTypeDef* htim_wavegen,
		DAC_HandleTypeDef* hdac_wavegen,
		TIM_HandleTypeDef* htim_rgb)
{
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	b0e3      	sub	sp, #396	@ 0x18c
 8002678:	af10      	add	r7, sp, #64	@ 0x40
 800267a:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800267e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8002682:	6020      	str	r0, [r4, #0]
 8002684:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8002688:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800268c:	6001      	str	r1, [r0, #0]
 800268e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002692:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8002696:	600a      	str	r2, [r1, #0]
 8002698:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800269c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026a0:	6013      	str	r3, [r2, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80026a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fd5b 	bl	8003168 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80026b2:	4aab      	ldr	r2, [pc, #684]	@ (8002960 <VibeCheck_Init+0x2ec>)
 80026b4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80026b8:	6810      	ldr	r0, [r2, #0]
 80026ba:	6018      	str	r0, [r3, #0]
 80026bc:	8891      	ldrh	r1, [r2, #4]
 80026be:	7992      	ldrb	r2, [r2, #6]
 80026c0:	8099      	strh	r1, [r3, #4]
 80026c2:	719a      	strb	r2, [r3, #6]
 80026c4:	f207 1307 	addw	r3, r7, #263	@ 0x107
 80026c8:	2239      	movs	r2, #57	@ 0x39
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f014 fc88 	bl	8016fe2 <memset>
 80026d2:	4ba4      	ldr	r3, [pc, #656]	@ (8002964 <VibeCheck_Init+0x2f0>)
 80026d4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80026d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80026dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f242 4324 	movw	r3, #9252	@ 0x2424
 80026e6:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 80026e8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 80026ec:	4a9e      	ldr	r2, [pc, #632]	@ (8002968 <VibeCheck_Init+0x2f4>)
 80026ee:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80026f2:	6810      	ldr	r0, [r2, #0]
 80026f4:	6851      	ldr	r1, [r2, #4]
 80026f6:	c303      	stmia	r3!, {r0, r1}
 80026f8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80026fc:	2238      	movs	r2, #56	@ 0x38
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f014 fc6e 	bl	8016fe2 <memset>
 8002706:	4b99      	ldr	r3, [pc, #612]	@ (800296c <VibeCheck_Init+0x2f8>)
 8002708:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800270c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002710:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f242 4344 	movw	r3, #9284	@ 0x2444
 800271a:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 800271c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 8002720:	4b93      	ldr	r3, [pc, #588]	@ (8002970 <VibeCheck_Init+0x2fc>)
 8002722:	673b      	str	r3, [r7, #112]	@ 0x70
 8002724:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002728:	223c      	movs	r2, #60	@ 0x3c
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f014 fc58 	bl	8016fe2 <memset>
 8002732:	4b90      	ldr	r3, [pc, #576]	@ (8002974 <VibeCheck_Init+0x300>)
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8002738:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800273c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f243 4390 	movw	r3, #13456	@ 0x3490
 8002746:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	};

	VibeCheckShell_InputHandler accel_cmd = {
 800274c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002750:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002754:	4988      	ldr	r1, [pc, #544]	@ (8002978 <VibeCheck_Init+0x304>)
 8002756:	461a      	mov	r2, r3
 8002758:	6808      	ldr	r0, [r1, #0]
 800275a:	6010      	str	r0, [r2, #0]
 800275c:	8889      	ldrh	r1, [r1, #4]
 800275e:	8091      	strh	r1, [r2, #4]
 8002760:	3306      	adds	r3, #6
 8002762:	223a      	movs	r2, #58	@ 0x3a
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f014 fc3b 	bl	8016fe2 <memset>
 800276c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002770:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002774:	4a81      	ldr	r2, [pc, #516]	@ (800297c <VibeCheck_Init+0x308>)
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002778:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800277c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8002786:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 8002788:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800278c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8002790:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8002792:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002796:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	466d      	mov	r5, sp
 800279e:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 80027a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80027b6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	4630      	mov	r0, r6
 80027be:	f000 fe01 	bl	80033c4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80027c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027ca:	681e      	ldr	r6, [r3, #0]
 80027cc:	466d      	mov	r5, sp
 80027ce:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80027d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80027e6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80027ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ec:	4630      	mov	r0, r6
 80027ee:	f000 fde9 	bl	80033c4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 80027f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027fa:	681e      	ldr	r6, [r3, #0]
 80027fc:	466d      	mov	r5, sp
 80027fe:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002812:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002816:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	4630      	mov	r0, r6
 800281e:	f000 fdd1 	bl	80033c4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 8002822:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002826:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002832:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8002836:	466d      	mov	r5, sp
 8002838:	f106 040c 	add.w	r4, r6, #12
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800284c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002850:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fdb5 	bl	80033c4 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 800285a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800285e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002862:	4a47      	ldr	r2, [pc, #284]	@ (8002980 <VibeCheck_Init+0x30c>)
 8002864:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8002866:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800286a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002874:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8002876:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800287a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800287e:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler accel_sender = {
 8002880:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002884:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002888:	4a3e      	ldr	r2, [pc, #248]	@ (8002984 <VibeCheck_Init+0x310>)
 800288a:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 800288c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002890:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 800289a:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 800289c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80028a0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80028a4:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80028a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028bc:	f000 fdb4 	bl	8003428 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 80028c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028d6:	f000 fda7 	bl	8003428 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80028da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f242 4324 	movw	r3, #9252	@ 0x2424
 80028e8:	4413      	add	r3, r2
 80028ea:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80028ee:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80028f2:	6811      	ldr	r1, [r2, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 f815 	bl	8003924 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 80028fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002908:	4413      	add	r3, r2
 800290a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800290e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002912:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002916:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	6809      	ldr	r1, [r1, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fd50 	bl	80043c4 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8002924:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002928:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f243 4390 	movw	r3, #13456	@ 0x3490
 8002932:	4413      	add	r3, r2
 8002934:	f8d7 1160 	ldr.w	r1, [r7, #352]	@ 0x160
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fa55 	bl	8002de8 <VibeCheckRGB_Init>
	VibeCheckAccel_Init(&vc->accel);
 800293e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002942:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 800294c:	4413      	add	r3, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f848 	bl	80029e4 <VibeCheckAccel_Init>
}
 8002954:	bf00      	nop
 8002956:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800295a:	46bd      	mov	sp, r7
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	bf00      	nop
 8002960:	0801a730 	.word	0x0801a730
 8002964:	08003ec5 	.word	0x08003ec5
 8002968:	0801a738 	.word	0x0801a738
 800296c:	08004cc5 	.word	0x08004cc5
 8002970:	00626772 	.word	0x00626772
 8002974:	0800301d 	.word	0x0800301d
 8002978:	0801a740 	.word	0x0801a740
 800297c:	08002c65 	.word	0x08002c65
 8002980:	08004e21 	.word	0x08004e21
 8002984:	08002d1d 	.word	0x08002d1d

08002988 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002996:	4413      	add	r3, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fdb3 	bl	8004504 <VibeCheckWaveGen_Update>
	VibeCheckAccel_Update(&vc->accel);
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 80029a4:	4413      	add	r3, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f836 	bl	8002a18 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fc14 	bl	80031dc <VibeCheckShell_Update>
 80029b4:	4603      	mov	r3, r0
 80029b6:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f107 020c 	add.w	r2, r7, #12
 80029be:	f107 0110 	add.w	r1, r7, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fda6 	bl	8003514 <VibeCheckShell_GetOutput>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <VibeCheck_Loop+0x54>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	b292      	uxth	r2, r2
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f012 fb0a 	bl	8014ff0 <CDC_Transmit_HS>
	}
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8002a20:	f002 faea 	bl	8004ff8 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b0a      	cmp	r3, #10
 8002a32:	d95e      	bls.n	8002af2 <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d055      	beq.n	8002aea <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a48:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002afc <VibeCheckAccel_Update+0xe4>
 8002a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	f017 f828 	bl	8019aa8 <sinf>
 8002a58:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002afc <VibeCheckAccel_Update+0xe4>
 8002a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002b00 <VibeCheckAccel_Update+0xe8>
 8002a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a76:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7a:	f017 f815 	bl	8019aa8 <sinf>
 8002a7e:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002afc <VibeCheckAccel_Update+0xe4>
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002b04 <VibeCheckAccel_Update+0xec>
 8002a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa0:	f017 f802 	bl	8019aa8 <sinf>
 8002aa4:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 8002aa8:	ed97 1a02 	vldr	s2, [r7, #8]
 8002aac:	edd7 0a03 	vldr	s1, [r7, #12]
 8002ab0:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f825 	bl	8002b08 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 8002abe:	ed97 1a03 	vldr	s2, [r7, #12]
 8002ac2:	edd7 0a04 	vldr	s1, [r7, #16]
 8002ac6:	ed97 0a02 	vldr	s0, [r7, #8]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	2102      	movs	r1, #2
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f81a 	bl	8002b08 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 8002ad4:	ed97 1a04 	vldr	s2, [r7, #16]
 8002ad8:	edd7 0a02 	vldr	s1, [r7, #8]
 8002adc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f80f 	bl	8002b08 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40c90fd0 	.word	0x40c90fd0
 8002b00:	3f860a8b 	.word	0x3f860a8b
 8002b04:	40060a8b 	.word	0x40060a8b

08002b08 <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6178      	str	r0, [r7, #20]
 8002b10:	460b      	mov	r3, r1
 8002b12:	60fa      	str	r2, [r7, #12]
 8002b14:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b18:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b1c:	ed87 1a00 	vstr	s2, [r7]
 8002b20:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	7cfa      	ldrb	r2, [r7, #19]
 8002b36:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3308      	adds	r3, #8
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3310      	adds	r3, #16
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002bac:	2b0a      	cmp	r3, #10
 8002bae:	d104      	bne.n	8002bba <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 8002bb8:	e00c      	b.n	8002bd4 <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002bc0:	2b14      	cmp	r3, #20
 8002bc2:	d107      	bne.n	8002bd4 <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <VibeCheckAccel_GetDataReady+0x3c>
	{
		accel->data_ready = 0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d805      	bhi.n	8002c4a <VibeCheckAccel_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e002      	b.n	8002c50 <VibeCheckAccel_GetDataReady+0x38>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <VibeCheckAccel_GetDataReady+0x3e>
	}
	return 0;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b094      	sub	sp, #80	@ 0x50
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	2240      	movs	r2, #64	@ 0x40
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6838      	ldr	r0, [r7, #0]
 8002c7c:	f000 fcc6 	bl	800360c <VibeCheckShell_GetNextString>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03c      	beq.n	8002d00 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4920      	ldr	r1, [pc, #128]	@ (8002d0c <VibeCheckAccelCMD_Execute+0xa8>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fb3f 	bl	8000310 <strcmp>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d133      	bne.n	8002d00 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	2240      	movs	r2, #64	@ 0x40
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f000 fcb3 	bl	800360c <VibeCheckShell_GetNextString>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d029      	beq.n	8002d00 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	4917      	ldr	r1, [pc, #92]	@ (8002d10 <VibeCheckAccelCMD_Execute+0xac>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fb2c 	bl	8000310 <strcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 8002cbe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cc0:	f7ff ff8e 	bl	8002be0 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002cc4:	4913      	ldr	r1, [pc, #76]	@ (8002d14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f000 fda0 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f000 fe1b 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e015      	b.n	8002d02 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	490f      	ldr	r1, [pc, #60]	@ (8002d18 <VibeCheckAccelCMD_Execute+0xb4>)
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fb17 	bl	8000310 <strcmp>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8002ce8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cea:	f7ff ff87 	bl	8002bfc <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002cee:	4909      	ldr	r1, [pc, #36]	@ (8002d14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002cf0:	6838      	ldr	r0, [r7, #0]
 8002cf2:	f000 fd8b 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f000 fe06 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3750      	adds	r7, #80	@ 0x50
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	0801a748 	.word	0x0801a748
 8002d10:	0801a754 	.word	0x0801a754
 8002d14:	0801a75c 	.word	0x0801a75c
 8002d18:	0801a760 	.word	0x0801a760

08002d1c <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6938      	ldr	r0, [r7, #16]
 8002d32:	f7ff ff71 	bl	8002c18 <VibeCheckAccel_GetDataReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d04e      	beq.n	8002dda <VibeCheckAccelSender_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8002d3c:	4929      	ldr	r1, [pc, #164]	@ (8002de4 <VibeCheckAccelSender_Execute+0xc8>)
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f000 fd64 	bl	800380c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	f000 fdd1 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8002d4a:	210a      	movs	r1, #10
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f000 fd97 	bl	8003880 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002d56:	e038      	b.n	8002dca <VibeCheckAccelSender_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8002d58:	6838      	ldr	r0, [r7, #0]
 8002d5a:	f000 fdc7 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	f000 fd8b 	bl	8003880 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f000 fdbe 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4619      	mov	r1, r3
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f000 fd82 	bl	8003880 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f000 fdb5 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d88:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8c:	6838      	ldr	r0, [r7, #0]
 8002d8e:	f000 fd8f 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f000 fdaa 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f000 fd84 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f000 fd9f 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f000 fd79 	bl	80038b0 <VibeCheckShell_PutOutputFloat>

			data++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	60fb      	str	r3, [r7, #12]
			data_written++;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d9c3      	bls.n	8002d58 <VibeCheckAccelSender_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002dd0:	6838      	ldr	r0, [r7, #0]
 8002dd2:	f000 fd99 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <VibeCheckAccelSender_Execute+0xc0>
	}
	else
	{
		return 0;
 8002dda:	2300      	movs	r3, #0
	}
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	0801a768 	.word	0x0801a768

08002de8 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2202      	movs	r2, #2
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2263      	movs	r2, #99	@ 0x63
 8002e00:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e008      	b.n	8002e20 <VibeCheckRGB_Init+0x38>
		rgb->bit_stream[i] = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	3210      	adds	r2, #16
 8002e14:	2100      	movs	r1, #0
 8002e16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 8002e26:	d3f2      	bcc.n	8002e0e <VibeCheckRGB_Init+0x26>

	/* turn off all LEDs */
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	e00a      	b.n	8002e44 <VibeCheckRGB_Init+0x5c>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2200      	movs	r2, #0
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f80d 	bl	8002e58 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d9f1      	bls.n	8002e2e <VibeCheckRGB_Init+0x46>

	VibeCheckRGB_SendColors(rgb);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f85c 	bl	8002f08 <VibeCheckRGB_SendColors>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	460b      	mov	r3, r1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d901      	bls.n	8002e78 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8002e74:	2308      	movs	r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8002e78:	68f9      	ldr	r1, [r7, #12]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	3304      	adds	r3, #4
 8002e86:	79fa      	ldrb	r2, [r7, #7]
 8002e88:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	440b      	add	r3, r1
 8002e96:	3305      	adds	r3, #5
 8002e98:	79ba      	ldrb	r2, [r7, #6]
 8002e9a:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3306      	adds	r3, #6
 8002eaa:	7e3a      	ldrb	r2, [r7, #24]
 8002eac:	701a      	strb	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d901      	bls.n	8002ece <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	18ca      	adds	r2, r1, r3
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	3204      	adds	r2, #4
 8002ee0:	8811      	ldrh	r1, [r2, #0]
 8002ee2:	7892      	ldrb	r2, [r2, #2]
 8002ee4:	8019      	strh	r1, [r3, #0]
 8002ee6:	709a      	strb	r2, [r3, #2]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	7b3a      	ldrb	r2, [r7, #12]
 8002eec:	f362 0307 	bfi	r3, r2, #0, #8
 8002ef0:	7b7a      	ldrb	r2, [r7, #13]
 8002ef2:	f362 230f 	bfi	r3, r2, #8, #8
 8002ef6:	7bba      	ldrb	r2, [r7, #14]
 8002ef8:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8002f10:	23e0      	movs	r3, #224	@ 0xe0
 8002f12:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e06e      	b.n	8002ff8 <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e01d      	b.n	8002f5c <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3305      	adds	r3, #5
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	fa42 f303 	asr.w	r3, r2, r3
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <VibeCheckRGB_SendColors+0x3e>
 8002f42:	2130      	movs	r1, #48	@ 0x30
 8002f44:	e000      	b.n	8002f48 <VibeCheckRGB_SendColors+0x40>
 8002f46:	2118      	movs	r1, #24
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	3310      	adds	r3, #16
 8002f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1de      	bne.n	8002f20 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8002f62:	2308      	movs	r3, #8
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e01d      	b.n	8002fa4 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	3304      	adds	r3, #4
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	fa42 f303 	asr.w	r3, r2, r3
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <VibeCheckRGB_SendColors+0x86>
 8002f8a:	2130      	movs	r1, #48	@ 0x30
 8002f8c:	e000      	b.n	8002f90 <VibeCheckRGB_SendColors+0x88>
 8002f8e:	2118      	movs	r1, #24
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	3310      	adds	r3, #16
 8002f9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1de      	bne.n	8002f68 <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8002faa:	2308      	movs	r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e01d      	b.n	8002fec <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	fa42 f303 	asr.w	r3, r2, r3
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <VibeCheckRGB_SendColors+0xce>
 8002fd2:	2130      	movs	r1, #48	@ 0x30
 8002fd4:	e000      	b.n	8002fd8 <VibeCheckRGB_SendColors+0xd0>
 8002fd6:	2118      	movs	r1, #24
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	61fa      	str	r2, [r7, #28]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	3310      	adds	r3, #16
 8002fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1de      	bne.n	8002fb0 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d98d      	bls.n	8002f1a <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f103 0220 	add.w	r2, r3, #32
 8003008:	f44f 7326 	mov.w	r3, #664	@ 0x298
 800300c:	2100      	movs	r1, #0
 800300e:	f00b fe9b 	bl	800ed48 <HAL_TIM_PWM_Start_DMA>
}
 8003012:	bf00      	nop
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b09c      	sub	sp, #112	@ 0x70
 8003020:	af02      	add	r7, sp, #8
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800302a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	4619      	mov	r1, r3
 8003032:	6838      	ldr	r0, [r7, #0]
 8003034:	f000 faea 	bl	800360c <VibeCheckShell_GetNextString>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8088 	beq.w	8003150 <VibeCheckRGBCMD_Execute+0x134>
	{
		if (!strcmp(str, "set"))
 8003040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003044:	4945      	ldr	r1, [pc, #276]	@ (800315c <VibeCheckRGBCMD_Execute+0x140>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd f962 	bl	8000310 <strcmp>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d13d      	bne.n	80030ce <VibeCheckRGBCMD_Execute+0xb2>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	4619      	mov	r1, r3
 8003058:	6838      	ldr	r0, [r7, #0]
 800305a:	f000 fb47 	bl	80036ec <VibeCheckShell_GetNextInt>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d075      	beq.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f000 fb3e 	bl	80036ec <VibeCheckShell_GetNextInt>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d06c      	beq.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003076:	f107 0318 	add.w	r3, r7, #24
 800307a:	4619      	mov	r1, r3
 800307c:	6838      	ldr	r0, [r7, #0]
 800307e:	f000 fb35 	bl	80036ec <VibeCheckShell_GetNextInt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d063      	beq.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	6838      	ldr	r0, [r7, #0]
 8003090:	f000 fb2c 	bl	80036ec <VibeCheckShell_GetNextInt>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d05a      	beq.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	4618      	mov	r0, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	460b      	mov	r3, r1
 80030ae:	4601      	mov	r1, r0
 80030b0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80030b2:	f7ff fed1 	bl	8002e58 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 80030b6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80030b8:	f7ff ff26 	bl	8002f08 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 80030bc:	4928      	ldr	r1, [pc, #160]	@ (8003160 <VibeCheckRGBCMD_Execute+0x144>)
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f000 fba4 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80030c4:	6838      	ldr	r0, [r7, #0]
 80030c6:	f000 fc1f 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e041      	b.n	8003152 <VibeCheckRGBCMD_Execute+0x136>
			}
		}
		else if (!strcmp(str, "get"))
 80030ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030d2:	4924      	ldr	r1, [pc, #144]	@ (8003164 <VibeCheckRGBCMD_Execute+0x148>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f91b 	bl	8000310 <strcmp>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d137      	bne.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4619      	mov	r1, r3
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	f000 fb00 	bl	80036ec <VibeCheckShell_GetNextInt>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02e      	beq.n	8003150 <VibeCheckRGBCMD_Execute+0x134>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80030f8:	f7ff fedf 	bl	8002eba <VibeCheckRGB_GetColor>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	733a      	strb	r2, [r7, #12]
 8003102:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003106:	737a      	strb	r2, [r7, #13]
 8003108:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800310c:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 800310e:	4914      	ldr	r1, [pc, #80]	@ (8003160 <VibeCheckRGBCMD_Execute+0x144>)
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f000 fb7b 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f000 fbe8 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	4619      	mov	r1, r3
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	f000 fbad 	bl	8003880 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f000 fbe0 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 800312c:	7b7b      	ldrb	r3, [r7, #13]
 800312e:	4619      	mov	r1, r3
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	f000 fba5 	bl	8003880 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f000 fbd8 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	4619      	mov	r1, r3
 8003140:	6838      	ldr	r0, [r7, #0]
 8003142:	f000 fb9d 	bl	8003880 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f000 fbde 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <VibeCheckRGBCMD_Execute+0x136>
			}
		}
	}

	return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3768      	adds	r7, #104	@ 0x68
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	0801a770 	.word	0x0801a770
 8003160:	0801a774 	.word	0x0801a774
 8003164:	0801a778 	.word	0x0801a778

08003168 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003196:	461a      	mov	r2, r3
 8003198:	2300      	movs	r3, #0
 800319a:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a2:	461a      	mov	r2, r3
 80031a4:	2300      	movs	r3, #0
 80031a6:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ae:	461a      	mov	r2, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031c8:	461a      	mov	r2, r3
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b099      	sub	sp, #100	@ 0x64
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 80031e4:	2300      	movs	r3, #0
 80031e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f2:	d302      	bcc.n	80031fa <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8092 	beq.w	800332a <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 800320c:	e08d      	b.n	800332a <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9f8 	bl	800360c <VibeCheckShell_GetNextString>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04d      	beq.n	80032be <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003226:	e041      	b.n	80032ac <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8003228:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f241 0218 	movw	r2, #4120	@ 0x1018
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	f107 020c 	add.w	r2, r7, #12
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f863 	bl	8000310 <strcmp>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11e      	bne.n	800328e <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	18ca      	adds	r2, r1, r3
 800325e:	f241 035c 	movw	r3, #4188	@ 0x105c
 8003262:	4413      	add	r3, r2
 8003264:	681c      	ldr	r4, [r3, #0]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	47a0      	blx	r4
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11f      	bne.n	80032c6 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8003286:	2303      	movs	r3, #3
 8003288:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 800328c:	e01b      	b.n	80032c6 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003294:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003298:	3b01      	subs	r3, #1
 800329a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800329c:	429a      	cmp	r2, r3
 800329e:	d102      	bne.n	80032a6 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 80032a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a8:	3301      	adds	r3, #1
 80032aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80032b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3b5      	bcc.n	8003228 <VibeCheckShell_Update+0x4c>
 80032bc:	e004      	b.n	80032c8 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80032c4:	e000      	b.n	80032c8 <VibeCheckShell_Update+0xec>
					break;
 80032c6:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80032f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032fc:	d103      	bne.n	8003306 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8003306:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800330a:	4619      	mov	r1, r3
 800330c:	482c      	ldr	r0, [pc, #176]	@ (80033c0 <VibeCheckShell_Update+0x1e4>)
 800330e:	f013 fe70 	bl	8016ff2 <strchr>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d100      	bne.n	800331a <VibeCheckShell_Update+0x13e>
		{
 8003318:	e7d6      	b.n	80032c8 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 800331a:	bf00      	nop
		}


		shell->input_delimiter_count--;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8003322:	1e5a      	subs	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af6c 	bne.w	800320e <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800333a:	e018      	b.n	800336e <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003340:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8003344:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800334c:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	4790      	blx	r2
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8003368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800336a:	3301      	adds	r3, #1
 800336c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003374:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003378:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800337a:	429a      	cmp	r2, r3
 800337c:	d3de      	bcc.n	800333c <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338a:	d302      	bcc.n	8003392 <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8003392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003394:	653b      	str	r3, [r7, #80]	@ 0x50
 8003396:	2300      	movs	r3, #0
 8003398:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800339c:	f362 0307 	bfi	r3, r2, #0, #8
 80033a0:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80033a4:	f362 230f 	bfi	r3, r2, #8, #8
 80033a8:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80033ac:	f362 4317 	bfi	r3, r2, #16, #8
 80033b0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80033b4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3764      	adds	r7, #100	@ 0x64
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	0801a77c 	.word	0x0801a77c

080033c4 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80033c4:	b084      	sub	sp, #16
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	f107 0014 	add.w	r0, r7, #20
 80033d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80033e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80033e2:	d81a      	bhi.n	800341a <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033ee:	1c53      	adds	r3, r2, #1
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80033f6:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	18ca      	adds	r2, r1, r3
 8003406:	f241 0318 	movw	r3, #4120	@ 0x1018
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	f107 0114 	add.w	r1, r7, #20
 8003412:	2248      	movs	r2, #72	@ 0x48
 8003414:	4618      	mov	r0, r3
 8003416:	f013 fe82 	bl	801711e <memcpy>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003424:	b004      	add	sp, #16
 8003426:	4770      	bx	lr

08003428 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800343c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003440:	2b3f      	cmp	r3, #63	@ 0x3f
 8003442:	d814      	bhi.n	800346e <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800344a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8003456:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	1d3a      	adds	r2, r7, #4
 8003466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800346a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e035      	b.n	80034fa <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800349c:	1c59      	adds	r1, r3, #1
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	7811      	ldrb	r1, [r2, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80034b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b6:	d103      	bne.n	80034c0 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	480e      	ldr	r0, [pc, #56]	@ (8003510 <VibeCheckShell_PutInput+0x94>)
 80034d6:	f013 fd8c 	bl	8016ff2 <strchr>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3301      	adds	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d3c5      	bcc.n	800348e <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8003502:	e000      	b.n	8003506 <VibeCheckShell_PutInput+0x8a>
			break;
 8003504:	bf00      	nop
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	0801a77c 	.word	0x0801a77c

08003514 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d101      	bne.n	8003538 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8003534:	2300      	movs	r3, #0
 8003536:	e062      	b.n	80035fe <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	d930      	bls.n	80035ae <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	441a      	add	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	1acb      	subs	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003598:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035a8:	6153      	str	r3, [r2, #20]
		return 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e027      	b.n	80035fe <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	441a      	add	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4413      	add	r3, r2
 80035e4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035ee:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f6:	461a      	mov	r2, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	6153      	str	r3, [r2, #20]
		return 1;
 80035fc:	2301      	movs	r3, #1
	}

}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e057      	b.n	80036ce <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	4619      	mov	r1, r3
 800362e:	482c      	ldr	r0, [pc, #176]	@ (80036e0 <VibeCheckShell_GetNextString+0xd4>)
 8003630:	f013 fcdf 	bl	8016ff2 <strchr>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
				return 1;
 8003646:	2301      	movs	r3, #1
 8003648:	e046      	b.n	80036d8 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 800364a:	2300      	movs	r3, #0
 800364c:	e044      	b.n	80036d8 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003674:	d103      	bne.n	800367e <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	4619      	mov	r1, r3
 8003682:	4818      	ldr	r0, [pc, #96]	@ (80036e4 <VibeCheckShell_GetNextString+0xd8>)
 8003684:	f013 fcb5 	bl	8016ff2 <strchr>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
					return 1;
 800369a:	2301      	movs	r3, #1
 800369c:	e01c      	b.n	80036d8 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
 80036a2:	7cbb      	ldrb	r3, [r7, #18]
 80036a4:	3301      	adds	r3, #1
 80036a6:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <VibeCheckShell_GetNextString+0xdc>)
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d103      	bne.n	80036bc <VibeCheckShell_GetNextString+0xb0>
 80036b4:	7cbb      	ldrb	r3, [r7, #18]
 80036b6:	f103 0220 	add.w	r2, r3, #32
 80036ba:	e000      	b.n	80036be <VibeCheckShell_GetNextString+0xb2>
 80036bc:	7cba      	ldrb	r2, [r7, #18]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1c59      	adds	r1, r3, #1
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
				i++;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3301      	adds	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3a3      	bcc.n	800361e <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	0801a77c 	.word	0x0801a77c
 80036e4:	0801a780 	.word	0x0801a780
 80036e8:	0801ab70 	.word	0x0801ab70

080036ec <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b096      	sub	sp, #88	@ 0x58
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff84 	bl	800360c <VibeCheckShell_GetNextString>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d02f      	beq.n	800376a <VibeCheckShell_GetNextInt+0x7e>
	{
		char valid[] = "-0123456789";
 800370a:	4a1a      	ldr	r2, [pc, #104]	@ (8003774 <VibeCheckShell_GetNextInt+0x88>)
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	ca07      	ldmia	r2, {r0, r1, r2}
 8003712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		for (uint32_t i = 0; i < strlen(str); i++)
 8003716:	2300      	movs	r3, #0
 8003718:	657b      	str	r3, [r7, #84]	@ 0x54
 800371a:	e013      	b.n	8003744 <VibeCheckShell_GetNextInt+0x58>
			if (strchr(valid, str[i]) == NULL)
 800371c:	f107 0214 	add.w	r2, r7, #20
 8003720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f107 0308 	add.w	r3, r7, #8
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f013 fc5f 	bl	8016ff2 <strchr>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <VibeCheckShell_GetNextInt+0x52>
				return 0;  /* next token contains non-numeric characters */
 800373a:	2300      	movs	r3, #0
 800373c:	e016      	b.n	800376c <VibeCheckShell_GetNextInt+0x80>
		for (uint32_t i = 0; i < strlen(str); i++)
 800373e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003740:	3301      	adds	r3, #1
 8003742:	657b      	str	r3, [r7, #84]	@ 0x54
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc fe41 	bl	80003d0 <strlen>
 800374e:	4602      	mov	r2, r0
 8003750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003752:	4293      	cmp	r3, r2
 8003754:	d3e2      	bcc.n	800371c <VibeCheckShell_GetNextInt+0x30>
		*next = atoi(str);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4618      	mov	r0, r3
 800375c:	f012 f89f 	bl	801589e <atoi>
 8003760:	4602      	mov	r2, r0
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
		return 1;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <VibeCheckShell_GetNextInt+0x80>
	}

	return 0;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3758      	adds	r7, #88	@ 0x58
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	0801a784 	.word	0x0801a784

08003778 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b099      	sub	sp, #100	@ 0x64
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	2240      	movs	r2, #64	@ 0x40
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff3e 	bl	800360c <VibeCheckShell_GetNextString>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d033      	beq.n	80037fe <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 8003796:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <VibeCheckShell_GetNextFloat+0x90>)
 8003798:	f107 040c 	add.w	r4, r7, #12
 800379c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800379e:	c407      	stmia	r4!, {r0, r1, r2}
 80037a0:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037a6:	e013      	b.n	80037d0 <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 80037a8:	f107 021c 	add.w	r2, r7, #28
 80037ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f013 fc19 	bl	8016ff2 <strchr>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 80037c6:	2300      	movs	r3, #0
 80037c8:	e01a      	b.n	8003800 <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 80037ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037cc:	3301      	adds	r3, #1
 80037ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fdfb 	bl	80003d0 <strlen>
 80037da:	4602      	mov	r2, r0
 80037dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037de:	4293      	cmp	r3, r2
 80037e0:	d3e2      	bcc.n	80037a8 <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 80037e2:	f107 031c 	add.w	r3, r7, #28
 80037e6:	4618      	mov	r0, r3
 80037e8:	f012 f856 	bl	8015898 <atof>
 80037ec:	eeb0 7b40 	vmov.f64	d7, d0
 80037f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3764      	adds	r7, #100	@ 0x64
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}
 8003808:	0801a790 	.word	0x0801a790

0800380c <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	while (*str)
 8003816:	e027      	b.n	8003868 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	1c53      	adds	r3, r2, #1
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800382e:	6101      	str	r1, [r0, #16]
 8003830:	7811      	ldrb	r1, [r2, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	460a      	mov	r2, r1
 8003838:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	3301      	adds	r3, #1
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800384c:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800385a:	d105      	bne.n	8003868 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6113      	str	r3, [r2, #16]
	while (*str)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1d3      	bne.n	8003818 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b092      	sub	sp, #72	@ 0x48
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4906      	ldr	r1, [pc, #24]	@ (80038ac <VibeCheckShell_PutOutputInt+0x2c>)
 8003892:	4618      	mov	r0, r3
 8003894:	f013 fb42 	bl	8016f1c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ffb4 	bl	800380c <VibeCheckShell_PutOutputString>
}
 80038a4:	bf00      	nop
 80038a6:	3748      	adds	r7, #72	@ 0x48
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	0801a7a0 	.word	0x0801a7a0

080038b0 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b092      	sub	sp, #72	@ 0x48
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 80038bc:	edd7 7a00 	vldr	s15, [r7]
 80038c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038c4:	f107 0008 	add.w	r0, r7, #8
 80038c8:	ec53 2b17 	vmov	r2, r3, d7
 80038cc:	4906      	ldr	r1, [pc, #24]	@ (80038e8 <VibeCheckShell_PutOutputFloat+0x38>)
 80038ce:	f013 fb25 	bl	8016f1c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff97 	bl	800380c <VibeCheckShell_PutOutputString>
}
 80038de:	bf00      	nop
 80038e0:	3748      	adds	r7, #72	@ 0x48
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	0801a7a4 	.word	0x0801a7a4

080038ec <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80038f4:	4903      	ldr	r1, [pc, #12]	@ (8003904 <VibeCheckShell_PutOutputSeparator+0x18>)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff88 	bl	800380c <VibeCheckShell_PutOutputString>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	0801a7a8 	.word	0x0801a7a8

08003908 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8003910:	4903      	ldr	r1, [pc, #12]	@ (8003920 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff7a 	bl	800380c <VibeCheckShell_PutOutputString>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	0801a77c 	.word	0x0801a77c

08003924 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800393a:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003942:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	edd3 7a01 	vldr	s15, [r3, #4]
 800395e:	eeb0 0a67 	vmov.f32	s0, s15
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f84a 	bl	80039fc <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	edd3 7a02 	vldr	s15, [r3, #8]
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f928 	bl	8003bc8 <VibeCheckStrobe_SetExposure>

}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f00a ff41 	bl	800e814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f00b f823 	bl	800e9e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2104      	movs	r1, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00b f81d 	bl	800e9e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2108      	movs	r1, #8
 80039b0:	4618      	mov	r0, r3
 80039b2:	f00b f817 	bl	800e9e4 <HAL_TIM_PWM_Start>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00a ff22 	bl	800e814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f00b f920 	bl	800ec1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2104      	movs	r1, #4
 80039e2:	4618      	mov	r0, r3
 80039e4:	f00b f91a 	bl	800ec1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2108      	movs	r1, #8
 80039ee:	4618      	mov	r0, r3
 80039f0:	f00b f914 	bl	800ec1c <HAL_TIM_PWM_Stop>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8003a08:	edd7 7a00 	vldr	s15, [r7]
 8003a0c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a18:	d502      	bpl.n	8003a20 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003a1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a1e:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8003a20:	edd7 7a00 	vldr	s15, [r7]
 8003a24:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003a90 <VibeCheckStrobe_SetFrequency+0x94>
 8003a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	dd01      	ble.n	8003a36 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8003a32:	4b18      	ldr	r3, [pc, #96]	@ (8003a94 <VibeCheckStrobe_SetFrequency+0x98>)
 8003a34:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8003a36:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003a98 <VibeCheckStrobe_SetFrequency+0x9c>
 8003a3a:	ed97 7a00 	vldr	s14, [r7]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4e:	ee17 2a90 	vmov	r2, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a6a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003a98 <VibeCheckStrobe_SetFrequency+0x9c>
 8003a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6912      	ldr	r2, [r2, #16]
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	447a0000 	.word	0x447a0000
 8003a94:	447a0000 	.word	0x447a0000
 8003a98:	47c35000 	.word	0x47c35000

08003a9c <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	ee07 3a90 	vmov	s15, r3
}
 8003aac:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8003ac8:	edd7 7a00 	vldr	s15, [r7]
 8003acc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003b94 <VibeCheckStrobe_SetPhase+0xd8>
 8003ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	d501      	bpl.n	8003ade <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8003ada:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <VibeCheckStrobe_SetPhase+0xdc>)
 8003adc:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8003ade:	edd7 7a00 	vldr	s15, [r7]
 8003ae2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003b9c <VibeCheckStrobe_SetPhase+0xe0>
 8003ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	dd01      	ble.n	8003af4 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <VibeCheckStrobe_SetPhase+0xe4>)
 8003af2:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003afa:	ed97 7a00 	vldr	s14, [r7]
 8003afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b02:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8003b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ba4 <VibeCheckStrobe_SetPhase+0xe8>
 8003b0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b26:	ee17 3a90 	vmov	r3, s15
 8003b2a:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d029      	beq.n	8003b86 <VibeCheckStrobe_SetPhase+0xca>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d125      	bne.n	8003b86 <VibeCheckStrobe_SetPhase+0xca>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d121      	bne.n	8003b86 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b62:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003ba4 <VibeCheckStrobe_SetPhase+0xe8>
 8003b66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	619a      	str	r2, [r3, #24]
	}
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	c3340000 	.word	0xc3340000
 8003b98:	c3340000 	.word	0xc3340000
 8003b9c:	43340000 	.word	0x43340000
 8003ba0:	43340000 	.word	0x43340000
 8003ba4:	43b40000 	.word	0x43b40000

08003ba8 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	ee07 3a90 	vmov	s15, r3
}
 8003bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8003bd4:	edd7 7a00 	vldr	s15, [r7]
 8003bd8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003c54 <VibeCheckStrobe_SetExposure+0x8c>
 8003bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003c58 <VibeCheckStrobe_SetExposure+0x90>
 8003be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bec:	ee17 3a90 	vmov	r3, s15
 8003bf0:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d904      	bls.n	8003c0a <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c14:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003c58 <VibeCheckStrobe_SetExposure+0x90>
 8003c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003c5c <VibeCheckStrobe_SetExposure+0x94>
 8003c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	3a83126f 	.word	0x3a83126f
 8003c58:	47c35000 	.word	0x47c35000
 8003c5c:	447a0000 	.word	0x447a0000

08003c60 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	ee07 3a90 	vmov	s15, r3
}
 8003c70:	eeb0 0a67 	vmov.f32	s0, s15
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6912      	ldr	r2, [r2, #16]
 8003c98:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6952      	ldr	r2, [r2, #20]
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]
	}
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b096      	sub	sp, #88	@ 0x58
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003cd6:	f107 0318 	add.w	r3, r7, #24
 8003cda:	2240      	movs	r2, #64	@ 0x40
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	f7ff fc94 	bl	800360c <VibeCheckShell_GetNextString>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d065      	beq.n	8003db6 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8003cea:	f107 0318 	add.w	r3, r7, #24
 8003cee:	4934      	ldr	r1, [pc, #208]	@ (8003dc0 <VibeCheckStrobeCMD_Set+0xf4>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fb0d 	bl	8000310 <strcmp>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	6838      	ldr	r0, [r7, #0]
 8003d04:	f7ff fd38 	bl	8003778 <VibeCheckShell_GetNextFloat>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d053      	beq.n	8003db6 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8003d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe70 	bl	80039fc <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003d1c:	4929      	ldr	r1, [pc, #164]	@ (8003dc4 <VibeCheckStrobeCMD_Set+0xf8>)
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	f7ff fd74 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003d24:	6838      	ldr	r0, [r7, #0]
 8003d26:	f7ff fdef 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e044      	b.n	8003db8 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8003d2e:	f107 0318 	add.w	r3, r7, #24
 8003d32:	4925      	ldr	r1, [pc, #148]	@ (8003dc8 <VibeCheckStrobeCMD_Set+0xfc>)
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc faeb 	bl	8000310 <strcmp>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d118      	bne.n	8003d72 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003d40:	f107 0310 	add.w	r3, r7, #16
 8003d44:	4619      	mov	r1, r3
 8003d46:	6838      	ldr	r0, [r7, #0]
 8003d48:	f7ff fd16 	bl	8003778 <VibeCheckShell_GetNextFloat>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d031      	beq.n	8003db6 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8003d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff feae 	bl	8003abc <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003d60:	4918      	ldr	r1, [pc, #96]	@ (8003dc4 <VibeCheckStrobeCMD_Set+0xf8>)
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	f7ff fd52 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f7ff fdcd 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8003d72:	f107 0318 	add.w	r3, r7, #24
 8003d76:	4915      	ldr	r1, [pc, #84]	@ (8003dcc <VibeCheckStrobeCMD_Set+0x100>)
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fac9 	bl	8000310 <strcmp>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f7ff fcf4 	bl	8003778 <VibeCheckShell_GetNextFloat>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8003d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff12 	bl	8003bc8 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003da4:	4907      	ldr	r1, [pc, #28]	@ (8003dc4 <VibeCheckStrobeCMD_Set+0xf8>)
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f7ff fd30 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f7ff fdab 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3758      	adds	r7, #88	@ 0x58
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0801a7ac 	.word	0x0801a7ac
 8003dc4:	0801a7b8 	.word	0x0801a7b8
 8003dc8:	0801a7bc 	.word	0x0801a7bc
 8003dcc:	0801a7c4 	.word	0x0801a7c4

08003dd0 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b092      	sub	sp, #72	@ 0x48
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003dda:	f107 0308 	add.w	r3, r7, #8
 8003dde:	2240      	movs	r2, #64	@ 0x40
 8003de0:	4619      	mov	r1, r3
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f7ff fc12 	bl	800360c <VibeCheckShell_GetNextString>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d05c      	beq.n	8003ea8 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4930      	ldr	r1, [pc, #192]	@ (8003eb4 <VibeCheckStrobeCMD_Get+0xe4>)
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fa8b 	bl	8000310 <strcmp>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d115      	bne.n	8003e2c <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e00:	492d      	ldr	r1, [pc, #180]	@ (8003eb8 <VibeCheckStrobeCMD_Get+0xe8>)
 8003e02:	6838      	ldr	r0, [r7, #0]
 8003e04:	f7ff fd02 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7ff fd6f 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fe44 	bl	8003a9c <VibeCheckStrobe_GetFrequency>
 8003e14:	eef0 7a40 	vmov.f32	s15, s0
 8003e18:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1c:	6838      	ldr	r0, [r7, #0]
 8003e1e:	f7ff fd47 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e22:	6838      	ldr	r0, [r7, #0]
 8003e24:	f7ff fd70 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e03e      	b.n	8003eaa <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	4922      	ldr	r1, [pc, #136]	@ (8003ebc <VibeCheckStrobeCMD_Get+0xec>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fa6c 	bl	8000310 <strcmp>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d115      	bne.n	8003e6a <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e3e:	491e      	ldr	r1, [pc, #120]	@ (8003eb8 <VibeCheckStrobeCMD_Get+0xe8>)
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff fce3 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f7ff fd50 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff feab 	bl	8003ba8 <VibeCheckStrobe_GetPhase>
 8003e52:	eef0 7a40 	vmov.f32	s15, s0
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f7ff fd28 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	f7ff fd51 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e01f      	b.n	8003eaa <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8003e6a:	f107 0308 	add.w	r3, r7, #8
 8003e6e:	4914      	ldr	r1, [pc, #80]	@ (8003ec0 <VibeCheckStrobeCMD_Get+0xf0>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc fa4d 	bl	8000310 <strcmp>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d115      	bne.n	8003ea8 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e7c:	490e      	ldr	r1, [pc, #56]	@ (8003eb8 <VibeCheckStrobeCMD_Get+0xe8>)
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f7ff fcc4 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f7ff fd31 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fee8 	bl	8003c60 <VibeCheckStrobe_GetExposure>
 8003e90:	eef0 7a40 	vmov.f32	s15, s0
 8003e94:	eeb0 0a67 	vmov.f32	s0, s15
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f7ff fd09 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f7ff fd32 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3748      	adds	r7, #72	@ 0x48
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0801a7ac 	.word	0x0801a7ac
 8003eb8:	0801a7b8 	.word	0x0801a7b8
 8003ebc:	0801a7bc 	.word	0x0801a7bc
 8003ec0:	0801a7c4 	.word	0x0801a7c4

08003ec4 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b094      	sub	sp, #80	@ 0x50
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6838      	ldr	r0, [r7, #0]
 8003edc:	f7ff fb96 	bl	800360c <VibeCheckShell_GetNextString>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04d      	beq.n	8003f82 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	4928      	ldr	r1, [pc, #160]	@ (8003f8c <VibeCheckStrobeCMD_Execute+0xc8>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fa0f 	bl	8000310 <strcmp>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8003ef8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003efa:	f7ff fd41 	bl	8003980 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003efe:	4924      	ldr	r1, [pc, #144]	@ (8003f90 <VibeCheckStrobeCMD_Execute+0xcc>)
 8003f00:	6838      	ldr	r0, [r7, #0]
 8003f02:	f7ff fc83 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003f06:	6838      	ldr	r0, [r7, #0]
 8003f08:	f7ff fcfe 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e039      	b.n	8003f84 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	491f      	ldr	r1, [pc, #124]	@ (8003f94 <VibeCheckStrobeCMD_Execute+0xd0>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc f9fa 	bl	8000310 <strcmp>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8003f22:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f24:	f7ff fd4b 	bl	80039be <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003f28:	4919      	ldr	r1, [pc, #100]	@ (8003f90 <VibeCheckStrobeCMD_Execute+0xcc>)
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f7ff fc6e 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f7ff fce9 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e024      	b.n	8003f84 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4916      	ldr	r1, [pc, #88]	@ (8003f98 <VibeCheckStrobeCMD_Execute+0xd4>)
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc f9e5 	bl	8000310 <strcmp>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f50:	f7ff febc 	bl	8003ccc <VibeCheckStrobeCMD_Set>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e012      	b.n	8003f84 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	490e      	ldr	r1, [pc, #56]	@ (8003f9c <VibeCheckStrobeCMD_Execute+0xd8>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc f9d3 	bl	8000310 <strcmp>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f74:	f7ff ff2c 	bl	8003dd0 <VibeCheckStrobeCMD_Get>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3750      	adds	r7, #80	@ 0x50
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	0801a7d0 	.word	0x0801a7d0
 8003f90:	0801a7b8 	.word	0x0801a7b8
 8003f94:	0801a7d8 	.word	0x0801a7d8
 8003f98:	0801a7e0 	.word	0x0801a7e0
 8003f9c:	0801a7e4 	.word	0x0801a7e4

08003fa0 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	ed2d 8b02 	vpush	{d8}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e032      	b.n	800401e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8003fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fbc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fce:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004040 <ComputeSineWave+0xa0>
 8003fd2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8003fec:	f015 fce4 	bl	80199b8 <sin>
 8003ff0:	eeb0 7b40 	vmov.f64	d7, d0
 8003ff4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003ff8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003ffc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004000:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8004038 <ComputeSineWave+0x98>
 8004004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	60fa      	str	r2, [r7, #12]
 800400e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004012:	ee17 2a90 	vmov	r2, s15
 8004016:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d3c8      	bcc.n	8003fb8 <ComputeSineWave+0x18>
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	ecbd 8b02 	vpop	{d8}
 8004032:	bd80      	pop	{r7, pc}
 8004034:	f3af 8000 	nop.w
 8004038:	00000000 	.word	0x00000000
 800403c:	409ffe00 	.word	0x409ffe00
 8004040:	40490fd0 	.word	0x40490fd0

08004044 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e02c      	b.n	80040b2 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	429a      	cmp	r2, r3
 8004060:	d212      	bcs.n	8004088 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8004062:	edd7 7a01 	vldr	s15, [r7, #4]
 8004066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800406a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800406e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80040c8 <ComputeSquareWave+0x84>
 8004072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 2a90 	vmov	r2, s15
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e011      	b.n	80040ac <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8004088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800408c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004094:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80040c8 <ComputeSquareWave+0x84>
 8004098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	60fa      	str	r2, [r7, #12]
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3ce      	bcc.n	8004058 <ComputeSquareWave+0x14>
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	44fff000 	.word	0x44fff000

080040cc <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e052      	b.n	8004186 <ComputeSawWave+0xba>
		if (i < len / 2)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d222      	bcs.n	8004130 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80040f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800410a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004116:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800419c <ComputeSawWave+0xd0>
 800411a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	60fa      	str	r2, [r7, #12]
 8004124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004128:	ee17 2a90 	vmov	r2, s15
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e027      	b.n	8004180 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8004130:	edd7 7a01 	vldr	s15, [r7, #4]
 8004134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800413c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800414e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004152:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004160:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004168:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800419c <ComputeSawWave+0xd0>
 800416c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	60fa      	str	r2, [r7, #12]
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 2a90 	vmov	r2, s15
 800417e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d3a8      	bcc.n	80040e0 <ComputeSawWave+0x14>
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	44fff000 	.word	0x44fff000

080041a0 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e082      	b.n	80042ba <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d221      	bcs.n	8004202 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	ee07 3a90 	vmov	s15, r3
 80041d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041e8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80042d4 <ComputeTriangleWave+0x134>
 80041ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1d1a      	adds	r2, r3, #4
 80041f4:	60fa      	str	r2, [r7, #12]
 80041f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fa:	ee17 2a90 	vmov	r2, s15
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e058      	b.n	80042b4 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	d227      	bcs.n	8004262 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8004212:	edd7 7a01 	vldr	s15, [r7, #4]
 8004216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800421a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800421e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004232:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004240:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004248:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80042d4 <ComputeTriangleWave+0x134>
 800424c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425a:	ee17 2a90 	vmov	r2, s15
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e028      	b.n	80042b4 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8004262:	edd7 7a01 	vldr	s15, [r7, #4]
 8004266:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800426a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800426e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004272:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004294:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80042d4 <ComputeTriangleWave+0x134>
 80042a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1d1a      	adds	r2, r3, #4
 80042a8:	60fa      	str	r2, [r7, #12]
 80042aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ae:	ee17 2a90 	vmov	r2, s15
 80042b2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3301      	adds	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	f4ff af78 	bcc.w	80041b4 <ComputeTriangleWave+0x14>
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	44fff000 	.word	0x44fff000

080042d8 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	e008      	b.n	80042fa <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80042f2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3f2      	bcc.n	80042e8 <ComputeNullWave+0x10>
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432c:	7e1b      	ldrb	r3, [r3, #24]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d844      	bhi.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
 8004332:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004349 	.word	0x08004349
 800433c:	08004363 	.word	0x08004363
 8004340:	0800437d 	.word	0x0800437d
 8004344:	08004397 	.word	0x08004397
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004352:	eeb0 0a67 	vmov.f32	s0, s15
 8004356:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f7ff fe20 	bl	8003fa0 <ComputeSineWave>
			break;
 8004360:	e02c      	b.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004368:	edd3 7a08 	vldr	s15, [r3, #32]
 800436c:	eeb0 0a67 	vmov.f32	s0, s15
 8004370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004374:	6838      	ldr	r0, [r7, #0]
 8004376:	f7ff fe65 	bl	8004044 <ComputeSquareWave>
			break;
 800437a:	e01f      	b.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004382:	edd3 7a08 	vldr	s15, [r3, #32]
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800438e:	6838      	ldr	r0, [r7, #0]
 8004390:	f7ff fe9c 	bl	80040cc <ComputeSawWave>
			break;
 8004394:	e012      	b.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439c:	edd3 7a08 	vldr	s15, [r3, #32]
 80043a0:	eeb0 0a67 	vmov.f32	s0, s15
 80043a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043a8:	6838      	ldr	r0, [r7, #0]
 80043aa:	f7ff fef9 	bl	80041a0 <ComputeTriangleWave>
			break;
 80043ae:	e005      	b.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 80043b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043b4:	6838      	ldr	r0, [r7, #0]
 80043b6:	f7ff ff8f 	bl	80042d8 <ComputeNullWave>
	}
}
 80043ba:	e7ff      	b.n	80043bc <VibeCheckWaveGen_RecomputeWave+0xac>
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e2:	461a      	mov	r2, r3
 80043e4:	4b44      	ldr	r3, [pc, #272]	@ (80044f8 <VibeCheckWaveGen_Init+0x134>)
 80043e6:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b42      	ldr	r3, [pc, #264]	@ (80044fc <VibeCheckWaveGen_Init+0x138>)
 80043f2:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fa:	2200      	movs	r2, #0
 80043fc:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004410:	461a      	mov	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004428:	461a      	mov	r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004458:	461a      	mov	r2, r3
 800445a:	2300      	movs	r3, #0
 800445c:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004464:	461a      	mov	r2, r3
 8004466:	2300      	movs	r3, #0
 8004468:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	220b      	movs	r2, #11
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447a:	edd3 7a07 	vldr	s15, [r3, #28]
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f920 	bl	80046c8 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3308      	adds	r3, #8
 800448c:	4619      	mov	r1, r3
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff ff3e 	bl	8004310 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff37 	bl	8004310 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6858      	ldr	r0, [r3, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f103 0208 	add.w	r2, r3, #8
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044b4:	2100      	movs	r1, #0
 80044b6:	f002 faed 	bl	8006a94 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6858      	ldr	r0, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f103 0208 	add.w	r2, r3, #8
 80044c4:	2300      	movs	r3, #0
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044cc:	2110      	movs	r1, #16
 80044ce:	f002 fae1 	bl	8006a94 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f00a f91e 	bl	800e718 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80044dc:	2200      	movs	r2, #0
 80044de:	2108      	movs	r1, #8
 80044e0:	4807      	ldr	r0, [pc, #28]	@ (8004500 <VibeCheckWaveGen_Init+0x13c>)
 80044e2:	f005 f801 	bl	80094e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2102      	movs	r1, #2
 80044ea:	4805      	ldr	r0, [pc, #20]	@ (8004500 <VibeCheckWaveGen_Init+0x13c>)
 80044ec:	f004 fffc 	bl	80094e8 <HAL_GPIO_WritePin>
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	43dc0000 	.word	0x43dc0000
 80044fc:	3a83126f 	.word	0x3a83126f
 8004500:	58020000 	.word	0x58020000

08004504 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 800450c:	f000 fd74 	bl	8004ff8 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2bfa      	cmp	r3, #250	@ 0xfa
 8004520:	d939      	bls.n	8004596 <VibeCheckWaveGen_Update+0x92>
 8004522:	2104      	movs	r1, #4
 8004524:	4843      	ldr	r0, [pc, #268]	@ (8004634 <VibeCheckWaveGen_Update+0x130>)
 8004526:	f004 ffc7 	bl	80094b8 <HAL_GPIO_ReadPin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d032      	beq.n	8004596 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8004548:	2200      	movs	r2, #0
 800454a:	2108      	movs	r1, #8
 800454c:	4839      	ldr	r0, [pc, #228]	@ (8004634 <VibeCheckWaveGen_Update+0x130>)
 800454e:	f004 ffcb 	bl	80094e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8004552:	2200      	movs	r2, #0
 8004554:	2102      	movs	r1, #2
 8004556:	4837      	ldr	r0, [pc, #220]	@ (8004634 <VibeCheckWaveGen_Update+0x130>)
 8004558:	f004 ffc6 	bl	80094e8 <HAL_GPIO_WritePin>
 800455c:	e00f      	b.n	800457e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004564:	461a      	mov	r2, r3
 8004566:	2301      	movs	r3, #1
 8004568:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 800456a:	2201      	movs	r2, #1
 800456c:	2108      	movs	r1, #8
 800456e:	4831      	ldr	r0, [pc, #196]	@ (8004634 <VibeCheckWaveGen_Update+0x130>)
 8004570:	f004 ffba 	bl	80094e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8004574:	2201      	movs	r2, #1
 8004576:	2102      	movs	r1, #2
 8004578:	482e      	ldr	r0, [pc, #184]	@ (8004634 <VibeCheckWaveGen_Update+0x130>)
 800457a:	f004 ffb5 	bl	80094e8 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004584:	461a      	mov	r2, r3
 8004586:	2301      	movs	r3, #1
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3308      	adds	r3, #8
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff feb1 	bl	8004310 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fe9e 	bl	8004310 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	f241 0338 	movw	r3, #4152	@ 0x1038
 80045e6:	4413      	add	r3, r2
 80045e8:	f107 0208 	add.w	r2, r7, #8
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd f9b6 	bl	8001960 <Sequencer_Update>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d017      	beq.n	800462a <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <VibeCheckWaveGen_Update+0x110>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <VibeCheckWaveGen_Update+0x134>)
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	e005      	b.n	8004620 <VibeCheckWaveGen_Update+0x11c>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a09      	ldr	r2, [pc, #36]	@ (800463c <VibeCheckWaveGen_Update+0x138>)
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	eeb0 0a67 	vmov.f32	s0, s15
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f84f 	bl	80046c8 <VibeCheckWaveGen_SetFrequency>
	}

}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	58020000 	.word	0x58020000
 8004638:	0801aa34 	.word	0x0801aa34
 800463c:	0801a918 	.word	0x0801a918

08004640 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465a:	461a      	mov	r2, r3
 800465c:	2301      	movs	r3, #1
 800465e:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004666:	461a      	mov	r2, r3
 8004668:	2301      	movs	r3, #1
 800466a:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004672:	461a      	mov	r2, r3
 8004674:	2301      	movs	r3, #1
 8004676:	60d3      	str	r3, [r2, #12]
	}

}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046aa:	461a      	mov	r2, r3
 80046ac:	2301      	movs	r3, #1
 80046ae:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	60d3      	str	r3, [r2, #12]
	}
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80046d4:	edd7 7a00 	vldr	s15, [r7]
 80046d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d502      	bpl.n	80046e8 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80046e8:	edd7 7a00 	vldr	s15, [r7]
 80046ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004768 <VibeCheckWaveGen_SetFrequency+0xa0>
 80046f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	dd01      	ble.n	80046fe <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	@ (800476c <VibeCheckWaveGen_SetFrequency+0xa4>)
 80046fc:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80046fe:	edd7 7a00 	vldr	s15, [r7]
 8004702:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004770 <VibeCheckWaveGen_SetFrequency+0xa8>
 8004706:	ee27 7a87 	vmul.f32	s14, s15, s14
 800470a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8004774 <VibeCheckWaveGen_SetFrequency+0xac>
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800471a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471e:	ee17 3a90 	vmov	r3, s15
 8004722:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004736:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8004774 <VibeCheckWaveGen_SetFrequency+0xac>
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004770 <VibeCheckWaveGen_SetFrequency+0xa8>
 8004742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474c:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	46989600 	.word	0x46989600
 800476c:	46989600 	.word	0x46989600
 8004770:	44000000 	.word	0x44000000
 8004774:	4b989680 	.word	0x4b989680

08004778 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	ee07 3a90 	vmov	s15, r3
}
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	d502      	bpl.n	80047ba <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 80047ba:	edd7 7a00 	vldr	s15, [r7]
 80047be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ca:	dd02      	ble.n	80047d2 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80047cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80047d0:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d8:	461a      	mov	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e4:	461a      	mov	r2, r3
 80047e6:	2301      	movs	r3, #1
 80047e8:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f0:	461a      	mov	r2, r3
 80047f2:	2301      	movs	r3, #1
 80047f4:	60d3      	str	r3, [r2, #12]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	ee07 3a90 	vmov	s15, r3
}
 8004816:	eeb0 0a67 	vmov.f32	s0, s15
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004836:	461a      	mov	r2, r3
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004842:	461a      	mov	r2, r3
 8004844:	2301      	movs	r3, #1
 8004846:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484e:	461a      	mov	r2, r3
 8004850:	2301      	movs	r3, #1
 8004852:	60d3      	str	r3, [r2, #12]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800486e:	7e1b      	ldrb	r3, [r3, #24]
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	601a      	str	r2, [r3, #0]
		return 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048d6:	461a      	mov	r2, r3
 80048d8:	2300      	movs	r3, #0
 80048da:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e2:	461a      	mov	r2, r3
 80048e4:	2301      	movs	r3, #1
 80048e6:	6113      	str	r3, [r2, #16]
	}
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490e:	461a      	mov	r2, r3
 8004910:	2300      	movs	r3, #0
 8004912:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800491a:	461a      	mov	r2, r3
 800491c:	2301      	movs	r3, #1
 800491e:	6153      	str	r3, [r2, #20]
	}
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	f241 0338 	movw	r3, #4152	@ 0x1038
 800493a:	4413      	add	r3, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f7fc ffdd 	bl	80018fc <Sequencer_Init>
	if (wavegen->demo_num)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f241 0038 	movw	r0, #4152	@ 0x1038
 8004954:	4418      	add	r0, r3
 8004956:	2301      	movs	r3, #1
 8004958:	221a      	movs	r2, #26
 800495a:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <VibeCheckWaveGen_StartDemo+0x88>)
 800495c:	f7fc ffea 	bl	8001934 <Sequencer_SetSequence>
 8004960:	e008      	b.n	8004974 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f241 0038 	movw	r0, #4152	@ 0x1038
 8004968:	4418      	add	r0, r3
 800496a:	2301      	movs	r3, #1
 800496c:	222d      	movs	r2, #45	@ 0x2d
 800496e:	4912      	ldr	r1, [pc, #72]	@ (80049b8 <VibeCheckWaveGen_StartDemo+0x8c>)
 8004970:	f7fc ffe0 	bl	8001934 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498e:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f241 0438 	movw	r4, #4152	@ 0x1038
 8004996:	441c      	add	r4, r3
 8004998:	f000 fb2e 	bl	8004ff8 <HAL_GetTick>
 800499c:	4603      	mov	r3, r0
 800499e:	4619      	mov	r1, r3
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fd f81f 	bl	80019e4 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fe4a 	bl	8004640 <VibeCheckWaveGen_Start>
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}
 80049b4:	0801a8b0 	.word	0x0801a8b0
 80049b8:	0801a980 	.word	0x0801a980

080049bc <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fe5d 	bl	8004684 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	f241 0338 	movw	r3, #4152	@ 0x1038
 80049d0:	4413      	add	r3, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd f81a 	bl	8001a0c <Sequencer_Stop>
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b094      	sub	sp, #80	@ 0x50
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80049ea:	f107 0310 	add.w	r3, r7, #16
 80049ee:	2240      	movs	r2, #64	@ 0x40
 80049f0:	4619      	mov	r1, r3
 80049f2:	6838      	ldr	r0, [r7, #0]
 80049f4:	f7fe fe0a 	bl	800360c <VibeCheckShell_GetNextString>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b0 	beq.w	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4959      	ldr	r1, [pc, #356]	@ (8004b6c <VibeCheckWaveGenCMD_Set+0x18c>)
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fc82 	bl	8000310 <strcmp>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d119      	bne.n	8004a46 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004a12:	f107 030c 	add.w	r3, r7, #12
 8004a16:	4619      	mov	r1, r3
 8004a18:	6838      	ldr	r0, [r7, #0]
 8004a1a:	f7fe fead 	bl	8003778 <VibeCheckShell_GetNextFloat>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 809d 	beq.w	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8004a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fe4a 	bl	80046c8 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004a34:	494e      	ldr	r1, [pc, #312]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f7fe fee8 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f7fe ff63 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e08d      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8004a46:	f107 0310 	add.w	r3, r7, #16
 8004a4a:	494a      	ldr	r1, [pc, #296]	@ (8004b74 <VibeCheckWaveGenCMD_Set+0x194>)
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fc5f 	bl	8000310 <strcmp>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d118      	bne.n	8004a8a <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6838      	ldr	r0, [r7, #0]
 8004a60:	f7fe fe8a 	bl	8003778 <VibeCheckShell_GetNextFloat>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d07a      	beq.n	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8004a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe91 	bl	800479a <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004a78:	493d      	ldr	r1, [pc, #244]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004a7a:	6838      	ldr	r0, [r7, #0]
 8004a7c:	f7fe fec6 	bl	800380c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004a80:	6838      	ldr	r0, [r7, #0]
 8004a82:	f7fe ff41 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06b      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8004a8a:	f107 0310 	add.w	r3, r7, #16
 8004a8e:	493a      	ldr	r1, [pc, #232]	@ (8004b78 <VibeCheckWaveGenCMD_Set+0x198>)
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fc3d 	bl	8000310 <strcmp>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d161      	bne.n	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f7fe fdb1 	bl	800360c <VibeCheckShell_GetNextString>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d057      	beq.n	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	4931      	ldr	r1, [pc, #196]	@ (8004b7c <VibeCheckWaveGenCMD_Set+0x19c>)
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fb fc2a 	bl	8000310 <strcmp>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fead 	bl	8004824 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004aca:	4929      	ldr	r1, [pc, #164]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004acc:	6838      	ldr	r0, [r7, #0]
 8004ace:	f7fe fe9d 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004ad2:	6838      	ldr	r0, [r7, #0]
 8004ad4:	f7fe ff18 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e042      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8004adc:	f107 0310 	add.w	r3, r7, #16
 8004ae0:	4927      	ldr	r1, [pc, #156]	@ (8004b80 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fb fc14 	bl	8000310 <strcmp>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8004aee:	2101      	movs	r1, #1
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fe97 	bl	8004824 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004af6:	491e      	ldr	r1, [pc, #120]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f7fe fe87 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f7fe ff02 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e02c      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	491d      	ldr	r1, [pc, #116]	@ (8004b84 <VibeCheckWaveGenCMD_Set+0x1a4>)
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fbfe 	bl	8000310 <strcmp>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fe81 	bl	8004824 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b22:	4913      	ldr	r1, [pc, #76]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004b24:	6838      	ldr	r0, [r7, #0]
 8004b26:	f7fe fe71 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b2a:	6838      	ldr	r0, [r7, #0]
 8004b2c:	f7fe feec 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e016      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	4913      	ldr	r1, [pc, #76]	@ (8004b88 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fbe8 	bl	8000310 <strcmp>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8004b46:	2103      	movs	r1, #3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fe6b 	bl	8004824 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b4e:	4908      	ldr	r1, [pc, #32]	@ (8004b70 <VibeCheckWaveGenCMD_Set+0x190>)
 8004b50:	6838      	ldr	r0, [r7, #0]
 8004b52:	f7fe fe5b 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b56:	6838      	ldr	r0, [r7, #0]
 8004b58:	f7fe fed6 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3750      	adds	r7, #80	@ 0x50
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	0801a7e8 	.word	0x0801a7e8
 8004b70:	0801a7f4 	.word	0x0801a7f4
 8004b74:	0801a7f8 	.word	0x0801a7f8
 8004b78:	0801a804 	.word	0x0801a804
 8004b7c:	0801a810 	.word	0x0801a810
 8004b80:	0801a818 	.word	0x0801a818
 8004b84:	0801a820 	.word	0x0801a820
 8004b88:	0801a824 	.word	0x0801a824

08004b8c <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b092      	sub	sp, #72	@ 0x48
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	2240      	movs	r2, #64	@ 0x40
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6838      	ldr	r0, [r7, #0]
 8004ba0:	f7fe fd34 	bl	800360c <VibeCheckShell_GetNextString>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d077      	beq.n	8004c9a <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	493d      	ldr	r1, [pc, #244]	@ (8004ca4 <VibeCheckWaveGenCMD_Get+0x118>)
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fbad 	bl	8000310 <strcmp>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d115      	bne.n	8004be8 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004bbc:	493a      	ldr	r1, [pc, #232]	@ (8004ca8 <VibeCheckWaveGenCMD_Get+0x11c>)
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f7fe fe24 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f7fe fe91 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fdd4 	bl	8004778 <VibeCheckWaveGen_GetFrequency>
 8004bd0:	eef0 7a40 	vmov.f32	s15, s0
 8004bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f7fe fe69 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004bde:	6838      	ldr	r0, [r7, #0]
 8004be0:	f7fe fe92 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e059      	b.n	8004c9c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	492f      	ldr	r1, [pc, #188]	@ (8004cac <VibeCheckWaveGenCMD_Get+0x120>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fb fb8e 	bl	8000310 <strcmp>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d115      	bne.n	8004c26 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004bfa:	492b      	ldr	r1, [pc, #172]	@ (8004ca8 <VibeCheckWaveGenCMD_Get+0x11c>)
 8004bfc:	6838      	ldr	r0, [r7, #0]
 8004bfe:	f7fe fe05 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004c02:	6838      	ldr	r0, [r7, #0]
 8004c04:	f7fe fe72 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fdfa 	bl	8004802 <VibeCheckWaveGen_GetAmplitude>
 8004c0e:	eef0 7a40 	vmov.f32	s15, s0
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	6838      	ldr	r0, [r7, #0]
 8004c18:	f7fe fe4a 	bl	80038b0 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004c1c:	6838      	ldr	r0, [r7, #0]
 8004c1e:	f7fe fe73 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e03a      	b.n	8004c9c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4921      	ldr	r1, [pc, #132]	@ (8004cb0 <VibeCheckWaveGenCMD_Get+0x124>)
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fb fb6f 	bl	8000310 <strcmp>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d130      	bne.n	8004c9a <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004c38:	491b      	ldr	r1, [pc, #108]	@ (8004ca8 <VibeCheckWaveGenCMD_Get+0x11c>)
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f7fe fde6 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f7fe fe53 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe0a 	bl	8004860 <VibeCheckWaveGen_GetWaveform>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d81e      	bhi.n	8004c90 <VibeCheckWaveGenCMD_Get+0x104>
 8004c52:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <VibeCheckWaveGenCMD_Get+0xcc>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c73 	.word	0x08004c73
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c87 	.word	0x08004c87
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8004c68:	4912      	ldr	r1, [pc, #72]	@ (8004cb4 <VibeCheckWaveGenCMD_Get+0x128>)
 8004c6a:	6838      	ldr	r0, [r7, #0]
 8004c6c:	f7fe fdce 	bl	800380c <VibeCheckShell_PutOutputString>
				break;
 8004c70:	e00e      	b.n	8004c90 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8004c72:	4911      	ldr	r1, [pc, #68]	@ (8004cb8 <VibeCheckWaveGenCMD_Get+0x12c>)
 8004c74:	6838      	ldr	r0, [r7, #0]
 8004c76:	f7fe fdc9 	bl	800380c <VibeCheckShell_PutOutputString>
				break;
 8004c7a:	e009      	b.n	8004c90 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8004c7c:	490f      	ldr	r1, [pc, #60]	@ (8004cbc <VibeCheckWaveGenCMD_Get+0x130>)
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f7fe fdc4 	bl	800380c <VibeCheckShell_PutOutputString>
				break;
 8004c84:	e004      	b.n	8004c90 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8004c86:	490e      	ldr	r1, [pc, #56]	@ (8004cc0 <VibeCheckWaveGenCMD_Get+0x134>)
 8004c88:	6838      	ldr	r0, [r7, #0]
 8004c8a:	f7fe fdbf 	bl	800380c <VibeCheckShell_PutOutputString>
				break;
 8004c8e:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8004c90:	6838      	ldr	r0, [r7, #0]
 8004c92:	f7fe fe39 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3748      	adds	r7, #72	@ 0x48
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	0801a7e8 	.word	0x0801a7e8
 8004ca8:	0801a7f4 	.word	0x0801a7f4
 8004cac:	0801a7f8 	.word	0x0801a7f8
 8004cb0:	0801a804 	.word	0x0801a804
 8004cb4:	0801a810 	.word	0x0801a810
 8004cb8:	0801a818 	.word	0x0801a818
 8004cbc:	0801a820 	.word	0x0801a820
 8004cc0:	0801a824 	.word	0x0801a824

08004cc4 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b094      	sub	sp, #80	@ 0x50
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004cd2:	f107 030c 	add.w	r3, r7, #12
 8004cd6:	2240      	movs	r2, #64	@ 0x40
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6838      	ldr	r0, [r7, #0]
 8004cdc:	f7fe fc96 	bl	800360c <VibeCheckShell_GetNextString>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 808b 	beq.w	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8004ce8:	f107 030c 	add.w	r3, r7, #12
 8004cec:	4946      	ldr	r1, [pc, #280]	@ (8004e08 <VibeCheckWaveGenCMD_Execute+0x144>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fb0e 	bl	8000310 <strcmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8004cfa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004cfc:	f7ff fca0 	bl	8004640 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8004d00:	4942      	ldr	r1, [pc, #264]	@ (8004e0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8004d02:	6838      	ldr	r0, [r7, #0]
 8004d04:	f7fe fd82 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f7fe fdfd 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e076      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8004d12:	f107 030c 	add.w	r3, r7, #12
 8004d16:	493e      	ldr	r1, [pc, #248]	@ (8004e10 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb faf9 	bl	8000310 <strcmp>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8004d24:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004d26:	f7ff fcad 	bl	8004684 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8004d2a:	4938      	ldr	r1, [pc, #224]	@ (8004e0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7fe fd6d 	bl	800380c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004d32:	6838      	ldr	r0, [r7, #0]
 8004d34:	f7fe fde8 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e061      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	4934      	ldr	r1, [pc, #208]	@ (8004e14 <VibeCheckWaveGenCMD_Execute+0x150>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fae4 	bl	8000310 <strcmp>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004d52:	f7ff fe45 	bl	80049e0 <VibeCheckWaveGenCMD_Set>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d050      	beq.n	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e04f      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	492c      	ldr	r1, [pc, #176]	@ (8004e18 <VibeCheckWaveGenCMD_Execute+0x154>)
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fad2 	bl	8000310 <strcmp>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004d76:	f7ff ff09 	bl	8004b8c <VibeCheckWaveGenCMD_Get>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03e      	beq.n	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e03d      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8004d84:	f107 030c 	add.w	r3, r7, #12
 8004d88:	4924      	ldr	r1, [pc, #144]	@ (8004e1c <VibeCheckWaveGenCMD_Execute+0x158>)
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb fac0 	bl	8000310 <strcmp>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d133      	bne.n	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	2240      	movs	r2, #64	@ 0x40
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6838      	ldr	r0, [r7, #0]
 8004da0:	f7fe fc34 	bl	800360c <VibeCheckShell_GetNextString>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d029      	beq.n	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	4916      	ldr	r1, [pc, #88]	@ (8004e08 <VibeCheckWaveGenCMD_Execute+0x144>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb faad 	bl	8000310 <strcmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8004dbc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004dbe:	f7ff fdb5 	bl	800492c <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004dc2:	4912      	ldr	r1, [pc, #72]	@ (8004e0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f7fe fd21 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004dca:	6838      	ldr	r0, [r7, #0]
 8004dcc:	f7fe fd9c 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e015      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	490d      	ldr	r1, [pc, #52]	@ (8004e10 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fa98 	bl	8000310 <strcmp>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8004de6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004de8:	f7ff fde8 	bl	80049bc <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004dec:	4907      	ldr	r1, [pc, #28]	@ (8004e0c <VibeCheckWaveGenCMD_Execute+0x148>)
 8004dee:	6838      	ldr	r0, [r7, #0]
 8004df0:	f7fe fd0c 	bl	800380c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004df4:	6838      	ldr	r0, [r7, #0]
 8004df6:	f7fe fd87 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3750      	adds	r7, #80	@ 0x50
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	0801a830 	.word	0x0801a830
 8004e0c:	0801a7f4 	.word	0x0801a7f4
 8004e10:	0801a838 	.word	0x0801a838
 8004e14:	0801a840 	.word	0x0801a840
 8004e18:	0801a844 	.word	0x0801a844
 8004e1c:	0801a848 	.word	0x0801a848

08004e20 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fd21 	bl	800487c <VibeCheckWaveGen_WasMuteButtonPressed>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8004e40:	4911      	ldr	r1, [pc, #68]	@ (8004e88 <VibeCheckWaveGenSender_Execute+0x68>)
 8004e42:	6838      	ldr	r0, [r7, #0]
 8004e44:	f7fe fce2 	bl	800380c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e48:	6838      	ldr	r0, [r7, #0]
 8004e4a:	f7fe fd4f 	bl	80038ec <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 8004e4e:	490f      	ldr	r1, [pc, #60]	@ (8004e8c <VibeCheckWaveGenSender_Execute+0x6c>)
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f7fe fcdb 	bl	800380c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f7fe fd48 	bl	80038ec <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 8004e62:	490b      	ldr	r1, [pc, #44]	@ (8004e90 <VibeCheckWaveGenSender_Execute+0x70>)
 8004e64:	6838      	ldr	r0, [r7, #0]
 8004e66:	f7fe fcd1 	bl	800380c <VibeCheckShell_PutOutputString>
 8004e6a:	e003      	b.n	8004e74 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8004e6c:	4909      	ldr	r1, [pc, #36]	@ (8004e94 <VibeCheckWaveGenSender_Execute+0x74>)
 8004e6e:	6838      	ldr	r0, [r7, #0]
 8004e70:	f7fe fccc 	bl	800380c <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f7fe fd47 	bl	8003908 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	0801a850 	.word	0x0801a850
 8004e8c:	0801a854 	.word	0x0801a854
 8004e90:	0801a85c 	.word	0x0801a85c
 8004e94:	0801a864 	.word	0x0801a864

08004e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e9c:	f7fd fb72 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea0:	480c      	ldr	r0, [pc, #48]	@ (8004ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ea2:	490d      	ldr	r1, [pc, #52]	@ (8004ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ea8:	e002      	b.n	8004eb0 <LoopCopyDataInit>

08004eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eae:	3304      	adds	r3, #4

08004eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004eb4:	d3f9      	bcc.n	8004eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ebc:	e001      	b.n	8004ec2 <LoopFillZerobss>

08004ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec0:	3204      	adds	r2, #4

08004ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ec4:	d3fb      	bcc.n	8004ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ec6:	f012 f903 	bl	80170d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eca:	f7fb fe1f 	bl	8000b0c <main>
  bx  lr
 8004ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ed0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ed8:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8004edc:	0801b268 	.word	0x0801b268
  ldr r2, =_sbss
 8004ee0:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8004ee4:	24006244 	.word	0x24006244

08004ee8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ee8:	e7fe      	b.n	8004ee8 <ADC3_IRQHandler>
	...

08004eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	f001 fcf4 	bl	80068e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ef8:	f006 fcbc 	bl	800b874 <HAL_RCC_GetSysClockFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b15      	ldr	r3, [pc, #84]	@ (8004f54 <HAL_Init+0x68>)
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	4913      	ldr	r1, [pc, #76]	@ (8004f58 <HAL_Init+0x6c>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <HAL_Init+0x68>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f58 <HAL_Init+0x6c>)
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f5c <HAL_Init+0x70>)
 8004f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f30:	4a0b      	ldr	r2, [pc, #44]	@ (8004f60 <HAL_Init+0x74>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f36:	200f      	movs	r0, #15
 8004f38:	f000 f814 	bl	8004f64 <HAL_InitTick>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e002      	b.n	8004f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f46:	f7fc fd6f 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	58024400 	.word	0x58024400
 8004f58:	0801a8a0 	.word	0x0801a8a0
 8004f5c:	24000004 	.word	0x24000004
 8004f60:	24000000 	.word	0x24000000

08004f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004f6c:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <HAL_InitTick+0x60>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e021      	b.n	8004fbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004f78:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <HAL_InitTick+0x64>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <HAL_InitTick+0x60>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 fcd9 	bl	8006946 <HAL_SYSTICK_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e00e      	b.n	8004fbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b0f      	cmp	r3, #15
 8004fa2:	d80a      	bhi.n	8004fba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	f001 fca3 	bl	80068f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fb0:	4a06      	ldr	r2, [pc, #24]	@ (8004fcc <HAL_InitTick+0x68>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	2400000c 	.word	0x2400000c
 8004fc8:	24000000 	.word	0x24000000
 8004fcc:	24000008 	.word	0x24000008

08004fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fd4:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <HAL_IncTick+0x20>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_IncTick+0x24>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <HAL_IncTick+0x24>)
 8004fe2:	6013      	str	r3, [r2, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	2400000c 	.word	0x2400000c
 8004ff4:	24004510 	.word	0x24004510

08004ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	@ (800500c <HAL_GetTick+0x14>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	24004510 	.word	0x24004510

08005010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005018:	f7ff ffee 	bl	8004ff8 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d005      	beq.n	8005036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_Delay+0x44>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005036:	bf00      	nop
 8005038:	f7ff ffde 	bl	8004ff8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d8f7      	bhi.n	8005038 <HAL_Delay+0x28>
  {
  }
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2400000c 	.word	0x2400000c

08005058 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3360      	adds	r3, #96	@ 0x60
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a10      	ldr	r2, [pc, #64]	@ (8005120 <LL_ADC_SetOffset+0x60>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10b      	bne.n	80050fc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80050fa:	e00b      	b.n	8005114 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	430b      	orrs	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	58026000 	.word	0x58026000

08005124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3360      	adds	r3, #96	@ 0x60
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	611a      	str	r2, [r3, #16]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3360      	adds	r3, #96	@ 0x60
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	601a      	str	r2, [r3, #0]
  }
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58026000 	.word	0x58026000

080051c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005208 <LL_ADC_SetOffsetSaturation+0x40>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10e      	bne.n	80051fa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3360      	adds	r3, #96	@ 0x60
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	58026000 	.word	0x58026000

0800520c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a0c      	ldr	r2, [pc, #48]	@ (800524c <LL_ADC_SetOffsetSign+0x40>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10e      	bne.n	800523e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3360      	adds	r3, #96	@ 0x60
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	431a      	orrs	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	58026000 	.word	0x58026000

08005250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3360      	adds	r3, #96	@ 0x60
 8005260:	461a      	mov	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a0c      	ldr	r2, [pc, #48]	@ (80052a0 <LL_ADC_SetOffsetState+0x50>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8005282:	e007      	b.n	8005294 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	431a      	orrs	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	58026000 	.word	0x58026000

080052a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3330      	adds	r3, #48	@ 0x30
 80052b4:	461a      	mov	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	4413      	add	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	211f      	movs	r1, #31
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	43db      	mvns	r3, r3
 80052d6:	401a      	ands	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0e9b      	lsrs	r3, r3, #26
 80052dc:	f003 011f 	and.w	r1, r3, #31
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	431a      	orrs	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3314      	adds	r3, #20
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	0e5b      	lsrs	r3, r3, #25
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	4413      	add	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	0d1b      	lsrs	r3, r3, #20
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2107      	movs	r1, #7
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	401a      	ands	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	0d1b      	lsrs	r3, r3, #20
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a1a      	ldr	r2, [pc, #104]	@ (80053cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d115      	bne.n	8005394 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0318 	and.w	r3, r3, #24
 800537e:	4914      	ldr	r1, [pc, #80]	@ (80053d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005380:	40d9      	lsrs	r1, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	400b      	ands	r3, r1
 8005386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800538a:	431a      	orrs	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005392:	e014      	b.n	80053be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0318 	and.w	r3, r3, #24
 80053aa:	4909      	ldr	r1, [pc, #36]	@ (80053d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80053ac:	40d9      	lsrs	r1, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	400b      	ands	r3, r1
 80053b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b6:	431a      	orrs	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	58026000 	.word	0x58026000
 80053d0:	000fffff 	.word	0x000fffff

080053d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6093      	str	r3, [r2, #8]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	5fffffc0 	.word	0x5fffffc0

080053f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540c:	d101      	bne.n	8005412 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <LL_ADC_EnableInternalRegulator+0x24>)
 800542e:	4013      	ands	r3, r2
 8005430:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	6fffffc0 	.word	0x6fffffc0

08005448 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545c:	d101      	bne.n	8005462 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <LL_ADC_IsEnabled+0x18>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_ADC_IsEnabled+0x1a>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d101      	bne.n	80054ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d101      	bne.n	80054d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b089      	sub	sp, #36	@ 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1ee      	b.n	80058dc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fc faa5 	bl	8001a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff67 	bl	80053f8 <LL_ADC_IsDeepPowerDownEnabled>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff4d 	bl	80053d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ff82 	bl	8005448 <LL_ADC_IsInternalRegulatorEnabled>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d114      	bne.n	8005574 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff ff66 	bl	8005420 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005554:	4b8e      	ldr	r3, [pc, #568]	@ (8005790 <HAL_ADC_Init+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	4a8e      	ldr	r2, [pc, #568]	@ (8005794 <HAL_ADC_Init+0x2b0>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	099b      	lsrs	r3, r3, #6
 8005562:	3301      	adds	r3, #1
 8005564:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005566:	e002      	b.n	800556e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f9      	bne.n	8005568 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff65 	bl	8005448 <LL_ADC_IsInternalRegulatorEnabled>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005588:	f043 0210 	orr.w	r2, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff76 	bl	8005496 <LL_ADC_REG_IsConversionOngoing>
 80055aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8188 	bne.w	80058ca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 8184 	bne.w	80058ca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80055ca:	f043 0202 	orr.w	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff ff4a 	bl	8005470 <LL_ADC_IsEnabled>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d136      	bne.n	8005650 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005798 <HAL_ADC_Init+0x2b4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_ADC_Init+0x112>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6a      	ldr	r2, [pc, #424]	@ (800579c <HAL_ADC_Init+0x2b8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10e      	bne.n	8005614 <HAL_ADC_Init+0x130>
 80055f6:	4868      	ldr	r0, [pc, #416]	@ (8005798 <HAL_ADC_Init+0x2b4>)
 80055f8:	f7ff ff3a 	bl	8005470 <LL_ADC_IsEnabled>
 80055fc:	4604      	mov	r4, r0
 80055fe:	4867      	ldr	r0, [pc, #412]	@ (800579c <HAL_ADC_Init+0x2b8>)
 8005600:	f7ff ff36 	bl	8005470 <LL_ADC_IsEnabled>
 8005604:	4603      	mov	r3, r0
 8005606:	4323      	orrs	r3, r4
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e008      	b.n	8005626 <HAL_ADC_Init+0x142>
 8005614:	4862      	ldr	r0, [pc, #392]	@ (80057a0 <HAL_ADC_Init+0x2bc>)
 8005616:	f7ff ff2b 	bl	8005470 <LL_ADC_IsEnabled>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d012      	beq.n	8005650 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5a      	ldr	r2, [pc, #360]	@ (8005798 <HAL_ADC_Init+0x2b4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_ADC_Init+0x15a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a58      	ldr	r2, [pc, #352]	@ (800579c <HAL_ADC_Init+0x2b8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_ADC_Init+0x15e>
 800563e:	4a59      	ldr	r2, [pc, #356]	@ (80057a4 <HAL_ADC_Init+0x2c0>)
 8005640:	e000      	b.n	8005644 <HAL_ADC_Init+0x160>
 8005642:	4a59      	ldr	r2, [pc, #356]	@ (80057a8 <HAL_ADC_Init+0x2c4>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7ff fd04 	bl	8005058 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a52      	ldr	r2, [pc, #328]	@ (80057a0 <HAL_ADC_Init+0x2bc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d129      	bne.n	80056ae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	7e5b      	ldrb	r3, [r3, #25]
 800565e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005664:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800566a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d013      	beq.n	800569c <HAL_ADC_Init+0x1b8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d00d      	beq.n	8005698 <HAL_ADC_Init+0x1b4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b1c      	cmp	r3, #28
 8005682:	d007      	beq.n	8005694 <HAL_ADC_Init+0x1b0>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b18      	cmp	r3, #24
 800568a:	d101      	bne.n	8005690 <HAL_ADC_Init+0x1ac>
 800568c:	2318      	movs	r3, #24
 800568e:	e006      	b.n	800569e <HAL_ADC_Init+0x1ba>
 8005690:	2300      	movs	r3, #0
 8005692:	e004      	b.n	800569e <HAL_ADC_Init+0x1ba>
 8005694:	2310      	movs	r3, #16
 8005696:	e002      	b.n	800569e <HAL_ADC_Init+0x1ba>
 8005698:	2308      	movs	r3, #8
 800569a:	e000      	b.n	800569e <HAL_ADC_Init+0x1ba>
 800569c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800569e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e00e      	b.n	80056cc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7e5b      	ldrb	r3, [r3, #25]
 80056b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80056b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80056be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d106      	bne.n	80056e4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	3b01      	subs	r3, #1
 80056dc:	045b      	lsls	r3, r3, #17
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a26      	ldr	r2, [pc, #152]	@ (80057a0 <HAL_ADC_Init+0x2bc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d115      	bne.n	8005736 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <HAL_ADC_Init+0x2c8>)
 8005712:	4013      	ands	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	430b      	orrs	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	611a      	str	r2, [r3, #16]
 8005734:	e009      	b.n	800574a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	4b1c      	ldr	r3, [pc, #112]	@ (80057b0 <HAL_ADC_Init+0x2cc>)
 800573e:	4013      	ands	r3, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	430b      	orrs	r3, r1
 8005748:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fea1 	bl	8005496 <LL_ADC_REG_IsConversionOngoing>
 8005754:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff feae 	bl	80054bc <LL_ADC_INJ_IsConversionOngoing>
 8005760:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 808e 	bne.w	8005886 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 808a 	bne.w	8005886 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <HAL_ADC_Init+0x2bc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d11b      	bne.n	80057b4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7e1b      	ldrb	r3, [r3, #24]
 8005780:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005788:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e018      	b.n	80057c2 <HAL_ADC_Init+0x2de>
 8005790:	24000000 	.word	0x24000000
 8005794:	053e2d63 	.word	0x053e2d63
 8005798:	40022000 	.word	0x40022000
 800579c:	40022100 	.word	0x40022100
 80057a0:	58026000 	.word	0x58026000
 80057a4:	40022300 	.word	0x40022300
 80057a8:	58026300 	.word	0x58026300
 80057ac:	fff04007 	.word	0xfff04007
 80057b0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7e1b      	ldrb	r3, [r3, #24]
 80057b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	4b46      	ldr	r3, [pc, #280]	@ (80058e4 <HAL_ADC_Init+0x400>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	69b9      	ldr	r1, [r7, #24]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d137      	bne.n	8005850 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3f      	ldr	r2, [pc, #252]	@ (80058e8 <HAL_ADC_Init+0x404>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d116      	bne.n	800581e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ec <HAL_ADC_Init+0x408>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005802:	4311      	orrs	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005808:	4311      	orrs	r1, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800580e:	430a      	orrs	r2, r1
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	e020      	b.n	8005860 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	4b32      	ldr	r3, [pc, #200]	@ (80058f0 <HAL_ADC_Init+0x40c>)
 8005826:	4013      	ands	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800582c:	3a01      	subs	r2, #1
 800582e:	0411      	lsls	r1, r2, #16
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005834:	4311      	orrs	r1, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005840:	430a      	orrs	r2, r1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	e007      	b.n	8005860 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1b      	ldr	r2, [pc, #108]	@ (80058e8 <HAL_ADC_Init+0x404>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d002      	beq.n	8005886 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fd67 	bl	8006354 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10c      	bne.n	80058a8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	f023 010f 	bic.w	r1, r3, #15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	1e5a      	subs	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80058a6:	e007      	b.n	80058b8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020f 	bic.w	r2, r2, #15
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80058c8:	e007      	b.n	80058da <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ce:	f043 0210 	orr.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058da:	7ffb      	ldrb	r3, [r7, #31]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3724      	adds	r7, #36	@ 0x24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}
 80058e4:	ffffbffc 	.word	0xffffbffc
 80058e8:	58026000 	.word	0x58026000
 80058ec:	fc00f81f 	.word	0xfc00f81f
 80058f0:	fc00f81e 	.word	0xfc00f81e

080058f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b0b9      	sub	sp, #228	@ 0xe4
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800590e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4aab      	ldr	r2, [pc, #684]	@ (8005bc4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005916:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x34>
 8005922:	2302      	movs	r3, #2
 8005924:	f000 bcfe 	b.w	8006324 <HAL_ADC_ConfigChannel+0xa30>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fdae 	bl	8005496 <LL_ADC_REG_IsConversionOngoing>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 84e2 	bne.w	8006306 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	db38      	blt.n	80059bc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a9e      	ldr	r2, [pc, #632]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d033      	beq.n	80059bc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x7e>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	0e9b      	lsrs	r3, r3, #26
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	2201      	movs	r2, #1
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	e01d      	b.n	80059ae <HAL_ADC_ConfigChannel+0xba>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800597e:	fa93 f3a3 	rbit	r3, r3
 8005982:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800598e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8005996:	2320      	movs	r3, #32
 8005998:	e004      	b.n	80059a4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800599a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2201      	movs	r2, #1
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	69d1      	ldr	r1, [r2, #28]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	f7ff fc6b 	bl	80052a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fd5f 	bl	8005496 <LL_ADC_REG_IsConversionOngoing>
 80059d8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fd6b 	bl	80054bc <LL_ADC_INJ_IsConversionOngoing>
 80059e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 8270 	bne.w	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 826b 	bne.w	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7ff fc76 	bl	80052fc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a6c      	ldr	r2, [pc, #432]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10d      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	08db      	lsrs	r3, r3, #3
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a34:	e032      	b.n	8005a9c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a36:	4b65      	ldr	r3, [pc, #404]	@ (8005bcc <HAL_ADC_ConfigChannel+0x2d8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a42:	d10b      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x168>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	e01d      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x1a4>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x18e>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	e00a      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x1a4>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d048      	beq.n	8005b36 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6919      	ldr	r1, [r3, #16]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ab4:	f7ff fb04 	bl	80050c0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a42      	ldr	r2, [pc, #264]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d119      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6919      	ldr	r1, [r3, #16]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7ff fb9c 	bl	800520c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6919      	ldr	r1, [r3, #16]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d102      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x1f8>
 8005ae6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aea:	e000      	b.n	8005aee <HAL_ADC_ConfigChannel+0x1fa>
 8005aec:	2300      	movs	r3, #0
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7ff fb6a 	bl	80051c8 <LL_ADC_SetOffsetSaturation>
 8005af4:	e1ee      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6919      	ldr	r1, [r3, #16]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <HAL_ADC_ConfigChannel+0x21a>
 8005b08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b0c:	e000      	b.n	8005b10 <HAL_ADC_ConfigChannel+0x21c>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	461a      	mov	r2, r3
 8005b12:	f7ff fb37 	bl	8005184 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6919      	ldr	r1, [r3, #16]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	7e1b      	ldrb	r3, [r3, #24]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x238>
 8005b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b2a:	e000      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x23a>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f7ff fb0e 	bl	8005150 <LL_ADC_SetDataRightShift>
 8005b34:	e1ce      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a23      	ldr	r2, [pc, #140]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	f040 8181 	bne.w	8005e44 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff faeb 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x27a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fae0 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005b64:	4603      	mov	r3, r0
 8005b66:	0e9b      	lsrs	r3, r3, #26
 8005b68:	f003 021f 	and.w	r2, r3, #31
 8005b6c:	e01e      	b.n	8005bac <HAL_ADC_ConfigChannel+0x2b8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fad5 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b84:	fa93 f3a3 	rbit	r3, r3
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	e004      	b.n	8005baa <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005ba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x2dc>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	0e9b      	lsrs	r3, r3, #26
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	e01e      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x30e>
 8005bc4:	47ff0000 	.word	0x47ff0000
 8005bc8:	58026000 	.word	0x58026000
 8005bcc:	5c001000 	.word	0x5c001000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005bec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e004      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d106      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fb1e 	bl	8005250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fa82 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_ADC_ConfigChannel+0x34c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fa77 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005c36:	4603      	mov	r3, r0
 8005c38:	0e9b      	lsrs	r3, r3, #26
 8005c3a:	f003 021f 	and.w	r2, r3, #31
 8005c3e:	e01e      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x38a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fa6c 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	e004      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_ADC_ConfigChannel+0x3a2>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	0e9b      	lsrs	r3, r3, #26
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	e018      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x3d4>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8005cba:	2320      	movs	r3, #32
 8005cbc:	e004      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8005cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cc2:	fab3 f383 	clz	r3, r3
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d106      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fabb 	bl	8005250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2102      	movs	r1, #2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fa1f 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x412>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fa14 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	0e9b      	lsrs	r3, r3, #26
 8005d00:	f003 021f 	and.w	r2, r3, #31
 8005d04:	e01e      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x450>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fa09 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005d34:	2320      	movs	r3, #32
 8005d36:	e004      	b.n	8005d42 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3c:	fab3 f383 	clz	r3, r3
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x468>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	0e9b      	lsrs	r3, r3, #26
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	e014      	b.n	8005d86 <HAL_ADC_ConfigChannel+0x492>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d64:	fa93 f3a3 	rbit	r3, r3
 8005d68:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005d78:	2320      	movs	r3, #32
 8005d7a:	e004      	b.n	8005d86 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d106      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2102      	movs	r1, #2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fa5c 	bl	8005250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2103      	movs	r1, #3
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff f9c0 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <HAL_ADC_ConfigChannel+0x4d0>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2103      	movs	r1, #3
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff f9b5 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	0e9b      	lsrs	r3, r3, #26
 8005dbe:	f003 021f 	and.w	r2, r3, #31
 8005dc2:	e017      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x500>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2103      	movs	r1, #3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff f9aa 	bl	8005124 <LL_ADC_GetOffsetChannel>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dd6:	fa93 f3a3 	rbit	r3, r3
 8005dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dde:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005de6:	2320      	movs	r3, #32
 8005de8:	e003      	b.n	8005df2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8005dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dec:	fab3 f383 	clz	r3, r3
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x518>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	0e9b      	lsrs	r3, r3, #26
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	e011      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x53c>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005e24:	2320      	movs	r3, #32
 8005e26:	e003      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d14f      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2103      	movs	r1, #3
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fa07 	bl	8005250 <LL_ADC_SetOffsetState>
 8005e42:	e047      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	069b      	lsls	r3, r3, #26
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d107      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	069b      	lsls	r3, r3, #26
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d107      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e8a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	069b      	lsls	r3, r3, #26
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d107      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005eae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	069b      	lsls	r3, r3, #26
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d107      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fac9 	bl	8005470 <LL_ADC_IsEnabled>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 8219 	bne.w	8006318 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7ff fa2e 	bl	8005354 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4aa1      	ldr	r2, [pc, #644]	@ (8006184 <HAL_ADC_ConfigChannel+0x890>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f040 812e 	bne.w	8006160 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x638>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	0e9b      	lsrs	r3, r3, #26
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	bf94      	ite	ls
 8005f24:	2301      	movls	r3, #1
 8005f26:	2300      	movhi	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e019      	b.n	8005f60 <HAL_ADC_ConfigChannel+0x66c>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f34:	fa93 f3a3 	rbit	r3, r3
 8005f38:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005f44:	2320      	movs	r3, #32
 8005f46:	e003      	b.n	8005f50 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f4a:	fab3 f383 	clz	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	3301      	adds	r3, #1
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2b09      	cmp	r3, #9
 8005f58:	bf94      	ite	ls
 8005f5a:	2301      	movls	r3, #1
 8005f5c:	2300      	movhi	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d079      	beq.n	8006058 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x68c>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	0e9b      	lsrs	r3, r3, #26
 8005f76:	3301      	adds	r3, #1
 8005f78:	069b      	lsls	r3, r3, #26
 8005f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f7e:	e015      	b.n	8005fac <HAL_ADC_ConfigChannel+0x6b8>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f88:	fa93 f3a3 	rbit	r3, r3
 8005f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f90:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005f98:	2320      	movs	r3, #32
 8005f9a:	e003      	b.n	8005fa4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8005f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	069b      	lsls	r3, r3, #26
 8005fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_ADC_ConfigChannel+0x6d8>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	0e9b      	lsrs	r3, r3, #26
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	e017      	b.n	8005ffc <HAL_ADC_ConfigChannel+0x708>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fdc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	e003      	b.n	8005ff0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fea:	fab3 f383 	clz	r3, r3
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	ea42 0103 	orr.w	r1, r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10a      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x72e>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	0e9b      	lsrs	r3, r3, #26
 8006012:	3301      	adds	r3, #1
 8006014:	f003 021f 	and.w	r2, r3, #31
 8006018:	4613      	mov	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4413      	add	r3, r2
 800601e:	051b      	lsls	r3, r3, #20
 8006020:	e018      	b.n	8006054 <HAL_ADC_ConfigChannel+0x760>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602a:	fa93 f3a3 	rbit	r3, r3
 800602e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800603a:	2320      	movs	r3, #32
 800603c:	e003      	b.n	8006046 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3301      	adds	r3, #1
 8006048:	f003 021f 	and.w	r2, r3, #31
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006054:	430b      	orrs	r3, r1
 8006056:	e07e      	b.n	8006156 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006060:	2b00      	cmp	r3, #0
 8006062:	d107      	bne.n	8006074 <HAL_ADC_ConfigChannel+0x780>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	0e9b      	lsrs	r3, r3, #26
 800606a:	3301      	adds	r3, #1
 800606c:	069b      	lsls	r3, r3, #26
 800606e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006072:	e015      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x7ac>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	fa93 f3a3 	rbit	r3, r3
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800608c:	2320      	movs	r3, #32
 800608e:	e003      	b.n	8006098 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8006090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006092:	fab3 f383 	clz	r3, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3301      	adds	r3, #1
 800609a:	069b      	lsls	r3, r3, #26
 800609c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x7cc>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0e9b      	lsrs	r3, r3, #26
 80060b2:	3301      	adds	r3, #1
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	e017      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x7fc>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa93 f3a3 	rbit	r3, r3
 80060cc:	61bb      	str	r3, [r7, #24]
  return result;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80060d8:	2320      	movs	r3, #32
 80060da:	e003      	b.n	80060e4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	fab3 f383 	clz	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	3301      	adds	r3, #1
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2101      	movs	r1, #1
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	ea42 0103 	orr.w	r1, r2, r3
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10d      	bne.n	800611c <HAL_ADC_ConfigChannel+0x828>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	0e9b      	lsrs	r3, r3, #26
 8006106:	3301      	adds	r3, #1
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	4613      	mov	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	3b1e      	subs	r3, #30
 8006114:	051b      	lsls	r3, r3, #20
 8006116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800611a:	e01b      	b.n	8006154 <HAL_ADC_ConfigChannel+0x860>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	fa93 f3a3 	rbit	r3, r3
 8006128:	60fb      	str	r3, [r7, #12]
  return result;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8006134:	2320      	movs	r3, #32
 8006136:	e003      	b.n	8006140 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	3301      	adds	r3, #1
 8006142:	f003 021f 	and.w	r2, r3, #31
 8006146:	4613      	mov	r3, r2
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	4413      	add	r3, r2
 800614c:	3b1e      	subs	r3, #30
 800614e:	051b      	lsls	r3, r3, #20
 8006150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006154:	430b      	orrs	r3, r1
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	6892      	ldr	r2, [r2, #8]
 800615a:	4619      	mov	r1, r3
 800615c:	f7ff f8ce 	bl	80052fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f280 80d7 	bge.w	8006318 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a06      	ldr	r2, [pc, #24]	@ (8006188 <HAL_ADC_ConfigChannel+0x894>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_ADC_ConfigChannel+0x88a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a04      	ldr	r2, [pc, #16]	@ (800618c <HAL_ADC_ConfigChannel+0x898>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10a      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x8a0>
 800617e:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <HAL_ADC_ConfigChannel+0x89c>)
 8006180:	e009      	b.n	8006196 <HAL_ADC_ConfigChannel+0x8a2>
 8006182:	bf00      	nop
 8006184:	47ff0000 	.word	0x47ff0000
 8006188:	40022000 	.word	0x40022000
 800618c:	40022100 	.word	0x40022100
 8006190:	40022300 	.word	0x40022300
 8006194:	4b65      	ldr	r3, [pc, #404]	@ (800632c <HAL_ADC_ConfigChannel+0xa38>)
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe ff84 	bl	80050a4 <LL_ADC_GetCommonPathInternalCh>
 800619c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a62      	ldr	r2, [pc, #392]	@ (8006330 <HAL_ADC_ConfigChannel+0xa3c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_ADC_ConfigChannel+0x8c0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a61      	ldr	r2, [pc, #388]	@ (8006334 <HAL_ADC_ConfigChannel+0xa40>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10e      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x8de>
 80061b4:	485e      	ldr	r0, [pc, #376]	@ (8006330 <HAL_ADC_ConfigChannel+0xa3c>)
 80061b6:	f7ff f95b 	bl	8005470 <LL_ADC_IsEnabled>
 80061ba:	4604      	mov	r4, r0
 80061bc:	485d      	ldr	r0, [pc, #372]	@ (8006334 <HAL_ADC_ConfigChannel+0xa40>)
 80061be:	f7ff f957 	bl	8005470 <LL_ADC_IsEnabled>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4323      	orrs	r3, r4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bf0c      	ite	eq
 80061ca:	2301      	moveq	r3, #1
 80061cc:	2300      	movne	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	e008      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x8f0>
 80061d2:	4859      	ldr	r0, [pc, #356]	@ (8006338 <HAL_ADC_ConfigChannel+0xa44>)
 80061d4:	f7ff f94c 	bl	8005470 <LL_ADC_IsEnabled>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8084 	beq.w	80062f2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a53      	ldr	r2, [pc, #332]	@ (800633c <HAL_ADC_ConfigChannel+0xa48>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d132      	bne.n	800625a <HAL_ADC_ConfigChannel+0x966>
 80061f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d12c      	bne.n	800625a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a4c      	ldr	r2, [pc, #304]	@ (8006338 <HAL_ADC_ConfigChannel+0xa44>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f040 8086 	bne.w	8006318 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a47      	ldr	r2, [pc, #284]	@ (8006330 <HAL_ADC_ConfigChannel+0xa3c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_ADC_ConfigChannel+0x92c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a46      	ldr	r2, [pc, #280]	@ (8006334 <HAL_ADC_ConfigChannel+0xa40>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x930>
 8006220:	4a47      	ldr	r2, [pc, #284]	@ (8006340 <HAL_ADC_ConfigChannel+0xa4c>)
 8006222:	e000      	b.n	8006226 <HAL_ADC_ConfigChannel+0x932>
 8006224:	4a41      	ldr	r2, [pc, #260]	@ (800632c <HAL_ADC_ConfigChannel+0xa38>)
 8006226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800622a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe ff24 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006236:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <HAL_ADC_ConfigChannel+0xa50>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	099b      	lsrs	r3, r3, #6
 800623c:	4a42      	ldr	r2, [pc, #264]	@ (8006348 <HAL_ADC_ConfigChannel+0xa54>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	3301      	adds	r3, #1
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800624a:	e002      	b.n	8006252 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	3b01      	subs	r3, #1
 8006250:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f9      	bne.n	800624c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006258:	e05e      	b.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3b      	ldr	r2, [pc, #236]	@ (800634c <HAL_ADC_ConfigChannel+0xa58>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d120      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x9b2>
 8006264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a30      	ldr	r2, [pc, #192]	@ (8006338 <HAL_ADC_ConfigChannel+0xa44>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d14e      	bne.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2c      	ldr	r2, [pc, #176]	@ (8006330 <HAL_ADC_ConfigChannel+0xa3c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_ADC_ConfigChannel+0x99a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2a      	ldr	r2, [pc, #168]	@ (8006334 <HAL_ADC_ConfigChannel+0xa40>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d101      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x99e>
 800628e:	4a2c      	ldr	r2, [pc, #176]	@ (8006340 <HAL_ADC_ConfigChannel+0xa4c>)
 8006290:	e000      	b.n	8006294 <HAL_ADC_ConfigChannel+0x9a0>
 8006292:	4a26      	ldr	r2, [pc, #152]	@ (800632c <HAL_ADC_ConfigChannel+0xa38>)
 8006294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006298:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe feed 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062a4:	e038      	b.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a29      	ldr	r2, [pc, #164]	@ (8006350 <HAL_ADC_ConfigChannel+0xa5c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d133      	bne.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
 80062b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d12d      	bne.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <HAL_ADC_ConfigChannel+0xa44>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d128      	bne.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a19      	ldr	r2, [pc, #100]	@ (8006330 <HAL_ADC_ConfigChannel+0xa3c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_ADC_ConfigChannel+0x9e6>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <HAL_ADC_ConfigChannel+0xa40>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d101      	bne.n	80062de <HAL_ADC_ConfigChannel+0x9ea>
 80062da:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <HAL_ADC_ConfigChannel+0xa4c>)
 80062dc:	e000      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x9ec>
 80062de:	4a13      	ldr	r2, [pc, #76]	@ (800632c <HAL_ADC_ConfigChannel+0xa38>)
 80062e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fe fec7 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
 80062f0:	e012      	b.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006304:	e008      	b.n	8006318 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006320:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006324:	4618      	mov	r0, r3
 8006326:	37e4      	adds	r7, #228	@ 0xe4
 8006328:	46bd      	mov	sp, r7
 800632a:	bd90      	pop	{r4, r7, pc}
 800632c:	58026300 	.word	0x58026300
 8006330:	40022000 	.word	0x40022000
 8006334:	40022100 	.word	0x40022100
 8006338:	58026000 	.word	0x58026000
 800633c:	c7520000 	.word	0xc7520000
 8006340:	40022300 	.word	0x40022300
 8006344:	24000000 	.word	0x24000000
 8006348:	053e2d63 	.word	0x053e2d63
 800634c:	c3210000 	.word	0xc3210000
 8006350:	cb840000 	.word	0xcb840000

08006354 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a6c      	ldr	r2, [pc, #432]	@ (8006514 <ADC_ConfigureBoostMode+0x1c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <ADC_ConfigureBoostMode+0x1c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6b      	ldr	r2, [pc, #428]	@ (8006518 <ADC_ConfigureBoostMode+0x1c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d109      	bne.n	8006384 <ADC_ConfigureBoostMode+0x30>
 8006370:	4b6a      	ldr	r3, [pc, #424]	@ (800651c <ADC_ConfigureBoostMode+0x1c8>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e008      	b.n	8006396 <ADC_ConfigureBoostMode+0x42>
 8006384:	4b66      	ldr	r3, [pc, #408]	@ (8006520 <ADC_ConfigureBoostMode+0x1cc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800638c:	2b00      	cmp	r3, #0
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01c      	beq.n	80063d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800639a:	f005 fbe5 	bl	800bb68 <HAL_RCC_GetHCLKFreq>
 800639e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063a8:	d010      	beq.n	80063cc <ADC_ConfigureBoostMode+0x78>
 80063aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063ae:	d873      	bhi.n	8006498 <ADC_ConfigureBoostMode+0x144>
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d002      	beq.n	80063bc <ADC_ConfigureBoostMode+0x68>
 80063b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ba:	d16d      	bne.n	8006498 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	60fb      	str	r3, [r7, #12]
        break;
 80063ca:	e068      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	60fb      	str	r3, [r7, #12]
        break;
 80063d2:	e064      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80063d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	f006 fdc0 	bl	800cf60 <HAL_RCCEx_GetPeriphCLKFreq>
 80063e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063ea:	d051      	beq.n	8006490 <ADC_ConfigureBoostMode+0x13c>
 80063ec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063f0:	d854      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 80063f2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063f6:	d047      	beq.n	8006488 <ADC_ConfigureBoostMode+0x134>
 80063f8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063fc:	d84e      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 80063fe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006402:	d03d      	beq.n	8006480 <ADC_ConfigureBoostMode+0x12c>
 8006404:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006408:	d848      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 800640a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800640e:	d033      	beq.n	8006478 <ADC_ConfigureBoostMode+0x124>
 8006410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006414:	d842      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 8006416:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800641a:	d029      	beq.n	8006470 <ADC_ConfigureBoostMode+0x11c>
 800641c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006420:	d83c      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 8006422:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006426:	d01a      	beq.n	800645e <ADC_ConfigureBoostMode+0x10a>
 8006428:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800642c:	d836      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 800642e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006432:	d014      	beq.n	800645e <ADC_ConfigureBoostMode+0x10a>
 8006434:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006438:	d830      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643e:	d00e      	beq.n	800645e <ADC_ConfigureBoostMode+0x10a>
 8006440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006444:	d82a      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 8006446:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800644a:	d008      	beq.n	800645e <ADC_ConfigureBoostMode+0x10a>
 800644c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006450:	d824      	bhi.n	800649c <ADC_ConfigureBoostMode+0x148>
 8006452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006456:	d002      	beq.n	800645e <ADC_ConfigureBoostMode+0x10a>
 8006458:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800645c:	d11e      	bne.n	800649c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	0c9b      	lsrs	r3, r3, #18
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	60fb      	str	r3, [r7, #12]
        break;
 800646e:	e016      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	60fb      	str	r3, [r7, #12]
        break;
 8006476:	e012      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	60fb      	str	r3, [r7, #12]
        break;
 800647e:	e00e      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	60fb      	str	r3, [r7, #12]
        break;
 8006486:	e00a      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	09db      	lsrs	r3, r3, #7
 800648c:	60fb      	str	r3, [r7, #12]
        break;
 800648e:	e006      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	60fb      	str	r3, [r7, #12]
        break;
 8006496:	e002      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800649c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006524 <ADC_ConfigureBoostMode+0x1d0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d808      	bhi.n	80064be <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80064bc:	e025      	b.n	800650a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <ADC_ConfigureBoostMode+0x1d4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d80a      	bhi.n	80064dc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d8:	609a      	str	r2, [r3, #8]
}
 80064da:	e016      	b.n	800650a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4a13      	ldr	r2, [pc, #76]	@ (800652c <ADC_ConfigureBoostMode+0x1d8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d80a      	bhi.n	80064fa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	e007      	b.n	800650a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006508:	609a      	str	r2, [r3, #8]
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40022000 	.word	0x40022000
 8006518:	40022100 	.word	0x40022100
 800651c:	40022300 	.word	0x40022300
 8006520:	58026300 	.word	0x58026300
 8006524:	005f5e10 	.word	0x005f5e10
 8006528:	00bebc20 	.word	0x00bebc20
 800652c:	017d7840 	.word	0x017d7840

08006530 <LL_ADC_IsEnabled>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <LL_ADC_IsEnabled+0x18>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <LL_ADC_IsEnabled+0x1a>
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <LL_ADC_REG_IsConversionOngoing>:
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b04      	cmp	r3, #4
 8006568:	d101      	bne.n	800656e <LL_ADC_REG_IsConversionOngoing+0x18>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b0a3      	sub	sp, #140	@ 0x8c
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006596:	2302      	movs	r3, #2
 8006598:	e0c1      	b.n	800671e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d102      	bne.n	80065ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80065b4:	4b5d      	ldr	r3, [pc, #372]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e001      	b.n	80065be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0a0      	b.n	800671e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ffb9 	bl	8006556 <LL_ADC_REG_IsConversionOngoing>
 80065e4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ffb2 	bl	8006556 <LL_ADC_REG_IsConversionOngoing>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8081 	bne.w	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80065fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d17c      	bne.n	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a48      	ldr	r2, [pc, #288]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a46      	ldr	r2, [pc, #280]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006616:	4b46      	ldr	r3, [pc, #280]	@ (8006730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006618:	e000      	b.n	800661c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800661a:	4b46      	ldr	r3, [pc, #280]	@ (8006734 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800661c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d039      	beq.n	800669a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	431a      	orrs	r2, r3
 8006634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006636:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3a      	ldr	r2, [pc, #232]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a39      	ldr	r2, [pc, #228]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10e      	bne.n	800666a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800664c:	4836      	ldr	r0, [pc, #216]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800664e:	f7ff ff6f 	bl	8006530 <LL_ADC_IsEnabled>
 8006652:	4604      	mov	r4, r0
 8006654:	4835      	ldr	r0, [pc, #212]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006656:	f7ff ff6b 	bl	8006530 <LL_ADC_IsEnabled>
 800665a:	4603      	mov	r3, r0
 800665c:	4323      	orrs	r3, r4
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	e008      	b.n	800667c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800666a:	4833      	ldr	r0, [pc, #204]	@ (8006738 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800666c:	f7ff ff60 	bl	8006530 <LL_ADC_IsEnabled>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d047      	beq.n	8006710 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006680:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	4b2d      	ldr	r3, [pc, #180]	@ (800673c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006686:	4013      	ands	r3, r2
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	6811      	ldr	r1, [r2, #0]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	430a      	orrs	r2, r1
 8006692:	431a      	orrs	r2, r3
 8006694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006696:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006698:	e03a      	b.n	8006710 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800669a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1d      	ldr	r2, [pc, #116]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d10e      	bne.n	80066d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80066ba:	481b      	ldr	r0, [pc, #108]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066bc:	f7ff ff38 	bl	8006530 <LL_ADC_IsEnabled>
 80066c0:	4604      	mov	r4, r0
 80066c2:	481a      	ldr	r0, [pc, #104]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066c4:	f7ff ff34 	bl	8006530 <LL_ADC_IsEnabled>
 80066c8:	4603      	mov	r3, r0
 80066ca:	4323      	orrs	r3, r4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e008      	b.n	80066ea <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80066d8:	4817      	ldr	r0, [pc, #92]	@ (8006738 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80066da:	f7ff ff29 	bl	8006530 <LL_ADC_IsEnabled>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bf0c      	ite	eq
 80066e4:	2301      	moveq	r3, #1
 80066e6:	2300      	movne	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80066ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	4b12      	ldr	r3, [pc, #72]	@ (800673c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80066f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066fa:	e009      	b.n	8006710 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800670e:	e000      	b.n	8006712 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006710:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800671a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800671e:	4618      	mov	r0, r3
 8006720:	378c      	adds	r7, #140	@ 0x8c
 8006722:	46bd      	mov	sp, r7
 8006724:	bd90      	pop	{r4, r7, pc}
 8006726:	bf00      	nop
 8006728:	40022000 	.word	0x40022000
 800672c:	40022100 	.word	0x40022100
 8006730:	40022300 	.word	0x40022300
 8006734:	58026300 	.word	0x58026300
 8006738:	58026000 	.word	0x58026000
 800673c:	fffff0e0 	.word	0xfffff0e0

08006740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <__NVIC_SetPriorityGrouping+0x40>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800675c:	4013      	ands	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <__NVIC_SetPriorityGrouping+0x44>)
 800676a:	4313      	orrs	r3, r2
 800676c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800676e:	4a04      	ldr	r2, [pc, #16]	@ (8006780 <__NVIC_SetPriorityGrouping+0x40>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	60d3      	str	r3, [r2, #12]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	e000ed00 	.word	0xe000ed00
 8006784:	05fa0000 	.word	0x05fa0000

08006788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800678c:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <__NVIC_GetPriorityGrouping+0x18>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	f003 0307 	and.w	r3, r3, #7
}
 8006796:	4618      	mov	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	db0b      	blt.n	80067ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	f003 021f 	and.w	r2, r3, #31
 80067bc:	4907      	ldr	r1, [pc, #28]	@ (80067dc <__NVIC_EnableIRQ+0x38>)
 80067be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	2001      	movs	r0, #1
 80067c6:	fa00 f202 	lsl.w	r2, r0, r2
 80067ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	e000e100 	.word	0xe000e100

080067e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	6039      	str	r1, [r7, #0]
 80067ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	db0a      	blt.n	800680a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	490c      	ldr	r1, [pc, #48]	@ (800682c <__NVIC_SetPriority+0x4c>)
 80067fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067fe:	0112      	lsls	r2, r2, #4
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	440b      	add	r3, r1
 8006804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006808:	e00a      	b.n	8006820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	4908      	ldr	r1, [pc, #32]	@ (8006830 <__NVIC_SetPriority+0x50>)
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	3b04      	subs	r3, #4
 8006818:	0112      	lsls	r2, r2, #4
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	440b      	add	r3, r1
 800681e:	761a      	strb	r2, [r3, #24]
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	e000e100 	.word	0xe000e100
 8006830:	e000ed00 	.word	0xe000ed00

08006834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006834:	b480      	push	{r7}
 8006836:	b089      	sub	sp, #36	@ 0x24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f1c3 0307 	rsb	r3, r3, #7
 800684e:	2b04      	cmp	r3, #4
 8006850:	bf28      	it	cs
 8006852:	2304      	movcs	r3, #4
 8006854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3304      	adds	r3, #4
 800685a:	2b06      	cmp	r3, #6
 800685c:	d902      	bls.n	8006864 <NVIC_EncodePriority+0x30>
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3b03      	subs	r3, #3
 8006862:	e000      	b.n	8006866 <NVIC_EncodePriority+0x32>
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43da      	mvns	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	401a      	ands	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800687c:	f04f 31ff 	mov.w	r1, #4294967295
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	fa01 f303 	lsl.w	r3, r1, r3
 8006886:	43d9      	mvns	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800688c:	4313      	orrs	r3, r2
         );
}
 800688e:	4618      	mov	r0, r3
 8006890:	3724      	adds	r7, #36	@ 0x24
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068ac:	d301      	bcc.n	80068b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068ae:	2301      	movs	r3, #1
 80068b0:	e00f      	b.n	80068d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <SysTick_Config+0x40>)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ba:	210f      	movs	r1, #15
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	f7ff ff8e 	bl	80067e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <SysTick_Config+0x40>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ca:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <SysTick_Config+0x40>)
 80068cc:	2207      	movs	r2, #7
 80068ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	e000e010 	.word	0xe000e010

080068e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff29 	bl	8006740 <__NVIC_SetPriorityGrouping>
}
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b086      	sub	sp, #24
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4603      	mov	r3, r0
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
 8006902:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006904:	f7ff ff40 	bl	8006788 <__NVIC_GetPriorityGrouping>
 8006908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff ff90 	bl	8006834 <NVIC_EncodePriority>
 8006914:	4602      	mov	r2, r0
 8006916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff ff5f 	bl	80067e0 <__NVIC_SetPriority>
}
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ff33 	bl	80067a4 <__NVIC_EnableIRQ>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ffa4 	bl	800689c <SysTick_Config>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006964:	f3bf 8f5f 	dmb	sy
}
 8006968:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800696a:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <HAL_MPU_Disable+0x28>)
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	4a06      	ldr	r2, [pc, #24]	@ (8006988 <HAL_MPU_Disable+0x28>)
 8006970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006974:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006976:	4b05      	ldr	r3, [pc, #20]	@ (800698c <HAL_MPU_Disable+0x2c>)
 8006978:	2200      	movs	r2, #0
 800697a:	605a      	str	r2, [r3, #4]
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000ed00 	.word	0xe000ed00
 800698c:	e000ed90 	.word	0xe000ed90

08006990 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006998:	4a0b      	ldr	r2, [pc, #44]	@ (80069c8 <HAL_MPU_Enable+0x38>)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <HAL_MPU_Enable+0x3c>)
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	4a09      	ldr	r2, [pc, #36]	@ (80069cc <HAL_MPU_Enable+0x3c>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80069ae:	f3bf 8f4f 	dsb	sy
}
 80069b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069b4:	f3bf 8f6f 	isb	sy
}
 80069b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	e000ed90 	.word	0xe000ed90
 80069cc:	e000ed00 	.word	0xe000ed00

080069d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	785a      	ldrb	r2, [r3, #1]
 80069dc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a4c <HAL_MPU_ConfigRegion+0x7c>)
 80069de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80069e0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <HAL_MPU_ConfigRegion+0x7c>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_MPU_ConfigRegion+0x7c>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <HAL_MPU_ConfigRegion+0x7c>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7b1b      	ldrb	r3, [r3, #12]
 80069f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7adb      	ldrb	r3, [r3, #11]
 80069fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7a9b      	ldrb	r3, [r3, #10]
 8006a06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006a08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7b5b      	ldrb	r3, [r3, #13]
 8006a0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006a10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7b9b      	ldrb	r3, [r3, #14]
 8006a16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006a18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	7bdb      	ldrb	r3, [r3, #15]
 8006a1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7a5b      	ldrb	r3, [r3, #9]
 8006a26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7a1b      	ldrb	r3, [r3, #8]
 8006a2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	7812      	ldrb	r2, [r2, #0]
 8006a36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a38:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a3c:	6113      	str	r3, [r2, #16]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	e000ed90 	.word	0xe000ed90

08006a50 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e014      	b.n	8006a8c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fb f880 	bl	8001b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0a2      	b.n	8006bf2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	795b      	ldrb	r3, [r3, #5]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_DAC_Start_DMA+0x24>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e09c      	b.n	8006bf2 <HAL_DAC_Start_DMA+0x15e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d129      	bne.n	8006b1e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	4a4b      	ldr	r2, [pc, #300]	@ (8006bfc <HAL_DAC_Start_DMA+0x168>)
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <HAL_DAC_Start_DMA+0x16c>)
 8006ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	4a49      	ldr	r2, [pc, #292]	@ (8006c04 <HAL_DAC_Start_DMA+0x170>)
 8006ae0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006af0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_DAC_Start_DMA+0x6c>
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d005      	beq.n	8006b0a <HAL_DAC_Start_DMA+0x76>
 8006afe:	e009      	b.n	8006b14 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	613b      	str	r3, [r7, #16]
        break;
 8006b08:	e033      	b.n	8006b72 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	613b      	str	r3, [r7, #16]
        break;
 8006b12:	e02e      	b.n	8006b72 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3310      	adds	r3, #16
 8006b1a:	613b      	str	r3, [r7, #16]
        break;
 8006b1c:	e029      	b.n	8006b72 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4a39      	ldr	r2, [pc, #228]	@ (8006c08 <HAL_DAC_Start_DMA+0x174>)
 8006b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4a38      	ldr	r2, [pc, #224]	@ (8006c0c <HAL_DAC_Start_DMA+0x178>)
 8006b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	4a37      	ldr	r2, [pc, #220]	@ (8006c10 <HAL_DAC_Start_DMA+0x17c>)
 8006b34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006b44:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_DAC_Start_DMA+0xc0>
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d005      	beq.n	8006b5e <HAL_DAC_Start_DMA+0xca>
 8006b52:	e009      	b.n	8006b68 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	613b      	str	r3, [r7, #16]
        break;
 8006b5c:	e009      	b.n	8006b72 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3318      	adds	r3, #24
 8006b64:	613b      	str	r3, [r7, #16]
        break;
 8006b66:	e004      	b.n	8006b72 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	331c      	adds	r3, #28
 8006b6e:	613b      	str	r3, [r7, #16]
        break;
 8006b70:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d111      	bne.n	8006b9c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6898      	ldr	r0, [r3, #8]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	f000 fd6d 	bl	8007670 <HAL_DMA_Start_IT>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
 8006b9a:	e010      	b.n	8006bbe <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006baa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68d8      	ldr	r0, [r3, #12]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	f000 fd5b 	bl	8007670 <HAL_DMA_Start_IT>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	409a      	lsls	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e005      	b.n	8006bf0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f043 0204 	orr.w	r2, r3, #4
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08006ead 	.word	0x08006ead
 8006c00:	08006ecf 	.word	0x08006ecf
 8006c04:	08006eeb 	.word	0x08006eeb
 8006c08:	08006f55 	.word	0x08006f55
 8006c0c:	08006f77 	.word	0x08006f77
 8006c10:	08006f93 	.word	0x08006f93

08006c14 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	@ 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_DAC_ConfigChannel+0x1e>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e12a      	b.n	8006ea0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	795b      	ldrb	r3, [r3, #5]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_DAC_ConfigChannel+0x2e>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e124      	b.n	8006ea0 <HAL_DAC_ConfigChannel+0x278>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d17a      	bne.n	8006d60 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006c6a:	f7fe f9c5 	bl	8004ff8 <HAL_GetTick>
 8006c6e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d13d      	bne.n	8006cf2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006c76:	e018      	b.n	8006caa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006c78:	f7fe f9be 	bl	8004ff8 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d911      	bls.n	8006caa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c8c:	4b86      	ldr	r3, [pc, #536]	@ (8006ea8 <HAL_DAC_ConfigChannel+0x280>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f043 0208 	orr.w	r2, r3, #8
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e0fa      	b.n	8006ea0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ea8 <HAL_DAC_ConfigChannel+0x280>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1df      	bne.n	8006c78 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	6992      	ldr	r2, [r2, #24]
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8006cc2:	e020      	b.n	8006d06 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006cc4:	f7fe f998 	bl	8004ff8 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d90f      	bls.n	8006cf2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da0a      	bge.n	8006cf2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f043 0208 	orr.w	r2, r3, #8
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2203      	movs	r2, #3
 8006cec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e0d6      	b.n	8006ea0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dbe3      	blt.n	8006cc4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	6992      	ldr	r2, [r2, #24]
 8006d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	ea02 0103 	and.w	r1, r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	21ff      	movs	r1, #255	@ 0xff
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	ea02 0103 	and.w	r1, r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6a1a      	ldr	r2, [r3, #32]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	409a      	lsls	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11d      	bne.n	8006da4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	221f      	movs	r2, #31
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	4013      	ands	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006daa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2207      	movs	r2, #7
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	43db      	mvns	r3, r3
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dcc:	e00f      	b.n	8006dee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d102      	bne.n	8006ddc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dda:	e008      	b.n	8006dee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006de4:	2301      	movs	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de8:	e001      	b.n	8006dee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	43da      	mvns	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	400a      	ands	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	22c0      	movs	r2, #192	@ 0xc0
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	@ 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20008000 	.word	0x20008000

08006eac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7f9 fe18 	bl	8000af0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	711a      	strb	r2, [r3, #4]
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7f9 fdf9 	bl	8000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f043 0204 	orr.w	r2, r3, #4
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fe85 	bl	8006c14 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	711a      	strb	r2, [r3, #4]
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff ffd8 	bl	8006f18 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	711a      	strb	r2, [r3, #4]
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff ffd1 	bl	8006f2c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ffc7 	bl	8006f40 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	711a      	strb	r2, [r3, #4]
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006fc8:	f7fe f816 	bl	8004ff8 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e312      	b.n	80075fe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a66      	ldr	r2, [pc, #408]	@ (8007178 <HAL_DMA_Init+0x1b8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d04a      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a65      	ldr	r2, [pc, #404]	@ (800717c <HAL_DMA_Init+0x1bc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d045      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a63      	ldr	r2, [pc, #396]	@ (8007180 <HAL_DMA_Init+0x1c0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d040      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a62      	ldr	r2, [pc, #392]	@ (8007184 <HAL_DMA_Init+0x1c4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d03b      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a60      	ldr	r2, [pc, #384]	@ (8007188 <HAL_DMA_Init+0x1c8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d036      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a5f      	ldr	r2, [pc, #380]	@ (800718c <HAL_DMA_Init+0x1cc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d031      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a5d      	ldr	r2, [pc, #372]	@ (8007190 <HAL_DMA_Init+0x1d0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d02c      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5c      	ldr	r2, [pc, #368]	@ (8007194 <HAL_DMA_Init+0x1d4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d027      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5a      	ldr	r2, [pc, #360]	@ (8007198 <HAL_DMA_Init+0x1d8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d022      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a59      	ldr	r2, [pc, #356]	@ (800719c <HAL_DMA_Init+0x1dc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d01d      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a57      	ldr	r2, [pc, #348]	@ (80071a0 <HAL_DMA_Init+0x1e0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d018      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a56      	ldr	r2, [pc, #344]	@ (80071a4 <HAL_DMA_Init+0x1e4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a54      	ldr	r2, [pc, #336]	@ (80071a8 <HAL_DMA_Init+0x1e8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00e      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a53      	ldr	r2, [pc, #332]	@ (80071ac <HAL_DMA_Init+0x1ec>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d009      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a51      	ldr	r2, [pc, #324]	@ (80071b0 <HAL_DMA_Init+0x1f0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <HAL_DMA_Init+0xb8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a50      	ldr	r2, [pc, #320]	@ (80071b4 <HAL_DMA_Init+0x1f4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d101      	bne.n	800707c <HAL_DMA_Init+0xbc>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <HAL_DMA_Init+0xbe>
 800707c:	2300      	movs	r3, #0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 813c 	beq.w	80072fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a37      	ldr	r2, [pc, #220]	@ (8007178 <HAL_DMA_Init+0x1b8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d04a      	beq.n	8007134 <HAL_DMA_Init+0x174>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a36      	ldr	r2, [pc, #216]	@ (800717c <HAL_DMA_Init+0x1bc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d045      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a34      	ldr	r2, [pc, #208]	@ (8007180 <HAL_DMA_Init+0x1c0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d040      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a33      	ldr	r2, [pc, #204]	@ (8007184 <HAL_DMA_Init+0x1c4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d03b      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a31      	ldr	r2, [pc, #196]	@ (8007188 <HAL_DMA_Init+0x1c8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d036      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a30      	ldr	r2, [pc, #192]	@ (800718c <HAL_DMA_Init+0x1cc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d031      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007190 <HAL_DMA_Init+0x1d0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d02c      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2d      	ldr	r2, [pc, #180]	@ (8007194 <HAL_DMA_Init+0x1d4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d027      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007198 <HAL_DMA_Init+0x1d8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d022      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a2a      	ldr	r2, [pc, #168]	@ (800719c <HAL_DMA_Init+0x1dc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d01d      	beq.n	8007134 <HAL_DMA_Init+0x174>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a28      	ldr	r2, [pc, #160]	@ (80071a0 <HAL_DMA_Init+0x1e0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_DMA_Init+0x174>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a27      	ldr	r2, [pc, #156]	@ (80071a4 <HAL_DMA_Init+0x1e4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <HAL_DMA_Init+0x174>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a25      	ldr	r2, [pc, #148]	@ (80071a8 <HAL_DMA_Init+0x1e8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_DMA_Init+0x174>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a24      	ldr	r2, [pc, #144]	@ (80071ac <HAL_DMA_Init+0x1ec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_DMA_Init+0x174>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a22      	ldr	r2, [pc, #136]	@ (80071b0 <HAL_DMA_Init+0x1f0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_DMA_Init+0x174>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a21      	ldr	r2, [pc, #132]	@ (80071b4 <HAL_DMA_Init+0x1f4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <HAL_DMA_Init+0x186>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	e007      	b.n	8007156 <HAL_DMA_Init+0x196>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007156:	e02f      	b.n	80071b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007158:	f7fd ff4e 	bl	8004ff8 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b05      	cmp	r3, #5
 8007164:	d928      	bls.n	80071b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e242      	b.n	80075fe <HAL_DMA_Init+0x63e>
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1c8      	bne.n	8007158 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4b83      	ldr	r3, [pc, #524]	@ (80073e0 <HAL_DMA_Init+0x420>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80071de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007208:	2b04      	cmp	r3, #4
 800720a:	d107      	bne.n	800721c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	4313      	orrs	r3, r2
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2b28      	cmp	r3, #40	@ 0x28
 8007222:	d903      	bls.n	800722c <HAL_DMA_Init+0x26c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2b2e      	cmp	r3, #46	@ 0x2e
 800722a:	d91f      	bls.n	800726c <HAL_DMA_Init+0x2ac>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b3e      	cmp	r3, #62	@ 0x3e
 8007232:	d903      	bls.n	800723c <HAL_DMA_Init+0x27c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b42      	cmp	r3, #66	@ 0x42
 800723a:	d917      	bls.n	800726c <HAL_DMA_Init+0x2ac>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b46      	cmp	r3, #70	@ 0x46
 8007242:	d903      	bls.n	800724c <HAL_DMA_Init+0x28c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b48      	cmp	r3, #72	@ 0x48
 800724a:	d90f      	bls.n	800726c <HAL_DMA_Init+0x2ac>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b4e      	cmp	r3, #78	@ 0x4e
 8007252:	d903      	bls.n	800725c <HAL_DMA_Init+0x29c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b52      	cmp	r3, #82	@ 0x52
 800725a:	d907      	bls.n	800726c <HAL_DMA_Init+0x2ac>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b73      	cmp	r3, #115	@ 0x73
 8007262:	d905      	bls.n	8007270 <HAL_DMA_Init+0x2b0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b77      	cmp	r3, #119	@ 0x77
 800726a:	d801      	bhi.n	8007270 <HAL_DMA_Init+0x2b0>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <HAL_DMA_Init+0x2b2>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d117      	bne.n	80072d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fdca 	bl	8008e54 <DMA_CheckFifoParam>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2240      	movs	r2, #64	@ 0x40
 80072ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e192      	b.n	80075fe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fd05 	bl	8008cf0 <DMA_CalcBaseAndBitshift>
 80072e6:	4603      	mov	r3, r0
 80072e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	223f      	movs	r2, #63	@ 0x3f
 80072f4:	409a      	lsls	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	609a      	str	r2, [r3, #8]
 80072fa:	e0c8      	b.n	800748e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a38      	ldr	r2, [pc, #224]	@ (80073e4 <HAL_DMA_Init+0x424>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d022      	beq.n	800734c <HAL_DMA_Init+0x38c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a37      	ldr	r2, [pc, #220]	@ (80073e8 <HAL_DMA_Init+0x428>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d01d      	beq.n	800734c <HAL_DMA_Init+0x38c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a35      	ldr	r2, [pc, #212]	@ (80073ec <HAL_DMA_Init+0x42c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d018      	beq.n	800734c <HAL_DMA_Init+0x38c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a34      	ldr	r2, [pc, #208]	@ (80073f0 <HAL_DMA_Init+0x430>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d013      	beq.n	800734c <HAL_DMA_Init+0x38c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a32      	ldr	r2, [pc, #200]	@ (80073f4 <HAL_DMA_Init+0x434>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00e      	beq.n	800734c <HAL_DMA_Init+0x38c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a31      	ldr	r2, [pc, #196]	@ (80073f8 <HAL_DMA_Init+0x438>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d009      	beq.n	800734c <HAL_DMA_Init+0x38c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2f      	ldr	r2, [pc, #188]	@ (80073fc <HAL_DMA_Init+0x43c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d004      	beq.n	800734c <HAL_DMA_Init+0x38c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2e      	ldr	r2, [pc, #184]	@ (8007400 <HAL_DMA_Init+0x440>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d101      	bne.n	8007350 <HAL_DMA_Init+0x390>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <HAL_DMA_Init+0x392>
 8007350:	2300      	movs	r3, #0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8092 	beq.w	800747c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a21      	ldr	r2, [pc, #132]	@ (80073e4 <HAL_DMA_Init+0x424>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d021      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a20      	ldr	r2, [pc, #128]	@ (80073e8 <HAL_DMA_Init+0x428>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01c      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1e      	ldr	r2, [pc, #120]	@ (80073ec <HAL_DMA_Init+0x42c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d017      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1d      	ldr	r2, [pc, #116]	@ (80073f0 <HAL_DMA_Init+0x430>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d012      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1b      	ldr	r2, [pc, #108]	@ (80073f4 <HAL_DMA_Init+0x434>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00d      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1a      	ldr	r2, [pc, #104]	@ (80073f8 <HAL_DMA_Init+0x438>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d008      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <HAL_DMA_Init+0x43c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d003      	beq.n	80073a6 <HAL_DMA_Init+0x3e6>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a17      	ldr	r2, [pc, #92]	@ (8007400 <HAL_DMA_Init+0x440>)
 80073a4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <HAL_DMA_Init+0x444>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	d01c      	beq.n	8007408 <HAL_DMA_Init+0x448>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b80      	cmp	r3, #128	@ 0x80
 80073d4:	d102      	bne.n	80073dc <HAL_DMA_Init+0x41c>
 80073d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80073da:	e016      	b.n	800740a <HAL_DMA_Init+0x44a>
 80073dc:	2300      	movs	r3, #0
 80073de:	e014      	b.n	800740a <HAL_DMA_Init+0x44a>
 80073e0:	fe10803f 	.word	0xfe10803f
 80073e4:	58025408 	.word	0x58025408
 80073e8:	5802541c 	.word	0x5802541c
 80073ec:	58025430 	.word	0x58025430
 80073f0:	58025444 	.word	0x58025444
 80073f4:	58025458 	.word	0x58025458
 80073f8:	5802546c 	.word	0x5802546c
 80073fc:	58025480 	.word	0x58025480
 8007400:	58025494 	.word	0x58025494
 8007404:	fffe000f 	.word	0xfffe000f
 8007408:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007438:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b6e      	ldr	r3, [pc, #440]	@ (8007608 <HAL_DMA_Init+0x648>)
 8007450:	4413      	add	r3, r2
 8007452:	4a6e      	ldr	r2, [pc, #440]	@ (800760c <HAL_DMA_Init+0x64c>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	009a      	lsls	r2, r3, #2
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fc45 	bl	8008cf0 <DMA_CalcBaseAndBitshift>
 8007466:	4603      	mov	r3, r0
 8007468:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2201      	movs	r2, #1
 8007474:	409a      	lsls	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	e008      	b.n	800748e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2240      	movs	r2, #64	@ 0x40
 8007480:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2203      	movs	r2, #3
 8007486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0b7      	b.n	80075fe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a5f      	ldr	r2, [pc, #380]	@ (8007610 <HAL_DMA_Init+0x650>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d072      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a5d      	ldr	r2, [pc, #372]	@ (8007614 <HAL_DMA_Init+0x654>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d06d      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007618 <HAL_DMA_Init+0x658>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d068      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5a      	ldr	r2, [pc, #360]	@ (800761c <HAL_DMA_Init+0x65c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d063      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a59      	ldr	r2, [pc, #356]	@ (8007620 <HAL_DMA_Init+0x660>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d05e      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a57      	ldr	r2, [pc, #348]	@ (8007624 <HAL_DMA_Init+0x664>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d059      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a56      	ldr	r2, [pc, #344]	@ (8007628 <HAL_DMA_Init+0x668>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d054      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a54      	ldr	r2, [pc, #336]	@ (800762c <HAL_DMA_Init+0x66c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d04f      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a53      	ldr	r2, [pc, #332]	@ (8007630 <HAL_DMA_Init+0x670>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d04a      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a51      	ldr	r2, [pc, #324]	@ (8007634 <HAL_DMA_Init+0x674>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d045      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a50      	ldr	r2, [pc, #320]	@ (8007638 <HAL_DMA_Init+0x678>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d040      	beq.n	800757e <HAL_DMA_Init+0x5be>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a4e      	ldr	r2, [pc, #312]	@ (800763c <HAL_DMA_Init+0x67c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d03b      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4d      	ldr	r2, [pc, #308]	@ (8007640 <HAL_DMA_Init+0x680>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d036      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a4b      	ldr	r2, [pc, #300]	@ (8007644 <HAL_DMA_Init+0x684>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d031      	beq.n	800757e <HAL_DMA_Init+0x5be>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a4a      	ldr	r2, [pc, #296]	@ (8007648 <HAL_DMA_Init+0x688>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d02c      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a48      	ldr	r2, [pc, #288]	@ (800764c <HAL_DMA_Init+0x68c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d027      	beq.n	800757e <HAL_DMA_Init+0x5be>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a47      	ldr	r2, [pc, #284]	@ (8007650 <HAL_DMA_Init+0x690>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d022      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a45      	ldr	r2, [pc, #276]	@ (8007654 <HAL_DMA_Init+0x694>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01d      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a44      	ldr	r2, [pc, #272]	@ (8007658 <HAL_DMA_Init+0x698>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <HAL_DMA_Init+0x5be>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a42      	ldr	r2, [pc, #264]	@ (800765c <HAL_DMA_Init+0x69c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a41      	ldr	r2, [pc, #260]	@ (8007660 <HAL_DMA_Init+0x6a0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a3f      	ldr	r2, [pc, #252]	@ (8007664 <HAL_DMA_Init+0x6a4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_DMA_Init+0x5be>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a3e      	ldr	r2, [pc, #248]	@ (8007668 <HAL_DMA_Init+0x6a8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_DMA_Init+0x5be>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3c      	ldr	r2, [pc, #240]	@ (800766c <HAL_DMA_Init+0x6ac>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <HAL_DMA_Init+0x5c2>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_DMA_Init+0x5c4>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d032      	beq.n	80075ee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fcdf 	bl	8008f4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b80      	cmp	r3, #128	@ 0x80
 8007594:	d102      	bne.n	800759c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80075b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d010      	beq.n	80075dc <HAL_DMA_Init+0x61c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d80c      	bhi.n	80075dc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fd5c 	bl	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	e008      	b.n	80075ee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	a7fdabf8 	.word	0xa7fdabf8
 800760c:	cccccccd 	.word	0xcccccccd
 8007610:	40020010 	.word	0x40020010
 8007614:	40020028 	.word	0x40020028
 8007618:	40020040 	.word	0x40020040
 800761c:	40020058 	.word	0x40020058
 8007620:	40020070 	.word	0x40020070
 8007624:	40020088 	.word	0x40020088
 8007628:	400200a0 	.word	0x400200a0
 800762c:	400200b8 	.word	0x400200b8
 8007630:	40020410 	.word	0x40020410
 8007634:	40020428 	.word	0x40020428
 8007638:	40020440 	.word	0x40020440
 800763c:	40020458 	.word	0x40020458
 8007640:	40020470 	.word	0x40020470
 8007644:	40020488 	.word	0x40020488
 8007648:	400204a0 	.word	0x400204a0
 800764c:	400204b8 	.word	0x400204b8
 8007650:	58025408 	.word	0x58025408
 8007654:	5802541c 	.word	0x5802541c
 8007658:	58025430 	.word	0x58025430
 800765c:	58025444 	.word	0x58025444
 8007660:	58025458 	.word	0x58025458
 8007664:	5802546c 	.word	0x5802546c
 8007668:	58025480 	.word	0x58025480
 800766c:	58025494 	.word	0x58025494

08007670 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e226      	b.n	8007ada <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_DMA_Start_IT+0x2a>
 8007696:	2302      	movs	r3, #2
 8007698:	e21f      	b.n	8007ada <HAL_DMA_Start_IT+0x46a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	f040 820a 	bne.w	8007ac4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a68      	ldr	r2, [pc, #416]	@ (8007864 <HAL_DMA_Start_IT+0x1f4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d04a      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a66      	ldr	r2, [pc, #408]	@ (8007868 <HAL_DMA_Start_IT+0x1f8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d045      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a65      	ldr	r2, [pc, #404]	@ (800786c <HAL_DMA_Start_IT+0x1fc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d040      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a63      	ldr	r2, [pc, #396]	@ (8007870 <HAL_DMA_Start_IT+0x200>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d03b      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a62      	ldr	r2, [pc, #392]	@ (8007874 <HAL_DMA_Start_IT+0x204>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d036      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a60      	ldr	r2, [pc, #384]	@ (8007878 <HAL_DMA_Start_IT+0x208>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d031      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a5f      	ldr	r2, [pc, #380]	@ (800787c <HAL_DMA_Start_IT+0x20c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d02c      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a5d      	ldr	r2, [pc, #372]	@ (8007880 <HAL_DMA_Start_IT+0x210>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d027      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5c      	ldr	r2, [pc, #368]	@ (8007884 <HAL_DMA_Start_IT+0x214>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5a      	ldr	r2, [pc, #360]	@ (8007888 <HAL_DMA_Start_IT+0x218>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a59      	ldr	r2, [pc, #356]	@ (800788c <HAL_DMA_Start_IT+0x21c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a57      	ldr	r2, [pc, #348]	@ (8007890 <HAL_DMA_Start_IT+0x220>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a56      	ldr	r2, [pc, #344]	@ (8007894 <HAL_DMA_Start_IT+0x224>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a54      	ldr	r2, [pc, #336]	@ (8007898 <HAL_DMA_Start_IT+0x228>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a53      	ldr	r2, [pc, #332]	@ (800789c <HAL_DMA_Start_IT+0x22c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_DMA_Start_IT+0xee>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a51      	ldr	r2, [pc, #324]	@ (80078a0 <HAL_DMA_Start_IT+0x230>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d108      	bne.n	8007770 <HAL_DMA_Start_IT+0x100>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e007      	b.n	8007780 <HAL_DMA_Start_IT+0x110>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f001 f906 	bl	8008998 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a34      	ldr	r2, [pc, #208]	@ (8007864 <HAL_DMA_Start_IT+0x1f4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a33      	ldr	r2, [pc, #204]	@ (8007868 <HAL_DMA_Start_IT+0x1f8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a31      	ldr	r2, [pc, #196]	@ (800786c <HAL_DMA_Start_IT+0x1fc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a30      	ldr	r2, [pc, #192]	@ (8007870 <HAL_DMA_Start_IT+0x200>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007874 <HAL_DMA_Start_IT+0x204>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007878 <HAL_DMA_Start_IT+0x208>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	@ (800787c <HAL_DMA_Start_IT+0x20c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007880 <HAL_DMA_Start_IT+0x210>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a28      	ldr	r2, [pc, #160]	@ (8007884 <HAL_DMA_Start_IT+0x214>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a27      	ldr	r2, [pc, #156]	@ (8007888 <HAL_DMA_Start_IT+0x218>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a25      	ldr	r2, [pc, #148]	@ (800788c <HAL_DMA_Start_IT+0x21c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a24      	ldr	r2, [pc, #144]	@ (8007890 <HAL_DMA_Start_IT+0x220>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a22      	ldr	r2, [pc, #136]	@ (8007894 <HAL_DMA_Start_IT+0x224>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a21      	ldr	r2, [pc, #132]	@ (8007898 <HAL_DMA_Start_IT+0x228>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <HAL_DMA_Start_IT+0x22c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_DMA_Start_IT+0x1bc>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1e      	ldr	r2, [pc, #120]	@ (80078a0 <HAL_DMA_Start_IT+0x230>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d101      	bne.n	8007830 <HAL_DMA_Start_IT+0x1c0>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_DMA_Start_IT+0x1c2>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d036      	beq.n	80078a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f023 021e 	bic.w	r2, r3, #30
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0216 	orr.w	r2, r2, #22
 8007848:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d03e      	beq.n	80078d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0208 	orr.w	r2, r2, #8
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e035      	b.n	80078d0 <HAL_DMA_Start_IT+0x260>
 8007864:	40020010 	.word	0x40020010
 8007868:	40020028 	.word	0x40020028
 800786c:	40020040 	.word	0x40020040
 8007870:	40020058 	.word	0x40020058
 8007874:	40020070 	.word	0x40020070
 8007878:	40020088 	.word	0x40020088
 800787c:	400200a0 	.word	0x400200a0
 8007880:	400200b8 	.word	0x400200b8
 8007884:	40020410 	.word	0x40020410
 8007888:	40020428 	.word	0x40020428
 800788c:	40020440 	.word	0x40020440
 8007890:	40020458 	.word	0x40020458
 8007894:	40020470 	.word	0x40020470
 8007898:	40020488 	.word	0x40020488
 800789c:	400204a0 	.word	0x400204a0
 80078a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f023 020e 	bic.w	r2, r3, #14
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 020a 	orr.w	r2, r2, #10
 80078b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0204 	orr.w	r2, r2, #4
 80078ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a83      	ldr	r2, [pc, #524]	@ (8007ae4 <HAL_DMA_Start_IT+0x474>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d072      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a82      	ldr	r2, [pc, #520]	@ (8007ae8 <HAL_DMA_Start_IT+0x478>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d06d      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a80      	ldr	r2, [pc, #512]	@ (8007aec <HAL_DMA_Start_IT+0x47c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d068      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a7f      	ldr	r2, [pc, #508]	@ (8007af0 <HAL_DMA_Start_IT+0x480>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d063      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a7d      	ldr	r2, [pc, #500]	@ (8007af4 <HAL_DMA_Start_IT+0x484>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d05e      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a7c      	ldr	r2, [pc, #496]	@ (8007af8 <HAL_DMA_Start_IT+0x488>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d059      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a7a      	ldr	r2, [pc, #488]	@ (8007afc <HAL_DMA_Start_IT+0x48c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d054      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a79      	ldr	r2, [pc, #484]	@ (8007b00 <HAL_DMA_Start_IT+0x490>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d04f      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a77      	ldr	r2, [pc, #476]	@ (8007b04 <HAL_DMA_Start_IT+0x494>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d04a      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a76      	ldr	r2, [pc, #472]	@ (8007b08 <HAL_DMA_Start_IT+0x498>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d045      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a74      	ldr	r2, [pc, #464]	@ (8007b0c <HAL_DMA_Start_IT+0x49c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d040      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a73      	ldr	r2, [pc, #460]	@ (8007b10 <HAL_DMA_Start_IT+0x4a0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d03b      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a71      	ldr	r2, [pc, #452]	@ (8007b14 <HAL_DMA_Start_IT+0x4a4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d036      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a70      	ldr	r2, [pc, #448]	@ (8007b18 <HAL_DMA_Start_IT+0x4a8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d031      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6e      	ldr	r2, [pc, #440]	@ (8007b1c <HAL_DMA_Start_IT+0x4ac>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d02c      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6d      	ldr	r2, [pc, #436]	@ (8007b20 <HAL_DMA_Start_IT+0x4b0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d027      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a6b      	ldr	r2, [pc, #428]	@ (8007b24 <HAL_DMA_Start_IT+0x4b4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d022      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a6a      	ldr	r2, [pc, #424]	@ (8007b28 <HAL_DMA_Start_IT+0x4b8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d01d      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a68      	ldr	r2, [pc, #416]	@ (8007b2c <HAL_DMA_Start_IT+0x4bc>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d018      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a67      	ldr	r2, [pc, #412]	@ (8007b30 <HAL_DMA_Start_IT+0x4c0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d013      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a65      	ldr	r2, [pc, #404]	@ (8007b34 <HAL_DMA_Start_IT+0x4c4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00e      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a64      	ldr	r2, [pc, #400]	@ (8007b38 <HAL_DMA_Start_IT+0x4c8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a62      	ldr	r2, [pc, #392]	@ (8007b3c <HAL_DMA_Start_IT+0x4cc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_DMA_Start_IT+0x350>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a61      	ldr	r2, [pc, #388]	@ (8007b40 <HAL_DMA_Start_IT+0x4d0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_DMA_Start_IT+0x354>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <HAL_DMA_Start_IT+0x356>
 80079c4:	2300      	movs	r3, #0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01a      	beq.n	8007a00 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a37      	ldr	r2, [pc, #220]	@ (8007ae4 <HAL_DMA_Start_IT+0x474>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d04a      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a36      	ldr	r2, [pc, #216]	@ (8007ae8 <HAL_DMA_Start_IT+0x478>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d045      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a34      	ldr	r2, [pc, #208]	@ (8007aec <HAL_DMA_Start_IT+0x47c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d040      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a33      	ldr	r2, [pc, #204]	@ (8007af0 <HAL_DMA_Start_IT+0x480>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d03b      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a31      	ldr	r2, [pc, #196]	@ (8007af4 <HAL_DMA_Start_IT+0x484>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d036      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a30      	ldr	r2, [pc, #192]	@ (8007af8 <HAL_DMA_Start_IT+0x488>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d031      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2e      	ldr	r2, [pc, #184]	@ (8007afc <HAL_DMA_Start_IT+0x48c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d02c      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8007b00 <HAL_DMA_Start_IT+0x490>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d027      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a2b      	ldr	r2, [pc, #172]	@ (8007b04 <HAL_DMA_Start_IT+0x494>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d022      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b08 <HAL_DMA_Start_IT+0x498>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d01d      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a28      	ldr	r2, [pc, #160]	@ (8007b0c <HAL_DMA_Start_IT+0x49c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d018      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a27      	ldr	r2, [pc, #156]	@ (8007b10 <HAL_DMA_Start_IT+0x4a0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d013      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a25      	ldr	r2, [pc, #148]	@ (8007b14 <HAL_DMA_Start_IT+0x4a4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00e      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a24      	ldr	r2, [pc, #144]	@ (8007b18 <HAL_DMA_Start_IT+0x4a8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d009      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a22      	ldr	r2, [pc, #136]	@ (8007b1c <HAL_DMA_Start_IT+0x4ac>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d004      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x430>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a21      	ldr	r2, [pc, #132]	@ (8007b20 <HAL_DMA_Start_IT+0x4b0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d108      	bne.n	8007ab2 <HAL_DMA_Start_IT+0x442>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e012      	b.n	8007ad8 <HAL_DMA_Start_IT+0x468>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0201 	orr.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e009      	b.n	8007ad8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007aca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40020010 	.word	0x40020010
 8007ae8:	40020028 	.word	0x40020028
 8007aec:	40020040 	.word	0x40020040
 8007af0:	40020058 	.word	0x40020058
 8007af4:	40020070 	.word	0x40020070
 8007af8:	40020088 	.word	0x40020088
 8007afc:	400200a0 	.word	0x400200a0
 8007b00:	400200b8 	.word	0x400200b8
 8007b04:	40020410 	.word	0x40020410
 8007b08:	40020428 	.word	0x40020428
 8007b0c:	40020440 	.word	0x40020440
 8007b10:	40020458 	.word	0x40020458
 8007b14:	40020470 	.word	0x40020470
 8007b18:	40020488 	.word	0x40020488
 8007b1c:	400204a0 	.word	0x400204a0
 8007b20:	400204b8 	.word	0x400204b8
 8007b24:	58025408 	.word	0x58025408
 8007b28:	5802541c 	.word	0x5802541c
 8007b2c:	58025430 	.word	0x58025430
 8007b30:	58025444 	.word	0x58025444
 8007b34:	58025458 	.word	0x58025458
 8007b38:	5802546c 	.word	0x5802546c
 8007b3c:	58025480 	.word	0x58025480
 8007b40:	58025494 	.word	0x58025494

08007b44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	@ 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b50:	4b67      	ldr	r3, [pc, #412]	@ (8007cf0 <HAL_DMA_IRQHandler+0x1ac>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a67      	ldr	r2, [pc, #412]	@ (8007cf4 <HAL_DMA_IRQHandler+0x1b0>)
 8007b56:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5a:	0a9b      	lsrs	r3, r3, #10
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b68:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8007cf8 <HAL_DMA_IRQHandler+0x1b4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d04a      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a5d      	ldr	r2, [pc, #372]	@ (8007cfc <HAL_DMA_IRQHandler+0x1b8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d045      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d00 <HAL_DMA_IRQHandler+0x1bc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d040      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a5a      	ldr	r2, [pc, #360]	@ (8007d04 <HAL_DMA_IRQHandler+0x1c0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d03b      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a59      	ldr	r2, [pc, #356]	@ (8007d08 <HAL_DMA_IRQHandler+0x1c4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d036      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a57      	ldr	r2, [pc, #348]	@ (8007d0c <HAL_DMA_IRQHandler+0x1c8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d031      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a56      	ldr	r2, [pc, #344]	@ (8007d10 <HAL_DMA_IRQHandler+0x1cc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d02c      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a54      	ldr	r2, [pc, #336]	@ (8007d14 <HAL_DMA_IRQHandler+0x1d0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d027      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a53      	ldr	r2, [pc, #332]	@ (8007d18 <HAL_DMA_IRQHandler+0x1d4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a51      	ldr	r2, [pc, #324]	@ (8007d1c <HAL_DMA_IRQHandler+0x1d8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01d      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a50      	ldr	r2, [pc, #320]	@ (8007d20 <HAL_DMA_IRQHandler+0x1dc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a4e      	ldr	r2, [pc, #312]	@ (8007d24 <HAL_DMA_IRQHandler+0x1e0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8007d28 <HAL_DMA_IRQHandler+0x1e4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8007d2c <HAL_DMA_IRQHandler+0x1e8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a4a      	ldr	r2, [pc, #296]	@ (8007d30 <HAL_DMA_IRQHandler+0x1ec>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_DMA_IRQHandler+0xd2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a48      	ldr	r2, [pc, #288]	@ (8007d34 <HAL_DMA_IRQHandler+0x1f0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d101      	bne.n	8007c1a <HAL_DMA_IRQHandler+0xd6>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <HAL_DMA_IRQHandler+0xd8>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 842b 	beq.w	8008478 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	409a      	lsls	r2, r3
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80a2 	beq.w	8007d7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf8 <HAL_DMA_IRQHandler+0x1b4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d04a      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2d      	ldr	r2, [pc, #180]	@ (8007cfc <HAL_DMA_IRQHandler+0x1b8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d045      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a2b      	ldr	r2, [pc, #172]	@ (8007d00 <HAL_DMA_IRQHandler+0x1bc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d040      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d04 <HAL_DMA_IRQHandler+0x1c0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d03b      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a28      	ldr	r2, [pc, #160]	@ (8007d08 <HAL_DMA_IRQHandler+0x1c4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d036      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a27      	ldr	r2, [pc, #156]	@ (8007d0c <HAL_DMA_IRQHandler+0x1c8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d031      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a25      	ldr	r2, [pc, #148]	@ (8007d10 <HAL_DMA_IRQHandler+0x1cc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d02c      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a24      	ldr	r2, [pc, #144]	@ (8007d14 <HAL_DMA_IRQHandler+0x1d0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d027      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a22      	ldr	r2, [pc, #136]	@ (8007d18 <HAL_DMA_IRQHandler+0x1d4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d022      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a21      	ldr	r2, [pc, #132]	@ (8007d1c <HAL_DMA_IRQHandler+0x1d8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d01d      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d20 <HAL_DMA_IRQHandler+0x1dc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d018      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1e      	ldr	r2, [pc, #120]	@ (8007d24 <HAL_DMA_IRQHandler+0x1e0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d013      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d28 <HAL_DMA_IRQHandler+0x1e4>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00e      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d2c <HAL_DMA_IRQHandler+0x1e8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d009      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a19      	ldr	r2, [pc, #100]	@ (8007d30 <HAL_DMA_IRQHandler+0x1ec>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d004      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x194>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a18      	ldr	r2, [pc, #96]	@ (8007d34 <HAL_DMA_IRQHandler+0x1f0>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d12f      	bne.n	8007d38 <HAL_DMA_IRQHandler+0x1f4>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bf14      	ite	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	2300      	moveq	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e02e      	b.n	8007d4c <HAL_DMA_IRQHandler+0x208>
 8007cee:	bf00      	nop
 8007cf0:	24000000 	.word	0x24000000
 8007cf4:	1b4e81b5 	.word	0x1b4e81b5
 8007cf8:	40020010 	.word	0x40020010
 8007cfc:	40020028 	.word	0x40020028
 8007d00:	40020040 	.word	0x40020040
 8007d04:	40020058 	.word	0x40020058
 8007d08:	40020070 	.word	0x40020070
 8007d0c:	40020088 	.word	0x40020088
 8007d10:	400200a0 	.word	0x400200a0
 8007d14:	400200b8 	.word	0x400200b8
 8007d18:	40020410 	.word	0x40020410
 8007d1c:	40020428 	.word	0x40020428
 8007d20:	40020440 	.word	0x40020440
 8007d24:	40020458 	.word	0x40020458
 8007d28:	40020470 	.word	0x40020470
 8007d2c:	40020488 	.word	0x40020488
 8007d30:	400204a0 	.word	0x400204a0
 8007d34:	400204b8 	.word	0x400204b8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bf14      	ite	ne
 8007d46:	2301      	movne	r3, #1
 8007d48:	2300      	moveq	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d015      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0204 	bic.w	r2, r2, #4
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2208      	movs	r2, #8
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d74:	f043 0201 	orr.w	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d80:	f003 031f 	and.w	r3, r3, #31
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d06e      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a69      	ldr	r2, [pc, #420]	@ (8007f3c <HAL_DMA_IRQHandler+0x3f8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d04a      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a67      	ldr	r2, [pc, #412]	@ (8007f40 <HAL_DMA_IRQHandler+0x3fc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d045      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a66      	ldr	r2, [pc, #408]	@ (8007f44 <HAL_DMA_IRQHandler+0x400>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d040      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a64      	ldr	r2, [pc, #400]	@ (8007f48 <HAL_DMA_IRQHandler+0x404>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d03b      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a63      	ldr	r2, [pc, #396]	@ (8007f4c <HAL_DMA_IRQHandler+0x408>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d036      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a61      	ldr	r2, [pc, #388]	@ (8007f50 <HAL_DMA_IRQHandler+0x40c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d031      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a60      	ldr	r2, [pc, #384]	@ (8007f54 <HAL_DMA_IRQHandler+0x410>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d02c      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8007f58 <HAL_DMA_IRQHandler+0x414>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d027      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a5d      	ldr	r2, [pc, #372]	@ (8007f5c <HAL_DMA_IRQHandler+0x418>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d022      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a5b      	ldr	r2, [pc, #364]	@ (8007f60 <HAL_DMA_IRQHandler+0x41c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01d      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8007f64 <HAL_DMA_IRQHandler+0x420>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d018      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a58      	ldr	r2, [pc, #352]	@ (8007f68 <HAL_DMA_IRQHandler+0x424>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d013      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a57      	ldr	r2, [pc, #348]	@ (8007f6c <HAL_DMA_IRQHandler+0x428>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00e      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a55      	ldr	r2, [pc, #340]	@ (8007f70 <HAL_DMA_IRQHandler+0x42c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d009      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a54      	ldr	r2, [pc, #336]	@ (8007f74 <HAL_DMA_IRQHandler+0x430>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d004      	beq.n	8007e32 <HAL_DMA_IRQHandler+0x2ee>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a52      	ldr	r2, [pc, #328]	@ (8007f78 <HAL_DMA_IRQHandler+0x434>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d10a      	bne.n	8007e48 <HAL_DMA_IRQHandler+0x304>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bf14      	ite	ne
 8007e40:	2301      	movne	r3, #1
 8007e42:	2300      	moveq	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	e003      	b.n	8007e50 <HAL_DMA_IRQHandler+0x30c>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00d      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e68:	f043 0202 	orr.w	r2, r3, #2
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2204      	movs	r2, #4
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 808f 	beq.w	8007fa4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f3c <HAL_DMA_IRQHandler+0x3f8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d04a      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a2a      	ldr	r2, [pc, #168]	@ (8007f40 <HAL_DMA_IRQHandler+0x3fc>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d045      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a29      	ldr	r2, [pc, #164]	@ (8007f44 <HAL_DMA_IRQHandler+0x400>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d040      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a27      	ldr	r2, [pc, #156]	@ (8007f48 <HAL_DMA_IRQHandler+0x404>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d03b      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a26      	ldr	r2, [pc, #152]	@ (8007f4c <HAL_DMA_IRQHandler+0x408>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d036      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a24      	ldr	r2, [pc, #144]	@ (8007f50 <HAL_DMA_IRQHandler+0x40c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d031      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a23      	ldr	r2, [pc, #140]	@ (8007f54 <HAL_DMA_IRQHandler+0x410>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d02c      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a21      	ldr	r2, [pc, #132]	@ (8007f58 <HAL_DMA_IRQHandler+0x414>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d027      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a20      	ldr	r2, [pc, #128]	@ (8007f5c <HAL_DMA_IRQHandler+0x418>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f60 <HAL_DMA_IRQHandler+0x41c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1d      	ldr	r2, [pc, #116]	@ (8007f64 <HAL_DMA_IRQHandler+0x420>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <HAL_DMA_IRQHandler+0x424>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1a      	ldr	r2, [pc, #104]	@ (8007f6c <HAL_DMA_IRQHandler+0x428>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <HAL_DMA_IRQHandler+0x42c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a17      	ldr	r2, [pc, #92]	@ (8007f74 <HAL_DMA_IRQHandler+0x430>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x3e2>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a15      	ldr	r2, [pc, #84]	@ (8007f78 <HAL_DMA_IRQHandler+0x434>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d12a      	bne.n	8007f7c <HAL_DMA_IRQHandler+0x438>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bf14      	ite	ne
 8007f34:	2301      	movne	r3, #1
 8007f36:	2300      	moveq	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	e023      	b.n	8007f84 <HAL_DMA_IRQHandler+0x440>
 8007f3c:	40020010 	.word	0x40020010
 8007f40:	40020028 	.word	0x40020028
 8007f44:	40020040 	.word	0x40020040
 8007f48:	40020058 	.word	0x40020058
 8007f4c:	40020070 	.word	0x40020070
 8007f50:	40020088 	.word	0x40020088
 8007f54:	400200a0 	.word	0x400200a0
 8007f58:	400200b8 	.word	0x400200b8
 8007f5c:	40020410 	.word	0x40020410
 8007f60:	40020428 	.word	0x40020428
 8007f64:	40020440 	.word	0x40020440
 8007f68:	40020458 	.word	0x40020458
 8007f6c:	40020470 	.word	0x40020470
 8007f70:	40020488 	.word	0x40020488
 8007f74:	400204a0 	.word	0x400204a0
 8007f78:	400204b8 	.word	0x400204b8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00d      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2204      	movs	r2, #4
 8007f92:	409a      	lsls	r2, r3
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9c:	f043 0204 	orr.w	r2, r3, #4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	2210      	movs	r2, #16
 8007fae:	409a      	lsls	r2, r3
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80a6 	beq.w	8008106 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a85      	ldr	r2, [pc, #532]	@ (80081d4 <HAL_DMA_IRQHandler+0x690>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d04a      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a83      	ldr	r2, [pc, #524]	@ (80081d8 <HAL_DMA_IRQHandler+0x694>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d045      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a82      	ldr	r2, [pc, #520]	@ (80081dc <HAL_DMA_IRQHandler+0x698>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d040      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a80      	ldr	r2, [pc, #512]	@ (80081e0 <HAL_DMA_IRQHandler+0x69c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d03b      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a7f      	ldr	r2, [pc, #508]	@ (80081e4 <HAL_DMA_IRQHandler+0x6a0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d036      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a7d      	ldr	r2, [pc, #500]	@ (80081e8 <HAL_DMA_IRQHandler+0x6a4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d031      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80081ec <HAL_DMA_IRQHandler+0x6a8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d02c      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a7a      	ldr	r2, [pc, #488]	@ (80081f0 <HAL_DMA_IRQHandler+0x6ac>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d027      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a79      	ldr	r2, [pc, #484]	@ (80081f4 <HAL_DMA_IRQHandler+0x6b0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d022      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a77      	ldr	r2, [pc, #476]	@ (80081f8 <HAL_DMA_IRQHandler+0x6b4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01d      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a76      	ldr	r2, [pc, #472]	@ (80081fc <HAL_DMA_IRQHandler+0x6b8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d018      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a74      	ldr	r2, [pc, #464]	@ (8008200 <HAL_DMA_IRQHandler+0x6bc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d013      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a73      	ldr	r2, [pc, #460]	@ (8008204 <HAL_DMA_IRQHandler+0x6c0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a71      	ldr	r2, [pc, #452]	@ (8008208 <HAL_DMA_IRQHandler+0x6c4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a70      	ldr	r2, [pc, #448]	@ (800820c <HAL_DMA_IRQHandler+0x6c8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_DMA_IRQHandler+0x516>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a6e      	ldr	r2, [pc, #440]	@ (8008210 <HAL_DMA_IRQHandler+0x6cc>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d10a      	bne.n	8008070 <HAL_DMA_IRQHandler+0x52c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	e009      	b.n	8008084 <HAL_DMA_IRQHandler+0x540>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	bf14      	ite	ne
 800807e:	2301      	movne	r3, #1
 8008080:	2300      	moveq	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d03e      	beq.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	2210      	movs	r2, #16
 8008092:	409a      	lsls	r2, r3
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d018      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d108      	bne.n	80080c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d024      	beq.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
 80080c4:	e01f      	b.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01b      	beq.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
 80080d6:	e016      	b.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d107      	bne.n	80080f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0208 	bic.w	r2, r2, #8
 80080f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2220      	movs	r2, #32
 8008110:	409a      	lsls	r2, r3
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8110 	beq.w	800833c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <HAL_DMA_IRQHandler+0x690>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d04a      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <HAL_DMA_IRQHandler+0x694>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d045      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a29      	ldr	r2, [pc, #164]	@ (80081dc <HAL_DMA_IRQHandler+0x698>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d040      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a28      	ldr	r2, [pc, #160]	@ (80081e0 <HAL_DMA_IRQHandler+0x69c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d03b      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a26      	ldr	r2, [pc, #152]	@ (80081e4 <HAL_DMA_IRQHandler+0x6a0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d036      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a25      	ldr	r2, [pc, #148]	@ (80081e8 <HAL_DMA_IRQHandler+0x6a4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d031      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a23      	ldr	r2, [pc, #140]	@ (80081ec <HAL_DMA_IRQHandler+0x6a8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d02c      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a22      	ldr	r2, [pc, #136]	@ (80081f0 <HAL_DMA_IRQHandler+0x6ac>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d027      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a20      	ldr	r2, [pc, #128]	@ (80081f4 <HAL_DMA_IRQHandler+0x6b0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d022      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1f      	ldr	r2, [pc, #124]	@ (80081f8 <HAL_DMA_IRQHandler+0x6b4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d01d      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <HAL_DMA_IRQHandler+0x6b8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d018      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <HAL_DMA_IRQHandler+0x6bc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d013      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1a      	ldr	r2, [pc, #104]	@ (8008204 <HAL_DMA_IRQHandler+0x6c0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00e      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a19      	ldr	r2, [pc, #100]	@ (8008208 <HAL_DMA_IRQHandler+0x6c4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d009      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_DMA_IRQHandler+0x6c8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_DMA_IRQHandler+0x678>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_DMA_IRQHandler+0x6cc>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d12b      	bne.n	8008214 <HAL_DMA_IRQHandler+0x6d0>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	2300      	moveq	r3, #0
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	e02a      	b.n	8008228 <HAL_DMA_IRQHandler+0x6e4>
 80081d2:	bf00      	nop
 80081d4:	40020010 	.word	0x40020010
 80081d8:	40020028 	.word	0x40020028
 80081dc:	40020040 	.word	0x40020040
 80081e0:	40020058 	.word	0x40020058
 80081e4:	40020070 	.word	0x40020070
 80081e8:	40020088 	.word	0x40020088
 80081ec:	400200a0 	.word	0x400200a0
 80081f0:	400200b8 	.word	0x400200b8
 80081f4:	40020410 	.word	0x40020410
 80081f8:	40020428 	.word	0x40020428
 80081fc:	40020440 	.word	0x40020440
 8008200:	40020458 	.word	0x40020458
 8008204:	40020470 	.word	0x40020470
 8008208:	40020488 	.word	0x40020488
 800820c:	400204a0 	.word	0x400204a0
 8008210:	400204b8 	.word	0x400204b8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	bf14      	ite	ne
 8008222:	2301      	movne	r3, #1
 8008224:	2300      	moveq	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8087 	beq.w	800833c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2220      	movs	r2, #32
 8008238:	409a      	lsls	r2, r3
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b04      	cmp	r3, #4
 8008248:	d139      	bne.n	80082be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0216 	bic.w	r2, r2, #22
 8008258:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008268:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <HAL_DMA_IRQHandler+0x736>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0208 	bic.w	r2, r2, #8
 8008288:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828e:	f003 031f 	and.w	r3, r3, #31
 8008292:	223f      	movs	r2, #63	@ 0x3f
 8008294:	409a      	lsls	r2, r3
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 834a 	beq.w	8008948 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
          }
          return;
 80082bc:	e344      	b.n	8008948 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d018      	beq.n	80082fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d02c      	beq.n	800833c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
 80082ea:	e027      	b.n	800833c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d023      	beq.n	800833c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	e01e      	b.n	800833c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10f      	bne.n	800832c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0210 	bic.w	r2, r2, #16
 800831a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 8306 	beq.w	8008952 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8088 	beq.w	8008464 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2204      	movs	r2, #4
 8008358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a7a      	ldr	r2, [pc, #488]	@ (800854c <HAL_DMA_IRQHandler+0xa08>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d04a      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a79      	ldr	r2, [pc, #484]	@ (8008550 <HAL_DMA_IRQHandler+0xa0c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d045      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a77      	ldr	r2, [pc, #476]	@ (8008554 <HAL_DMA_IRQHandler+0xa10>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d040      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a76      	ldr	r2, [pc, #472]	@ (8008558 <HAL_DMA_IRQHandler+0xa14>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d03b      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a74      	ldr	r2, [pc, #464]	@ (800855c <HAL_DMA_IRQHandler+0xa18>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d036      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a73      	ldr	r2, [pc, #460]	@ (8008560 <HAL_DMA_IRQHandler+0xa1c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d031      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a71      	ldr	r2, [pc, #452]	@ (8008564 <HAL_DMA_IRQHandler+0xa20>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d02c      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a70      	ldr	r2, [pc, #448]	@ (8008568 <HAL_DMA_IRQHandler+0xa24>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d027      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a6e      	ldr	r2, [pc, #440]	@ (800856c <HAL_DMA_IRQHandler+0xa28>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d022      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a6d      	ldr	r2, [pc, #436]	@ (8008570 <HAL_DMA_IRQHandler+0xa2c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d01d      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a6b      	ldr	r2, [pc, #428]	@ (8008574 <HAL_DMA_IRQHandler+0xa30>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d018      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a6a      	ldr	r2, [pc, #424]	@ (8008578 <HAL_DMA_IRQHandler+0xa34>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d013      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a68      	ldr	r2, [pc, #416]	@ (800857c <HAL_DMA_IRQHandler+0xa38>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00e      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a67      	ldr	r2, [pc, #412]	@ (8008580 <HAL_DMA_IRQHandler+0xa3c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d009      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a65      	ldr	r2, [pc, #404]	@ (8008584 <HAL_DMA_IRQHandler+0xa40>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d004      	beq.n	80083fc <HAL_DMA_IRQHandler+0x8b8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a64      	ldr	r2, [pc, #400]	@ (8008588 <HAL_DMA_IRQHandler+0xa44>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d108      	bne.n	800840e <HAL_DMA_IRQHandler+0x8ca>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e007      	b.n	800841e <HAL_DMA_IRQHandler+0x8da>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0201 	bic.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008426:	429a      	cmp	r2, r3
 8008428:	d307      	bcc.n	800843a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f2      	bne.n	800841e <HAL_DMA_IRQHandler+0x8da>
 8008438:	e000      	b.n	800843c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800843a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2203      	movs	r2, #3
 800844e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008452:	e003      	b.n	800845c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8272 	beq.w	8008952 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
 8008476:	e26c      	b.n	8008952 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a43      	ldr	r2, [pc, #268]	@ (800858c <HAL_DMA_IRQHandler+0xa48>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d022      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a42      	ldr	r2, [pc, #264]	@ (8008590 <HAL_DMA_IRQHandler+0xa4c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d01d      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a40      	ldr	r2, [pc, #256]	@ (8008594 <HAL_DMA_IRQHandler+0xa50>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d018      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a3f      	ldr	r2, [pc, #252]	@ (8008598 <HAL_DMA_IRQHandler+0xa54>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a3d      	ldr	r2, [pc, #244]	@ (800859c <HAL_DMA_IRQHandler+0xa58>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00e      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a3c      	ldr	r2, [pc, #240]	@ (80085a0 <HAL_DMA_IRQHandler+0xa5c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d009      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a3a      	ldr	r2, [pc, #232]	@ (80085a4 <HAL_DMA_IRQHandler+0xa60>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d004      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x984>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a39      	ldr	r2, [pc, #228]	@ (80085a8 <HAL_DMA_IRQHandler+0xa64>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d101      	bne.n	80084cc <HAL_DMA_IRQHandler+0x988>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <HAL_DMA_IRQHandler+0x98a>
 80084cc:	2300      	movs	r3, #0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 823f 	beq.w	8008952 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	2204      	movs	r2, #4
 80084e6:	409a      	lsls	r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80cd 	beq.w	800868c <HAL_DMA_IRQHandler+0xb48>
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80c7 	beq.w	800868c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	2204      	movs	r2, #4
 8008508:	409a      	lsls	r2, r3
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d049      	beq.n	80085ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8210 	beq.w	800894c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008534:	e20a      	b.n	800894c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8206 	beq.w	800894c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008548:	e200      	b.n	800894c <HAL_DMA_IRQHandler+0xe08>
 800854a:	bf00      	nop
 800854c:	40020010 	.word	0x40020010
 8008550:	40020028 	.word	0x40020028
 8008554:	40020040 	.word	0x40020040
 8008558:	40020058 	.word	0x40020058
 800855c:	40020070 	.word	0x40020070
 8008560:	40020088 	.word	0x40020088
 8008564:	400200a0 	.word	0x400200a0
 8008568:	400200b8 	.word	0x400200b8
 800856c:	40020410 	.word	0x40020410
 8008570:	40020428 	.word	0x40020428
 8008574:	40020440 	.word	0x40020440
 8008578:	40020458 	.word	0x40020458
 800857c:	40020470 	.word	0x40020470
 8008580:	40020488 	.word	0x40020488
 8008584:	400204a0 	.word	0x400204a0
 8008588:	400204b8 	.word	0x400204b8
 800858c:	58025408 	.word	0x58025408
 8008590:	5802541c 	.word	0x5802541c
 8008594:	58025430 	.word	0x58025430
 8008598:	58025444 	.word	0x58025444
 800859c:	58025458 	.word	0x58025458
 80085a0:	5802546c 	.word	0x5802546c
 80085a4:	58025480 	.word	0x58025480
 80085a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d160      	bne.n	8008678 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a7f      	ldr	r2, [pc, #508]	@ (80087b8 <HAL_DMA_IRQHandler+0xc74>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d04a      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a7d      	ldr	r2, [pc, #500]	@ (80087bc <HAL_DMA_IRQHandler+0xc78>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d045      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7c      	ldr	r2, [pc, #496]	@ (80087c0 <HAL_DMA_IRQHandler+0xc7c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d040      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a7a      	ldr	r2, [pc, #488]	@ (80087c4 <HAL_DMA_IRQHandler+0xc80>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d03b      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a79      	ldr	r2, [pc, #484]	@ (80087c8 <HAL_DMA_IRQHandler+0xc84>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d036      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a77      	ldr	r2, [pc, #476]	@ (80087cc <HAL_DMA_IRQHandler+0xc88>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d031      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a76      	ldr	r2, [pc, #472]	@ (80087d0 <HAL_DMA_IRQHandler+0xc8c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d02c      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a74      	ldr	r2, [pc, #464]	@ (80087d4 <HAL_DMA_IRQHandler+0xc90>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d027      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a73      	ldr	r2, [pc, #460]	@ (80087d8 <HAL_DMA_IRQHandler+0xc94>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d022      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a71      	ldr	r2, [pc, #452]	@ (80087dc <HAL_DMA_IRQHandler+0xc98>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01d      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a70      	ldr	r2, [pc, #448]	@ (80087e0 <HAL_DMA_IRQHandler+0xc9c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d018      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a6e      	ldr	r2, [pc, #440]	@ (80087e4 <HAL_DMA_IRQHandler+0xca0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a6d      	ldr	r2, [pc, #436]	@ (80087e8 <HAL_DMA_IRQHandler+0xca4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00e      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a6b      	ldr	r2, [pc, #428]	@ (80087ec <HAL_DMA_IRQHandler+0xca8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d009      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a6a      	ldr	r2, [pc, #424]	@ (80087f0 <HAL_DMA_IRQHandler+0xcac>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d004      	beq.n	8008656 <HAL_DMA_IRQHandler+0xb12>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a68      	ldr	r2, [pc, #416]	@ (80087f4 <HAL_DMA_IRQHandler+0xcb0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d108      	bne.n	8008668 <HAL_DMA_IRQHandler+0xb24>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0208 	bic.w	r2, r2, #8
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e007      	b.n	8008678 <HAL_DMA_IRQHandler+0xb34>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0204 	bic.w	r2, r2, #4
 8008676:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8165 	beq.w	800894c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800868a:	e15f      	b.n	800894c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	2202      	movs	r2, #2
 8008696:	409a      	lsls	r2, r3
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80c5 	beq.w	800882c <HAL_DMA_IRQHandler+0xce8>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80bf 	beq.w	800882c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2202      	movs	r2, #2
 80086b8:	409a      	lsls	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d018      	beq.n	80086fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 813a 	beq.w	8008950 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e4:	e134      	b.n	8008950 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8130 	beq.w	8008950 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086f8:	e12a      	b.n	8008950 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8089 	bne.w	8008818 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a2b      	ldr	r2, [pc, #172]	@ (80087b8 <HAL_DMA_IRQHandler+0xc74>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d04a      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a29      	ldr	r2, [pc, #164]	@ (80087bc <HAL_DMA_IRQHandler+0xc78>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d045      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a28      	ldr	r2, [pc, #160]	@ (80087c0 <HAL_DMA_IRQHandler+0xc7c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d040      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a26      	ldr	r2, [pc, #152]	@ (80087c4 <HAL_DMA_IRQHandler+0xc80>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d03b      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a25      	ldr	r2, [pc, #148]	@ (80087c8 <HAL_DMA_IRQHandler+0xc84>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d036      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a23      	ldr	r2, [pc, #140]	@ (80087cc <HAL_DMA_IRQHandler+0xc88>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d031      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a22      	ldr	r2, [pc, #136]	@ (80087d0 <HAL_DMA_IRQHandler+0xc8c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d02c      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a20      	ldr	r2, [pc, #128]	@ (80087d4 <HAL_DMA_IRQHandler+0xc90>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d027      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <HAL_DMA_IRQHandler+0xc94>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d022      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1d      	ldr	r2, [pc, #116]	@ (80087dc <HAL_DMA_IRQHandler+0xc98>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01d      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1c      	ldr	r2, [pc, #112]	@ (80087e0 <HAL_DMA_IRQHandler+0xc9c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d018      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1a      	ldr	r2, [pc, #104]	@ (80087e4 <HAL_DMA_IRQHandler+0xca0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d013      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a19      	ldr	r2, [pc, #100]	@ (80087e8 <HAL_DMA_IRQHandler+0xca4>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00e      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a17      	ldr	r2, [pc, #92]	@ (80087ec <HAL_DMA_IRQHandler+0xca8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d009      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a16      	ldr	r2, [pc, #88]	@ (80087f0 <HAL_DMA_IRQHandler+0xcac>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d004      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xc62>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a14      	ldr	r2, [pc, #80]	@ (80087f4 <HAL_DMA_IRQHandler+0xcb0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d128      	bne.n	80087f8 <HAL_DMA_IRQHandler+0xcb4>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0214 	bic.w	r2, r2, #20
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e027      	b.n	8008808 <HAL_DMA_IRQHandler+0xcc4>
 80087b8:	40020010 	.word	0x40020010
 80087bc:	40020028 	.word	0x40020028
 80087c0:	40020040 	.word	0x40020040
 80087c4:	40020058 	.word	0x40020058
 80087c8:	40020070 	.word	0x40020070
 80087cc:	40020088 	.word	0x40020088
 80087d0:	400200a0 	.word	0x400200a0
 80087d4:	400200b8 	.word	0x400200b8
 80087d8:	40020410 	.word	0x40020410
 80087dc:	40020428 	.word	0x40020428
 80087e0:	40020440 	.word	0x40020440
 80087e4:	40020458 	.word	0x40020458
 80087e8:	40020470 	.word	0x40020470
 80087ec:	40020488 	.word	0x40020488
 80087f0:	400204a0 	.word	0x400204a0
 80087f4:	400204b8 	.word	0x400204b8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 020a 	bic.w	r2, r2, #10
 8008806:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8097 	beq.w	8008950 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800882a:	e091      	b.n	8008950 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008830:	f003 031f 	and.w	r3, r3, #31
 8008834:	2208      	movs	r2, #8
 8008836:	409a      	lsls	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8088 	beq.w	8008952 <HAL_DMA_IRQHandler+0xe0e>
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 8082 	beq.w	8008952 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a41      	ldr	r2, [pc, #260]	@ (8008958 <HAL_DMA_IRQHandler+0xe14>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d04a      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a3f      	ldr	r2, [pc, #252]	@ (800895c <HAL_DMA_IRQHandler+0xe18>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d045      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a3e      	ldr	r2, [pc, #248]	@ (8008960 <HAL_DMA_IRQHandler+0xe1c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d040      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a3c      	ldr	r2, [pc, #240]	@ (8008964 <HAL_DMA_IRQHandler+0xe20>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d03b      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a3b      	ldr	r2, [pc, #236]	@ (8008968 <HAL_DMA_IRQHandler+0xe24>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d036      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a39      	ldr	r2, [pc, #228]	@ (800896c <HAL_DMA_IRQHandler+0xe28>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d031      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a38      	ldr	r2, [pc, #224]	@ (8008970 <HAL_DMA_IRQHandler+0xe2c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d02c      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a36      	ldr	r2, [pc, #216]	@ (8008974 <HAL_DMA_IRQHandler+0xe30>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d027      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a35      	ldr	r2, [pc, #212]	@ (8008978 <HAL_DMA_IRQHandler+0xe34>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a33      	ldr	r2, [pc, #204]	@ (800897c <HAL_DMA_IRQHandler+0xe38>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d01d      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a32      	ldr	r2, [pc, #200]	@ (8008980 <HAL_DMA_IRQHandler+0xe3c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a30      	ldr	r2, [pc, #192]	@ (8008984 <HAL_DMA_IRQHandler+0xe40>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008988 <HAL_DMA_IRQHandler+0xe44>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2d      	ldr	r2, [pc, #180]	@ (800898c <HAL_DMA_IRQHandler+0xe48>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2c      	ldr	r2, [pc, #176]	@ (8008990 <HAL_DMA_IRQHandler+0xe4c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_DMA_IRQHandler+0xdaa>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008994 <HAL_DMA_IRQHandler+0xe50>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <HAL_DMA_IRQHandler+0xdbc>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 021c 	bic.w	r2, r2, #28
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	e007      	b.n	8008910 <HAL_DMA_IRQHandler+0xdcc>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 020e 	bic.w	r2, r2, #14
 800890e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2201      	movs	r2, #1
 800891a:	409a      	lsls	r2, r3
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
 8008946:	e004      	b.n	8008952 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008948:	bf00      	nop
 800894a:	e002      	b.n	8008952 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800894c:	bf00      	nop
 800894e:	e000      	b.n	8008952 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008950:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008952:	3728      	adds	r7, #40	@ 0x28
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	40020010 	.word	0x40020010
 800895c:	40020028 	.word	0x40020028
 8008960:	40020040 	.word	0x40020040
 8008964:	40020058 	.word	0x40020058
 8008968:	40020070 	.word	0x40020070
 800896c:	40020088 	.word	0x40020088
 8008970:	400200a0 	.word	0x400200a0
 8008974:	400200b8 	.word	0x400200b8
 8008978:	40020410 	.word	0x40020410
 800897c:	40020428 	.word	0x40020428
 8008980:	40020440 	.word	0x40020440
 8008984:	40020458 	.word	0x40020458
 8008988:	40020470 	.word	0x40020470
 800898c:	40020488 	.word	0x40020488
 8008990:	400204a0 	.word	0x400204a0
 8008994:	400204b8 	.word	0x400204b8

08008998 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a7f      	ldr	r2, [pc, #508]	@ (8008bb4 <DMA_SetConfig+0x21c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d072      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a7d      	ldr	r2, [pc, #500]	@ (8008bb8 <DMA_SetConfig+0x220>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d06d      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a7c      	ldr	r2, [pc, #496]	@ (8008bbc <DMA_SetConfig+0x224>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d068      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a7a      	ldr	r2, [pc, #488]	@ (8008bc0 <DMA_SetConfig+0x228>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d063      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a79      	ldr	r2, [pc, #484]	@ (8008bc4 <DMA_SetConfig+0x22c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d05e      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a77      	ldr	r2, [pc, #476]	@ (8008bc8 <DMA_SetConfig+0x230>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d059      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a76      	ldr	r2, [pc, #472]	@ (8008bcc <DMA_SetConfig+0x234>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d054      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a74      	ldr	r2, [pc, #464]	@ (8008bd0 <DMA_SetConfig+0x238>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d04f      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a73      	ldr	r2, [pc, #460]	@ (8008bd4 <DMA_SetConfig+0x23c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d04a      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a71      	ldr	r2, [pc, #452]	@ (8008bd8 <DMA_SetConfig+0x240>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d045      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a70      	ldr	r2, [pc, #448]	@ (8008bdc <DMA_SetConfig+0x244>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d040      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a6e      	ldr	r2, [pc, #440]	@ (8008be0 <DMA_SetConfig+0x248>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d03b      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8008be4 <DMA_SetConfig+0x24c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d036      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a6b      	ldr	r2, [pc, #428]	@ (8008be8 <DMA_SetConfig+0x250>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d031      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a6a      	ldr	r2, [pc, #424]	@ (8008bec <DMA_SetConfig+0x254>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d02c      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a68      	ldr	r2, [pc, #416]	@ (8008bf0 <DMA_SetConfig+0x258>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d027      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a67      	ldr	r2, [pc, #412]	@ (8008bf4 <DMA_SetConfig+0x25c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d022      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a65      	ldr	r2, [pc, #404]	@ (8008bf8 <DMA_SetConfig+0x260>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d01d      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a64      	ldr	r2, [pc, #400]	@ (8008bfc <DMA_SetConfig+0x264>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a62      	ldr	r2, [pc, #392]	@ (8008c00 <DMA_SetConfig+0x268>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a61      	ldr	r2, [pc, #388]	@ (8008c04 <DMA_SetConfig+0x26c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00e      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a5f      	ldr	r2, [pc, #380]	@ (8008c08 <DMA_SetConfig+0x270>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a5e      	ldr	r2, [pc, #376]	@ (8008c0c <DMA_SetConfig+0x274>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <DMA_SetConfig+0x10a>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8008c10 <DMA_SetConfig+0x278>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d101      	bne.n	8008aa6 <DMA_SetConfig+0x10e>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <DMA_SetConfig+0x110>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00d      	beq.n	8008ac8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ab4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008ac6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a39      	ldr	r2, [pc, #228]	@ (8008bb4 <DMA_SetConfig+0x21c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d04a      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a38      	ldr	r2, [pc, #224]	@ (8008bb8 <DMA_SetConfig+0x220>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d045      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a36      	ldr	r2, [pc, #216]	@ (8008bbc <DMA_SetConfig+0x224>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d040      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a35      	ldr	r2, [pc, #212]	@ (8008bc0 <DMA_SetConfig+0x228>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d03b      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a33      	ldr	r2, [pc, #204]	@ (8008bc4 <DMA_SetConfig+0x22c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d036      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a32      	ldr	r2, [pc, #200]	@ (8008bc8 <DMA_SetConfig+0x230>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d031      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a30      	ldr	r2, [pc, #192]	@ (8008bcc <DMA_SetConfig+0x234>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d02c      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a2f      	ldr	r2, [pc, #188]	@ (8008bd0 <DMA_SetConfig+0x238>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d027      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd4 <DMA_SetConfig+0x23c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d022      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a2c      	ldr	r2, [pc, #176]	@ (8008bd8 <DMA_SetConfig+0x240>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d01d      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <DMA_SetConfig+0x244>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d018      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a29      	ldr	r2, [pc, #164]	@ (8008be0 <DMA_SetConfig+0x248>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a27      	ldr	r2, [pc, #156]	@ (8008be4 <DMA_SetConfig+0x24c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00e      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a26      	ldr	r2, [pc, #152]	@ (8008be8 <DMA_SetConfig+0x250>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d009      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a24      	ldr	r2, [pc, #144]	@ (8008bec <DMA_SetConfig+0x254>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d004      	beq.n	8008b68 <DMA_SetConfig+0x1d0>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a23      	ldr	r2, [pc, #140]	@ (8008bf0 <DMA_SetConfig+0x258>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d101      	bne.n	8008b6c <DMA_SetConfig+0x1d4>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <DMA_SetConfig+0x1d6>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d059      	beq.n	8008c26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b76:	f003 031f 	and.w	r3, r3, #31
 8008b7a:	223f      	movs	r2, #63	@ 0x3f
 8008b7c:	409a      	lsls	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ba0:	d138      	bne.n	8008c14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008bb2:	e086      	b.n	8008cc2 <DMA_SetConfig+0x32a>
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8
 8008bf4:	58025408 	.word	0x58025408
 8008bf8:	5802541c 	.word	0x5802541c
 8008bfc:	58025430 	.word	0x58025430
 8008c00:	58025444 	.word	0x58025444
 8008c04:	58025458 	.word	0x58025458
 8008c08:	5802546c 	.word	0x5802546c
 8008c0c:	58025480 	.word	0x58025480
 8008c10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]
}
 8008c24:	e04d      	b.n	8008cc2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a29      	ldr	r2, [pc, #164]	@ (8008cd0 <DMA_SetConfig+0x338>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d022      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a27      	ldr	r2, [pc, #156]	@ (8008cd4 <DMA_SetConfig+0x33c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01d      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a26      	ldr	r2, [pc, #152]	@ (8008cd8 <DMA_SetConfig+0x340>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a24      	ldr	r2, [pc, #144]	@ (8008cdc <DMA_SetConfig+0x344>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a23      	ldr	r2, [pc, #140]	@ (8008ce0 <DMA_SetConfig+0x348>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a21      	ldr	r2, [pc, #132]	@ (8008ce4 <DMA_SetConfig+0x34c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a20      	ldr	r2, [pc, #128]	@ (8008ce8 <DMA_SetConfig+0x350>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <DMA_SetConfig+0x2de>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1e      	ldr	r2, [pc, #120]	@ (8008cec <DMA_SetConfig+0x354>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d101      	bne.n	8008c7a <DMA_SetConfig+0x2e2>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <DMA_SetConfig+0x2e4>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d020      	beq.n	8008cc2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	2201      	movs	r2, #1
 8008c8a:	409a      	lsls	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2b40      	cmp	r3, #64	@ 0x40
 8008c9e:	d108      	bne.n	8008cb2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	60da      	str	r2, [r3, #12]
}
 8008cb0:	e007      	b.n	8008cc2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	60da      	str	r2, [r3, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	58025408 	.word	0x58025408
 8008cd4:	5802541c 	.word	0x5802541c
 8008cd8:	58025430 	.word	0x58025430
 8008cdc:	58025444 	.word	0x58025444
 8008ce0:	58025458 	.word	0x58025458
 8008ce4:	5802546c 	.word	0x5802546c
 8008ce8:	58025480 	.word	0x58025480
 8008cec:	58025494 	.word	0x58025494

08008cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a42      	ldr	r2, [pc, #264]	@ (8008e08 <DMA_CalcBaseAndBitshift+0x118>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d04a      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a41      	ldr	r2, [pc, #260]	@ (8008e0c <DMA_CalcBaseAndBitshift+0x11c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d045      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a3f      	ldr	r2, [pc, #252]	@ (8008e10 <DMA_CalcBaseAndBitshift+0x120>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d040      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8008e14 <DMA_CalcBaseAndBitshift+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d03b      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a3c      	ldr	r2, [pc, #240]	@ (8008e18 <DMA_CalcBaseAndBitshift+0x128>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d036      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8008e1c <DMA_CalcBaseAndBitshift+0x12c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d031      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a39      	ldr	r2, [pc, #228]	@ (8008e20 <DMA_CalcBaseAndBitshift+0x130>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d02c      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a38      	ldr	r2, [pc, #224]	@ (8008e24 <DMA_CalcBaseAndBitshift+0x134>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d027      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a36      	ldr	r2, [pc, #216]	@ (8008e28 <DMA_CalcBaseAndBitshift+0x138>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d022      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a35      	ldr	r2, [pc, #212]	@ (8008e2c <DMA_CalcBaseAndBitshift+0x13c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d01d      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a33      	ldr	r2, [pc, #204]	@ (8008e30 <DMA_CalcBaseAndBitshift+0x140>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d018      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a32      	ldr	r2, [pc, #200]	@ (8008e34 <DMA_CalcBaseAndBitshift+0x144>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a30      	ldr	r2, [pc, #192]	@ (8008e38 <DMA_CalcBaseAndBitshift+0x148>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00e      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e3c <DMA_CalcBaseAndBitshift+0x14c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d009      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a2d      	ldr	r2, [pc, #180]	@ (8008e40 <DMA_CalcBaseAndBitshift+0x150>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d004      	beq.n	8008d98 <DMA_CalcBaseAndBitshift+0xa8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2c      	ldr	r2, [pc, #176]	@ (8008e44 <DMA_CalcBaseAndBitshift+0x154>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <DMA_CalcBaseAndBitshift+0xac>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <DMA_CalcBaseAndBitshift+0xae>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d024      	beq.n	8008dec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	3b10      	subs	r3, #16
 8008daa:	4a27      	ldr	r2, [pc, #156]	@ (8008e48 <DMA_CalcBaseAndBitshift+0x158>)
 8008dac:	fba2 2303 	umull	r2, r3, r2, r3
 8008db0:	091b      	lsrs	r3, r3, #4
 8008db2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	4a24      	ldr	r2, [pc, #144]	@ (8008e4c <DMA_CalcBaseAndBitshift+0x15c>)
 8008dbc:	5cd3      	ldrb	r3, [r2, r3]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d908      	bls.n	8008ddc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e50 <DMA_CalcBaseAndBitshift+0x160>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dda:	e00d      	b.n	8008df8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e50 <DMA_CalcBaseAndBitshift+0x160>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dea:	e005      	b.n	8008df8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	40020010 	.word	0x40020010
 8008e0c:	40020028 	.word	0x40020028
 8008e10:	40020040 	.word	0x40020040
 8008e14:	40020058 	.word	0x40020058
 8008e18:	40020070 	.word	0x40020070
 8008e1c:	40020088 	.word	0x40020088
 8008e20:	400200a0 	.word	0x400200a0
 8008e24:	400200b8 	.word	0x400200b8
 8008e28:	40020410 	.word	0x40020410
 8008e2c:	40020428 	.word	0x40020428
 8008e30:	40020440 	.word	0x40020440
 8008e34:	40020458 	.word	0x40020458
 8008e38:	40020470 	.word	0x40020470
 8008e3c:	40020488 	.word	0x40020488
 8008e40:	400204a0 	.word	0x400204a0
 8008e44:	400204b8 	.word	0x400204b8
 8008e48:	aaaaaaab 	.word	0xaaaaaaab
 8008e4c:	0801aae8 	.word	0x0801aae8
 8008e50:	fffffc00 	.word	0xfffffc00

08008e54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d120      	bne.n	8008eaa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d858      	bhi.n	8008f22 <DMA_CheckFifoParam+0xce>
 8008e70:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <DMA_CheckFifoParam+0x24>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008e9b 	.word	0x08008e9b
 8008e80:	08008e89 	.word	0x08008e89
 8008e84:	08008f23 	.word	0x08008f23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d048      	beq.n	8008f26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e98:	e045      	b.n	8008f26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ea2:	d142      	bne.n	8008f2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ea8:	e03f      	b.n	8008f2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb2:	d123      	bne.n	8008efc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d838      	bhi.n	8008f2e <DMA_CheckFifoParam+0xda>
 8008ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <DMA_CheckFifoParam+0x70>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008ed5 	.word	0x08008ed5
 8008ec8:	08008edb 	.word	0x08008edb
 8008ecc:	08008ed5 	.word	0x08008ed5
 8008ed0:	08008eed 	.word	0x08008eed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
        break;
 8008ed8:	e030      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d025      	beq.n	8008f32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008eea:	e022      	b.n	8008f32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ef4:	d11f      	bne.n	8008f36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008efa:	e01c      	b.n	8008f36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d902      	bls.n	8008f0a <DMA_CheckFifoParam+0xb6>
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d003      	beq.n	8008f10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008f08:	e018      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	73fb      	strb	r3, [r7, #15]
        break;
 8008f0e:	e015      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00e      	beq.n	8008f3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e00b      	b.n	8008f3a <DMA_CheckFifoParam+0xe6>
        break;
 8008f22:	bf00      	nop
 8008f24:	e00a      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        break;
 8008f26:	bf00      	nop
 8008f28:	e008      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        break;
 8008f2a:	bf00      	nop
 8008f2c:	e006      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        break;
 8008f2e:	bf00      	nop
 8008f30:	e004      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
        break;
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <DMA_CheckFifoParam+0xe8>
    break;
 8008f3a:	bf00      	nop
    }
  }

  return status;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop

08008f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a38      	ldr	r2, [pc, #224]	@ (8009040 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d022      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a36      	ldr	r2, [pc, #216]	@ (8009044 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01d      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a35      	ldr	r2, [pc, #212]	@ (8009048 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d018      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a33      	ldr	r2, [pc, #204]	@ (800904c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d013      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a32      	ldr	r2, [pc, #200]	@ (8009050 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00e      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a30      	ldr	r2, [pc, #192]	@ (8009054 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d009      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8009058 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d004      	beq.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800905c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d101      	bne.n	8008fae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01a      	beq.n	8008fea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b08      	subs	r3, #8
 8008fbc:	4a28      	ldr	r2, [pc, #160]	@ (8009060 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4b26      	ldr	r3, [pc, #152]	@ (8009064 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a24      	ldr	r2, [pc, #144]	@ (8009068 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	409a      	lsls	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008fe8:	e024      	b.n	8009034 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	3b10      	subs	r3, #16
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8009070 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d806      	bhi.n	8009012 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4a1b      	ldr	r2, [pc, #108]	@ (8009074 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d902      	bls.n	8009012 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3308      	adds	r3, #8
 8009010:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4b18      	ldr	r3, [pc, #96]	@ (8009078 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	461a      	mov	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a16      	ldr	r2, [pc, #88]	@ (800907c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009024:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	2201      	movs	r2, #1
 800902e:	409a      	lsls	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	58025408 	.word	0x58025408
 8009044:	5802541c 	.word	0x5802541c
 8009048:	58025430 	.word	0x58025430
 800904c:	58025444 	.word	0x58025444
 8009050:	58025458 	.word	0x58025458
 8009054:	5802546c 	.word	0x5802546c
 8009058:	58025480 	.word	0x58025480
 800905c:	58025494 	.word	0x58025494
 8009060:	cccccccd 	.word	0xcccccccd
 8009064:	16009600 	.word	0x16009600
 8009068:	58025880 	.word	0x58025880
 800906c:	aaaaaaab 	.word	0xaaaaaaab
 8009070:	400204b8 	.word	0x400204b8
 8009074:	4002040f 	.word	0x4002040f
 8009078:	10008200 	.word	0x10008200
 800907c:	40020880 	.word	0x40020880

08009080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d04a      	beq.n	800912c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b08      	cmp	r3, #8
 800909a:	d847      	bhi.n	800912c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a25      	ldr	r2, [pc, #148]	@ (8009138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d022      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a24      	ldr	r2, [pc, #144]	@ (800913c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d01d      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a22      	ldr	r2, [pc, #136]	@ (8009140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d018      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a21      	ldr	r2, [pc, #132]	@ (8009144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d013      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00e      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a1e      	ldr	r2, [pc, #120]	@ (800914c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d009      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d004      	beq.n	80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d101      	bne.n	80090f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e000      	b.n	80090f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80090f0:	2300      	movs	r3, #0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4b17      	ldr	r3, [pc, #92]	@ (8009158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a15      	ldr	r2, [pc, #84]	@ (800915c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009108:	671a      	str	r2, [r3, #112]	@ 0x70
 800910a:	e009      	b.n	8009120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	461a      	mov	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a11      	ldr	r2, [pc, #68]	@ (8009164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800911e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3b01      	subs	r3, #1
 8009124:	2201      	movs	r2, #1
 8009126:	409a      	lsls	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800912c:	bf00      	nop
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	58025408 	.word	0x58025408
 800913c:	5802541c 	.word	0x5802541c
 8009140:	58025430 	.word	0x58025430
 8009144:	58025444 	.word	0x58025444
 8009148:	58025458 	.word	0x58025458
 800914c:	5802546c 	.word	0x5802546c
 8009150:	58025480 	.word	0x58025480
 8009154:	58025494 	.word	0x58025494
 8009158:	1600963f 	.word	0x1600963f
 800915c:	58025940 	.word	0x58025940
 8009160:	1000823f 	.word	0x1000823f
 8009164:	40020940 	.word	0x40020940

08009168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009168:	b480      	push	{r7}
 800916a:	b089      	sub	sp, #36	@ 0x24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009176:	4b86      	ldr	r3, [pc, #536]	@ (8009390 <HAL_GPIO_Init+0x228>)
 8009178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800917a:	e18c      	b.n	8009496 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	2101      	movs	r1, #1
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	fa01 f303 	lsl.w	r3, r1, r3
 8009188:	4013      	ands	r3, r2
 800918a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 817e 	beq.w	8009490 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	2b01      	cmp	r3, #1
 800919e:	d005      	beq.n	80091ac <HAL_GPIO_Init+0x44>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d130      	bne.n	800920e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	2203      	movs	r2, #3
 80091b8:	fa02 f303 	lsl.w	r3, r2, r3
 80091bc:	43db      	mvns	r3, r3
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	4013      	ands	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80091e2:	2201      	movs	r2, #1
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	43db      	mvns	r3, r3
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	4013      	ands	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	091b      	lsrs	r3, r3, #4
 80091f8:	f003 0201 	and.w	r2, r3, #1
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	4313      	orrs	r3, r2
 8009206:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b03      	cmp	r3, #3
 8009218:	d017      	beq.n	800924a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2203      	movs	r2, #3
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4313      	orrs	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b02      	cmp	r3, #2
 8009254:	d123      	bne.n	800929e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	08da      	lsrs	r2, r3, #3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3208      	adds	r2, #8
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	220f      	movs	r2, #15
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	43db      	mvns	r3, r3
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	4013      	ands	r3, r2
 8009278:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	691a      	ldr	r2, [r3, #16]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	fa02 f303 	lsl.w	r3, r2, r3
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	4313      	orrs	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	08da      	lsrs	r2, r3, #3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3208      	adds	r2, #8
 8009298:	69b9      	ldr	r1, [r7, #24]
 800929a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	2203      	movs	r2, #3
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	43db      	mvns	r3, r3
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	4013      	ands	r3, r2
 80092b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f003 0203 	and.w	r2, r3, #3
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 80d8 	beq.w	8009490 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009394 <HAL_GPIO_Init+0x22c>)
 80092e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092e6:	4a2b      	ldr	r2, [pc, #172]	@ (8009394 <HAL_GPIO_Init+0x22c>)
 80092e8:	f043 0302 	orr.w	r3, r3, #2
 80092ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80092f0:	4b28      	ldr	r3, [pc, #160]	@ (8009394 <HAL_GPIO_Init+0x22c>)
 80092f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80092fe:	4a26      	ldr	r2, [pc, #152]	@ (8009398 <HAL_GPIO_Init+0x230>)
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	089b      	lsrs	r3, r3, #2
 8009304:	3302      	adds	r3, #2
 8009306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800930a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	220f      	movs	r2, #15
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	43db      	mvns	r3, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4013      	ands	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1d      	ldr	r2, [pc, #116]	@ (800939c <HAL_GPIO_Init+0x234>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d04a      	beq.n	80093c0 <HAL_GPIO_Init+0x258>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1c      	ldr	r2, [pc, #112]	@ (80093a0 <HAL_GPIO_Init+0x238>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d02b      	beq.n	800938a <HAL_GPIO_Init+0x222>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1b      	ldr	r2, [pc, #108]	@ (80093a4 <HAL_GPIO_Init+0x23c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d025      	beq.n	8009386 <HAL_GPIO_Init+0x21e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a1a      	ldr	r2, [pc, #104]	@ (80093a8 <HAL_GPIO_Init+0x240>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d01f      	beq.n	8009382 <HAL_GPIO_Init+0x21a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a19      	ldr	r2, [pc, #100]	@ (80093ac <HAL_GPIO_Init+0x244>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d019      	beq.n	800937e <HAL_GPIO_Init+0x216>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a18      	ldr	r2, [pc, #96]	@ (80093b0 <HAL_GPIO_Init+0x248>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d013      	beq.n	800937a <HAL_GPIO_Init+0x212>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a17      	ldr	r2, [pc, #92]	@ (80093b4 <HAL_GPIO_Init+0x24c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00d      	beq.n	8009376 <HAL_GPIO_Init+0x20e>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a16      	ldr	r2, [pc, #88]	@ (80093b8 <HAL_GPIO_Init+0x250>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d007      	beq.n	8009372 <HAL_GPIO_Init+0x20a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a15      	ldr	r2, [pc, #84]	@ (80093bc <HAL_GPIO_Init+0x254>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d101      	bne.n	800936e <HAL_GPIO_Init+0x206>
 800936a:	2309      	movs	r3, #9
 800936c:	e029      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 800936e:	230a      	movs	r3, #10
 8009370:	e027      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 8009372:	2307      	movs	r3, #7
 8009374:	e025      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 8009376:	2306      	movs	r3, #6
 8009378:	e023      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 800937a:	2305      	movs	r3, #5
 800937c:	e021      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 800937e:	2304      	movs	r3, #4
 8009380:	e01f      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 8009382:	2303      	movs	r3, #3
 8009384:	e01d      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 8009386:	2302      	movs	r3, #2
 8009388:	e01b      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 800938a:	2301      	movs	r3, #1
 800938c:	e019      	b.n	80093c2 <HAL_GPIO_Init+0x25a>
 800938e:	bf00      	nop
 8009390:	58000080 	.word	0x58000080
 8009394:	58024400 	.word	0x58024400
 8009398:	58000400 	.word	0x58000400
 800939c:	58020000 	.word	0x58020000
 80093a0:	58020400 	.word	0x58020400
 80093a4:	58020800 	.word	0x58020800
 80093a8:	58020c00 	.word	0x58020c00
 80093ac:	58021000 	.word	0x58021000
 80093b0:	58021400 	.word	0x58021400
 80093b4:	58021800 	.word	0x58021800
 80093b8:	58021c00 	.word	0x58021c00
 80093bc:	58022400 	.word	0x58022400
 80093c0:	2300      	movs	r3, #0
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	f002 0203 	and.w	r2, r2, #3
 80093c8:	0092      	lsls	r2, r2, #2
 80093ca:	4093      	lsls	r3, r2
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80093d2:	4938      	ldr	r1, [pc, #224]	@ (80094b4 <HAL_GPIO_Init+0x34c>)
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	089b      	lsrs	r3, r3, #2
 80093d8:	3302      	adds	r3, #2
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80093e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	43db      	mvns	r3, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4013      	ands	r3, r2
 80093f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4313      	orrs	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800940e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	43db      	mvns	r3, r3
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	4013      	ands	r3, r2
 800941e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009434:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	43db      	mvns	r3, r3
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	4013      	ands	r3, r2
 800944a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	43db      	mvns	r3, r3
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	4013      	ands	r3, r2
 8009474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	4313      	orrs	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	3301      	adds	r3, #1
 8009494:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f47f ae6b 	bne.w	800917c <HAL_GPIO_Init+0x14>
  }
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	3724      	adds	r7, #36	@ 0x24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	58000400 	.word	0x58000400

080094b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e001      	b.n	80094da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	807b      	strh	r3, [r7, #2]
 80094f4:	4613      	mov	r3, r2
 80094f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094f8:	787b      	ldrb	r3, [r7, #1]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094fe:	887a      	ldrh	r2, [r7, #2]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009504:	e003      	b.n	800950e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009506:	887b      	ldrh	r3, [r7, #2]
 8009508:	041a      	lsls	r2, r3, #16
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	619a      	str	r2, [r3, #24]
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e08b      	b.n	8009646 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7f8 fbc6 	bl	8001cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2224      	movs	r2, #36	@ 0x24
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f022 0201 	bic.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800956c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800957c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d107      	bne.n	8009596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	e006      	b.n	80095a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80095a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d108      	bne.n	80095be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ba:	605a      	str	r2, [r3, #4]
 80095bc:	e007      	b.n	80095ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6859      	ldr	r1, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009650 <HAL_I2C_Init+0x134>)
 80095da:	430b      	orrs	r3, r1
 80095dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80095ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69d9      	ldr	r1, [r3, #28]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	02008000 	.word	0x02008000

08009654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b20      	cmp	r3, #32
 8009668:	d138      	bne.n	80096dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009670:	2b01      	cmp	r3, #1
 8009672:	d101      	bne.n	8009678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009674:	2302      	movs	r3, #2
 8009676:	e032      	b.n	80096de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2224      	movs	r2, #36	@ 0x24
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6819      	ldr	r1, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e000      	b.n	80096de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096dc:	2302      	movs	r3, #2
  }
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b085      	sub	sp, #20
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d139      	bne.n	8009774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800970a:	2302      	movs	r3, #2
 800970c:	e033      	b.n	8009776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2224      	movs	r2, #36	@ 0x24
 800971a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0201 	bic.w	r2, r2, #1
 800972c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800973c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f042 0201 	orr.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	e000      	b.n	8009776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009774:	2302      	movs	r3, #2
  }
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b086      	sub	sp, #24
 8009786:	af02      	add	r7, sp, #8
 8009788:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0fe      	b.n	8009992 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d106      	bne.n	80097ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f00b fd69 	bl	8015280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2203      	movs	r2, #3
 80097b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f008 f925 	bl	8011a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7c1a      	ldrb	r2, [r3, #16]
 80097c8:	f88d 2000 	strb.w	r2, [sp]
 80097cc:	3304      	adds	r3, #4
 80097ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097d0:	f007 fff6 	bl	80117c0 <USB_CoreInit>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2202      	movs	r2, #2
 80097de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e0d5      	b.n	8009992 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f008 f91d 	bl	8011a2c <USB_SetCurrentMode>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e0c6      	b.n	8009992 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
 8009808:	e04a      	b.n	80098a0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800980a:	7bfa      	ldrb	r2, [r7, #15]
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	3315      	adds	r3, #21
 800981a:	2201      	movs	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800981e:	7bfa      	ldrb	r2, [r7, #15]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	3314      	adds	r3, #20
 800982e:	7bfa      	ldrb	r2, [r7, #15]
 8009830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009832:	7bfa      	ldrb	r2, [r7, #15]
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	b298      	uxth	r0, r3
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	332e      	adds	r3, #46	@ 0x2e
 8009846:	4602      	mov	r2, r0
 8009848:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800984a:	7bfa      	ldrb	r2, [r7, #15]
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	440b      	add	r3, r1
 8009858:	3318      	adds	r3, #24
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800985e:	7bfa      	ldrb	r2, [r7, #15]
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	331c      	adds	r3, #28
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009872:	7bfa      	ldrb	r2, [r7, #15]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	3320      	adds	r3, #32
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009886:	7bfa      	ldrb	r2, [r7, #15]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	4413      	add	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	440b      	add	r3, r1
 8009894:	3324      	adds	r3, #36	@ 0x24
 8009896:	2200      	movs	r2, #0
 8009898:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	3301      	adds	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	791b      	ldrb	r3, [r3, #4]
 80098a4:	7bfa      	ldrb	r2, [r7, #15]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d3af      	bcc.n	800980a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
 80098ae:	e044      	b.n	800993a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098b0:	7bfa      	ldrb	r2, [r7, #15]
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	4613      	mov	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	440b      	add	r3, r1
 80098be:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80098c6:	7bfa      	ldrb	r2, [r7, #15]
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	440b      	add	r3, r1
 80098d4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80098d8:	7bfa      	ldrb	r2, [r7, #15]
 80098da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098dc:	7bfa      	ldrb	r2, [r7, #15]
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4613      	mov	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098f2:	7bfa      	ldrb	r2, [r7, #15]
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4613      	mov	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009908:	7bfa      	ldrb	r2, [r7, #15]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	4413      	add	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800991e:	7bfa      	ldrb	r2, [r7, #15]
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	440b      	add	r3, r1
 800992c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	3301      	adds	r3, #1
 8009938:	73fb      	strb	r3, [r7, #15]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	791b      	ldrb	r3, [r3, #4]
 800993e:	7bfa      	ldrb	r2, [r7, #15]
 8009940:	429a      	cmp	r2, r3
 8009942:	d3b5      	bcc.n	80098b0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7c1a      	ldrb	r2, [r3, #16]
 800994c:	f88d 2000 	strb.w	r2, [sp]
 8009950:	3304      	adds	r3, #4
 8009952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009954:	f008 f8b6 	bl	8011ac4 <USB_DevInit>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e013      	b.n	8009992 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7b1b      	ldrb	r3, [r3, #12]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d102      	bne.n	8009986 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f96d 	bl	800ac60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f009 f8f5 	bl	8012b7a <USB_DevDisconnect>

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_PCD_Start+0x1c>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e022      	b.n	80099fc <HAL_PCD_Start+0x62>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d009      	beq.n	80099de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d105      	bne.n	80099de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f008 f800 	bl	80119e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f009 f8a3 	bl	8012b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b08d      	sub	sp, #52	@ 0x34
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f009 f961 	bl	8012ce2 <USB_GetMode>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 84b9 	bne.w	800a39a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f009 f8c5 	bl	8012bbc <USB_ReadInterrupts>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 84af 	beq.w	800a398 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	0a1b      	lsrs	r3, r3, #8
 8009a44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f009 f8b2 	bl	8012bbc <USB_ReadInterrupts>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d107      	bne.n	8009a72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	695a      	ldr	r2, [r3, #20]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f002 0202 	and.w	r2, r2, #2
 8009a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f009 f8a0 	bl	8012bbc <USB_ReadInterrupts>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f003 0310 	and.w	r3, r3, #16
 8009a82:	2b10      	cmp	r3, #16
 8009a84:	d161      	bne.n	8009b4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0210 	bic.w	r2, r2, #16
 8009a94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f003 020f 	and.w	r2, r3, #15
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	0c5b      	lsrs	r3, r3, #17
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d124      	bne.n	8009b0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d035      	beq.n	8009b3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	091b      	lsrs	r3, r3, #4
 8009ad6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6a38      	ldr	r0, [r7, #32]
 8009ae2:	f008 fed7 	bl	8012894 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	091b      	lsrs	r3, r3, #4
 8009aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af2:	441a      	add	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	695a      	ldr	r2, [r3, #20]
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	091b      	lsrs	r3, r3, #4
 8009b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b04:	441a      	add	r2, r3
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	615a      	str	r2, [r3, #20]
 8009b0a:	e016      	b.n	8009b3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	0c5b      	lsrs	r3, r3, #17
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	2b06      	cmp	r3, #6
 8009b16:	d110      	bne.n	8009b3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b1e:	2208      	movs	r2, #8
 8009b20:	4619      	mov	r1, r3
 8009b22:	6a38      	ldr	r0, [r7, #32]
 8009b24:	f008 feb6 	bl	8012894 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	695a      	ldr	r2, [r3, #20]
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	091b      	lsrs	r3, r3, #4
 8009b30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b34:	441a      	add	r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699a      	ldr	r2, [r3, #24]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0210 	orr.w	r2, r2, #16
 8009b48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f009 f834 	bl	8012bbc <USB_ReadInterrupts>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009b5e:	f040 80a7 	bne.w	8009cb0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f009 f839 	bl	8012be2 <USB_ReadDevAllOutEpInterrupt>
 8009b70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8009b72:	e099      	b.n	8009ca8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 808e 	beq.w	8009c9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f009 f85d 	bl	8012c4a <USB_ReadDevOutEPInterrupt>
 8009b90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00c      	beq.n	8009bb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2301      	movs	r3, #1
 8009bac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009bae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fecf 	bl	800a954 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bcc:	461a      	mov	r2, r3
 8009bce:	2308      	movs	r3, #8
 8009bd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 ffa5 	bl	800ab24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	f003 0310 	and.w	r3, r3, #16
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d030      	beq.n	8009c62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c08:	2b80      	cmp	r3, #128	@ 0x80
 8009c0a:	d109      	bne.n	8009c20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c22:	4613      	mov	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	4413      	add	r3, r2
 8009c32:	3304      	adds	r3, #4
 8009c34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	78db      	ldrb	r3, [r3, #3]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d108      	bne.n	8009c50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2200      	movs	r2, #0
 8009c42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f00b fc10 	bl	8015470 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2302      	movs	r3, #2
 8009c60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f003 0320 	and.w	r3, r3, #32
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d008      	beq.n	8009c7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d009      	beq.n	8009c9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c94:	461a      	mov	r2, r3
 8009c96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f47f af62 	bne.w	8009b74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f008 ff81 	bl	8012bbc <USB_ReadInterrupts>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009cc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009cc4:	f040 80db 	bne.w	8009e7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f008 ffa2 	bl	8012c16 <USB_ReadDevAllInEpInterrupt>
 8009cd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009cd8:	e0cd      	b.n	8009e76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80c2 	beq.w	8009e6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f008 ffc8 	bl	8012c86 <USB_ReadDevInEPInterrupt>
 8009cf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d057      	beq.n	8009db2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	2201      	movs	r2, #1
 8009d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	69f9      	ldr	r1, [r7, #28]
 8009d1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d22:	4013      	ands	r3, r2
 8009d24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d32:	461a      	mov	r2, r3
 8009d34:	2301      	movs	r3, #1
 8009d36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	799b      	ldrb	r3, [r3, #6]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d132      	bne.n	8009da6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3320      	adds	r3, #32
 8009d50:	6819      	ldr	r1, [r3, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d56:	4613      	mov	r3, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4403      	add	r3, r0
 8009d60:	331c      	adds	r3, #28
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4419      	add	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4403      	add	r3, r0
 8009d74:	3320      	adds	r3, #32
 8009d76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d113      	bne.n	8009da6 <HAL_PCD_IRQHandler+0x3a2>
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d82:	4613      	mov	r3, r2
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3324      	adds	r3, #36	@ 0x24
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009d9e:	461a      	mov	r2, r3
 8009da0:	2101      	movs	r1, #1
 8009da2:	f008 ffd1 	bl	8012d48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f00b fada 	bl	8015366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f003 0308 	and.w	r3, r3, #8
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2308      	movs	r3, #8
 8009dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d008      	beq.n	8009dea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de4:	461a      	mov	r2, r3
 8009de6:	2310      	movs	r3, #16
 8009de8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e00:	461a      	mov	r2, r3
 8009e02:	2340      	movs	r3, #64	@ 0x40
 8009e04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d023      	beq.n	8009e58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e12:	6a38      	ldr	r0, [r7, #32]
 8009e14:	f007 ffb4 	bl	8011d80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	3310      	adds	r3, #16
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	4413      	add	r3, r2
 8009e28:	3304      	adds	r3, #4
 8009e2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	78db      	ldrb	r3, [r3, #3]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d108      	bne.n	8009e46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2200      	movs	r2, #0
 8009e38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f00b fb27 	bl	8015494 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e52:	461a      	mov	r2, r3
 8009e54:	2302      	movs	r3, #2
 8009e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009e62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fce8 	bl	800a83a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f47f af2e 	bne.w	8009cda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f008 fe9a 	bl	8012bbc <USB_ReadInterrupts>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e92:	d122      	bne.n	8009eda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ea2:	f023 0301 	bic.w	r3, r3, #1
 8009ea6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d108      	bne.n	8009ec4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fef3 	bl	800aca8 <HAL_PCDEx_LPM_Callback>
 8009ec2:	e002      	b.n	8009eca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f00b fac5 	bl	8015454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	695a      	ldr	r2, [r3, #20]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f008 fe6c 	bl	8012bbc <USB_ReadInterrupts>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eee:	d112      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d102      	bne.n	8009f06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f00b fa81 	bl	8015408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	695a      	ldr	r2, [r3, #20]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f008 fe4e 	bl	8012bbc <USB_ReadInterrupts>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f2a:	d121      	bne.n	8009f70 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009f3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d111      	bne.n	8009f6a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f54:	089b      	lsrs	r3, r3, #2
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009f60:	2101      	movs	r1, #1
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fea0 	bl	800aca8 <HAL_PCDEx_LPM_Callback>
 8009f68:	e002      	b.n	8009f70 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f00b fa4c 	bl	8015408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f008 fe21 	bl	8012bbc <USB_ReadInterrupts>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f84:	f040 80b7 	bne.w	800a0f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f96:	f023 0301 	bic.w	r3, r3, #1
 8009f9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2110      	movs	r1, #16
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f007 feec 	bl	8011d80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fac:	e046      	b.n	800a03c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009fe0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ff4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a014:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a030:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a034:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a038:	3301      	adds	r3, #1
 800a03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	461a      	mov	r2, r3
 800a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a044:	4293      	cmp	r3, r2
 800a046:	d3b2      	bcc.n	8009fae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	69fa      	ldr	r2, [r7, #28]
 800a052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a056:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a05a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7bdb      	ldrb	r3, [r3, #15]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d016      	beq.n	800a092 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a074:	f043 030b 	orr.w	r3, r3, #11
 800a078:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a08a:	f043 030b 	orr.w	r3, r3, #11
 800a08e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a090:	e015      	b.n	800a0be <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a098:	695a      	ldr	r2, [r3, #20]
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b8:	f043 030b 	orr.w	r3, r3, #11
 800a0bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69fa      	ldr	r2, [r7, #28]
 800a0c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a0d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f008 fe31 	bl	8012d48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695a      	ldr	r2, [r3, #20]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a0f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f008 fd5e 	bl	8012bbc <USB_ReadInterrupts>
 800a100:	4603      	mov	r3, r0
 800a102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a10a:	d123      	bne.n	800a154 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f008 fdf5 	bl	8012d00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f007 fea9 	bl	8011e72 <USB_GetDevSpeed>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681c      	ldr	r4, [r3, #0]
 800a12c:	f001 fd1c 	bl	800bb68 <HAL_RCC_GetHCLKFreq>
 800a130:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a136:	461a      	mov	r2, r3
 800a138:	4620      	mov	r0, r4
 800a13a:	f007 fbb3 	bl	80118a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f00b f939 	bl	80153b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	695a      	ldr	r2, [r3, #20]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a152:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4618      	mov	r0, r3
 800a15a:	f008 fd2f 	bl	8012bbc <USB_ReadInterrupts>
 800a15e:	4603      	mov	r3, r0
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b08      	cmp	r3, #8
 800a166:	d10a      	bne.n	800a17e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f00b f916 	bl	801539a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	695a      	ldr	r2, [r3, #20]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f002 0208 	and.w	r2, r2, #8
 800a17c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f008 fd1a 	bl	8012bbc <USB_ReadInterrupts>
 800a188:	4603      	mov	r3, r0
 800a18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18e:	2b80      	cmp	r3, #128	@ 0x80
 800a190:	d123      	bne.n	800a1da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a19e:	2301      	movs	r3, #1
 800a1a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1a2:	e014      	b.n	800a1ce <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d105      	bne.n	800a1c8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fb08 	bl	800a7d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	791b      	ldrb	r3, [r3, #4]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d3e4      	bcc.n	800a1a4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f008 fcec 	bl	8012bbc <USB_ReadInterrupts>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ee:	d13c      	bne.n	800a26a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1f4:	e02b      	b.n	800a24e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a20a:	4613      	mov	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	3318      	adds	r3, #24
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d115      	bne.n	800a248 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a21c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da12      	bge.n	800a248 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a226:	4613      	mov	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	3317      	adds	r3, #23
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fac8 	bl	800a7d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24a:	3301      	adds	r3, #1
 800a24c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	791b      	ldrb	r3, [r3, #4]
 800a252:	461a      	mov	r2, r3
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	4293      	cmp	r3, r2
 800a258:	d3cd      	bcc.n	800a1f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695a      	ldr	r2, [r3, #20]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800a268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f008 fca4 	bl	8012bbc <USB_ReadInterrupts>
 800a274:	4603      	mov	r3, r0
 800a276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a27a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a27e:	d156      	bne.n	800a32e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a280:	2301      	movs	r3, #1
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
 800a284:	e045      	b.n	800a312 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a29a:	4613      	mov	r3, r2
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d12e      	bne.n	800a30c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a2ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da2b      	bge.n	800a30c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a2c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d121      	bne.n	800a30c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a304:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a308:	6053      	str	r3, [r2, #4]
            break;
 800a30a:	e008      	b.n	800a31e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	3301      	adds	r3, #1
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	461a      	mov	r2, r3
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d3b3      	bcc.n	800a286 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	695a      	ldr	r2, [r3, #20]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800a32c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f008 fc42 	bl	8012bbc <USB_ReadInterrupts>
 800a338:	4603      	mov	r3, r0
 800a33a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a342:	d10a      	bne.n	800a35a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f00b f8b7 	bl	80154b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	695a      	ldr	r2, [r3, #20]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f008 fc2c 	bl	8012bbc <USB_ReadInterrupts>
 800a364:	4603      	mov	r3, r0
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d115      	bne.n	800a39a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f00b f8a7 	bl	80154d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6859      	ldr	r1, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	e000      	b.n	800a39a <HAL_PCD_IRQHandler+0x996>
      return;
 800a398:	bf00      	nop
    }
  }
}
 800a39a:	3734      	adds	r7, #52	@ 0x34
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd90      	pop	{r4, r7, pc}

0800a3a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_PCD_SetAddress+0x1a>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e012      	b.n	800a3e0 <HAL_PCD_SetAddress+0x40>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	78fa      	ldrb	r2, [r7, #3]
 800a3c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f008 fb8b 	bl	8012aec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	70fb      	strb	r3, [r7, #3]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	803b      	strh	r3, [r7, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da0f      	bge.n	800a42e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	3310      	adds	r3, #16
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	705a      	strb	r2, [r3, #1]
 800a42c:	e00f      	b.n	800a44e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f003 020f 	and.w	r2, r3, #15
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4413      	add	r3, r2
 800a444:	3304      	adds	r3, #4
 800a446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	b2da      	uxtb	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a45a:	883a      	ldrh	r2, [r7, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	78ba      	ldrb	r2, [r7, #2]
 800a464:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a478:	78bb      	ldrb	r3, [r7, #2]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d102      	bne.n	800a484 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <HAL_PCD_EP_Open+0xaa>
 800a48e:	2302      	movs	r3, #2
 800a490:	e00e      	b.n	800a4b0 <HAL_PCD_EP_Open+0xc8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f007 fd0b 	bl	8011ebc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a4c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da0f      	bge.n	800a4ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	f003 020f 	and.w	r2, r3, #15
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	3310      	adds	r3, #16
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	4413      	add	r3, r2
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	705a      	strb	r2, [r3, #1]
 800a4ea:	e00f      	b.n	800a50c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	f003 030f 	and.w	r3, r3, #15
 800a512:	b2da      	uxtb	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_PCD_EP_Close+0x6e>
 800a522:	2302      	movs	r3, #2
 800a524:	e00e      	b.n	800a544 <HAL_PCD_EP_Close+0x8c>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	4618      	mov	r0, r3
 800a536:	f007 fd49 	bl	8011fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	460b      	mov	r3, r1
 800a55a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	f003 020f 	and.w	r2, r3, #15
 800a562:	4613      	mov	r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4413      	add	r3, r2
 800a572:	3304      	adds	r3, #4
 800a574:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2200      	movs	r2, #0
 800a586:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2200      	movs	r2, #0
 800a58c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	b2da      	uxtb	r2, r3
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	799b      	ldrb	r3, [r3, #6]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d102      	bne.n	800a5a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	799b      	ldrb	r3, [r3, #6]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6979      	ldr	r1, [r7, #20]
 800a5b4:	f007 fde6 	bl	8012184 <USB_EPStartXfer>

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	f003 020f 	and.w	r2, r3, #15
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	00db      	lsls	r3, r3, #3
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	440b      	add	r3, r1
 800a5e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800a5e4:	681b      	ldr	r3, [r3, #0]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b086      	sub	sp, #24
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
 800a5fe:	460b      	mov	r3, r1
 800a600:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	f003 020f 	and.w	r2, r3, #15
 800a608:	4613      	mov	r3, r2
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	3310      	adds	r3, #16
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	4413      	add	r3, r2
 800a616:	3304      	adds	r3, #4
 800a618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2200      	movs	r2, #0
 800a62a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2201      	movs	r2, #1
 800a630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	799b      	ldrb	r3, [r3, #6]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d102      	bne.n	800a64c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	799b      	ldrb	r3, [r3, #6]
 800a654:	461a      	mov	r2, r3
 800a656:	6979      	ldr	r1, [r7, #20]
 800a658:	f007 fd94 	bl	8012184 <USB_EPStartXfer>

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7912      	ldrb	r2, [r2, #4]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d901      	bls.n	800a684 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e04f      	b.n	800a724 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	da0f      	bge.n	800a6ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	f003 020f 	and.w	r2, r3, #15
 800a692:	4613      	mov	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	3310      	adds	r3, #16
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	4413      	add	r3, r2
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	705a      	strb	r2, [r3, #1]
 800a6aa:	e00d      	b.n	800a6c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	4413      	add	r3, r2
 800a6be:	3304      	adds	r3, #4
 800a6c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6ce:	78fb      	ldrb	r3, [r7, #3]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d101      	bne.n	800a6e8 <HAL_PCD_EP_SetStall+0x82>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e01d      	b.n	800a724 <HAL_PCD_EP_SetStall+0xbe>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68f9      	ldr	r1, [r7, #12]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f008 f924 	bl	8012944 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	2b00      	cmp	r3, #0
 800a704:	d109      	bne.n	800a71a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	7999      	ldrb	r1, [r3, #6]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a714:	461a      	mov	r2, r3
 800a716:	f008 fb17 	bl	8012d48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	7912      	ldrb	r2, [r2, #4]
 800a742:	4293      	cmp	r3, r2
 800a744:	d901      	bls.n	800a74a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e042      	b.n	800a7d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a74a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da0f      	bge.n	800a772 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	f003 020f 	and.w	r2, r3, #15
 800a758:	4613      	mov	r3, r2
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	3310      	adds	r3, #16
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	4413      	add	r3, r2
 800a766:	3304      	adds	r3, #4
 800a768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	705a      	strb	r2, [r3, #1]
 800a770:	e00f      	b.n	800a792 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	4613      	mov	r3, r2
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	4413      	add	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	4413      	add	r3, r2
 800a788:	3304      	adds	r3, #4
 800a78a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	f003 030f 	and.w	r3, r3, #15
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d101      	bne.n	800a7b2 <HAL_PCD_EP_ClrStall+0x86>
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e00e      	b.n	800a7d0 <HAL_PCD_EP_ClrStall+0xa4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f008 f92d 	bl	8012a20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a7e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da0c      	bge.n	800a806 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	f003 020f 	and.w	r2, r3, #15
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	3310      	adds	r3, #16
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	4413      	add	r3, r2
 800a800:	3304      	adds	r3, #4
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e00c      	b.n	800a820 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a806:	78fb      	ldrb	r3, [r7, #3]
 800a808:	f003 020f 	and.w	r2, r3, #15
 800a80c:	4613      	mov	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	4413      	add	r3, r2
 800a81c:	3304      	adds	r3, #4
 800a81e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68f9      	ldr	r1, [r7, #12]
 800a826:	4618      	mov	r0, r3
 800a828:	f007 ff4c 	bl	80126c4 <USB_EPStopXfer>
 800a82c:	4603      	mov	r3, r0
 800a82e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a830:	7afb      	ldrb	r3, [r7, #11]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b08a      	sub	sp, #40	@ 0x28
 800a83e:	af02      	add	r7, sp, #8
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	4613      	mov	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	3310      	adds	r3, #16
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	3304      	adds	r3, #4
 800a860:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	695a      	ldr	r2, [r3, #20]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d901      	bls.n	800a872 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e06b      	b.n	800a94a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	691a      	ldr	r2, [r3, #16]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	429a      	cmp	r2, r3
 800a886:	d902      	bls.n	800a88e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	3303      	adds	r3, #3
 800a892:	089b      	lsrs	r3, r3, #2
 800a894:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a896:	e02a      	b.n	800a8ee <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d902      	bls.n	800a8b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	3303      	adds	r3, #3
 800a8b8:	089b      	lsrs	r3, r3, #2
 800a8ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68d9      	ldr	r1, [r3, #12]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	f007 ffa1 	bl	8012818 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	68da      	ldr	r2, [r3, #12]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	441a      	add	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	695a      	ldr	r2, [r3, #20]
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	441a      	add	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	429a      	cmp	r2, r3
 800a902:	d809      	bhi.n	800a918 <PCD_WriteEmptyTxFifo+0xde>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	695a      	ldr	r2, [r3, #20]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d203      	bcs.n	800a918 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1bf      	bne.n	800a898 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	691a      	ldr	r2, [r3, #16]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	429a      	cmp	r2, r3
 800a922:	d811      	bhi.n	800a948 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	f003 030f 	and.w	r3, r3, #15
 800a92a:	2201      	movs	r2, #1
 800a92c:	fa02 f303 	lsl.w	r3, r2, r3
 800a930:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	43db      	mvns	r3, r3
 800a93e:	6939      	ldr	r1, [r7, #16]
 800a940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a944:	4013      	ands	r3, r2
 800a946:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	333c      	adds	r3, #60	@ 0x3c
 800a96c:	3304      	adds	r3, #4
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	799b      	ldrb	r3, [r3, #6]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d17b      	bne.n	800aa82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b00      	cmp	r3, #0
 800a992:	d015      	beq.n	800a9c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4a61      	ldr	r2, [pc, #388]	@ (800ab1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	f240 80b9 	bls.w	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 80b3 	beq.w	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9bc:	6093      	str	r3, [r2, #8]
 800a9be:	e0a7      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2320      	movs	r3, #32
 800a9da:	6093      	str	r3, [r2, #8]
 800a9dc:	e098      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f040 8093 	bne.w	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	4a4b      	ldr	r2, [pc, #300]	@ (800ab1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d90f      	bls.n	800aa12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00a      	beq.n	800aa12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa08:	461a      	mov	r2, r3
 800aa0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa0e:	6093      	str	r3, [r2, #8]
 800aa10:	e07e      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	4613      	mov	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	4413      	add	r3, r2
 800aa24:	3304      	adds	r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a1a      	ldr	r2, [r3, #32]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	0159      	lsls	r1, r3, #5
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	440b      	add	r3, r1
 800aa34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d114      	bne.n	800aa74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d109      	bne.n	800aa66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	2101      	movs	r1, #1
 800aa60:	f008 f972 	bl	8012d48 <USB_EP0_OutStart>
 800aa64:	e006      	b.n	800aa74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	441a      	add	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f00a fc58 	bl	8015330 <HAL_PCD_DataOutStageCallback>
 800aa80:	e046      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	4a26      	ldr	r2, [pc, #152]	@ (800ab20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d124      	bne.n	800aad4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00a      	beq.n	800aaaa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaa6:	6093      	str	r3, [r2, #8]
 800aaa8:	e032      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d008      	beq.n	800aac6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac0:	461a      	mov	r2, r3
 800aac2:	2320      	movs	r3, #32
 800aac4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f00a fc2f 	bl	8015330 <HAL_PCD_DataOutStageCallback>
 800aad2:	e01d      	b.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d114      	bne.n	800ab04 <PCD_EP_OutXfrComplete_int+0x1b0>
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	4613      	mov	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d108      	bne.n	800ab04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6818      	ldr	r0, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aafc:	461a      	mov	r2, r3
 800aafe:	2100      	movs	r1, #0
 800ab00:	f008 f922 	bl	8012d48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f00a fc10 	bl	8015330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3720      	adds	r7, #32
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	4f54300a 	.word	0x4f54300a
 800ab20:	4f54310a 	.word	0x4f54310a

0800ab24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	333c      	adds	r3, #60	@ 0x3c
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4a15      	ldr	r2, [pc, #84]	@ (800abac <PCD_EP_OutSetupPacket_int+0x88>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d90e      	bls.n	800ab78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab70:	461a      	mov	r2, r3
 800ab72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f00a fbc7 	bl	801530c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4a0a      	ldr	r2, [pc, #40]	@ (800abac <PCD_EP_OutSetupPacket_int+0x88>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d90c      	bls.n	800aba0 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	799b      	ldrb	r3, [r3, #6]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d108      	bne.n	800aba0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ab98:	461a      	mov	r2, r3
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	f008 f8d4 	bl	8012d48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	4f54300a 	.word	0x4f54300a

0800abb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
 800abbc:	4613      	mov	r3, r2
 800abbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d107      	bne.n	800abde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800abce:	883b      	ldrh	r3, [r7, #0]
 800abd0:	0419      	lsls	r1, r3, #16
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	430a      	orrs	r2, r1
 800abda:	629a      	str	r2, [r3, #40]	@ 0x28
 800abdc:	e028      	b.n	800ac30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abec:	2300      	movs	r3, #0
 800abee:	73fb      	strb	r3, [r7, #15]
 800abf0:	e00d      	b.n	800ac0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	3340      	adds	r3, #64	@ 0x40
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	0c1b      	lsrs	r3, r3, #16
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	4413      	add	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	7bfa      	ldrb	r2, [r7, #15]
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d3ec      	bcc.n	800abf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ac18:	883b      	ldrh	r3, [r7, #0]
 800ac1a:	0418      	lsls	r0, r3, #16
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6819      	ldr	r1, [r3, #0]
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	4302      	orrs	r2, r0
 800ac28:	3340      	adds	r3, #64	@ 0x40
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	887a      	ldrh	r2, [r7, #2]
 800ac50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac8e:	4b05      	ldr	r3, [pc, #20]	@ (800aca4 <HAL_PCDEx_ActivateLPM+0x44>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	10000003 	.word	0x10000003

0800aca8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800acc8:	4b19      	ldr	r3, [pc, #100]	@ (800ad30 <HAL_PWREx_ConfigSupply+0x70>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d00a      	beq.n	800acea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800acd4:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <HAL_PWREx_ConfigSupply+0x70>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d001      	beq.n	800ace6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e01f      	b.n	800ad26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e01d      	b.n	800ad26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800acea:	4b11      	ldr	r3, [pc, #68]	@ (800ad30 <HAL_PWREx_ConfigSupply+0x70>)
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f023 0207 	bic.w	r2, r3, #7
 800acf2:	490f      	ldr	r1, [pc, #60]	@ (800ad30 <HAL_PWREx_ConfigSupply+0x70>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800acfa:	f7fa f97d 	bl	8004ff8 <HAL_GetTick>
 800acfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad00:	e009      	b.n	800ad16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad02:	f7fa f979 	bl	8004ff8 <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad10:	d901      	bls.n	800ad16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e007      	b.n	800ad26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad16:	4b06      	ldr	r3, [pc, #24]	@ (800ad30 <HAL_PWREx_ConfigSupply+0x70>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad22:	d1ee      	bne.n	800ad02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	58024800 	.word	0x58024800

0800ad34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800ad34:	b480      	push	{r7}
 800ad36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ad38:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4a04      	ldr	r2, [pc, #16]	@ (800ad50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ad3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad42:	60d3      	str	r3, [r2, #12]
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	58024800 	.word	0x58024800

0800ad54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	@ 0x30
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e3c8      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 8087 	beq.w	800ae82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad74:	4b88      	ldr	r3, [pc, #544]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad7e:	4b86      	ldr	r3, [pc, #536]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ad84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad86:	2b10      	cmp	r3, #16
 800ad88:	d007      	beq.n	800ad9a <HAL_RCC_OscConfig+0x46>
 800ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8c:	2b18      	cmp	r3, #24
 800ad8e:	d110      	bne.n	800adb2 <HAL_RCC_OscConfig+0x5e>
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	f003 0303 	and.w	r3, r3, #3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d10b      	bne.n	800adb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad9a:	4b7f      	ldr	r3, [pc, #508]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d06c      	beq.n	800ae80 <HAL_RCC_OscConfig+0x12c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d168      	bne.n	800ae80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e3a2      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adba:	d106      	bne.n	800adca <HAL_RCC_OscConfig+0x76>
 800adbc:	4b76      	ldr	r3, [pc, #472]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a75      	ldr	r2, [pc, #468]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800adc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	e02e      	b.n	800ae28 <HAL_RCC_OscConfig+0xd4>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10c      	bne.n	800adec <HAL_RCC_OscConfig+0x98>
 800add2:	4b71      	ldr	r3, [pc, #452]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a70      	ldr	r2, [pc, #448]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800add8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	4b6e      	ldr	r3, [pc, #440]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a6d      	ldr	r2, [pc, #436]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ade4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	e01d      	b.n	800ae28 <HAL_RCC_OscConfig+0xd4>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adf4:	d10c      	bne.n	800ae10 <HAL_RCC_OscConfig+0xbc>
 800adf6:	4b68      	ldr	r3, [pc, #416]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a67      	ldr	r2, [pc, #412]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800adfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	4b65      	ldr	r3, [pc, #404]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a64      	ldr	r2, [pc, #400]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	e00b      	b.n	800ae28 <HAL_RCC_OscConfig+0xd4>
 800ae10:	4b61      	ldr	r3, [pc, #388]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a60      	ldr	r2, [pc, #384]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	4b5e      	ldr	r3, [pc, #376]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a5d      	ldr	r2, [pc, #372]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d013      	beq.n	800ae58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae30:	f7fa f8e2 	bl	8004ff8 <HAL_GetTick>
 800ae34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae36:	e008      	b.n	800ae4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae38:	f7fa f8de 	bl	8004ff8 <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	2b64      	cmp	r3, #100	@ 0x64
 800ae44:	d901      	bls.n	800ae4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e356      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae4a:	4b53      	ldr	r3, [pc, #332]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0f0      	beq.n	800ae38 <HAL_RCC_OscConfig+0xe4>
 800ae56:	e014      	b.n	800ae82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae58:	f7fa f8ce 	bl	8004ff8 <HAL_GetTick>
 800ae5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae60:	f7fa f8ca 	bl	8004ff8 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b64      	cmp	r3, #100	@ 0x64
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e342      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ae72:	4b49      	ldr	r3, [pc, #292]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f0      	bne.n	800ae60 <HAL_RCC_OscConfig+0x10c>
 800ae7e:	e000      	b.n	800ae82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 808c 	beq.w	800afa8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae90:	4b41      	ldr	r3, [pc, #260]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae9a:	4b3f      	ldr	r3, [pc, #252]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d007      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x162>
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	2b18      	cmp	r3, #24
 800aeaa:	d137      	bne.n	800af1c <HAL_RCC_OscConfig+0x1c8>
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	f003 0303 	and.w	r3, r3, #3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d132      	bne.n	800af1c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aeb6:	4b38      	ldr	r3, [pc, #224]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0304 	and.w	r3, r3, #4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <HAL_RCC_OscConfig+0x17a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e314      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aece:	4b32      	ldr	r3, [pc, #200]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f023 0219 	bic.w	r2, r3, #25
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	492f      	ldr	r1, [pc, #188]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee0:	f7fa f88a 	bl	8004ff8 <HAL_GetTick>
 800aee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aee6:	e008      	b.n	800aefa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aee8:	f7fa f886 	bl	8004ff8 <HAL_GetTick>
 800aeec:	4602      	mov	r2, r0
 800aeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e2fe      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aefa:	4b27      	ldr	r3, [pc, #156]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0304 	and.w	r3, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0f0      	beq.n	800aee8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af06:	4b24      	ldr	r3, [pc, #144]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	061b      	lsls	r3, r3, #24
 800af14:	4920      	ldr	r1, [pc, #128]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af16:	4313      	orrs	r3, r2
 800af18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af1a:	e045      	b.n	800afa8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d026      	beq.n	800af72 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af24:	4b1c      	ldr	r3, [pc, #112]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f023 0219 	bic.w	r2, r3, #25
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	4919      	ldr	r1, [pc, #100]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af32:	4313      	orrs	r3, r2
 800af34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af36:	f7fa f85f 	bl	8004ff8 <HAL_GetTick>
 800af3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af3c:	e008      	b.n	800af50 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af3e:	f7fa f85b 	bl	8004ff8 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d901      	bls.n	800af50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e2d3      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af50:	4b11      	ldr	r3, [pc, #68]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0f0      	beq.n	800af3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af5c:	4b0e      	ldr	r3, [pc, #56]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	061b      	lsls	r3, r3, #24
 800af6a:	490b      	ldr	r1, [pc, #44]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	e01a      	b.n	800afa8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af72:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a08      	ldr	r2, [pc, #32]	@ (800af98 <HAL_RCC_OscConfig+0x244>)
 800af78:	f023 0301 	bic.w	r3, r3, #1
 800af7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af7e:	f7fa f83b 	bl	8004ff8 <HAL_GetTick>
 800af82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800af84:	e00a      	b.n	800af9c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af86:	f7fa f837 	bl	8004ff8 <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d903      	bls.n	800af9c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e2af      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
 800af98:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800af9c:	4b96      	ldr	r3, [pc, #600]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1ee      	bne.n	800af86 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d06a      	beq.n	800b08a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afb4:	4b90      	ldr	r3, [pc, #576]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afbc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800afbe:	4b8e      	ldr	r3, [pc, #568]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800afc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d007      	beq.n	800afda <HAL_RCC_OscConfig+0x286>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b18      	cmp	r3, #24
 800afce:	d11b      	bne.n	800b008 <HAL_RCC_OscConfig+0x2b4>
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d116      	bne.n	800b008 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800afda:	4b87      	ldr	r3, [pc, #540]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d005      	beq.n	800aff2 <HAL_RCC_OscConfig+0x29e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	2b80      	cmp	r3, #128	@ 0x80
 800afec:	d001      	beq.n	800aff2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e282      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aff2:	4b81      	ldr	r3, [pc, #516]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	061b      	lsls	r3, r3, #24
 800b000:	497d      	ldr	r1, [pc, #500]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b002:	4313      	orrs	r3, r2
 800b004:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b006:	e040      	b.n	800b08a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d023      	beq.n	800b058 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b010:	4b79      	ldr	r3, [pc, #484]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a78      	ldr	r2, [pc, #480]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b01a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b01c:	f7f9 ffec 	bl	8004ff8 <HAL_GetTick>
 800b020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b022:	e008      	b.n	800b036 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b024:	f7f9 ffe8 	bl	8004ff8 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d901      	bls.n	800b036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e260      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b036:	4b70      	ldr	r3, [pc, #448]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0f0      	beq.n	800b024 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b042:	4b6d      	ldr	r3, [pc, #436]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	4969      	ldr	r1, [pc, #420]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b052:	4313      	orrs	r3, r2
 800b054:	60cb      	str	r3, [r1, #12]
 800b056:	e018      	b.n	800b08a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b058:	4b67      	ldr	r3, [pc, #412]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a66      	ldr	r2, [pc, #408]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b05e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b064:	f7f9 ffc8 	bl	8004ff8 <HAL_GetTick>
 800b068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b06a:	e008      	b.n	800b07e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b06c:	f7f9 ffc4 	bl	8004ff8 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	2b02      	cmp	r3, #2
 800b078:	d901      	bls.n	800b07e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e23c      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b07e:	4b5e      	ldr	r3, [pc, #376]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f0      	bne.n	800b06c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d036      	beq.n	800b104 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d019      	beq.n	800b0d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b09e:	4b56      	ldr	r3, [pc, #344]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0a2:	4a55      	ldr	r2, [pc, #340]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0a4:	f043 0301 	orr.w	r3, r3, #1
 800b0a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0aa:	f7f9 ffa5 	bl	8004ff8 <HAL_GetTick>
 800b0ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b0b0:	e008      	b.n	800b0c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0b2:	f7f9 ffa1 	bl	8004ff8 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d901      	bls.n	800b0c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e219      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b0c4:	4b4c      	ldr	r3, [pc, #304]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0f0      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x35e>
 800b0d0:	e018      	b.n	800b104 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0d2:	4b49      	ldr	r3, [pc, #292]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d6:	4a48      	ldr	r2, [pc, #288]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0de:	f7f9 ff8b 	bl	8004ff8 <HAL_GetTick>
 800b0e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b0e4:	e008      	b.n	800b0f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0e6:	f7f9 ff87 	bl	8004ff8 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e1ff      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b0f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b0fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0fc:	f003 0302 	and.w	r3, r3, #2
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1f0      	bne.n	800b0e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d036      	beq.n	800b17e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d019      	beq.n	800b14c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b118:	4b37      	ldr	r3, [pc, #220]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a36      	ldr	r2, [pc, #216]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b11e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b122:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b124:	f7f9 ff68 	bl	8004ff8 <HAL_GetTick>
 800b128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b12a:	e008      	b.n	800b13e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b12c:	f7f9 ff64 	bl	8004ff8 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d901      	bls.n	800b13e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e1dc      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b13e:	4b2e      	ldr	r3, [pc, #184]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0f0      	beq.n	800b12c <HAL_RCC_OscConfig+0x3d8>
 800b14a:	e018      	b.n	800b17e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b14c:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a29      	ldr	r2, [pc, #164]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b156:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b158:	f7f9 ff4e 	bl	8004ff8 <HAL_GetTick>
 800b15c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b15e:	e008      	b.n	800b172 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b160:	f7f9 ff4a 	bl	8004ff8 <HAL_GetTick>
 800b164:	4602      	mov	r2, r0
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d901      	bls.n	800b172 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e1c2      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b172:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1f0      	bne.n	800b160 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 8086 	beq.w	800b298 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b18c:	4b1b      	ldr	r3, [pc, #108]	@ (800b1fc <HAL_RCC_OscConfig+0x4a8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1a      	ldr	r2, [pc, #104]	@ (800b1fc <HAL_RCC_OscConfig+0x4a8>)
 800b192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b198:	f7f9 ff2e 	bl	8004ff8 <HAL_GetTick>
 800b19c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b19e:	e008      	b.n	800b1b2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1a0:	f7f9 ff2a 	bl	8004ff8 <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2b64      	cmp	r3, #100	@ 0x64
 800b1ac:	d901      	bls.n	800b1b2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e1a2      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1b2:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <HAL_RCC_OscConfig+0x4a8>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0f0      	beq.n	800b1a0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d106      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x480>
 800b1c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1cc:	f043 0301 	orr.w	r3, r3, #1
 800b1d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1d2:	e032      	b.n	800b23a <HAL_RCC_OscConfig+0x4e6>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d111      	bne.n	800b200 <HAL_RCC_OscConfig+0x4ac>
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1e0:	4a05      	ldr	r2, [pc, #20]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1e8:	4b03      	ldr	r3, [pc, #12]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ec:	4a02      	ldr	r2, [pc, #8]	@ (800b1f8 <HAL_RCC_OscConfig+0x4a4>)
 800b1ee:	f023 0304 	bic.w	r3, r3, #4
 800b1f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1f4:	e021      	b.n	800b23a <HAL_RCC_OscConfig+0x4e6>
 800b1f6:	bf00      	nop
 800b1f8:	58024400 	.word	0x58024400
 800b1fc:	58024800 	.word	0x58024800
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b05      	cmp	r3, #5
 800b206:	d10c      	bne.n	800b222 <HAL_RCC_OscConfig+0x4ce>
 800b208:	4b83      	ldr	r3, [pc, #524]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b20c:	4a82      	ldr	r2, [pc, #520]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b20e:	f043 0304 	orr.w	r3, r3, #4
 800b212:	6713      	str	r3, [r2, #112]	@ 0x70
 800b214:	4b80      	ldr	r3, [pc, #512]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b218:	4a7f      	ldr	r2, [pc, #508]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b220:	e00b      	b.n	800b23a <HAL_RCC_OscConfig+0x4e6>
 800b222:	4b7d      	ldr	r3, [pc, #500]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b226:	4a7c      	ldr	r2, [pc, #496]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b228:	f023 0301 	bic.w	r3, r3, #1
 800b22c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b22e:	4b7a      	ldr	r3, [pc, #488]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b232:	4a79      	ldr	r2, [pc, #484]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b234:	f023 0304 	bic.w	r3, r3, #4
 800b238:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d015      	beq.n	800b26e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b242:	f7f9 fed9 	bl	8004ff8 <HAL_GetTick>
 800b246:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b248:	e00a      	b.n	800b260 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b24a:	f7f9 fed5 	bl	8004ff8 <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b258:	4293      	cmp	r3, r2
 800b25a:	d901      	bls.n	800b260 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e14b      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b260:	4b6d      	ldr	r3, [pc, #436]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0ee      	beq.n	800b24a <HAL_RCC_OscConfig+0x4f6>
 800b26c:	e014      	b.n	800b298 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b26e:	f7f9 fec3 	bl	8004ff8 <HAL_GetTick>
 800b272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b274:	e00a      	b.n	800b28c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b276:	f7f9 febf 	bl	8004ff8 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b284:	4293      	cmp	r3, r2
 800b286:	d901      	bls.n	800b28c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e135      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b28c:	4b62      	ldr	r3, [pc, #392]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1ee      	bne.n	800b276 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 812a 	beq.w	800b4f6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b2a2:	4b5d      	ldr	r3, [pc, #372]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2aa:	2b18      	cmp	r3, #24
 800b2ac:	f000 80ba 	beq.w	800b424 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	f040 8095 	bne.w	800b3e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2ba:	4b57      	ldr	r3, [pc, #348]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a56      	ldr	r2, [pc, #344]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b2c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c6:	f7f9 fe97 	bl	8004ff8 <HAL_GetTick>
 800b2ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2ce:	f7f9 fe93 	bl	8004ff8 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e10b      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2e0:	4b4d      	ldr	r3, [pc, #308]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f0      	bne.n	800b2ce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2ec:	4b4a      	ldr	r3, [pc, #296]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b2ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b2f0:	4b4a      	ldr	r3, [pc, #296]	@ (800b41c <HAL_RCC_OscConfig+0x6c8>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b2fc:	0112      	lsls	r2, r2, #4
 800b2fe:	430a      	orrs	r2, r1
 800b300:	4945      	ldr	r1, [pc, #276]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b302:	4313      	orrs	r3, r2
 800b304:	628b      	str	r3, [r1, #40]	@ 0x28
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b30a:	3b01      	subs	r3, #1
 800b30c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b314:	3b01      	subs	r3, #1
 800b316:	025b      	lsls	r3, r3, #9
 800b318:	b29b      	uxth	r3, r3
 800b31a:	431a      	orrs	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b320:	3b01      	subs	r3, #1
 800b322:	041b      	lsls	r3, r3, #16
 800b324:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b32e:	3b01      	subs	r3, #1
 800b330:	061b      	lsls	r3, r3, #24
 800b332:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b336:	4938      	ldr	r1, [pc, #224]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b338:	4313      	orrs	r3, r2
 800b33a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b33c:	4b36      	ldr	r3, [pc, #216]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b340:	4a35      	ldr	r2, [pc, #212]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b342:	f023 0301 	bic.w	r3, r3, #1
 800b346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b348:	4b33      	ldr	r3, [pc, #204]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b34a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b34c:	4b34      	ldr	r3, [pc, #208]	@ (800b420 <HAL_RCC_OscConfig+0x6cc>)
 800b34e:	4013      	ands	r3, r2
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b354:	00d2      	lsls	r2, r2, #3
 800b356:	4930      	ldr	r1, [pc, #192]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b358:	4313      	orrs	r3, r2
 800b35a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b35c:	4b2e      	ldr	r3, [pc, #184]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	f023 020c 	bic.w	r2, r3, #12
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b368:	492b      	ldr	r1, [pc, #172]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b36e:	4b2a      	ldr	r3, [pc, #168]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	f023 0202 	bic.w	r2, r3, #2
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b37a:	4927      	ldr	r1, [pc, #156]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b37c:	4313      	orrs	r3, r2
 800b37e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b380:	4b25      	ldr	r3, [pc, #148]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b384:	4a24      	ldr	r2, [pc, #144]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b38a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b38c:	4b22      	ldr	r3, [pc, #136]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b390:	4a21      	ldr	r2, [pc, #132]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b398:	4b1f      	ldr	r3, [pc, #124]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	4a1e      	ldr	r2, [pc, #120]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b39e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b3a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b3a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3aa:	f043 0301 	orr.w	r3, r3, #1
 800b3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3b0:	4b19      	ldr	r3, [pc, #100]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a18      	ldr	r2, [pc, #96]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3bc:	f7f9 fe1c 	bl	8004ff8 <HAL_GetTick>
 800b3c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3c2:	e008      	b.n	800b3d6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3c4:	f7f9 fe18 	bl	8004ff8 <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d901      	bls.n	800b3d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e090      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0f0      	beq.n	800b3c4 <HAL_RCC_OscConfig+0x670>
 800b3e2:	e088      	b.n	800b4f6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b3ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f0:	f7f9 fe02 	bl	8004ff8 <HAL_GetTick>
 800b3f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b3f6:	e008      	b.n	800b40a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3f8:	f7f9 fdfe 	bl	8004ff8 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b02      	cmp	r3, #2
 800b404:	d901      	bls.n	800b40a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	e076      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b40a:	4b03      	ldr	r3, [pc, #12]	@ (800b418 <HAL_RCC_OscConfig+0x6c4>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1f0      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x6a4>
 800b416:	e06e      	b.n	800b4f6 <HAL_RCC_OscConfig+0x7a2>
 800b418:	58024400 	.word	0x58024400
 800b41c:	fffffc0c 	.word	0xfffffc0c
 800b420:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b424:	4b36      	ldr	r3, [pc, #216]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b428:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b42a:	4b35      	ldr	r3, [pc, #212]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b434:	2b01      	cmp	r3, #1
 800b436:	d031      	beq.n	800b49c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f003 0203 	and.w	r2, r3, #3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b442:	429a      	cmp	r2, r3
 800b444:	d12a      	bne.n	800b49c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	091b      	lsrs	r3, r3, #4
 800b44a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b452:	429a      	cmp	r2, r3
 800b454:	d122      	bne.n	800b49c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b460:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b462:	429a      	cmp	r2, r3
 800b464:	d11a      	bne.n	800b49c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	0a5b      	lsrs	r3, r3, #9
 800b46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b472:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b474:	429a      	cmp	r2, r3
 800b476:	d111      	bne.n	800b49c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	0c1b      	lsrs	r3, r3, #16
 800b47c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b484:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b486:	429a      	cmp	r2, r3
 800b488:	d108      	bne.n	800b49c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	0e1b      	lsrs	r3, r3, #24
 800b48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b496:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b498:	429a      	cmp	r2, r3
 800b49a:	d001      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e02b      	b.n	800b4f8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b4a0:	4b17      	ldr	r3, [pc, #92]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a4:	08db      	lsrs	r3, r3, #3
 800b4a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d01f      	beq.n	800b4f6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b4b6:	4b12      	ldr	r3, [pc, #72]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ba:	4a11      	ldr	r2, [pc, #68]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4bc:	f023 0301 	bic.w	r3, r3, #1
 800b4c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b4c2:	f7f9 fd99 	bl	8004ff8 <HAL_GetTick>
 800b4c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b4c8:	bf00      	nop
 800b4ca:	f7f9 fd95 	bl	8004ff8 <HAL_GetTick>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d0f9      	beq.n	800b4ca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4da:	4b0a      	ldr	r3, [pc, #40]	@ (800b504 <HAL_RCC_OscConfig+0x7b0>)
 800b4dc:	4013      	ands	r3, r2
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b4e2:	00d2      	lsls	r2, r2, #3
 800b4e4:	4906      	ldr	r1, [pc, #24]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b4ea:	4b05      	ldr	r3, [pc, #20]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ee:	4a04      	ldr	r2, [pc, #16]	@ (800b500 <HAL_RCC_OscConfig+0x7ac>)
 800b4f0:	f043 0301 	orr.w	r3, r3, #1
 800b4f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3730      	adds	r7, #48	@ 0x30
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	58024400 	.word	0x58024400
 800b504:	ffff0007 	.word	0xffff0007

0800b508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e19c      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b51c:	4b8a      	ldr	r3, [pc, #552]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d910      	bls.n	800b54c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b52a:	4b87      	ldr	r3, [pc, #540]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f023 020f 	bic.w	r2, r3, #15
 800b532:	4985      	ldr	r1, [pc, #532]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	4313      	orrs	r3, r2
 800b538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53a:	4b83      	ldr	r3, [pc, #524]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d001      	beq.n	800b54c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e184      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d010      	beq.n	800b57a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	691a      	ldr	r2, [r3, #16]
 800b55c:	4b7b      	ldr	r3, [pc, #492]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b564:	429a      	cmp	r2, r3
 800b566:	d908      	bls.n	800b57a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b568:	4b78      	ldr	r3, [pc, #480]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	4975      	ldr	r1, [pc, #468]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b576:	4313      	orrs	r3, r2
 800b578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0308 	and.w	r3, r3, #8
 800b582:	2b00      	cmp	r3, #0
 800b584:	d010      	beq.n	800b5a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	695a      	ldr	r2, [r3, #20]
 800b58a:	4b70      	ldr	r3, [pc, #448]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b592:	429a      	cmp	r2, r3
 800b594:	d908      	bls.n	800b5a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b596:	4b6d      	ldr	r3, [pc, #436]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	496a      	ldr	r1, [pc, #424]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d010      	beq.n	800b5d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	699a      	ldr	r2, [r3, #24]
 800b5b8:	4b64      	ldr	r3, [pc, #400]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d908      	bls.n	800b5d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5c4:	4b61      	ldr	r3, [pc, #388]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5c6:	69db      	ldr	r3, [r3, #28]
 800b5c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	495e      	ldr	r1, [pc, #376]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0320 	and.w	r3, r3, #32
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d010      	beq.n	800b604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69da      	ldr	r2, [r3, #28]
 800b5e6:	4b59      	ldr	r3, [pc, #356]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d908      	bls.n	800b604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b5f2:	4b56      	ldr	r3, [pc, #344]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	4953      	ldr	r1, [pc, #332]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b600:	4313      	orrs	r3, r2
 800b602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d010      	beq.n	800b632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	4b4d      	ldr	r3, [pc, #308]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	f003 030f 	and.w	r3, r3, #15
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d908      	bls.n	800b632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b620:	4b4a      	ldr	r3, [pc, #296]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	f023 020f 	bic.w	r2, r3, #15
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	4947      	ldr	r1, [pc, #284]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d055      	beq.n	800b6ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b63e:	4b43      	ldr	r3, [pc, #268]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	4940      	ldr	r1, [pc, #256]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d107      	bne.n	800b668 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b658:	4b3c      	ldr	r3, [pc, #240]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d121      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e0f6      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d107      	bne.n	800b680 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b670:	4b36      	ldr	r3, [pc, #216]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d115      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e0ea      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d107      	bne.n	800b698 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b688:	4b30      	ldr	r3, [pc, #192]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b690:	2b00      	cmp	r3, #0
 800b692:	d109      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e0de      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b698:	4b2c      	ldr	r3, [pc, #176]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e0d6      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b6a8:	4b28      	ldr	r3, [pc, #160]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f023 0207 	bic.w	r2, r3, #7
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	4925      	ldr	r1, [pc, #148]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ba:	f7f9 fc9d 	bl	8004ff8 <HAL_GetTick>
 800b6be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6c0:	e00a      	b.n	800b6d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6c2:	f7f9 fc99 	bl	8004ff8 <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d901      	bls.n	800b6d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e0be      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d1eb      	bne.n	800b6c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d010      	beq.n	800b718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	4b14      	ldr	r3, [pc, #80]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	f003 030f 	and.w	r3, r3, #15
 800b702:	429a      	cmp	r2, r3
 800b704:	d208      	bcs.n	800b718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b706:	4b11      	ldr	r3, [pc, #68]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f023 020f 	bic.w	r2, r3, #15
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	490e      	ldr	r1, [pc, #56]	@ (800b74c <HAL_RCC_ClockConfig+0x244>)
 800b714:	4313      	orrs	r3, r2
 800b716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b718:	4b0b      	ldr	r3, [pc, #44]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d214      	bcs.n	800b750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b726:	4b08      	ldr	r3, [pc, #32]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f023 020f 	bic.w	r2, r3, #15
 800b72e:	4906      	ldr	r1, [pc, #24]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	4313      	orrs	r3, r2
 800b734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b736:	4b04      	ldr	r3, [pc, #16]	@ (800b748 <HAL_RCC_ClockConfig+0x240>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 030f 	and.w	r3, r3, #15
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d005      	beq.n	800b750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e086      	b.n	800b856 <HAL_RCC_ClockConfig+0x34e>
 800b748:	52002000 	.word	0x52002000
 800b74c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d010      	beq.n	800b77e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691a      	ldr	r2, [r3, #16]
 800b760:	4b3f      	ldr	r3, [pc, #252]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b768:	429a      	cmp	r2, r3
 800b76a:	d208      	bcs.n	800b77e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b76c:	4b3c      	ldr	r3, [pc, #240]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	4939      	ldr	r1, [pc, #228]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 0308 	and.w	r3, r3, #8
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695a      	ldr	r2, [r3, #20]
 800b78e:	4b34      	ldr	r3, [pc, #208]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b796:	429a      	cmp	r2, r3
 800b798:	d208      	bcs.n	800b7ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b79a:	4b31      	ldr	r3, [pc, #196]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b79c:	69db      	ldr	r3, [r3, #28]
 800b79e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	492e      	ldr	r1, [pc, #184]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d010      	beq.n	800b7da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	699a      	ldr	r2, [r3, #24]
 800b7bc:	4b28      	ldr	r3, [pc, #160]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d208      	bcs.n	800b7da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b7c8:	4b25      	ldr	r3, [pc, #148]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	4922      	ldr	r1, [pc, #136]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0320 	and.w	r3, r3, #32
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d010      	beq.n	800b808 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69da      	ldr	r2, [r3, #28]
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d208      	bcs.n	800b808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	4917      	ldr	r1, [pc, #92]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b804:	4313      	orrs	r3, r2
 800b806:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b808:	f000 f834 	bl	800b874 <HAL_RCC_GetSysClockFreq>
 800b80c:	4602      	mov	r2, r0
 800b80e:	4b14      	ldr	r3, [pc, #80]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	4912      	ldr	r1, [pc, #72]	@ (800b864 <HAL_RCC_ClockConfig+0x35c>)
 800b81a:	5ccb      	ldrb	r3, [r1, r3]
 800b81c:	f003 031f 	and.w	r3, r3, #31
 800b820:	fa22 f303 	lsr.w	r3, r2, r3
 800b824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b826:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <HAL_RCC_ClockConfig+0x358>)
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	f003 030f 	and.w	r3, r3, #15
 800b82e:	4a0d      	ldr	r2, [pc, #52]	@ (800b864 <HAL_RCC_ClockConfig+0x35c>)
 800b830:	5cd3      	ldrb	r3, [r2, r3]
 800b832:	f003 031f 	and.w	r3, r3, #31
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	fa22 f303 	lsr.w	r3, r2, r3
 800b83c:	4a0a      	ldr	r2, [pc, #40]	@ (800b868 <HAL_RCC_ClockConfig+0x360>)
 800b83e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b840:	4a0a      	ldr	r2, [pc, #40]	@ (800b86c <HAL_RCC_ClockConfig+0x364>)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b846:	4b0a      	ldr	r3, [pc, #40]	@ (800b870 <HAL_RCC_ClockConfig+0x368>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f9 fb8a 	bl	8004f64 <HAL_InitTick>
 800b850:	4603      	mov	r3, r0
 800b852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	58024400 	.word	0x58024400
 800b864:	0801a8a0 	.word	0x0801a8a0
 800b868:	24000004 	.word	0x24000004
 800b86c:	24000000 	.word	0x24000000
 800b870:	24000008 	.word	0x24000008

0800b874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b874:	b480      	push	{r7}
 800b876:	b089      	sub	sp, #36	@ 0x24
 800b878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b87a:	4bb3      	ldr	r3, [pc, #716]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b882:	2b18      	cmp	r3, #24
 800b884:	f200 8155 	bhi.w	800bb32 <HAL_RCC_GetSysClockFreq+0x2be>
 800b888:	a201      	add	r2, pc, #4	@ (adr r2, 800b890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8f5 	.word	0x0800b8f5
 800b894:	0800bb33 	.word	0x0800bb33
 800b898:	0800bb33 	.word	0x0800bb33
 800b89c:	0800bb33 	.word	0x0800bb33
 800b8a0:	0800bb33 	.word	0x0800bb33
 800b8a4:	0800bb33 	.word	0x0800bb33
 800b8a8:	0800bb33 	.word	0x0800bb33
 800b8ac:	0800bb33 	.word	0x0800bb33
 800b8b0:	0800b91b 	.word	0x0800b91b
 800b8b4:	0800bb33 	.word	0x0800bb33
 800b8b8:	0800bb33 	.word	0x0800bb33
 800b8bc:	0800bb33 	.word	0x0800bb33
 800b8c0:	0800bb33 	.word	0x0800bb33
 800b8c4:	0800bb33 	.word	0x0800bb33
 800b8c8:	0800bb33 	.word	0x0800bb33
 800b8cc:	0800bb33 	.word	0x0800bb33
 800b8d0:	0800b921 	.word	0x0800b921
 800b8d4:	0800bb33 	.word	0x0800bb33
 800b8d8:	0800bb33 	.word	0x0800bb33
 800b8dc:	0800bb33 	.word	0x0800bb33
 800b8e0:	0800bb33 	.word	0x0800bb33
 800b8e4:	0800bb33 	.word	0x0800bb33
 800b8e8:	0800bb33 	.word	0x0800bb33
 800b8ec:	0800bb33 	.word	0x0800bb33
 800b8f0:	0800b927 	.word	0x0800b927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f4:	4b94      	ldr	r3, [pc, #592]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d009      	beq.n	800b914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b900:	4b91      	ldr	r3, [pc, #580]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	08db      	lsrs	r3, r3, #3
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	4a90      	ldr	r2, [pc, #576]	@ (800bb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b90c:	fa22 f303 	lsr.w	r3, r2, r3
 800b910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b912:	e111      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b914:	4b8d      	ldr	r3, [pc, #564]	@ (800bb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b916:	61bb      	str	r3, [r7, #24]
      break;
 800b918:	e10e      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b91a:	4b8d      	ldr	r3, [pc, #564]	@ (800bb50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b91c:	61bb      	str	r3, [r7, #24]
      break;
 800b91e:	e10b      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b920:	4b8c      	ldr	r3, [pc, #560]	@ (800bb54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b922:	61bb      	str	r3, [r7, #24]
      break;
 800b924:	e108      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b926:	4b88      	ldr	r3, [pc, #544]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92a:	f003 0303 	and.w	r3, r3, #3
 800b92e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b930:	4b85      	ldr	r3, [pc, #532]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	091b      	lsrs	r3, r3, #4
 800b936:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b93a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b93c:	4b82      	ldr	r3, [pc, #520]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b946:	4b80      	ldr	r3, [pc, #512]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b94a:	08db      	lsrs	r3, r3, #3
 800b94c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	fb02 f303 	mul.w	r3, r2, r3
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 80e1 	beq.w	800bb2c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	f000 8083 	beq.w	800ba78 <HAL_RCC_GetSysClockFreq+0x204>
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b02      	cmp	r3, #2
 800b976:	f200 80a1 	bhi.w	800babc <HAL_RCC_GetSysClockFreq+0x248>
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <HAL_RCC_GetSysClockFreq+0x114>
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d056      	beq.n	800ba34 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b986:	e099      	b.n	800babc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b988:	4b6f      	ldr	r3, [pc, #444]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 0320 	and.w	r3, r3, #32
 800b990:	2b00      	cmp	r3, #0
 800b992:	d02d      	beq.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b994:	4b6c      	ldr	r3, [pc, #432]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	08db      	lsrs	r3, r3, #3
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	4a6b      	ldr	r2, [pc, #428]	@ (800bb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9be:	4b62      	ldr	r3, [pc, #392]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c6:	ee07 3a90 	vmov	s15, r3
 800b9ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800bb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b9ee:	e087      	b.n	800bb00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800bb5c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba02:	4b51      	ldr	r3, [pc, #324]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0a:	ee07 3a90 	vmov	s15, r3
 800ba0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800bb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba32:	e065      	b.n	800bb00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800bb60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ba42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba46:	4b40      	ldr	r3, [pc, #256]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba76:	e043      	b.n	800bb00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800bb64 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ba86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba8a:	4b2f      	ldr	r3, [pc, #188]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800bb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800baa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800baba:	e021      	b.n	800bb00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bb60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800baca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bace:	4b1e      	ldr	r3, [pc, #120]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bade:	ed97 6a02 	vldr	s12, [r7, #8]
 800bae2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800bb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bafe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bb00:	4b11      	ldr	r3, [pc, #68]	@ (800bb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb04:	0a5b      	lsrs	r3, r3, #9
 800bb06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb18:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb24:	ee17 3a90 	vmov	r3, s15
 800bb28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800bb2a:	e005      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61bb      	str	r3, [r7, #24]
      break;
 800bb30:	e002      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800bb32:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bb34:	61bb      	str	r3, [r7, #24]
      break;
 800bb36:	bf00      	nop
  }

  return sysclockfreq;
 800bb38:	69bb      	ldr	r3, [r7, #24]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3724      	adds	r7, #36	@ 0x24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	03d09000 	.word	0x03d09000
 800bb50:	003d0900 	.word	0x003d0900
 800bb54:	016e3600 	.word	0x016e3600
 800bb58:	46000000 	.word	0x46000000
 800bb5c:	4c742400 	.word	0x4c742400
 800bb60:	4a742400 	.word	0x4a742400
 800bb64:	4bb71b00 	.word	0x4bb71b00

0800bb68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bb6e:	f7ff fe81 	bl	800b874 <HAL_RCC_GetSysClockFreq>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b10      	ldr	r3, [pc, #64]	@ (800bbb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	0a1b      	lsrs	r3, r3, #8
 800bb7a:	f003 030f 	and.w	r3, r3, #15
 800bb7e:	490f      	ldr	r1, [pc, #60]	@ (800bbbc <HAL_RCC_GetHCLKFreq+0x54>)
 800bb80:	5ccb      	ldrb	r3, [r1, r3]
 800bb82:	f003 031f 	and.w	r3, r3, #31
 800bb86:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	4a09      	ldr	r2, [pc, #36]	@ (800bbbc <HAL_RCC_GetHCLKFreq+0x54>)
 800bb96:	5cd3      	ldrb	r3, [r2, r3]
 800bb98:	f003 031f 	and.w	r3, r3, #31
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800bba2:	4a07      	ldr	r2, [pc, #28]	@ (800bbc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bba4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bba6:	4a07      	ldr	r2, [pc, #28]	@ (800bbc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bbac:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bbae:	681b      	ldr	r3, [r3, #0]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	58024400 	.word	0x58024400
 800bbbc:	0801a8a0 	.word	0x0801a8a0
 800bbc0:	24000004 	.word	0x24000004
 800bbc4:	24000000 	.word	0x24000000

0800bbc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bbcc:	f7ff ffcc 	bl	800bb68 <HAL_RCC_GetHCLKFreq>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	4b06      	ldr	r3, [pc, #24]	@ (800bbec <HAL_RCC_GetPCLK1Freq+0x24>)
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	091b      	lsrs	r3, r3, #4
 800bbd8:	f003 0307 	and.w	r3, r3, #7
 800bbdc:	4904      	ldr	r1, [pc, #16]	@ (800bbf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bbde:	5ccb      	ldrb	r3, [r1, r3]
 800bbe0:	f003 031f 	and.w	r3, r3, #31
 800bbe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	0801a8a0 	.word	0x0801a8a0

0800bbf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bbf8:	f7ff ffb6 	bl	800bb68 <HAL_RCC_GetHCLKFreq>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	4b06      	ldr	r3, [pc, #24]	@ (800bc18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	f003 0307 	and.w	r3, r3, #7
 800bc08:	4904      	ldr	r1, [pc, #16]	@ (800bc1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bc0a:	5ccb      	ldrb	r3, [r1, r3]
 800bc0c:	f003 031f 	and.w	r3, r3, #31
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	58024400 	.word	0x58024400
 800bc1c:	0801a8a0 	.word	0x0801a8a0

0800bc20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc24:	b0c6      	sub	sp, #280	@ 0x118
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc32:	2300      	movs	r3, #0
 800bc34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bc44:	2500      	movs	r5, #0
 800bc46:	ea54 0305 	orrs.w	r3, r4, r5
 800bc4a:	d049      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc56:	d02f      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bc58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc5c:	d828      	bhi.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bc5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc62:	d01a      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bc64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc68:	d822      	bhi.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bc6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc72:	d007      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bc74:	e01c      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc76:	4bab      	ldr	r3, [pc, #684]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7a:	4aaa      	ldr	r2, [pc, #680]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc82:	e01a      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc88:	3308      	adds	r3, #8
 800bc8a:	2102      	movs	r1, #2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f002 fa49 	bl	800e124 <RCCEx_PLL2_Config>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc98:	e00f      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9e:	3328      	adds	r3, #40	@ 0x28
 800bca0:	2102      	movs	r1, #2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f002 faf0 	bl	800e288 <RCCEx_PLL3_Config>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bcae:	e004      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcb6:	e000      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bcb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10a      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bcc2:	4b98      	ldr	r3, [pc, #608]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd0:	4a94      	ldr	r2, [pc, #592]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcd6:	e003      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bcec:	f04f 0900 	mov.w	r9, #0
 800bcf0:	ea58 0309 	orrs.w	r3, r8, r9
 800bcf4:	d047      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d82a      	bhi.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bd00:	a201      	add	r2, pc, #4	@ (adr r2, 800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd06:	bf00      	nop
 800bd08:	0800bd1d 	.word	0x0800bd1d
 800bd0c:	0800bd2b 	.word	0x0800bd2b
 800bd10:	0800bd41 	.word	0x0800bd41
 800bd14:	0800bd5f 	.word	0x0800bd5f
 800bd18:	0800bd5f 	.word	0x0800bd5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd1c:	4b81      	ldr	r3, [pc, #516]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd20:	4a80      	ldr	r2, [pc, #512]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd28:	e01a      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2e:	3308      	adds	r3, #8
 800bd30:	2100      	movs	r1, #0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f002 f9f6 	bl	800e124 <RCCEx_PLL2_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd3e:	e00f      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd44:	3328      	adds	r3, #40	@ 0x28
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f002 fa9d 	bl	800e288 <RCCEx_PLL3_Config>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd54:	e004      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd5c:	e000      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bd5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd68:	4b6e      	ldr	r3, [pc, #440]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd6c:	f023 0107 	bic.w	r1, r3, #7
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd76:	4a6b      	ldr	r2, [pc, #428]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd7c:	e003      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bd86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bd92:	f04f 0b00 	mov.w	fp, #0
 800bd96:	ea5a 030b 	orrs.w	r3, sl, fp
 800bd9a:	d05b      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bda4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bda8:	d03b      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bdaa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bdae:	d834      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdb4:	d037      	beq.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bdb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdba:	d82e      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bdc0:	d033      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bdc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bdc6:	d828      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdcc:	d01a      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bdce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdd2:	d822      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bdd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bddc:	d007      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bdde:	e01c      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde0:	4b50      	ldr	r3, [pc, #320]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde4:	4a4f      	ldr	r2, [pc, #316]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bde6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bdec:	e01e      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f002 f994 	bl	800e124 <RCCEx_PLL2_Config>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800be02:	e013      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be08:	3328      	adds	r3, #40	@ 0x28
 800be0a:	2100      	movs	r1, #0
 800be0c:	4618      	mov	r0, r3
 800be0e:	f002 fa3b 	bl	800e288 <RCCEx_PLL3_Config>
 800be12:	4603      	mov	r3, r0
 800be14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be18:	e008      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be20:	e004      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be22:	bf00      	nop
 800be24:	e002      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be26:	bf00      	nop
 800be28:	e000      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800be34:	4b3b      	ldr	r3, [pc, #236]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be38:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800be44:	4a37      	ldr	r2, [pc, #220]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be46:	430b      	orrs	r3, r1
 800be48:	6593      	str	r3, [r2, #88]	@ 0x58
 800be4a:	e003      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800be54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800be60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800be64:	2300      	movs	r3, #0
 800be66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800be6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800be6e:	460b      	mov	r3, r1
 800be70:	4313      	orrs	r3, r2
 800be72:	d05d      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800be74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800be7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800be80:	d03b      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800be82:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800be86:	d834      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be8c:	d037      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800be8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be92:	d82e      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be98:	d033      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800be9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be9e:	d828      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bea4:	d01a      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800beaa:	d822      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800beb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800beb4:	d007      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800beb6:	e01c      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beb8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800beba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebc:	4a19      	ldr	r2, [pc, #100]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bec4:	e01e      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beca:	3308      	adds	r3, #8
 800becc:	2100      	movs	r1, #0
 800bece:	4618      	mov	r0, r3
 800bed0:	f002 f928 	bl	800e124 <RCCEx_PLL2_Config>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800beda:	e013      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee0:	3328      	adds	r3, #40	@ 0x28
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f002 f9cf 	bl	800e288 <RCCEx_PLL3_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bef0:	e008      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef8:	e004      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800befa:	bf00      	nop
 800befc:	e002      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800befe:	bf00      	nop
 800bf00:	e000      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bf02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10d      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bf1c:	4a01      	ldr	r2, [pc, #4]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf1e:	430b      	orrs	r3, r1
 800bf20:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf22:	e005      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bf24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bf3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bf46:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	d03a      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf56:	2b30      	cmp	r3, #48	@ 0x30
 800bf58:	d01f      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bf5a:	2b30      	cmp	r3, #48	@ 0x30
 800bf5c:	d819      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	d00c      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d815      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d019      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d111      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf6e:	4baa      	ldr	r3, [pc, #680]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	4aa9      	ldr	r2, [pc, #676]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bf7a:	e011      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf80:	3308      	adds	r3, #8
 800bf82:	2102      	movs	r1, #2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f002 f8cd 	bl	800e124 <RCCEx_PLL2_Config>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bf90:	e006      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf98:	e002      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bf9a:	bf00      	nop
 800bf9c:	e000      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bf9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bfa8:	4b9b      	ldr	r3, [pc, #620]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfb6:	4a98      	ldr	r2, [pc, #608]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bfbc:	e003      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bfd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bfdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	d051      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bff0:	d035      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bff6:	d82e      	bhi.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bffc:	d031      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bffe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c002:	d828      	bhi.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c008:	d01a      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c00a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c00e:	d822      	bhi.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c018:	d007      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c01a:	e01c      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c01c:	4b7e      	ldr	r3, [pc, #504]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c020:	4a7d      	ldr	r2, [pc, #500]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c028:	e01c      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c02e:	3308      	adds	r3, #8
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f002 f876 	bl	800e124 <RCCEx_PLL2_Config>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c03e:	e011      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c044:	3328      	adds	r3, #40	@ 0x28
 800c046:	2100      	movs	r1, #0
 800c048:	4618      	mov	r0, r3
 800c04a:	f002 f91d 	bl	800e288 <RCCEx_PLL3_Config>
 800c04e:	4603      	mov	r3, r0
 800c050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c054:	e006      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c05e:	bf00      	nop
 800c060:	e000      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10a      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c06c:	4b6a      	ldr	r3, [pc, #424]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c070:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c07a:	4a67      	ldr	r2, [pc, #412]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c07c:	430b      	orrs	r3, r1
 800c07e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c080:	e003      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c0a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d053      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0b4:	d033      	beq.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c0b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0ba:	d82c      	bhi.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0c0:	d02f      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c0c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0c6:	d826      	bhi.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0cc:	d02b      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c0ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0d2:	d820      	bhi.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0d8:	d012      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c0da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0de:	d81a      	bhi.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d022      	beq.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c0e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0e8:	d115      	bne.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f002 f816 	bl	800e124 <RCCEx_PLL2_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c0fe:	e015      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c104:	3328      	adds	r3, #40	@ 0x28
 800c106:	2101      	movs	r1, #1
 800c108:	4618      	mov	r0, r3
 800c10a:	f002 f8bd 	bl	800e288 <RCCEx_PLL3_Config>
 800c10e:	4603      	mov	r3, r0
 800c110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c114:	e00a      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c11c:	e006      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c11e:	bf00      	nop
 800c120:	e004      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c122:	bf00      	nop
 800c124:	e002      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c126:	bf00      	nop
 800c128:	e000      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c12a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c12c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c134:	4b38      	ldr	r3, [pc, #224]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c138:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c142:	4a35      	ldr	r2, [pc, #212]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c144:	430b      	orrs	r3, r1
 800c146:	6513      	str	r3, [r2, #80]	@ 0x50
 800c148:	e003      	b.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c14e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c15e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c162:	2300      	movs	r3, #0
 800c164:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c168:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c16c:	460b      	mov	r3, r1
 800c16e:	4313      	orrs	r3, r2
 800c170:	d058      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c17a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c17e:	d033      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c184:	d82c      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c18a:	d02f      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c18c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c190:	d826      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c192:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c196:	d02b      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c198:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c19c:	d820      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c19e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1a2:	d012      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c1a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1a8:	d81a      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d022      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c1ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1b2:	d115      	bne.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f001 ffb1 	bl	800e124 <RCCEx_PLL2_Config>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c1c8:	e015      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	3328      	adds	r3, #40	@ 0x28
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f002 f858 	bl	800e288 <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c1de:	e00a      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1e6:	e006      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1e8:	bf00      	nop
 800c1ea:	e004      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1ec:	bf00      	nop
 800c1ee:	e002      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1f0:	bf00      	nop
 800c1f2:	e000      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10e      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c1fe:	4b06      	ldr	r3, [pc, #24]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c202:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c20a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c20e:	4a02      	ldr	r2, [pc, #8]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c210:	430b      	orrs	r3, r1
 800c212:	6593      	str	r3, [r2, #88]	@ 0x58
 800c214:	e006      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c216:	bf00      	nop
 800c218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c234:	2300      	movs	r3, #0
 800c236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c23a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c23e:	460b      	mov	r3, r1
 800c240:	4313      	orrs	r3, r2
 800c242:	d037      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c24a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c24e:	d00e      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c254:	d816      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d018      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c25a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c25e:	d111      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c260:	4bc4      	ldr	r3, [pc, #784]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c264:	4ac3      	ldr	r2, [pc, #780]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c26a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c26c:	e00f      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c272:	3308      	adds	r3, #8
 800c274:	2101      	movs	r1, #1
 800c276:	4618      	mov	r0, r3
 800c278:	f001 ff54 	bl	800e124 <RCCEx_PLL2_Config>
 800c27c:	4603      	mov	r3, r0
 800c27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c282:	e004      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c28a:	e000      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c28e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10a      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c296:	4bb7      	ldr	r3, [pc, #732]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c29a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2a4:	4ab3      	ldr	r2, [pc, #716]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2aa:	e003      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c2c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c2ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	d039      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d81c      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c2de:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c321 	.word	0x0800c321
 800c2e8:	0800c2f5 	.word	0x0800c2f5
 800c2ec:	0800c303 	.word	0x0800c303
 800c2f0:	0800c321 	.word	0x0800c321
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2f4:	4b9f      	ldr	r3, [pc, #636]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f8:	4a9e      	ldr	r2, [pc, #632]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c300:	e00f      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c306:	3308      	adds	r3, #8
 800c308:	2102      	movs	r1, #2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f001 ff0a 	bl	800e124 <RCCEx_PLL2_Config>
 800c310:	4603      	mov	r3, r0
 800c312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c316:	e004      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c31e:	e000      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10a      	bne.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c32a:	4b92      	ldr	r3, [pc, #584]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c32e:	f023 0103 	bic.w	r1, r3, #3
 800c332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c338:	4a8e      	ldr	r2, [pc, #568]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c33a:	430b      	orrs	r3, r1
 800c33c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c33e:	e003      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c358:	2300      	movs	r3, #0
 800c35a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c35e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c362:	460b      	mov	r3, r1
 800c364:	4313      	orrs	r3, r2
 800c366:	f000 8099 	beq.w	800c49c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c36a:	4b83      	ldr	r3, [pc, #524]	@ (800c578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a82      	ldr	r2, [pc, #520]	@ (800c578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c376:	f7f8 fe3f 	bl	8004ff8 <HAL_GetTick>
 800c37a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c37e:	e00b      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c380:	f7f8 fe3a 	bl	8004ff8 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	2b64      	cmp	r3, #100	@ 0x64
 800c38e:	d903      	bls.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c396:	e005      	b.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c398:	4b77      	ldr	r3, [pc, #476]	@ (800c578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0ed      	beq.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d173      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c3ac:	4b71      	ldr	r3, [pc, #452]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c3b8:	4053      	eors	r3, r2
 800c3ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d015      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3c2:	4b6c      	ldr	r3, [pc, #432]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c3ce:	4b69      	ldr	r3, [pc, #420]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3d2:	4a68      	ldr	r2, [pc, #416]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c3da:	4b66      	ldr	r3, [pc, #408]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3de:	4a65      	ldr	r2, [pc, #404]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c3e6:	4a63      	ldr	r2, [pc, #396]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3fa:	d118      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3fc:	f7f8 fdfc 	bl	8004ff8 <HAL_GetTick>
 800c400:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c404:	e00d      	b.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c406:	f7f8 fdf7 	bl	8004ff8 <HAL_GetTick>
 800c40a:	4602      	mov	r2, r0
 800c40c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c410:	1ad2      	subs	r2, r2, r3
 800c412:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c416:	429a      	cmp	r2, r3
 800c418:	d903      	bls.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c420:	e005      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c422:	4b54      	ldr	r3, [pc, #336]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c426:	f003 0302 	and.w	r3, r3, #2
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0eb      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c42e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c432:	2b00      	cmp	r3, #0
 800c434:	d129      	bne.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c43e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c446:	d10e      	bne.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c448:	4b4a      	ldr	r3, [pc, #296]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c458:	091a      	lsrs	r2, r3, #4
 800c45a:	4b48      	ldr	r3, [pc, #288]	@ (800c57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	4a45      	ldr	r2, [pc, #276]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c460:	430b      	orrs	r3, r1
 800c462:	6113      	str	r3, [r2, #16]
 800c464:	e005      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c466:	4b43      	ldr	r3, [pc, #268]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	4a42      	ldr	r2, [pc, #264]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c46c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c470:	6113      	str	r3, [r2, #16]
 800c472:	4b40      	ldr	r3, [pc, #256]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c474:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c47e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c482:	4a3c      	ldr	r2, [pc, #240]	@ (800c574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c484:	430b      	orrs	r3, r1
 800c486:	6713      	str	r3, [r2, #112]	@ 0x70
 800c488:	e008      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c48a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c48e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c492:	e003      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f002 0301 	and.w	r3, r2, #1
 800c4a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c4b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f000 808f 	beq.w	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4c4:	2b28      	cmp	r3, #40	@ 0x28
 800c4c6:	d871      	bhi.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800c5b5 	.word	0x0800c5b5
 800c4d4:	0800c5ad 	.word	0x0800c5ad
 800c4d8:	0800c5ad 	.word	0x0800c5ad
 800c4dc:	0800c5ad 	.word	0x0800c5ad
 800c4e0:	0800c5ad 	.word	0x0800c5ad
 800c4e4:	0800c5ad 	.word	0x0800c5ad
 800c4e8:	0800c5ad 	.word	0x0800c5ad
 800c4ec:	0800c5ad 	.word	0x0800c5ad
 800c4f0:	0800c581 	.word	0x0800c581
 800c4f4:	0800c5ad 	.word	0x0800c5ad
 800c4f8:	0800c5ad 	.word	0x0800c5ad
 800c4fc:	0800c5ad 	.word	0x0800c5ad
 800c500:	0800c5ad 	.word	0x0800c5ad
 800c504:	0800c5ad 	.word	0x0800c5ad
 800c508:	0800c5ad 	.word	0x0800c5ad
 800c50c:	0800c5ad 	.word	0x0800c5ad
 800c510:	0800c597 	.word	0x0800c597
 800c514:	0800c5ad 	.word	0x0800c5ad
 800c518:	0800c5ad 	.word	0x0800c5ad
 800c51c:	0800c5ad 	.word	0x0800c5ad
 800c520:	0800c5ad 	.word	0x0800c5ad
 800c524:	0800c5ad 	.word	0x0800c5ad
 800c528:	0800c5ad 	.word	0x0800c5ad
 800c52c:	0800c5ad 	.word	0x0800c5ad
 800c530:	0800c5b5 	.word	0x0800c5b5
 800c534:	0800c5ad 	.word	0x0800c5ad
 800c538:	0800c5ad 	.word	0x0800c5ad
 800c53c:	0800c5ad 	.word	0x0800c5ad
 800c540:	0800c5ad 	.word	0x0800c5ad
 800c544:	0800c5ad 	.word	0x0800c5ad
 800c548:	0800c5ad 	.word	0x0800c5ad
 800c54c:	0800c5ad 	.word	0x0800c5ad
 800c550:	0800c5b5 	.word	0x0800c5b5
 800c554:	0800c5ad 	.word	0x0800c5ad
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c5ad 	.word	0x0800c5ad
 800c560:	0800c5ad 	.word	0x0800c5ad
 800c564:	0800c5ad 	.word	0x0800c5ad
 800c568:	0800c5ad 	.word	0x0800c5ad
 800c56c:	0800c5ad 	.word	0x0800c5ad
 800c570:	0800c5b5 	.word	0x0800c5b5
 800c574:	58024400 	.word	0x58024400
 800c578:	58024800 	.word	0x58024800
 800c57c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c584:	3308      	adds	r3, #8
 800c586:	2101      	movs	r1, #1
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 fdcb 	bl	800e124 <RCCEx_PLL2_Config>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c594:	e00f      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59a:	3328      	adds	r3, #40	@ 0x28
 800c59c:	2101      	movs	r1, #1
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 fe72 	bl	800e288 <RCCEx_PLL3_Config>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c5aa:	e004      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5b2:	e000      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c5b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c5be:	4bbf      	ldr	r3, [pc, #764]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5cc:	4abb      	ldr	r2, [pc, #748]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5ce:	430b      	orrs	r3, r1
 800c5d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5d2:	e003      	b.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f002 0302 	and.w	r3, r2, #2
 800c5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	d041      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c602:	2b05      	cmp	r3, #5
 800c604:	d824      	bhi.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c606:	a201      	add	r2, pc, #4	@ (adr r2, 800c60c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60c:	0800c659 	.word	0x0800c659
 800c610:	0800c625 	.word	0x0800c625
 800c614:	0800c63b 	.word	0x0800c63b
 800c618:	0800c659 	.word	0x0800c659
 800c61c:	0800c659 	.word	0x0800c659
 800c620:	0800c659 	.word	0x0800c659
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c628:	3308      	adds	r3, #8
 800c62a:	2101      	movs	r1, #1
 800c62c:	4618      	mov	r0, r3
 800c62e:	f001 fd79 	bl	800e124 <RCCEx_PLL2_Config>
 800c632:	4603      	mov	r3, r0
 800c634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c638:	e00f      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63e:	3328      	adds	r3, #40	@ 0x28
 800c640:	2101      	movs	r1, #1
 800c642:	4618      	mov	r0, r3
 800c644:	f001 fe20 	bl	800e288 <RCCEx_PLL3_Config>
 800c648:	4603      	mov	r3, r0
 800c64a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c64e:	e004      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c656:	e000      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c662:	4b96      	ldr	r3, [pc, #600]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c666:	f023 0107 	bic.w	r1, r3, #7
 800c66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c670:	4a92      	ldr	r2, [pc, #584]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c672:	430b      	orrs	r3, r1
 800c674:	6553      	str	r3, [r2, #84]	@ 0x54
 800c676:	e003      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c67c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	f002 0304 	and.w	r3, r2, #4
 800c68c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c690:	2300      	movs	r3, #0
 800c692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c696:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c69a:	460b      	mov	r3, r1
 800c69c:	4313      	orrs	r3, r2
 800c69e:	d044      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6a8:	2b05      	cmp	r3, #5
 800c6aa:	d825      	bhi.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b2:	bf00      	nop
 800c6b4:	0800c701 	.word	0x0800c701
 800c6b8:	0800c6cd 	.word	0x0800c6cd
 800c6bc:	0800c6e3 	.word	0x0800c6e3
 800c6c0:	0800c701 	.word	0x0800c701
 800c6c4:	0800c701 	.word	0x0800c701
 800c6c8:	0800c701 	.word	0x0800c701
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f001 fd25 	bl	800e124 <RCCEx_PLL2_Config>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c6e0:	e00f      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e6:	3328      	adds	r3, #40	@ 0x28
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f001 fdcc 	bl	800e288 <RCCEx_PLL3_Config>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c6f6:	e004      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6fe:	e000      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c700:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10b      	bne.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c70a:	4b6c      	ldr	r3, [pc, #432]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c70e:	f023 0107 	bic.w	r1, r3, #7
 800c712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c71a:	4a68      	ldr	r2, [pc, #416]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c71c:	430b      	orrs	r3, r1
 800c71e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c720:	e003      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c726:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f002 0320 	and.w	r3, r2, #32
 800c736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c73a:	2300      	movs	r3, #0
 800c73c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c740:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c744:	460b      	mov	r3, r1
 800c746:	4313      	orrs	r3, r2
 800c748:	d055      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c756:	d033      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c75c:	d82c      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c762:	d02f      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c768:	d826      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c76a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c76e:	d02b      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c774:	d820      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c77a:	d012      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c77c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c780:	d81a      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c782:	2b00      	cmp	r3, #0
 800c784:	d022      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c78a:	d115      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c790:	3308      	adds	r3, #8
 800c792:	2100      	movs	r1, #0
 800c794:	4618      	mov	r0, r3
 800c796:	f001 fcc5 	bl	800e124 <RCCEx_PLL2_Config>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c7a0:	e015      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a6:	3328      	adds	r3, #40	@ 0x28
 800c7a8:	2102      	movs	r1, #2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f001 fd6c 	bl	800e288 <RCCEx_PLL3_Config>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c7b6:	e00a      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7be:	e006      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7c0:	bf00      	nop
 800c7c2:	e004      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7c4:	bf00      	nop
 800c7c6:	e002      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7c8:	bf00      	nop
 800c7ca:	e000      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10b      	bne.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7d6:	4b39      	ldr	r3, [pc, #228]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7e6:	4a35      	ldr	r2, [pc, #212]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7ec:	e003      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c802:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c806:	2300      	movs	r3, #0
 800c808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c80c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c810:	460b      	mov	r3, r1
 800c812:	4313      	orrs	r3, r2
 800c814:	d058      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c81e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c822:	d033      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c824:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c828:	d82c      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c82a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c82e:	d02f      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c834:	d826      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c83a:	d02b      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c83c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c840:	d820      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c846:	d012      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c84c:	d81a      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d022      	beq.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c856:	d115      	bne.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c85c:	3308      	adds	r3, #8
 800c85e:	2100      	movs	r1, #0
 800c860:	4618      	mov	r0, r3
 800c862:	f001 fc5f 	bl	800e124 <RCCEx_PLL2_Config>
 800c866:	4603      	mov	r3, r0
 800c868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c86c:	e015      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c872:	3328      	adds	r3, #40	@ 0x28
 800c874:	2102      	movs	r1, #2
 800c876:	4618      	mov	r0, r3
 800c878:	f001 fd06 	bl	800e288 <RCCEx_PLL3_Config>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c882:	e00a      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c88a:	e006      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c88c:	bf00      	nop
 800c88e:	e004      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c890:	bf00      	nop
 800c892:	e002      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c894:	bf00      	nop
 800c896:	e000      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10e      	bne.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c8a2:	4b06      	ldr	r3, [pc, #24]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c8b2:	4a02      	ldr	r2, [pc, #8]	@ (800c8bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c8b4:	430b      	orrs	r3, r1
 800c8b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8b8:	e006      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c8ba:	bf00      	nop
 800c8bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c8d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	d055      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c8f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c8f4:	d033      	beq.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c8f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c8fa:	d82c      	bhi.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c8fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c900:	d02f      	beq.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c906:	d826      	bhi.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c908:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c90c:	d02b      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c90e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c912:	d820      	bhi.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c918:	d012      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c91a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c91e:	d81a      	bhi.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c920:	2b00      	cmp	r3, #0
 800c922:	d022      	beq.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c928:	d115      	bne.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c92e:	3308      	adds	r3, #8
 800c930:	2100      	movs	r1, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f001 fbf6 	bl	800e124 <RCCEx_PLL2_Config>
 800c938:	4603      	mov	r3, r0
 800c93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c93e:	e015      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c944:	3328      	adds	r3, #40	@ 0x28
 800c946:	2102      	movs	r1, #2
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 fc9d 	bl	800e288 <RCCEx_PLL3_Config>
 800c94e:	4603      	mov	r3, r0
 800c950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c954:	e00a      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c95c:	e006      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c95e:	bf00      	nop
 800c960:	e004      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c962:	bf00      	nop
 800c964:	e002      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c966:	bf00      	nop
 800c968:	e000      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c96c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10b      	bne.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c974:	4ba0      	ldr	r3, [pc, #640]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c978:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c980:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c984:	4a9c      	ldr	r2, [pc, #624]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c986:	430b      	orrs	r3, r1
 800c988:	6593      	str	r3, [r2, #88]	@ 0x58
 800c98a:	e003      	b.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c98c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f002 0308 	and.w	r3, r2, #8
 800c9a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c9aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	d01e      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9c0:	d10c      	bne.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c6:	3328      	adds	r3, #40	@ 0x28
 800c9c8:	2102      	movs	r1, #2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 fc5c 	bl	800e288 <RCCEx_PLL3_Config>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c9dc:	4b86      	ldr	r3, [pc, #536]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ec:	4a82      	ldr	r2, [pc, #520]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9ee:	430b      	orrs	r3, r1
 800c9f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f002 0310 	and.w	r3, r2, #16
 800c9fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca02:	2300      	movs	r3, #0
 800ca04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca08:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	d01e      	beq.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ca12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca1e:	d10c      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ca20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca24:	3328      	adds	r3, #40	@ 0x28
 800ca26:	2102      	movs	r1, #2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f001 fc2d 	bl	800e288 <RCCEx_PLL3_Config>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca3a:	4b6f      	ldr	r3, [pc, #444]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca4a:	4a6b      	ldr	r2, [pc, #428]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca4c:	430b      	orrs	r3, r1
 800ca4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ca5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca5e:	2300      	movs	r3, #0
 800ca60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca62:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ca66:	460b      	mov	r3, r1
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	d03e      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ca6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca78:	d022      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ca7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca7e:	d81b      	bhi.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca88:	d00b      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ca8a:	e015      	b.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca90:	3308      	adds	r3, #8
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 fb45 	bl	800e124 <RCCEx_PLL2_Config>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800caa0:	e00f      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa6:	3328      	adds	r3, #40	@ 0x28
 800caa8:	2102      	movs	r1, #2
 800caaa:	4618      	mov	r0, r3
 800caac:	f001 fbec 	bl	800e288 <RCCEx_PLL3_Config>
 800cab0:	4603      	mov	r3, r0
 800cab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cab6:	e004      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cabe:	e000      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10b      	bne.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800caca:	4b4b      	ldr	r3, [pc, #300]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cace:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cada:	4a47      	ldr	r2, [pc, #284]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cadc:	430b      	orrs	r3, r1
 800cade:	6593      	str	r3, [r2, #88]	@ 0x58
 800cae0:	e003      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cae6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800caf6:	673b      	str	r3, [r7, #112]	@ 0x70
 800caf8:	2300      	movs	r3, #0
 800cafa:	677b      	str	r3, [r7, #116]	@ 0x74
 800cafc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cb00:	460b      	mov	r3, r1
 800cb02:	4313      	orrs	r3, r2
 800cb04:	d03b      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cb12:	d01f      	beq.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cb14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cb18:	d818      	bhi.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cb1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb1e:	d003      	beq.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800cb20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb24:	d007      	beq.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800cb26:	e011      	b.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb28:	4b33      	ldr	r3, [pc, #204]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb2c:	4a32      	ldr	r2, [pc, #200]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800cb34:	e00f      	b.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3a:	3328      	adds	r3, #40	@ 0x28
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 fba2 	bl	800e288 <RCCEx_PLL3_Config>
 800cb44:	4603      	mov	r3, r0
 800cb46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800cb4a:	e004      	b.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb52:	e000      	b.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800cb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10b      	bne.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb5e:	4b26      	ldr	r3, [pc, #152]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb6e:	4a22      	ldr	r2, [pc, #136]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb70:	430b      	orrs	r3, r1
 800cb72:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb74:	e003      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800cb8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb90:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800cb94:	460b      	mov	r3, r1
 800cb96:	4313      	orrs	r3, r2
 800cb98:	d034      	beq.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d003      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cba8:	d007      	beq.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cbaa:	e011      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbac:	4b12      	ldr	r3, [pc, #72]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb0:	4a11      	ldr	r2, [pc, #68]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cbb8:	e00e      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f001 faae 	bl	800e124 <RCCEx_PLL2_Config>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cbce:	e003      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10d      	bne.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cbe0:	4b05      	ldr	r3, [pc, #20]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbe4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbee:	4a02      	ldr	r2, [pc, #8]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cbf4:	e006      	b.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cbf6:	bf00      	nop
 800cbf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cc10:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc12:	2300      	movs	r3, #0
 800cc14:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc16:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	d00c      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc24:	3328      	adds	r3, #40	@ 0x28
 800cc26:	2102      	movs	r1, #2
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f001 fb2d 	bl	800e288 <RCCEx_PLL3_Config>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc48:	2300      	movs	r3, #0
 800cc4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc4c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cc50:	460b      	mov	r3, r1
 800cc52:	4313      	orrs	r3, r2
 800cc54:	d036      	beq.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc60:	d018      	beq.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cc62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc66:	d811      	bhi.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cc68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6c:	d014      	beq.n	800cc98 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cc6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc72:	d80b      	bhi.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d011      	beq.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cc78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc7c:	d106      	bne.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc7e:	4bb7      	ldr	r3, [pc, #732]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc82:	4ab6      	ldr	r2, [pc, #728]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cc8a:	e008      	b.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc92:	e004      	b.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc94:	bf00      	nop
 800cc96:	e002      	b.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc98:	bf00      	nop
 800cc9a:	e000      	b.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10a      	bne.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cca6:	4bad      	ldr	r3, [pc, #692]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ccae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ccb4:	4aa9      	ldr	r2, [pc, #676]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccb6:	430b      	orrs	r3, r1
 800ccb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ccba:	e003      	b.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ccc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ccd0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800ccd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	d009      	beq.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cce0:	4b9e      	ldr	r3, [pc, #632]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cce4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccee:	4a9b      	ldr	r2, [pc, #620]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccf0:	430b      	orrs	r3, r1
 800ccf2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ccf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cd00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd02:	2300      	movs	r3, #0
 800cd04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	d009      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cd10:	4b92      	ldr	r3, [pc, #584]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd14:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd1e:	4a8f      	ldr	r2, [pc, #572]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd20:	430b      	orrs	r3, r1
 800cd22:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cd30:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd32:	2300      	movs	r3, #0
 800cd34:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	d00e      	beq.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cd40:	4b86      	ldr	r3, [pc, #536]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	4a85      	ldr	r2, [pc, #532]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd4a:	6113      	str	r3, [r2, #16]
 800cd4c:	4b83      	ldr	r3, [pc, #524]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd4e:	6919      	ldr	r1, [r3, #16]
 800cd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cd58:	4a80      	ldr	r2, [pc, #512]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd5a:	430b      	orrs	r3, r1
 800cd5c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cd74:	460b      	mov	r3, r1
 800cd76:	4313      	orrs	r3, r2
 800cd78:	d009      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cd7a:	4b78      	ldr	r3, [pc, #480]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd88:	4a74      	ldr	r2, [pc, #464]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd8a:	430b      	orrs	r3, r1
 800cd8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cd9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cda0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cda4:	460b      	mov	r3, r1
 800cda6:	4313      	orrs	r3, r2
 800cda8:	d00a      	beq.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cdaa:	4b6c      	ldr	r3, [pc, #432]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cdac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdba:	4a68      	ldr	r2, [pc, #416]	@ (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cdbc:	430b      	orrs	r3, r1
 800cdbe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc8:	2100      	movs	r1, #0
 800cdca:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdd2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	d011      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde0:	3308      	adds	r3, #8
 800cde2:	2100      	movs	r1, #0
 800cde4:	4618      	mov	r0, r3
 800cde6:	f001 f99d 	bl	800e124 <RCCEx_PLL2_Config>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cdf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ce00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	2100      	movs	r1, #0
 800ce0a:	6239      	str	r1, [r7, #32]
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce12:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ce16:	460b      	mov	r3, r1
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	d011      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ce1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce20:	3308      	adds	r3, #8
 800ce22:	2101      	movs	r1, #1
 800ce24:	4618      	mov	r0, r3
 800ce26:	f001 f97d 	bl	800e124 <RCCEx_PLL2_Config>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ce40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	61b9      	str	r1, [r7, #24]
 800ce4c:	f003 0304 	and.w	r3, r3, #4
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ce56:	460b      	mov	r3, r1
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	d011      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce60:	3308      	adds	r3, #8
 800ce62:	2102      	movs	r1, #2
 800ce64:	4618      	mov	r0, r3
 800ce66:	f001 f95d 	bl	800e124 <RCCEx_PLL2_Config>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6139      	str	r1, [r7, #16]
 800ce8c:	f003 0308 	and.w	r3, r3, #8
 800ce90:	617b      	str	r3, [r7, #20]
 800ce92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ce96:	460b      	mov	r3, r1
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	d011      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea0:	3328      	adds	r3, #40	@ 0x28
 800cea2:	2100      	movs	r1, #0
 800cea4:	4618      	mov	r0, r3
 800cea6:	f001 f9ef 	bl	800e288 <RCCEx_PLL3_Config>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ceb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	2100      	movs	r1, #0
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	f003 0310 	and.w	r3, r3, #16
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ced6:	460b      	mov	r3, r1
 800ced8:	4313      	orrs	r3, r2
 800ceda:	d011      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee0:	3328      	adds	r3, #40	@ 0x28
 800cee2:	2101      	movs	r1, #1
 800cee4:	4618      	mov	r0, r3
 800cee6:	f001 f9cf 	bl	800e288 <RCCEx_PLL3_Config>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d003      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cefc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	2100      	movs	r1, #0
 800cf0a:	6039      	str	r1, [r7, #0]
 800cf0c:	f003 0320 	and.w	r3, r3, #32
 800cf10:	607b      	str	r3, [r7, #4]
 800cf12:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cf16:	460b      	mov	r3, r1
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	d011      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf20:	3328      	adds	r3, #40	@ 0x28
 800cf22:	2102      	movs	r1, #2
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 f9af 	bl	800e288 <RCCEx_PLL3_Config>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cf30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d003      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cf40:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e000      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cf54:	46bd      	mov	sp, r7
 800cf56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf5a:	bf00      	nop
 800cf5c:	58024400 	.word	0x58024400

0800cf60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b090      	sub	sp, #64	@ 0x40
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cf72:	430b      	orrs	r3, r1
 800cf74:	f040 8094 	bne.w	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cf78:	4b9b      	ldr	r3, [pc, #620]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf7c:	f003 0307 	and.w	r3, r3, #7
 800cf80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	f200 8087 	bhi.w	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cf8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfa5 	.word	0x0800cfa5
 800cf94:	0800cfcd 	.word	0x0800cfcd
 800cf98:	0800cff5 	.word	0x0800cff5
 800cf9c:	0800d091 	.word	0x0800d091
 800cfa0:	0800d01d 	.word	0x0800d01d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfa4:	4b90      	ldr	r3, [pc, #576]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfb0:	d108      	bne.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 ff62 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfc0:	f000 bc93 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc8:	f000 bc8f 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfcc:	4b86      	ldr	r3, [pc, #536]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfd8:	d108      	bne.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfda:	f107 0318 	add.w	r3, r7, #24
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 fca6 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe8:	f000 bc7f 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff0:	f000 bc7b 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cff4:	4b7c      	ldr	r3, [pc, #496]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d000:	d108      	bne.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d002:	f107 030c 	add.w	r3, r7, #12
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fde6 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d010:	f000 bc6b 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d018:	f000 bc67 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d01c:	4b72      	ldr	r3, [pc, #456]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d01e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d024:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d026:	4b70      	ldr	r3, [pc, #448]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0304 	and.w	r3, r3, #4
 800d02e:	2b04      	cmp	r3, #4
 800d030:	d10c      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d038:	4b6b      	ldr	r3, [pc, #428]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	08db      	lsrs	r3, r3, #3
 800d03e:	f003 0303 	and.w	r3, r3, #3
 800d042:	4a6a      	ldr	r2, [pc, #424]	@ (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
 800d048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d04a:	e01f      	b.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d04c:	4b66      	ldr	r3, [pc, #408]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d058:	d106      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d060:	d102      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d062:	4b63      	ldr	r3, [pc, #396]	@ (800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d066:	e011      	b.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d068:	4b5f      	ldr	r3, [pc, #380]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d074:	d106      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d07c:	d102      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d07e:	4b5d      	ldr	r3, [pc, #372]	@ (800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d082:	e003      	b.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d088:	f000 bc2f 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d08c:	f000 bc2d 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d090:	4b59      	ldr	r3, [pc, #356]	@ (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d094:	f000 bc29 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d09c:	f000 bc25 	b.w	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d0a8:	430b      	orrs	r3, r1
 800d0aa:	f040 80a7 	bne.w	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d0ae:	4b4e      	ldr	r3, [pc, #312]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0b2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d0b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0be:	d054      	beq.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0c6:	f200 808b 	bhi.w	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d0d0:	f000 8083 	beq.w	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d0da:	f200 8081 	bhi.w	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0e4:	d02f      	beq.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0ec:	d878      	bhi.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0fa:	d012      	beq.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d0fc:	e070      	b.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d10a:	d107      	bne.n	800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d10c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d110:	4618      	mov	r0, r3
 800d112:	f000 feb5 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11a:	e3e6      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d120:	e3e3      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d122:	4b31      	ldr	r3, [pc, #196]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d12a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d12e:	d107      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d130:	f107 0318 	add.w	r3, r7, #24
 800d134:	4618      	mov	r0, r3
 800d136:	f000 fbfb 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d13e:	e3d4      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d144:	e3d1      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d146:	4b28      	ldr	r3, [pc, #160]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d14e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d152:	d107      	bne.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d154:	f107 030c 	add.w	r3, r7, #12
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fd3d 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d162:	e3c2      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d168:	e3bf      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d16a:	4b1f      	ldr	r3, [pc, #124]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d16e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d172:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d174:	4b1c      	ldr	r3, [pc, #112]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 0304 	and.w	r3, r3, #4
 800d17c:	2b04      	cmp	r3, #4
 800d17e:	d10c      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d182:	2b00      	cmp	r3, #0
 800d184:	d109      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d186:	4b18      	ldr	r3, [pc, #96]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	08db      	lsrs	r3, r3, #3
 800d18c:	f003 0303 	and.w	r3, r3, #3
 800d190:	4a16      	ldr	r2, [pc, #88]	@ (800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d192:	fa22 f303 	lsr.w	r3, r2, r3
 800d196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d198:	e01e      	b.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d19a:	4b13      	ldr	r3, [pc, #76]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1a6:	d106      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1ae:	d102      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1b4:	e010      	b.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1c2:	d106      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1ca:	d102      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1cc:	4b09      	ldr	r3, [pc, #36]	@ (800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1d0:	e002      	b.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1d6:	e388      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1d8:	e387      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d1da:	4b07      	ldr	r3, [pc, #28]	@ (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1de:	e384      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1e4:	e381      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1e6:	bf00      	nop
 800d1e8:	58024400 	.word	0x58024400
 800d1ec:	03d09000 	.word	0x03d09000
 800d1f0:	003d0900 	.word	0x003d0900
 800d1f4:	016e3600 	.word	0x016e3600
 800d1f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d200:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d204:	430b      	orrs	r3, r1
 800d206:	f040 809c 	bne.w	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d20a:	4b9e      	ldr	r3, [pc, #632]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d20e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d212:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d21a:	d054      	beq.n	800d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d222:	f200 808b 	bhi.w	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d22c:	f000 8083 	beq.w	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d232:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d236:	f200 8081 	bhi.w	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d240:	d02f      	beq.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d248:	d878      	bhi.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d256:	d012      	beq.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d258:	e070      	b.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d25a:	4b8a      	ldr	r3, [pc, #552]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d266:	d107      	bne.n	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 fe07 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d276:	e338      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d27c:	e335      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d27e:	4b81      	ldr	r3, [pc, #516]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d28a:	d107      	bne.n	800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d28c:	f107 0318 	add.w	r3, r7, #24
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fb4d 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d29a:	e326      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a0:	e323      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2a2:	4b78      	ldr	r3, [pc, #480]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d2aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2ae:	d107      	bne.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2b0:	f107 030c 	add.w	r3, r7, #12
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 fc8f 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2be:	e314      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2c4:	e311      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2c6:	4b6f      	ldr	r3, [pc, #444]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2d0:	4b6c      	ldr	r3, [pc, #432]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d10c      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d109      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2e2:	4b68      	ldr	r3, [pc, #416]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	08db      	lsrs	r3, r3, #3
 800d2e8:	f003 0303 	and.w	r3, r3, #3
 800d2ec:	4a66      	ldr	r2, [pc, #408]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2f4:	e01e      	b.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2f6:	4b63      	ldr	r3, [pc, #396]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d302:	d106      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d30a:	d102      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d30c:	4b5f      	ldr	r3, [pc, #380]	@ (800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d310:	e010      	b.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d312:	4b5c      	ldr	r3, [pc, #368]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d31a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d31e:	d106      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d326:	d102      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d328:	4b59      	ldr	r3, [pc, #356]	@ (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d32c:	e002      	b.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d332:	e2da      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d334:	e2d9      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d336:	4b57      	ldr	r3, [pc, #348]	@ (800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33a:	e2d6      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d340:	e2d3      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d346:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d34a:	430b      	orrs	r3, r1
 800d34c:	f040 80a7 	bne.w	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d350:	4b4c      	ldr	r3, [pc, #304]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d354:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d358:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d360:	d055      	beq.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d368:	f200 8096 	bhi.w	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d372:	f000 8084 	beq.w	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d37c:	f200 808c 	bhi.w	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d386:	d030      	beq.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d38e:	f200 8083 	bhi.w	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d39e:	d012      	beq.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d3a0:	e07a      	b.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3a2:	4b38      	ldr	r3, [pc, #224]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3ae:	d107      	bne.n	800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 fd63 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3be:	e294      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3c4:	e291      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3c6:	4b2f      	ldr	r3, [pc, #188]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3d2:	d107      	bne.n	800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3d4:	f107 0318 	add.w	r3, r7, #24
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 faa9 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3e2:	e282      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3e8:	e27f      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3ea:	4b26      	ldr	r3, [pc, #152]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3f6:	d107      	bne.n	800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3f8:	f107 030c 	add.w	r3, r7, #12
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 fbeb 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d406:	e270      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40c:	e26d      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d40e:	4b1d      	ldr	r3, [pc, #116]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d412:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d416:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d418:	4b1a      	ldr	r3, [pc, #104]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b04      	cmp	r3, #4
 800d422:	d10c      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d426:	2b00      	cmp	r3, #0
 800d428:	d109      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d42a:	4b16      	ldr	r3, [pc, #88]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	08db      	lsrs	r3, r3, #3
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	4a14      	ldr	r2, [pc, #80]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d436:	fa22 f303 	lsr.w	r3, r2, r3
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d43c:	e01e      	b.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d43e:	4b11      	ldr	r3, [pc, #68]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d44a:	d106      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d452:	d102      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d454:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d458:	e010      	b.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d45a:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d466:	d106      	bne.n	800d476 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d46e:	d102      	bne.n	800d476 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d470:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d474:	e002      	b.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d47a:	e236      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d47c:	e235      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d47e:	4b05      	ldr	r3, [pc, #20]	@ (800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d482:	e232      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d484:	58024400 	.word	0x58024400
 800d488:	03d09000 	.word	0x03d09000
 800d48c:	003d0900 	.word	0x003d0900
 800d490:	016e3600 	.word	0x016e3600
 800d494:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d49c:	e225      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4a2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d4a6:	430b      	orrs	r3, r1
 800d4a8:	f040 8085 	bne.w	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d4ac:	4b9c      	ldr	r3, [pc, #624]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d4bc:	d06b      	beq.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d4c4:	d874      	bhi.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d4cc:	d056      	beq.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d4d4:	d86c      	bhi.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d4dc:	d03b      	beq.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d4e4:	d864      	bhi.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4ec:	d021      	beq.n	800d532 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4f4:	d85c      	bhi.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d004      	beq.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d502:	d004      	beq.n	800d50e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d504:	e054      	b.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d506:	f7fe fb5f 	bl	800bbc8 <HAL_RCC_GetPCLK1Freq>
 800d50a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d50c:	e1ed      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d50e:	4b84      	ldr	r3, [pc, #528]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d51a:	d107      	bne.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d51c:	f107 0318 	add.w	r3, r7, #24
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fa05 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d52a:	e1de      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d530:	e1db      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d532:	4b7b      	ldr	r3, [pc, #492]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d53a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d53e:	d107      	bne.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d540:	f107 030c 	add.w	r3, r7, #12
 800d544:	4618      	mov	r0, r3
 800d546:	f000 fb47 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d54e:	e1cc      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d554:	e1c9      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d556:	4b72      	ldr	r3, [pc, #456]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d109      	bne.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d562:	4b6f      	ldr	r3, [pc, #444]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	08db      	lsrs	r3, r3, #3
 800d568:	f003 0303 	and.w	r3, r3, #3
 800d56c:	4a6d      	ldr	r2, [pc, #436]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d56e:	fa22 f303 	lsr.w	r3, r2, r3
 800d572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d574:	e1b9      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d57a:	e1b6      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d57c:	4b68      	ldr	r3, [pc, #416]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d588:	d102      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d58a:	4b67      	ldr	r3, [pc, #412]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d58e:	e1ac      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d594:	e1a9      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d596:	4b62      	ldr	r3, [pc, #392]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d59e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5a2:	d102      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d5a4:	4b61      	ldr	r3, [pc, #388]	@ (800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5a8:	e19f      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5ae:	e19c      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5b4:	e199      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5ba:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d5be:	430b      	orrs	r3, r1
 800d5c0:	d173      	bne.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d5c2:	4b57      	ldr	r3, [pc, #348]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d5ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5d2:	d02f      	beq.n	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5da:	d863      	bhi.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d004      	beq.n	800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5e8:	d012      	beq.n	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d5ea:	e05b      	b.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5ec:	4b4c      	ldr	r3, [pc, #304]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5f8:	d107      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5fa:	f107 0318 	add.w	r3, r7, #24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 f996 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d608:	e16f      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d60e:	e16c      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d610:	4b43      	ldr	r3, [pc, #268]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d61c:	d107      	bne.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d61e:	f107 030c 	add.w	r3, r7, #12
 800d622:	4618      	mov	r0, r3
 800d624:	f000 fad8 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d62c:	e15d      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d632:	e15a      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d634:	4b3a      	ldr	r3, [pc, #232]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d638:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d63c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d63e:	4b38      	ldr	r3, [pc, #224]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b04      	cmp	r3, #4
 800d648:	d10c      	bne.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d109      	bne.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d650:	4b33      	ldr	r3, [pc, #204]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	08db      	lsrs	r3, r3, #3
 800d656:	f003 0303 	and.w	r3, r3, #3
 800d65a:	4a32      	ldr	r2, [pc, #200]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d65c:	fa22 f303 	lsr.w	r3, r2, r3
 800d660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d662:	e01e      	b.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d664:	4b2e      	ldr	r3, [pc, #184]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d66c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d670:	d106      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d678:	d102      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d67a:	4b2b      	ldr	r3, [pc, #172]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d67e:	e010      	b.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d680:	4b27      	ldr	r3, [pc, #156]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d68c:	d106      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d694:	d102      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d696:	4b25      	ldr	r3, [pc, #148]	@ (800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d69a:	e002      	b.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d6a0:	e123      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d6a2:	e122      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e11f      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ae:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d6b2:	430b      	orrs	r3, r1
 800d6b4:	d13c      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d004      	beq.n	800d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6cc:	d012      	beq.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d6ce:	e023      	b.n	800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d6d0:	4b13      	ldr	r3, [pc, #76]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6dc:	d107      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 fbcc 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6ec:	e0fd      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f2:	e0fa      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d700:	d107      	bne.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d702:	f107 0318 	add.w	r3, r7, #24
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f912 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d710:	e0eb      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d716:	e0e8      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d71c:	e0e5      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d71e:	bf00      	nop
 800d720:	58024400 	.word	0x58024400
 800d724:	03d09000 	.word	0x03d09000
 800d728:	003d0900 	.word	0x003d0900
 800d72c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d734:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d738:	430b      	orrs	r3, r1
 800d73a:	f040 8085 	bne.w	800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d73e:	4b6d      	ldr	r3, [pc, #436]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d742:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d746:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d74e:	d06b      	beq.n	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d756:	d874      	bhi.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d75e:	d056      	beq.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d766:	d86c      	bhi.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d76e:	d03b      	beq.n	800d7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d776:	d864      	bhi.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d77e:	d021      	beq.n	800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d786:	d85c      	bhi.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d004      	beq.n	800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d794:	d004      	beq.n	800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d796:	e054      	b.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d798:	f000 f8b4 	bl	800d904 <HAL_RCCEx_GetD3PCLK1Freq>
 800d79c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d79e:	e0a4      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7a0:	4b54      	ldr	r3, [pc, #336]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7ac:	d107      	bne.n	800d7be <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7ae:	f107 0318 	add.w	r3, r7, #24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f8bc 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7bc:	e095      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c2:	e092      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7c4:	4b4b      	ldr	r3, [pc, #300]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d7cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7d0:	d107      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7d2:	f107 030c 	add.w	r3, r7, #12
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 f9fe 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7e0:	e083      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7e6:	e080      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7e8:	4b42      	ldr	r3, [pc, #264]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	d109      	bne.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	08db      	lsrs	r3, r3, #3
 800d7fa:	f003 0303 	and.w	r3, r3, #3
 800d7fe:	4a3e      	ldr	r2, [pc, #248]	@ (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d800:	fa22 f303 	lsr.w	r3, r2, r3
 800d804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d806:	e070      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d80c:	e06d      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d80e:	4b39      	ldr	r3, [pc, #228]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d81a:	d102      	bne.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d81c:	4b37      	ldr	r3, [pc, #220]	@ (800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d820:	e063      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d826:	e060      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d828:	4b32      	ldr	r3, [pc, #200]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d834:	d102      	bne.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d836:	4b32      	ldr	r3, [pc, #200]	@ (800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d83a:	e056      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d840:	e053      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d846:	e050      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d84c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d850:	430b      	orrs	r3, r1
 800d852:	d148      	bne.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d854:	4b27      	ldr	r3, [pc, #156]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d85c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d864:	d02a      	beq.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d86c:	d838      	bhi.n	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d87a:	d00d      	beq.n	800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d87c:	e030      	b.n	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d87e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d88a:	d102      	bne.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d88c:	4b1c      	ldr	r3, [pc, #112]	@ (800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d890:	e02b      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d896:	e028      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d898:	4b16      	ldr	r3, [pc, #88]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d8a4:	d107      	bne.n	800d8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fae8 	bl	800de80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8b4:	e019      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8ba:	e016      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8c8:	d107      	bne.n	800d8da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ca:	f107 0318 	add.w	r3, r7, #24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 f82e 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8d8:	e007      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8de:	e004      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8e4:	e001      	b.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3740      	adds	r7, #64	@ 0x40
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	58024400 	.word	0x58024400
 800d8f8:	03d09000 	.word	0x03d09000
 800d8fc:	003d0900 	.word	0x003d0900
 800d900:	016e3600 	.word	0x016e3600

0800d904 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d908:	f7fe f92e 	bl	800bb68 <HAL_RCC_GetHCLKFreq>
 800d90c:	4602      	mov	r2, r0
 800d90e:	4b06      	ldr	r3, [pc, #24]	@ (800d928 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	091b      	lsrs	r3, r3, #4
 800d914:	f003 0307 	and.w	r3, r3, #7
 800d918:	4904      	ldr	r1, [pc, #16]	@ (800d92c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d91a:	5ccb      	ldrb	r3, [r1, r3]
 800d91c:	f003 031f 	and.w	r3, r3, #31
 800d920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d924:	4618      	mov	r0, r3
 800d926:	bd80      	pop	{r7, pc}
 800d928:	58024400 	.word	0x58024400
 800d92c:	0801a8a0 	.word	0x0801a8a0

0800d930 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d930:	b480      	push	{r7}
 800d932:	b089      	sub	sp, #36	@ 0x24
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d938:	4ba1      	ldr	r3, [pc, #644]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d93c:	f003 0303 	and.w	r3, r3, #3
 800d940:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d942:	4b9f      	ldr	r3, [pc, #636]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d946:	0b1b      	lsrs	r3, r3, #12
 800d948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d94c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d94e:	4b9c      	ldr	r3, [pc, #624]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d952:	091b      	lsrs	r3, r3, #4
 800d954:	f003 0301 	and.w	r3, r3, #1
 800d958:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d95a:	4b99      	ldr	r3, [pc, #612]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95e:	08db      	lsrs	r3, r3, #3
 800d960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	fb02 f303 	mul.w	r3, r2, r3
 800d96a:	ee07 3a90 	vmov	s15, r3
 800d96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d972:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 8111 	beq.w	800dba0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	2b02      	cmp	r3, #2
 800d982:	f000 8083 	beq.w	800da8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b02      	cmp	r3, #2
 800d98a:	f200 80a1 	bhi.w	800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d056      	beq.n	800da48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d99a:	e099      	b.n	800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d99c:	4b88      	ldr	r3, [pc, #544]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 0320 	and.w	r3, r3, #32
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d02d      	beq.n	800da04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9a8:	4b85      	ldr	r3, [pc, #532]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	08db      	lsrs	r3, r3, #3
 800d9ae:	f003 0303 	and.w	r3, r3, #3
 800d9b2:	4a84      	ldr	r2, [pc, #528]	@ (800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	ee07 3a90 	vmov	s15, r3
 800d9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d2:	4b7b      	ldr	r3, [pc, #492]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9da:	ee07 3a90 	vmov	s15, r3
 800d9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da02:	e087      	b.n	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	ee07 3a90 	vmov	s15, r3
 800da0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dbcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800da12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da16:	4b6a      	ldr	r3, [pc, #424]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1e:	ee07 3a90 	vmov	s15, r3
 800da22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da26:	ed97 6a03 	vldr	s12, [r7, #12]
 800da2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da46:	e065      	b.n	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	ee07 3a90 	vmov	s15, r3
 800da4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da5a:	4b59      	ldr	r3, [pc, #356]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da62:	ee07 3a90 	vmov	s15, r3
 800da66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da8a:	e043      	b.n	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	ee07 3a90 	vmov	s15, r3
 800da92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da9e:	4b48      	ldr	r3, [pc, #288]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daae:	ed97 6a03 	vldr	s12, [r7, #12]
 800dab2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dabe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dace:	e021      	b.n	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dada:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dae2:	4b37      	ldr	r3, [pc, #220]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daea:	ee07 3a90 	vmov	s15, r3
 800daee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800daf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800db14:	4b2a      	ldr	r3, [pc, #168]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db18:	0a5b      	lsrs	r3, r3, #9
 800db1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db1e:	ee07 3a90 	vmov	s15, r3
 800db22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db3a:	ee17 2a90 	vmov	r2, s15
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800db42:	4b1f      	ldr	r3, [pc, #124]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db46:	0c1b      	lsrs	r3, r3, #16
 800db48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db4c:	ee07 3a90 	vmov	s15, r3
 800db50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db68:	ee17 2a90 	vmov	r2, s15
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800db70:	4b13      	ldr	r3, [pc, #76]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db74:	0e1b      	lsrs	r3, r3, #24
 800db76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db96:	ee17 2a90 	vmov	r2, s15
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db9e:	e008      	b.n	800dbb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	609a      	str	r2, [r3, #8]
}
 800dbb2:	bf00      	nop
 800dbb4:	3724      	adds	r7, #36	@ 0x24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	58024400 	.word	0x58024400
 800dbc4:	03d09000 	.word	0x03d09000
 800dbc8:	46000000 	.word	0x46000000
 800dbcc:	4c742400 	.word	0x4c742400
 800dbd0:	4a742400 	.word	0x4a742400
 800dbd4:	4bb71b00 	.word	0x4bb71b00

0800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b089      	sub	sp, #36	@ 0x24
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbe0:	4ba1      	ldr	r3, [pc, #644]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe4:	f003 0303 	and.w	r3, r3, #3
 800dbe8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dbea:	4b9f      	ldr	r3, [pc, #636]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbee:	0d1b      	lsrs	r3, r3, #20
 800dbf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dbf6:	4b9c      	ldr	r3, [pc, #624]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfa:	0a1b      	lsrs	r3, r3, #8
 800dbfc:	f003 0301 	and.w	r3, r3, #1
 800dc00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dc02:	4b99      	ldr	r3, [pc, #612]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc06:	08db      	lsrs	r3, r3, #3
 800dc08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	fb02 f303 	mul.w	r3, r2, r3
 800dc12:	ee07 3a90 	vmov	s15, r3
 800dc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 8111 	beq.w	800de48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	f000 8083 	beq.w	800dd34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	f200 80a1 	bhi.w	800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d056      	beq.n	800dcf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc42:	e099      	b.n	800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc44:	4b88      	ldr	r3, [pc, #544]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0320 	and.w	r3, r3, #32
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d02d      	beq.n	800dcac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc50:	4b85      	ldr	r3, [pc, #532]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	08db      	lsrs	r3, r3, #3
 800dc56:	f003 0303 	and.w	r3, r3, #3
 800dc5a:	4a84      	ldr	r2, [pc, #528]	@ (800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dc5c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	ee07 3a90 	vmov	s15, r3
 800dc68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	ee07 3a90 	vmov	s15, r3
 800dc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7a:	4b7b      	ldr	r3, [pc, #492]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc82:	ee07 3a90 	vmov	s15, r3
 800dc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dcaa:	e087      	b.n	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	ee07 3a90 	vmov	s15, r3
 800dcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800de74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcbe:	4b6a      	ldr	r3, [pc, #424]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcce:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcee:	e065      	b.n	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	ee07 3a90 	vmov	s15, r3
 800dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800de78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd02:	4b59      	ldr	r3, [pc, #356]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0a:	ee07 3a90 	vmov	s15, r3
 800dd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd12:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd32:	e043      	b.n	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	ee07 3a90 	vmov	s15, r3
 800dd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800de7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd46:	4b48      	ldr	r3, [pc, #288]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd4e:	ee07 3a90 	vmov	s15, r3
 800dd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd56:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd76:	e021      	b.n	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	ee07 3a90 	vmov	s15, r3
 800dd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800de78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd8a:	4b37      	ldr	r3, [pc, #220]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd92:	ee07 3a90 	vmov	s15, r3
 800dd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ddbc:	4b2a      	ldr	r3, [pc, #168]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc0:	0a5b      	lsrs	r3, r3, #9
 800ddc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddc6:	ee07 3a90 	vmov	s15, r3
 800ddca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dde2:	ee17 2a90 	vmov	r2, s15
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ddea:	4b1f      	ldr	r3, [pc, #124]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddee:	0c1b      	lsrs	r3, r3, #16
 800ddf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddf4:	ee07 3a90 	vmov	s15, r3
 800ddf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de04:	edd7 6a07 	vldr	s13, [r7, #28]
 800de08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de10:	ee17 2a90 	vmov	r2, s15
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800de18:	4b13      	ldr	r3, [pc, #76]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de1c:	0e1b      	lsrs	r3, r3, #24
 800de1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de22:	ee07 3a90 	vmov	s15, r3
 800de26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de32:	edd7 6a07 	vldr	s13, [r7, #28]
 800de36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de3e:	ee17 2a90 	vmov	r2, s15
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de46:	e008      	b.n	800de5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	609a      	str	r2, [r3, #8]
}
 800de5a:	bf00      	nop
 800de5c:	3724      	adds	r7, #36	@ 0x24
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	58024400 	.word	0x58024400
 800de6c:	03d09000 	.word	0x03d09000
 800de70:	46000000 	.word	0x46000000
 800de74:	4c742400 	.word	0x4c742400
 800de78:	4a742400 	.word	0x4a742400
 800de7c:	4bb71b00 	.word	0x4bb71b00

0800de80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800de80:	b480      	push	{r7}
 800de82:	b089      	sub	sp, #36	@ 0x24
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de88:	4ba0      	ldr	r3, [pc, #640]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de8c:	f003 0303 	and.w	r3, r3, #3
 800de90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800de92:	4b9e      	ldr	r3, [pc, #632]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de96:	091b      	lsrs	r3, r3, #4
 800de98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800de9e:	4b9b      	ldr	r3, [pc, #620]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea2:	f003 0301 	and.w	r3, r3, #1
 800dea6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dea8:	4b98      	ldr	r3, [pc, #608]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deac:	08db      	lsrs	r3, r3, #3
 800deae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	fb02 f303 	mul.w	r3, r2, r3
 800deb8:	ee07 3a90 	vmov	s15, r3
 800debc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 8111 	beq.w	800e0ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	2b02      	cmp	r3, #2
 800ded0:	f000 8083 	beq.w	800dfda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	f200 80a1 	bhi.w	800e01e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d003      	beq.n	800deea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d056      	beq.n	800df96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dee8:	e099      	b.n	800e01e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deea:	4b88      	ldr	r3, [pc, #544]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0320 	and.w	r3, r3, #32
 800def2:	2b00      	cmp	r3, #0
 800def4:	d02d      	beq.n	800df52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800def6:	4b85      	ldr	r3, [pc, #532]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	08db      	lsrs	r3, r3, #3
 800defc:	f003 0303 	and.w	r3, r3, #3
 800df00:	4a83      	ldr	r2, [pc, #524]	@ (800e110 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800df02:	fa22 f303 	lsr.w	r3, r2, r3
 800df06:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	ee07 3a90 	vmov	s15, r3
 800df18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df20:	4b7a      	ldr	r3, [pc, #488]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df28:	ee07 3a90 	vmov	s15, r3
 800df2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df30:	ed97 6a03 	vldr	s12, [r7, #12]
 800df34:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800df50:	e087      	b.n	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	ee07 3a90 	vmov	s15, r3
 800df58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df5c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e118 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df64:	4b69      	ldr	r3, [pc, #420]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df6c:	ee07 3a90 	vmov	s15, r3
 800df70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df74:	ed97 6a03 	vldr	s12, [r7, #12]
 800df78:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df94:	e065      	b.n	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	ee07 3a90 	vmov	s15, r3
 800df9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfa0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e11c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dfa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfa8:	4b58      	ldr	r3, [pc, #352]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb0:	ee07 3a90 	vmov	s15, r3
 800dfb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfbc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfd8:	e043      	b.n	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	ee07 3a90 	vmov	s15, r3
 800dfe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dfe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfec:	4b47      	ldr	r3, [pc, #284]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff4:	ee07 3a90 	vmov	s15, r3
 800dff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dffc:	ed97 6a03 	vldr	s12, [r7, #12]
 800e000:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e00c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e01c:	e021      	b.n	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	ee07 3a90 	vmov	s15, r3
 800e024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e028:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e118 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e02c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e030:	4b36      	ldr	r3, [pc, #216]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e038:	ee07 3a90 	vmov	s15, r3
 800e03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e040:	ed97 6a03 	vldr	s12, [r7, #12]
 800e044:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e05c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e060:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e062:	4b2a      	ldr	r3, [pc, #168]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e066:	0a5b      	lsrs	r3, r3, #9
 800e068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e06c:	ee07 3a90 	vmov	s15, r3
 800e070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e07c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e088:	ee17 2a90 	vmov	r2, s15
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e090:	4b1e      	ldr	r3, [pc, #120]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e094:	0c1b      	lsrs	r3, r3, #16
 800e096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e09a:	ee07 3a90 	vmov	s15, r3
 800e09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0b6:	ee17 2a90 	vmov	r2, s15
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e0be:	4b13      	ldr	r3, [pc, #76]	@ (800e10c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c2:	0e1b      	lsrs	r3, r3, #24
 800e0c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0c8:	ee07 3a90 	vmov	s15, r3
 800e0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0e4:	ee17 2a90 	vmov	r2, s15
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e0ec:	e008      	b.n	800e100 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	609a      	str	r2, [r3, #8]
}
 800e100:	bf00      	nop
 800e102:	3724      	adds	r7, #36	@ 0x24
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	58024400 	.word	0x58024400
 800e110:	03d09000 	.word	0x03d09000
 800e114:	46000000 	.word	0x46000000
 800e118:	4c742400 	.word	0x4c742400
 800e11c:	4a742400 	.word	0x4a742400
 800e120:	4bb71b00 	.word	0x4bb71b00

0800e124 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e132:	4b53      	ldr	r3, [pc, #332]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d101      	bne.n	800e142 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e099      	b.n	800e276 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e142:	4b4f      	ldr	r3, [pc, #316]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a4e      	ldr	r2, [pc, #312]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e148:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e14e:	f7f6 ff53 	bl	8004ff8 <HAL_GetTick>
 800e152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e154:	e008      	b.n	800e168 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e156:	f7f6 ff4f 	bl	8004ff8 <HAL_GetTick>
 800e15a:	4602      	mov	r2, r0
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	2b02      	cmp	r3, #2
 800e162:	d901      	bls.n	800e168 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e164:	2303      	movs	r3, #3
 800e166:	e086      	b.n	800e276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e168:	4b45      	ldr	r3, [pc, #276]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1f0      	bne.n	800e156 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e174:	4b42      	ldr	r3, [pc, #264]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e178:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	031b      	lsls	r3, r3, #12
 800e182:	493f      	ldr	r1, [pc, #252]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e184:	4313      	orrs	r3, r2
 800e186:	628b      	str	r3, [r1, #40]	@ 0x28
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	3b01      	subs	r3, #1
 800e198:	025b      	lsls	r3, r3, #9
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	431a      	orrs	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	041b      	lsls	r3, r3, #16
 800e1a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	061b      	lsls	r3, r3, #24
 800e1b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e1b8:	4931      	ldr	r1, [pc, #196]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e1be:	4b30      	ldr	r3, [pc, #192]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	492d      	ldr	r1, [pc, #180]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e1d0:	4b2b      	ldr	r3, [pc, #172]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d4:	f023 0220 	bic.w	r2, r3, #32
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	4928      	ldr	r1, [pc, #160]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e1e2:	4b27      	ldr	r3, [pc, #156]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e6:	4a26      	ldr	r2, [pc, #152]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1e8:	f023 0310 	bic.w	r3, r3, #16
 800e1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e1ee:	4b24      	ldr	r3, [pc, #144]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1f2:	4b24      	ldr	r3, [pc, #144]	@ (800e284 <RCCEx_PLL2_Config+0x160>)
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	69d2      	ldr	r2, [r2, #28]
 800e1fa:	00d2      	lsls	r2, r2, #3
 800e1fc:	4920      	ldr	r1, [pc, #128]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e202:	4b1f      	ldr	r3, [pc, #124]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e206:	4a1e      	ldr	r2, [pc, #120]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e208:	f043 0310 	orr.w	r3, r3, #16
 800e20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e214:	4b1a      	ldr	r3, [pc, #104]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e218:	4a19      	ldr	r2, [pc, #100]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e21a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e21e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e220:	e00f      	b.n	800e242 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d106      	bne.n	800e236 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e228:	4b15      	ldr	r3, [pc, #84]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22c:	4a14      	ldr	r2, [pc, #80]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e22e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e234:	e005      	b.n	800e242 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e236:	4b12      	ldr	r3, [pc, #72]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e23a:	4a11      	ldr	r2, [pc, #68]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e23c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e240:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e242:	4b0f      	ldr	r3, [pc, #60]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a0e      	ldr	r2, [pc, #56]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e24e:	f7f6 fed3 	bl	8004ff8 <HAL_GetTick>
 800e252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e254:	e008      	b.n	800e268 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e256:	f7f6 fecf 	bl	8004ff8 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	2b02      	cmp	r3, #2
 800e262:	d901      	bls.n	800e268 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e006      	b.n	800e276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e268:	4b05      	ldr	r3, [pc, #20]	@ (800e280 <RCCEx_PLL2_Config+0x15c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d0f0      	beq.n	800e256 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	58024400 	.word	0x58024400
 800e284:	ffff0007 	.word	0xffff0007

0800e288 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e296:	4b53      	ldr	r3, [pc, #332]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e29a:	f003 0303 	and.w	r3, r3, #3
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d101      	bne.n	800e2a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e099      	b.n	800e3da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e2a6:	4b4f      	ldr	r3, [pc, #316]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a4e      	ldr	r2, [pc, #312]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e2ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2b2:	f7f6 fea1 	bl	8004ff8 <HAL_GetTick>
 800e2b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e2b8:	e008      	b.n	800e2cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e2ba:	f7f6 fe9d 	bl	8004ff8 <HAL_GetTick>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d901      	bls.n	800e2cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e086      	b.n	800e3da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e2cc:	4b45      	ldr	r3, [pc, #276]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1f0      	bne.n	800e2ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e2d8:	4b42      	ldr	r3, [pc, #264]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	051b      	lsls	r3, r3, #20
 800e2e6:	493f      	ldr	r1, [pc, #252]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	025b      	lsls	r3, r3, #9
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	431a      	orrs	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	3b01      	subs	r3, #1
 800e308:	041b      	lsls	r3, r3, #16
 800e30a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e30e:	431a      	orrs	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	3b01      	subs	r3, #1
 800e316:	061b      	lsls	r3, r3, #24
 800e318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e31c:	4931      	ldr	r1, [pc, #196]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e31e:	4313      	orrs	r3, r2
 800e320:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e322:	4b30      	ldr	r3, [pc, #192]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	492d      	ldr	r1, [pc, #180]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e330:	4313      	orrs	r3, r2
 800e332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e334:	4b2b      	ldr	r3, [pc, #172]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e338:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	4928      	ldr	r1, [pc, #160]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e342:	4313      	orrs	r3, r2
 800e344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e346:	4b27      	ldr	r3, [pc, #156]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34a:	4a26      	ldr	r2, [pc, #152]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e34c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e352:	4b24      	ldr	r3, [pc, #144]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e356:	4b24      	ldr	r3, [pc, #144]	@ (800e3e8 <RCCEx_PLL3_Config+0x160>)
 800e358:	4013      	ands	r3, r2
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	69d2      	ldr	r2, [r2, #28]
 800e35e:	00d2      	lsls	r2, r2, #3
 800e360:	4920      	ldr	r1, [pc, #128]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e362:	4313      	orrs	r3, r2
 800e364:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e366:	4b1f      	ldr	r3, [pc, #124]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e36a:	4a1e      	ldr	r2, [pc, #120]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e36c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e378:	4b1a      	ldr	r3, [pc, #104]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37c:	4a19      	ldr	r2, [pc, #100]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e37e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e384:	e00f      	b.n	800e3a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d106      	bne.n	800e39a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e38c:	4b15      	ldr	r3, [pc, #84]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e390:	4a14      	ldr	r2, [pc, #80]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e392:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e398:	e005      	b.n	800e3a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e39a:	4b12      	ldr	r3, [pc, #72]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e39e:	4a11      	ldr	r2, [pc, #68]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e3a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a0e      	ldr	r2, [pc, #56]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e3ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3b2:	f7f6 fe21 	bl	8004ff8 <HAL_GetTick>
 800e3b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3b8:	e008      	b.n	800e3cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e3ba:	f7f6 fe1d 	bl	8004ff8 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d901      	bls.n	800e3cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	e006      	b.n	800e3da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3cc:	4b05      	ldr	r3, [pc, #20]	@ (800e3e4 <RCCEx_PLL3_Config+0x15c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0f0      	beq.n	800e3ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	58024400 	.word	0x58024400
 800e3e8:	ffff0007 	.word	0xffff0007

0800e3ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e10f      	b.n	800e61e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4a87      	ldr	r2, [pc, #540]	@ (800e628 <HAL_SPI_Init+0x23c>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d00f      	beq.n	800e42e <HAL_SPI_Init+0x42>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a86      	ldr	r2, [pc, #536]	@ (800e62c <HAL_SPI_Init+0x240>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d00a      	beq.n	800e42e <HAL_SPI_Init+0x42>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a84      	ldr	r2, [pc, #528]	@ (800e630 <HAL_SPI_Init+0x244>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d005      	beq.n	800e42e <HAL_SPI_Init+0x42>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	2b0f      	cmp	r3, #15
 800e428:	d901      	bls.n	800e42e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	e0f7      	b.n	800e61e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f900 	bl	800e634 <SPI_GetPacketSize>
 800e434:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a7b      	ldr	r2, [pc, #492]	@ (800e628 <HAL_SPI_Init+0x23c>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d00c      	beq.n	800e45a <HAL_SPI_Init+0x6e>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a79      	ldr	r2, [pc, #484]	@ (800e62c <HAL_SPI_Init+0x240>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d007      	beq.n	800e45a <HAL_SPI_Init+0x6e>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a78      	ldr	r2, [pc, #480]	@ (800e630 <HAL_SPI_Init+0x244>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d002      	beq.n	800e45a <HAL_SPI_Init+0x6e>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2b08      	cmp	r3, #8
 800e458:	d811      	bhi.n	800e47e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e45e:	4a72      	ldr	r2, [pc, #456]	@ (800e628 <HAL_SPI_Init+0x23c>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d009      	beq.n	800e478 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a70      	ldr	r2, [pc, #448]	@ (800e62c <HAL_SPI_Init+0x240>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d004      	beq.n	800e478 <HAL_SPI_Init+0x8c>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a6f      	ldr	r2, [pc, #444]	@ (800e630 <HAL_SPI_Init+0x244>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d104      	bne.n	800e482 <HAL_SPI_Init+0x96>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2b10      	cmp	r3, #16
 800e47c:	d901      	bls.n	800e482 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	e0cd      	b.n	800e61e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f3 fc86 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2202      	movs	r2, #2
 800e4a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f022 0201 	bic.w	r2, r2, #1
 800e4b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e4be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4c8:	d119      	bne.n	800e4fe <HAL_SPI_Init+0x112>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e4d2:	d103      	bne.n	800e4dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d008      	beq.n	800e4ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10c      	bne.n	800e4fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e4e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4ec:	d107      	bne.n	800e4fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e4fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00f      	beq.n	800e52a <HAL_SPI_Init+0x13e>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	2b06      	cmp	r3, #6
 800e510:	d90b      	bls.n	800e52a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	430a      	orrs	r2, r1
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	e007      	b.n	800e53a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e538:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	69da      	ldr	r2, [r3, #28]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e542:	431a      	orrs	r2, r3
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	431a      	orrs	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e54c:	ea42 0103 	orr.w	r1, r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	430a      	orrs	r2, r1
 800e55a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e564:	431a      	orrs	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e56a:	431a      	orrs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	431a      	orrs	r2, r3
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	431a      	orrs	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	695b      	ldr	r3, [r3, #20]
 800e57c:	431a      	orrs	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	431a      	orrs	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	431a      	orrs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e58e:	431a      	orrs	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	431a      	orrs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e59a:	ea42 0103 	orr.w	r1, r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d113      	bne.n	800e5da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e5d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f022 0201 	bic.w	r2, r2, #1
 800e5e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	430a      	orrs	r2, r1
 800e60a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	40013000 	.word	0x40013000
 800e62c:	40003800 	.word	0x40003800
 800e630:	40003c00 	.word	0x40003c00

0800e634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e640:	095b      	lsrs	r3, r3, #5
 800e642:	3301      	adds	r3, #1
 800e644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	3307      	adds	r3, #7
 800e652:	08db      	lsrs	r3, r3, #3
 800e654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d101      	bne.n	800e67c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	e049      	b.n	800e710 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e682:	b2db      	uxtb	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	d106      	bne.n	800e696 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7f3 fc91 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2202      	movs	r2, #2
 800e69a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f001 f9a3 	bl	800f9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d001      	beq.n	800e730 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	e056      	b.n	800e7de <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2202      	movs	r2, #2
 800e734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a2b      	ldr	r2, [pc, #172]	@ (800e7ec <HAL_TIM_Base_Start+0xd4>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d02c      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e74a:	d027      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a27      	ldr	r2, [pc, #156]	@ (800e7f0 <HAL_TIM_Base_Start+0xd8>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d022      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a26      	ldr	r2, [pc, #152]	@ (800e7f4 <HAL_TIM_Base_Start+0xdc>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d01d      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a24      	ldr	r2, [pc, #144]	@ (800e7f8 <HAL_TIM_Base_Start+0xe0>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d018      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a23      	ldr	r2, [pc, #140]	@ (800e7fc <HAL_TIM_Base_Start+0xe4>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d013      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a21      	ldr	r2, [pc, #132]	@ (800e800 <HAL_TIM_Base_Start+0xe8>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d00e      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4a20      	ldr	r2, [pc, #128]	@ (800e804 <HAL_TIM_Base_Start+0xec>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d009      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a1e      	ldr	r2, [pc, #120]	@ (800e808 <HAL_TIM_Base_Start+0xf0>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d004      	beq.n	800e79c <HAL_TIM_Base_Start+0x84>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a1d      	ldr	r2, [pc, #116]	@ (800e80c <HAL_TIM_Base_Start+0xf4>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d115      	bne.n	800e7c8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	689a      	ldr	r2, [r3, #8]
 800e7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e810 <HAL_TIM_Base_Start+0xf8>)
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b06      	cmp	r3, #6
 800e7ac:	d015      	beq.n	800e7da <HAL_TIM_Base_Start+0xc2>
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7b4:	d011      	beq.n	800e7da <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f042 0201 	orr.w	r2, r2, #1
 800e7c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7c6:	e008      	b.n	800e7da <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f042 0201 	orr.w	r2, r2, #1
 800e7d6:	601a      	str	r2, [r3, #0]
 800e7d8:	e000      	b.n	800e7dc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3714      	adds	r7, #20
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	40010000 	.word	0x40010000
 800e7f0:	40000400 	.word	0x40000400
 800e7f4:	40000800 	.word	0x40000800
 800e7f8:	40000c00 	.word	0x40000c00
 800e7fc:	40010400 	.word	0x40010400
 800e800:	40001800 	.word	0x40001800
 800e804:	40014000 	.word	0x40014000
 800e808:	4000e000 	.word	0x4000e000
 800e80c:	4000e400 	.word	0x4000e400
 800e810:	00010007 	.word	0x00010007

0800e814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e822:	b2db      	uxtb	r3, r3
 800e824:	2b01      	cmp	r3, #1
 800e826:	d001      	beq.n	800e82c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	e05e      	b.n	800e8ea <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2202      	movs	r2, #2
 800e830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68da      	ldr	r2, [r3, #12]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f042 0201 	orr.w	r2, r2, #1
 800e842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a2b      	ldr	r2, [pc, #172]	@ (800e8f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d02c      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e856:	d027      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a27      	ldr	r2, [pc, #156]	@ (800e8fc <HAL_TIM_Base_Start_IT+0xe8>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d022      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a26      	ldr	r2, [pc, #152]	@ (800e900 <HAL_TIM_Base_Start_IT+0xec>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d01d      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a24      	ldr	r2, [pc, #144]	@ (800e904 <HAL_TIM_Base_Start_IT+0xf0>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d018      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a23      	ldr	r2, [pc, #140]	@ (800e908 <HAL_TIM_Base_Start_IT+0xf4>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d013      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a21      	ldr	r2, [pc, #132]	@ (800e90c <HAL_TIM_Base_Start_IT+0xf8>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d00e      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a20      	ldr	r2, [pc, #128]	@ (800e910 <HAL_TIM_Base_Start_IT+0xfc>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d009      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a1e      	ldr	r2, [pc, #120]	@ (800e914 <HAL_TIM_Base_Start_IT+0x100>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d004      	beq.n	800e8a8 <HAL_TIM_Base_Start_IT+0x94>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a1d      	ldr	r2, [pc, #116]	@ (800e918 <HAL_TIM_Base_Start_IT+0x104>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d115      	bne.n	800e8d4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	689a      	ldr	r2, [r3, #8]
 800e8ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e91c <HAL_TIM_Base_Start_IT+0x108>)
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2b06      	cmp	r3, #6
 800e8b8:	d015      	beq.n	800e8e6 <HAL_TIM_Base_Start_IT+0xd2>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8c0:	d011      	beq.n	800e8e6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f042 0201 	orr.w	r2, r2, #1
 800e8d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8d2:	e008      	b.n	800e8e6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f042 0201 	orr.w	r2, r2, #1
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	e000      	b.n	800e8e8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	40010000 	.word	0x40010000
 800e8fc:	40000400 	.word	0x40000400
 800e900:	40000800 	.word	0x40000800
 800e904:	40000c00 	.word	0x40000c00
 800e908:	40010400 	.word	0x40010400
 800e90c:	40001800 	.word	0x40001800
 800e910:	40014000 	.word	0x40014000
 800e914:	4000e000 	.word	0x4000e000
 800e918:	4000e400 	.word	0x4000e400
 800e91c:	00010007 	.word	0x00010007

0800e920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	e049      	b.n	800e9c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d106      	bne.n	800e94c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f841 	bl	800e9ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3304      	adds	r3, #4
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	f001 f848 	bl	800f9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2201      	movs	r2, #1
 800e980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2201      	movs	r2, #1
 800e998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e9d6:	bf00      	nop
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
	...

0800e9e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d109      	bne.n	800ea08 <HAL_TIM_PWM_Start+0x24>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	bf14      	ite	ne
 800ea00:	2301      	movne	r3, #1
 800ea02:	2300      	moveq	r3, #0
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	e03c      	b.n	800ea82 <HAL_TIM_PWM_Start+0x9e>
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2b04      	cmp	r3, #4
 800ea0c:	d109      	bne.n	800ea22 <HAL_TIM_PWM_Start+0x3e>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	bf14      	ite	ne
 800ea1a:	2301      	movne	r3, #1
 800ea1c:	2300      	moveq	r3, #0
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	e02f      	b.n	800ea82 <HAL_TIM_PWM_Start+0x9e>
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2b08      	cmp	r3, #8
 800ea26:	d109      	bne.n	800ea3c <HAL_TIM_PWM_Start+0x58>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	bf14      	ite	ne
 800ea34:	2301      	movne	r3, #1
 800ea36:	2300      	moveq	r3, #0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	e022      	b.n	800ea82 <HAL_TIM_PWM_Start+0x9e>
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	2b0c      	cmp	r3, #12
 800ea40:	d109      	bne.n	800ea56 <HAL_TIM_PWM_Start+0x72>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	bf14      	ite	ne
 800ea4e:	2301      	movne	r3, #1
 800ea50:	2300      	moveq	r3, #0
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	e015      	b.n	800ea82 <HAL_TIM_PWM_Start+0x9e>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b10      	cmp	r3, #16
 800ea5a:	d109      	bne.n	800ea70 <HAL_TIM_PWM_Start+0x8c>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	bf14      	ite	ne
 800ea68:	2301      	movne	r3, #1
 800ea6a:	2300      	moveq	r3, #0
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	e008      	b.n	800ea82 <HAL_TIM_PWM_Start+0x9e>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e0ab      	b.n	800ebe2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <HAL_TIM_PWM_Start+0xb6>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea98:	e023      	b.n	800eae2 <HAL_TIM_PWM_Start+0xfe>
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	2b04      	cmp	r3, #4
 800ea9e:	d104      	bne.n	800eaaa <HAL_TIM_PWM_Start+0xc6>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2202      	movs	r2, #2
 800eaa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eaa8:	e01b      	b.n	800eae2 <HAL_TIM_PWM_Start+0xfe>
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b08      	cmp	r3, #8
 800eaae:	d104      	bne.n	800eaba <HAL_TIM_PWM_Start+0xd6>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eab8:	e013      	b.n	800eae2 <HAL_TIM_PWM_Start+0xfe>
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	2b0c      	cmp	r3, #12
 800eabe:	d104      	bne.n	800eaca <HAL_TIM_PWM_Start+0xe6>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2202      	movs	r2, #2
 800eac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eac8:	e00b      	b.n	800eae2 <HAL_TIM_PWM_Start+0xfe>
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	2b10      	cmp	r3, #16
 800eace:	d104      	bne.n	800eada <HAL_TIM_PWM_Start+0xf6>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ead8:	e003      	b.n	800eae2 <HAL_TIM_PWM_Start+0xfe>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2202      	movs	r2, #2
 800eade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2201      	movs	r2, #1
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f001 fba8 	bl	8010240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a3d      	ldr	r2, [pc, #244]	@ (800ebec <HAL_TIM_PWM_Start+0x208>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d013      	beq.n	800eb22 <HAL_TIM_PWM_Start+0x13e>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a3c      	ldr	r2, [pc, #240]	@ (800ebf0 <HAL_TIM_PWM_Start+0x20c>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d00e      	beq.n	800eb22 <HAL_TIM_PWM_Start+0x13e>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a3a      	ldr	r2, [pc, #232]	@ (800ebf4 <HAL_TIM_PWM_Start+0x210>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d009      	beq.n	800eb22 <HAL_TIM_PWM_Start+0x13e>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a39      	ldr	r2, [pc, #228]	@ (800ebf8 <HAL_TIM_PWM_Start+0x214>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d004      	beq.n	800eb22 <HAL_TIM_PWM_Start+0x13e>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a37      	ldr	r2, [pc, #220]	@ (800ebfc <HAL_TIM_PWM_Start+0x218>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d101      	bne.n	800eb26 <HAL_TIM_PWM_Start+0x142>
 800eb22:	2301      	movs	r3, #1
 800eb24:	e000      	b.n	800eb28 <HAL_TIM_PWM_Start+0x144>
 800eb26:	2300      	movs	r3, #0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d007      	beq.n	800eb3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eb3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a2a      	ldr	r2, [pc, #168]	@ (800ebec <HAL_TIM_PWM_Start+0x208>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d02c      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb4e:	d027      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a2a      	ldr	r2, [pc, #168]	@ (800ec00 <HAL_TIM_PWM_Start+0x21c>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d022      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a29      	ldr	r2, [pc, #164]	@ (800ec04 <HAL_TIM_PWM_Start+0x220>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d01d      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a27      	ldr	r2, [pc, #156]	@ (800ec08 <HAL_TIM_PWM_Start+0x224>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d018      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a1f      	ldr	r2, [pc, #124]	@ (800ebf0 <HAL_TIM_PWM_Start+0x20c>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d013      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a23      	ldr	r2, [pc, #140]	@ (800ec0c <HAL_TIM_PWM_Start+0x228>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d00e      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf4 <HAL_TIM_PWM_Start+0x210>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d009      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a1f      	ldr	r2, [pc, #124]	@ (800ec10 <HAL_TIM_PWM_Start+0x22c>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d004      	beq.n	800eba0 <HAL_TIM_PWM_Start+0x1bc>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ec14 <HAL_TIM_PWM_Start+0x230>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d115      	bne.n	800ebcc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	4b1c      	ldr	r3, [pc, #112]	@ (800ec18 <HAL_TIM_PWM_Start+0x234>)
 800eba8:	4013      	ands	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b06      	cmp	r3, #6
 800ebb0:	d015      	beq.n	800ebde <HAL_TIM_PWM_Start+0x1fa>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebb8:	d011      	beq.n	800ebde <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f042 0201 	orr.w	r2, r2, #1
 800ebc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebca:	e008      	b.n	800ebde <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f042 0201 	orr.w	r2, r2, #1
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	e000      	b.n	800ebe0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400
 800ebf4:	40014000 	.word	0x40014000
 800ebf8:	40014400 	.word	0x40014400
 800ebfc:	40014800 	.word	0x40014800
 800ec00:	40000400 	.word	0x40000400
 800ec04:	40000800 	.word	0x40000800
 800ec08:	40000c00 	.word	0x40000c00
 800ec0c:	40001800 	.word	0x40001800
 800ec10:	4000e000 	.word	0x4000e000
 800ec14:	4000e400 	.word	0x4000e400
 800ec18:	00010007 	.word	0x00010007

0800ec1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f001 fb06 	bl	8010240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a3e      	ldr	r2, [pc, #248]	@ (800ed34 <HAL_TIM_PWM_Stop+0x118>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d013      	beq.n	800ec66 <HAL_TIM_PWM_Stop+0x4a>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a3d      	ldr	r2, [pc, #244]	@ (800ed38 <HAL_TIM_PWM_Stop+0x11c>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d00e      	beq.n	800ec66 <HAL_TIM_PWM_Stop+0x4a>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a3b      	ldr	r2, [pc, #236]	@ (800ed3c <HAL_TIM_PWM_Stop+0x120>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d009      	beq.n	800ec66 <HAL_TIM_PWM_Stop+0x4a>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a3a      	ldr	r2, [pc, #232]	@ (800ed40 <HAL_TIM_PWM_Stop+0x124>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d004      	beq.n	800ec66 <HAL_TIM_PWM_Stop+0x4a>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a38      	ldr	r2, [pc, #224]	@ (800ed44 <HAL_TIM_PWM_Stop+0x128>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d101      	bne.n	800ec6a <HAL_TIM_PWM_Stop+0x4e>
 800ec66:	2301      	movs	r3, #1
 800ec68:	e000      	b.n	800ec6c <HAL_TIM_PWM_Stop+0x50>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d017      	beq.n	800eca0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6a1a      	ldr	r2, [r3, #32]
 800ec76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d10f      	bne.n	800eca0 <HAL_TIM_PWM_Stop+0x84>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6a1a      	ldr	r2, [r3, #32]
 800ec86:	f240 4344 	movw	r3, #1092	@ 0x444
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d107      	bne.n	800eca0 <HAL_TIM_PWM_Stop+0x84>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ec9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6a1a      	ldr	r2, [r3, #32]
 800eca6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ecaa:	4013      	ands	r3, r2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10f      	bne.n	800ecd0 <HAL_TIM_PWM_Stop+0xb4>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6a1a      	ldr	r2, [r3, #32]
 800ecb6:	f240 4344 	movw	r3, #1092	@ 0x444
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d107      	bne.n	800ecd0 <HAL_TIM_PWM_Stop+0xb4>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f022 0201 	bic.w	r2, r2, #1
 800ecce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d104      	bne.n	800ece0 <HAL_TIM_PWM_Stop+0xc4>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ecde:	e023      	b.n	800ed28 <HAL_TIM_PWM_Stop+0x10c>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b04      	cmp	r3, #4
 800ece4:	d104      	bne.n	800ecf0 <HAL_TIM_PWM_Stop+0xd4>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ecee:	e01b      	b.n	800ed28 <HAL_TIM_PWM_Stop+0x10c>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2b08      	cmp	r3, #8
 800ecf4:	d104      	bne.n	800ed00 <HAL_TIM_PWM_Stop+0xe4>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ecfe:	e013      	b.n	800ed28 <HAL_TIM_PWM_Stop+0x10c>
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	2b0c      	cmp	r3, #12
 800ed04:	d104      	bne.n	800ed10 <HAL_TIM_PWM_Stop+0xf4>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ed0e:	e00b      	b.n	800ed28 <HAL_TIM_PWM_Stop+0x10c>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	2b10      	cmp	r3, #16
 800ed14:	d104      	bne.n	800ed20 <HAL_TIM_PWM_Stop+0x104>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed1e:	e003      	b.n	800ed28 <HAL_TIM_PWM_Stop+0x10c>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ed28:	2300      	movs	r3, #0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	40010000 	.word	0x40010000
 800ed38:	40010400 	.word	0x40010400
 800ed3c:	40014000 	.word	0x40014000
 800ed40:	40014400 	.word	0x40014400
 800ed44:	40014800 	.word	0x40014800

0800ed48 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ed56:	2300      	movs	r3, #0
 800ed58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d109      	bne.n	800ed74 <HAL_TIM_PWM_Start_DMA+0x2c>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	bf0c      	ite	eq
 800ed6c:	2301      	moveq	r3, #1
 800ed6e:	2300      	movne	r3, #0
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	e03c      	b.n	800edee <HAL_TIM_PWM_Start_DMA+0xa6>
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b04      	cmp	r3, #4
 800ed78:	d109      	bne.n	800ed8e <HAL_TIM_PWM_Start_DMA+0x46>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	bf0c      	ite	eq
 800ed86:	2301      	moveq	r3, #1
 800ed88:	2300      	movne	r3, #0
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	e02f      	b.n	800edee <HAL_TIM_PWM_Start_DMA+0xa6>
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2b08      	cmp	r3, #8
 800ed92:	d109      	bne.n	800eda8 <HAL_TIM_PWM_Start_DMA+0x60>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	bf0c      	ite	eq
 800eda0:	2301      	moveq	r3, #1
 800eda2:	2300      	movne	r3, #0
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	e022      	b.n	800edee <HAL_TIM_PWM_Start_DMA+0xa6>
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b0c      	cmp	r3, #12
 800edac:	d109      	bne.n	800edc2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	bf0c      	ite	eq
 800edba:	2301      	moveq	r3, #1
 800edbc:	2300      	movne	r3, #0
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	e015      	b.n	800edee <HAL_TIM_PWM_Start_DMA+0xa6>
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	2b10      	cmp	r3, #16
 800edc6:	d109      	bne.n	800eddc <HAL_TIM_PWM_Start_DMA+0x94>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	bf0c      	ite	eq
 800edd4:	2301      	moveq	r3, #1
 800edd6:	2300      	movne	r3, #0
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	e008      	b.n	800edee <HAL_TIM_PWM_Start_DMA+0xa6>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	bf0c      	ite	eq
 800ede8:	2301      	moveq	r3, #1
 800edea:	2300      	movne	r3, #0
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800edf2:	2302      	movs	r3, #2
 800edf4:	e1ba      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d109      	bne.n	800ee10 <HAL_TIM_PWM_Start_DMA+0xc8>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	bf0c      	ite	eq
 800ee08:	2301      	moveq	r3, #1
 800ee0a:	2300      	movne	r3, #0
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	e03c      	b.n	800ee8a <HAL_TIM_PWM_Start_DMA+0x142>
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2b04      	cmp	r3, #4
 800ee14:	d109      	bne.n	800ee2a <HAL_TIM_PWM_Start_DMA+0xe2>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	bf0c      	ite	eq
 800ee22:	2301      	moveq	r3, #1
 800ee24:	2300      	movne	r3, #0
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	e02f      	b.n	800ee8a <HAL_TIM_PWM_Start_DMA+0x142>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	2b08      	cmp	r3, #8
 800ee2e:	d109      	bne.n	800ee44 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	bf0c      	ite	eq
 800ee3c:	2301      	moveq	r3, #1
 800ee3e:	2300      	movne	r3, #0
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	e022      	b.n	800ee8a <HAL_TIM_PWM_Start_DMA+0x142>
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b0c      	cmp	r3, #12
 800ee48:	d109      	bne.n	800ee5e <HAL_TIM_PWM_Start_DMA+0x116>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	bf0c      	ite	eq
 800ee56:	2301      	moveq	r3, #1
 800ee58:	2300      	movne	r3, #0
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	e015      	b.n	800ee8a <HAL_TIM_PWM_Start_DMA+0x142>
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b10      	cmp	r3, #16
 800ee62:	d109      	bne.n	800ee78 <HAL_TIM_PWM_Start_DMA+0x130>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	bf0c      	ite	eq
 800ee70:	2301      	moveq	r3, #1
 800ee72:	2300      	movne	r3, #0
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	e008      	b.n	800ee8a <HAL_TIM_PWM_Start_DMA+0x142>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	bf0c      	ite	eq
 800ee84:	2301      	moveq	r3, #1
 800ee86:	2300      	movne	r3, #0
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d034      	beq.n	800eef8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d002      	beq.n	800ee9a <HAL_TIM_PWM_Start_DMA+0x152>
 800ee94:	887b      	ldrh	r3, [r7, #2]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e166      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <HAL_TIM_PWM_Start_DMA+0x166>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2202      	movs	r2, #2
 800eea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eeac:	e026      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d104      	bne.n	800eebe <HAL_TIM_PWM_Start_DMA+0x176>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eebc:	e01e      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b08      	cmp	r3, #8
 800eec2:	d104      	bne.n	800eece <HAL_TIM_PWM_Start_DMA+0x186>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2202      	movs	r2, #2
 800eec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eecc:	e016      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2b0c      	cmp	r3, #12
 800eed2:	d104      	bne.n	800eede <HAL_TIM_PWM_Start_DMA+0x196>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2202      	movs	r2, #2
 800eed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eedc:	e00e      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	2b10      	cmp	r3, #16
 800eee2:	d104      	bne.n	800eeee <HAL_TIM_PWM_Start_DMA+0x1a6>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eeec:	e006      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2202      	movs	r2, #2
 800eef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eef6:	e001      	b.n	800eefc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e137      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b0c      	cmp	r3, #12
 800ef00:	f200 80ae 	bhi.w	800f060 <HAL_TIM_PWM_Start_DMA+0x318>
 800ef04:	a201      	add	r2, pc, #4	@ (adr r2, 800ef0c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ef06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0a:	bf00      	nop
 800ef0c:	0800ef41 	.word	0x0800ef41
 800ef10:	0800f061 	.word	0x0800f061
 800ef14:	0800f061 	.word	0x0800f061
 800ef18:	0800f061 	.word	0x0800f061
 800ef1c:	0800ef89 	.word	0x0800ef89
 800ef20:	0800f061 	.word	0x0800f061
 800ef24:	0800f061 	.word	0x0800f061
 800ef28:	0800f061 	.word	0x0800f061
 800ef2c:	0800efd1 	.word	0x0800efd1
 800ef30:	0800f061 	.word	0x0800f061
 800ef34:	0800f061 	.word	0x0800f061
 800ef38:	0800f061 	.word	0x0800f061
 800ef3c:	0800f019 	.word	0x0800f019
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef44:	4a8b      	ldr	r2, [pc, #556]	@ (800f174 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ef46:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4c:	4a8a      	ldr	r2, [pc, #552]	@ (800f178 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ef4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef54:	4a89      	ldr	r2, [pc, #548]	@ (800f17c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ef56:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ef5c:	6879      	ldr	r1, [r7, #4]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3334      	adds	r3, #52	@ 0x34
 800ef64:	461a      	mov	r2, r3
 800ef66:	887b      	ldrh	r3, [r7, #2]
 800ef68:	f7f8 fb82 	bl	8007670 <HAL_DMA_Start_IT>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	e0fa      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68da      	ldr	r2, [r3, #12]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef84:	60da      	str	r2, [r3, #12]
      break;
 800ef86:	e06e      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef8c:	4a79      	ldr	r2, [pc, #484]	@ (800f174 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ef8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef94:	4a78      	ldr	r2, [pc, #480]	@ (800f178 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ef96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9c:	4a77      	ldr	r2, [pc, #476]	@ (800f17c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ef9e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800efa4:	6879      	ldr	r1, [r7, #4]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3338      	adds	r3, #56	@ 0x38
 800efac:	461a      	mov	r2, r3
 800efae:	887b      	ldrh	r3, [r7, #2]
 800efb0:	f7f8 fb5e 	bl	8007670 <HAL_DMA_Start_IT>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	e0d6      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	68da      	ldr	r2, [r3, #12]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800efcc:	60da      	str	r2, [r3, #12]
      break;
 800efce:	e04a      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd4:	4a67      	ldr	r2, [pc, #412]	@ (800f174 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800efd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efdc:	4a66      	ldr	r2, [pc, #408]	@ (800f178 <HAL_TIM_PWM_Start_DMA+0x430>)
 800efde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe4:	4a65      	ldr	r2, [pc, #404]	@ (800f17c <HAL_TIM_PWM_Start_DMA+0x434>)
 800efe6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	333c      	adds	r3, #60	@ 0x3c
 800eff4:	461a      	mov	r2, r3
 800eff6:	887b      	ldrh	r3, [r7, #2]
 800eff8:	f7f8 fb3a 	bl	8007670 <HAL_DMA_Start_IT>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e0b2      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	68da      	ldr	r2, [r3, #12]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f014:	60da      	str	r2, [r3, #12]
      break;
 800f016:	e026      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f01c:	4a55      	ldr	r2, [pc, #340]	@ (800f174 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f01e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f024:	4a54      	ldr	r2, [pc, #336]	@ (800f178 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f02c:	4a53      	ldr	r2, [pc, #332]	@ (800f17c <HAL_TIM_PWM_Start_DMA+0x434>)
 800f02e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f034:	6879      	ldr	r1, [r7, #4]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3340      	adds	r3, #64	@ 0x40
 800f03c:	461a      	mov	r2, r3
 800f03e:	887b      	ldrh	r3, [r7, #2]
 800f040:	f7f8 fb16 	bl	8007670 <HAL_DMA_Start_IT>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d001      	beq.n	800f04e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e08e      	b.n	800f16c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f05c:	60da      	str	r2, [r3, #12]
      break;
 800f05e:	e002      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f060:	2301      	movs	r3, #1
 800f062:	75fb      	strb	r3, [r7, #23]
      break;
 800f064:	bf00      	nop
  }

  if (status == HAL_OK)
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d17e      	bne.n	800f16a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2201      	movs	r2, #1
 800f072:	68b9      	ldr	r1, [r7, #8]
 800f074:	4618      	mov	r0, r3
 800f076:	f001 f8e3 	bl	8010240 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4a40      	ldr	r2, [pc, #256]	@ (800f180 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d013      	beq.n	800f0ac <HAL_TIM_PWM_Start_DMA+0x364>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a3e      	ldr	r2, [pc, #248]	@ (800f184 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d00e      	beq.n	800f0ac <HAL_TIM_PWM_Start_DMA+0x364>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4a3d      	ldr	r2, [pc, #244]	@ (800f188 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d009      	beq.n	800f0ac <HAL_TIM_PWM_Start_DMA+0x364>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a3b      	ldr	r2, [pc, #236]	@ (800f18c <HAL_TIM_PWM_Start_DMA+0x444>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d004      	beq.n	800f0ac <HAL_TIM_PWM_Start_DMA+0x364>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a3a      	ldr	r2, [pc, #232]	@ (800f190 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d101      	bne.n	800f0b0 <HAL_TIM_PWM_Start_DMA+0x368>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e000      	b.n	800f0b2 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d007      	beq.n	800f0c6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f0c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a2d      	ldr	r2, [pc, #180]	@ (800f180 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d02c      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0d8:	d027      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a2d      	ldr	r2, [pc, #180]	@ (800f194 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d022      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a2b      	ldr	r2, [pc, #172]	@ (800f198 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d01d      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a2a      	ldr	r2, [pc, #168]	@ (800f19c <HAL_TIM_PWM_Start_DMA+0x454>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d018      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a21      	ldr	r2, [pc, #132]	@ (800f184 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d013      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a26      	ldr	r2, [pc, #152]	@ (800f1a0 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d00e      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a1d      	ldr	r2, [pc, #116]	@ (800f188 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d009      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a22      	ldr	r2, [pc, #136]	@ (800f1a4 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d004      	beq.n	800f12a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a20      	ldr	r2, [pc, #128]	@ (800f1a8 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d115      	bne.n	800f156 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689a      	ldr	r2, [r3, #8]
 800f130:	4b1e      	ldr	r3, [pc, #120]	@ (800f1ac <HAL_TIM_PWM_Start_DMA+0x464>)
 800f132:	4013      	ands	r3, r2
 800f134:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b06      	cmp	r3, #6
 800f13a:	d015      	beq.n	800f168 <HAL_TIM_PWM_Start_DMA+0x420>
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f142:	d011      	beq.n	800f168 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f042 0201 	orr.w	r2, r2, #1
 800f152:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f154:	e008      	b.n	800f168 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f042 0201 	orr.w	r2, r2, #1
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	e000      	b.n	800f16a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f168:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	0800f8e3 	.word	0x0800f8e3
 800f178:	0800f98b 	.word	0x0800f98b
 800f17c:	0800f851 	.word	0x0800f851
 800f180:	40010000 	.word	0x40010000
 800f184:	40010400 	.word	0x40010400
 800f188:	40014000 	.word	0x40014000
 800f18c:	40014400 	.word	0x40014400
 800f190:	40014800 	.word	0x40014800
 800f194:	40000400 	.word	0x40000400
 800f198:	40000800 	.word	0x40000800
 800f19c:	40000c00 	.word	0x40000c00
 800f1a0:	40001800 	.word	0x40001800
 800f1a4:	4000e000 	.word	0x4000e000
 800f1a8:	4000e400 	.word	0x4000e400
 800f1ac:	00010007 	.word	0x00010007

0800f1b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	f003 0302 	and.w	r3, r3, #2
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d020      	beq.n	800f214 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01b      	beq.n	800f214 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f06f 0202 	mvn.w	r2, #2
 800f1e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	f003 0303 	and.w	r3, r3, #3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d003      	beq.n	800f202 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 faf6 	bl	800f7ec <HAL_TIM_IC_CaptureCallback>
 800f200:	e005      	b.n	800f20e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fae8 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 faf9 	bl	800f800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d020      	beq.n	800f260 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f003 0304 	and.w	r3, r3, #4
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01b      	beq.n	800f260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f06f 0204 	mvn.w	r2, #4
 800f230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2202      	movs	r2, #2
 800f236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	699b      	ldr	r3, [r3, #24]
 800f23e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f242:	2b00      	cmp	r3, #0
 800f244:	d003      	beq.n	800f24e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fad0 	bl	800f7ec <HAL_TIM_IC_CaptureCallback>
 800f24c:	e005      	b.n	800f25a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fac2 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fad3 	bl	800f800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f003 0308 	and.w	r3, r3, #8
 800f266:	2b00      	cmp	r3, #0
 800f268:	d020      	beq.n	800f2ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f003 0308 	and.w	r3, r3, #8
 800f270:	2b00      	cmp	r3, #0
 800f272:	d01b      	beq.n	800f2ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f06f 0208 	mvn.w	r2, #8
 800f27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2204      	movs	r2, #4
 800f282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	69db      	ldr	r3, [r3, #28]
 800f28a:	f003 0303 	and.w	r3, r3, #3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d003      	beq.n	800f29a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 faaa 	bl	800f7ec <HAL_TIM_IC_CaptureCallback>
 800f298:	e005      	b.n	800f2a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fa9c 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 faad 	bl	800f800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f003 0310 	and.w	r3, r3, #16
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d020      	beq.n	800f2f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f003 0310 	and.w	r3, r3, #16
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d01b      	beq.n	800f2f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f06f 0210 	mvn.w	r2, #16
 800f2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2208      	movs	r2, #8
 800f2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fa84 	bl	800f7ec <HAL_TIM_IC_CaptureCallback>
 800f2e4:	e005      	b.n	800f2f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fa76 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 fa87 	bl	800f800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00c      	beq.n	800f31c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d007      	beq.n	800f31c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f06f 0201 	mvn.w	r2, #1
 800f314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7f1 fbce 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f322:	2b00      	cmp	r3, #0
 800f324:	d104      	bne.n	800f330 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00c      	beq.n	800f34a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f336:	2b00      	cmp	r3, #0
 800f338:	d007      	beq.n	800f34a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f847 	bl	80103d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00c      	beq.n	800f36e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d007      	beq.n	800f36e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f001 f83f 	bl	80103ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00c      	beq.n	800f392 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d007      	beq.n	800f392 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fa4b 	bl	800f828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	f003 0320 	and.w	r3, r3, #32
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00c      	beq.n	800f3b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f003 0320 	and.w	r3, r3, #32
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d007      	beq.n	800f3b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f06f 0220 	mvn.w	r2, #32
 800f3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f001 f807 	bl	80103c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
	...

0800f3c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d101      	bne.n	800f3de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f3da:	2302      	movs	r3, #2
 800f3dc:	e0ff      	b.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b14      	cmp	r3, #20
 800f3ea:	f200 80f0 	bhi.w	800f5ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f4:	0800f449 	.word	0x0800f449
 800f3f8:	0800f5cf 	.word	0x0800f5cf
 800f3fc:	0800f5cf 	.word	0x0800f5cf
 800f400:	0800f5cf 	.word	0x0800f5cf
 800f404:	0800f489 	.word	0x0800f489
 800f408:	0800f5cf 	.word	0x0800f5cf
 800f40c:	0800f5cf 	.word	0x0800f5cf
 800f410:	0800f5cf 	.word	0x0800f5cf
 800f414:	0800f4cb 	.word	0x0800f4cb
 800f418:	0800f5cf 	.word	0x0800f5cf
 800f41c:	0800f5cf 	.word	0x0800f5cf
 800f420:	0800f5cf 	.word	0x0800f5cf
 800f424:	0800f50b 	.word	0x0800f50b
 800f428:	0800f5cf 	.word	0x0800f5cf
 800f42c:	0800f5cf 	.word	0x0800f5cf
 800f430:	0800f5cf 	.word	0x0800f5cf
 800f434:	0800f54d 	.word	0x0800f54d
 800f438:	0800f5cf 	.word	0x0800f5cf
 800f43c:	0800f5cf 	.word	0x0800f5cf
 800f440:	0800f5cf 	.word	0x0800f5cf
 800f444:	0800f58d 	.word	0x0800f58d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68b9      	ldr	r1, [r7, #8]
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fb82 	bl	800fb58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	699a      	ldr	r2, [r3, #24]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f042 0208 	orr.w	r2, r2, #8
 800f462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	699a      	ldr	r2, [r3, #24]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f022 0204 	bic.w	r2, r2, #4
 800f472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6999      	ldr	r1, [r3, #24]
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	691a      	ldr	r2, [r3, #16]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	430a      	orrs	r2, r1
 800f484:	619a      	str	r2, [r3, #24]
      break;
 800f486:	e0a5      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68b9      	ldr	r1, [r7, #8]
 800f48e:	4618      	mov	r0, r3
 800f490:	f000 fbf2 	bl	800fc78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	699a      	ldr	r2, [r3, #24]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f4a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	699a      	ldr	r2, [r3, #24]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	6999      	ldr	r1, [r3, #24]
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	021a      	lsls	r2, r3, #8
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	430a      	orrs	r2, r1
 800f4c6:	619a      	str	r2, [r3, #24]
      break;
 800f4c8:	e084      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 fc5b 	bl	800fd8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	69da      	ldr	r2, [r3, #28]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f042 0208 	orr.w	r2, r2, #8
 800f4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	69da      	ldr	r2, [r3, #28]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f022 0204 	bic.w	r2, r2, #4
 800f4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	69d9      	ldr	r1, [r3, #28]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	691a      	ldr	r2, [r3, #16]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	430a      	orrs	r2, r1
 800f506:	61da      	str	r2, [r3, #28]
      break;
 800f508:	e064      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68b9      	ldr	r1, [r7, #8]
 800f510:	4618      	mov	r0, r3
 800f512:	f000 fcc3 	bl	800fe9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	69da      	ldr	r2, [r3, #28]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	69da      	ldr	r2, [r3, #28]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	69d9      	ldr	r1, [r3, #28]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	021a      	lsls	r2, r3, #8
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	430a      	orrs	r2, r1
 800f548:	61da      	str	r2, [r3, #28]
      break;
 800f54a:	e043      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68b9      	ldr	r1, [r7, #8]
 800f552:	4618      	mov	r0, r3
 800f554:	f000 fd0c 	bl	800ff70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0208 	orr.w	r2, r2, #8
 800f566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f022 0204 	bic.w	r2, r2, #4
 800f576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	691a      	ldr	r2, [r3, #16]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	430a      	orrs	r2, r1
 800f588:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f58a:	e023      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68b9      	ldr	r1, [r7, #8]
 800f592:	4618      	mov	r0, r3
 800f594:	f000 fd50 	bl	8010038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f5a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f5b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	021a      	lsls	r2, r3, #8
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	430a      	orrs	r2, r1
 800f5ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f5cc:	e002      	b.n	800f5d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	75fb      	strb	r3, [r7, #23]
      break;
 800f5d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3718      	adds	r7, #24
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop

0800f5e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d101      	bne.n	800f604 <HAL_TIM_ConfigClockSource+0x1c>
 800f600:	2302      	movs	r3, #2
 800f602:	e0dc      	b.n	800f7be <HAL_TIM_ConfigClockSource+0x1d6>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	4b6a      	ldr	r3, [pc, #424]	@ (800f7c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f620:	4013      	ands	r3, r2
 800f622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f62a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a64      	ldr	r2, [pc, #400]	@ (800f7cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	f000 80a9 	beq.w	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f640:	4a62      	ldr	r2, [pc, #392]	@ (800f7cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	f200 80ae 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f648:	4a61      	ldr	r2, [pc, #388]	@ (800f7d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	f000 80a1 	beq.w	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f650:	4a5f      	ldr	r2, [pc, #380]	@ (800f7d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f652:	4293      	cmp	r3, r2
 800f654:	f200 80a6 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f658:	4a5e      	ldr	r2, [pc, #376]	@ (800f7d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	f000 8099 	beq.w	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f660:	4a5c      	ldr	r2, [pc, #368]	@ (800f7d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f662:	4293      	cmp	r3, r2
 800f664:	f200 809e 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f668:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f66c:	f000 8091 	beq.w	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f674:	f200 8096 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f67c:	f000 8089 	beq.w	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f684:	f200 808e 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f68c:	d03e      	beq.n	800f70c <HAL_TIM_ConfigClockSource+0x124>
 800f68e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f692:	f200 8087 	bhi.w	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f69a:	f000 8086 	beq.w	800f7aa <HAL_TIM_ConfigClockSource+0x1c2>
 800f69e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6a2:	d87f      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6a4:	2b70      	cmp	r3, #112	@ 0x70
 800f6a6:	d01a      	beq.n	800f6de <HAL_TIM_ConfigClockSource+0xf6>
 800f6a8:	2b70      	cmp	r3, #112	@ 0x70
 800f6aa:	d87b      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6ac:	2b60      	cmp	r3, #96	@ 0x60
 800f6ae:	d050      	beq.n	800f752 <HAL_TIM_ConfigClockSource+0x16a>
 800f6b0:	2b60      	cmp	r3, #96	@ 0x60
 800f6b2:	d877      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6b4:	2b50      	cmp	r3, #80	@ 0x50
 800f6b6:	d03c      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x14a>
 800f6b8:	2b50      	cmp	r3, #80	@ 0x50
 800f6ba:	d873      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6bc:	2b40      	cmp	r3, #64	@ 0x40
 800f6be:	d058      	beq.n	800f772 <HAL_TIM_ConfigClockSource+0x18a>
 800f6c0:	2b40      	cmp	r3, #64	@ 0x40
 800f6c2:	d86f      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6c4:	2b30      	cmp	r3, #48	@ 0x30
 800f6c6:	d064      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6c8:	2b30      	cmp	r3, #48	@ 0x30
 800f6ca:	d86b      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6cc:	2b20      	cmp	r3, #32
 800f6ce:	d060      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6d0:	2b20      	cmp	r3, #32
 800f6d2:	d867      	bhi.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d05c      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6d8:	2b10      	cmp	r3, #16
 800f6da:	d05a      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6dc:	e062      	b.n	800f7a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f6ee:	f000 fd87 	bl	8010200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	609a      	str	r2, [r3, #8]
      break;
 800f70a:	e04f      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f71c:	f000 fd70 	bl	8010200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	689a      	ldr	r2, [r3, #8]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f72e:	609a      	str	r2, [r3, #8]
      break;
 800f730:	e03c      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f73e:	461a      	mov	r2, r3
 800f740:	f000 fce0 	bl	8010104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2150      	movs	r1, #80	@ 0x50
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 fd3a 	bl	80101c4 <TIM_ITRx_SetConfig>
      break;
 800f750:	e02c      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f75e:	461a      	mov	r2, r3
 800f760:	f000 fcff 	bl	8010162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2160      	movs	r1, #96	@ 0x60
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 fd2a 	bl	80101c4 <TIM_ITRx_SetConfig>
      break;
 800f770:	e01c      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f77e:	461a      	mov	r2, r3
 800f780:	f000 fcc0 	bl	8010104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2140      	movs	r1, #64	@ 0x40
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 fd1a 	bl	80101c4 <TIM_ITRx_SetConfig>
      break;
 800f790:	e00c      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4619      	mov	r1, r3
 800f79c:	4610      	mov	r0, r2
 800f79e:	f000 fd11 	bl	80101c4 <TIM_ITRx_SetConfig>
      break;
 800f7a2:	e003      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a8:	e000      	b.n	800f7ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f7aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	ffceff88 	.word	0xffceff88
 800f7cc:	00100040 	.word	0x00100040
 800f7d0:	00100030 	.word	0x00100030
 800f7d4:	00100020 	.word	0x00100020

0800f7d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f7f4:	bf00      	nop
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f844:	bf00      	nop
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	429a      	cmp	r2, r3
 800f866:	d107      	bne.n	800f878 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2201      	movs	r2, #1
 800f86c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f876:	e02a      	b.n	800f8ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d107      	bne.n	800f892 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2202      	movs	r2, #2
 800f886:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f890:	e01d      	b.n	800f8ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d107      	bne.n	800f8ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2204      	movs	r2, #4
 800f8a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f8aa:	e010      	b.n	800f8ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d107      	bne.n	800f8c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2208      	movs	r2, #8
 800f8ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f8c4:	e003      	b.n	800f8ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f7ff ffb4 	bl	800f83c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	771a      	strb	r2, [r3, #28]
}
 800f8da:	bf00      	nop
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d10b      	bne.n	800f912 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d136      	bne.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f910:	e031      	b.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d10b      	bne.n	800f934 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2202      	movs	r2, #2
 800f920:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d125      	bne.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2201      	movs	r2, #1
 800f92e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f932:	e020      	b.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d10b      	bne.n	800f956 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2204      	movs	r2, #4
 800f942:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	69db      	ldr	r3, [r3, #28]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d114      	bne.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f954:	e00f      	b.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d10a      	bne.n	800f976 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2208      	movs	r2, #8
 800f964:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	69db      	ldr	r3, [r3, #28]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d103      	bne.n	800f976 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2201      	movs	r2, #1
 800f972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff ff42 	bl	800f800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2200      	movs	r2, #0
 800f980:	771a      	strb	r2, [r3, #28]
}
 800f982:	bf00      	nop
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b084      	sub	sp, #16
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f996:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d103      	bne.n	800f9aa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	771a      	strb	r2, [r3, #28]
 800f9a8:	e019      	b.n	800f9de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d103      	bne.n	800f9bc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	771a      	strb	r2, [r3, #28]
 800f9ba:	e010      	b.n	800f9de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d103      	bne.n	800f9ce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2204      	movs	r2, #4
 800f9ca:	771a      	strb	r2, [r3, #28]
 800f9cc:	e007      	b.n	800f9de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d102      	bne.n	800f9de <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2208      	movs	r2, #8
 800f9dc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f7ff ff18 	bl	800f814 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	771a      	strb	r2, [r3, #28]
}
 800f9ea:	bf00      	nop
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4a4a      	ldr	r2, [pc, #296]	@ (800fb30 <TIM_Base_SetConfig+0x13c>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d013      	beq.n	800fa34 <TIM_Base_SetConfig+0x40>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa12:	d00f      	beq.n	800fa34 <TIM_Base_SetConfig+0x40>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a47      	ldr	r2, [pc, #284]	@ (800fb34 <TIM_Base_SetConfig+0x140>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d00b      	beq.n	800fa34 <TIM_Base_SetConfig+0x40>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4a46      	ldr	r2, [pc, #280]	@ (800fb38 <TIM_Base_SetConfig+0x144>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d007      	beq.n	800fa34 <TIM_Base_SetConfig+0x40>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a45      	ldr	r2, [pc, #276]	@ (800fb3c <TIM_Base_SetConfig+0x148>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d003      	beq.n	800fa34 <TIM_Base_SetConfig+0x40>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a44      	ldr	r2, [pc, #272]	@ (800fb40 <TIM_Base_SetConfig+0x14c>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d108      	bne.n	800fa46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a39      	ldr	r2, [pc, #228]	@ (800fb30 <TIM_Base_SetConfig+0x13c>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d027      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa54:	d023      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a36      	ldr	r2, [pc, #216]	@ (800fb34 <TIM_Base_SetConfig+0x140>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d01f      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a35      	ldr	r2, [pc, #212]	@ (800fb38 <TIM_Base_SetConfig+0x144>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d01b      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a34      	ldr	r2, [pc, #208]	@ (800fb3c <TIM_Base_SetConfig+0x148>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d017      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a33      	ldr	r2, [pc, #204]	@ (800fb40 <TIM_Base_SetConfig+0x14c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d013      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a32      	ldr	r2, [pc, #200]	@ (800fb44 <TIM_Base_SetConfig+0x150>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d00f      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a31      	ldr	r2, [pc, #196]	@ (800fb48 <TIM_Base_SetConfig+0x154>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d00b      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a30      	ldr	r2, [pc, #192]	@ (800fb4c <TIM_Base_SetConfig+0x158>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d007      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a2f      	ldr	r2, [pc, #188]	@ (800fb50 <TIM_Base_SetConfig+0x15c>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d003      	beq.n	800fa9e <TIM_Base_SetConfig+0xaa>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a2e      	ldr	r2, [pc, #184]	@ (800fb54 <TIM_Base_SetConfig+0x160>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d108      	bne.n	800fab0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	4313      	orrs	r3, r2
 800faae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	4313      	orrs	r3, r2
 800fabc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a16      	ldr	r2, [pc, #88]	@ (800fb30 <TIM_Base_SetConfig+0x13c>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d00f      	beq.n	800fafc <TIM_Base_SetConfig+0x108>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a18      	ldr	r2, [pc, #96]	@ (800fb40 <TIM_Base_SetConfig+0x14c>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d00b      	beq.n	800fafc <TIM_Base_SetConfig+0x108>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a17      	ldr	r2, [pc, #92]	@ (800fb44 <TIM_Base_SetConfig+0x150>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d007      	beq.n	800fafc <TIM_Base_SetConfig+0x108>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a16      	ldr	r2, [pc, #88]	@ (800fb48 <TIM_Base_SetConfig+0x154>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d003      	beq.n	800fafc <TIM_Base_SetConfig+0x108>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a15      	ldr	r2, [pc, #84]	@ (800fb4c <TIM_Base_SetConfig+0x158>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d103      	bne.n	800fb04 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	691a      	ldr	r2, [r3, #16]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2201      	movs	r2, #1
 800fb08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	691b      	ldr	r3, [r3, #16]
 800fb0e:	f003 0301 	and.w	r3, r3, #1
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d105      	bne.n	800fb22 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	f023 0201 	bic.w	r2, r3, #1
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	611a      	str	r2, [r3, #16]
  }
}
 800fb22:	bf00      	nop
 800fb24:	3714      	adds	r7, #20
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	40010000 	.word	0x40010000
 800fb34:	40000400 	.word	0x40000400
 800fb38:	40000800 	.word	0x40000800
 800fb3c:	40000c00 	.word	0x40000c00
 800fb40:	40010400 	.word	0x40010400
 800fb44:	40014000 	.word	0x40014000
 800fb48:	40014400 	.word	0x40014400
 800fb4c:	40014800 	.word	0x40014800
 800fb50:	4000e000 	.word	0x4000e000
 800fb54:	4000e400 	.word	0x4000e400

0800fb58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b087      	sub	sp, #28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a1b      	ldr	r3, [r3, #32]
 800fb6c:	f023 0201 	bic.w	r2, r3, #1
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	699b      	ldr	r3, [r3, #24]
 800fb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	4b37      	ldr	r3, [pc, #220]	@ (800fc60 <TIM_OC1_SetConfig+0x108>)
 800fb84:	4013      	ands	r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f023 0303 	bic.w	r3, r3, #3
 800fb8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	f023 0302 	bic.w	r3, r3, #2
 800fba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	697a      	ldr	r2, [r7, #20]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a2d      	ldr	r2, [pc, #180]	@ (800fc64 <TIM_OC1_SetConfig+0x10c>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d00f      	beq.n	800fbd4 <TIM_OC1_SetConfig+0x7c>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a2c      	ldr	r2, [pc, #176]	@ (800fc68 <TIM_OC1_SetConfig+0x110>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00b      	beq.n	800fbd4 <TIM_OC1_SetConfig+0x7c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a2b      	ldr	r2, [pc, #172]	@ (800fc6c <TIM_OC1_SetConfig+0x114>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d007      	beq.n	800fbd4 <TIM_OC1_SetConfig+0x7c>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a2a      	ldr	r2, [pc, #168]	@ (800fc70 <TIM_OC1_SetConfig+0x118>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d003      	beq.n	800fbd4 <TIM_OC1_SetConfig+0x7c>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a29      	ldr	r2, [pc, #164]	@ (800fc74 <TIM_OC1_SetConfig+0x11c>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d10c      	bne.n	800fbee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f023 0308 	bic.w	r3, r3, #8
 800fbda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	697a      	ldr	r2, [r7, #20]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	f023 0304 	bic.w	r3, r3, #4
 800fbec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4a1c      	ldr	r2, [pc, #112]	@ (800fc64 <TIM_OC1_SetConfig+0x10c>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d00f      	beq.n	800fc16 <TIM_OC1_SetConfig+0xbe>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4a1b      	ldr	r2, [pc, #108]	@ (800fc68 <TIM_OC1_SetConfig+0x110>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d00b      	beq.n	800fc16 <TIM_OC1_SetConfig+0xbe>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a1a      	ldr	r2, [pc, #104]	@ (800fc6c <TIM_OC1_SetConfig+0x114>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d007      	beq.n	800fc16 <TIM_OC1_SetConfig+0xbe>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a19      	ldr	r2, [pc, #100]	@ (800fc70 <TIM_OC1_SetConfig+0x118>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d003      	beq.n	800fc16 <TIM_OC1_SetConfig+0xbe>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a18      	ldr	r2, [pc, #96]	@ (800fc74 <TIM_OC1_SetConfig+0x11c>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d111      	bne.n	800fc3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	695b      	ldr	r3, [r3, #20]
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	693a      	ldr	r2, [r7, #16]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	685a      	ldr	r2, [r3, #4]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	621a      	str	r2, [r3, #32]
}
 800fc54:	bf00      	nop
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	fffeff8f 	.word	0xfffeff8f
 800fc64:	40010000 	.word	0x40010000
 800fc68:	40010400 	.word	0x40010400
 800fc6c:	40014000 	.word	0x40014000
 800fc70:	40014400 	.word	0x40014400
 800fc74:	40014800 	.word	0x40014800

0800fc78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a1b      	ldr	r3, [r3, #32]
 800fc8c:	f023 0210 	bic.w	r2, r3, #16
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	699b      	ldr	r3, [r3, #24]
 800fc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	4b34      	ldr	r3, [pc, #208]	@ (800fd74 <TIM_OC2_SetConfig+0xfc>)
 800fca4:	4013      	ands	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	021b      	lsls	r3, r3, #8
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f023 0320 	bic.w	r3, r3, #32
 800fcc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	011b      	lsls	r3, r3, #4
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	4a29      	ldr	r2, [pc, #164]	@ (800fd78 <TIM_OC2_SetConfig+0x100>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d003      	beq.n	800fce0 <TIM_OC2_SetConfig+0x68>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4a28      	ldr	r2, [pc, #160]	@ (800fd7c <TIM_OC2_SetConfig+0x104>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	d10d      	bne.n	800fcfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	011b      	lsls	r3, r3, #4
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800fd78 <TIM_OC2_SetConfig+0x100>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00f      	beq.n	800fd24 <TIM_OC2_SetConfig+0xac>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a1d      	ldr	r2, [pc, #116]	@ (800fd7c <TIM_OC2_SetConfig+0x104>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d00b      	beq.n	800fd24 <TIM_OC2_SetConfig+0xac>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a1c      	ldr	r2, [pc, #112]	@ (800fd80 <TIM_OC2_SetConfig+0x108>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d007      	beq.n	800fd24 <TIM_OC2_SetConfig+0xac>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a1b      	ldr	r2, [pc, #108]	@ (800fd84 <TIM_OC2_SetConfig+0x10c>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d003      	beq.n	800fd24 <TIM_OC2_SetConfig+0xac>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a1a      	ldr	r2, [pc, #104]	@ (800fd88 <TIM_OC2_SetConfig+0x110>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d113      	bne.n	800fd4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fd32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	693a      	ldr	r2, [r7, #16]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	699b      	ldr	r3, [r3, #24]
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	621a      	str	r2, [r3, #32]
}
 800fd66:	bf00      	nop
 800fd68:	371c      	adds	r7, #28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	feff8fff 	.word	0xfeff8fff
 800fd78:	40010000 	.word	0x40010000
 800fd7c:	40010400 	.word	0x40010400
 800fd80:	40014000 	.word	0x40014000
 800fd84:	40014400 	.word	0x40014400
 800fd88:	40014800 	.word	0x40014800

0800fd8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b087      	sub	sp, #28
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a1b      	ldr	r3, [r3, #32]
 800fd9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6a1b      	ldr	r3, [r3, #32]
 800fda0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	69db      	ldr	r3, [r3, #28]
 800fdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	4b33      	ldr	r3, [pc, #204]	@ (800fe84 <TIM_OC3_SetConfig+0xf8>)
 800fdb8:	4013      	ands	r3, r2
 800fdba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f023 0303 	bic.w	r3, r3, #3
 800fdc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fdd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	021b      	lsls	r3, r3, #8
 800fddc:	697a      	ldr	r2, [r7, #20]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4a28      	ldr	r2, [pc, #160]	@ (800fe88 <TIM_OC3_SetConfig+0xfc>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d003      	beq.n	800fdf2 <TIM_OC3_SetConfig+0x66>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a27      	ldr	r2, [pc, #156]	@ (800fe8c <TIM_OC3_SetConfig+0x100>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d10d      	bne.n	800fe0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fdf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	021b      	lsls	r3, r3, #8
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4a1d      	ldr	r2, [pc, #116]	@ (800fe88 <TIM_OC3_SetConfig+0xfc>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d00f      	beq.n	800fe36 <TIM_OC3_SetConfig+0xaa>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4a1c      	ldr	r2, [pc, #112]	@ (800fe8c <TIM_OC3_SetConfig+0x100>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d00b      	beq.n	800fe36 <TIM_OC3_SetConfig+0xaa>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4a1b      	ldr	r2, [pc, #108]	@ (800fe90 <TIM_OC3_SetConfig+0x104>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d007      	beq.n	800fe36 <TIM_OC3_SetConfig+0xaa>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4a1a      	ldr	r2, [pc, #104]	@ (800fe94 <TIM_OC3_SetConfig+0x108>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d003      	beq.n	800fe36 <TIM_OC3_SetConfig+0xaa>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a19      	ldr	r2, [pc, #100]	@ (800fe98 <TIM_OC3_SetConfig+0x10c>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d113      	bne.n	800fe5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fe44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	011b      	lsls	r3, r3, #4
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	693a      	ldr	r2, [r7, #16]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	697a      	ldr	r2, [r7, #20]
 800fe76:	621a      	str	r2, [r3, #32]
}
 800fe78:	bf00      	nop
 800fe7a:	371c      	adds	r7, #28
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	fffeff8f 	.word	0xfffeff8f
 800fe88:	40010000 	.word	0x40010000
 800fe8c:	40010400 	.word	0x40010400
 800fe90:	40014000 	.word	0x40014000
 800fe94:	40014400 	.word	0x40014400
 800fe98:	40014800 	.word	0x40014800

0800fe9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	4b24      	ldr	r3, [pc, #144]	@ (800ff58 <TIM_OC4_SetConfig+0xbc>)
 800fec8:	4013      	ands	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	021b      	lsls	r3, r3, #8
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	4313      	orrs	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	031b      	lsls	r3, r3, #12
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	4a19      	ldr	r2, [pc, #100]	@ (800ff5c <TIM_OC4_SetConfig+0xc0>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d00f      	beq.n	800ff1c <TIM_OC4_SetConfig+0x80>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4a18      	ldr	r2, [pc, #96]	@ (800ff60 <TIM_OC4_SetConfig+0xc4>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d00b      	beq.n	800ff1c <TIM_OC4_SetConfig+0x80>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a17      	ldr	r2, [pc, #92]	@ (800ff64 <TIM_OC4_SetConfig+0xc8>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d007      	beq.n	800ff1c <TIM_OC4_SetConfig+0x80>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a16      	ldr	r2, [pc, #88]	@ (800ff68 <TIM_OC4_SetConfig+0xcc>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d003      	beq.n	800ff1c <TIM_OC4_SetConfig+0x80>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a15      	ldr	r2, [pc, #84]	@ (800ff6c <TIM_OC4_SetConfig+0xd0>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d109      	bne.n	800ff30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	019b      	lsls	r3, r3, #6
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	621a      	str	r2, [r3, #32]
}
 800ff4a:	bf00      	nop
 800ff4c:	371c      	adds	r7, #28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	feff8fff 	.word	0xfeff8fff
 800ff5c:	40010000 	.word	0x40010000
 800ff60:	40010400 	.word	0x40010400
 800ff64:	40014000 	.word	0x40014000
 800ff68:	40014400 	.word	0x40014400
 800ff6c:	40014800 	.word	0x40014800

0800ff70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6a1b      	ldr	r3, [r3, #32]
 800ff84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	4b21      	ldr	r3, [pc, #132]	@ (8010020 <TIM_OC5_SetConfig+0xb0>)
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ffb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	041b      	lsls	r3, r3, #16
 800ffb8:	693a      	ldr	r2, [r7, #16]
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a18      	ldr	r2, [pc, #96]	@ (8010024 <TIM_OC5_SetConfig+0xb4>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d00f      	beq.n	800ffe6 <TIM_OC5_SetConfig+0x76>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a17      	ldr	r2, [pc, #92]	@ (8010028 <TIM_OC5_SetConfig+0xb8>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d00b      	beq.n	800ffe6 <TIM_OC5_SetConfig+0x76>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a16      	ldr	r2, [pc, #88]	@ (801002c <TIM_OC5_SetConfig+0xbc>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d007      	beq.n	800ffe6 <TIM_OC5_SetConfig+0x76>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a15      	ldr	r2, [pc, #84]	@ (8010030 <TIM_OC5_SetConfig+0xc0>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d003      	beq.n	800ffe6 <TIM_OC5_SetConfig+0x76>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a14      	ldr	r2, [pc, #80]	@ (8010034 <TIM_OC5_SetConfig+0xc4>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d109      	bne.n	800fffa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ffec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	695b      	ldr	r3, [r3, #20]
 800fff2:	021b      	lsls	r3, r3, #8
 800fff4:	697a      	ldr	r2, [r7, #20]
 800fff6:	4313      	orrs	r3, r2
 800fff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	697a      	ldr	r2, [r7, #20]
 800fffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	685a      	ldr	r2, [r3, #4]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	621a      	str	r2, [r3, #32]
}
 8010014:	bf00      	nop
 8010016:	371c      	adds	r7, #28
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	fffeff8f 	.word	0xfffeff8f
 8010024:	40010000 	.word	0x40010000
 8010028:	40010400 	.word	0x40010400
 801002c:	40014000 	.word	0x40014000
 8010030:	40014400 	.word	0x40014400
 8010034:	40014800 	.word	0x40014800

08010038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010038:	b480      	push	{r7}
 801003a:	b087      	sub	sp, #28
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1b      	ldr	r3, [r3, #32]
 8010046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a1b      	ldr	r3, [r3, #32]
 801004c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801005e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	4b22      	ldr	r3, [pc, #136]	@ (80100ec <TIM_OC6_SetConfig+0xb4>)
 8010064:	4013      	ands	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	021b      	lsls	r3, r3, #8
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	4313      	orrs	r3, r2
 8010072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801007a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	051b      	lsls	r3, r3, #20
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	4313      	orrs	r3, r2
 8010086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4a19      	ldr	r2, [pc, #100]	@ (80100f0 <TIM_OC6_SetConfig+0xb8>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d00f      	beq.n	80100b0 <TIM_OC6_SetConfig+0x78>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4a18      	ldr	r2, [pc, #96]	@ (80100f4 <TIM_OC6_SetConfig+0xbc>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d00b      	beq.n	80100b0 <TIM_OC6_SetConfig+0x78>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4a17      	ldr	r2, [pc, #92]	@ (80100f8 <TIM_OC6_SetConfig+0xc0>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d007      	beq.n	80100b0 <TIM_OC6_SetConfig+0x78>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4a16      	ldr	r2, [pc, #88]	@ (80100fc <TIM_OC6_SetConfig+0xc4>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d003      	beq.n	80100b0 <TIM_OC6_SetConfig+0x78>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	4a15      	ldr	r2, [pc, #84]	@ (8010100 <TIM_OC6_SetConfig+0xc8>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d109      	bne.n	80100c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80100b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	695b      	ldr	r3, [r3, #20]
 80100bc:	029b      	lsls	r3, r3, #10
 80100be:	697a      	ldr	r2, [r7, #20]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	697a      	ldr	r2, [r7, #20]
 80100c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	685a      	ldr	r2, [r3, #4]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	621a      	str	r2, [r3, #32]
}
 80100de:	bf00      	nop
 80100e0:	371c      	adds	r7, #28
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	feff8fff 	.word	0xfeff8fff
 80100f0:	40010000 	.word	0x40010000
 80100f4:	40010400 	.word	0x40010400
 80100f8:	40014000 	.word	0x40014000
 80100fc:	40014400 	.word	0x40014400
 8010100:	40014800 	.word	0x40014800

08010104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010104:	b480      	push	{r7}
 8010106:	b087      	sub	sp, #28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6a1b      	ldr	r3, [r3, #32]
 8010114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6a1b      	ldr	r3, [r3, #32]
 801011a:	f023 0201 	bic.w	r2, r3, #1
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	699b      	ldr	r3, [r3, #24]
 8010126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801012e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	4313      	orrs	r3, r2
 8010138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f023 030a 	bic.w	r3, r3, #10
 8010140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	4313      	orrs	r3, r2
 8010148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	621a      	str	r2, [r3, #32]
}
 8010156:	bf00      	nop
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010162:	b480      	push	{r7}
 8010164:	b087      	sub	sp, #28
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6a1b      	ldr	r3, [r3, #32]
 8010172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	f023 0210 	bic.w	r2, r3, #16
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	699b      	ldr	r3, [r3, #24]
 8010184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801018c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	031b      	lsls	r3, r3, #12
 8010192:	693a      	ldr	r2, [r7, #16]
 8010194:	4313      	orrs	r3, r2
 8010196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801019e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	011b      	lsls	r3, r3, #4
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	693a      	ldr	r2, [r7, #16]
 80101ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	621a      	str	r2, [r3, #32]
}
 80101b6:	bf00      	nop
 80101b8:	371c      	adds	r7, #28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
	...

080101c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	4b09      	ldr	r3, [pc, #36]	@ (80101fc <TIM_ITRx_SetConfig+0x38>)
 80101d8:	4013      	ands	r3, r2
 80101da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	4313      	orrs	r3, r2
 80101e2:	f043 0307 	orr.w	r3, r3, #7
 80101e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	609a      	str	r2, [r3, #8]
}
 80101ee:	bf00      	nop
 80101f0:	3714      	adds	r7, #20
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	ffcfff8f 	.word	0xffcfff8f

08010200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010200:	b480      	push	{r7}
 8010202:	b087      	sub	sp, #28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801021a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	021a      	lsls	r2, r3, #8
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	431a      	orrs	r2, r3
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	4313      	orrs	r3, r2
 8010228:	697a      	ldr	r2, [r7, #20]
 801022a:	4313      	orrs	r3, r2
 801022c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	609a      	str	r2, [r3, #8]
}
 8010234:	bf00      	nop
 8010236:	371c      	adds	r7, #28
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010240:	b480      	push	{r7}
 8010242:	b087      	sub	sp, #28
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	f003 031f 	and.w	r3, r3, #31
 8010252:	2201      	movs	r2, #1
 8010254:	fa02 f303 	lsl.w	r3, r2, r3
 8010258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a1a      	ldr	r2, [r3, #32]
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	43db      	mvns	r3, r3
 8010262:	401a      	ands	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6a1a      	ldr	r2, [r3, #32]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	f003 031f 	and.w	r3, r3, #31
 8010272:	6879      	ldr	r1, [r7, #4]
 8010274:	fa01 f303 	lsl.w	r3, r1, r3
 8010278:	431a      	orrs	r2, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	621a      	str	r2, [r3, #32]
}
 801027e:	bf00      	nop
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
	...

0801028c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801029c:	2b01      	cmp	r3, #1
 801029e:	d101      	bne.n	80102a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80102a0:	2302      	movs	r3, #2
 80102a2:	e077      	b.n	8010394 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2202      	movs	r2, #2
 80102b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a35      	ldr	r2, [pc, #212]	@ (80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d004      	beq.n	80102d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a34      	ldr	r2, [pc, #208]	@ (80103a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d108      	bne.n	80102ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80102de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a25      	ldr	r2, [pc, #148]	@ (80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d02c      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010316:	d027      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4a22      	ldr	r2, [pc, #136]	@ (80103a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d022      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a21      	ldr	r2, [pc, #132]	@ (80103ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d01d      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4a1f      	ldr	r2, [pc, #124]	@ (80103b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d018      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a1a      	ldr	r2, [pc, #104]	@ (80103a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d013      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a1b      	ldr	r2, [pc, #108]	@ (80103b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d00e      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a1a      	ldr	r2, [pc, #104]	@ (80103b8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d009      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a18      	ldr	r2, [pc, #96]	@ (80103bc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d004      	beq.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a17      	ldr	r2, [pc, #92]	@ (80103c0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d10c      	bne.n	8010382 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801036e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	4313      	orrs	r3, r2
 8010378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3714      	adds	r7, #20
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr
 80103a0:	40010000 	.word	0x40010000
 80103a4:	40010400 	.word	0x40010400
 80103a8:	40000400 	.word	0x40000400
 80103ac:	40000800 	.word	0x40000800
 80103b0:	40000c00 	.word	0x40000c00
 80103b4:	40001800 	.word	0x40001800
 80103b8:	40014000 	.word	0x40014000
 80103bc:	4000e000 	.word	0x4000e000
 80103c0:	4000e400 	.word	0x4000e400

080103c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d101      	bne.n	8010412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801040e:	2301      	movs	r3, #1
 8010410:	e042      	b.n	8010498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010418:	2b00      	cmp	r3, #0
 801041a:	d106      	bne.n	801042a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7f1 fecb 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2224      	movs	r2, #36	@ 0x24
 801042e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f022 0201 	bic.w	r2, r2, #1
 8010440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fe94 	bl	8011178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 f825 	bl	80104a0 <UART_SetConfig>
 8010456:	4603      	mov	r3, r0
 8010458:	2b01      	cmp	r3, #1
 801045a:	d101      	bne.n	8010460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801045c:	2301      	movs	r3, #1
 801045e:	e01b      	b.n	8010498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801046e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689a      	ldr	r2, [r3, #8]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801047e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f042 0201 	orr.w	r2, r2, #1
 801048e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 ff13 	bl	80112bc <UART_CheckIdleState>
 8010496:	4603      	mov	r3, r0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104a4:	b092      	sub	sp, #72	@ 0x48
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	689a      	ldr	r2, [r3, #8]
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	431a      	orrs	r2, r3
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	695b      	ldr	r3, [r3, #20]
 80104be:	431a      	orrs	r2, r3
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	69db      	ldr	r3, [r3, #28]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	4bbe      	ldr	r3, [pc, #760]	@ (80107c8 <UART_SetConfig+0x328>)
 80104d0:	4013      	ands	r3, r2
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	6812      	ldr	r2, [r2, #0]
 80104d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80104d8:	430b      	orrs	r3, r1
 80104da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	430a      	orrs	r2, r1
 80104f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	699b      	ldr	r3, [r3, #24]
 80104f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4ab3      	ldr	r2, [pc, #716]	@ (80107cc <UART_SetConfig+0x32c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d004      	beq.n	801050c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	6a1b      	ldr	r3, [r3, #32]
 8010506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010508:	4313      	orrs	r3, r2
 801050a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	689a      	ldr	r2, [r3, #8]
 8010512:	4baf      	ldr	r3, [pc, #700]	@ (80107d0 <UART_SetConfig+0x330>)
 8010514:	4013      	ands	r3, r2
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	6812      	ldr	r2, [r2, #0]
 801051a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801051c:	430b      	orrs	r3, r1
 801051e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010526:	f023 010f 	bic.w	r1, r3, #15
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	430a      	orrs	r2, r1
 8010534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4aa6      	ldr	r2, [pc, #664]	@ (80107d4 <UART_SetConfig+0x334>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d177      	bne.n	8010630 <UART_SetConfig+0x190>
 8010540:	4ba5      	ldr	r3, [pc, #660]	@ (80107d8 <UART_SetConfig+0x338>)
 8010542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010548:	2b28      	cmp	r3, #40	@ 0x28
 801054a:	d86d      	bhi.n	8010628 <UART_SetConfig+0x188>
 801054c:	a201      	add	r2, pc, #4	@ (adr r2, 8010554 <UART_SetConfig+0xb4>)
 801054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010552:	bf00      	nop
 8010554:	080105f9 	.word	0x080105f9
 8010558:	08010629 	.word	0x08010629
 801055c:	08010629 	.word	0x08010629
 8010560:	08010629 	.word	0x08010629
 8010564:	08010629 	.word	0x08010629
 8010568:	08010629 	.word	0x08010629
 801056c:	08010629 	.word	0x08010629
 8010570:	08010629 	.word	0x08010629
 8010574:	08010601 	.word	0x08010601
 8010578:	08010629 	.word	0x08010629
 801057c:	08010629 	.word	0x08010629
 8010580:	08010629 	.word	0x08010629
 8010584:	08010629 	.word	0x08010629
 8010588:	08010629 	.word	0x08010629
 801058c:	08010629 	.word	0x08010629
 8010590:	08010629 	.word	0x08010629
 8010594:	08010609 	.word	0x08010609
 8010598:	08010629 	.word	0x08010629
 801059c:	08010629 	.word	0x08010629
 80105a0:	08010629 	.word	0x08010629
 80105a4:	08010629 	.word	0x08010629
 80105a8:	08010629 	.word	0x08010629
 80105ac:	08010629 	.word	0x08010629
 80105b0:	08010629 	.word	0x08010629
 80105b4:	08010611 	.word	0x08010611
 80105b8:	08010629 	.word	0x08010629
 80105bc:	08010629 	.word	0x08010629
 80105c0:	08010629 	.word	0x08010629
 80105c4:	08010629 	.word	0x08010629
 80105c8:	08010629 	.word	0x08010629
 80105cc:	08010629 	.word	0x08010629
 80105d0:	08010629 	.word	0x08010629
 80105d4:	08010619 	.word	0x08010619
 80105d8:	08010629 	.word	0x08010629
 80105dc:	08010629 	.word	0x08010629
 80105e0:	08010629 	.word	0x08010629
 80105e4:	08010629 	.word	0x08010629
 80105e8:	08010629 	.word	0x08010629
 80105ec:	08010629 	.word	0x08010629
 80105f0:	08010629 	.word	0x08010629
 80105f4:	08010621 	.word	0x08010621
 80105f8:	2301      	movs	r3, #1
 80105fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105fe:	e326      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010600:	2304      	movs	r3, #4
 8010602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010606:	e322      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010608:	2308      	movs	r3, #8
 801060a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060e:	e31e      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010610:	2310      	movs	r3, #16
 8010612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010616:	e31a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010618:	2320      	movs	r3, #32
 801061a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061e:	e316      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010620:	2340      	movs	r3, #64	@ 0x40
 8010622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010626:	e312      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010628:	2380      	movs	r3, #128	@ 0x80
 801062a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801062e:	e30e      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a69      	ldr	r2, [pc, #420]	@ (80107dc <UART_SetConfig+0x33c>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d130      	bne.n	801069c <UART_SetConfig+0x1fc>
 801063a:	4b67      	ldr	r3, [pc, #412]	@ (80107d8 <UART_SetConfig+0x338>)
 801063c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801063e:	f003 0307 	and.w	r3, r3, #7
 8010642:	2b05      	cmp	r3, #5
 8010644:	d826      	bhi.n	8010694 <UART_SetConfig+0x1f4>
 8010646:	a201      	add	r2, pc, #4	@ (adr r2, 801064c <UART_SetConfig+0x1ac>)
 8010648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801064c:	08010665 	.word	0x08010665
 8010650:	0801066d 	.word	0x0801066d
 8010654:	08010675 	.word	0x08010675
 8010658:	0801067d 	.word	0x0801067d
 801065c:	08010685 	.word	0x08010685
 8010660:	0801068d 	.word	0x0801068d
 8010664:	2300      	movs	r3, #0
 8010666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801066a:	e2f0      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801066c:	2304      	movs	r3, #4
 801066e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010672:	e2ec      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010674:	2308      	movs	r3, #8
 8010676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801067a:	e2e8      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801067c:	2310      	movs	r3, #16
 801067e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010682:	e2e4      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010684:	2320      	movs	r3, #32
 8010686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068a:	e2e0      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801068c:	2340      	movs	r3, #64	@ 0x40
 801068e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010692:	e2dc      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010694:	2380      	movs	r3, #128	@ 0x80
 8010696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801069a:	e2d8      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a4f      	ldr	r2, [pc, #316]	@ (80107e0 <UART_SetConfig+0x340>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d130      	bne.n	8010708 <UART_SetConfig+0x268>
 80106a6:	4b4c      	ldr	r3, [pc, #304]	@ (80107d8 <UART_SetConfig+0x338>)
 80106a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106aa:	f003 0307 	and.w	r3, r3, #7
 80106ae:	2b05      	cmp	r3, #5
 80106b0:	d826      	bhi.n	8010700 <UART_SetConfig+0x260>
 80106b2:	a201      	add	r2, pc, #4	@ (adr r2, 80106b8 <UART_SetConfig+0x218>)
 80106b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106b8:	080106d1 	.word	0x080106d1
 80106bc:	080106d9 	.word	0x080106d9
 80106c0:	080106e1 	.word	0x080106e1
 80106c4:	080106e9 	.word	0x080106e9
 80106c8:	080106f1 	.word	0x080106f1
 80106cc:	080106f9 	.word	0x080106f9
 80106d0:	2300      	movs	r3, #0
 80106d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d6:	e2ba      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80106d8:	2304      	movs	r3, #4
 80106da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106de:	e2b6      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80106e0:	2308      	movs	r3, #8
 80106e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106e6:	e2b2      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80106e8:	2310      	movs	r3, #16
 80106ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ee:	e2ae      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80106f0:	2320      	movs	r3, #32
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106f6:	e2aa      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80106f8:	2340      	movs	r3, #64	@ 0x40
 80106fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106fe:	e2a6      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010700:	2380      	movs	r3, #128	@ 0x80
 8010702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010706:	e2a2      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a35      	ldr	r2, [pc, #212]	@ (80107e4 <UART_SetConfig+0x344>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d130      	bne.n	8010774 <UART_SetConfig+0x2d4>
 8010712:	4b31      	ldr	r3, [pc, #196]	@ (80107d8 <UART_SetConfig+0x338>)
 8010714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	2b05      	cmp	r3, #5
 801071c:	d826      	bhi.n	801076c <UART_SetConfig+0x2cc>
 801071e:	a201      	add	r2, pc, #4	@ (adr r2, 8010724 <UART_SetConfig+0x284>)
 8010720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010724:	0801073d 	.word	0x0801073d
 8010728:	08010745 	.word	0x08010745
 801072c:	0801074d 	.word	0x0801074d
 8010730:	08010755 	.word	0x08010755
 8010734:	0801075d 	.word	0x0801075d
 8010738:	08010765 	.word	0x08010765
 801073c:	2300      	movs	r3, #0
 801073e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010742:	e284      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010744:	2304      	movs	r3, #4
 8010746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074a:	e280      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801074c:	2308      	movs	r3, #8
 801074e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010752:	e27c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010754:	2310      	movs	r3, #16
 8010756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801075a:	e278      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801075c:	2320      	movs	r3, #32
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010762:	e274      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010764:	2340      	movs	r3, #64	@ 0x40
 8010766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801076a:	e270      	b.n	8010c4e <UART_SetConfig+0x7ae>
 801076c:	2380      	movs	r3, #128	@ 0x80
 801076e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010772:	e26c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a1b      	ldr	r2, [pc, #108]	@ (80107e8 <UART_SetConfig+0x348>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d142      	bne.n	8010804 <UART_SetConfig+0x364>
 801077e:	4b16      	ldr	r3, [pc, #88]	@ (80107d8 <UART_SetConfig+0x338>)
 8010780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010782:	f003 0307 	and.w	r3, r3, #7
 8010786:	2b05      	cmp	r3, #5
 8010788:	d838      	bhi.n	80107fc <UART_SetConfig+0x35c>
 801078a:	a201      	add	r2, pc, #4	@ (adr r2, 8010790 <UART_SetConfig+0x2f0>)
 801078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010790:	080107a9 	.word	0x080107a9
 8010794:	080107b1 	.word	0x080107b1
 8010798:	080107b9 	.word	0x080107b9
 801079c:	080107c1 	.word	0x080107c1
 80107a0:	080107ed 	.word	0x080107ed
 80107a4:	080107f5 	.word	0x080107f5
 80107a8:	2300      	movs	r3, #0
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ae:	e24e      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107b6:	e24a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107b8:	2308      	movs	r3, #8
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107be:	e246      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107c0:	2310      	movs	r3, #16
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107c6:	e242      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107c8:	cfff69f3 	.word	0xcfff69f3
 80107cc:	58000c00 	.word	0x58000c00
 80107d0:	11fff4ff 	.word	0x11fff4ff
 80107d4:	40011000 	.word	0x40011000
 80107d8:	58024400 	.word	0x58024400
 80107dc:	40004400 	.word	0x40004400
 80107e0:	40004800 	.word	0x40004800
 80107e4:	40004c00 	.word	0x40004c00
 80107e8:	40005000 	.word	0x40005000
 80107ec:	2320      	movs	r3, #32
 80107ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f2:	e22c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107f4:	2340      	movs	r3, #64	@ 0x40
 80107f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107fa:	e228      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80107fc:	2380      	movs	r3, #128	@ 0x80
 80107fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010802:	e224      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4ab1      	ldr	r2, [pc, #708]	@ (8010ad0 <UART_SetConfig+0x630>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d176      	bne.n	80108fc <UART_SetConfig+0x45c>
 801080e:	4bb1      	ldr	r3, [pc, #708]	@ (8010ad4 <UART_SetConfig+0x634>)
 8010810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010816:	2b28      	cmp	r3, #40	@ 0x28
 8010818:	d86c      	bhi.n	80108f4 <UART_SetConfig+0x454>
 801081a:	a201      	add	r2, pc, #4	@ (adr r2, 8010820 <UART_SetConfig+0x380>)
 801081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010820:	080108c5 	.word	0x080108c5
 8010824:	080108f5 	.word	0x080108f5
 8010828:	080108f5 	.word	0x080108f5
 801082c:	080108f5 	.word	0x080108f5
 8010830:	080108f5 	.word	0x080108f5
 8010834:	080108f5 	.word	0x080108f5
 8010838:	080108f5 	.word	0x080108f5
 801083c:	080108f5 	.word	0x080108f5
 8010840:	080108cd 	.word	0x080108cd
 8010844:	080108f5 	.word	0x080108f5
 8010848:	080108f5 	.word	0x080108f5
 801084c:	080108f5 	.word	0x080108f5
 8010850:	080108f5 	.word	0x080108f5
 8010854:	080108f5 	.word	0x080108f5
 8010858:	080108f5 	.word	0x080108f5
 801085c:	080108f5 	.word	0x080108f5
 8010860:	080108d5 	.word	0x080108d5
 8010864:	080108f5 	.word	0x080108f5
 8010868:	080108f5 	.word	0x080108f5
 801086c:	080108f5 	.word	0x080108f5
 8010870:	080108f5 	.word	0x080108f5
 8010874:	080108f5 	.word	0x080108f5
 8010878:	080108f5 	.word	0x080108f5
 801087c:	080108f5 	.word	0x080108f5
 8010880:	080108dd 	.word	0x080108dd
 8010884:	080108f5 	.word	0x080108f5
 8010888:	080108f5 	.word	0x080108f5
 801088c:	080108f5 	.word	0x080108f5
 8010890:	080108f5 	.word	0x080108f5
 8010894:	080108f5 	.word	0x080108f5
 8010898:	080108f5 	.word	0x080108f5
 801089c:	080108f5 	.word	0x080108f5
 80108a0:	080108e5 	.word	0x080108e5
 80108a4:	080108f5 	.word	0x080108f5
 80108a8:	080108f5 	.word	0x080108f5
 80108ac:	080108f5 	.word	0x080108f5
 80108b0:	080108f5 	.word	0x080108f5
 80108b4:	080108f5 	.word	0x080108f5
 80108b8:	080108f5 	.word	0x080108f5
 80108bc:	080108f5 	.word	0x080108f5
 80108c0:	080108ed 	.word	0x080108ed
 80108c4:	2301      	movs	r3, #1
 80108c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ca:	e1c0      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108cc:	2304      	movs	r3, #4
 80108ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108d2:	e1bc      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108d4:	2308      	movs	r3, #8
 80108d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108da:	e1b8      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108dc:	2310      	movs	r3, #16
 80108de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108e2:	e1b4      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108e4:	2320      	movs	r3, #32
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ea:	e1b0      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108ec:	2340      	movs	r3, #64	@ 0x40
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108f2:	e1ac      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108f4:	2380      	movs	r3, #128	@ 0x80
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108fa:	e1a8      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a75      	ldr	r2, [pc, #468]	@ (8010ad8 <UART_SetConfig+0x638>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d130      	bne.n	8010968 <UART_SetConfig+0x4c8>
 8010906:	4b73      	ldr	r3, [pc, #460]	@ (8010ad4 <UART_SetConfig+0x634>)
 8010908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801090a:	f003 0307 	and.w	r3, r3, #7
 801090e:	2b05      	cmp	r3, #5
 8010910:	d826      	bhi.n	8010960 <UART_SetConfig+0x4c0>
 8010912:	a201      	add	r2, pc, #4	@ (adr r2, 8010918 <UART_SetConfig+0x478>)
 8010914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010918:	08010931 	.word	0x08010931
 801091c:	08010939 	.word	0x08010939
 8010920:	08010941 	.word	0x08010941
 8010924:	08010949 	.word	0x08010949
 8010928:	08010951 	.word	0x08010951
 801092c:	08010959 	.word	0x08010959
 8010930:	2300      	movs	r3, #0
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010936:	e18a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010938:	2304      	movs	r3, #4
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093e:	e186      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010940:	2308      	movs	r3, #8
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010946:	e182      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010948:	2310      	movs	r3, #16
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094e:	e17e      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010950:	2320      	movs	r3, #32
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010956:	e17a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010958:	2340      	movs	r3, #64	@ 0x40
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095e:	e176      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010960:	2380      	movs	r3, #128	@ 0x80
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010966:	e172      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4a5b      	ldr	r2, [pc, #364]	@ (8010adc <UART_SetConfig+0x63c>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d130      	bne.n	80109d4 <UART_SetConfig+0x534>
 8010972:	4b58      	ldr	r3, [pc, #352]	@ (8010ad4 <UART_SetConfig+0x634>)
 8010974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010976:	f003 0307 	and.w	r3, r3, #7
 801097a:	2b05      	cmp	r3, #5
 801097c:	d826      	bhi.n	80109cc <UART_SetConfig+0x52c>
 801097e:	a201      	add	r2, pc, #4	@ (adr r2, 8010984 <UART_SetConfig+0x4e4>)
 8010980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010984:	0801099d 	.word	0x0801099d
 8010988:	080109a5 	.word	0x080109a5
 801098c:	080109ad 	.word	0x080109ad
 8010990:	080109b5 	.word	0x080109b5
 8010994:	080109bd 	.word	0x080109bd
 8010998:	080109c5 	.word	0x080109c5
 801099c:	2300      	movs	r3, #0
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a2:	e154      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109a4:	2304      	movs	r3, #4
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109aa:	e150      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109ac:	2308      	movs	r3, #8
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b2:	e14c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109b4:	2310      	movs	r3, #16
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ba:	e148      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109bc:	2320      	movs	r3, #32
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109c2:	e144      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109c4:	2340      	movs	r3, #64	@ 0x40
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ca:	e140      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109cc:	2380      	movs	r3, #128	@ 0x80
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109d2:	e13c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a41      	ldr	r2, [pc, #260]	@ (8010ae0 <UART_SetConfig+0x640>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	f040 8082 	bne.w	8010ae4 <UART_SetConfig+0x644>
 80109e0:	4b3c      	ldr	r3, [pc, #240]	@ (8010ad4 <UART_SetConfig+0x634>)
 80109e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80109e8:	2b28      	cmp	r3, #40	@ 0x28
 80109ea:	d86d      	bhi.n	8010ac8 <UART_SetConfig+0x628>
 80109ec:	a201      	add	r2, pc, #4	@ (adr r2, 80109f4 <UART_SetConfig+0x554>)
 80109ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f2:	bf00      	nop
 80109f4:	08010a99 	.word	0x08010a99
 80109f8:	08010ac9 	.word	0x08010ac9
 80109fc:	08010ac9 	.word	0x08010ac9
 8010a00:	08010ac9 	.word	0x08010ac9
 8010a04:	08010ac9 	.word	0x08010ac9
 8010a08:	08010ac9 	.word	0x08010ac9
 8010a0c:	08010ac9 	.word	0x08010ac9
 8010a10:	08010ac9 	.word	0x08010ac9
 8010a14:	08010aa1 	.word	0x08010aa1
 8010a18:	08010ac9 	.word	0x08010ac9
 8010a1c:	08010ac9 	.word	0x08010ac9
 8010a20:	08010ac9 	.word	0x08010ac9
 8010a24:	08010ac9 	.word	0x08010ac9
 8010a28:	08010ac9 	.word	0x08010ac9
 8010a2c:	08010ac9 	.word	0x08010ac9
 8010a30:	08010ac9 	.word	0x08010ac9
 8010a34:	08010aa9 	.word	0x08010aa9
 8010a38:	08010ac9 	.word	0x08010ac9
 8010a3c:	08010ac9 	.word	0x08010ac9
 8010a40:	08010ac9 	.word	0x08010ac9
 8010a44:	08010ac9 	.word	0x08010ac9
 8010a48:	08010ac9 	.word	0x08010ac9
 8010a4c:	08010ac9 	.word	0x08010ac9
 8010a50:	08010ac9 	.word	0x08010ac9
 8010a54:	08010ab1 	.word	0x08010ab1
 8010a58:	08010ac9 	.word	0x08010ac9
 8010a5c:	08010ac9 	.word	0x08010ac9
 8010a60:	08010ac9 	.word	0x08010ac9
 8010a64:	08010ac9 	.word	0x08010ac9
 8010a68:	08010ac9 	.word	0x08010ac9
 8010a6c:	08010ac9 	.word	0x08010ac9
 8010a70:	08010ac9 	.word	0x08010ac9
 8010a74:	08010ab9 	.word	0x08010ab9
 8010a78:	08010ac9 	.word	0x08010ac9
 8010a7c:	08010ac9 	.word	0x08010ac9
 8010a80:	08010ac9 	.word	0x08010ac9
 8010a84:	08010ac9 	.word	0x08010ac9
 8010a88:	08010ac9 	.word	0x08010ac9
 8010a8c:	08010ac9 	.word	0x08010ac9
 8010a90:	08010ac9 	.word	0x08010ac9
 8010a94:	08010ac1 	.word	0x08010ac1
 8010a98:	2301      	movs	r3, #1
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9e:	e0d6      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010aa0:	2304      	movs	r3, #4
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aa6:	e0d2      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010aa8:	2308      	movs	r3, #8
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aae:	e0ce      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010ab0:	2310      	movs	r3, #16
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ab6:	e0ca      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010ab8:	2320      	movs	r3, #32
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010abe:	e0c6      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010ac0:	2340      	movs	r3, #64	@ 0x40
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ac6:	e0c2      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010ac8:	2380      	movs	r3, #128	@ 0x80
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ace:	e0be      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010ad0:	40011400 	.word	0x40011400
 8010ad4:	58024400 	.word	0x58024400
 8010ad8:	40007800 	.word	0x40007800
 8010adc:	40007c00 	.word	0x40007c00
 8010ae0:	40011800 	.word	0x40011800
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4aad      	ldr	r2, [pc, #692]	@ (8010da0 <UART_SetConfig+0x900>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d176      	bne.n	8010bdc <UART_SetConfig+0x73c>
 8010aee:	4bad      	ldr	r3, [pc, #692]	@ (8010da4 <UART_SetConfig+0x904>)
 8010af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010af6:	2b28      	cmp	r3, #40	@ 0x28
 8010af8:	d86c      	bhi.n	8010bd4 <UART_SetConfig+0x734>
 8010afa:	a201      	add	r2, pc, #4	@ (adr r2, 8010b00 <UART_SetConfig+0x660>)
 8010afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b00:	08010ba5 	.word	0x08010ba5
 8010b04:	08010bd5 	.word	0x08010bd5
 8010b08:	08010bd5 	.word	0x08010bd5
 8010b0c:	08010bd5 	.word	0x08010bd5
 8010b10:	08010bd5 	.word	0x08010bd5
 8010b14:	08010bd5 	.word	0x08010bd5
 8010b18:	08010bd5 	.word	0x08010bd5
 8010b1c:	08010bd5 	.word	0x08010bd5
 8010b20:	08010bad 	.word	0x08010bad
 8010b24:	08010bd5 	.word	0x08010bd5
 8010b28:	08010bd5 	.word	0x08010bd5
 8010b2c:	08010bd5 	.word	0x08010bd5
 8010b30:	08010bd5 	.word	0x08010bd5
 8010b34:	08010bd5 	.word	0x08010bd5
 8010b38:	08010bd5 	.word	0x08010bd5
 8010b3c:	08010bd5 	.word	0x08010bd5
 8010b40:	08010bb5 	.word	0x08010bb5
 8010b44:	08010bd5 	.word	0x08010bd5
 8010b48:	08010bd5 	.word	0x08010bd5
 8010b4c:	08010bd5 	.word	0x08010bd5
 8010b50:	08010bd5 	.word	0x08010bd5
 8010b54:	08010bd5 	.word	0x08010bd5
 8010b58:	08010bd5 	.word	0x08010bd5
 8010b5c:	08010bd5 	.word	0x08010bd5
 8010b60:	08010bbd 	.word	0x08010bbd
 8010b64:	08010bd5 	.word	0x08010bd5
 8010b68:	08010bd5 	.word	0x08010bd5
 8010b6c:	08010bd5 	.word	0x08010bd5
 8010b70:	08010bd5 	.word	0x08010bd5
 8010b74:	08010bd5 	.word	0x08010bd5
 8010b78:	08010bd5 	.word	0x08010bd5
 8010b7c:	08010bd5 	.word	0x08010bd5
 8010b80:	08010bc5 	.word	0x08010bc5
 8010b84:	08010bd5 	.word	0x08010bd5
 8010b88:	08010bd5 	.word	0x08010bd5
 8010b8c:	08010bd5 	.word	0x08010bd5
 8010b90:	08010bd5 	.word	0x08010bd5
 8010b94:	08010bd5 	.word	0x08010bd5
 8010b98:	08010bd5 	.word	0x08010bd5
 8010b9c:	08010bd5 	.word	0x08010bd5
 8010ba0:	08010bcd 	.word	0x08010bcd
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010baa:	e050      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bac:	2304      	movs	r3, #4
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bb2:	e04c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bba:	e048      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bbc:	2310      	movs	r3, #16
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bc2:	e044      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bc4:	2320      	movs	r3, #32
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bca:	e040      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bcc:	2340      	movs	r3, #64	@ 0x40
 8010bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bd2:	e03c      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bd4:	2380      	movs	r3, #128	@ 0x80
 8010bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bda:	e038      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a71      	ldr	r2, [pc, #452]	@ (8010da8 <UART_SetConfig+0x908>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d130      	bne.n	8010c48 <UART_SetConfig+0x7a8>
 8010be6:	4b6f      	ldr	r3, [pc, #444]	@ (8010da4 <UART_SetConfig+0x904>)
 8010be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bea:	f003 0307 	and.w	r3, r3, #7
 8010bee:	2b05      	cmp	r3, #5
 8010bf0:	d826      	bhi.n	8010c40 <UART_SetConfig+0x7a0>
 8010bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bf8 <UART_SetConfig+0x758>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c11 	.word	0x08010c11
 8010bfc:	08010c19 	.word	0x08010c19
 8010c00:	08010c21 	.word	0x08010c21
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c31 	.word	0x08010c31
 8010c0c:	08010c39 	.word	0x08010c39
 8010c10:	2302      	movs	r3, #2
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c16:	e01a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c18:	2304      	movs	r3, #4
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1e:	e016      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c20:	2308      	movs	r3, #8
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c26:	e012      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c28:	2310      	movs	r3, #16
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2e:	e00e      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c30:	2320      	movs	r3, #32
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c36:	e00a      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c38:	2340      	movs	r3, #64	@ 0x40
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c3e:	e006      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c40:	2380      	movs	r3, #128	@ 0x80
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c46:	e002      	b.n	8010c4e <UART_SetConfig+0x7ae>
 8010c48:	2380      	movs	r3, #128	@ 0x80
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a55      	ldr	r2, [pc, #340]	@ (8010da8 <UART_SetConfig+0x908>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	f040 80f8 	bne.w	8010e4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010c5e:	2b20      	cmp	r3, #32
 8010c60:	dc46      	bgt.n	8010cf0 <UART_SetConfig+0x850>
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	db75      	blt.n	8010d52 <UART_SetConfig+0x8b2>
 8010c66:	3b02      	subs	r3, #2
 8010c68:	2b1e      	cmp	r3, #30
 8010c6a:	d872      	bhi.n	8010d52 <UART_SetConfig+0x8b2>
 8010c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8010c74 <UART_SetConfig+0x7d4>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010cf7 	.word	0x08010cf7
 8010c78:	08010d53 	.word	0x08010d53
 8010c7c:	08010cff 	.word	0x08010cff
 8010c80:	08010d53 	.word	0x08010d53
 8010c84:	08010d53 	.word	0x08010d53
 8010c88:	08010d53 	.word	0x08010d53
 8010c8c:	08010d0f 	.word	0x08010d0f
 8010c90:	08010d53 	.word	0x08010d53
 8010c94:	08010d53 	.word	0x08010d53
 8010c98:	08010d53 	.word	0x08010d53
 8010c9c:	08010d53 	.word	0x08010d53
 8010ca0:	08010d53 	.word	0x08010d53
 8010ca4:	08010d53 	.word	0x08010d53
 8010ca8:	08010d53 	.word	0x08010d53
 8010cac:	08010d1f 	.word	0x08010d1f
 8010cb0:	08010d53 	.word	0x08010d53
 8010cb4:	08010d53 	.word	0x08010d53
 8010cb8:	08010d53 	.word	0x08010d53
 8010cbc:	08010d53 	.word	0x08010d53
 8010cc0:	08010d53 	.word	0x08010d53
 8010cc4:	08010d53 	.word	0x08010d53
 8010cc8:	08010d53 	.word	0x08010d53
 8010ccc:	08010d53 	.word	0x08010d53
 8010cd0:	08010d53 	.word	0x08010d53
 8010cd4:	08010d53 	.word	0x08010d53
 8010cd8:	08010d53 	.word	0x08010d53
 8010cdc:	08010d53 	.word	0x08010d53
 8010ce0:	08010d53 	.word	0x08010d53
 8010ce4:	08010d53 	.word	0x08010d53
 8010ce8:	08010d53 	.word	0x08010d53
 8010cec:	08010d45 	.word	0x08010d45
 8010cf0:	2b40      	cmp	r3, #64	@ 0x40
 8010cf2:	d02a      	beq.n	8010d4a <UART_SetConfig+0x8aa>
 8010cf4:	e02d      	b.n	8010d52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010cf6:	f7fc fe05 	bl	800d904 <HAL_RCCEx_GetD3PCLK1Freq>
 8010cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010cfc:	e02f      	b.n	8010d5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fc fe14 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d0c:	e027      	b.n	8010d5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d0e:	f107 0318 	add.w	r3, r7, #24
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fc ff60 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d1c:	e01f      	b.n	8010d5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d1e:	4b21      	ldr	r3, [pc, #132]	@ (8010da4 <UART_SetConfig+0x904>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f003 0320 	and.w	r3, r3, #32
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d009      	beq.n	8010d3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8010da4 <UART_SetConfig+0x904>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	08db      	lsrs	r3, r3, #3
 8010d30:	f003 0303 	and.w	r3, r3, #3
 8010d34:	4a1d      	ldr	r2, [pc, #116]	@ (8010dac <UART_SetConfig+0x90c>)
 8010d36:	fa22 f303 	lsr.w	r3, r2, r3
 8010d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d3c:	e00f      	b.n	8010d5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8010dac <UART_SetConfig+0x90c>)
 8010d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d42:	e00c      	b.n	8010d5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d44:	4b1a      	ldr	r3, [pc, #104]	@ (8010db0 <UART_SetConfig+0x910>)
 8010d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d48:	e009      	b.n	8010d5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d50:	e005      	b.n	8010d5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010d52:	2300      	movs	r3, #0
 8010d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010d56:	2301      	movs	r3, #1
 8010d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010d5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 81ee 	beq.w	8011142 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d6a:	4a12      	ldr	r2, [pc, #72]	@ (8010db4 <UART_SetConfig+0x914>)
 8010d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d70:	461a      	mov	r2, r3
 8010d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	685a      	ldr	r2, [r3, #4]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4413      	add	r3, r2
 8010d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d305      	bcc.n	8010d96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d910      	bls.n	8010db8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010d9c:	e1d1      	b.n	8011142 <UART_SetConfig+0xca2>
 8010d9e:	bf00      	nop
 8010da0:	40011c00 	.word	0x40011c00
 8010da4:	58024400 	.word	0x58024400
 8010da8:	58000c00 	.word	0x58000c00
 8010dac:	03d09000 	.word	0x03d09000
 8010db0:	003d0900 	.word	0x003d0900
 8010db4:	0801aaf0 	.word	0x0801aaf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dba:	2200      	movs	r2, #0
 8010dbc:	60bb      	str	r3, [r7, #8]
 8010dbe:	60fa      	str	r2, [r7, #12]
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc4:	4ac0      	ldr	r2, [pc, #768]	@ (80110c8 <UART_SetConfig+0xc28>)
 8010dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	2200      	movs	r2, #0
 8010dce:	603b      	str	r3, [r7, #0]
 8010dd0:	607a      	str	r2, [r7, #4]
 8010dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010dda:	f7ef fcbd 	bl	8000758 <__aeabi_uldivmod>
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	4610      	mov	r0, r2
 8010de4:	4619      	mov	r1, r3
 8010de6:	f04f 0200 	mov.w	r2, #0
 8010dea:	f04f 0300 	mov.w	r3, #0
 8010dee:	020b      	lsls	r3, r1, #8
 8010df0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010df4:	0202      	lsls	r2, r0, #8
 8010df6:	6979      	ldr	r1, [r7, #20]
 8010df8:	6849      	ldr	r1, [r1, #4]
 8010dfa:	0849      	lsrs	r1, r1, #1
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	4605      	mov	r5, r0
 8010e02:	eb12 0804 	adds.w	r8, r2, r4
 8010e06:	eb43 0905 	adc.w	r9, r3, r5
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	469a      	mov	sl, r3
 8010e12:	4693      	mov	fp, r2
 8010e14:	4652      	mov	r2, sl
 8010e16:	465b      	mov	r3, fp
 8010e18:	4640      	mov	r0, r8
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	f7ef fc9c 	bl	8000758 <__aeabi_uldivmod>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	4613      	mov	r3, r2
 8010e26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e2e:	d308      	bcc.n	8010e42 <UART_SetConfig+0x9a2>
 8010e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010e36:	d204      	bcs.n	8010e42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e3e:	60da      	str	r2, [r3, #12]
 8010e40:	e17f      	b.n	8011142 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010e42:	2301      	movs	r3, #1
 8010e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010e48:	e17b      	b.n	8011142 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	69db      	ldr	r3, [r3, #28]
 8010e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010e52:	f040 80bd 	bne.w	8010fd0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010e56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e5a:	2b20      	cmp	r3, #32
 8010e5c:	dc48      	bgt.n	8010ef0 <UART_SetConfig+0xa50>
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	db7b      	blt.n	8010f5a <UART_SetConfig+0xaba>
 8010e62:	2b20      	cmp	r3, #32
 8010e64:	d879      	bhi.n	8010f5a <UART_SetConfig+0xaba>
 8010e66:	a201      	add	r2, pc, #4	@ (adr r2, 8010e6c <UART_SetConfig+0x9cc>)
 8010e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6c:	08010ef7 	.word	0x08010ef7
 8010e70:	08010eff 	.word	0x08010eff
 8010e74:	08010f5b 	.word	0x08010f5b
 8010e78:	08010f5b 	.word	0x08010f5b
 8010e7c:	08010f07 	.word	0x08010f07
 8010e80:	08010f5b 	.word	0x08010f5b
 8010e84:	08010f5b 	.word	0x08010f5b
 8010e88:	08010f5b 	.word	0x08010f5b
 8010e8c:	08010f17 	.word	0x08010f17
 8010e90:	08010f5b 	.word	0x08010f5b
 8010e94:	08010f5b 	.word	0x08010f5b
 8010e98:	08010f5b 	.word	0x08010f5b
 8010e9c:	08010f5b 	.word	0x08010f5b
 8010ea0:	08010f5b 	.word	0x08010f5b
 8010ea4:	08010f5b 	.word	0x08010f5b
 8010ea8:	08010f5b 	.word	0x08010f5b
 8010eac:	08010f27 	.word	0x08010f27
 8010eb0:	08010f5b 	.word	0x08010f5b
 8010eb4:	08010f5b 	.word	0x08010f5b
 8010eb8:	08010f5b 	.word	0x08010f5b
 8010ebc:	08010f5b 	.word	0x08010f5b
 8010ec0:	08010f5b 	.word	0x08010f5b
 8010ec4:	08010f5b 	.word	0x08010f5b
 8010ec8:	08010f5b 	.word	0x08010f5b
 8010ecc:	08010f5b 	.word	0x08010f5b
 8010ed0:	08010f5b 	.word	0x08010f5b
 8010ed4:	08010f5b 	.word	0x08010f5b
 8010ed8:	08010f5b 	.word	0x08010f5b
 8010edc:	08010f5b 	.word	0x08010f5b
 8010ee0:	08010f5b 	.word	0x08010f5b
 8010ee4:	08010f5b 	.word	0x08010f5b
 8010ee8:	08010f5b 	.word	0x08010f5b
 8010eec:	08010f4d 	.word	0x08010f4d
 8010ef0:	2b40      	cmp	r3, #64	@ 0x40
 8010ef2:	d02e      	beq.n	8010f52 <UART_SetConfig+0xab2>
 8010ef4:	e031      	b.n	8010f5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ef6:	f7fa fe67 	bl	800bbc8 <HAL_RCC_GetPCLK1Freq>
 8010efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010efc:	e033      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010efe:	f7fa fe79 	bl	800bbf4 <HAL_RCC_GetPCLK2Freq>
 8010f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010f04:	e02f      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fc fd10 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f14:	e027      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f16:	f107 0318 	add.w	r3, r7, #24
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fc fe5c 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f24:	e01f      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f26:	4b69      	ldr	r3, [pc, #420]	@ (80110cc <UART_SetConfig+0xc2c>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f003 0320 	and.w	r3, r3, #32
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d009      	beq.n	8010f46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f32:	4b66      	ldr	r3, [pc, #408]	@ (80110cc <UART_SetConfig+0xc2c>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	08db      	lsrs	r3, r3, #3
 8010f38:	f003 0303 	and.w	r3, r3, #3
 8010f3c:	4a64      	ldr	r2, [pc, #400]	@ (80110d0 <UART_SetConfig+0xc30>)
 8010f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f44:	e00f      	b.n	8010f66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010f46:	4b62      	ldr	r3, [pc, #392]	@ (80110d0 <UART_SetConfig+0xc30>)
 8010f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f4a:	e00c      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f4c:	4b61      	ldr	r3, [pc, #388]	@ (80110d4 <UART_SetConfig+0xc34>)
 8010f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f50:	e009      	b.n	8010f66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f58:	e005      	b.n	8010f66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f000 80ea 	beq.w	8011142 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f72:	4a55      	ldr	r2, [pc, #340]	@ (80110c8 <UART_SetConfig+0xc28>)
 8010f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f78:	461a      	mov	r2, r3
 8010f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f80:	005a      	lsls	r2, r3, #1
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	085b      	lsrs	r3, r3, #1
 8010f88:	441a      	add	r2, r3
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f96:	2b0f      	cmp	r3, #15
 8010f98:	d916      	bls.n	8010fc8 <UART_SetConfig+0xb28>
 8010f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010fa0:	d212      	bcs.n	8010fc8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	f023 030f 	bic.w	r3, r3, #15
 8010faa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	085b      	lsrs	r3, r3, #1
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	f003 0307 	and.w	r3, r3, #7
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010fc4:	60da      	str	r2, [r3, #12]
 8010fc6:	e0bc      	b.n	8011142 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010fce:	e0b8      	b.n	8011142 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010fd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010fd4:	2b20      	cmp	r3, #32
 8010fd6:	dc4b      	bgt.n	8011070 <UART_SetConfig+0xbd0>
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f2c0 8087 	blt.w	80110ec <UART_SetConfig+0xc4c>
 8010fde:	2b20      	cmp	r3, #32
 8010fe0:	f200 8084 	bhi.w	80110ec <UART_SetConfig+0xc4c>
 8010fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8010fec <UART_SetConfig+0xb4c>)
 8010fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fea:	bf00      	nop
 8010fec:	08011077 	.word	0x08011077
 8010ff0:	0801107f 	.word	0x0801107f
 8010ff4:	080110ed 	.word	0x080110ed
 8010ff8:	080110ed 	.word	0x080110ed
 8010ffc:	08011087 	.word	0x08011087
 8011000:	080110ed 	.word	0x080110ed
 8011004:	080110ed 	.word	0x080110ed
 8011008:	080110ed 	.word	0x080110ed
 801100c:	08011097 	.word	0x08011097
 8011010:	080110ed 	.word	0x080110ed
 8011014:	080110ed 	.word	0x080110ed
 8011018:	080110ed 	.word	0x080110ed
 801101c:	080110ed 	.word	0x080110ed
 8011020:	080110ed 	.word	0x080110ed
 8011024:	080110ed 	.word	0x080110ed
 8011028:	080110ed 	.word	0x080110ed
 801102c:	080110a7 	.word	0x080110a7
 8011030:	080110ed 	.word	0x080110ed
 8011034:	080110ed 	.word	0x080110ed
 8011038:	080110ed 	.word	0x080110ed
 801103c:	080110ed 	.word	0x080110ed
 8011040:	080110ed 	.word	0x080110ed
 8011044:	080110ed 	.word	0x080110ed
 8011048:	080110ed 	.word	0x080110ed
 801104c:	080110ed 	.word	0x080110ed
 8011050:	080110ed 	.word	0x080110ed
 8011054:	080110ed 	.word	0x080110ed
 8011058:	080110ed 	.word	0x080110ed
 801105c:	080110ed 	.word	0x080110ed
 8011060:	080110ed 	.word	0x080110ed
 8011064:	080110ed 	.word	0x080110ed
 8011068:	080110ed 	.word	0x080110ed
 801106c:	080110df 	.word	0x080110df
 8011070:	2b40      	cmp	r3, #64	@ 0x40
 8011072:	d037      	beq.n	80110e4 <UART_SetConfig+0xc44>
 8011074:	e03a      	b.n	80110ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011076:	f7fa fda7 	bl	800bbc8 <HAL_RCC_GetPCLK1Freq>
 801107a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801107c:	e03c      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801107e:	f7fa fdb9 	bl	800bbf4 <HAL_RCC_GetPCLK2Freq>
 8011082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011084:	e038      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801108a:	4618      	mov	r0, r3
 801108c:	f7fc fc50 	bl	800d930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011094:	e030      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011096:	f107 0318 	add.w	r3, r7, #24
 801109a:	4618      	mov	r0, r3
 801109c:	f7fc fd9c 	bl	800dbd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a4:	e028      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110a6:	4b09      	ldr	r3, [pc, #36]	@ (80110cc <UART_SetConfig+0xc2c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f003 0320 	and.w	r3, r3, #32
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d012      	beq.n	80110d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110b2:	4b06      	ldr	r3, [pc, #24]	@ (80110cc <UART_SetConfig+0xc2c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	08db      	lsrs	r3, r3, #3
 80110b8:	f003 0303 	and.w	r3, r3, #3
 80110bc:	4a04      	ldr	r2, [pc, #16]	@ (80110d0 <UART_SetConfig+0xc30>)
 80110be:	fa22 f303 	lsr.w	r3, r2, r3
 80110c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110c4:	e018      	b.n	80110f8 <UART_SetConfig+0xc58>
 80110c6:	bf00      	nop
 80110c8:	0801aaf0 	.word	0x0801aaf0
 80110cc:	58024400 	.word	0x58024400
 80110d0:	03d09000 	.word	0x03d09000
 80110d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80110d8:	4b24      	ldr	r3, [pc, #144]	@ (801116c <UART_SetConfig+0xccc>)
 80110da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110dc:	e00c      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110de:	4b24      	ldr	r3, [pc, #144]	@ (8011170 <UART_SetConfig+0xcd0>)
 80110e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110e2:	e009      	b.n	80110f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110ea:	e005      	b.n	80110f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80110ec:	2300      	movs	r3, #0
 80110ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80110f0:	2301      	movs	r3, #1
 80110f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80110f6:	bf00      	nop
    }

    if (pclk != 0U)
 80110f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d021      	beq.n	8011142 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011102:	4a1c      	ldr	r2, [pc, #112]	@ (8011174 <UART_SetConfig+0xcd4>)
 8011104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011108:	461a      	mov	r2, r3
 801110a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801110c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	085b      	lsrs	r3, r3, #1
 8011116:	441a      	add	r2, r3
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011120:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011124:	2b0f      	cmp	r3, #15
 8011126:	d909      	bls.n	801113c <UART_SetConfig+0xc9c>
 8011128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801112a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801112e:	d205      	bcs.n	801113c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011132:	b29a      	uxth	r2, r3
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	60da      	str	r2, [r3, #12]
 801113a:	e002      	b.n	8011142 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801113c:	2301      	movs	r3, #1
 801113e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2201      	movs	r2, #1
 8011146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	2201      	movs	r2, #1
 801114e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2200      	movs	r2, #0
 8011156:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2200      	movs	r2, #0
 801115c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801115e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011162:	4618      	mov	r0, r3
 8011164:	3748      	adds	r7, #72	@ 0x48
 8011166:	46bd      	mov	sp, r7
 8011168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801116c:	03d09000 	.word	0x03d09000
 8011170:	003d0900 	.word	0x003d0900
 8011174:	0801aaf0 	.word	0x0801aaf0

08011178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011184:	f003 0308 	and.w	r3, r3, #8
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00a      	beq.n	80111a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	430a      	orrs	r2, r1
 80111a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111a6:	f003 0301 	and.w	r3, r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00a      	beq.n	80111c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111c8:	f003 0302 	and.w	r3, r3, #2
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111ea:	f003 0304 	and.w	r3, r3, #4
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	430a      	orrs	r2, r1
 8011206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801120c:	f003 0310 	and.w	r3, r3, #16
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00a      	beq.n	801122a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00a      	beq.n	801124c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	430a      	orrs	r2, r1
 801124a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01a      	beq.n	801128e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011276:	d10a      	bne.n	801128e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00a      	beq.n	80112b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	605a      	str	r2, [r3, #4]
  }
}
 80112b0:	bf00      	nop
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b098      	sub	sp, #96	@ 0x60
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80112cc:	f7f3 fe94 	bl	8004ff8 <HAL_GetTick>
 80112d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f003 0308 	and.w	r3, r3, #8
 80112dc:	2b08      	cmp	r3, #8
 80112de:	d12f      	bne.n	8011340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112e8:	2200      	movs	r2, #0
 80112ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 f88e 	bl	8011410 <UART_WaitOnFlagUntilTimeout>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d022      	beq.n	8011340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	e853 3f00 	ldrex	r3, [r3]
 8011306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801130a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801130e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	461a      	mov	r2, r3
 8011316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011318:	647b      	str	r3, [r7, #68]	@ 0x44
 801131a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801131c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801131e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011320:	e841 2300 	strex	r3, r2, [r1]
 8011324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1e6      	bne.n	80112fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2220      	movs	r2, #32
 8011330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801133c:	2303      	movs	r3, #3
 801133e:	e063      	b.n	8011408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f003 0304 	and.w	r3, r3, #4
 801134a:	2b04      	cmp	r3, #4
 801134c:	d149      	bne.n	80113e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801134e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011356:	2200      	movs	r2, #0
 8011358:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f857 	bl	8011410 <UART_WaitOnFlagUntilTimeout>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d03c      	beq.n	80113e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011370:	e853 3f00 	ldrex	r3, [r3]
 8011374:	623b      	str	r3, [r7, #32]
   return(result);
 8011376:	6a3b      	ldr	r3, [r7, #32]
 8011378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801137c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	461a      	mov	r2, r3
 8011384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011386:	633b      	str	r3, [r7, #48]	@ 0x30
 8011388:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801138a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801138c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801138e:	e841 2300 	strex	r3, r2, [r1]
 8011392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1e6      	bne.n	8011368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3308      	adds	r3, #8
 80113a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	e853 3f00 	ldrex	r3, [r3]
 80113a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f023 0301 	bic.w	r3, r3, #1
 80113b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	3308      	adds	r3, #8
 80113b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113ba:	61fa      	str	r2, [r7, #28]
 80113bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113be:	69b9      	ldr	r1, [r7, #24]
 80113c0:	69fa      	ldr	r2, [r7, #28]
 80113c2:	e841 2300 	strex	r3, r2, [r1]
 80113c6:	617b      	str	r3, [r7, #20]
   return(result);
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1e5      	bne.n	801139a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2220      	movs	r2, #32
 80113d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113de:	2303      	movs	r3, #3
 80113e0:	e012      	b.n	8011408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2220      	movs	r2, #32
 80113e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2220      	movs	r2, #32
 80113ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011406:	2300      	movs	r3, #0
}
 8011408:	4618      	mov	r0, r3
 801140a:	3758      	adds	r7, #88	@ 0x58
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	603b      	str	r3, [r7, #0]
 801141c:	4613      	mov	r3, r2
 801141e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011420:	e04f      	b.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011428:	d04b      	beq.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801142a:	f7f3 fde5 	bl	8004ff8 <HAL_GetTick>
 801142e:	4602      	mov	r2, r0
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	429a      	cmp	r2, r3
 8011438:	d302      	bcc.n	8011440 <UART_WaitOnFlagUntilTimeout+0x30>
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011440:	2303      	movs	r3, #3
 8011442:	e04e      	b.n	80114e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f003 0304 	and.w	r3, r3, #4
 801144e:	2b00      	cmp	r3, #0
 8011450:	d037      	beq.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2b80      	cmp	r3, #128	@ 0x80
 8011456:	d034      	beq.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	2b40      	cmp	r3, #64	@ 0x40
 801145c:	d031      	beq.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69db      	ldr	r3, [r3, #28]
 8011464:	f003 0308 	and.w	r3, r3, #8
 8011468:	2b08      	cmp	r3, #8
 801146a:	d110      	bne.n	801148e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2208      	movs	r2, #8
 8011472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f000 f839 	bl	80114ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2208      	movs	r2, #8
 801147e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	e029      	b.n	80114e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	69db      	ldr	r3, [r3, #28]
 8011494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801149c:	d111      	bne.n	80114c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80114a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f000 f81f 	bl	80114ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2220      	movs	r2, #32
 80114b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2200      	movs	r2, #0
 80114ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80114be:	2303      	movs	r3, #3
 80114c0:	e00f      	b.n	80114e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	69da      	ldr	r2, [r3, #28]
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	4013      	ands	r3, r2
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	bf0c      	ite	eq
 80114d2:	2301      	moveq	r3, #1
 80114d4:	2300      	movne	r3, #0
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	461a      	mov	r2, r3
 80114da:	79fb      	ldrb	r3, [r7, #7]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d0a0      	beq.n	8011422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
	...

080114ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b095      	sub	sp, #84	@ 0x54
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114fc:	e853 3f00 	ldrex	r3, [r3]
 8011500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	461a      	mov	r2, r3
 8011510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011512:	643b      	str	r3, [r7, #64]	@ 0x40
 8011514:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801151a:	e841 2300 	strex	r3, r2, [r1]
 801151e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1e6      	bne.n	80114f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3308      	adds	r3, #8
 801152c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801152e:	6a3b      	ldr	r3, [r7, #32]
 8011530:	e853 3f00 	ldrex	r3, [r3]
 8011534:	61fb      	str	r3, [r7, #28]
   return(result);
 8011536:	69fa      	ldr	r2, [r7, #28]
 8011538:	4b1e      	ldr	r3, [pc, #120]	@ (80115b4 <UART_EndRxTransfer+0xc8>)
 801153a:	4013      	ands	r3, r2
 801153c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3308      	adds	r3, #8
 8011544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801154a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801154c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801154e:	e841 2300 	strex	r3, r2, [r1]
 8011552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1e5      	bne.n	8011526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801155e:	2b01      	cmp	r3, #1
 8011560:	d118      	bne.n	8011594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	e853 3f00 	ldrex	r3, [r3]
 801156e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	f023 0310 	bic.w	r3, r3, #16
 8011576:	647b      	str	r3, [r7, #68]	@ 0x44
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	461a      	mov	r2, r3
 801157e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011584:	6979      	ldr	r1, [r7, #20]
 8011586:	69ba      	ldr	r2, [r7, #24]
 8011588:	e841 2300 	strex	r3, r2, [r1]
 801158c:	613b      	str	r3, [r7, #16]
   return(result);
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1e6      	bne.n	8011562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2220      	movs	r2, #32
 8011598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80115a8:	bf00      	nop
 80115aa:	3754      	adds	r7, #84	@ 0x54
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr
 80115b4:	effffffe 	.word	0xeffffffe

080115b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d101      	bne.n	80115ce <HAL_UARTEx_DisableFifoMode+0x16>
 80115ca:	2302      	movs	r3, #2
 80115cc:	e027      	b.n	801161e <HAL_UARTEx_DisableFifoMode+0x66>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2224      	movs	r2, #36	@ 0x24
 80115da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f022 0201 	bic.w	r2, r2, #1
 80115f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80115fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2200      	movs	r2, #0
 8011602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2220      	movs	r2, #32
 8011610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801161c:	2300      	movs	r3, #0
}
 801161e:	4618      	mov	r0, r3
 8011620:	3714      	adds	r7, #20
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr

0801162a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b084      	sub	sp, #16
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801163a:	2b01      	cmp	r3, #1
 801163c:	d101      	bne.n	8011642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801163e:	2302      	movs	r3, #2
 8011640:	e02d      	b.n	801169e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2224      	movs	r2, #36	@ 0x24
 801164e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f022 0201 	bic.w	r2, r2, #1
 8011668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	683a      	ldr	r2, [r7, #0]
 801167a:	430a      	orrs	r2, r1
 801167c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f000 f850 	bl	8011724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2220      	movs	r2, #32
 8011690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b084      	sub	sp, #16
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d101      	bne.n	80116be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80116ba:	2302      	movs	r3, #2
 80116bc:	e02d      	b.n	801171a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2224      	movs	r2, #36	@ 0x24
 80116ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f022 0201 	bic.w	r2, r2, #1
 80116e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	683a      	ldr	r2, [r7, #0]
 80116f6:	430a      	orrs	r2, r1
 80116f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 f812 	bl	8011724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2220      	movs	r2, #32
 801170c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3710      	adds	r7, #16
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
	...

08011724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011730:	2b00      	cmp	r3, #0
 8011732:	d108      	bne.n	8011746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2201      	movs	r2, #1
 8011740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011744:	e031      	b.n	80117aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011746:	2310      	movs	r3, #16
 8011748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801174a:	2310      	movs	r3, #16
 801174c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	0e5b      	lsrs	r3, r3, #25
 8011756:	b2db      	uxtb	r3, r3
 8011758:	f003 0307 	and.w	r3, r3, #7
 801175c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	0f5b      	lsrs	r3, r3, #29
 8011766:	b2db      	uxtb	r3, r3
 8011768:	f003 0307 	and.w	r3, r3, #7
 801176c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801176e:	7bbb      	ldrb	r3, [r7, #14]
 8011770:	7b3a      	ldrb	r2, [r7, #12]
 8011772:	4911      	ldr	r1, [pc, #68]	@ (80117b8 <UARTEx_SetNbDataToProcess+0x94>)
 8011774:	5c8a      	ldrb	r2, [r1, r2]
 8011776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801177a:	7b3a      	ldrb	r2, [r7, #12]
 801177c:	490f      	ldr	r1, [pc, #60]	@ (80117bc <UARTEx_SetNbDataToProcess+0x98>)
 801177e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011780:	fb93 f3f2 	sdiv	r3, r3, r2
 8011784:	b29a      	uxth	r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801178c:	7bfb      	ldrb	r3, [r7, #15]
 801178e:	7b7a      	ldrb	r2, [r7, #13]
 8011790:	4909      	ldr	r1, [pc, #36]	@ (80117b8 <UARTEx_SetNbDataToProcess+0x94>)
 8011792:	5c8a      	ldrb	r2, [r1, r2]
 8011794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011798:	7b7a      	ldrb	r2, [r7, #13]
 801179a:	4908      	ldr	r1, [pc, #32]	@ (80117bc <UARTEx_SetNbDataToProcess+0x98>)
 801179c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801179e:	fb93 f3f2 	sdiv	r3, r3, r2
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80117aa:	bf00      	nop
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	0801ab08 	.word	0x0801ab08
 80117bc:	0801ab10 	.word	0x0801ab10

080117c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80117c0:	b084      	sub	sp, #16
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b084      	sub	sp, #16
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	f107 001c 	add.w	r0, r7, #28
 80117ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80117d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d121      	bne.n	801181e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	68da      	ldr	r2, [r3, #12]
 80117ea:	4b2c      	ldr	r3, [pc, #176]	@ (801189c <USB_CoreInit+0xdc>)
 80117ec:	4013      	ands	r3, r2
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80117fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011802:	2b01      	cmp	r3, #1
 8011804:	d105      	bne.n	8011812 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f001 faf6 	bl	8012e04 <USB_CoreReset>
 8011818:	4603      	mov	r3, r0
 801181a:	73fb      	strb	r3, [r7, #15]
 801181c:	e01b      	b.n	8011856 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f001 faea 	bl	8012e04 <USB_CoreReset>
 8011830:	4603      	mov	r3, r0
 8011832:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011834:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011838:	2b00      	cmp	r3, #0
 801183a:	d106      	bne.n	801184a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011840:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	639a      	str	r2, [r3, #56]	@ 0x38
 8011848:	e005      	b.n	8011856 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011856:	7fbb      	ldrb	r3, [r7, #30]
 8011858:	2b01      	cmp	r3, #1
 801185a:	d116      	bne.n	801188a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011860:	b29a      	uxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801186a:	4b0d      	ldr	r3, [pc, #52]	@ (80118a0 <USB_CoreInit+0xe0>)
 801186c:	4313      	orrs	r3, r2
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	f043 0206 	orr.w	r2, r3, #6
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	f043 0220 	orr.w	r2, r3, #32
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801188a:	7bfb      	ldrb	r3, [r7, #15]
}
 801188c:	4618      	mov	r0, r3
 801188e:	3710      	adds	r7, #16
 8011890:	46bd      	mov	sp, r7
 8011892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011896:	b004      	add	sp, #16
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	ffbdffbf 	.word	0xffbdffbf
 80118a0:	03ee0000 	.word	0x03ee0000

080118a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4613      	mov	r3, r2
 80118b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80118b2:	79fb      	ldrb	r3, [r7, #7]
 80118b4:	2b02      	cmp	r3, #2
 80118b6:	d165      	bne.n	8011984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	4a41      	ldr	r2, [pc, #260]	@ (80119c0 <USB_SetTurnaroundTime+0x11c>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d906      	bls.n	80118ce <USB_SetTurnaroundTime+0x2a>
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	4a40      	ldr	r2, [pc, #256]	@ (80119c4 <USB_SetTurnaroundTime+0x120>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d202      	bcs.n	80118ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80118c8:	230f      	movs	r3, #15
 80118ca:	617b      	str	r3, [r7, #20]
 80118cc:	e062      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	4a3c      	ldr	r2, [pc, #240]	@ (80119c4 <USB_SetTurnaroundTime+0x120>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d306      	bcc.n	80118e4 <USB_SetTurnaroundTime+0x40>
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	4a3b      	ldr	r2, [pc, #236]	@ (80119c8 <USB_SetTurnaroundTime+0x124>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d202      	bcs.n	80118e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80118de:	230e      	movs	r3, #14
 80118e0:	617b      	str	r3, [r7, #20]
 80118e2:	e057      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	4a38      	ldr	r2, [pc, #224]	@ (80119c8 <USB_SetTurnaroundTime+0x124>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d306      	bcc.n	80118fa <USB_SetTurnaroundTime+0x56>
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	4a37      	ldr	r2, [pc, #220]	@ (80119cc <USB_SetTurnaroundTime+0x128>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d202      	bcs.n	80118fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80118f4:	230d      	movs	r3, #13
 80118f6:	617b      	str	r3, [r7, #20]
 80118f8:	e04c      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	4a33      	ldr	r2, [pc, #204]	@ (80119cc <USB_SetTurnaroundTime+0x128>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d306      	bcc.n	8011910 <USB_SetTurnaroundTime+0x6c>
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	4a32      	ldr	r2, [pc, #200]	@ (80119d0 <USB_SetTurnaroundTime+0x12c>)
 8011906:	4293      	cmp	r3, r2
 8011908:	d802      	bhi.n	8011910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801190a:	230c      	movs	r3, #12
 801190c:	617b      	str	r3, [r7, #20]
 801190e:	e041      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	4a2f      	ldr	r2, [pc, #188]	@ (80119d0 <USB_SetTurnaroundTime+0x12c>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d906      	bls.n	8011926 <USB_SetTurnaroundTime+0x82>
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	4a2e      	ldr	r2, [pc, #184]	@ (80119d4 <USB_SetTurnaroundTime+0x130>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d802      	bhi.n	8011926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011920:	230b      	movs	r3, #11
 8011922:	617b      	str	r3, [r7, #20]
 8011924:	e036      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	4a2a      	ldr	r2, [pc, #168]	@ (80119d4 <USB_SetTurnaroundTime+0x130>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d906      	bls.n	801193c <USB_SetTurnaroundTime+0x98>
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	4a29      	ldr	r2, [pc, #164]	@ (80119d8 <USB_SetTurnaroundTime+0x134>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d802      	bhi.n	801193c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011936:	230a      	movs	r3, #10
 8011938:	617b      	str	r3, [r7, #20]
 801193a:	e02b      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	4a26      	ldr	r2, [pc, #152]	@ (80119d8 <USB_SetTurnaroundTime+0x134>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d906      	bls.n	8011952 <USB_SetTurnaroundTime+0xae>
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	4a25      	ldr	r2, [pc, #148]	@ (80119dc <USB_SetTurnaroundTime+0x138>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d202      	bcs.n	8011952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801194c:	2309      	movs	r3, #9
 801194e:	617b      	str	r3, [r7, #20]
 8011950:	e020      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	4a21      	ldr	r2, [pc, #132]	@ (80119dc <USB_SetTurnaroundTime+0x138>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d306      	bcc.n	8011968 <USB_SetTurnaroundTime+0xc4>
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	4a20      	ldr	r2, [pc, #128]	@ (80119e0 <USB_SetTurnaroundTime+0x13c>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d802      	bhi.n	8011968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011962:	2308      	movs	r3, #8
 8011964:	617b      	str	r3, [r7, #20]
 8011966:	e015      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	4a1d      	ldr	r2, [pc, #116]	@ (80119e0 <USB_SetTurnaroundTime+0x13c>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d906      	bls.n	801197e <USB_SetTurnaroundTime+0xda>
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	4a1c      	ldr	r2, [pc, #112]	@ (80119e4 <USB_SetTurnaroundTime+0x140>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d202      	bcs.n	801197e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011978:	2307      	movs	r3, #7
 801197a:	617b      	str	r3, [r7, #20]
 801197c:	e00a      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801197e:	2306      	movs	r3, #6
 8011980:	617b      	str	r3, [r7, #20]
 8011982:	e007      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011984:	79fb      	ldrb	r3, [r7, #7]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d102      	bne.n	8011990 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801198a:	2309      	movs	r3, #9
 801198c:	617b      	str	r3, [r7, #20]
 801198e:	e001      	b.n	8011994 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011990:	2309      	movs	r3, #9
 8011992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	68da      	ldr	r2, [r3, #12]
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	029b      	lsls	r3, r3, #10
 80119a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80119ac:	431a      	orrs	r2, r3
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	371c      	adds	r7, #28
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	00d8acbf 	.word	0x00d8acbf
 80119c4:	00e4e1c0 	.word	0x00e4e1c0
 80119c8:	00f42400 	.word	0x00f42400
 80119cc:	01067380 	.word	0x01067380
 80119d0:	011a499f 	.word	0x011a499f
 80119d4:	01312cff 	.word	0x01312cff
 80119d8:	014ca43f 	.word	0x014ca43f
 80119dc:	016e3600 	.word	0x016e3600
 80119e0:	01a6ab1f 	.word	0x01a6ab1f
 80119e4:	01e84800 	.word	0x01e84800

080119e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	f043 0201 	orr.w	r2, r3, #1
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b083      	sub	sp, #12
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	f023 0201 	bic.w	r2, r3, #1
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	460b      	mov	r3, r1
 8011a36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	d115      	bne.n	8011a7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011a5a:	200a      	movs	r0, #10
 8011a5c:	f7f3 fad8 	bl	8005010 <HAL_Delay>
      ms += 10U;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	330a      	adds	r3, #10
 8011a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f001 f93b 	bl	8012ce2 <USB_GetMode>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d01e      	beq.n	8011ab0 <USB_SetCurrentMode+0x84>
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2bc7      	cmp	r3, #199	@ 0xc7
 8011a76:	d9f0      	bls.n	8011a5a <USB_SetCurrentMode+0x2e>
 8011a78:	e01a      	b.n	8011ab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011a7a:	78fb      	ldrb	r3, [r7, #3]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d115      	bne.n	8011aac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011a8c:	200a      	movs	r0, #10
 8011a8e:	f7f3 fabf 	bl	8005010 <HAL_Delay>
      ms += 10U;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	330a      	adds	r3, #10
 8011a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f001 f922 	bl	8012ce2 <USB_GetMode>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d005      	beq.n	8011ab0 <USB_SetCurrentMode+0x84>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2bc7      	cmp	r3, #199	@ 0xc7
 8011aa8:	d9f0      	bls.n	8011a8c <USB_SetCurrentMode+0x60>
 8011aaa:	e001      	b.n	8011ab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011aac:	2301      	movs	r3, #1
 8011aae:	e005      	b.n	8011abc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2bc8      	cmp	r3, #200	@ 0xc8
 8011ab4:	d101      	bne.n	8011aba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e000      	b.n	8011abc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011aba:	2300      	movs	r3, #0
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ac4:	b084      	sub	sp, #16
 8011ac6:	b580      	push	{r7, lr}
 8011ac8:	b086      	sub	sp, #24
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011ade:	2300      	movs	r3, #0
 8011ae0:	613b      	str	r3, [r7, #16]
 8011ae2:	e009      	b.n	8011af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	3340      	adds	r3, #64	@ 0x40
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	2200      	movs	r2, #0
 8011af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	3301      	adds	r3, #1
 8011af6:	613b      	str	r3, [r7, #16]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	2b0e      	cmp	r3, #14
 8011afc:	d9f2      	bls.n	8011ae4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011afe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d11c      	bne.n	8011b40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011b14:	f043 0302 	orr.w	r3, r3, #2
 8011b18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	601a      	str	r2, [r3, #0]
 8011b3e:	e005      	b.n	8011b4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011b52:	461a      	mov	r2, r3
 8011b54:	2300      	movs	r3, #0
 8011b56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011b58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d10d      	bne.n	8011b7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d104      	bne.n	8011b72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011b68:	2100      	movs	r1, #0
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 f968 	bl	8011e40 <USB_SetDevSpeed>
 8011b70:	e008      	b.n	8011b84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011b72:	2101      	movs	r1, #1
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f963 	bl	8011e40 <USB_SetDevSpeed>
 8011b7a:	e003      	b.n	8011b84 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011b7c:	2103      	movs	r1, #3
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 f95e 	bl	8011e40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011b84:	2110      	movs	r1, #16
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 f8fa 	bl	8011d80 <USB_FlushTxFifo>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d001      	beq.n	8011b96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8011b92:	2301      	movs	r3, #1
 8011b94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 f924 	bl	8011de4 <USB_FlushRxFifo>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d001      	beq.n	8011ba6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bac:	461a      	mov	r2, r3
 8011bae:	2300      	movs	r3, #0
 8011bb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bb8:	461a      	mov	r2, r3
 8011bba:	2300      	movs	r3, #0
 8011bbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011bca:	2300      	movs	r3, #0
 8011bcc:	613b      	str	r3, [r7, #16]
 8011bce:	e043      	b.n	8011c58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	015a      	lsls	r2, r3, #5
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011be2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011be6:	d118      	bne.n	8011c1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d10a      	bne.n	8011c04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	015a      	lsls	r2, r3, #5
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011c00:	6013      	str	r3, [r2, #0]
 8011c02:	e013      	b.n	8011c2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	015a      	lsls	r2, r3, #5
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	4413      	add	r3, r2
 8011c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c10:	461a      	mov	r2, r3
 8011c12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	e008      	b.n	8011c2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	015a      	lsls	r2, r3, #5
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	4413      	add	r3, r2
 8011c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c26:	461a      	mov	r2, r3
 8011c28:	2300      	movs	r3, #0
 8011c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	015a      	lsls	r2, r3, #5
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4413      	add	r3, r2
 8011c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c38:	461a      	mov	r2, r3
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	015a      	lsls	r2, r3, #5
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	4413      	add	r3, r2
 8011c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011c50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	3301      	adds	r3, #1
 8011c56:	613b      	str	r3, [r7, #16]
 8011c58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d3b5      	bcc.n	8011bd0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011c64:	2300      	movs	r3, #0
 8011c66:	613b      	str	r3, [r7, #16]
 8011c68:	e043      	b.n	8011cf2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	015a      	lsls	r2, r3, #5
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	4413      	add	r3, r2
 8011c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c80:	d118      	bne.n	8011cb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10a      	bne.n	8011c9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	015a      	lsls	r2, r3, #5
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	4413      	add	r3, r2
 8011c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c94:	461a      	mov	r2, r3
 8011c96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011c9a:	6013      	str	r3, [r2, #0]
 8011c9c:	e013      	b.n	8011cc6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	015a      	lsls	r2, r3, #5
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011caa:	461a      	mov	r2, r3
 8011cac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	e008      	b.n	8011cc6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	015a      	lsls	r2, r3, #5
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	4413      	add	r3, r2
 8011cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	015a      	lsls	r2, r3, #5
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	4413      	add	r3, r2
 8011cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	015a      	lsls	r2, r3, #5
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	4413      	add	r3, r2
 8011ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011cea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	3301      	adds	r3, #1
 8011cf0:	613b      	str	r3, [r7, #16]
 8011cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d3b5      	bcc.n	8011c6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	68fa      	ldr	r2, [r7, #12]
 8011d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011d1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011d20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d105      	bne.n	8011d34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	699b      	ldr	r3, [r3, #24]
 8011d2c:	f043 0210 	orr.w	r2, r3, #16
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	699a      	ldr	r2, [r3, #24]
 8011d38:	4b0f      	ldr	r3, [pc, #60]	@ (8011d78 <USB_DevInit+0x2b4>)
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011d40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d005      	beq.n	8011d54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	699b      	ldr	r3, [r3, #24]
 8011d4c:	f043 0208 	orr.w	r2, r3, #8
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011d54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d105      	bne.n	8011d68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	699a      	ldr	r2, [r3, #24]
 8011d60:	4b06      	ldr	r3, [pc, #24]	@ (8011d7c <USB_DevInit+0x2b8>)
 8011d62:	4313      	orrs	r3, r2
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d74:	b004      	add	sp, #16
 8011d76:	4770      	bx	lr
 8011d78:	803c3800 	.word	0x803c3800
 8011d7c:	40000004 	.word	0x40000004

08011d80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	3301      	adds	r3, #1
 8011d92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d9a:	d901      	bls.n	8011da0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	e01b      	b.n	8011dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	691b      	ldr	r3, [r3, #16]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	daf2      	bge.n	8011d8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011da8:	2300      	movs	r3, #0
 8011daa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	019b      	lsls	r3, r3, #6
 8011db0:	f043 0220 	orr.w	r2, r3, #32
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011dc4:	d901      	bls.n	8011dca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e006      	b.n	8011dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	691b      	ldr	r3, [r3, #16]
 8011dce:	f003 0320 	and.w	r3, r3, #32
 8011dd2:	2b20      	cmp	r3, #32
 8011dd4:	d0f0      	beq.n	8011db8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011dec:	2300      	movs	r3, #0
 8011dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	3301      	adds	r3, #1
 8011df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011dfc:	d901      	bls.n	8011e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	e018      	b.n	8011e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	daf2      	bge.n	8011df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2210      	movs	r2, #16
 8011e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	3301      	adds	r3, #1
 8011e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011e20:	d901      	bls.n	8011e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011e22:	2303      	movs	r3, #3
 8011e24:	e006      	b.n	8011e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	691b      	ldr	r3, [r3, #16]
 8011e2a:	f003 0310 	and.w	r3, r3, #16
 8011e2e:	2b10      	cmp	r3, #16
 8011e30:	d0f0      	beq.n	8011e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011e32:	2300      	movs	r3, #0
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	78fb      	ldrb	r3, [r7, #3]
 8011e5a:	68f9      	ldr	r1, [r7, #12]
 8011e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011e60:	4313      	orrs	r3, r2
 8011e62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3714      	adds	r7, #20
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011e72:	b480      	push	{r7}
 8011e74:	b087      	sub	sp, #28
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	f003 0306 	and.w	r3, r3, #6
 8011e8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d102      	bne.n	8011e98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011e92:	2300      	movs	r3, #0
 8011e94:	75fb      	strb	r3, [r7, #23]
 8011e96:	e00a      	b.n	8011eae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d002      	beq.n	8011ea4 <USB_GetDevSpeed+0x32>
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2b06      	cmp	r3, #6
 8011ea2:	d102      	bne.n	8011eaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011ea4:	2302      	movs	r3, #2
 8011ea6:	75fb      	strb	r3, [r7, #23]
 8011ea8:	e001      	b.n	8011eae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011eaa:	230f      	movs	r3, #15
 8011eac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	371c      	adds	r7, #28
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b085      	sub	sp, #20
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	785b      	ldrb	r3, [r3, #1]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d139      	bne.n	8011f4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ede:	69da      	ldr	r2, [r3, #28]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f003 030f 	and.w	r3, r3, #15
 8011ee8:	2101      	movs	r1, #1
 8011eea:	fa01 f303 	lsl.w	r3, r1, r3
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	68f9      	ldr	r1, [r7, #12]
 8011ef2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	015a      	lsls	r2, r3, #5
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	4413      	add	r3, r2
 8011f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d153      	bne.n	8011fb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	015a      	lsls	r2, r3, #5
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	4413      	add	r3, r2
 8011f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	791b      	ldrb	r3, [r3, #4]
 8011f2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011f2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	059b      	lsls	r3, r3, #22
 8011f32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011f34:	431a      	orrs	r2, r3
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	0159      	lsls	r1, r3, #5
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	440b      	add	r3, r1
 8011f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f42:	4619      	mov	r1, r3
 8011f44:	4b20      	ldr	r3, [pc, #128]	@ (8011fc8 <USB_ActivateEndpoint+0x10c>)
 8011f46:	4313      	orrs	r3, r2
 8011f48:	600b      	str	r3, [r1, #0]
 8011f4a:	e035      	b.n	8011fb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f52:	69da      	ldr	r2, [r3, #28]
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	f003 030f 	and.w	r3, r3, #15
 8011f5c:	2101      	movs	r1, #1
 8011f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8011f62:	041b      	lsls	r3, r3, #16
 8011f64:	68f9      	ldr	r1, [r7, #12]
 8011f66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	015a      	lsls	r2, r3, #5
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	4413      	add	r3, r2
 8011f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d119      	bne.n	8011fb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	015a      	lsls	r2, r3, #5
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011fa0:	430b      	orrs	r3, r1
 8011fa2:	431a      	orrs	r2, r3
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	0159      	lsls	r1, r3, #5
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	440b      	add	r3, r1
 8011fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	4b05      	ldr	r3, [pc, #20]	@ (8011fc8 <USB_ActivateEndpoint+0x10c>)
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3714      	adds	r7, #20
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	10008000 	.word	0x10008000

08011fcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	785b      	ldrb	r3, [r3, #1]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d161      	bne.n	80120ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ffe:	d11f      	bne.n	8012040 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	015a      	lsls	r2, r3, #5
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	4413      	add	r3, r2
 8012008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	68ba      	ldr	r2, [r7, #8]
 8012010:	0151      	lsls	r1, r2, #5
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	440a      	add	r2, r1
 8012016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801201a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801201e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	015a      	lsls	r2, r3, #5
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	4413      	add	r3, r2
 8012028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	0151      	lsls	r1, r2, #5
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	440a      	add	r2, r1
 8012036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801203a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801203e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	f003 030f 	and.w	r3, r3, #15
 8012050:	2101      	movs	r1, #1
 8012052:	fa01 f303 	lsl.w	r3, r1, r3
 8012056:	b29b      	uxth	r3, r3
 8012058:	43db      	mvns	r3, r3
 801205a:	68f9      	ldr	r1, [r7, #12]
 801205c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012060:	4013      	ands	r3, r2
 8012062:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801206a:	69da      	ldr	r2, [r3, #28]
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	f003 030f 	and.w	r3, r3, #15
 8012074:	2101      	movs	r1, #1
 8012076:	fa01 f303 	lsl.w	r3, r1, r3
 801207a:	b29b      	uxth	r3, r3
 801207c:	43db      	mvns	r3, r3
 801207e:	68f9      	ldr	r1, [r7, #12]
 8012080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012084:	4013      	ands	r3, r2
 8012086:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	0159      	lsls	r1, r3, #5
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	440b      	add	r3, r1
 801209e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120a2:	4619      	mov	r1, r3
 80120a4:	4b35      	ldr	r3, [pc, #212]	@ (801217c <USB_DeactivateEndpoint+0x1b0>)
 80120a6:	4013      	ands	r3, r2
 80120a8:	600b      	str	r3, [r1, #0]
 80120aa:	e060      	b.n	801216e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120c2:	d11f      	bne.n	8012104 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	015a      	lsls	r2, r3, #5
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	4413      	add	r3, r2
 80120cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	68ba      	ldr	r2, [r7, #8]
 80120d4:	0151      	lsls	r1, r2, #5
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	440a      	add	r2, r1
 80120da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80120e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	0151      	lsls	r1, r2, #5
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	440a      	add	r2, r1
 80120fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801210a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	f003 030f 	and.w	r3, r3, #15
 8012114:	2101      	movs	r1, #1
 8012116:	fa01 f303 	lsl.w	r3, r1, r3
 801211a:	041b      	lsls	r3, r3, #16
 801211c:	43db      	mvns	r3, r3
 801211e:	68f9      	ldr	r1, [r7, #12]
 8012120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012124:	4013      	ands	r3, r2
 8012126:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801212e:	69da      	ldr	r2, [r3, #28]
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	f003 030f 	and.w	r3, r3, #15
 8012138:	2101      	movs	r1, #1
 801213a:	fa01 f303 	lsl.w	r3, r1, r3
 801213e:	041b      	lsls	r3, r3, #16
 8012140:	43db      	mvns	r3, r3
 8012142:	68f9      	ldr	r1, [r7, #12]
 8012144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012148:	4013      	ands	r3, r2
 801214a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	0159      	lsls	r1, r3, #5
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	440b      	add	r3, r1
 8012162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012166:	4619      	mov	r1, r3
 8012168:	4b05      	ldr	r3, [pc, #20]	@ (8012180 <USB_DeactivateEndpoint+0x1b4>)
 801216a:	4013      	ands	r3, r2
 801216c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3714      	adds	r7, #20
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	ec337800 	.word	0xec337800
 8012180:	eff37800 	.word	0xeff37800

08012184 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b08a      	sub	sp, #40	@ 0x28
 8012188:	af02      	add	r7, sp, #8
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	4613      	mov	r3, r2
 8012190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	785b      	ldrb	r3, [r3, #1]
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	f040 8181 	bne.w	80124a8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d132      	bne.n	8012214 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	015a      	lsls	r2, r3, #5
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	4413      	add	r3, r2
 80121b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121ba:	691a      	ldr	r2, [r3, #16]
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	0159      	lsls	r1, r3, #5
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	440b      	add	r3, r1
 80121c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121c8:	4619      	mov	r1, r3
 80121ca:	4ba5      	ldr	r3, [pc, #660]	@ (8012460 <USB_EPStartXfer+0x2dc>)
 80121cc:	4013      	ands	r3, r2
 80121ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	015a      	lsls	r2, r3, #5
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	4413      	add	r3, r2
 80121d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	69ba      	ldr	r2, [r7, #24]
 80121e0:	0151      	lsls	r1, r2, #5
 80121e2:	69fa      	ldr	r2, [r7, #28]
 80121e4:	440a      	add	r2, r1
 80121e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80121ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80121ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	015a      	lsls	r2, r3, #5
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	4413      	add	r3, r2
 80121f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121fc:	691a      	ldr	r2, [r3, #16]
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	0159      	lsls	r1, r3, #5
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	440b      	add	r3, r1
 8012206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801220a:	4619      	mov	r1, r3
 801220c:	4b95      	ldr	r3, [pc, #596]	@ (8012464 <USB_EPStartXfer+0x2e0>)
 801220e:	4013      	ands	r3, r2
 8012210:	610b      	str	r3, [r1, #16]
 8012212:	e092      	b.n	801233a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	015a      	lsls	r2, r3, #5
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	4413      	add	r3, r2
 801221c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012220:	691a      	ldr	r2, [r3, #16]
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	0159      	lsls	r1, r3, #5
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	440b      	add	r3, r1
 801222a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801222e:	4619      	mov	r1, r3
 8012230:	4b8c      	ldr	r3, [pc, #560]	@ (8012464 <USB_EPStartXfer+0x2e0>)
 8012232:	4013      	ands	r3, r2
 8012234:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	015a      	lsls	r2, r3, #5
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	4413      	add	r3, r2
 801223e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012242:	691a      	ldr	r2, [r3, #16]
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	0159      	lsls	r1, r3, #5
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	440b      	add	r3, r1
 801224c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012250:	4619      	mov	r1, r3
 8012252:	4b83      	ldr	r3, [pc, #524]	@ (8012460 <USB_EPStartXfer+0x2dc>)
 8012254:	4013      	ands	r3, r2
 8012256:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d11a      	bne.n	8012294 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	691a      	ldr	r2, [r3, #16]
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	429a      	cmp	r2, r3
 8012268:	d903      	bls.n	8012272 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	689a      	ldr	r2, [r3, #8]
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	015a      	lsls	r2, r3, #5
 8012276:	69fb      	ldr	r3, [r7, #28]
 8012278:	4413      	add	r3, r2
 801227a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801227e:	691b      	ldr	r3, [r3, #16]
 8012280:	69ba      	ldr	r2, [r7, #24]
 8012282:	0151      	lsls	r1, r2, #5
 8012284:	69fa      	ldr	r2, [r7, #28]
 8012286:	440a      	add	r2, r1
 8012288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801228c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012290:	6113      	str	r3, [r2, #16]
 8012292:	e01b      	b.n	80122cc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	015a      	lsls	r2, r3, #5
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	4413      	add	r3, r2
 801229c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	6919      	ldr	r1, [r3, #16]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	689b      	ldr	r3, [r3, #8]
 80122aa:	440b      	add	r3, r1
 80122ac:	1e59      	subs	r1, r3, #1
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	689b      	ldr	r3, [r3, #8]
 80122b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80122b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80122b8:	4b6b      	ldr	r3, [pc, #428]	@ (8012468 <USB_EPStartXfer+0x2e4>)
 80122ba:	400b      	ands	r3, r1
 80122bc:	69b9      	ldr	r1, [r7, #24]
 80122be:	0148      	lsls	r0, r1, #5
 80122c0:	69f9      	ldr	r1, [r7, #28]
 80122c2:	4401      	add	r1, r0
 80122c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80122c8:	4313      	orrs	r3, r2
 80122ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	015a      	lsls	r2, r3, #5
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	4413      	add	r3, r2
 80122d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122d8:	691a      	ldr	r2, [r3, #16]
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80122e2:	69b9      	ldr	r1, [r7, #24]
 80122e4:	0148      	lsls	r0, r1, #5
 80122e6:	69f9      	ldr	r1, [r7, #28]
 80122e8:	4401      	add	r1, r0
 80122ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80122ee:	4313      	orrs	r3, r2
 80122f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	791b      	ldrb	r3, [r3, #4]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d11f      	bne.n	801233a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	015a      	lsls	r2, r3, #5
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	4413      	add	r3, r2
 8012302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	69ba      	ldr	r2, [r7, #24]
 801230a:	0151      	lsls	r1, r2, #5
 801230c:	69fa      	ldr	r2, [r7, #28]
 801230e:	440a      	add	r2, r1
 8012310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012314:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8012318:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	015a      	lsls	r2, r3, #5
 801231e:	69fb      	ldr	r3, [r7, #28]
 8012320:	4413      	add	r3, r2
 8012322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012326:	691b      	ldr	r3, [r3, #16]
 8012328:	69ba      	ldr	r2, [r7, #24]
 801232a:	0151      	lsls	r1, r2, #5
 801232c:	69fa      	ldr	r2, [r7, #28]
 801232e:	440a      	add	r2, r1
 8012330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012334:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012338:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801233a:	79fb      	ldrb	r3, [r7, #7]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d14b      	bne.n	80123d8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d009      	beq.n	801235c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	015a      	lsls	r2, r3, #5
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	4413      	add	r3, r2
 8012350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012354:	461a      	mov	r2, r3
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	69db      	ldr	r3, [r3, #28]
 801235a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	791b      	ldrb	r3, [r3, #4]
 8012360:	2b01      	cmp	r3, #1
 8012362:	d128      	bne.n	80123b6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012370:	2b00      	cmp	r3, #0
 8012372:	d110      	bne.n	8012396 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	015a      	lsls	r2, r3, #5
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	4413      	add	r3, r2
 801237c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	69ba      	ldr	r2, [r7, #24]
 8012384:	0151      	lsls	r1, r2, #5
 8012386:	69fa      	ldr	r2, [r7, #28]
 8012388:	440a      	add	r2, r1
 801238a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801238e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012392:	6013      	str	r3, [r2, #0]
 8012394:	e00f      	b.n	80123b6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	015a      	lsls	r2, r3, #5
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	4413      	add	r3, r2
 801239e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	69ba      	ldr	r2, [r7, #24]
 80123a6:	0151      	lsls	r1, r2, #5
 80123a8:	69fa      	ldr	r2, [r7, #28]
 80123aa:	440a      	add	r2, r1
 80123ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80123b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	015a      	lsls	r2, r3, #5
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	4413      	add	r3, r2
 80123be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	69ba      	ldr	r2, [r7, #24]
 80123c6:	0151      	lsls	r1, r2, #5
 80123c8:	69fa      	ldr	r2, [r7, #28]
 80123ca:	440a      	add	r2, r1
 80123cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80123d4:	6013      	str	r3, [r2, #0]
 80123d6:	e16a      	b.n	80126ae <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	015a      	lsls	r2, r3, #5
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	4413      	add	r3, r2
 80123e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	69ba      	ldr	r2, [r7, #24]
 80123e8:	0151      	lsls	r1, r2, #5
 80123ea:	69fa      	ldr	r2, [r7, #28]
 80123ec:	440a      	add	r2, r1
 80123ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80123f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	791b      	ldrb	r3, [r3, #4]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d015      	beq.n	801242c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 8152 	beq.w	80126ae <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f003 030f 	and.w	r3, r3, #15
 801241a:	2101      	movs	r1, #1
 801241c:	fa01 f303 	lsl.w	r3, r1, r3
 8012420:	69f9      	ldr	r1, [r7, #28]
 8012422:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012426:	4313      	orrs	r3, r2
 8012428:	634b      	str	r3, [r1, #52]	@ 0x34
 801242a:	e140      	b.n	80126ae <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012438:	2b00      	cmp	r3, #0
 801243a:	d117      	bne.n	801246c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	69ba      	ldr	r2, [r7, #24]
 801244c:	0151      	lsls	r1, r2, #5
 801244e:	69fa      	ldr	r2, [r7, #28]
 8012450:	440a      	add	r2, r1
 8012452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012456:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	e016      	b.n	801248c <USB_EPStartXfer+0x308>
 801245e:	bf00      	nop
 8012460:	e007ffff 	.word	0xe007ffff
 8012464:	fff80000 	.word	0xfff80000
 8012468:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	015a      	lsls	r2, r3, #5
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	4413      	add	r3, r2
 8012474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	69ba      	ldr	r2, [r7, #24]
 801247c:	0151      	lsls	r1, r2, #5
 801247e:	69fa      	ldr	r2, [r7, #28]
 8012480:	440a      	add	r2, r1
 8012482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801248a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	68d9      	ldr	r1, [r3, #12]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	781a      	ldrb	r2, [r3, #0]
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	691b      	ldr	r3, [r3, #16]
 8012498:	b298      	uxth	r0, r3
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	4603      	mov	r3, r0
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f000 f9b9 	bl	8012818 <USB_WritePacket>
 80124a6:	e102      	b.n	80126ae <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	015a      	lsls	r2, r3, #5
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	4413      	add	r3, r2
 80124b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124b4:	691a      	ldr	r2, [r3, #16]
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	0159      	lsls	r1, r3, #5
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	440b      	add	r3, r1
 80124be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124c2:	4619      	mov	r1, r3
 80124c4:	4b7c      	ldr	r3, [pc, #496]	@ (80126b8 <USB_EPStartXfer+0x534>)
 80124c6:	4013      	ands	r3, r2
 80124c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	015a      	lsls	r2, r3, #5
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	4413      	add	r3, r2
 80124d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124d6:	691a      	ldr	r2, [r3, #16]
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	0159      	lsls	r1, r3, #5
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	440b      	add	r3, r1
 80124e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124e4:	4619      	mov	r1, r3
 80124e6:	4b75      	ldr	r3, [pc, #468]	@ (80126bc <USB_EPStartXfer+0x538>)
 80124e8:	4013      	ands	r3, r2
 80124ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d12f      	bne.n	8012552 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	691b      	ldr	r3, [r3, #16]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d003      	beq.n	8012502 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	689a      	ldr	r2, [r3, #8]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	689a      	ldr	r2, [r3, #8]
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	015a      	lsls	r2, r3, #5
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	4413      	add	r3, r2
 8012512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012516:	691a      	ldr	r2, [r3, #16]
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	6a1b      	ldr	r3, [r3, #32]
 801251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012520:	69b9      	ldr	r1, [r7, #24]
 8012522:	0148      	lsls	r0, r1, #5
 8012524:	69f9      	ldr	r1, [r7, #28]
 8012526:	4401      	add	r1, r0
 8012528:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801252c:	4313      	orrs	r3, r2
 801252e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	015a      	lsls	r2, r3, #5
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	4413      	add	r3, r2
 8012538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801253c:	691b      	ldr	r3, [r3, #16]
 801253e:	69ba      	ldr	r2, [r7, #24]
 8012540:	0151      	lsls	r1, r2, #5
 8012542:	69fa      	ldr	r2, [r7, #28]
 8012544:	440a      	add	r2, r1
 8012546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801254a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801254e:	6113      	str	r3, [r2, #16]
 8012550:	e05f      	b.n	8012612 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d123      	bne.n	80125a2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	015a      	lsls	r2, r3, #5
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	4413      	add	r3, r2
 8012562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012566:	691a      	ldr	r2, [r3, #16]
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012570:	69b9      	ldr	r1, [r7, #24]
 8012572:	0148      	lsls	r0, r1, #5
 8012574:	69f9      	ldr	r1, [r7, #28]
 8012576:	4401      	add	r1, r0
 8012578:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801257c:	4313      	orrs	r3, r2
 801257e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	015a      	lsls	r2, r3, #5
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	4413      	add	r3, r2
 8012588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	69ba      	ldr	r2, [r7, #24]
 8012590:	0151      	lsls	r1, r2, #5
 8012592:	69fa      	ldr	r2, [r7, #28]
 8012594:	440a      	add	r2, r1
 8012596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801259a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801259e:	6113      	str	r3, [r2, #16]
 80125a0:	e037      	b.n	8012612 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	691a      	ldr	r2, [r3, #16]
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	689b      	ldr	r3, [r3, #8]
 80125aa:	4413      	add	r3, r2
 80125ac:	1e5a      	subs	r2, r3, #1
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	689b      	ldr	r3, [r3, #8]
 80125b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80125b6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	8afa      	ldrh	r2, [r7, #22]
 80125be:	fb03 f202 	mul.w	r2, r3, r2
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	015a      	lsls	r2, r3, #5
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	4413      	add	r3, r2
 80125ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125d2:	691a      	ldr	r2, [r3, #16]
 80125d4:	8afb      	ldrh	r3, [r7, #22]
 80125d6:	04d9      	lsls	r1, r3, #19
 80125d8:	4b39      	ldr	r3, [pc, #228]	@ (80126c0 <USB_EPStartXfer+0x53c>)
 80125da:	400b      	ands	r3, r1
 80125dc:	69b9      	ldr	r1, [r7, #24]
 80125de:	0148      	lsls	r0, r1, #5
 80125e0:	69f9      	ldr	r1, [r7, #28]
 80125e2:	4401      	add	r1, r0
 80125e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80125e8:	4313      	orrs	r3, r2
 80125ea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	015a      	lsls	r2, r3, #5
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	4413      	add	r3, r2
 80125f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125f8:	691a      	ldr	r2, [r3, #16]
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012602:	69b9      	ldr	r1, [r7, #24]
 8012604:	0148      	lsls	r0, r1, #5
 8012606:	69f9      	ldr	r1, [r7, #28]
 8012608:	4401      	add	r1, r0
 801260a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801260e:	4313      	orrs	r3, r2
 8012610:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012612:	79fb      	ldrb	r3, [r7, #7]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d10d      	bne.n	8012634 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d009      	beq.n	8012634 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	68d9      	ldr	r1, [r3, #12]
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	015a      	lsls	r2, r3, #5
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	4413      	add	r3, r2
 801262c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012630:	460a      	mov	r2, r1
 8012632:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	791b      	ldrb	r3, [r3, #4]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d128      	bne.n	801268e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012648:	2b00      	cmp	r3, #0
 801264a:	d110      	bne.n	801266e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	015a      	lsls	r2, r3, #5
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	4413      	add	r3, r2
 8012654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	69ba      	ldr	r2, [r7, #24]
 801265c:	0151      	lsls	r1, r2, #5
 801265e:	69fa      	ldr	r2, [r7, #28]
 8012660:	440a      	add	r2, r1
 8012662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012666:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801266a:	6013      	str	r3, [r2, #0]
 801266c:	e00f      	b.n	801268e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	015a      	lsls	r2, r3, #5
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	4413      	add	r3, r2
 8012676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	69ba      	ldr	r2, [r7, #24]
 801267e:	0151      	lsls	r1, r2, #5
 8012680:	69fa      	ldr	r2, [r7, #28]
 8012682:	440a      	add	r2, r1
 8012684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801268c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	015a      	lsls	r2, r3, #5
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	4413      	add	r3, r2
 8012696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	69ba      	ldr	r2, [r7, #24]
 801269e:	0151      	lsls	r1, r2, #5
 80126a0:	69fa      	ldr	r2, [r7, #28]
 80126a2:	440a      	add	r2, r1
 80126a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80126a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80126ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80126ae:	2300      	movs	r3, #0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3720      	adds	r7, #32
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	fff80000 	.word	0xfff80000
 80126bc:	e007ffff 	.word	0xe007ffff
 80126c0:	1ff80000 	.word	0x1ff80000

080126c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b087      	sub	sp, #28
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80126ce:	2300      	movs	r3, #0
 80126d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80126d2:	2300      	movs	r3, #0
 80126d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	785b      	ldrb	r3, [r3, #1]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d14a      	bne.n	8012778 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	015a      	lsls	r2, r3, #5
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	4413      	add	r3, r2
 80126ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80126f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80126fa:	f040 8086 	bne.w	801280a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	015a      	lsls	r2, r3, #5
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	4413      	add	r3, r2
 8012708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	683a      	ldr	r2, [r7, #0]
 8012710:	7812      	ldrb	r2, [r2, #0]
 8012712:	0151      	lsls	r1, r2, #5
 8012714:	693a      	ldr	r2, [r7, #16]
 8012716:	440a      	add	r2, r1
 8012718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801271c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012720:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	015a      	lsls	r2, r3, #5
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	4413      	add	r3, r2
 801272c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	683a      	ldr	r2, [r7, #0]
 8012734:	7812      	ldrb	r2, [r2, #0]
 8012736:	0151      	lsls	r1, r2, #5
 8012738:	693a      	ldr	r2, [r7, #16]
 801273a:	440a      	add	r2, r1
 801273c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012744:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	3301      	adds	r3, #1
 801274a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012752:	4293      	cmp	r3, r2
 8012754:	d902      	bls.n	801275c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	75fb      	strb	r3, [r7, #23]
          break;
 801275a:	e056      	b.n	801280a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	015a      	lsls	r2, r3, #5
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	4413      	add	r3, r2
 8012766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012774:	d0e7      	beq.n	8012746 <USB_EPStopXfer+0x82>
 8012776:	e048      	b.n	801280a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	015a      	lsls	r2, r3, #5
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	4413      	add	r3, r2
 8012782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801278c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012790:	d13b      	bne.n	801280a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	015a      	lsls	r2, r3, #5
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	4413      	add	r3, r2
 801279c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	7812      	ldrb	r2, [r2, #0]
 80127a6:	0151      	lsls	r1, r2, #5
 80127a8:	693a      	ldr	r2, [r7, #16]
 80127aa:	440a      	add	r2, r1
 80127ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80127b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	015a      	lsls	r2, r3, #5
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	4413      	add	r3, r2
 80127c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	683a      	ldr	r2, [r7, #0]
 80127c8:	7812      	ldrb	r2, [r2, #0]
 80127ca:	0151      	lsls	r1, r2, #5
 80127cc:	693a      	ldr	r2, [r7, #16]
 80127ce:	440a      	add	r2, r1
 80127d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80127d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	3301      	adds	r3, #1
 80127de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d902      	bls.n	80127f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80127ea:	2301      	movs	r3, #1
 80127ec:	75fb      	strb	r3, [r7, #23]
          break;
 80127ee:	e00c      	b.n	801280a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	015a      	lsls	r2, r3, #5
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	4413      	add	r3, r2
 80127fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012808:	d0e7      	beq.n	80127da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801280a:	7dfb      	ldrb	r3, [r7, #23]
}
 801280c:	4618      	mov	r0, r3
 801280e:	371c      	adds	r7, #28
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012818:	b480      	push	{r7}
 801281a:	b089      	sub	sp, #36	@ 0x24
 801281c:	af00      	add	r7, sp, #0
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	60b9      	str	r1, [r7, #8]
 8012822:	4611      	mov	r1, r2
 8012824:	461a      	mov	r2, r3
 8012826:	460b      	mov	r3, r1
 8012828:	71fb      	strb	r3, [r7, #7]
 801282a:	4613      	mov	r3, r2
 801282c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801283a:	2b00      	cmp	r3, #0
 801283c:	d123      	bne.n	8012886 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801283e:	88bb      	ldrh	r3, [r7, #4]
 8012840:	3303      	adds	r3, #3
 8012842:	089b      	lsrs	r3, r3, #2
 8012844:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012846:	2300      	movs	r3, #0
 8012848:	61bb      	str	r3, [r7, #24]
 801284a:	e018      	b.n	801287e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801284c:	79fb      	ldrb	r3, [r7, #7]
 801284e:	031a      	lsls	r2, r3, #12
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	4413      	add	r3, r2
 8012854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012858:	461a      	mov	r2, r3
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	3301      	adds	r3, #1
 8012864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	3301      	adds	r3, #1
 801286a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	3301      	adds	r3, #1
 8012870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	3301      	adds	r3, #1
 8012876:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	3301      	adds	r3, #1
 801287c:	61bb      	str	r3, [r7, #24]
 801287e:	69ba      	ldr	r2, [r7, #24]
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	429a      	cmp	r2, r3
 8012884:	d3e2      	bcc.n	801284c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3724      	adds	r7, #36	@ 0x24
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012894:	b480      	push	{r7}
 8012896:	b08b      	sub	sp, #44	@ 0x2c
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	4613      	mov	r3, r2
 80128a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80128aa:	88fb      	ldrh	r3, [r7, #6]
 80128ac:	089b      	lsrs	r3, r3, #2
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80128b2:	88fb      	ldrh	r3, [r7, #6]
 80128b4:	f003 0303 	and.w	r3, r3, #3
 80128b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80128ba:	2300      	movs	r3, #0
 80128bc:	623b      	str	r3, [r7, #32]
 80128be:	e014      	b.n	80128ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80128c0:	69bb      	ldr	r3, [r7, #24]
 80128c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80128cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ce:	3301      	adds	r3, #1
 80128d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80128d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128d4:	3301      	adds	r3, #1
 80128d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80128d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128da:	3301      	adds	r3, #1
 80128dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80128de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e0:	3301      	adds	r3, #1
 80128e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80128e4:	6a3b      	ldr	r3, [r7, #32]
 80128e6:	3301      	adds	r3, #1
 80128e8:	623b      	str	r3, [r7, #32]
 80128ea:	6a3a      	ldr	r2, [r7, #32]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d3e6      	bcc.n	80128c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80128f2:	8bfb      	ldrh	r3, [r7, #30]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d01e      	beq.n	8012936 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80128f8:	2300      	movs	r3, #0
 80128fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012902:	461a      	mov	r2, r3
 8012904:	f107 0310 	add.w	r3, r7, #16
 8012908:	6812      	ldr	r2, [r2, #0]
 801290a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	b2db      	uxtb	r3, r3
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	fa22 f303 	lsr.w	r3, r2, r3
 8012918:	b2da      	uxtb	r2, r3
 801291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801291c:	701a      	strb	r2, [r3, #0]
      i++;
 801291e:	6a3b      	ldr	r3, [r7, #32]
 8012920:	3301      	adds	r3, #1
 8012922:	623b      	str	r3, [r7, #32]
      pDest++;
 8012924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012926:	3301      	adds	r3, #1
 8012928:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801292a:	8bfb      	ldrh	r3, [r7, #30]
 801292c:	3b01      	subs	r3, #1
 801292e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012930:	8bfb      	ldrh	r3, [r7, #30]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1ea      	bne.n	801290c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012938:	4618      	mov	r0, r3
 801293a:	372c      	adds	r7, #44	@ 0x2c
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012944:	b480      	push	{r7}
 8012946:	b085      	sub	sp, #20
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	785b      	ldrb	r3, [r3, #1]
 801295c:	2b01      	cmp	r3, #1
 801295e:	d12c      	bne.n	80129ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	015a      	lsls	r2, r3, #5
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	4413      	add	r3, r2
 8012968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	db12      	blt.n	8012998 <USB_EPSetStall+0x54>
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00f      	beq.n	8012998 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	015a      	lsls	r2, r3, #5
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	4413      	add	r3, r2
 8012980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	0151      	lsls	r1, r2, #5
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	440a      	add	r2, r1
 801298e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012992:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012996:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	015a      	lsls	r2, r3, #5
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	4413      	add	r3, r2
 80129a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	68ba      	ldr	r2, [r7, #8]
 80129a8:	0151      	lsls	r1, r2, #5
 80129aa:	68fa      	ldr	r2, [r7, #12]
 80129ac:	440a      	add	r2, r1
 80129ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80129b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80129b6:	6013      	str	r3, [r2, #0]
 80129b8:	e02b      	b.n	8012a12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	015a      	lsls	r2, r3, #5
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	4413      	add	r3, r2
 80129c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	db12      	blt.n	80129f2 <USB_EPSetStall+0xae>
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00f      	beq.n	80129f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	015a      	lsls	r2, r3, #5
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	4413      	add	r3, r2
 80129da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	68ba      	ldr	r2, [r7, #8]
 80129e2:	0151      	lsls	r1, r2, #5
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	440a      	add	r2, r1
 80129e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80129f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	015a      	lsls	r2, r3, #5
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	4413      	add	r3, r2
 80129fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	0151      	lsls	r1, r2, #5
 8012a04:	68fa      	ldr	r2, [r7, #12]
 8012a06:	440a      	add	r2, r1
 8012a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012a10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3714      	adds	r7, #20
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	785b      	ldrb	r3, [r3, #1]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d128      	bne.n	8012a8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	68ba      	ldr	r2, [r7, #8]
 8012a4c:	0151      	lsls	r1, r2, #5
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	440a      	add	r2, r1
 8012a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012a5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	791b      	ldrb	r3, [r3, #4]
 8012a60:	2b03      	cmp	r3, #3
 8012a62:	d003      	beq.n	8012a6c <USB_EPClearStall+0x4c>
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	791b      	ldrb	r3, [r3, #4]
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d138      	bne.n	8012ade <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	015a      	lsls	r2, r3, #5
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	4413      	add	r3, r2
 8012a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	68ba      	ldr	r2, [r7, #8]
 8012a7c:	0151      	lsls	r1, r2, #5
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	440a      	add	r2, r1
 8012a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	e027      	b.n	8012ade <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	015a      	lsls	r2, r3, #5
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	4413      	add	r3, r2
 8012a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68ba      	ldr	r2, [r7, #8]
 8012a9e:	0151      	lsls	r1, r2, #5
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	440a      	add	r2, r1
 8012aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012aa8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012aac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	791b      	ldrb	r3, [r3, #4]
 8012ab2:	2b03      	cmp	r3, #3
 8012ab4:	d003      	beq.n	8012abe <USB_EPClearStall+0x9e>
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	791b      	ldrb	r3, [r3, #4]
 8012aba:	2b02      	cmp	r3, #2
 8012abc:	d10f      	bne.n	8012ade <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	015a      	lsls	r2, r3, #5
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	0151      	lsls	r1, r2, #5
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	440a      	add	r2, r1
 8012ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012adc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3714      	adds	r7, #20
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012b0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012b0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	78fb      	ldrb	r3, [r7, #3]
 8012b1a:	011b      	lsls	r3, r3, #4
 8012b1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012b20:	68f9      	ldr	r1, [r7, #12]
 8012b22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012b26:	4313      	orrs	r3, r2
 8012b28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3714      	adds	r7, #20
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012b52:	f023 0303 	bic.w	r3, r3, #3
 8012b56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	68fa      	ldr	r2, [r7, #12]
 8012b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012b66:	f023 0302 	bic.w	r3, r3, #2
 8012b6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012b6c:	2300      	movs	r3, #0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3714      	adds	r7, #20
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr

08012b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b085      	sub	sp, #20
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	68fa      	ldr	r2, [r7, #12]
 8012b90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012b94:	f023 0303 	bic.w	r3, r3, #3
 8012b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012ba8:	f043 0302 	orr.w	r3, r3, #2
 8012bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3714      	adds	r7, #20
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	695b      	ldr	r3, [r3, #20]
 8012bc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	699b      	ldr	r3, [r3, #24]
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3714      	adds	r7, #20
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr

08012be2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012be2:	b480      	push	{r7}
 8012be4:	b085      	sub	sp, #20
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bf4:	699b      	ldr	r3, [r3, #24]
 8012bf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bfe:	69db      	ldr	r3, [r3, #28]
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	4013      	ands	r3, r2
 8012c04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	0c1b      	lsrs	r3, r3, #16
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3714      	adds	r7, #20
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012c16:	b480      	push	{r7}
 8012c18:	b085      	sub	sp, #20
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c28:	699b      	ldr	r3, [r3, #24]
 8012c2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c32:	69db      	ldr	r3, [r3, #28]
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	4013      	ands	r3, r2
 8012c38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	b29b      	uxth	r3, r3
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3714      	adds	r7, #20
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c4a:	b480      	push	{r7}
 8012c4c:	b085      	sub	sp, #20
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	460b      	mov	r3, r1
 8012c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012c5a:	78fb      	ldrb	r3, [r7, #3]
 8012c5c:	015a      	lsls	r2, r3, #5
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	4413      	add	r3, r2
 8012c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c70:	695b      	ldr	r3, [r3, #20]
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	4013      	ands	r3, r2
 8012c76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012c78:	68bb      	ldr	r3, [r7, #8]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3714      	adds	r7, #20
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr

08012c86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c86:	b480      	push	{r7}
 8012c88:	b087      	sub	sp, #28
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ca8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012caa:	78fb      	ldrb	r3, [r7, #3]
 8012cac:	f003 030f 	and.w	r3, r3, #15
 8012cb0:	68fa      	ldr	r2, [r7, #12]
 8012cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8012cb6:	01db      	lsls	r3, r3, #7
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	693a      	ldr	r2, [r7, #16]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012cc0:	78fb      	ldrb	r3, [r7, #3]
 8012cc2:	015a      	lsls	r2, r3, #5
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	693a      	ldr	r2, [r7, #16]
 8012cd0:	4013      	ands	r3, r2
 8012cd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012cd4:	68bb      	ldr	r3, [r7, #8]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	371c      	adds	r7, #28
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr

08012ce2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012ce2:	b480      	push	{r7}
 8012ce4:	b083      	sub	sp, #12
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	f003 0301 	and.w	r3, r3, #1
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	370c      	adds	r7, #12
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr
	...

08012d00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	4b09      	ldr	r3, [pc, #36]	@ (8012d44 <USB_ActivateSetup+0x44>)
 8012d1e:	4013      	ands	r3, r2
 8012d20:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d36:	2300      	movs	r3, #0
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3714      	adds	r7, #20
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr
 8012d44:	fffff800 	.word	0xfffff800

08012d48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b087      	sub	sp, #28
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	460b      	mov	r3, r1
 8012d52:	607a      	str	r2, [r7, #4]
 8012d54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	333c      	adds	r3, #60	@ 0x3c
 8012d5e:	3304      	adds	r3, #4
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	4a26      	ldr	r2, [pc, #152]	@ (8012e00 <USB_EP0_OutStart+0xb8>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d90a      	bls.n	8012d82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012d7c:	d101      	bne.n	8012d82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e037      	b.n	8012df2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d88:	461a      	mov	r2, r3
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012d9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	697a      	ldr	r2, [r7, #20]
 8012dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012db0:	f043 0318 	orr.w	r3, r3, #24
 8012db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	697a      	ldr	r2, [r7, #20]
 8012dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012dc4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012dc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012dca:	7afb      	ldrb	r3, [r7, #11]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d10f      	bne.n	8012df0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	697a      	ldr	r2, [r7, #20]
 8012de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012dea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	371c      	adds	r7, #28
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	4f54300a 	.word	0x4f54300a

08012e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	3301      	adds	r3, #1
 8012e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012e1c:	d901      	bls.n	8012e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012e1e:	2303      	movs	r3, #3
 8012e20:	e01b      	b.n	8012e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	691b      	ldr	r3, [r3, #16]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	daf2      	bge.n	8012e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	f043 0201 	orr.w	r2, r3, #1
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012e46:	d901      	bls.n	8012e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012e48:	2303      	movs	r3, #3
 8012e4a:	e006      	b.n	8012e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	f003 0301 	and.w	r3, r3, #1
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d0f0      	beq.n	8012e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8012e58:	2300      	movs	r3, #0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
	...

08012e68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	460b      	mov	r3, r1
 8012e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012e74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012e78:	f002 fcca 	bl	8015810 <USBD_static_malloc>
 8012e7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d109      	bne.n	8012e98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	32b0      	adds	r2, #176	@ 0xb0
 8012e8e:	2100      	movs	r1, #0
 8012e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012e94:	2302      	movs	r3, #2
 8012e96:	e0d4      	b.n	8013042 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012e98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f004 f89f 	bl	8016fe2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	32b0      	adds	r2, #176	@ 0xb0
 8012eae:	68f9      	ldr	r1, [r7, #12]
 8012eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	32b0      	adds	r2, #176	@ 0xb0
 8012ebe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	7c1b      	ldrb	r3, [r3, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d138      	bne.n	8012f42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012ed0:	4b5e      	ldr	r3, [pc, #376]	@ (801304c <USBD_CDC_Init+0x1e4>)
 8012ed2:	7819      	ldrb	r1, [r3, #0]
 8012ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ed8:	2202      	movs	r2, #2
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f002 fb75 	bl	80155ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012ee0:	4b5a      	ldr	r3, [pc, #360]	@ (801304c <USBD_CDC_Init+0x1e4>)
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	f003 020f 	and.w	r2, r3, #15
 8012ee8:	6879      	ldr	r1, [r7, #4]
 8012eea:	4613      	mov	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4413      	add	r3, r2
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	440b      	add	r3, r1
 8012ef4:	3324      	adds	r3, #36	@ 0x24
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012efa:	4b55      	ldr	r3, [pc, #340]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 8012efc:	7819      	ldrb	r1, [r3, #0]
 8012efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f02:	2202      	movs	r2, #2
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f002 fb60 	bl	80155ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f0a:	4b51      	ldr	r3, [pc, #324]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	f003 020f 	and.w	r2, r3, #15
 8012f12:	6879      	ldr	r1, [r7, #4]
 8012f14:	4613      	mov	r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	4413      	add	r3, r2
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	440b      	add	r3, r1
 8012f1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f22:	2201      	movs	r2, #1
 8012f24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012f26:	4b4b      	ldr	r3, [pc, #300]	@ (8013054 <USBD_CDC_Init+0x1ec>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 020f 	and.w	r2, r3, #15
 8012f2e:	6879      	ldr	r1, [r7, #4]
 8012f30:	4613      	mov	r3, r2
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	4413      	add	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	440b      	add	r3, r1
 8012f3a:	3326      	adds	r3, #38	@ 0x26
 8012f3c:	2210      	movs	r2, #16
 8012f3e:	801a      	strh	r2, [r3, #0]
 8012f40:	e035      	b.n	8012fae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f42:	4b42      	ldr	r3, [pc, #264]	@ (801304c <USBD_CDC_Init+0x1e4>)
 8012f44:	7819      	ldrb	r1, [r3, #0]
 8012f46:	2340      	movs	r3, #64	@ 0x40
 8012f48:	2202      	movs	r2, #2
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f002 fb3d 	bl	80155ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012f50:	4b3e      	ldr	r3, [pc, #248]	@ (801304c <USBD_CDC_Init+0x1e4>)
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	f003 020f 	and.w	r2, r3, #15
 8012f58:	6879      	ldr	r1, [r7, #4]
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	4413      	add	r3, r2
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	440b      	add	r3, r1
 8012f64:	3324      	adds	r3, #36	@ 0x24
 8012f66:	2201      	movs	r2, #1
 8012f68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012f6a:	4b39      	ldr	r3, [pc, #228]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 8012f6c:	7819      	ldrb	r1, [r3, #0]
 8012f6e:	2340      	movs	r3, #64	@ 0x40
 8012f70:	2202      	movs	r2, #2
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f002 fb29 	bl	80155ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f78:	4b35      	ldr	r3, [pc, #212]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	f003 020f 	and.w	r2, r3, #15
 8012f80:	6879      	ldr	r1, [r7, #4]
 8012f82:	4613      	mov	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	440b      	add	r3, r1
 8012f8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f90:	2201      	movs	r2, #1
 8012f92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012f94:	4b2f      	ldr	r3, [pc, #188]	@ (8013054 <USBD_CDC_Init+0x1ec>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f003 020f 	and.w	r2, r3, #15
 8012f9c:	6879      	ldr	r1, [r7, #4]
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	4413      	add	r3, r2
 8012fa4:	009b      	lsls	r3, r3, #2
 8012fa6:	440b      	add	r3, r1
 8012fa8:	3326      	adds	r3, #38	@ 0x26
 8012faa:	2210      	movs	r2, #16
 8012fac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012fae:	4b29      	ldr	r3, [pc, #164]	@ (8013054 <USBD_CDC_Init+0x1ec>)
 8012fb0:	7819      	ldrb	r1, [r3, #0]
 8012fb2:	2308      	movs	r3, #8
 8012fb4:	2203      	movs	r2, #3
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f002 fb07 	bl	80155ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012fbc:	4b25      	ldr	r3, [pc, #148]	@ (8013054 <USBD_CDC_Init+0x1ec>)
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	f003 020f 	and.w	r2, r3, #15
 8012fc4:	6879      	ldr	r1, [r7, #4]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4413      	add	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	440b      	add	r3, r1
 8012fd0:	3324      	adds	r3, #36	@ 0x24
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	33b0      	adds	r3, #176	@ 0xb0
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	4413      	add	r3, r2
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013008:	2b00      	cmp	r3, #0
 801300a:	d101      	bne.n	8013010 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801300c:	2302      	movs	r3, #2
 801300e:	e018      	b.n	8013042 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	7c1b      	ldrb	r3, [r3, #16]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d10a      	bne.n	801302e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013018:	4b0d      	ldr	r3, [pc, #52]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 801301a:	7819      	ldrb	r1, [r3, #0]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f002 fbbe 	bl	80157a8 <USBD_LL_PrepareReceive>
 801302c:	e008      	b.n	8013040 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801302e:	4b08      	ldr	r3, [pc, #32]	@ (8013050 <USBD_CDC_Init+0x1e8>)
 8013030:	7819      	ldrb	r1, [r3, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013038:	2340      	movs	r3, #64	@ 0x40
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f002 fbb4 	bl	80157a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013040:	2300      	movs	r3, #0
}
 8013042:	4618      	mov	r0, r3
 8013044:	3710      	adds	r7, #16
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	24000097 	.word	0x24000097
 8013050:	24000098 	.word	0x24000098
 8013054:	24000099 	.word	0x24000099

08013058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	460b      	mov	r3, r1
 8013062:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013064:	4b3a      	ldr	r3, [pc, #232]	@ (8013150 <USBD_CDC_DeInit+0xf8>)
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	4619      	mov	r1, r3
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f002 fad3 	bl	8015616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013070:	4b37      	ldr	r3, [pc, #220]	@ (8013150 <USBD_CDC_DeInit+0xf8>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 020f 	and.w	r2, r3, #15
 8013078:	6879      	ldr	r1, [r7, #4]
 801307a:	4613      	mov	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	4413      	add	r3, r2
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	440b      	add	r3, r1
 8013084:	3324      	adds	r3, #36	@ 0x24
 8013086:	2200      	movs	r2, #0
 8013088:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801308a:	4b32      	ldr	r3, [pc, #200]	@ (8013154 <USBD_CDC_DeInit+0xfc>)
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	4619      	mov	r1, r3
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f002 fac0 	bl	8015616 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013096:	4b2f      	ldr	r3, [pc, #188]	@ (8013154 <USBD_CDC_DeInit+0xfc>)
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	f003 020f 	and.w	r2, r3, #15
 801309e:	6879      	ldr	r1, [r7, #4]
 80130a0:	4613      	mov	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4413      	add	r3, r2
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	440b      	add	r3, r1
 80130aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130ae:	2200      	movs	r2, #0
 80130b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80130b2:	4b29      	ldr	r3, [pc, #164]	@ (8013158 <USBD_CDC_DeInit+0x100>)
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	4619      	mov	r1, r3
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f002 faac 	bl	8015616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80130be:	4b26      	ldr	r3, [pc, #152]	@ (8013158 <USBD_CDC_DeInit+0x100>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	f003 020f 	and.w	r2, r3, #15
 80130c6:	6879      	ldr	r1, [r7, #4]
 80130c8:	4613      	mov	r3, r2
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	4413      	add	r3, r2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	440b      	add	r3, r1
 80130d2:	3324      	adds	r3, #36	@ 0x24
 80130d4:	2200      	movs	r2, #0
 80130d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80130d8:	4b1f      	ldr	r3, [pc, #124]	@ (8013158 <USBD_CDC_DeInit+0x100>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	f003 020f 	and.w	r2, r3, #15
 80130e0:	6879      	ldr	r1, [r7, #4]
 80130e2:	4613      	mov	r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	4413      	add	r3, r2
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	440b      	add	r3, r1
 80130ec:	3326      	adds	r3, #38	@ 0x26
 80130ee:	2200      	movs	r2, #0
 80130f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	32b0      	adds	r2, #176	@ 0xb0
 80130fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d01f      	beq.n	8013144 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	33b0      	adds	r3, #176	@ 0xb0
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	4413      	add	r3, r2
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	32b0      	adds	r2, #176	@ 0xb0
 8013122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013126:	4618      	mov	r0, r3
 8013128:	f002 fb80 	bl	801582c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	32b0      	adds	r2, #176	@ 0xb0
 8013136:	2100      	movs	r1, #0
 8013138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013144:	2300      	movs	r3, #0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
 801314e:	bf00      	nop
 8013150:	24000097 	.word	0x24000097
 8013154:	24000098 	.word	0x24000098
 8013158:	24000099 	.word	0x24000099

0801315c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	32b0      	adds	r2, #176	@ 0xb0
 8013170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013174:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013176:	2300      	movs	r3, #0
 8013178:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801317a:	2300      	movs	r3, #0
 801317c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013188:	2303      	movs	r3, #3
 801318a:	e0bf      	b.n	801330c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013194:	2b00      	cmp	r3, #0
 8013196:	d050      	beq.n	801323a <USBD_CDC_Setup+0xde>
 8013198:	2b20      	cmp	r3, #32
 801319a:	f040 80af 	bne.w	80132fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	88db      	ldrh	r3, [r3, #6]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d03a      	beq.n	801321c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	b25b      	sxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	da1b      	bge.n	80131e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	33b0      	adds	r3, #176	@ 0xb0
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	4413      	add	r3, r2
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	683a      	ldr	r2, [r7, #0]
 80131c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80131c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	88d2      	ldrh	r2, [r2, #6]
 80131cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	88db      	ldrh	r3, [r3, #6]
 80131d2:	2b07      	cmp	r3, #7
 80131d4:	bf28      	it	cs
 80131d6:	2307      	movcs	r3, #7
 80131d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	89fa      	ldrh	r2, [r7, #14]
 80131de:	4619      	mov	r1, r3
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f001 fdbd 	bl	8014d60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80131e6:	e090      	b.n	801330a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	785a      	ldrb	r2, [r3, #1]
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	88db      	ldrh	r3, [r3, #6]
 80131f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80131f8:	d803      	bhi.n	8013202 <USBD_CDC_Setup+0xa6>
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	88db      	ldrh	r3, [r3, #6]
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	e000      	b.n	8013204 <USBD_CDC_Setup+0xa8>
 8013202:	2240      	movs	r2, #64	@ 0x40
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801320a:	6939      	ldr	r1, [r7, #16]
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013212:	461a      	mov	r2, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f001 fdcf 	bl	8014db8 <USBD_CtlPrepareRx>
      break;
 801321a:	e076      	b.n	801330a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	33b0      	adds	r3, #176	@ 0xb0
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	4413      	add	r3, r2
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	689b      	ldr	r3, [r3, #8]
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	7850      	ldrb	r0, [r2, #1]
 8013232:	2200      	movs	r2, #0
 8013234:	6839      	ldr	r1, [r7, #0]
 8013236:	4798      	blx	r3
      break;
 8013238:	e067      	b.n	801330a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	785b      	ldrb	r3, [r3, #1]
 801323e:	2b0b      	cmp	r3, #11
 8013240:	d851      	bhi.n	80132e6 <USBD_CDC_Setup+0x18a>
 8013242:	a201      	add	r2, pc, #4	@ (adr r2, 8013248 <USBD_CDC_Setup+0xec>)
 8013244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013248:	08013279 	.word	0x08013279
 801324c:	080132f5 	.word	0x080132f5
 8013250:	080132e7 	.word	0x080132e7
 8013254:	080132e7 	.word	0x080132e7
 8013258:	080132e7 	.word	0x080132e7
 801325c:	080132e7 	.word	0x080132e7
 8013260:	080132e7 	.word	0x080132e7
 8013264:	080132e7 	.word	0x080132e7
 8013268:	080132e7 	.word	0x080132e7
 801326c:	080132e7 	.word	0x080132e7
 8013270:	080132a3 	.word	0x080132a3
 8013274:	080132cd 	.word	0x080132cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801327e:	b2db      	uxtb	r3, r3
 8013280:	2b03      	cmp	r3, #3
 8013282:	d107      	bne.n	8013294 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013284:	f107 030a 	add.w	r3, r7, #10
 8013288:	2202      	movs	r2, #2
 801328a:	4619      	mov	r1, r3
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f001 fd67 	bl	8014d60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013292:	e032      	b.n	80132fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f001 fce5 	bl	8014c66 <USBD_CtlError>
            ret = USBD_FAIL;
 801329c:	2303      	movs	r3, #3
 801329e:	75fb      	strb	r3, [r7, #23]
          break;
 80132a0:	e02b      	b.n	80132fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2b03      	cmp	r3, #3
 80132ac:	d107      	bne.n	80132be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80132ae:	f107 030d 	add.w	r3, r7, #13
 80132b2:	2201      	movs	r2, #1
 80132b4:	4619      	mov	r1, r3
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f001 fd52 	bl	8014d60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80132bc:	e01d      	b.n	80132fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80132be:	6839      	ldr	r1, [r7, #0]
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f001 fcd0 	bl	8014c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80132c6:	2303      	movs	r3, #3
 80132c8:	75fb      	strb	r3, [r7, #23]
          break;
 80132ca:	e016      	b.n	80132fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b03      	cmp	r3, #3
 80132d6:	d00f      	beq.n	80132f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80132d8:	6839      	ldr	r1, [r7, #0]
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f001 fcc3 	bl	8014c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80132e0:	2303      	movs	r3, #3
 80132e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80132e4:	e008      	b.n	80132f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80132e6:	6839      	ldr	r1, [r7, #0]
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f001 fcbc 	bl	8014c66 <USBD_CtlError>
          ret = USBD_FAIL;
 80132ee:	2303      	movs	r3, #3
 80132f0:	75fb      	strb	r3, [r7, #23]
          break;
 80132f2:	e002      	b.n	80132fa <USBD_CDC_Setup+0x19e>
          break;
 80132f4:	bf00      	nop
 80132f6:	e008      	b.n	801330a <USBD_CDC_Setup+0x1ae>
          break;
 80132f8:	bf00      	nop
      }
      break;
 80132fa:	e006      	b.n	801330a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80132fc:	6839      	ldr	r1, [r7, #0]
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f001 fcb1 	bl	8014c66 <USBD_CtlError>
      ret = USBD_FAIL;
 8013304:	2303      	movs	r3, #3
 8013306:	75fb      	strb	r3, [r7, #23]
      break;
 8013308:	bf00      	nop
  }

  return (uint8_t)ret;
 801330a:	7dfb      	ldrb	r3, [r7, #23]
}
 801330c:	4618      	mov	r0, r3
 801330e:	3718      	adds	r7, #24
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013326:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	32b0      	adds	r2, #176	@ 0xb0
 8013332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d101      	bne.n	801333e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801333a:	2303      	movs	r3, #3
 801333c:	e065      	b.n	801340a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	32b0      	adds	r2, #176	@ 0xb0
 8013348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801334c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801334e:	78fb      	ldrb	r3, [r7, #3]
 8013350:	f003 020f 	and.w	r2, r3, #15
 8013354:	6879      	ldr	r1, [r7, #4]
 8013356:	4613      	mov	r3, r2
 8013358:	009b      	lsls	r3, r3, #2
 801335a:	4413      	add	r3, r2
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	440b      	add	r3, r1
 8013360:	3318      	adds	r3, #24
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d02f      	beq.n	80133c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013368:	78fb      	ldrb	r3, [r7, #3]
 801336a:	f003 020f 	and.w	r2, r3, #15
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	4613      	mov	r3, r2
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	4413      	add	r3, r2
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	440b      	add	r3, r1
 801337a:	3318      	adds	r3, #24
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	78fb      	ldrb	r3, [r7, #3]
 8013380:	f003 010f 	and.w	r1, r3, #15
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	460b      	mov	r3, r1
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	440b      	add	r3, r1
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	4403      	add	r3, r0
 8013390:	331c      	adds	r3, #28
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	fbb2 f1f3 	udiv	r1, r2, r3
 8013398:	fb01 f303 	mul.w	r3, r1, r3
 801339c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d112      	bne.n	80133c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80133a2:	78fb      	ldrb	r3, [r7, #3]
 80133a4:	f003 020f 	and.w	r2, r3, #15
 80133a8:	6879      	ldr	r1, [r7, #4]
 80133aa:	4613      	mov	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	440b      	add	r3, r1
 80133b4:	3318      	adds	r3, #24
 80133b6:	2200      	movs	r2, #0
 80133b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80133ba:	78f9      	ldrb	r1, [r7, #3]
 80133bc:	2300      	movs	r3, #0
 80133be:	2200      	movs	r2, #0
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f002 f9d0 	bl	8015766 <USBD_LL_Transmit>
 80133c6:	e01f      	b.n	8013408 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2200      	movs	r2, #0
 80133cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	33b0      	adds	r3, #176	@ 0xb0
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	4413      	add	r3, r2
 80133de:	685b      	ldr	r3, [r3, #4]
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d010      	beq.n	8013408 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	33b0      	adds	r3, #176	@ 0xb0
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	4413      	add	r3, r2
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	68ba      	ldr	r2, [r7, #8]
 80133fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013404:	78fa      	ldrb	r2, [r7, #3]
 8013406:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013408:	2300      	movs	r3, #0
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}

08013412 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013412:	b580      	push	{r7, lr}
 8013414:	b084      	sub	sp, #16
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
 801341a:	460b      	mov	r3, r1
 801341c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	32b0      	adds	r2, #176	@ 0xb0
 8013428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801342c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	32b0      	adds	r2, #176	@ 0xb0
 8013438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d101      	bne.n	8013444 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013440:	2303      	movs	r3, #3
 8013442:	e01a      	b.n	801347a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013444:	78fb      	ldrb	r3, [r7, #3]
 8013446:	4619      	mov	r1, r3
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f002 f9ce 	bl	80157ea <USBD_LL_GetRxDataSize>
 801344e:	4602      	mov	r2, r0
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	33b0      	adds	r3, #176	@ 0xb0
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4413      	add	r3, r2
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	68db      	ldr	r3, [r3, #12]
 8013468:	68fa      	ldr	r2, [r7, #12]
 801346a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013474:	4611      	mov	r1, r2
 8013476:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b084      	sub	sp, #16
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	32b0      	adds	r2, #176	@ 0xb0
 8013494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d101      	bne.n	80134a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80134a0:	2303      	movs	r3, #3
 80134a2:	e024      	b.n	80134ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	33b0      	adds	r3, #176	@ 0xb0
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	4413      	add	r3, r2
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d019      	beq.n	80134ec <USBD_CDC_EP0_RxReady+0x6a>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80134be:	2bff      	cmp	r3, #255	@ 0xff
 80134c0:	d014      	beq.n	80134ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	33b0      	adds	r3, #176	@ 0xb0
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	4413      	add	r3, r2
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	689b      	ldr	r3, [r3, #8]
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80134da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	22ff      	movs	r2, #255	@ 0xff
 80134e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80134ec:	2300      	movs	r3, #0
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
	...

080134f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013500:	2182      	movs	r1, #130	@ 0x82
 8013502:	4818      	ldr	r0, [pc, #96]	@ (8013564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013504:	f000 fd4f 	bl	8013fa6 <USBD_GetEpDesc>
 8013508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801350a:	2101      	movs	r1, #1
 801350c:	4815      	ldr	r0, [pc, #84]	@ (8013564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801350e:	f000 fd4a 	bl	8013fa6 <USBD_GetEpDesc>
 8013512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013514:	2181      	movs	r1, #129	@ 0x81
 8013516:	4813      	ldr	r0, [pc, #76]	@ (8013564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013518:	f000 fd45 	bl	8013fa6 <USBD_GetEpDesc>
 801351c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d002      	beq.n	801352a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2210      	movs	r2, #16
 8013528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d006      	beq.n	801353e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	2200      	movs	r2, #0
 8013534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013538:	711a      	strb	r2, [r3, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2200      	movs	r2, #0
 8013548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801354c:	711a      	strb	r2, [r3, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2243      	movs	r2, #67	@ 0x43
 8013556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013558:	4b02      	ldr	r3, [pc, #8]	@ (8013564 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	24000054 	.word	0x24000054

08013568 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013570:	2182      	movs	r1, #130	@ 0x82
 8013572:	4818      	ldr	r0, [pc, #96]	@ (80135d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013574:	f000 fd17 	bl	8013fa6 <USBD_GetEpDesc>
 8013578:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801357a:	2101      	movs	r1, #1
 801357c:	4815      	ldr	r0, [pc, #84]	@ (80135d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801357e:	f000 fd12 	bl	8013fa6 <USBD_GetEpDesc>
 8013582:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013584:	2181      	movs	r1, #129	@ 0x81
 8013586:	4813      	ldr	r0, [pc, #76]	@ (80135d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013588:	f000 fd0d 	bl	8013fa6 <USBD_GetEpDesc>
 801358c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d002      	beq.n	801359a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2210      	movs	r2, #16
 8013598:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d006      	beq.n	80135ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	2200      	movs	r2, #0
 80135a4:	711a      	strb	r2, [r3, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	f042 0202 	orr.w	r2, r2, #2
 80135ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d006      	beq.n	80135c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2200      	movs	r2, #0
 80135b8:	711a      	strb	r2, [r3, #4]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f042 0202 	orr.w	r2, r2, #2
 80135c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2243      	movs	r2, #67	@ 0x43
 80135c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80135c8:	4b02      	ldr	r3, [pc, #8]	@ (80135d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3718      	adds	r7, #24
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	24000054 	.word	0x24000054

080135d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135e0:	2182      	movs	r1, #130	@ 0x82
 80135e2:	4818      	ldr	r0, [pc, #96]	@ (8013644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135e4:	f000 fcdf 	bl	8013fa6 <USBD_GetEpDesc>
 80135e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135ea:	2101      	movs	r1, #1
 80135ec:	4815      	ldr	r0, [pc, #84]	@ (8013644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135ee:	f000 fcda 	bl	8013fa6 <USBD_GetEpDesc>
 80135f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135f4:	2181      	movs	r1, #129	@ 0x81
 80135f6:	4813      	ldr	r0, [pc, #76]	@ (8013644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135f8:	f000 fcd5 	bl	8013fa6 <USBD_GetEpDesc>
 80135fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	2210      	movs	r2, #16
 8013608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d006      	beq.n	801361e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	2200      	movs	r2, #0
 8013614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013618:	711a      	strb	r2, [r3, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d006      	beq.n	8013632 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2200      	movs	r2, #0
 8013628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801362c:	711a      	strb	r2, [r3, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2243      	movs	r2, #67	@ 0x43
 8013636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013638:	4b02      	ldr	r3, [pc, #8]	@ (8013644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801363a:	4618      	mov	r0, r3
 801363c:	3718      	adds	r7, #24
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	24000054 	.word	0x24000054

08013648 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013648:	b480      	push	{r7}
 801364a:	b083      	sub	sp, #12
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	220a      	movs	r2, #10
 8013654:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013656:	4b03      	ldr	r3, [pc, #12]	@ (8013664 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013658:	4618      	mov	r0, r3
 801365a:	370c      	adds	r7, #12
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr
 8013664:	24000010 	.word	0x24000010

08013668 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013668:	b480      	push	{r7}
 801366a:	b083      	sub	sp, #12
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d101      	bne.n	801367c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013678:	2303      	movs	r3, #3
 801367a:	e009      	b.n	8013690 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	33b0      	adds	r3, #176	@ 0xb0
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801369c:	b480      	push	{r7}
 801369e:	b087      	sub	sp, #28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	32b0      	adds	r2, #176	@ 0xb0
 80136b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d101      	bne.n	80136c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80136be:	2303      	movs	r3, #3
 80136c0:	e008      	b.n	80136d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	371c      	adds	r7, #28
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr

080136e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80136e0:	b480      	push	{r7}
 80136e2:	b085      	sub	sp, #20
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	32b0      	adds	r2, #176	@ 0xb0
 80136f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d101      	bne.n	8013704 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013700:	2303      	movs	r3, #3
 8013702:	e004      	b.n	801370e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	683a      	ldr	r2, [r7, #0]
 8013708:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	3714      	adds	r7, #20
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
	...

0801371c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	32b0      	adds	r2, #176	@ 0xb0
 801372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013732:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013734:	2301      	movs	r3, #1
 8013736:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d101      	bne.n	8013742 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801373e:	2303      	movs	r3, #3
 8013740:	e025      	b.n	801378e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013748:	2b00      	cmp	r3, #0
 801374a:	d11f      	bne.n	801378c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	2201      	movs	r2, #1
 8013750:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013754:	4b10      	ldr	r3, [pc, #64]	@ (8013798 <USBD_CDC_TransmitPacket+0x7c>)
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	f003 020f 	and.w	r2, r3, #15
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	4613      	mov	r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	4413      	add	r3, r2
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	4403      	add	r3, r0
 801376e:	3318      	adds	r3, #24
 8013770:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013772:	4b09      	ldr	r3, [pc, #36]	@ (8013798 <USBD_CDC_TransmitPacket+0x7c>)
 8013774:	7819      	ldrb	r1, [r3, #0]
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f001 ffef 	bl	8015766 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013788:	2300      	movs	r3, #0
 801378a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801378c:	7bfb      	ldrb	r3, [r7, #15]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	24000097 	.word	0x24000097

0801379c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	32b0      	adds	r2, #176	@ 0xb0
 80137ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	32b0      	adds	r2, #176	@ 0xb0
 80137be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80137c6:	2303      	movs	r3, #3
 80137c8:	e018      	b.n	80137fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	7c1b      	ldrb	r3, [r3, #16]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d10a      	bne.n	80137e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137d2:	4b0c      	ldr	r3, [pc, #48]	@ (8013804 <USBD_CDC_ReceivePacket+0x68>)
 80137d4:	7819      	ldrb	r1, [r3, #0]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f001 ffe1 	bl	80157a8 <USBD_LL_PrepareReceive>
 80137e6:	e008      	b.n	80137fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137e8:	4b06      	ldr	r3, [pc, #24]	@ (8013804 <USBD_CDC_ReceivePacket+0x68>)
 80137ea:	7819      	ldrb	r1, [r3, #0]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137f2:	2340      	movs	r3, #64	@ 0x40
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f001 ffd7 	bl	80157a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137fa:	2300      	movs	r3, #0
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3710      	adds	r7, #16
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	24000098 	.word	0x24000098

08013808 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b086      	sub	sp, #24
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	4613      	mov	r3, r2
 8013814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801381c:	2303      	movs	r3, #3
 801381e:	e01f      	b.n	8013860 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2200      	movs	r2, #0
 8013824:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2200      	movs	r2, #0
 801382c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d003      	beq.n	8013846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	68ba      	ldr	r2, [r7, #8]
 8013842:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	2201      	movs	r2, #1
 801384a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	79fa      	ldrb	r2, [r7, #7]
 8013852:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013854:	68f8      	ldr	r0, [r7, #12]
 8013856:	f001 fe4b 	bl	80154f0 <USBD_LL_Init>
 801385a:	4603      	mov	r3, r0
 801385c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801385e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013872:	2300      	movs	r3, #0
 8013874:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d101      	bne.n	8013880 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801387c:	2303      	movs	r3, #3
 801387e:	e025      	b.n	80138cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	32ae      	adds	r2, #174	@ 0xae
 8013892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013898:	2b00      	cmp	r3, #0
 801389a:	d00f      	beq.n	80138bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	32ae      	adds	r2, #174	@ 0xae
 80138a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ac:	f107 020e 	add.w	r2, r7, #14
 80138b0:	4610      	mov	r0, r2
 80138b2:	4798      	blx	r3
 80138b4:	4602      	mov	r2, r0
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80138ca:	2300      	movs	r3, #0
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f001 fe59 	bl	8015594 <USBD_LL_Start>
 80138e2:	4603      	mov	r3, r0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr

08013902 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b084      	sub	sp, #16
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
 801390a:	460b      	mov	r3, r1
 801390c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801390e:	2300      	movs	r3, #0
 8013910:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013918:	2b00      	cmp	r3, #0
 801391a:	d009      	beq.n	8013930 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	78fa      	ldrb	r2, [r7, #3]
 8013926:	4611      	mov	r1, r2
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	4798      	blx	r3
 801392c:	4603      	mov	r3, r0
 801392e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013930:	7bfb      	ldrb	r3, [r7, #15]
}
 8013932:	4618      	mov	r0, r3
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b084      	sub	sp, #16
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
 8013942:	460b      	mov	r3, r1
 8013944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	78fa      	ldrb	r2, [r7, #3]
 8013954:	4611      	mov	r1, r2
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	4798      	blx	r3
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013960:	2303      	movs	r3, #3
 8013962:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013964:	7bfb      	ldrb	r3, [r7, #15]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801396e:	b580      	push	{r7, lr}
 8013970:	b084      	sub	sp, #16
 8013972:	af00      	add	r7, sp, #0
 8013974:	6078      	str	r0, [r7, #4]
 8013976:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801397e:	6839      	ldr	r1, [r7, #0]
 8013980:	4618      	mov	r0, r3
 8013982:	f001 f936 	bl	8014bf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2201      	movs	r2, #1
 801398a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013994:	461a      	mov	r2, r3
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80139a2:	f003 031f 	and.w	r3, r3, #31
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d01a      	beq.n	80139e0 <USBD_LL_SetupStage+0x72>
 80139aa:	2b02      	cmp	r3, #2
 80139ac:	d822      	bhi.n	80139f4 <USBD_LL_SetupStage+0x86>
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d002      	beq.n	80139b8 <USBD_LL_SetupStage+0x4a>
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d00a      	beq.n	80139cc <USBD_LL_SetupStage+0x5e>
 80139b6:	e01d      	b.n	80139f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139be:	4619      	mov	r1, r3
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fb63 	bl	801408c <USBD_StdDevReq>
 80139c6:	4603      	mov	r3, r0
 80139c8:	73fb      	strb	r3, [r7, #15]
      break;
 80139ca:	e020      	b.n	8013a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139d2:	4619      	mov	r1, r3
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f000 fbcb 	bl	8014170 <USBD_StdItfReq>
 80139da:	4603      	mov	r3, r0
 80139dc:	73fb      	strb	r3, [r7, #15]
      break;
 80139de:	e016      	b.n	8013a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139e6:	4619      	mov	r1, r3
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f000 fc2d 	bl	8014248 <USBD_StdEPReq>
 80139ee:	4603      	mov	r3, r0
 80139f0:	73fb      	strb	r3, [r7, #15]
      break;
 80139f2:	e00c      	b.n	8013a0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80139fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	4619      	mov	r1, r3
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f001 fe26 	bl	8015654 <USBD_LL_StallEP>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a0c:	bf00      	nop
  }

  return ret;
 8013a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b086      	sub	sp, #24
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	460b      	mov	r3, r1
 8013a22:	607a      	str	r2, [r7, #4]
 8013a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a26:	2300      	movs	r3, #0
 8013a28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013a2a:	7afb      	ldrb	r3, [r7, #11]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d16e      	bne.n	8013b0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013a36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013a3e:	2b03      	cmp	r3, #3
 8013a40:	f040 8098 	bne.w	8013b74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	689a      	ldr	r2, [r3, #8]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	68db      	ldr	r3, [r3, #12]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d913      	bls.n	8013a78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	689a      	ldr	r2, [r3, #8]
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	1ad2      	subs	r2, r2, r3
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	689b      	ldr	r3, [r3, #8]
 8013a66:	4293      	cmp	r3, r2
 8013a68:	bf28      	it	cs
 8013a6a:	4613      	movcs	r3, r2
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	6879      	ldr	r1, [r7, #4]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f001 f9be 	bl	8014df2 <USBD_CtlContinueRx>
 8013a76:	e07d      	b.n	8013b74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013a7e:	f003 031f 	and.w	r3, r3, #31
 8013a82:	2b02      	cmp	r3, #2
 8013a84:	d014      	beq.n	8013ab0 <USBD_LL_DataOutStage+0x98>
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d81d      	bhi.n	8013ac6 <USBD_LL_DataOutStage+0xae>
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d002      	beq.n	8013a94 <USBD_LL_DataOutStage+0x7c>
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d003      	beq.n	8013a9a <USBD_LL_DataOutStage+0x82>
 8013a92:	e018      	b.n	8013ac6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013a94:	2300      	movs	r3, #0
 8013a96:	75bb      	strb	r3, [r7, #22]
            break;
 8013a98:	e018      	b.n	8013acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	f000 fa64 	bl	8013f72 <USBD_CoreFindIF>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	75bb      	strb	r3, [r7, #22]
            break;
 8013aae:	e00d      	b.n	8013acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	4619      	mov	r1, r3
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f000 fa66 	bl	8013f8c <USBD_CoreFindEP>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	75bb      	strb	r3, [r7, #22]
            break;
 8013ac4:	e002      	b.n	8013acc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8013aca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013acc:	7dbb      	ldrb	r3, [r7, #22]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d119      	bne.n	8013b06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	2b03      	cmp	r3, #3
 8013adc:	d113      	bne.n	8013b06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013ade:	7dba      	ldrb	r2, [r7, #22]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	32ae      	adds	r2, #174	@ 0xae
 8013ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae8:	691b      	ldr	r3, [r3, #16]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00b      	beq.n	8013b06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013aee:	7dba      	ldrb	r2, [r7, #22]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013af6:	7dba      	ldrb	r2, [r7, #22]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	32ae      	adds	r2, #174	@ 0xae
 8013afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f001 f984 	bl	8014e14 <USBD_CtlSendStatus>
 8013b0c:	e032      	b.n	8013b74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013b0e:	7afb      	ldrb	r3, [r7, #11]
 8013b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	4619      	mov	r1, r3
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f000 fa37 	bl	8013f8c <USBD_CoreFindEP>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b22:	7dbb      	ldrb	r3, [r7, #22]
 8013b24:	2bff      	cmp	r3, #255	@ 0xff
 8013b26:	d025      	beq.n	8013b74 <USBD_LL_DataOutStage+0x15c>
 8013b28:	7dbb      	ldrb	r3, [r7, #22]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d122      	bne.n	8013b74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	2b03      	cmp	r3, #3
 8013b38:	d117      	bne.n	8013b6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013b3a:	7dba      	ldrb	r2, [r7, #22]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	32ae      	adds	r2, #174	@ 0xae
 8013b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b44:	699b      	ldr	r3, [r3, #24]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00f      	beq.n	8013b6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013b4a:	7dba      	ldrb	r2, [r7, #22]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013b52:	7dba      	ldrb	r2, [r7, #22]
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	32ae      	adds	r2, #174	@ 0xae
 8013b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b5c:	699b      	ldr	r3, [r3, #24]
 8013b5e:	7afa      	ldrb	r2, [r7, #11]
 8013b60:	4611      	mov	r1, r2
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	4798      	blx	r3
 8013b66:	4603      	mov	r3, r0
 8013b68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013b6a:	7dfb      	ldrb	r3, [r7, #23]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d001      	beq.n	8013b74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013b70:	7dfb      	ldrb	r3, [r7, #23]
 8013b72:	e000      	b.n	8013b76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3718      	adds	r7, #24
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b086      	sub	sp, #24
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	60f8      	str	r0, [r7, #12]
 8013b86:	460b      	mov	r3, r1
 8013b88:	607a      	str	r2, [r7, #4]
 8013b8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013b8c:	7afb      	ldrb	r3, [r7, #11]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d16f      	bne.n	8013c72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3314      	adds	r3, #20
 8013b96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	d15a      	bne.n	8013c58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	689a      	ldr	r2, [r3, #8]
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d914      	bls.n	8013bd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	689a      	ldr	r2, [r3, #8]
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	1ad2      	subs	r2, r2, r3
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	689b      	ldr	r3, [r3, #8]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6879      	ldr	r1, [r7, #4]
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f001 f8e6 	bl	8014d96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bca:	2300      	movs	r3, #0
 8013bcc:	2200      	movs	r2, #0
 8013bce:	2100      	movs	r1, #0
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f001 fde9 	bl	80157a8 <USBD_LL_PrepareReceive>
 8013bd6:	e03f      	b.n	8013c58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	68da      	ldr	r2, [r3, #12]
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	689b      	ldr	r3, [r3, #8]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d11c      	bne.n	8013c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d316      	bcc.n	8013c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	685a      	ldr	r2, [r3, #4]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d20f      	bcs.n	8013c1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013bfe:	2200      	movs	r2, #0
 8013c00:	2100      	movs	r1, #0
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f001 f8c7 	bl	8014d96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c10:	2300      	movs	r3, #0
 8013c12:	2200      	movs	r2, #0
 8013c14:	2100      	movs	r1, #0
 8013c16:	68f8      	ldr	r0, [r7, #12]
 8013c18:	f001 fdc6 	bl	80157a8 <USBD_LL_PrepareReceive>
 8013c1c:	e01c      	b.n	8013c58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	2b03      	cmp	r3, #3
 8013c28:	d10f      	bne.n	8013c4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d009      	beq.n	8013c4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c44:	68db      	ldr	r3, [r3, #12]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c4a:	2180      	movs	r1, #128	@ 0x80
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f001 fd01 	bl	8015654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013c52:	68f8      	ldr	r0, [r7, #12]
 8013c54:	f001 f8f1 	bl	8014e3a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d03a      	beq.n	8013cd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013c62:	68f8      	ldr	r0, [r7, #12]
 8013c64:	f7ff fe42 	bl	80138ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013c70:	e032      	b.n	8013cd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013c72:	7afb      	ldrb	r3, [r7, #11]
 8013c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f000 f985 	bl	8013f8c <USBD_CoreFindEP>
 8013c82:	4603      	mov	r3, r0
 8013c84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c86:	7dfb      	ldrb	r3, [r7, #23]
 8013c88:	2bff      	cmp	r3, #255	@ 0xff
 8013c8a:	d025      	beq.n	8013cd8 <USBD_LL_DataInStage+0x15a>
 8013c8c:	7dfb      	ldrb	r3, [r7, #23]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d122      	bne.n	8013cd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	2b03      	cmp	r3, #3
 8013c9c:	d11c      	bne.n	8013cd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013c9e:	7dfa      	ldrb	r2, [r7, #23]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	32ae      	adds	r2, #174	@ 0xae
 8013ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca8:	695b      	ldr	r3, [r3, #20]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d014      	beq.n	8013cd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013cae:	7dfa      	ldrb	r2, [r7, #23]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013cb6:	7dfa      	ldrb	r2, [r7, #23]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	32ae      	adds	r2, #174	@ 0xae
 8013cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	7afa      	ldrb	r2, [r7, #11]
 8013cc4:	4611      	mov	r1, r2
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	4798      	blx	r3
 8013cca:	4603      	mov	r3, r0
 8013ccc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013cce:	7dbb      	ldrb	r3, [r7, #22]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d001      	beq.n	8013cd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013cd4:	7dbb      	ldrb	r3, [r7, #22]
 8013cd6:	e000      	b.n	8013cda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013cd8:	2300      	movs	r3, #0
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3718      	adds	r7, #24
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b084      	sub	sp, #16
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2200      	movs	r2, #0
 8013d08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d014      	beq.n	8013d48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00e      	beq.n	8013d48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	6852      	ldr	r2, [r2, #4]
 8013d36:	b2d2      	uxtb	r2, r2
 8013d38:	4611      	mov	r1, r2
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	4798      	blx	r3
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013d44:	2303      	movs	r3, #3
 8013d46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d48:	2340      	movs	r3, #64	@ 0x40
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f001 fc3b 	bl	80155ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2240      	movs	r2, #64	@ 0x40
 8013d60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d64:	2340      	movs	r3, #64	@ 0x40
 8013d66:	2200      	movs	r2, #0
 8013d68:	2180      	movs	r1, #128	@ 0x80
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f001 fc2d 	bl	80155ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2201      	movs	r2, #1
 8013d74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2240      	movs	r2, #64	@ 0x40
 8013d7a:	621a      	str	r2, [r3, #32]

  return ret;
 8013d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3710      	adds	r7, #16
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}

08013d86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013d86:	b480      	push	{r7}
 8013d88:	b083      	sub	sp, #12
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
 8013d8e:	460b      	mov	r3, r1
 8013d90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	78fa      	ldrb	r2, [r7, #3]
 8013d96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013d98:	2300      	movs	r3, #0
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	370c      	adds	r7, #12
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr

08013da6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013da6:	b480      	push	{r7}
 8013da8:	b083      	sub	sp, #12
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013db4:	b2db      	uxtb	r3, r3
 8013db6:	2b04      	cmp	r3, #4
 8013db8:	d006      	beq.n	8013dc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dc0:	b2da      	uxtb	r2, r3
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2204      	movs	r2, #4
 8013dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	370c      	adds	r7, #12
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013dde:	b480      	push	{r7}
 8013de0:	b083      	sub	sp, #12
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	2b04      	cmp	r3, #4
 8013df0:	d106      	bne.n	8013e00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr

08013e0e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b082      	sub	sp, #8
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	d110      	bne.n	8013e44 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00b      	beq.n	8013e44 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e32:	69db      	ldr	r3, [r3, #28]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d005      	beq.n	8013e44 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e3e:	69db      	ldr	r3, [r3, #28]
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	460b      	mov	r3, r1
 8013e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	32ae      	adds	r2, #174	@ 0xae
 8013e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d101      	bne.n	8013e70 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013e6c:	2303      	movs	r3, #3
 8013e6e:	e01c      	b.n	8013eaa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	2b03      	cmp	r3, #3
 8013e7a:	d115      	bne.n	8013ea8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	32ae      	adds	r2, #174	@ 0xae
 8013e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e8a:	6a1b      	ldr	r3, [r3, #32]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00b      	beq.n	8013ea8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	32ae      	adds	r2, #174	@ 0xae
 8013e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9e:	6a1b      	ldr	r3, [r3, #32]
 8013ea0:	78fa      	ldrb	r2, [r7, #3]
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b082      	sub	sp, #8
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	6078      	str	r0, [r7, #4]
 8013eba:	460b      	mov	r3, r1
 8013ebc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	32ae      	adds	r2, #174	@ 0xae
 8013ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d101      	bne.n	8013ed4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013ed0:	2303      	movs	r3, #3
 8013ed2:	e01c      	b.n	8013f0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013eda:	b2db      	uxtb	r3, r3
 8013edc:	2b03      	cmp	r3, #3
 8013ede:	d115      	bne.n	8013f0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	32ae      	adds	r2, #174	@ 0xae
 8013eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00b      	beq.n	8013f0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	32ae      	adds	r2, #174	@ 0xae
 8013efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f04:	78fa      	ldrb	r2, [r7, #3]
 8013f06:	4611      	mov	r1, r2
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013f16:	b480      	push	{r7}
 8013f18:	b083      	sub	sp, #12
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013f1e:	2300      	movs	r3, #0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	370c      	adds	r7, #12
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr

08013f2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013f34:	2300      	movs	r3, #0
 8013f36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d00e      	beq.n	8013f68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	687a      	ldr	r2, [r7, #4]
 8013f54:	6852      	ldr	r2, [r2, #4]
 8013f56:	b2d2      	uxtb	r2, r2
 8013f58:	4611      	mov	r1, r2
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	4798      	blx	r3
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d001      	beq.n	8013f68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013f64:	2303      	movs	r3, #3
 8013f66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f72:	b480      	push	{r7}
 8013f74:	b083      	sub	sp, #12
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013fa6:	b580      	push	{r7, lr}
 8013fa8:	b086      	sub	sp, #24
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
 8013fae:	460b      	mov	r3, r1
 8013fb0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	885b      	ldrh	r3, [r3, #2]
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	7812      	ldrb	r2, [r2, #0]
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d91f      	bls.n	801400c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013fd2:	e013      	b.n	8013ffc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013fd4:	f107 030a 	add.w	r3, r7, #10
 8013fd8:	4619      	mov	r1, r3
 8013fda:	6978      	ldr	r0, [r7, #20]
 8013fdc:	f000 f81b 	bl	8014016 <USBD_GetNextDesc>
 8013fe0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	785b      	ldrb	r3, [r3, #1]
 8013fe6:	2b05      	cmp	r3, #5
 8013fe8:	d108      	bne.n	8013ffc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	789b      	ldrb	r3, [r3, #2]
 8013ff2:	78fa      	ldrb	r2, [r7, #3]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d008      	beq.n	801400a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	885b      	ldrh	r3, [r3, #2]
 8014000:	b29a      	uxth	r2, r3
 8014002:	897b      	ldrh	r3, [r7, #10]
 8014004:	429a      	cmp	r2, r3
 8014006:	d8e5      	bhi.n	8013fd4 <USBD_GetEpDesc+0x2e>
 8014008:	e000      	b.n	801400c <USBD_GetEpDesc+0x66>
          break;
 801400a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801400c:	693b      	ldr	r3, [r7, #16]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014016:	b480      	push	{r7}
 8014018:	b085      	sub	sp, #20
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
 801401e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	881b      	ldrh	r3, [r3, #0]
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	7812      	ldrb	r2, [r2, #0]
 801402c:	4413      	add	r3, r2
 801402e:	b29a      	uxth	r2, r3
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	461a      	mov	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4413      	add	r3, r2
 801403e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014040:	68fb      	ldr	r3, [r7, #12]
}
 8014042:	4618      	mov	r0, r3
 8014044:	3714      	adds	r7, #20
 8014046:	46bd      	mov	sp, r7
 8014048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404c:	4770      	bx	lr

0801404e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801404e:	b480      	push	{r7}
 8014050:	b087      	sub	sp, #28
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	3301      	adds	r3, #1
 8014064:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801406c:	8a3b      	ldrh	r3, [r7, #16]
 801406e:	021b      	lsls	r3, r3, #8
 8014070:	b21a      	sxth	r2, r3
 8014072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014076:	4313      	orrs	r3, r2
 8014078:	b21b      	sxth	r3, r3
 801407a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801407c:	89fb      	ldrh	r3, [r7, #14]
}
 801407e:	4618      	mov	r0, r3
 8014080:	371c      	adds	r7, #28
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr
	...

0801408c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014096:	2300      	movs	r3, #0
 8014098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80140a2:	2b40      	cmp	r3, #64	@ 0x40
 80140a4:	d005      	beq.n	80140b2 <USBD_StdDevReq+0x26>
 80140a6:	2b40      	cmp	r3, #64	@ 0x40
 80140a8:	d857      	bhi.n	801415a <USBD_StdDevReq+0xce>
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00f      	beq.n	80140ce <USBD_StdDevReq+0x42>
 80140ae:	2b20      	cmp	r3, #32
 80140b0:	d153      	bne.n	801415a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	32ae      	adds	r2, #174	@ 0xae
 80140bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	4798      	blx	r3
 80140c8:	4603      	mov	r3, r0
 80140ca:	73fb      	strb	r3, [r7, #15]
      break;
 80140cc:	e04a      	b.n	8014164 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	785b      	ldrb	r3, [r3, #1]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d83b      	bhi.n	801414e <USBD_StdDevReq+0xc2>
 80140d6:	a201      	add	r2, pc, #4	@ (adr r2, 80140dc <USBD_StdDevReq+0x50>)
 80140d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140dc:	08014131 	.word	0x08014131
 80140e0:	08014145 	.word	0x08014145
 80140e4:	0801414f 	.word	0x0801414f
 80140e8:	0801413b 	.word	0x0801413b
 80140ec:	0801414f 	.word	0x0801414f
 80140f0:	0801410f 	.word	0x0801410f
 80140f4:	08014105 	.word	0x08014105
 80140f8:	0801414f 	.word	0x0801414f
 80140fc:	08014127 	.word	0x08014127
 8014100:	08014119 	.word	0x08014119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 fa3c 	bl	8014584 <USBD_GetDescriptor>
          break;
 801410c:	e024      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 fbcb 	bl	80148ac <USBD_SetAddress>
          break;
 8014116:	e01f      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fc0a 	bl	8014934 <USBD_SetConfig>
 8014120:	4603      	mov	r3, r0
 8014122:	73fb      	strb	r3, [r7, #15]
          break;
 8014124:	e018      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fcad 	bl	8014a88 <USBD_GetConfig>
          break;
 801412e:	e013      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014130:	6839      	ldr	r1, [r7, #0]
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 fcde 	bl	8014af4 <USBD_GetStatus>
          break;
 8014138:	e00e      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 fd0d 	bl	8014b5c <USBD_SetFeature>
          break;
 8014142:	e009      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 fd31 	bl	8014bae <USBD_ClrFeature>
          break;
 801414c:	e004      	b.n	8014158 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801414e:	6839      	ldr	r1, [r7, #0]
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f000 fd88 	bl	8014c66 <USBD_CtlError>
          break;
 8014156:	bf00      	nop
      }
      break;
 8014158:	e004      	b.n	8014164 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801415a:	6839      	ldr	r1, [r7, #0]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fd82 	bl	8014c66 <USBD_CtlError>
      break;
 8014162:	bf00      	nop
  }

  return ret;
 8014164:	7bfb      	ldrb	r3, [r7, #15]
}
 8014166:	4618      	mov	r0, r3
 8014168:	3710      	adds	r7, #16
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop

08014170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801417a:	2300      	movs	r3, #0
 801417c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014186:	2b40      	cmp	r3, #64	@ 0x40
 8014188:	d005      	beq.n	8014196 <USBD_StdItfReq+0x26>
 801418a:	2b40      	cmp	r3, #64	@ 0x40
 801418c:	d852      	bhi.n	8014234 <USBD_StdItfReq+0xc4>
 801418e:	2b00      	cmp	r3, #0
 8014190:	d001      	beq.n	8014196 <USBD_StdItfReq+0x26>
 8014192:	2b20      	cmp	r3, #32
 8014194:	d14e      	bne.n	8014234 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801419c:	b2db      	uxtb	r3, r3
 801419e:	3b01      	subs	r3, #1
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d840      	bhi.n	8014226 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	889b      	ldrh	r3, [r3, #4]
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d836      	bhi.n	801421c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	889b      	ldrh	r3, [r3, #4]
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	4619      	mov	r1, r3
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7ff fedb 	bl	8013f72 <USBD_CoreFindIF>
 80141bc:	4603      	mov	r3, r0
 80141be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141c0:	7bbb      	ldrb	r3, [r7, #14]
 80141c2:	2bff      	cmp	r3, #255	@ 0xff
 80141c4:	d01d      	beq.n	8014202 <USBD_StdItfReq+0x92>
 80141c6:	7bbb      	ldrb	r3, [r7, #14]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d11a      	bne.n	8014202 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80141cc:	7bba      	ldrb	r2, [r7, #14]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	32ae      	adds	r2, #174	@ 0xae
 80141d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d6:	689b      	ldr	r3, [r3, #8]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d00f      	beq.n	80141fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80141dc:	7bba      	ldrb	r2, [r7, #14]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80141e4:	7bba      	ldrb	r2, [r7, #14]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	32ae      	adds	r2, #174	@ 0xae
 80141ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	6839      	ldr	r1, [r7, #0]
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	4798      	blx	r3
 80141f6:	4603      	mov	r3, r0
 80141f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141fa:	e004      	b.n	8014206 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80141fc:	2303      	movs	r3, #3
 80141fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014200:	e001      	b.n	8014206 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014202:	2303      	movs	r3, #3
 8014204:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	88db      	ldrh	r3, [r3, #6]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d110      	bne.n	8014230 <USBD_StdItfReq+0xc0>
 801420e:	7bfb      	ldrb	r3, [r7, #15]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10d      	bne.n	8014230 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fdfd 	bl	8014e14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801421a:	e009      	b.n	8014230 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fd21 	bl	8014c66 <USBD_CtlError>
          break;
 8014224:	e004      	b.n	8014230 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014226:	6839      	ldr	r1, [r7, #0]
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f000 fd1c 	bl	8014c66 <USBD_CtlError>
          break;
 801422e:	e000      	b.n	8014232 <USBD_StdItfReq+0xc2>
          break;
 8014230:	bf00      	nop
      }
      break;
 8014232:	e004      	b.n	801423e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014234:	6839      	ldr	r1, [r7, #0]
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fd15 	bl	8014c66 <USBD_CtlError>
      break;
 801423c:	bf00      	nop
  }

  return ret;
 801423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014252:	2300      	movs	r3, #0
 8014254:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	889b      	ldrh	r3, [r3, #4]
 801425a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014264:	2b40      	cmp	r3, #64	@ 0x40
 8014266:	d007      	beq.n	8014278 <USBD_StdEPReq+0x30>
 8014268:	2b40      	cmp	r3, #64	@ 0x40
 801426a:	f200 817f 	bhi.w	801456c <USBD_StdEPReq+0x324>
 801426e:	2b00      	cmp	r3, #0
 8014270:	d02a      	beq.n	80142c8 <USBD_StdEPReq+0x80>
 8014272:	2b20      	cmp	r3, #32
 8014274:	f040 817a 	bne.w	801456c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014278:	7bbb      	ldrb	r3, [r7, #14]
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7ff fe85 	bl	8013f8c <USBD_CoreFindEP>
 8014282:	4603      	mov	r3, r0
 8014284:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014286:	7b7b      	ldrb	r3, [r7, #13]
 8014288:	2bff      	cmp	r3, #255	@ 0xff
 801428a:	f000 8174 	beq.w	8014576 <USBD_StdEPReq+0x32e>
 801428e:	7b7b      	ldrb	r3, [r7, #13]
 8014290:	2b00      	cmp	r3, #0
 8014292:	f040 8170 	bne.w	8014576 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014296:	7b7a      	ldrb	r2, [r7, #13]
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801429e:	7b7a      	ldrb	r2, [r7, #13]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	32ae      	adds	r2, #174	@ 0xae
 80142a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 8163 	beq.w	8014576 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80142b0:	7b7a      	ldrb	r2, [r7, #13]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	32ae      	adds	r2, #174	@ 0xae
 80142b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ba:	689b      	ldr	r3, [r3, #8]
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	4798      	blx	r3
 80142c2:	4603      	mov	r3, r0
 80142c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80142c6:	e156      	b.n	8014576 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	785b      	ldrb	r3, [r3, #1]
 80142cc:	2b03      	cmp	r3, #3
 80142ce:	d008      	beq.n	80142e2 <USBD_StdEPReq+0x9a>
 80142d0:	2b03      	cmp	r3, #3
 80142d2:	f300 8145 	bgt.w	8014560 <USBD_StdEPReq+0x318>
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 809b 	beq.w	8014412 <USBD_StdEPReq+0x1ca>
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d03c      	beq.n	801435a <USBD_StdEPReq+0x112>
 80142e0:	e13e      	b.n	8014560 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b02      	cmp	r3, #2
 80142ec:	d002      	beq.n	80142f4 <USBD_StdEPReq+0xac>
 80142ee:	2b03      	cmp	r3, #3
 80142f0:	d016      	beq.n	8014320 <USBD_StdEPReq+0xd8>
 80142f2:	e02c      	b.n	801434e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142f4:	7bbb      	ldrb	r3, [r7, #14]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00d      	beq.n	8014316 <USBD_StdEPReq+0xce>
 80142fa:	7bbb      	ldrb	r3, [r7, #14]
 80142fc:	2b80      	cmp	r3, #128	@ 0x80
 80142fe:	d00a      	beq.n	8014316 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014300:	7bbb      	ldrb	r3, [r7, #14]
 8014302:	4619      	mov	r1, r3
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f001 f9a5 	bl	8015654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801430a:	2180      	movs	r1, #128	@ 0x80
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f001 f9a1 	bl	8015654 <USBD_LL_StallEP>
 8014312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014314:	e020      	b.n	8014358 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014316:	6839      	ldr	r1, [r7, #0]
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f000 fca4 	bl	8014c66 <USBD_CtlError>
              break;
 801431e:	e01b      	b.n	8014358 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	885b      	ldrh	r3, [r3, #2]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10e      	bne.n	8014346 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014328:	7bbb      	ldrb	r3, [r7, #14]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00b      	beq.n	8014346 <USBD_StdEPReq+0xfe>
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	2b80      	cmp	r3, #128	@ 0x80
 8014332:	d008      	beq.n	8014346 <USBD_StdEPReq+0xfe>
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	88db      	ldrh	r3, [r3, #6]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d104      	bne.n	8014346 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801433c:	7bbb      	ldrb	r3, [r7, #14]
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f001 f987 	bl	8015654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 fd64 	bl	8014e14 <USBD_CtlSendStatus>

              break;
 801434c:	e004      	b.n	8014358 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801434e:	6839      	ldr	r1, [r7, #0]
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 fc88 	bl	8014c66 <USBD_CtlError>
              break;
 8014356:	bf00      	nop
          }
          break;
 8014358:	e107      	b.n	801456a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014360:	b2db      	uxtb	r3, r3
 8014362:	2b02      	cmp	r3, #2
 8014364:	d002      	beq.n	801436c <USBD_StdEPReq+0x124>
 8014366:	2b03      	cmp	r3, #3
 8014368:	d016      	beq.n	8014398 <USBD_StdEPReq+0x150>
 801436a:	e04b      	b.n	8014404 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801436c:	7bbb      	ldrb	r3, [r7, #14]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d00d      	beq.n	801438e <USBD_StdEPReq+0x146>
 8014372:	7bbb      	ldrb	r3, [r7, #14]
 8014374:	2b80      	cmp	r3, #128	@ 0x80
 8014376:	d00a      	beq.n	801438e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f001 f969 	bl	8015654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014382:	2180      	movs	r1, #128	@ 0x80
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f001 f965 	bl	8015654 <USBD_LL_StallEP>
 801438a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801438c:	e040      	b.n	8014410 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801438e:	6839      	ldr	r1, [r7, #0]
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 fc68 	bl	8014c66 <USBD_CtlError>
              break;
 8014396:	e03b      	b.n	8014410 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	885b      	ldrh	r3, [r3, #2]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d136      	bne.n	801440e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80143a0:	7bbb      	ldrb	r3, [r7, #14]
 80143a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d004      	beq.n	80143b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80143aa:	7bbb      	ldrb	r3, [r7, #14]
 80143ac:	4619      	mov	r1, r3
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f001 f96f 	bl	8015692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fd2d 	bl	8014e14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80143ba:	7bbb      	ldrb	r3, [r7, #14]
 80143bc:	4619      	mov	r1, r3
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7ff fde4 	bl	8013f8c <USBD_CoreFindEP>
 80143c4:	4603      	mov	r3, r0
 80143c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143c8:	7b7b      	ldrb	r3, [r7, #13]
 80143ca:	2bff      	cmp	r3, #255	@ 0xff
 80143cc:	d01f      	beq.n	801440e <USBD_StdEPReq+0x1c6>
 80143ce:	7b7b      	ldrb	r3, [r7, #13]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d11c      	bne.n	801440e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80143d4:	7b7a      	ldrb	r2, [r7, #13]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80143dc:	7b7a      	ldrb	r2, [r7, #13]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	32ae      	adds	r2, #174	@ 0xae
 80143e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143e6:	689b      	ldr	r3, [r3, #8]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d010      	beq.n	801440e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80143ec:	7b7a      	ldrb	r2, [r7, #13]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	32ae      	adds	r2, #174	@ 0xae
 80143f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f6:	689b      	ldr	r3, [r3, #8]
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	4798      	blx	r3
 80143fe:	4603      	mov	r3, r0
 8014400:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014402:	e004      	b.n	801440e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 fc2d 	bl	8014c66 <USBD_CtlError>
              break;
 801440c:	e000      	b.n	8014410 <USBD_StdEPReq+0x1c8>
              break;
 801440e:	bf00      	nop
          }
          break;
 8014410:	e0ab      	b.n	801456a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014418:	b2db      	uxtb	r3, r3
 801441a:	2b02      	cmp	r3, #2
 801441c:	d002      	beq.n	8014424 <USBD_StdEPReq+0x1dc>
 801441e:	2b03      	cmp	r3, #3
 8014420:	d032      	beq.n	8014488 <USBD_StdEPReq+0x240>
 8014422:	e097      	b.n	8014554 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014424:	7bbb      	ldrb	r3, [r7, #14]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d007      	beq.n	801443a <USBD_StdEPReq+0x1f2>
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	2b80      	cmp	r3, #128	@ 0x80
 801442e:	d004      	beq.n	801443a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 fc17 	bl	8014c66 <USBD_CtlError>
                break;
 8014438:	e091      	b.n	801455e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801443a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801443e:	2b00      	cmp	r3, #0
 8014440:	da0b      	bge.n	801445a <USBD_StdEPReq+0x212>
 8014442:	7bbb      	ldrb	r3, [r7, #14]
 8014444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014448:	4613      	mov	r3, r2
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	4413      	add	r3, r2
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	3310      	adds	r3, #16
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	4413      	add	r3, r2
 8014456:	3304      	adds	r3, #4
 8014458:	e00b      	b.n	8014472 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801445a:	7bbb      	ldrb	r3, [r7, #14]
 801445c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014460:	4613      	mov	r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4413      	add	r3, r2
 8014466:	009b      	lsls	r3, r3, #2
 8014468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	4413      	add	r3, r2
 8014470:	3304      	adds	r3, #4
 8014472:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	2200      	movs	r2, #0
 8014478:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	2202      	movs	r2, #2
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 fc6d 	bl	8014d60 <USBD_CtlSendData>
              break;
 8014486:	e06a      	b.n	801455e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801448c:	2b00      	cmp	r3, #0
 801448e:	da11      	bge.n	80144b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014490:	7bbb      	ldrb	r3, [r7, #14]
 8014492:	f003 020f 	and.w	r2, r3, #15
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	4613      	mov	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	440b      	add	r3, r1
 80144a2:	3324      	adds	r3, #36	@ 0x24
 80144a4:	881b      	ldrh	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d117      	bne.n	80144da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fbda 	bl	8014c66 <USBD_CtlError>
                  break;
 80144b2:	e054      	b.n	801455e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	f003 020f 	and.w	r2, r3, #15
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	440b      	add	r3, r1
 80144c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d104      	bne.n	80144da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fbc7 	bl	8014c66 <USBD_CtlError>
                  break;
 80144d8:	e041      	b.n	801455e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	da0b      	bge.n	80144fa <USBD_StdEPReq+0x2b2>
 80144e2:	7bbb      	ldrb	r3, [r7, #14]
 80144e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	3310      	adds	r3, #16
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	4413      	add	r3, r2
 80144f6:	3304      	adds	r3, #4
 80144f8:	e00b      	b.n	8014512 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144fa:	7bbb      	ldrb	r3, [r7, #14]
 80144fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014500:	4613      	mov	r3, r2
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	4413      	add	r3, r2
 8014510:	3304      	adds	r3, #4
 8014512:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014514:	7bbb      	ldrb	r3, [r7, #14]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <USBD_StdEPReq+0x2d8>
 801451a:	7bbb      	ldrb	r3, [r7, #14]
 801451c:	2b80      	cmp	r3, #128	@ 0x80
 801451e:	d103      	bne.n	8014528 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	2200      	movs	r2, #0
 8014524:	601a      	str	r2, [r3, #0]
 8014526:	e00e      	b.n	8014546 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014528:	7bbb      	ldrb	r3, [r7, #14]
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f001 f8cf 	bl	80156d0 <USBD_LL_IsStallEP>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d003      	beq.n	8014540 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2201      	movs	r2, #1
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	e002      	b.n	8014546 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	2200      	movs	r2, #0
 8014544:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2202      	movs	r2, #2
 801454a:	4619      	mov	r1, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 fc07 	bl	8014d60 <USBD_CtlSendData>
              break;
 8014552:	e004      	b.n	801455e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 fb85 	bl	8014c66 <USBD_CtlError>
              break;
 801455c:	bf00      	nop
          }
          break;
 801455e:	e004      	b.n	801456a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014560:	6839      	ldr	r1, [r7, #0]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fb7f 	bl	8014c66 <USBD_CtlError>
          break;
 8014568:	bf00      	nop
      }
      break;
 801456a:	e005      	b.n	8014578 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801456c:	6839      	ldr	r1, [r7, #0]
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f000 fb79 	bl	8014c66 <USBD_CtlError>
      break;
 8014574:	e000      	b.n	8014578 <USBD_StdEPReq+0x330>
      break;
 8014576:	bf00      	nop
  }

  return ret;
 8014578:	7bfb      	ldrb	r3, [r7, #15]
}
 801457a:	4618      	mov	r0, r3
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
	...

08014584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801458e:	2300      	movs	r3, #0
 8014590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014596:	2300      	movs	r3, #0
 8014598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	885b      	ldrh	r3, [r3, #2]
 801459e:	0a1b      	lsrs	r3, r3, #8
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	3b01      	subs	r3, #1
 80145a4:	2b0e      	cmp	r3, #14
 80145a6:	f200 8152 	bhi.w	801484e <USBD_GetDescriptor+0x2ca>
 80145aa:	a201      	add	r2, pc, #4	@ (adr r2, 80145b0 <USBD_GetDescriptor+0x2c>)
 80145ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b0:	08014621 	.word	0x08014621
 80145b4:	08014639 	.word	0x08014639
 80145b8:	08014679 	.word	0x08014679
 80145bc:	0801484f 	.word	0x0801484f
 80145c0:	0801484f 	.word	0x0801484f
 80145c4:	080147ef 	.word	0x080147ef
 80145c8:	0801481b 	.word	0x0801481b
 80145cc:	0801484f 	.word	0x0801484f
 80145d0:	0801484f 	.word	0x0801484f
 80145d4:	0801484f 	.word	0x0801484f
 80145d8:	0801484f 	.word	0x0801484f
 80145dc:	0801484f 	.word	0x0801484f
 80145e0:	0801484f 	.word	0x0801484f
 80145e4:	0801484f 	.word	0x0801484f
 80145e8:	080145ed 	.word	0x080145ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145f2:	69db      	ldr	r3, [r3, #28]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d00b      	beq.n	8014610 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145fe:	69db      	ldr	r3, [r3, #28]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	7c12      	ldrb	r2, [r2, #16]
 8014604:	f107 0108 	add.w	r1, r7, #8
 8014608:	4610      	mov	r0, r2
 801460a:	4798      	blx	r3
 801460c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801460e:	e126      	b.n	801485e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014610:	6839      	ldr	r1, [r7, #0]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 fb27 	bl	8014c66 <USBD_CtlError>
        err++;
 8014618:	7afb      	ldrb	r3, [r7, #11]
 801461a:	3301      	adds	r3, #1
 801461c:	72fb      	strb	r3, [r7, #11]
      break;
 801461e:	e11e      	b.n	801485e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	7c12      	ldrb	r2, [r2, #16]
 801462c:	f107 0108 	add.w	r1, r7, #8
 8014630:	4610      	mov	r0, r2
 8014632:	4798      	blx	r3
 8014634:	60f8      	str	r0, [r7, #12]
      break;
 8014636:	e112      	b.n	801485e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	7c1b      	ldrb	r3, [r3, #16]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d10d      	bne.n	801465c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014648:	f107 0208 	add.w	r2, r7, #8
 801464c:	4610      	mov	r0, r2
 801464e:	4798      	blx	r3
 8014650:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	3301      	adds	r3, #1
 8014656:	2202      	movs	r2, #2
 8014658:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801465a:	e100      	b.n	801485e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014664:	f107 0208 	add.w	r2, r7, #8
 8014668:	4610      	mov	r0, r2
 801466a:	4798      	blx	r3
 801466c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	3301      	adds	r3, #1
 8014672:	2202      	movs	r2, #2
 8014674:	701a      	strb	r2, [r3, #0]
      break;
 8014676:	e0f2      	b.n	801485e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	885b      	ldrh	r3, [r3, #2]
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b05      	cmp	r3, #5
 8014680:	f200 80ac 	bhi.w	80147dc <USBD_GetDescriptor+0x258>
 8014684:	a201      	add	r2, pc, #4	@ (adr r2, 801468c <USBD_GetDescriptor+0x108>)
 8014686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468a:	bf00      	nop
 801468c:	080146a5 	.word	0x080146a5
 8014690:	080146d9 	.word	0x080146d9
 8014694:	0801470d 	.word	0x0801470d
 8014698:	08014741 	.word	0x08014741
 801469c:	08014775 	.word	0x08014775
 80146a0:	080147a9 	.word	0x080147a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00b      	beq.n	80146c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	7c12      	ldrb	r2, [r2, #16]
 80146bc:	f107 0108 	add.w	r1, r7, #8
 80146c0:	4610      	mov	r0, r2
 80146c2:	4798      	blx	r3
 80146c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146c6:	e091      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f000 facb 	bl	8014c66 <USBD_CtlError>
            err++;
 80146d0:	7afb      	ldrb	r3, [r7, #11]
 80146d2:	3301      	adds	r3, #1
 80146d4:	72fb      	strb	r3, [r7, #11]
          break;
 80146d6:	e089      	b.n	80147ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d00b      	beq.n	80146fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146ea:	689b      	ldr	r3, [r3, #8]
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	7c12      	ldrb	r2, [r2, #16]
 80146f0:	f107 0108 	add.w	r1, r7, #8
 80146f4:	4610      	mov	r0, r2
 80146f6:	4798      	blx	r3
 80146f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146fa:	e077      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146fc:	6839      	ldr	r1, [r7, #0]
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 fab1 	bl	8014c66 <USBD_CtlError>
            err++;
 8014704:	7afb      	ldrb	r3, [r7, #11]
 8014706:	3301      	adds	r3, #1
 8014708:	72fb      	strb	r3, [r7, #11]
          break;
 801470a:	e06f      	b.n	80147ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00b      	beq.n	8014730 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	7c12      	ldrb	r2, [r2, #16]
 8014724:	f107 0108 	add.w	r1, r7, #8
 8014728:	4610      	mov	r0, r2
 801472a:	4798      	blx	r3
 801472c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801472e:	e05d      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014730:	6839      	ldr	r1, [r7, #0]
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 fa97 	bl	8014c66 <USBD_CtlError>
            err++;
 8014738:	7afb      	ldrb	r3, [r7, #11]
 801473a:	3301      	adds	r3, #1
 801473c:	72fb      	strb	r3, [r7, #11]
          break;
 801473e:	e055      	b.n	80147ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014746:	691b      	ldr	r3, [r3, #16]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00b      	beq.n	8014764 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014752:	691b      	ldr	r3, [r3, #16]
 8014754:	687a      	ldr	r2, [r7, #4]
 8014756:	7c12      	ldrb	r2, [r2, #16]
 8014758:	f107 0108 	add.w	r1, r7, #8
 801475c:	4610      	mov	r0, r2
 801475e:	4798      	blx	r3
 8014760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014762:	e043      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fa7d 	bl	8014c66 <USBD_CtlError>
            err++;
 801476c:	7afb      	ldrb	r3, [r7, #11]
 801476e:	3301      	adds	r3, #1
 8014770:	72fb      	strb	r3, [r7, #11]
          break;
 8014772:	e03b      	b.n	80147ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801477a:	695b      	ldr	r3, [r3, #20]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00b      	beq.n	8014798 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	7c12      	ldrb	r2, [r2, #16]
 801478c:	f107 0108 	add.w	r1, r7, #8
 8014790:	4610      	mov	r0, r2
 8014792:	4798      	blx	r3
 8014794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014796:	e029      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fa63 	bl	8014c66 <USBD_CtlError>
            err++;
 80147a0:	7afb      	ldrb	r3, [r7, #11]
 80147a2:	3301      	adds	r3, #1
 80147a4:	72fb      	strb	r3, [r7, #11]
          break;
 80147a6:	e021      	b.n	80147ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147ae:	699b      	ldr	r3, [r3, #24]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00b      	beq.n	80147cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147ba:	699b      	ldr	r3, [r3, #24]
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	7c12      	ldrb	r2, [r2, #16]
 80147c0:	f107 0108 	add.w	r1, r7, #8
 80147c4:	4610      	mov	r0, r2
 80147c6:	4798      	blx	r3
 80147c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ca:	e00f      	b.n	80147ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 fa49 	bl	8014c66 <USBD_CtlError>
            err++;
 80147d4:	7afb      	ldrb	r3, [r7, #11]
 80147d6:	3301      	adds	r3, #1
 80147d8:	72fb      	strb	r3, [r7, #11]
          break;
 80147da:	e007      	b.n	80147ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80147dc:	6839      	ldr	r1, [r7, #0]
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f000 fa41 	bl	8014c66 <USBD_CtlError>
          err++;
 80147e4:	7afb      	ldrb	r3, [r7, #11]
 80147e6:	3301      	adds	r3, #1
 80147e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80147ea:	bf00      	nop
      }
      break;
 80147ec:	e037      	b.n	801485e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	7c1b      	ldrb	r3, [r3, #16]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d109      	bne.n	801480a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80147fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80147fe:	f107 0208 	add.w	r2, r7, #8
 8014802:	4610      	mov	r0, r2
 8014804:	4798      	blx	r3
 8014806:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014808:	e029      	b.n	801485e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fa2a 	bl	8014c66 <USBD_CtlError>
        err++;
 8014812:	7afb      	ldrb	r3, [r7, #11]
 8014814:	3301      	adds	r3, #1
 8014816:	72fb      	strb	r3, [r7, #11]
      break;
 8014818:	e021      	b.n	801485e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	7c1b      	ldrb	r3, [r3, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10d      	bne.n	801483e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801482a:	f107 0208 	add.w	r2, r7, #8
 801482e:	4610      	mov	r0, r2
 8014830:	4798      	blx	r3
 8014832:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	3301      	adds	r3, #1
 8014838:	2207      	movs	r2, #7
 801483a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801483c:	e00f      	b.n	801485e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801483e:	6839      	ldr	r1, [r7, #0]
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f000 fa10 	bl	8014c66 <USBD_CtlError>
        err++;
 8014846:	7afb      	ldrb	r3, [r7, #11]
 8014848:	3301      	adds	r3, #1
 801484a:	72fb      	strb	r3, [r7, #11]
      break;
 801484c:	e007      	b.n	801485e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fa08 	bl	8014c66 <USBD_CtlError>
      err++;
 8014856:	7afb      	ldrb	r3, [r7, #11]
 8014858:	3301      	adds	r3, #1
 801485a:	72fb      	strb	r3, [r7, #11]
      break;
 801485c:	bf00      	nop
  }

  if (err != 0U)
 801485e:	7afb      	ldrb	r3, [r7, #11]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d11e      	bne.n	80148a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	88db      	ldrh	r3, [r3, #6]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d016      	beq.n	801489a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801486c:	893b      	ldrh	r3, [r7, #8]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d00e      	beq.n	8014890 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	88da      	ldrh	r2, [r3, #6]
 8014876:	893b      	ldrh	r3, [r7, #8]
 8014878:	4293      	cmp	r3, r2
 801487a:	bf28      	it	cs
 801487c:	4613      	movcs	r3, r2
 801487e:	b29b      	uxth	r3, r3
 8014880:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014882:	893b      	ldrh	r3, [r7, #8]
 8014884:	461a      	mov	r2, r3
 8014886:	68f9      	ldr	r1, [r7, #12]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 fa69 	bl	8014d60 <USBD_CtlSendData>
 801488e:	e009      	b.n	80148a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 f9e7 	bl	8014c66 <USBD_CtlError>
 8014898:	e004      	b.n	80148a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 faba 	bl	8014e14 <USBD_CtlSendStatus>
 80148a0:	e000      	b.n	80148a4 <USBD_GetDescriptor+0x320>
    return;
 80148a2:	bf00      	nop
  }
}
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop

080148ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	889b      	ldrh	r3, [r3, #4]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d131      	bne.n	8014922 <USBD_SetAddress+0x76>
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	88db      	ldrh	r3, [r3, #6]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d12d      	bne.n	8014922 <USBD_SetAddress+0x76>
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	885b      	ldrh	r3, [r3, #2]
 80148ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80148cc:	d829      	bhi.n	8014922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	885b      	ldrh	r3, [r3, #2]
 80148d2:	b2db      	uxtb	r3, r3
 80148d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80148d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	2b03      	cmp	r3, #3
 80148e4:	d104      	bne.n	80148f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80148e6:	6839      	ldr	r1, [r7, #0]
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 f9bc 	bl	8014c66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148ee:	e01d      	b.n	801492c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	7bfa      	ldrb	r2, [r7, #15]
 80148f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80148f8:	7bfb      	ldrb	r3, [r7, #15]
 80148fa:	4619      	mov	r1, r3
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f000 ff13 	bl	8015728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 fa86 	bl	8014e14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014908:	7bfb      	ldrb	r3, [r7, #15]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d004      	beq.n	8014918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2202      	movs	r2, #2
 8014912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014916:	e009      	b.n	801492c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2201      	movs	r2, #1
 801491c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014920:	e004      	b.n	801492c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014922:	6839      	ldr	r1, [r7, #0]
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f000 f99e 	bl	8014c66 <USBD_CtlError>
  }
}
 801492a:	bf00      	nop
 801492c:	bf00      	nop
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801493e:	2300      	movs	r3, #0
 8014940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	885b      	ldrh	r3, [r3, #2]
 8014946:	b2da      	uxtb	r2, r3
 8014948:	4b4e      	ldr	r3, [pc, #312]	@ (8014a84 <USBD_SetConfig+0x150>)
 801494a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801494c:	4b4d      	ldr	r3, [pc, #308]	@ (8014a84 <USBD_SetConfig+0x150>)
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b01      	cmp	r3, #1
 8014952:	d905      	bls.n	8014960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014954:	6839      	ldr	r1, [r7, #0]
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 f985 	bl	8014c66 <USBD_CtlError>
    return USBD_FAIL;
 801495c:	2303      	movs	r3, #3
 801495e:	e08c      	b.n	8014a7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014966:	b2db      	uxtb	r3, r3
 8014968:	2b02      	cmp	r3, #2
 801496a:	d002      	beq.n	8014972 <USBD_SetConfig+0x3e>
 801496c:	2b03      	cmp	r3, #3
 801496e:	d029      	beq.n	80149c4 <USBD_SetConfig+0x90>
 8014970:	e075      	b.n	8014a5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014972:	4b44      	ldr	r3, [pc, #272]	@ (8014a84 <USBD_SetConfig+0x150>)
 8014974:	781b      	ldrb	r3, [r3, #0]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d020      	beq.n	80149bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801497a:	4b42      	ldr	r3, [pc, #264]	@ (8014a84 <USBD_SetConfig+0x150>)
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	461a      	mov	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014984:	4b3f      	ldr	r3, [pc, #252]	@ (8014a84 <USBD_SetConfig+0x150>)
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	4619      	mov	r1, r3
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f7fe ffb9 	bl	8013902 <USBD_SetClassConfig>
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014994:	7bfb      	ldrb	r3, [r7, #15]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d008      	beq.n	80149ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 f962 	bl	8014c66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2202      	movs	r2, #2
 80149a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149aa:	e065      	b.n	8014a78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 fa31 	bl	8014e14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2203      	movs	r2, #3
 80149b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80149ba:	e05d      	b.n	8014a78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f000 fa29 	bl	8014e14 <USBD_CtlSendStatus>
      break;
 80149c2:	e059      	b.n	8014a78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80149c4:	4b2f      	ldr	r3, [pc, #188]	@ (8014a84 <USBD_SetConfig+0x150>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d112      	bne.n	80149f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2202      	movs	r2, #2
 80149d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80149d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014a84 <USBD_SetConfig+0x150>)
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	461a      	mov	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80149de:	4b29      	ldr	r3, [pc, #164]	@ (8014a84 <USBD_SetConfig+0x150>)
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	4619      	mov	r1, r3
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7fe ffa8 	bl	801393a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f000 fa12 	bl	8014e14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149f0:	e042      	b.n	8014a78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80149f2:	4b24      	ldr	r3, [pc, #144]	@ (8014a84 <USBD_SetConfig+0x150>)
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	461a      	mov	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d02a      	beq.n	8014a56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	4619      	mov	r1, r3
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7fe ff96 	bl	801393a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8014a84 <USBD_SetConfig+0x150>)
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	461a      	mov	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a18:	4b1a      	ldr	r3, [pc, #104]	@ (8014a84 <USBD_SetConfig+0x150>)
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f7fe ff6f 	bl	8013902 <USBD_SetClassConfig>
 8014a24:	4603      	mov	r3, r0
 8014a26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a28:	7bfb      	ldrb	r3, [r7, #15]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00f      	beq.n	8014a4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014a2e:	6839      	ldr	r1, [r7, #0]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 f918 	bl	8014c66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f7fe ff7b 	bl	801393a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2202      	movs	r2, #2
 8014a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014a4c:	e014      	b.n	8014a78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 f9e0 	bl	8014e14 <USBD_CtlSendStatus>
      break;
 8014a54:	e010      	b.n	8014a78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 f9dc 	bl	8014e14 <USBD_CtlSendStatus>
      break;
 8014a5c:	e00c      	b.n	8014a78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 f900 	bl	8014c66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a66:	4b07      	ldr	r3, [pc, #28]	@ (8014a84 <USBD_SetConfig+0x150>)
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	4619      	mov	r1, r3
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f7fe ff64 	bl	801393a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a72:	2303      	movs	r3, #3
 8014a74:	73fb      	strb	r3, [r7, #15]
      break;
 8014a76:	bf00      	nop
  }

  return ret;
 8014a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3710      	adds	r7, #16
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}
 8014a82:	bf00      	nop
 8014a84:	24004514 	.word	0x24004514

08014a88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	88db      	ldrh	r3, [r3, #6]
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d004      	beq.n	8014aa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f8e2 	bl	8014c66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014aa2:	e023      	b.n	8014aec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b02      	cmp	r3, #2
 8014aae:	dc02      	bgt.n	8014ab6 <USBD_GetConfig+0x2e>
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	dc03      	bgt.n	8014abc <USBD_GetConfig+0x34>
 8014ab4:	e015      	b.n	8014ae2 <USBD_GetConfig+0x5a>
 8014ab6:	2b03      	cmp	r3, #3
 8014ab8:	d00b      	beq.n	8014ad2 <USBD_GetConfig+0x4a>
 8014aba:	e012      	b.n	8014ae2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	3308      	adds	r3, #8
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	4619      	mov	r1, r3
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 f948 	bl	8014d60 <USBD_CtlSendData>
        break;
 8014ad0:	e00c      	b.n	8014aec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	4619      	mov	r1, r3
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f940 	bl	8014d60 <USBD_CtlSendData>
        break;
 8014ae0:	e004      	b.n	8014aec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f000 f8be 	bl	8014c66 <USBD_CtlError>
        break;
 8014aea:	bf00      	nop
}
 8014aec:	bf00      	nop
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	3b01      	subs	r3, #1
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	d81e      	bhi.n	8014b4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	88db      	ldrh	r3, [r3, #6]
 8014b10:	2b02      	cmp	r3, #2
 8014b12:	d004      	beq.n	8014b1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b14:	6839      	ldr	r1, [r7, #0]
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 f8a5 	bl	8014c66 <USBD_CtlError>
        break;
 8014b1c:	e01a      	b.n	8014b54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2201      	movs	r2, #1
 8014b22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d005      	beq.n	8014b3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	f043 0202 	orr.w	r2, r3, #2
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	330c      	adds	r3, #12
 8014b3e:	2202      	movs	r2, #2
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f90c 	bl	8014d60 <USBD_CtlSendData>
      break;
 8014b48:	e004      	b.n	8014b54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b4a:	6839      	ldr	r1, [r7, #0]
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 f88a 	bl	8014c66 <USBD_CtlError>
      break;
 8014b52:	bf00      	nop
  }
}
 8014b54:	bf00      	nop
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b082      	sub	sp, #8
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	885b      	ldrh	r3, [r3, #2]
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d107      	bne.n	8014b7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2201      	movs	r2, #1
 8014b72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 f94c 	bl	8014e14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014b7c:	e013      	b.n	8014ba6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	885b      	ldrh	r3, [r3, #2]
 8014b82:	2b02      	cmp	r3, #2
 8014b84:	d10b      	bne.n	8014b9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	889b      	ldrh	r3, [r3, #4]
 8014b8a:	0a1b      	lsrs	r3, r3, #8
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	b2da      	uxtb	r2, r3
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 f93c 	bl	8014e14 <USBD_CtlSendStatus>
}
 8014b9c:	e003      	b.n	8014ba6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014b9e:	6839      	ldr	r1, [r7, #0]
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f000 f860 	bl	8014c66 <USBD_CtlError>
}
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bbe:	b2db      	uxtb	r3, r3
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	2b02      	cmp	r3, #2
 8014bc4:	d80b      	bhi.n	8014bde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	885b      	ldrh	r3, [r3, #2]
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d10c      	bne.n	8014be8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 f91c 	bl	8014e14 <USBD_CtlSendStatus>
      }
      break;
 8014bdc:	e004      	b.n	8014be8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014bde:	6839      	ldr	r1, [r7, #0]
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f000 f840 	bl	8014c66 <USBD_CtlError>
      break;
 8014be6:	e000      	b.n	8014bea <USBD_ClrFeature+0x3c>
      break;
 8014be8:	bf00      	nop
  }
}
 8014bea:	bf00      	nop
 8014bec:	3708      	adds	r7, #8
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b084      	sub	sp, #16
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
 8014bfa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	781a      	ldrb	r2, [r3, #0]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	781a      	ldrb	r2, [r3, #0]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	3301      	adds	r3, #1
 8014c1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f7ff fa16 	bl	801404e <SWAPBYTE>
 8014c22:	4603      	mov	r3, r0
 8014c24:	461a      	mov	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	3301      	adds	r3, #1
 8014c34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c36:	68f8      	ldr	r0, [r7, #12]
 8014c38:	f7ff fa09 	bl	801404e <SWAPBYTE>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	461a      	mov	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	3301      	adds	r3, #1
 8014c48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c50:	68f8      	ldr	r0, [r7, #12]
 8014c52:	f7ff f9fc 	bl	801404e <SWAPBYTE>
 8014c56:	4603      	mov	r3, r0
 8014c58:	461a      	mov	r2, r3
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	80da      	strh	r2, [r3, #6]
}
 8014c5e:	bf00      	nop
 8014c60:	3710      	adds	r7, #16
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}

08014c66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b082      	sub	sp, #8
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
 8014c6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c70:	2180      	movs	r1, #128	@ 0x80
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f000 fcee 	bl	8015654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c78:	2100      	movs	r1, #0
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f000 fcea 	bl	8015654 <USBD_LL_StallEP>
}
 8014c80:	bf00      	nop
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b086      	sub	sp, #24
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c94:	2300      	movs	r3, #0
 8014c96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d042      	beq.n	8014d24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014ca2:	6938      	ldr	r0, [r7, #16]
 8014ca4:	f000 f842 	bl	8014d2c <USBD_GetLen>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	3301      	adds	r3, #1
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cb2:	d808      	bhi.n	8014cc6 <USBD_GetString+0x3e>
 8014cb4:	6938      	ldr	r0, [r7, #16]
 8014cb6:	f000 f839 	bl	8014d2c <USBD_GetLen>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	005b      	lsls	r3, r3, #1
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	e001      	b.n	8014cca <USBD_GetString+0x42>
 8014cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014cce:	7dfb      	ldrb	r3, [r7, #23]
 8014cd0:	68ba      	ldr	r2, [r7, #8]
 8014cd2:	4413      	add	r3, r2
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	7812      	ldrb	r2, [r2, #0]
 8014cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cda:	7dfb      	ldrb	r3, [r7, #23]
 8014cdc:	3301      	adds	r3, #1
 8014cde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014ce0:	7dfb      	ldrb	r3, [r7, #23]
 8014ce2:	68ba      	ldr	r2, [r7, #8]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	2203      	movs	r2, #3
 8014ce8:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cea:	7dfb      	ldrb	r3, [r7, #23]
 8014cec:	3301      	adds	r3, #1
 8014cee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014cf0:	e013      	b.n	8014d1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014cf2:	7dfb      	ldrb	r3, [r7, #23]
 8014cf4:	68ba      	ldr	r2, [r7, #8]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	693a      	ldr	r2, [r7, #16]
 8014cfa:	7812      	ldrb	r2, [r2, #0]
 8014cfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	3301      	adds	r3, #1
 8014d02:	613b      	str	r3, [r7, #16]
    idx++;
 8014d04:	7dfb      	ldrb	r3, [r7, #23]
 8014d06:	3301      	adds	r3, #1
 8014d08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
 8014d0c:	68ba      	ldr	r2, [r7, #8]
 8014d0e:	4413      	add	r3, r2
 8014d10:	2200      	movs	r2, #0
 8014d12:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d14:	7dfb      	ldrb	r3, [r7, #23]
 8014d16:	3301      	adds	r3, #1
 8014d18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d1e7      	bne.n	8014cf2 <USBD_GetString+0x6a>
 8014d22:	e000      	b.n	8014d26 <USBD_GetString+0x9e>
    return;
 8014d24:	bf00      	nop
  }
}
 8014d26:	3718      	adds	r7, #24
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}

08014d2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d34:	2300      	movs	r3, #0
 8014d36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d3c:	e005      	b.n	8014d4a <USBD_GetLen+0x1e>
  {
    len++;
 8014d3e:	7bfb      	ldrb	r3, [r7, #15]
 8014d40:	3301      	adds	r3, #1
 8014d42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	3301      	adds	r3, #1
 8014d48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d1f5      	bne.n	8014d3e <USBD_GetLen+0x12>
  }

  return len;
 8014d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3714      	adds	r7, #20
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2202      	movs	r2, #2
 8014d70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	2100      	movs	r1, #0
 8014d86:	68f8      	ldr	r0, [r7, #12]
 8014d88:	f000 fced 	bl	8015766 <USBD_LL_Transmit>

  return USBD_OK;
 8014d8c:	2300      	movs	r3, #0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3710      	adds	r7, #16
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}

08014d96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014d96:	b580      	push	{r7, lr}
 8014d98:	b084      	sub	sp, #16
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	60f8      	str	r0, [r7, #12]
 8014d9e:	60b9      	str	r1, [r7, #8]
 8014da0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	2100      	movs	r1, #0
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f000 fcdc 	bl	8015766 <USBD_LL_Transmit>

  return USBD_OK;
 8014dae:	2300      	movs	r3, #0
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3710      	adds	r7, #16
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b084      	sub	sp, #16
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2203      	movs	r2, #3
 8014dc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	68ba      	ldr	r2, [r7, #8]
 8014de0:	2100      	movs	r1, #0
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f000 fce0 	bl	80157a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014de8:	2300      	movs	r3, #0
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3710      	adds	r7, #16
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}

08014df2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014df2:	b580      	push	{r7, lr}
 8014df4:	b084      	sub	sp, #16
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	60f8      	str	r0, [r7, #12]
 8014dfa:	60b9      	str	r1, [r7, #8]
 8014dfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	68ba      	ldr	r2, [r7, #8]
 8014e02:	2100      	movs	r1, #0
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f000 fccf 	bl	80157a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e0a:	2300      	movs	r3, #0
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3710      	adds	r7, #16
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2204      	movs	r2, #4
 8014e20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e24:	2300      	movs	r3, #0
 8014e26:	2200      	movs	r2, #0
 8014e28:	2100      	movs	r1, #0
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 fc9b 	bl	8015766 <USBD_LL_Transmit>

  return USBD_OK;
 8014e30:	2300      	movs	r3, #0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3708      	adds	r7, #8
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b082      	sub	sp, #8
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2205      	movs	r2, #5
 8014e46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	2100      	movs	r1, #0
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 fca9 	bl	80157a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e56:	2300      	movs	r3, #0
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3708      	adds	r7, #8
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014e64:	2201      	movs	r2, #1
 8014e66:	4913      	ldr	r1, [pc, #76]	@ (8014eb4 <MX_USB_DEVICE_Init+0x54>)
 8014e68:	4813      	ldr	r0, [pc, #76]	@ (8014eb8 <MX_USB_DEVICE_Init+0x58>)
 8014e6a:	f7fe fccd 	bl	8013808 <USBD_Init>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d001      	beq.n	8014e78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014e74:	f7ec fd3c 	bl	80018f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8014e78:	4910      	ldr	r1, [pc, #64]	@ (8014ebc <MX_USB_DEVICE_Init+0x5c>)
 8014e7a:	480f      	ldr	r0, [pc, #60]	@ (8014eb8 <MX_USB_DEVICE_Init+0x58>)
 8014e7c:	f7fe fcf4 	bl	8013868 <USBD_RegisterClass>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d001      	beq.n	8014e8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014e86:	f7ec fd33 	bl	80018f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014e8a:	490d      	ldr	r1, [pc, #52]	@ (8014ec0 <MX_USB_DEVICE_Init+0x60>)
 8014e8c:	480a      	ldr	r0, [pc, #40]	@ (8014eb8 <MX_USB_DEVICE_Init+0x58>)
 8014e8e:	f7fe fbeb 	bl	8013668 <USBD_CDC_RegisterInterface>
 8014e92:	4603      	mov	r3, r0
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014e98:	f7ec fd2a 	bl	80018f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014e9c:	4806      	ldr	r0, [pc, #24]	@ (8014eb8 <MX_USB_DEVICE_Init+0x58>)
 8014e9e:	f7fe fd19 	bl	80138d4 <USBD_Start>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d001      	beq.n	8014eac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014ea8:	f7ec fd22 	bl	80018f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014eac:	f7f5 ff42 	bl	800ad34 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014eb0:	bf00      	nop
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	240000b0 	.word	0x240000b0
 8014eb8:	24004518 	.word	0x24004518
 8014ebc:	2400001c 	.word	0x2400001c
 8014ec0:	2400009c 	.word	0x2400009c

08014ec4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014ec8:	2200      	movs	r2, #0
 8014eca:	4905      	ldr	r1, [pc, #20]	@ (8014ee0 <CDC_Init_HS+0x1c>)
 8014ecc:	4805      	ldr	r0, [pc, #20]	@ (8014ee4 <CDC_Init_HS+0x20>)
 8014ece:	f7fe fbe5 	bl	801369c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014ed2:	4905      	ldr	r1, [pc, #20]	@ (8014ee8 <CDC_Init_HS+0x24>)
 8014ed4:	4803      	ldr	r0, [pc, #12]	@ (8014ee4 <CDC_Init_HS+0x20>)
 8014ed6:	f7fe fc03 	bl	80136e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014eda:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	24004ff4 	.word	0x24004ff4
 8014ee4:	24004518 	.word	0x24004518
 8014ee8:	240047f4 	.word	0x240047f4

08014eec <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8014eec:	b480      	push	{r7}
 8014eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014ef0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	4603      	mov	r3, r0
 8014f04:	6039      	str	r1, [r7, #0]
 8014f06:	71fb      	strb	r3, [r7, #7]
 8014f08:	4613      	mov	r3, r2
 8014f0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8014f0c:	79fb      	ldrb	r3, [r7, #7]
 8014f0e:	2b23      	cmp	r3, #35	@ 0x23
 8014f10:	d84a      	bhi.n	8014fa8 <CDC_Control_HS+0xac>
 8014f12:	a201      	add	r2, pc, #4	@ (adr r2, 8014f18 <CDC_Control_HS+0x1c>)
 8014f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f18:	08014fa9 	.word	0x08014fa9
 8014f1c:	08014fa9 	.word	0x08014fa9
 8014f20:	08014fa9 	.word	0x08014fa9
 8014f24:	08014fa9 	.word	0x08014fa9
 8014f28:	08014fa9 	.word	0x08014fa9
 8014f2c:	08014fa9 	.word	0x08014fa9
 8014f30:	08014fa9 	.word	0x08014fa9
 8014f34:	08014fa9 	.word	0x08014fa9
 8014f38:	08014fa9 	.word	0x08014fa9
 8014f3c:	08014fa9 	.word	0x08014fa9
 8014f40:	08014fa9 	.word	0x08014fa9
 8014f44:	08014fa9 	.word	0x08014fa9
 8014f48:	08014fa9 	.word	0x08014fa9
 8014f4c:	08014fa9 	.word	0x08014fa9
 8014f50:	08014fa9 	.word	0x08014fa9
 8014f54:	08014fa9 	.word	0x08014fa9
 8014f58:	08014fa9 	.word	0x08014fa9
 8014f5c:	08014fa9 	.word	0x08014fa9
 8014f60:	08014fa9 	.word	0x08014fa9
 8014f64:	08014fa9 	.word	0x08014fa9
 8014f68:	08014fa9 	.word	0x08014fa9
 8014f6c:	08014fa9 	.word	0x08014fa9
 8014f70:	08014fa9 	.word	0x08014fa9
 8014f74:	08014fa9 	.word	0x08014fa9
 8014f78:	08014fa9 	.word	0x08014fa9
 8014f7c:	08014fa9 	.word	0x08014fa9
 8014f80:	08014fa9 	.word	0x08014fa9
 8014f84:	08014fa9 	.word	0x08014fa9
 8014f88:	08014fa9 	.word	0x08014fa9
 8014f8c:	08014fa9 	.word	0x08014fa9
 8014f90:	08014fa9 	.word	0x08014fa9
 8014f94:	08014fa9 	.word	0x08014fa9
 8014f98:	08014fa9 	.word	0x08014fa9
 8014f9c:	08014fa9 	.word	0x08014fa9
 8014fa0:	08014fa9 	.word	0x08014fa9
 8014fa4:	08014fa9 	.word	0x08014fa9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014fa8:	bf00      	nop
  }

  return (USBD_OK);
 8014faa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014fc2:	6879      	ldr	r1, [r7, #4]
 8014fc4:	4808      	ldr	r0, [pc, #32]	@ (8014fe8 <CDC_Receive_HS+0x30>)
 8014fc6:	f7fe fb8b 	bl	80136e0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8014fca:	4807      	ldr	r0, [pc, #28]	@ (8014fe8 <CDC_Receive_HS+0x30>)
 8014fcc:	f7fe fbe6 	bl	801379c <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	6879      	ldr	r1, [r7, #4]
 8014fd8:	4804      	ldr	r0, [pc, #16]	@ (8014fec <CDC_Receive_HS+0x34>)
 8014fda:	f7ee fa4f 	bl	800347c <VibeCheckShell_PutInput>

	return (USBD_OK);
 8014fde:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	24004518 	.word	0x24004518
 8014fec:	24000988 	.word	0x24000988

08014ff0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8015000:	4b0d      	ldr	r3, [pc, #52]	@ (8015038 <CDC_Transmit_HS+0x48>)
 8015002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015006:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801500e:	2b00      	cmp	r3, #0
 8015010:	d001      	beq.n	8015016 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8015012:	2301      	movs	r3, #1
 8015014:	e00b      	b.n	801502e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8015016:	887b      	ldrh	r3, [r7, #2]
 8015018:	461a      	mov	r2, r3
 801501a:	6879      	ldr	r1, [r7, #4]
 801501c:	4806      	ldr	r0, [pc, #24]	@ (8015038 <CDC_Transmit_HS+0x48>)
 801501e:	f7fe fb3d 	bl	801369c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8015022:	4805      	ldr	r0, [pc, #20]	@ (8015038 <CDC_Transmit_HS+0x48>)
 8015024:	f7fe fb7a 	bl	801371c <USBD_CDC_TransmitPacket>
 8015028:	4603      	mov	r3, r0
 801502a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801502c:	7bfb      	ldrb	r3, [r7, #15]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	24004518 	.word	0x24004518

0801503c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801503c:	b480      	push	{r7}
 801503e:	b087      	sub	sp, #28
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	4613      	mov	r3, r2
 8015048:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801504a:	2300      	movs	r3, #0
 801504c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801504e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015052:	4618      	mov	r0, r3
 8015054:	371c      	adds	r7, #28
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
	...

08015060 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015060:	b480      	push	{r7}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
 8015066:	4603      	mov	r3, r0
 8015068:	6039      	str	r1, [r7, #0]
 801506a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	2212      	movs	r2, #18
 8015070:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8015072:	4b03      	ldr	r3, [pc, #12]	@ (8015080 <USBD_HS_DeviceDescriptor+0x20>)
}
 8015074:	4618      	mov	r0, r3
 8015076:	370c      	adds	r7, #12
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr
 8015080:	240000d0 	.word	0x240000d0

08015084 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	4603      	mov	r3, r0
 801508c:	6039      	str	r1, [r7, #0]
 801508e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	2204      	movs	r2, #4
 8015094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015096:	4b03      	ldr	r3, [pc, #12]	@ (80150a4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8015098:	4618      	mov	r0, r3
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr
 80150a4:	240000e4 	.word	0x240000e4

080150a8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	4603      	mov	r3, r0
 80150b0:	6039      	str	r1, [r7, #0]
 80150b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150b4:	79fb      	ldrb	r3, [r7, #7]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d105      	bne.n	80150c6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80150ba:	683a      	ldr	r2, [r7, #0]
 80150bc:	4907      	ldr	r1, [pc, #28]	@ (80150dc <USBD_HS_ProductStrDescriptor+0x34>)
 80150be:	4808      	ldr	r0, [pc, #32]	@ (80150e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80150c0:	f7ff fde2 	bl	8014c88 <USBD_GetString>
 80150c4:	e004      	b.n	80150d0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80150c6:	683a      	ldr	r2, [r7, #0]
 80150c8:	4904      	ldr	r1, [pc, #16]	@ (80150dc <USBD_HS_ProductStrDescriptor+0x34>)
 80150ca:	4805      	ldr	r0, [pc, #20]	@ (80150e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80150cc:	f7ff fddc 	bl	8014c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80150d0:	4b02      	ldr	r3, [pc, #8]	@ (80150dc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3708      	adds	r7, #8
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	240057f4 	.word	0x240057f4
 80150e0:	0801a86c 	.word	0x0801a86c

080150e4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	4603      	mov	r3, r0
 80150ec:	6039      	str	r1, [r7, #0]
 80150ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80150f0:	683a      	ldr	r2, [r7, #0]
 80150f2:	4904      	ldr	r1, [pc, #16]	@ (8015104 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80150f4:	4804      	ldr	r0, [pc, #16]	@ (8015108 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80150f6:	f7ff fdc7 	bl	8014c88 <USBD_GetString>
  return USBD_StrDesc;
 80150fa:	4b02      	ldr	r3, [pc, #8]	@ (8015104 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	240057f4 	.word	0x240057f4
 8015108:	0801a878 	.word	0x0801a878

0801510c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	4603      	mov	r3, r0
 8015114:	6039      	str	r1, [r7, #0]
 8015116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	221a      	movs	r2, #26
 801511c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801511e:	f000 f843 	bl	80151a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015122:	4b02      	ldr	r3, [pc, #8]	@ (801512c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8015124:	4618      	mov	r0, r3
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	240000e8 	.word	0x240000e8

08015130 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	4603      	mov	r3, r0
 8015138:	6039      	str	r1, [r7, #0]
 801513a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801513c:	79fb      	ldrb	r3, [r7, #7]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d105      	bne.n	801514e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015142:	683a      	ldr	r2, [r7, #0]
 8015144:	4907      	ldr	r1, [pc, #28]	@ (8015164 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015146:	4808      	ldr	r0, [pc, #32]	@ (8015168 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015148:	f7ff fd9e 	bl	8014c88 <USBD_GetString>
 801514c:	e004      	b.n	8015158 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801514e:	683a      	ldr	r2, [r7, #0]
 8015150:	4904      	ldr	r1, [pc, #16]	@ (8015164 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015152:	4805      	ldr	r0, [pc, #20]	@ (8015168 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015154:	f7ff fd98 	bl	8014c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015158:	4b02      	ldr	r3, [pc, #8]	@ (8015164 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801515a:	4618      	mov	r0, r3
 801515c:	3708      	adds	r7, #8
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	240057f4 	.word	0x240057f4
 8015168:	0801a884 	.word	0x0801a884

0801516c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	4603      	mov	r3, r0
 8015174:	6039      	str	r1, [r7, #0]
 8015176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015178:	79fb      	ldrb	r3, [r7, #7]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d105      	bne.n	801518a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	4907      	ldr	r1, [pc, #28]	@ (80151a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015182:	4808      	ldr	r0, [pc, #32]	@ (80151a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015184:	f7ff fd80 	bl	8014c88 <USBD_GetString>
 8015188:	e004      	b.n	8015194 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	4904      	ldr	r1, [pc, #16]	@ (80151a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801518e:	4805      	ldr	r0, [pc, #20]	@ (80151a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015190:	f7ff fd7a 	bl	8014c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015194:	4b02      	ldr	r3, [pc, #8]	@ (80151a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8015196:	4618      	mov	r0, r3
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	240057f4 	.word	0x240057f4
 80151a4:	0801a890 	.word	0x0801a890

080151a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80151ae:	4b0f      	ldr	r3, [pc, #60]	@ (80151ec <Get_SerialNum+0x44>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80151b4:	4b0e      	ldr	r3, [pc, #56]	@ (80151f0 <Get_SerialNum+0x48>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80151ba:	4b0e      	ldr	r3, [pc, #56]	@ (80151f4 <Get_SerialNum+0x4c>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	4413      	add	r3, r2
 80151c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d009      	beq.n	80151e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80151ce:	2208      	movs	r2, #8
 80151d0:	4909      	ldr	r1, [pc, #36]	@ (80151f8 <Get_SerialNum+0x50>)
 80151d2:	68f8      	ldr	r0, [r7, #12]
 80151d4:	f000 f814 	bl	8015200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80151d8:	2204      	movs	r2, #4
 80151da:	4908      	ldr	r1, [pc, #32]	@ (80151fc <Get_SerialNum+0x54>)
 80151dc:	68b8      	ldr	r0, [r7, #8]
 80151de:	f000 f80f 	bl	8015200 <IntToUnicode>
  }
}
 80151e2:	bf00      	nop
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	1ff1e800 	.word	0x1ff1e800
 80151f0:	1ff1e804 	.word	0x1ff1e804
 80151f4:	1ff1e808 	.word	0x1ff1e808
 80151f8:	240000ea 	.word	0x240000ea
 80151fc:	240000fa 	.word	0x240000fa

08015200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015200:	b480      	push	{r7}
 8015202:	b087      	sub	sp, #28
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	4613      	mov	r3, r2
 801520c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801520e:	2300      	movs	r3, #0
 8015210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015212:	2300      	movs	r3, #0
 8015214:	75fb      	strb	r3, [r7, #23]
 8015216:	e027      	b.n	8015268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	0f1b      	lsrs	r3, r3, #28
 801521c:	2b09      	cmp	r3, #9
 801521e:	d80b      	bhi.n	8015238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	0f1b      	lsrs	r3, r3, #28
 8015224:	b2da      	uxtb	r2, r3
 8015226:	7dfb      	ldrb	r3, [r7, #23]
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	4619      	mov	r1, r3
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	440b      	add	r3, r1
 8015230:	3230      	adds	r2, #48	@ 0x30
 8015232:	b2d2      	uxtb	r2, r2
 8015234:	701a      	strb	r2, [r3, #0]
 8015236:	e00a      	b.n	801524e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	0f1b      	lsrs	r3, r3, #28
 801523c:	b2da      	uxtb	r2, r3
 801523e:	7dfb      	ldrb	r3, [r7, #23]
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4619      	mov	r1, r3
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	440b      	add	r3, r1
 8015248:	3237      	adds	r2, #55	@ 0x37
 801524a:	b2d2      	uxtb	r2, r2
 801524c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	011b      	lsls	r3, r3, #4
 8015252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015254:	7dfb      	ldrb	r3, [r7, #23]
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	3301      	adds	r3, #1
 801525a:	68ba      	ldr	r2, [r7, #8]
 801525c:	4413      	add	r3, r2
 801525e:	2200      	movs	r2, #0
 8015260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	3301      	adds	r3, #1
 8015266:	75fb      	strb	r3, [r7, #23]
 8015268:	7dfa      	ldrb	r2, [r7, #23]
 801526a:	79fb      	ldrb	r3, [r7, #7]
 801526c:	429a      	cmp	r2, r3
 801526e:	d3d3      	bcc.n	8015218 <IntToUnicode+0x18>
  }
}
 8015270:	bf00      	nop
 8015272:	bf00      	nop
 8015274:	371c      	adds	r7, #28
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
	...

08015280 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b0b2      	sub	sp, #200	@ 0xc8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015288:	f107 0310 	add.w	r3, r7, #16
 801528c:	22b8      	movs	r2, #184	@ 0xb8
 801528e:	2100      	movs	r1, #0
 8015290:	4618      	mov	r0, r3
 8015292:	f001 fea6 	bl	8016fe2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4a1a      	ldr	r2, [pc, #104]	@ (8015304 <HAL_PCD_MspInit+0x84>)
 801529c:	4293      	cmp	r3, r2
 801529e:	d12c      	bne.n	80152fa <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80152a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80152a4:	f04f 0300 	mov.w	r3, #0
 80152a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80152ac:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80152b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80152b4:	f107 0310 	add.w	r3, r7, #16
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7f6 fcb1 	bl	800bc20 <HAL_RCCEx_PeriphCLKConfig>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80152c4:	f7ec fb14 	bl	80018f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80152c8:	f7f5 fd34 	bl	800ad34 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80152cc:	4b0e      	ldr	r3, [pc, #56]	@ (8015308 <HAL_PCD_MspInit+0x88>)
 80152ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80152d2:	4a0d      	ldr	r2, [pc, #52]	@ (8015308 <HAL_PCD_MspInit+0x88>)
 80152d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80152d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80152dc:	4b0a      	ldr	r3, [pc, #40]	@ (8015308 <HAL_PCD_MspInit+0x88>)
 80152de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80152e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80152e6:	60fb      	str	r3, [r7, #12]
 80152e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80152ea:	2200      	movs	r2, #0
 80152ec:	2100      	movs	r1, #0
 80152ee:	204d      	movs	r0, #77	@ 0x4d
 80152f0:	f7f1 fb01 	bl	80068f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80152f4:	204d      	movs	r0, #77	@ 0x4d
 80152f6:	f7f1 fb18 	bl	800692a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80152fa:	bf00      	nop
 80152fc:	37c8      	adds	r7, #200	@ 0xc8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	40040000 	.word	0x40040000
 8015308:	58024400 	.word	0x58024400

0801530c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b082      	sub	sp, #8
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015320:	4619      	mov	r1, r3
 8015322:	4610      	mov	r0, r2
 8015324:	f7fe fb23 	bl	801396e <USBD_LL_SetupStage>
}
 8015328:	bf00      	nop
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	460b      	mov	r3, r1
 801533a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015342:	78fa      	ldrb	r2, [r7, #3]
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	4613      	mov	r3, r2
 8015348:	00db      	lsls	r3, r3, #3
 801534a:	4413      	add	r3, r2
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	440b      	add	r3, r1
 8015350:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	78fb      	ldrb	r3, [r7, #3]
 8015358:	4619      	mov	r1, r3
 801535a:	f7fe fb5d 	bl	8013a18 <USBD_LL_DataOutStage>
}
 801535e:	bf00      	nop
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015366:	b580      	push	{r7, lr}
 8015368:	b082      	sub	sp, #8
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
 801536e:	460b      	mov	r3, r1
 8015370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015378:	78fa      	ldrb	r2, [r7, #3]
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	4613      	mov	r3, r2
 801537e:	00db      	lsls	r3, r3, #3
 8015380:	4413      	add	r3, r2
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	440b      	add	r3, r1
 8015386:	3320      	adds	r3, #32
 8015388:	681a      	ldr	r2, [r3, #0]
 801538a:	78fb      	ldrb	r3, [r7, #3]
 801538c:	4619      	mov	r1, r3
 801538e:	f7fe fbf6 	bl	8013b7e <USBD_LL_DataInStage>
}
 8015392:	bf00      	nop
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}

0801539a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801539a:	b580      	push	{r7, lr}
 801539c:	b082      	sub	sp, #8
 801539e:	af00      	add	r7, sp, #0
 80153a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fe fd30 	bl	8013e0e <USBD_LL_SOF>
}
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b084      	sub	sp, #16
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80153be:	2301      	movs	r3, #1
 80153c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	79db      	ldrb	r3, [r3, #7]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d102      	bne.n	80153d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80153ca:	2300      	movs	r3, #0
 80153cc:	73fb      	strb	r3, [r7, #15]
 80153ce:	e008      	b.n	80153e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	79db      	ldrb	r3, [r3, #7]
 80153d4:	2b02      	cmp	r3, #2
 80153d6:	d102      	bne.n	80153de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80153d8:	2301      	movs	r3, #1
 80153da:	73fb      	strb	r3, [r7, #15]
 80153dc:	e001      	b.n	80153e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80153de:	f7ec fa87 	bl	80018f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80153e8:	7bfa      	ldrb	r2, [r7, #15]
 80153ea:	4611      	mov	r1, r2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fe fcca 	bl	8013d86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7fe fc72 	bl	8013ce2 <USBD_LL_Reset>
}
 80153fe:	bf00      	nop
 8015400:	3710      	adds	r7, #16
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
	...

08015408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe fcc5 	bl	8013da6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	6812      	ldr	r2, [r2, #0]
 801542a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801542e:	f043 0301 	orr.w	r3, r3, #1
 8015432:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	7adb      	ldrb	r3, [r3, #11]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d005      	beq.n	8015448 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801543c:	4b04      	ldr	r3, [pc, #16]	@ (8015450 <HAL_PCD_SuspendCallback+0x48>)
 801543e:	691b      	ldr	r3, [r3, #16]
 8015440:	4a03      	ldr	r2, [pc, #12]	@ (8015450 <HAL_PCD_SuspendCallback+0x48>)
 8015442:	f043 0306 	orr.w	r3, r3, #6
 8015446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015448:	bf00      	nop
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}
 8015450:	e000ed00 	.word	0xe000ed00

08015454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015462:	4618      	mov	r0, r3
 8015464:	f7fe fcbb 	bl	8013dde <USBD_LL_Resume>
}
 8015468:	bf00      	nop
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015482:	78fa      	ldrb	r2, [r7, #3]
 8015484:	4611      	mov	r1, r2
 8015486:	4618      	mov	r0, r3
 8015488:	f7fe fd13 	bl	8013eb2 <USBD_LL_IsoOUTIncomplete>
}
 801548c:	bf00      	nop
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	460b      	mov	r3, r1
 801549e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80154a6:	78fa      	ldrb	r2, [r7, #3]
 80154a8:	4611      	mov	r1, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe fccf 	bl	8013e4e <USBD_LL_IsoINIncomplete>
}
 80154b0:	bf00      	nop
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}

080154b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7fe fd25 	bl	8013f16 <USBD_LL_DevConnected>
}
 80154cc:	bf00      	nop
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fe fd22 	bl	8013f2c <USBD_LL_DevDisconnected>
}
 80154e8:	bf00      	nop
 80154ea:	3708      	adds	r7, #8
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d140      	bne.n	8015582 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015500:	4a22      	ldr	r2, [pc, #136]	@ (801558c <USBD_LL_Init+0x9c>)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	4a20      	ldr	r2, [pc, #128]	@ (801558c <USBD_LL_Init+0x9c>)
 801550c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015510:	4b1e      	ldr	r3, [pc, #120]	@ (801558c <USBD_LL_Init+0x9c>)
 8015512:	4a1f      	ldr	r2, [pc, #124]	@ (8015590 <USBD_LL_Init+0xa0>)
 8015514:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8015516:	4b1d      	ldr	r3, [pc, #116]	@ (801558c <USBD_LL_Init+0x9c>)
 8015518:	2209      	movs	r2, #9
 801551a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801551c:	4b1b      	ldr	r3, [pc, #108]	@ (801558c <USBD_LL_Init+0x9c>)
 801551e:	2202      	movs	r2, #2
 8015520:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8015522:	4b1a      	ldr	r3, [pc, #104]	@ (801558c <USBD_LL_Init+0x9c>)
 8015524:	2200      	movs	r2, #0
 8015526:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015528:	4b18      	ldr	r3, [pc, #96]	@ (801558c <USBD_LL_Init+0x9c>)
 801552a:	2202      	movs	r2, #2
 801552c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801552e:	4b17      	ldr	r3, [pc, #92]	@ (801558c <USBD_LL_Init+0x9c>)
 8015530:	2200      	movs	r2, #0
 8015532:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015534:	4b15      	ldr	r3, [pc, #84]	@ (801558c <USBD_LL_Init+0x9c>)
 8015536:	2200      	movs	r2, #0
 8015538:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801553a:	4b14      	ldr	r3, [pc, #80]	@ (801558c <USBD_LL_Init+0x9c>)
 801553c:	2200      	movs	r2, #0
 801553e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015540:	4b12      	ldr	r3, [pc, #72]	@ (801558c <USBD_LL_Init+0x9c>)
 8015542:	2200      	movs	r2, #0
 8015544:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015546:	4b11      	ldr	r3, [pc, #68]	@ (801558c <USBD_LL_Init+0x9c>)
 8015548:	2200      	movs	r2, #0
 801554a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801554c:	4b0f      	ldr	r3, [pc, #60]	@ (801558c <USBD_LL_Init+0x9c>)
 801554e:	2200      	movs	r2, #0
 8015550:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8015552:	480e      	ldr	r0, [pc, #56]	@ (801558c <USBD_LL_Init+0x9c>)
 8015554:	f7f4 f915 	bl	8009782 <HAL_PCD_Init>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801555e:	f7ec f9c7 	bl	80018f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8015562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8015566:	4809      	ldr	r0, [pc, #36]	@ (801558c <USBD_LL_Init+0x9c>)
 8015568:	f7f5 fb69 	bl	800ac3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801556c:	2280      	movs	r2, #128	@ 0x80
 801556e:	2100      	movs	r1, #0
 8015570:	4806      	ldr	r0, [pc, #24]	@ (801558c <USBD_LL_Init+0x9c>)
 8015572:	f7f5 fb1d 	bl	800abb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8015576:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801557a:	2101      	movs	r1, #1
 801557c:	4803      	ldr	r0, [pc, #12]	@ (801558c <USBD_LL_Init+0x9c>)
 801557e:	f7f5 fb17 	bl	800abb0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8015582:	2300      	movs	r3, #0
}
 8015584:	4618      	mov	r0, r3
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	240059f4 	.word	0x240059f4
 8015590:	40040000 	.word	0x40040000

08015594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801559c:	2300      	movs	r3, #0
 801559e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155a0:	2300      	movs	r3, #0
 80155a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7f4 f9f5 	bl	800999a <HAL_PCD_Start>
 80155b0:	4603      	mov	r3, r0
 80155b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155b4:	7bfb      	ldrb	r3, [r7, #15]
 80155b6:	4618      	mov	r0, r3
 80155b8:	f000 f942 	bl	8015840 <USBD_Get_USB_Status>
 80155bc:	4603      	mov	r3, r0
 80155be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b084      	sub	sp, #16
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	4608      	mov	r0, r1
 80155d4:	4611      	mov	r1, r2
 80155d6:	461a      	mov	r2, r3
 80155d8:	4603      	mov	r3, r0
 80155da:	70fb      	strb	r3, [r7, #3]
 80155dc:	460b      	mov	r3, r1
 80155de:	70bb      	strb	r3, [r7, #2]
 80155e0:	4613      	mov	r3, r2
 80155e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155e4:	2300      	movs	r3, #0
 80155e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155e8:	2300      	movs	r3, #0
 80155ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80155f2:	78bb      	ldrb	r3, [r7, #2]
 80155f4:	883a      	ldrh	r2, [r7, #0]
 80155f6:	78f9      	ldrb	r1, [r7, #3]
 80155f8:	f7f4 fef6 	bl	800a3e8 <HAL_PCD_EP_Open>
 80155fc:	4603      	mov	r3, r0
 80155fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015600:	7bfb      	ldrb	r3, [r7, #15]
 8015602:	4618      	mov	r0, r3
 8015604:	f000 f91c 	bl	8015840 <USBD_Get_USB_Status>
 8015608:	4603      	mov	r3, r0
 801560a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801560c:	7bbb      	ldrb	r3, [r7, #14]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015622:	2300      	movs	r3, #0
 8015624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	4611      	mov	r1, r2
 8015634:	4618      	mov	r0, r3
 8015636:	f7f4 ff3f 	bl	800a4b8 <HAL_PCD_EP_Close>
 801563a:	4603      	mov	r3, r0
 801563c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801563e:	7bfb      	ldrb	r3, [r7, #15]
 8015640:	4618      	mov	r0, r3
 8015642:	f000 f8fd 	bl	8015840 <USBD_Get_USB_Status>
 8015646:	4603      	mov	r3, r0
 8015648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801564a:	7bbb      	ldrb	r3, [r7, #14]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	460b      	mov	r3, r1
 801565e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015660:	2300      	movs	r3, #0
 8015662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015664:	2300      	movs	r3, #0
 8015666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801566e:	78fa      	ldrb	r2, [r7, #3]
 8015670:	4611      	mov	r1, r2
 8015672:	4618      	mov	r0, r3
 8015674:	f7f4 fff7 	bl	800a666 <HAL_PCD_EP_SetStall>
 8015678:	4603      	mov	r3, r0
 801567a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801567c:	7bfb      	ldrb	r3, [r7, #15]
 801567e:	4618      	mov	r0, r3
 8015680:	f000 f8de 	bl	8015840 <USBD_Get_USB_Status>
 8015684:	4603      	mov	r3, r0
 8015686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015688:	7bbb      	ldrb	r3, [r7, #14]
}
 801568a:	4618      	mov	r0, r3
 801568c:	3710      	adds	r7, #16
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b084      	sub	sp, #16
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	460b      	mov	r3, r1
 801569c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801569e:	2300      	movs	r3, #0
 80156a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156a2:	2300      	movs	r3, #0
 80156a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80156ac:	78fa      	ldrb	r2, [r7, #3]
 80156ae:	4611      	mov	r1, r2
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7f5 f83b 	bl	800a72c <HAL_PCD_EP_ClrStall>
 80156b6:	4603      	mov	r3, r0
 80156b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156ba:	7bfb      	ldrb	r3, [r7, #15]
 80156bc:	4618      	mov	r0, r3
 80156be:	f000 f8bf 	bl	8015840 <USBD_Get_USB_Status>
 80156c2:	4603      	mov	r3, r0
 80156c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3710      	adds	r7, #16
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b085      	sub	sp, #20
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	460b      	mov	r3, r1
 80156da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80156e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80156e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	da0b      	bge.n	8015704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80156ec:	78fb      	ldrb	r3, [r7, #3]
 80156ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80156f2:	68f9      	ldr	r1, [r7, #12]
 80156f4:	4613      	mov	r3, r2
 80156f6:	00db      	lsls	r3, r3, #3
 80156f8:	4413      	add	r3, r2
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	440b      	add	r3, r1
 80156fe:	3316      	adds	r3, #22
 8015700:	781b      	ldrb	r3, [r3, #0]
 8015702:	e00b      	b.n	801571c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015704:	78fb      	ldrb	r3, [r7, #3]
 8015706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801570a:	68f9      	ldr	r1, [r7, #12]
 801570c:	4613      	mov	r3, r2
 801570e:	00db      	lsls	r3, r3, #3
 8015710:	4413      	add	r3, r2
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	440b      	add	r3, r1
 8015716:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801571a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801571c:	4618      	mov	r0, r3
 801571e:	3714      	adds	r7, #20
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b084      	sub	sp, #16
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015734:	2300      	movs	r3, #0
 8015736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015738:	2300      	movs	r3, #0
 801573a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015742:	78fa      	ldrb	r2, [r7, #3]
 8015744:	4611      	mov	r1, r2
 8015746:	4618      	mov	r0, r3
 8015748:	f7f4 fe2a 	bl	800a3a0 <HAL_PCD_SetAddress>
 801574c:	4603      	mov	r3, r0
 801574e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015750:	7bfb      	ldrb	r3, [r7, #15]
 8015752:	4618      	mov	r0, r3
 8015754:	f000 f874 	bl	8015840 <USBD_Get_USB_Status>
 8015758:	4603      	mov	r3, r0
 801575a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801575c:	7bbb      	ldrb	r3, [r7, #14]
}
 801575e:	4618      	mov	r0, r3
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}

08015766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015766:	b580      	push	{r7, lr}
 8015768:	b086      	sub	sp, #24
 801576a:	af00      	add	r7, sp, #0
 801576c:	60f8      	str	r0, [r7, #12]
 801576e:	607a      	str	r2, [r7, #4]
 8015770:	603b      	str	r3, [r7, #0]
 8015772:	460b      	mov	r3, r1
 8015774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015776:	2300      	movs	r3, #0
 8015778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801577a:	2300      	movs	r3, #0
 801577c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015784:	7af9      	ldrb	r1, [r7, #11]
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	f7f4 ff32 	bl	800a5f2 <HAL_PCD_EP_Transmit>
 801578e:	4603      	mov	r3, r0
 8015790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	4618      	mov	r0, r3
 8015796:	f000 f853 	bl	8015840 <USBD_Get_USB_Status>
 801579a:	4603      	mov	r3, r0
 801579c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801579e:	7dbb      	ldrb	r3, [r7, #22]
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3718      	adds	r7, #24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	607a      	str	r2, [r7, #4]
 80157b2:	603b      	str	r3, [r7, #0]
 80157b4:	460b      	mov	r3, r1
 80157b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157b8:	2300      	movs	r3, #0
 80157ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157bc:	2300      	movs	r3, #0
 80157be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80157c6:	7af9      	ldrb	r1, [r7, #11]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	f7f4 febe 	bl	800a54c <HAL_PCD_EP_Receive>
 80157d0:	4603      	mov	r3, r0
 80157d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157d4:	7dfb      	ldrb	r3, [r7, #23]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f000 f832 	bl	8015840 <USBD_Get_USB_Status>
 80157dc:	4603      	mov	r3, r0
 80157de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80157e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b082      	sub	sp, #8
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
 80157f2:	460b      	mov	r3, r1
 80157f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80157fc:	78fa      	ldrb	r2, [r7, #3]
 80157fe:	4611      	mov	r1, r2
 8015800:	4618      	mov	r0, r3
 8015802:	f7f4 fede 	bl	800a5c2 <HAL_PCD_EP_GetRxCount>
 8015806:	4603      	mov	r3, r0
}
 8015808:	4618      	mov	r0, r3
 801580a:	3708      	adds	r7, #8
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015810:	b480      	push	{r7}
 8015812:	b083      	sub	sp, #12
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015818:	4b03      	ldr	r3, [pc, #12]	@ (8015828 <USBD_static_malloc+0x18>)
}
 801581a:	4618      	mov	r0, r3
 801581c:	370c      	adds	r7, #12
 801581e:	46bd      	mov	sp, r7
 8015820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015824:	4770      	bx	lr
 8015826:	bf00      	nop
 8015828:	24005ed8 	.word	0x24005ed8

0801582c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801582c:	b480      	push	{r7}
 801582e:	b083      	sub	sp, #12
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015834:	bf00      	nop
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015840:	b480      	push	{r7}
 8015842:	b085      	sub	sp, #20
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801584a:	2300      	movs	r3, #0
 801584c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801584e:	79fb      	ldrb	r3, [r7, #7]
 8015850:	2b03      	cmp	r3, #3
 8015852:	d817      	bhi.n	8015884 <USBD_Get_USB_Status+0x44>
 8015854:	a201      	add	r2, pc, #4	@ (adr r2, 801585c <USBD_Get_USB_Status+0x1c>)
 8015856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801585a:	bf00      	nop
 801585c:	0801586d 	.word	0x0801586d
 8015860:	08015873 	.word	0x08015873
 8015864:	08015879 	.word	0x08015879
 8015868:	0801587f 	.word	0x0801587f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	73fb      	strb	r3, [r7, #15]
    break;
 8015870:	e00b      	b.n	801588a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015872:	2303      	movs	r3, #3
 8015874:	73fb      	strb	r3, [r7, #15]
    break;
 8015876:	e008      	b.n	801588a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015878:	2301      	movs	r3, #1
 801587a:	73fb      	strb	r3, [r7, #15]
    break;
 801587c:	e005      	b.n	801588a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801587e:	2303      	movs	r3, #3
 8015880:	73fb      	strb	r3, [r7, #15]
    break;
 8015882:	e002      	b.n	801588a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015884:	2303      	movs	r3, #3
 8015886:	73fb      	strb	r3, [r7, #15]
    break;
 8015888:	bf00      	nop
  }
  return usb_status;
 801588a:	7bfb      	ldrb	r3, [r7, #15]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3714      	adds	r7, #20
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr

08015898 <atof>:
 8015898:	2100      	movs	r1, #0
 801589a:	f000 bdb7 	b.w	801640c <strtod>

0801589e <atoi>:
 801589e:	220a      	movs	r2, #10
 80158a0:	2100      	movs	r1, #0
 80158a2:	f000 be39 	b.w	8016518 <strtol>

080158a6 <sulp>:
 80158a6:	b570      	push	{r4, r5, r6, lr}
 80158a8:	4604      	mov	r4, r0
 80158aa:	460d      	mov	r5, r1
 80158ac:	4616      	mov	r6, r2
 80158ae:	ec45 4b10 	vmov	d0, r4, r5
 80158b2:	f003 f9eb 	bl	8018c8c <__ulp>
 80158b6:	b17e      	cbz	r6, 80158d8 <sulp+0x32>
 80158b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80158bc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	dd09      	ble.n	80158d8 <sulp+0x32>
 80158c4:	051b      	lsls	r3, r3, #20
 80158c6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80158ca:	2000      	movs	r0, #0
 80158cc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80158d0:	ec41 0b17 	vmov	d7, r0, r1
 80158d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80158d8:	bd70      	pop	{r4, r5, r6, pc}
 80158da:	0000      	movs	r0, r0
 80158dc:	0000      	movs	r0, r0
	...

080158e0 <_strtod_l>:
 80158e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e4:	ed2d 8b0a 	vpush	{d8-d12}
 80158e8:	b097      	sub	sp, #92	@ 0x5c
 80158ea:	4688      	mov	r8, r1
 80158ec:	920e      	str	r2, [sp, #56]	@ 0x38
 80158ee:	2200      	movs	r2, #0
 80158f0:	9212      	str	r2, [sp, #72]	@ 0x48
 80158f2:	9005      	str	r0, [sp, #20]
 80158f4:	f04f 0a00 	mov.w	sl, #0
 80158f8:	f04f 0b00 	mov.w	fp, #0
 80158fc:	460a      	mov	r2, r1
 80158fe:	9211      	str	r2, [sp, #68]	@ 0x44
 8015900:	7811      	ldrb	r1, [r2, #0]
 8015902:	292b      	cmp	r1, #43	@ 0x2b
 8015904:	d04c      	beq.n	80159a0 <_strtod_l+0xc0>
 8015906:	d839      	bhi.n	801597c <_strtod_l+0x9c>
 8015908:	290d      	cmp	r1, #13
 801590a:	d833      	bhi.n	8015974 <_strtod_l+0x94>
 801590c:	2908      	cmp	r1, #8
 801590e:	d833      	bhi.n	8015978 <_strtod_l+0x98>
 8015910:	2900      	cmp	r1, #0
 8015912:	d03c      	beq.n	801598e <_strtod_l+0xae>
 8015914:	2200      	movs	r2, #0
 8015916:	9208      	str	r2, [sp, #32]
 8015918:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801591a:	782a      	ldrb	r2, [r5, #0]
 801591c:	2a30      	cmp	r2, #48	@ 0x30
 801591e:	f040 80b5 	bne.w	8015a8c <_strtod_l+0x1ac>
 8015922:	786a      	ldrb	r2, [r5, #1]
 8015924:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015928:	2a58      	cmp	r2, #88	@ 0x58
 801592a:	d170      	bne.n	8015a0e <_strtod_l+0x12e>
 801592c:	9302      	str	r3, [sp, #8]
 801592e:	9b08      	ldr	r3, [sp, #32]
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	ab12      	add	r3, sp, #72	@ 0x48
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	4a8b      	ldr	r2, [pc, #556]	@ (8015b64 <_strtod_l+0x284>)
 8015938:	9805      	ldr	r0, [sp, #20]
 801593a:	ab13      	add	r3, sp, #76	@ 0x4c
 801593c:	a911      	add	r1, sp, #68	@ 0x44
 801593e:	f002 fa97 	bl	8017e70 <__gethex>
 8015942:	f010 060f 	ands.w	r6, r0, #15
 8015946:	4604      	mov	r4, r0
 8015948:	d005      	beq.n	8015956 <_strtod_l+0x76>
 801594a:	2e06      	cmp	r6, #6
 801594c:	d12a      	bne.n	80159a4 <_strtod_l+0xc4>
 801594e:	3501      	adds	r5, #1
 8015950:	2300      	movs	r3, #0
 8015952:	9511      	str	r5, [sp, #68]	@ 0x44
 8015954:	9308      	str	r3, [sp, #32]
 8015956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015958:	2b00      	cmp	r3, #0
 801595a:	f040 852f 	bne.w	80163bc <_strtod_l+0xadc>
 801595e:	9b08      	ldr	r3, [sp, #32]
 8015960:	ec4b ab10 	vmov	d0, sl, fp
 8015964:	b1cb      	cbz	r3, 801599a <_strtod_l+0xba>
 8015966:	eeb1 0b40 	vneg.f64	d0, d0
 801596a:	b017      	add	sp, #92	@ 0x5c
 801596c:	ecbd 8b0a 	vpop	{d8-d12}
 8015970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015974:	2920      	cmp	r1, #32
 8015976:	d1cd      	bne.n	8015914 <_strtod_l+0x34>
 8015978:	3201      	adds	r2, #1
 801597a:	e7c0      	b.n	80158fe <_strtod_l+0x1e>
 801597c:	292d      	cmp	r1, #45	@ 0x2d
 801597e:	d1c9      	bne.n	8015914 <_strtod_l+0x34>
 8015980:	2101      	movs	r1, #1
 8015982:	9108      	str	r1, [sp, #32]
 8015984:	1c51      	adds	r1, r2, #1
 8015986:	9111      	str	r1, [sp, #68]	@ 0x44
 8015988:	7852      	ldrb	r2, [r2, #1]
 801598a:	2a00      	cmp	r2, #0
 801598c:	d1c4      	bne.n	8015918 <_strtod_l+0x38>
 801598e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015990:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015994:	2b00      	cmp	r3, #0
 8015996:	f040 850f 	bne.w	80163b8 <_strtod_l+0xad8>
 801599a:	ec4b ab10 	vmov	d0, sl, fp
 801599e:	e7e4      	b.n	801596a <_strtod_l+0x8a>
 80159a0:	2100      	movs	r1, #0
 80159a2:	e7ee      	b.n	8015982 <_strtod_l+0xa2>
 80159a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80159a6:	b13a      	cbz	r2, 80159b8 <_strtod_l+0xd8>
 80159a8:	2135      	movs	r1, #53	@ 0x35
 80159aa:	a814      	add	r0, sp, #80	@ 0x50
 80159ac:	f003 fa65 	bl	8018e7a <__copybits>
 80159b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80159b2:	9805      	ldr	r0, [sp, #20]
 80159b4:	f002 fe36 	bl	8018624 <_Bfree>
 80159b8:	1e73      	subs	r3, r6, #1
 80159ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80159bc:	2b04      	cmp	r3, #4
 80159be:	d806      	bhi.n	80159ce <_strtod_l+0xee>
 80159c0:	e8df f003 	tbb	[pc, r3]
 80159c4:	201d0314 	.word	0x201d0314
 80159c8:	14          	.byte	0x14
 80159c9:	00          	.byte	0x00
 80159ca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80159ce:	05e3      	lsls	r3, r4, #23
 80159d0:	bf48      	it	mi
 80159d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80159d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159da:	0d1b      	lsrs	r3, r3, #20
 80159dc:	051b      	lsls	r3, r3, #20
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d1b9      	bne.n	8015956 <_strtod_l+0x76>
 80159e2:	f001 fb6f 	bl	80170c4 <__errno>
 80159e6:	2322      	movs	r3, #34	@ 0x22
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	e7b4      	b.n	8015956 <_strtod_l+0x76>
 80159ec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80159f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80159f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80159f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80159fc:	e7e7      	b.n	80159ce <_strtod_l+0xee>
 80159fe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015b6c <_strtod_l+0x28c>
 8015a02:	e7e4      	b.n	80159ce <_strtod_l+0xee>
 8015a04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015a08:	f04f 3aff 	mov.w	sl, #4294967295
 8015a0c:	e7df      	b.n	80159ce <_strtod_l+0xee>
 8015a0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a10:	1c5a      	adds	r2, r3, #1
 8015a12:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a14:	785b      	ldrb	r3, [r3, #1]
 8015a16:	2b30      	cmp	r3, #48	@ 0x30
 8015a18:	d0f9      	beq.n	8015a0e <_strtod_l+0x12e>
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d09b      	beq.n	8015956 <_strtod_l+0x76>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	2600      	movs	r6, #0
 8015a22:	9307      	str	r3, [sp, #28]
 8015a24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a28:	46b1      	mov	r9, r6
 8015a2a:	4635      	mov	r5, r6
 8015a2c:	220a      	movs	r2, #10
 8015a2e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015a30:	7804      	ldrb	r4, [r0, #0]
 8015a32:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015a36:	b2d9      	uxtb	r1, r3
 8015a38:	2909      	cmp	r1, #9
 8015a3a:	d929      	bls.n	8015a90 <_strtod_l+0x1b0>
 8015a3c:	494a      	ldr	r1, [pc, #296]	@ (8015b68 <_strtod_l+0x288>)
 8015a3e:	2201      	movs	r2, #1
 8015a40:	f001 fae4 	bl	801700c <strncmp>
 8015a44:	b378      	cbz	r0, 8015aa6 <_strtod_l+0x1c6>
 8015a46:	2000      	movs	r0, #0
 8015a48:	4622      	mov	r2, r4
 8015a4a:	462b      	mov	r3, r5
 8015a4c:	4607      	mov	r7, r0
 8015a4e:	9006      	str	r0, [sp, #24]
 8015a50:	2a65      	cmp	r2, #101	@ 0x65
 8015a52:	d001      	beq.n	8015a58 <_strtod_l+0x178>
 8015a54:	2a45      	cmp	r2, #69	@ 0x45
 8015a56:	d117      	bne.n	8015a88 <_strtod_l+0x1a8>
 8015a58:	b91b      	cbnz	r3, 8015a62 <_strtod_l+0x182>
 8015a5a:	9b07      	ldr	r3, [sp, #28]
 8015a5c:	4303      	orrs	r3, r0
 8015a5e:	d096      	beq.n	801598e <_strtod_l+0xae>
 8015a60:	2300      	movs	r3, #0
 8015a62:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015a66:	f108 0201 	add.w	r2, r8, #1
 8015a6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a6c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015a70:	2a2b      	cmp	r2, #43	@ 0x2b
 8015a72:	d06b      	beq.n	8015b4c <_strtod_l+0x26c>
 8015a74:	2a2d      	cmp	r2, #45	@ 0x2d
 8015a76:	d071      	beq.n	8015b5c <_strtod_l+0x27c>
 8015a78:	f04f 0e00 	mov.w	lr, #0
 8015a7c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015a80:	2c09      	cmp	r4, #9
 8015a82:	d979      	bls.n	8015b78 <_strtod_l+0x298>
 8015a84:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015a88:	2400      	movs	r4, #0
 8015a8a:	e094      	b.n	8015bb6 <_strtod_l+0x2d6>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	e7c7      	b.n	8015a20 <_strtod_l+0x140>
 8015a90:	2d08      	cmp	r5, #8
 8015a92:	f100 0001 	add.w	r0, r0, #1
 8015a96:	bfd4      	ite	le
 8015a98:	fb02 3909 	mlale	r9, r2, r9, r3
 8015a9c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015aa0:	3501      	adds	r5, #1
 8015aa2:	9011      	str	r0, [sp, #68]	@ 0x44
 8015aa4:	e7c3      	b.n	8015a2e <_strtod_l+0x14e>
 8015aa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015aa8:	1c5a      	adds	r2, r3, #1
 8015aaa:	9211      	str	r2, [sp, #68]	@ 0x44
 8015aac:	785a      	ldrb	r2, [r3, #1]
 8015aae:	b375      	cbz	r5, 8015b0e <_strtod_l+0x22e>
 8015ab0:	4607      	mov	r7, r0
 8015ab2:	462b      	mov	r3, r5
 8015ab4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015ab8:	2909      	cmp	r1, #9
 8015aba:	d913      	bls.n	8015ae4 <_strtod_l+0x204>
 8015abc:	2101      	movs	r1, #1
 8015abe:	9106      	str	r1, [sp, #24]
 8015ac0:	e7c6      	b.n	8015a50 <_strtod_l+0x170>
 8015ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ac4:	1c5a      	adds	r2, r3, #1
 8015ac6:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ac8:	785a      	ldrb	r2, [r3, #1]
 8015aca:	3001      	adds	r0, #1
 8015acc:	2a30      	cmp	r2, #48	@ 0x30
 8015ace:	d0f8      	beq.n	8015ac2 <_strtod_l+0x1e2>
 8015ad0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015ad4:	2b08      	cmp	r3, #8
 8015ad6:	f200 8476 	bhi.w	80163c6 <_strtod_l+0xae6>
 8015ada:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ade:	4607      	mov	r7, r0
 8015ae0:	2000      	movs	r0, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	3a30      	subs	r2, #48	@ 0x30
 8015ae6:	f100 0101 	add.w	r1, r0, #1
 8015aea:	d023      	beq.n	8015b34 <_strtod_l+0x254>
 8015aec:	440f      	add	r7, r1
 8015aee:	eb00 0c03 	add.w	ip, r0, r3
 8015af2:	4619      	mov	r1, r3
 8015af4:	240a      	movs	r4, #10
 8015af6:	4561      	cmp	r1, ip
 8015af8:	d10b      	bne.n	8015b12 <_strtod_l+0x232>
 8015afa:	1c5c      	adds	r4, r3, #1
 8015afc:	4403      	add	r3, r0
 8015afe:	2b08      	cmp	r3, #8
 8015b00:	4404      	add	r4, r0
 8015b02:	dc11      	bgt.n	8015b28 <_strtod_l+0x248>
 8015b04:	230a      	movs	r3, #10
 8015b06:	fb03 2909 	mla	r9, r3, r9, r2
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	e013      	b.n	8015b36 <_strtod_l+0x256>
 8015b0e:	4628      	mov	r0, r5
 8015b10:	e7dc      	b.n	8015acc <_strtod_l+0x1ec>
 8015b12:	2908      	cmp	r1, #8
 8015b14:	f101 0101 	add.w	r1, r1, #1
 8015b18:	dc02      	bgt.n	8015b20 <_strtod_l+0x240>
 8015b1a:	fb04 f909 	mul.w	r9, r4, r9
 8015b1e:	e7ea      	b.n	8015af6 <_strtod_l+0x216>
 8015b20:	2910      	cmp	r1, #16
 8015b22:	bfd8      	it	le
 8015b24:	4366      	mulle	r6, r4
 8015b26:	e7e6      	b.n	8015af6 <_strtod_l+0x216>
 8015b28:	2b0f      	cmp	r3, #15
 8015b2a:	dcee      	bgt.n	8015b0a <_strtod_l+0x22a>
 8015b2c:	230a      	movs	r3, #10
 8015b2e:	fb03 2606 	mla	r6, r3, r6, r2
 8015b32:	e7ea      	b.n	8015b0a <_strtod_l+0x22a>
 8015b34:	461c      	mov	r4, r3
 8015b36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b38:	1c5a      	adds	r2, r3, #1
 8015b3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b3c:	785a      	ldrb	r2, [r3, #1]
 8015b3e:	4608      	mov	r0, r1
 8015b40:	4623      	mov	r3, r4
 8015b42:	e7b7      	b.n	8015ab4 <_strtod_l+0x1d4>
 8015b44:	2301      	movs	r3, #1
 8015b46:	2700      	movs	r7, #0
 8015b48:	9306      	str	r3, [sp, #24]
 8015b4a:	e786      	b.n	8015a5a <_strtod_l+0x17a>
 8015b4c:	f04f 0e00 	mov.w	lr, #0
 8015b50:	f108 0202 	add.w	r2, r8, #2
 8015b54:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b56:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015b5a:	e78f      	b.n	8015a7c <_strtod_l+0x19c>
 8015b5c:	f04f 0e01 	mov.w	lr, #1
 8015b60:	e7f6      	b.n	8015b50 <_strtod_l+0x270>
 8015b62:	bf00      	nop
 8015b64:	0801ab30 	.word	0x0801ab30
 8015b68:	0801ab18 	.word	0x0801ab18
 8015b6c:	7ff00000 	.word	0x7ff00000
 8015b70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b72:	1c54      	adds	r4, r2, #1
 8015b74:	9411      	str	r4, [sp, #68]	@ 0x44
 8015b76:	7852      	ldrb	r2, [r2, #1]
 8015b78:	2a30      	cmp	r2, #48	@ 0x30
 8015b7a:	d0f9      	beq.n	8015b70 <_strtod_l+0x290>
 8015b7c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015b80:	2c08      	cmp	r4, #8
 8015b82:	d881      	bhi.n	8015a88 <_strtod_l+0x1a8>
 8015b84:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015b88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b8c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b8e:	1c51      	adds	r1, r2, #1
 8015b90:	9111      	str	r1, [sp, #68]	@ 0x44
 8015b92:	7852      	ldrb	r2, [r2, #1]
 8015b94:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015b98:	2c09      	cmp	r4, #9
 8015b9a:	d938      	bls.n	8015c0e <_strtod_l+0x32e>
 8015b9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015b9e:	1b0c      	subs	r4, r1, r4
 8015ba0:	2c08      	cmp	r4, #8
 8015ba2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015ba6:	dc02      	bgt.n	8015bae <_strtod_l+0x2ce>
 8015ba8:	4564      	cmp	r4, ip
 8015baa:	bfa8      	it	ge
 8015bac:	4664      	movge	r4, ip
 8015bae:	f1be 0f00 	cmp.w	lr, #0
 8015bb2:	d000      	beq.n	8015bb6 <_strtod_l+0x2d6>
 8015bb4:	4264      	negs	r4, r4
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d14e      	bne.n	8015c58 <_strtod_l+0x378>
 8015bba:	9b07      	ldr	r3, [sp, #28]
 8015bbc:	4318      	orrs	r0, r3
 8015bbe:	f47f aeca 	bne.w	8015956 <_strtod_l+0x76>
 8015bc2:	9b06      	ldr	r3, [sp, #24]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	f47f aee2 	bne.w	801598e <_strtod_l+0xae>
 8015bca:	2a69      	cmp	r2, #105	@ 0x69
 8015bcc:	d027      	beq.n	8015c1e <_strtod_l+0x33e>
 8015bce:	dc24      	bgt.n	8015c1a <_strtod_l+0x33a>
 8015bd0:	2a49      	cmp	r2, #73	@ 0x49
 8015bd2:	d024      	beq.n	8015c1e <_strtod_l+0x33e>
 8015bd4:	2a4e      	cmp	r2, #78	@ 0x4e
 8015bd6:	f47f aeda 	bne.w	801598e <_strtod_l+0xae>
 8015bda:	4997      	ldr	r1, [pc, #604]	@ (8015e38 <_strtod_l+0x558>)
 8015bdc:	a811      	add	r0, sp, #68	@ 0x44
 8015bde:	f002 fb69 	bl	80182b4 <__match>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	f43f aed3 	beq.w	801598e <_strtod_l+0xae>
 8015be8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	2b28      	cmp	r3, #40	@ 0x28
 8015bee:	d12d      	bne.n	8015c4c <_strtod_l+0x36c>
 8015bf0:	4992      	ldr	r1, [pc, #584]	@ (8015e3c <_strtod_l+0x55c>)
 8015bf2:	aa14      	add	r2, sp, #80	@ 0x50
 8015bf4:	a811      	add	r0, sp, #68	@ 0x44
 8015bf6:	f002 fb71 	bl	80182dc <__hexnan>
 8015bfa:	2805      	cmp	r0, #5
 8015bfc:	d126      	bne.n	8015c4c <_strtod_l+0x36c>
 8015bfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015c00:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015c04:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015c08:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015c0c:	e6a3      	b.n	8015956 <_strtod_l+0x76>
 8015c0e:	240a      	movs	r4, #10
 8015c10:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015c14:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015c18:	e7b8      	b.n	8015b8c <_strtod_l+0x2ac>
 8015c1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8015c1c:	e7db      	b.n	8015bd6 <_strtod_l+0x2f6>
 8015c1e:	4988      	ldr	r1, [pc, #544]	@ (8015e40 <_strtod_l+0x560>)
 8015c20:	a811      	add	r0, sp, #68	@ 0x44
 8015c22:	f002 fb47 	bl	80182b4 <__match>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	f43f aeb1 	beq.w	801598e <_strtod_l+0xae>
 8015c2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c2e:	4985      	ldr	r1, [pc, #532]	@ (8015e44 <_strtod_l+0x564>)
 8015c30:	3b01      	subs	r3, #1
 8015c32:	a811      	add	r0, sp, #68	@ 0x44
 8015c34:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c36:	f002 fb3d 	bl	80182b4 <__match>
 8015c3a:	b910      	cbnz	r0, 8015c42 <_strtod_l+0x362>
 8015c3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c3e:	3301      	adds	r3, #1
 8015c40:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c42:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015e58 <_strtod_l+0x578>
 8015c46:	f04f 0a00 	mov.w	sl, #0
 8015c4a:	e684      	b.n	8015956 <_strtod_l+0x76>
 8015c4c:	487e      	ldr	r0, [pc, #504]	@ (8015e48 <_strtod_l+0x568>)
 8015c4e:	f001 fa77 	bl	8017140 <nan>
 8015c52:	ec5b ab10 	vmov	sl, fp, d0
 8015c56:	e67e      	b.n	8015956 <_strtod_l+0x76>
 8015c58:	ee07 9a90 	vmov	s15, r9
 8015c5c:	1be2      	subs	r2, r4, r7
 8015c5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015c62:	2d00      	cmp	r5, #0
 8015c64:	bf08      	it	eq
 8015c66:	461d      	moveq	r5, r3
 8015c68:	2b10      	cmp	r3, #16
 8015c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	bfa8      	it	ge
 8015c70:	2210      	movge	r2, #16
 8015c72:	2b09      	cmp	r3, #9
 8015c74:	ec5b ab17 	vmov	sl, fp, d7
 8015c78:	dc15      	bgt.n	8015ca6 <_strtod_l+0x3c6>
 8015c7a:	1be1      	subs	r1, r4, r7
 8015c7c:	2900      	cmp	r1, #0
 8015c7e:	f43f ae6a 	beq.w	8015956 <_strtod_l+0x76>
 8015c82:	eba4 0107 	sub.w	r1, r4, r7
 8015c86:	dd72      	ble.n	8015d6e <_strtod_l+0x48e>
 8015c88:	2916      	cmp	r1, #22
 8015c8a:	dc59      	bgt.n	8015d40 <_strtod_l+0x460>
 8015c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8015e4c <_strtod_l+0x56c>)
 8015c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c94:	ed93 7b00 	vldr	d7, [r3]
 8015c98:	ec4b ab16 	vmov	d6, sl, fp
 8015c9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ca0:	ec5b ab17 	vmov	sl, fp, d7
 8015ca4:	e657      	b.n	8015956 <_strtod_l+0x76>
 8015ca6:	4969      	ldr	r1, [pc, #420]	@ (8015e4c <_strtod_l+0x56c>)
 8015ca8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015cac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015cb0:	ee06 6a90 	vmov	s13, r6
 8015cb4:	2b0f      	cmp	r3, #15
 8015cb6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015cba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015cbe:	ec5b ab16 	vmov	sl, fp, d6
 8015cc2:	ddda      	ble.n	8015c7a <_strtod_l+0x39a>
 8015cc4:	1a9a      	subs	r2, r3, r2
 8015cc6:	1be1      	subs	r1, r4, r7
 8015cc8:	440a      	add	r2, r1
 8015cca:	2a00      	cmp	r2, #0
 8015ccc:	f340 8094 	ble.w	8015df8 <_strtod_l+0x518>
 8015cd0:	f012 000f 	ands.w	r0, r2, #15
 8015cd4:	d00a      	beq.n	8015cec <_strtod_l+0x40c>
 8015cd6:	495d      	ldr	r1, [pc, #372]	@ (8015e4c <_strtod_l+0x56c>)
 8015cd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015cdc:	ed91 7b00 	vldr	d7, [r1]
 8015ce0:	ec4b ab16 	vmov	d6, sl, fp
 8015ce4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ce8:	ec5b ab17 	vmov	sl, fp, d7
 8015cec:	f032 020f 	bics.w	r2, r2, #15
 8015cf0:	d073      	beq.n	8015dda <_strtod_l+0x4fa>
 8015cf2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015cf6:	dd47      	ble.n	8015d88 <_strtod_l+0x4a8>
 8015cf8:	2400      	movs	r4, #0
 8015cfa:	4625      	mov	r5, r4
 8015cfc:	9407      	str	r4, [sp, #28]
 8015cfe:	4626      	mov	r6, r4
 8015d00:	9a05      	ldr	r2, [sp, #20]
 8015d02:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015e58 <_strtod_l+0x578>
 8015d06:	2322      	movs	r3, #34	@ 0x22
 8015d08:	6013      	str	r3, [r2, #0]
 8015d0a:	f04f 0a00 	mov.w	sl, #0
 8015d0e:	9b07      	ldr	r3, [sp, #28]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f43f ae20 	beq.w	8015956 <_strtod_l+0x76>
 8015d16:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015d18:	9805      	ldr	r0, [sp, #20]
 8015d1a:	f002 fc83 	bl	8018624 <_Bfree>
 8015d1e:	9805      	ldr	r0, [sp, #20]
 8015d20:	4631      	mov	r1, r6
 8015d22:	f002 fc7f 	bl	8018624 <_Bfree>
 8015d26:	9805      	ldr	r0, [sp, #20]
 8015d28:	4629      	mov	r1, r5
 8015d2a:	f002 fc7b 	bl	8018624 <_Bfree>
 8015d2e:	9907      	ldr	r1, [sp, #28]
 8015d30:	9805      	ldr	r0, [sp, #20]
 8015d32:	f002 fc77 	bl	8018624 <_Bfree>
 8015d36:	9805      	ldr	r0, [sp, #20]
 8015d38:	4621      	mov	r1, r4
 8015d3a:	f002 fc73 	bl	8018624 <_Bfree>
 8015d3e:	e60a      	b.n	8015956 <_strtod_l+0x76>
 8015d40:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015d44:	1be0      	subs	r0, r4, r7
 8015d46:	4281      	cmp	r1, r0
 8015d48:	dbbc      	blt.n	8015cc4 <_strtod_l+0x3e4>
 8015d4a:	4a40      	ldr	r2, [pc, #256]	@ (8015e4c <_strtod_l+0x56c>)
 8015d4c:	f1c3 030f 	rsb	r3, r3, #15
 8015d50:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015d54:	ed91 7b00 	vldr	d7, [r1]
 8015d58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015d5a:	ec4b ab16 	vmov	d6, sl, fp
 8015d5e:	1acb      	subs	r3, r1, r3
 8015d60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d68:	ed92 6b00 	vldr	d6, [r2]
 8015d6c:	e796      	b.n	8015c9c <_strtod_l+0x3bc>
 8015d6e:	3116      	adds	r1, #22
 8015d70:	dba8      	blt.n	8015cc4 <_strtod_l+0x3e4>
 8015d72:	4b36      	ldr	r3, [pc, #216]	@ (8015e4c <_strtod_l+0x56c>)
 8015d74:	1b3c      	subs	r4, r7, r4
 8015d76:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015d7a:	ed94 7b00 	vldr	d7, [r4]
 8015d7e:	ec4b ab16 	vmov	d6, sl, fp
 8015d82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d86:	e78b      	b.n	8015ca0 <_strtod_l+0x3c0>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	ec4b ab17 	vmov	d7, sl, fp
 8015d8e:	4e30      	ldr	r6, [pc, #192]	@ (8015e50 <_strtod_l+0x570>)
 8015d90:	1112      	asrs	r2, r2, #4
 8015d92:	4601      	mov	r1, r0
 8015d94:	2a01      	cmp	r2, #1
 8015d96:	dc23      	bgt.n	8015de0 <_strtod_l+0x500>
 8015d98:	b108      	cbz	r0, 8015d9e <_strtod_l+0x4be>
 8015d9a:	ec5b ab17 	vmov	sl, fp, d7
 8015d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8015e50 <_strtod_l+0x570>)
 8015da0:	482c      	ldr	r0, [pc, #176]	@ (8015e54 <_strtod_l+0x574>)
 8015da2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015da6:	ed92 7b00 	vldr	d7, [r2]
 8015daa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015dae:	ec4b ab16 	vmov	d6, sl, fp
 8015db2:	4a29      	ldr	r2, [pc, #164]	@ (8015e58 <_strtod_l+0x578>)
 8015db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015db8:	ee17 1a90 	vmov	r1, s15
 8015dbc:	400a      	ands	r2, r1
 8015dbe:	4282      	cmp	r2, r0
 8015dc0:	ec5b ab17 	vmov	sl, fp, d7
 8015dc4:	d898      	bhi.n	8015cf8 <_strtod_l+0x418>
 8015dc6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015dca:	4282      	cmp	r2, r0
 8015dcc:	bf86      	itte	hi
 8015dce:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015e5c <_strtod_l+0x57c>
 8015dd2:	f04f 3aff 	movhi.w	sl, #4294967295
 8015dd6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015dda:	2200      	movs	r2, #0
 8015ddc:	9206      	str	r2, [sp, #24]
 8015dde:	e076      	b.n	8015ece <_strtod_l+0x5ee>
 8015de0:	f012 0f01 	tst.w	r2, #1
 8015de4:	d004      	beq.n	8015df0 <_strtod_l+0x510>
 8015de6:	ed96 6b00 	vldr	d6, [r6]
 8015dea:	2001      	movs	r0, #1
 8015dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015df0:	3101      	adds	r1, #1
 8015df2:	1052      	asrs	r2, r2, #1
 8015df4:	3608      	adds	r6, #8
 8015df6:	e7cd      	b.n	8015d94 <_strtod_l+0x4b4>
 8015df8:	d0ef      	beq.n	8015dda <_strtod_l+0x4fa>
 8015dfa:	4252      	negs	r2, r2
 8015dfc:	f012 000f 	ands.w	r0, r2, #15
 8015e00:	d00a      	beq.n	8015e18 <_strtod_l+0x538>
 8015e02:	4912      	ldr	r1, [pc, #72]	@ (8015e4c <_strtod_l+0x56c>)
 8015e04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015e08:	ed91 7b00 	vldr	d7, [r1]
 8015e0c:	ec4b ab16 	vmov	d6, sl, fp
 8015e10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015e14:	ec5b ab17 	vmov	sl, fp, d7
 8015e18:	1112      	asrs	r2, r2, #4
 8015e1a:	d0de      	beq.n	8015dda <_strtod_l+0x4fa>
 8015e1c:	2a1f      	cmp	r2, #31
 8015e1e:	dd1f      	ble.n	8015e60 <_strtod_l+0x580>
 8015e20:	2400      	movs	r4, #0
 8015e22:	4625      	mov	r5, r4
 8015e24:	9407      	str	r4, [sp, #28]
 8015e26:	4626      	mov	r6, r4
 8015e28:	9a05      	ldr	r2, [sp, #20]
 8015e2a:	2322      	movs	r3, #34	@ 0x22
 8015e2c:	f04f 0a00 	mov.w	sl, #0
 8015e30:	f04f 0b00 	mov.w	fp, #0
 8015e34:	6013      	str	r3, [r2, #0]
 8015e36:	e76a      	b.n	8015d0e <_strtod_l+0x42e>
 8015e38:	0801ac7e 	.word	0x0801ac7e
 8015e3c:	0801ab1c 	.word	0x0801ab1c
 8015e40:	0801ac76 	.word	0x0801ac76
 8015e44:	0801acb0 	.word	0x0801acb0
 8015e48:	0801af3c 	.word	0x0801af3c
 8015e4c:	0801ae28 	.word	0x0801ae28
 8015e50:	0801ae00 	.word	0x0801ae00
 8015e54:	7ca00000 	.word	0x7ca00000
 8015e58:	7ff00000 	.word	0x7ff00000
 8015e5c:	7fefffff 	.word	0x7fefffff
 8015e60:	f012 0110 	ands.w	r1, r2, #16
 8015e64:	bf18      	it	ne
 8015e66:	216a      	movne	r1, #106	@ 0x6a
 8015e68:	9106      	str	r1, [sp, #24]
 8015e6a:	ec4b ab17 	vmov	d7, sl, fp
 8015e6e:	49b0      	ldr	r1, [pc, #704]	@ (8016130 <_strtod_l+0x850>)
 8015e70:	2000      	movs	r0, #0
 8015e72:	07d6      	lsls	r6, r2, #31
 8015e74:	d504      	bpl.n	8015e80 <_strtod_l+0x5a0>
 8015e76:	ed91 6b00 	vldr	d6, [r1]
 8015e7a:	2001      	movs	r0, #1
 8015e7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e80:	1052      	asrs	r2, r2, #1
 8015e82:	f101 0108 	add.w	r1, r1, #8
 8015e86:	d1f4      	bne.n	8015e72 <_strtod_l+0x592>
 8015e88:	b108      	cbz	r0, 8015e8e <_strtod_l+0x5ae>
 8015e8a:	ec5b ab17 	vmov	sl, fp, d7
 8015e8e:	9a06      	ldr	r2, [sp, #24]
 8015e90:	b1b2      	cbz	r2, 8015ec0 <_strtod_l+0x5e0>
 8015e92:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015e96:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	4658      	mov	r0, fp
 8015e9e:	dd0f      	ble.n	8015ec0 <_strtod_l+0x5e0>
 8015ea0:	2a1f      	cmp	r2, #31
 8015ea2:	dd55      	ble.n	8015f50 <_strtod_l+0x670>
 8015ea4:	2a34      	cmp	r2, #52	@ 0x34
 8015ea6:	bfde      	ittt	le
 8015ea8:	f04f 32ff 	movle.w	r2, #4294967295
 8015eac:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015eb0:	408a      	lslle	r2, r1
 8015eb2:	f04f 0a00 	mov.w	sl, #0
 8015eb6:	bfcc      	ite	gt
 8015eb8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015ebc:	ea02 0b00 	andle.w	fp, r2, r0
 8015ec0:	ec4b ab17 	vmov	d7, sl, fp
 8015ec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ecc:	d0a8      	beq.n	8015e20 <_strtod_l+0x540>
 8015ece:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015ed0:	9805      	ldr	r0, [sp, #20]
 8015ed2:	f8cd 9000 	str.w	r9, [sp]
 8015ed6:	462a      	mov	r2, r5
 8015ed8:	f002 fc0c 	bl	80186f4 <__s2b>
 8015edc:	9007      	str	r0, [sp, #28]
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	f43f af0a 	beq.w	8015cf8 <_strtod_l+0x418>
 8015ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ee6:	1b3f      	subs	r7, r7, r4
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	bfb4      	ite	lt
 8015eec:	463b      	movlt	r3, r7
 8015eee:	2300      	movge	r3, #0
 8015ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ef4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016120 <_strtod_l+0x840>
 8015ef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015efc:	2400      	movs	r4, #0
 8015efe:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f00:	4625      	mov	r5, r4
 8015f02:	9b07      	ldr	r3, [sp, #28]
 8015f04:	9805      	ldr	r0, [sp, #20]
 8015f06:	6859      	ldr	r1, [r3, #4]
 8015f08:	f002 fb4c 	bl	80185a4 <_Balloc>
 8015f0c:	4606      	mov	r6, r0
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	f43f aef6 	beq.w	8015d00 <_strtod_l+0x420>
 8015f14:	9b07      	ldr	r3, [sp, #28]
 8015f16:	691a      	ldr	r2, [r3, #16]
 8015f18:	ec4b ab19 	vmov	d9, sl, fp
 8015f1c:	3202      	adds	r2, #2
 8015f1e:	f103 010c 	add.w	r1, r3, #12
 8015f22:	0092      	lsls	r2, r2, #2
 8015f24:	300c      	adds	r0, #12
 8015f26:	f001 f8fa 	bl	801711e <memcpy>
 8015f2a:	eeb0 0b49 	vmov.f64	d0, d9
 8015f2e:	9805      	ldr	r0, [sp, #20]
 8015f30:	aa14      	add	r2, sp, #80	@ 0x50
 8015f32:	a913      	add	r1, sp, #76	@ 0x4c
 8015f34:	f002 ff1a 	bl	8018d6c <__d2b>
 8015f38:	9012      	str	r0, [sp, #72]	@ 0x48
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	f43f aee0 	beq.w	8015d00 <_strtod_l+0x420>
 8015f40:	9805      	ldr	r0, [sp, #20]
 8015f42:	2101      	movs	r1, #1
 8015f44:	f002 fc6c 	bl	8018820 <__i2b>
 8015f48:	4605      	mov	r5, r0
 8015f4a:	b940      	cbnz	r0, 8015f5e <_strtod_l+0x67e>
 8015f4c:	2500      	movs	r5, #0
 8015f4e:	e6d7      	b.n	8015d00 <_strtod_l+0x420>
 8015f50:	f04f 31ff 	mov.w	r1, #4294967295
 8015f54:	fa01 f202 	lsl.w	r2, r1, r2
 8015f58:	ea02 0a0a 	and.w	sl, r2, sl
 8015f5c:	e7b0      	b.n	8015ec0 <_strtod_l+0x5e0>
 8015f5e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015f60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015f62:	2f00      	cmp	r7, #0
 8015f64:	bfab      	itete	ge
 8015f66:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015f68:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015f6a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015f6e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015f72:	bfac      	ite	ge
 8015f74:	eb07 0903 	addge.w	r9, r7, r3
 8015f78:	eba3 0807 	sublt.w	r8, r3, r7
 8015f7c:	9b06      	ldr	r3, [sp, #24]
 8015f7e:	1aff      	subs	r7, r7, r3
 8015f80:	4417      	add	r7, r2
 8015f82:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015f86:	4a6b      	ldr	r2, [pc, #428]	@ (8016134 <_strtod_l+0x854>)
 8015f88:	3f01      	subs	r7, #1
 8015f8a:	4297      	cmp	r7, r2
 8015f8c:	da51      	bge.n	8016032 <_strtod_l+0x752>
 8015f8e:	1bd1      	subs	r1, r2, r7
 8015f90:	291f      	cmp	r1, #31
 8015f92:	eba3 0301 	sub.w	r3, r3, r1
 8015f96:	f04f 0201 	mov.w	r2, #1
 8015f9a:	dc3e      	bgt.n	801601a <_strtod_l+0x73a>
 8015f9c:	408a      	lsls	r2, r1
 8015f9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015fa4:	eb09 0703 	add.w	r7, r9, r3
 8015fa8:	4498      	add	r8, r3
 8015faa:	9b06      	ldr	r3, [sp, #24]
 8015fac:	45b9      	cmp	r9, r7
 8015fae:	4498      	add	r8, r3
 8015fb0:	464b      	mov	r3, r9
 8015fb2:	bfa8      	it	ge
 8015fb4:	463b      	movge	r3, r7
 8015fb6:	4543      	cmp	r3, r8
 8015fb8:	bfa8      	it	ge
 8015fba:	4643      	movge	r3, r8
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	bfc2      	ittt	gt
 8015fc0:	1aff      	subgt	r7, r7, r3
 8015fc2:	eba8 0803 	subgt.w	r8, r8, r3
 8015fc6:	eba9 0903 	subgt.w	r9, r9, r3
 8015fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	dd16      	ble.n	8015ffe <_strtod_l+0x71e>
 8015fd0:	4629      	mov	r1, r5
 8015fd2:	9805      	ldr	r0, [sp, #20]
 8015fd4:	461a      	mov	r2, r3
 8015fd6:	f002 fce3 	bl	80189a0 <__pow5mult>
 8015fda:	4605      	mov	r5, r0
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	d0b5      	beq.n	8015f4c <_strtod_l+0x66c>
 8015fe0:	4601      	mov	r1, r0
 8015fe2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015fe4:	9805      	ldr	r0, [sp, #20]
 8015fe6:	f002 fc31 	bl	801884c <__multiply>
 8015fea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015fec:	2800      	cmp	r0, #0
 8015fee:	f43f ae87 	beq.w	8015d00 <_strtod_l+0x420>
 8015ff2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015ff4:	9805      	ldr	r0, [sp, #20]
 8015ff6:	f002 fb15 	bl	8018624 <_Bfree>
 8015ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ffc:	9312      	str	r3, [sp, #72]	@ 0x48
 8015ffe:	2f00      	cmp	r7, #0
 8016000:	dc1b      	bgt.n	801603a <_strtod_l+0x75a>
 8016002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016004:	2b00      	cmp	r3, #0
 8016006:	dd21      	ble.n	801604c <_strtod_l+0x76c>
 8016008:	4631      	mov	r1, r6
 801600a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801600c:	9805      	ldr	r0, [sp, #20]
 801600e:	f002 fcc7 	bl	80189a0 <__pow5mult>
 8016012:	4606      	mov	r6, r0
 8016014:	b9d0      	cbnz	r0, 801604c <_strtod_l+0x76c>
 8016016:	2600      	movs	r6, #0
 8016018:	e672      	b.n	8015d00 <_strtod_l+0x420>
 801601a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801601e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016022:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016026:	37e2      	adds	r7, #226	@ 0xe2
 8016028:	fa02 f107 	lsl.w	r1, r2, r7
 801602c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801602e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016030:	e7b8      	b.n	8015fa4 <_strtod_l+0x6c4>
 8016032:	2200      	movs	r2, #0
 8016034:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016036:	2201      	movs	r2, #1
 8016038:	e7f9      	b.n	801602e <_strtod_l+0x74e>
 801603a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801603c:	9805      	ldr	r0, [sp, #20]
 801603e:	463a      	mov	r2, r7
 8016040:	f002 fd08 	bl	8018a54 <__lshift>
 8016044:	9012      	str	r0, [sp, #72]	@ 0x48
 8016046:	2800      	cmp	r0, #0
 8016048:	d1db      	bne.n	8016002 <_strtod_l+0x722>
 801604a:	e659      	b.n	8015d00 <_strtod_l+0x420>
 801604c:	f1b8 0f00 	cmp.w	r8, #0
 8016050:	dd07      	ble.n	8016062 <_strtod_l+0x782>
 8016052:	4631      	mov	r1, r6
 8016054:	9805      	ldr	r0, [sp, #20]
 8016056:	4642      	mov	r2, r8
 8016058:	f002 fcfc 	bl	8018a54 <__lshift>
 801605c:	4606      	mov	r6, r0
 801605e:	2800      	cmp	r0, #0
 8016060:	d0d9      	beq.n	8016016 <_strtod_l+0x736>
 8016062:	f1b9 0f00 	cmp.w	r9, #0
 8016066:	dd08      	ble.n	801607a <_strtod_l+0x79a>
 8016068:	4629      	mov	r1, r5
 801606a:	9805      	ldr	r0, [sp, #20]
 801606c:	464a      	mov	r2, r9
 801606e:	f002 fcf1 	bl	8018a54 <__lshift>
 8016072:	4605      	mov	r5, r0
 8016074:	2800      	cmp	r0, #0
 8016076:	f43f ae43 	beq.w	8015d00 <_strtod_l+0x420>
 801607a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801607c:	9805      	ldr	r0, [sp, #20]
 801607e:	4632      	mov	r2, r6
 8016080:	f002 fd70 	bl	8018b64 <__mdiff>
 8016084:	4604      	mov	r4, r0
 8016086:	2800      	cmp	r0, #0
 8016088:	f43f ae3a 	beq.w	8015d00 <_strtod_l+0x420>
 801608c:	2300      	movs	r3, #0
 801608e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016092:	60c3      	str	r3, [r0, #12]
 8016094:	4629      	mov	r1, r5
 8016096:	f002 fd49 	bl	8018b2c <__mcmp>
 801609a:	2800      	cmp	r0, #0
 801609c:	da4e      	bge.n	801613c <_strtod_l+0x85c>
 801609e:	ea58 080a 	orrs.w	r8, r8, sl
 80160a2:	d174      	bne.n	801618e <_strtod_l+0x8ae>
 80160a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d170      	bne.n	801618e <_strtod_l+0x8ae>
 80160ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80160b0:	0d1b      	lsrs	r3, r3, #20
 80160b2:	051b      	lsls	r3, r3, #20
 80160b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80160b8:	d969      	bls.n	801618e <_strtod_l+0x8ae>
 80160ba:	6963      	ldr	r3, [r4, #20]
 80160bc:	b913      	cbnz	r3, 80160c4 <_strtod_l+0x7e4>
 80160be:	6923      	ldr	r3, [r4, #16]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	dd64      	ble.n	801618e <_strtod_l+0x8ae>
 80160c4:	4621      	mov	r1, r4
 80160c6:	2201      	movs	r2, #1
 80160c8:	9805      	ldr	r0, [sp, #20]
 80160ca:	f002 fcc3 	bl	8018a54 <__lshift>
 80160ce:	4629      	mov	r1, r5
 80160d0:	4604      	mov	r4, r0
 80160d2:	f002 fd2b 	bl	8018b2c <__mcmp>
 80160d6:	2800      	cmp	r0, #0
 80160d8:	dd59      	ble.n	801618e <_strtod_l+0x8ae>
 80160da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80160de:	9a06      	ldr	r2, [sp, #24]
 80160e0:	0d1b      	lsrs	r3, r3, #20
 80160e2:	051b      	lsls	r3, r3, #20
 80160e4:	2a00      	cmp	r2, #0
 80160e6:	d070      	beq.n	80161ca <_strtod_l+0x8ea>
 80160e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80160ec:	d86d      	bhi.n	80161ca <_strtod_l+0x8ea>
 80160ee:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80160f2:	f67f ae99 	bls.w	8015e28 <_strtod_l+0x548>
 80160f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016128 <_strtod_l+0x848>
 80160fa:	ec4b ab16 	vmov	d6, sl, fp
 80160fe:	4b0e      	ldr	r3, [pc, #56]	@ (8016138 <_strtod_l+0x858>)
 8016100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016104:	ee17 2a90 	vmov	r2, s15
 8016108:	4013      	ands	r3, r2
 801610a:	ec5b ab17 	vmov	sl, fp, d7
 801610e:	2b00      	cmp	r3, #0
 8016110:	f47f ae01 	bne.w	8015d16 <_strtod_l+0x436>
 8016114:	9a05      	ldr	r2, [sp, #20]
 8016116:	2322      	movs	r3, #34	@ 0x22
 8016118:	6013      	str	r3, [r2, #0]
 801611a:	e5fc      	b.n	8015d16 <_strtod_l+0x436>
 801611c:	f3af 8000 	nop.w
 8016120:	ffc00000 	.word	0xffc00000
 8016124:	41dfffff 	.word	0x41dfffff
 8016128:	00000000 	.word	0x00000000
 801612c:	39500000 	.word	0x39500000
 8016130:	0801ab48 	.word	0x0801ab48
 8016134:	fffffc02 	.word	0xfffffc02
 8016138:	7ff00000 	.word	0x7ff00000
 801613c:	46d9      	mov	r9, fp
 801613e:	d15d      	bne.n	80161fc <_strtod_l+0x91c>
 8016140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016144:	f1b8 0f00 	cmp.w	r8, #0
 8016148:	d02a      	beq.n	80161a0 <_strtod_l+0x8c0>
 801614a:	4aab      	ldr	r2, [pc, #684]	@ (80163f8 <_strtod_l+0xb18>)
 801614c:	4293      	cmp	r3, r2
 801614e:	d12a      	bne.n	80161a6 <_strtod_l+0x8c6>
 8016150:	9b06      	ldr	r3, [sp, #24]
 8016152:	4652      	mov	r2, sl
 8016154:	b1fb      	cbz	r3, 8016196 <_strtod_l+0x8b6>
 8016156:	4ba9      	ldr	r3, [pc, #676]	@ (80163fc <_strtod_l+0xb1c>)
 8016158:	ea0b 0303 	and.w	r3, fp, r3
 801615c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016160:	f04f 31ff 	mov.w	r1, #4294967295
 8016164:	d81a      	bhi.n	801619c <_strtod_l+0x8bc>
 8016166:	0d1b      	lsrs	r3, r3, #20
 8016168:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801616c:	fa01 f303 	lsl.w	r3, r1, r3
 8016170:	429a      	cmp	r2, r3
 8016172:	d118      	bne.n	80161a6 <_strtod_l+0x8c6>
 8016174:	4ba2      	ldr	r3, [pc, #648]	@ (8016400 <_strtod_l+0xb20>)
 8016176:	4599      	cmp	r9, r3
 8016178:	d102      	bne.n	8016180 <_strtod_l+0x8a0>
 801617a:	3201      	adds	r2, #1
 801617c:	f43f adc0 	beq.w	8015d00 <_strtod_l+0x420>
 8016180:	4b9e      	ldr	r3, [pc, #632]	@ (80163fc <_strtod_l+0xb1c>)
 8016182:	ea09 0303 	and.w	r3, r9, r3
 8016186:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801618a:	f04f 0a00 	mov.w	sl, #0
 801618e:	9b06      	ldr	r3, [sp, #24]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d1b0      	bne.n	80160f6 <_strtod_l+0x816>
 8016194:	e5bf      	b.n	8015d16 <_strtod_l+0x436>
 8016196:	f04f 33ff 	mov.w	r3, #4294967295
 801619a:	e7e9      	b.n	8016170 <_strtod_l+0x890>
 801619c:	460b      	mov	r3, r1
 801619e:	e7e7      	b.n	8016170 <_strtod_l+0x890>
 80161a0:	ea53 030a 	orrs.w	r3, r3, sl
 80161a4:	d099      	beq.n	80160da <_strtod_l+0x7fa>
 80161a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80161a8:	b1c3      	cbz	r3, 80161dc <_strtod_l+0x8fc>
 80161aa:	ea13 0f09 	tst.w	r3, r9
 80161ae:	d0ee      	beq.n	801618e <_strtod_l+0x8ae>
 80161b0:	9a06      	ldr	r2, [sp, #24]
 80161b2:	4650      	mov	r0, sl
 80161b4:	4659      	mov	r1, fp
 80161b6:	f1b8 0f00 	cmp.w	r8, #0
 80161ba:	d013      	beq.n	80161e4 <_strtod_l+0x904>
 80161bc:	f7ff fb73 	bl	80158a6 <sulp>
 80161c0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80161c4:	ec5b ab17 	vmov	sl, fp, d7
 80161c8:	e7e1      	b.n	801618e <_strtod_l+0x8ae>
 80161ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80161ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80161d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80161d6:	f04f 3aff 	mov.w	sl, #4294967295
 80161da:	e7d8      	b.n	801618e <_strtod_l+0x8ae>
 80161dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161de:	ea13 0f0a 	tst.w	r3, sl
 80161e2:	e7e4      	b.n	80161ae <_strtod_l+0x8ce>
 80161e4:	f7ff fb5f 	bl	80158a6 <sulp>
 80161e8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80161ec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80161f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f4:	ec5b ab10 	vmov	sl, fp, d0
 80161f8:	d1c9      	bne.n	801618e <_strtod_l+0x8ae>
 80161fa:	e615      	b.n	8015e28 <_strtod_l+0x548>
 80161fc:	4629      	mov	r1, r5
 80161fe:	4620      	mov	r0, r4
 8016200:	f002 fe0c 	bl	8018e1c <__ratio>
 8016204:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016208:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016210:	d85d      	bhi.n	80162ce <_strtod_l+0x9ee>
 8016212:	f1b8 0f00 	cmp.w	r8, #0
 8016216:	d164      	bne.n	80162e2 <_strtod_l+0xa02>
 8016218:	f1ba 0f00 	cmp.w	sl, #0
 801621c:	d14b      	bne.n	80162b6 <_strtod_l+0x9d6>
 801621e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016222:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016226:	2b00      	cmp	r3, #0
 8016228:	d160      	bne.n	80162ec <_strtod_l+0xa0c>
 801622a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801622e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016236:	d401      	bmi.n	801623c <_strtod_l+0x95c>
 8016238:	ee20 8b08 	vmul.f64	d8, d0, d8
 801623c:	eeb1 ab48 	vneg.f64	d10, d8
 8016240:	486e      	ldr	r0, [pc, #440]	@ (80163fc <_strtod_l+0xb1c>)
 8016242:	4970      	ldr	r1, [pc, #448]	@ (8016404 <_strtod_l+0xb24>)
 8016244:	ea09 0700 	and.w	r7, r9, r0
 8016248:	428f      	cmp	r7, r1
 801624a:	ec53 2b1a 	vmov	r2, r3, d10
 801624e:	d17d      	bne.n	801634c <_strtod_l+0xa6c>
 8016250:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016254:	ec4b ab1c 	vmov	d12, sl, fp
 8016258:	eeb0 0b4c 	vmov.f64	d0, d12
 801625c:	f002 fd16 	bl	8018c8c <__ulp>
 8016260:	4866      	ldr	r0, [pc, #408]	@ (80163fc <_strtod_l+0xb1c>)
 8016262:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016266:	ee1c 3a90 	vmov	r3, s25
 801626a:	4a67      	ldr	r2, [pc, #412]	@ (8016408 <_strtod_l+0xb28>)
 801626c:	ea03 0100 	and.w	r1, r3, r0
 8016270:	4291      	cmp	r1, r2
 8016272:	ec5b ab1c 	vmov	sl, fp, d12
 8016276:	d93c      	bls.n	80162f2 <_strtod_l+0xa12>
 8016278:	ee19 2a90 	vmov	r2, s19
 801627c:	4b60      	ldr	r3, [pc, #384]	@ (8016400 <_strtod_l+0xb20>)
 801627e:	429a      	cmp	r2, r3
 8016280:	d104      	bne.n	801628c <_strtod_l+0x9ac>
 8016282:	ee19 3a10 	vmov	r3, s18
 8016286:	3301      	adds	r3, #1
 8016288:	f43f ad3a 	beq.w	8015d00 <_strtod_l+0x420>
 801628c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016400 <_strtod_l+0xb20>
 8016290:	f04f 3aff 	mov.w	sl, #4294967295
 8016294:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016296:	9805      	ldr	r0, [sp, #20]
 8016298:	f002 f9c4 	bl	8018624 <_Bfree>
 801629c:	9805      	ldr	r0, [sp, #20]
 801629e:	4631      	mov	r1, r6
 80162a0:	f002 f9c0 	bl	8018624 <_Bfree>
 80162a4:	9805      	ldr	r0, [sp, #20]
 80162a6:	4629      	mov	r1, r5
 80162a8:	f002 f9bc 	bl	8018624 <_Bfree>
 80162ac:	9805      	ldr	r0, [sp, #20]
 80162ae:	4621      	mov	r1, r4
 80162b0:	f002 f9b8 	bl	8018624 <_Bfree>
 80162b4:	e625      	b.n	8015f02 <_strtod_l+0x622>
 80162b6:	f1ba 0f01 	cmp.w	sl, #1
 80162ba:	d103      	bne.n	80162c4 <_strtod_l+0x9e4>
 80162bc:	f1bb 0f00 	cmp.w	fp, #0
 80162c0:	f43f adb2 	beq.w	8015e28 <_strtod_l+0x548>
 80162c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80162c8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80162cc:	e7b8      	b.n	8016240 <_strtod_l+0x960>
 80162ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80162d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80162d6:	f1b8 0f00 	cmp.w	r8, #0
 80162da:	d0af      	beq.n	801623c <_strtod_l+0x95c>
 80162dc:	eeb0 ab48 	vmov.f64	d10, d8
 80162e0:	e7ae      	b.n	8016240 <_strtod_l+0x960>
 80162e2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80162e6:	eeb0 8b4a 	vmov.f64	d8, d10
 80162ea:	e7a9      	b.n	8016240 <_strtod_l+0x960>
 80162ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80162f0:	e7a6      	b.n	8016240 <_strtod_l+0x960>
 80162f2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80162f6:	9b06      	ldr	r3, [sp, #24]
 80162f8:	46d9      	mov	r9, fp
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d1ca      	bne.n	8016294 <_strtod_l+0x9b4>
 80162fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016302:	0d1b      	lsrs	r3, r3, #20
 8016304:	051b      	lsls	r3, r3, #20
 8016306:	429f      	cmp	r7, r3
 8016308:	d1c4      	bne.n	8016294 <_strtod_l+0x9b4>
 801630a:	ec51 0b18 	vmov	r0, r1, d8
 801630e:	f7ea fa3b 	bl	8000788 <__aeabi_d2lz>
 8016312:	f7ea f9f3 	bl	80006fc <__aeabi_l2d>
 8016316:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801631a:	ec41 0b17 	vmov	d7, r0, r1
 801631e:	ea49 090a 	orr.w	r9, r9, sl
 8016322:	ea59 0908 	orrs.w	r9, r9, r8
 8016326:	ee38 8b47 	vsub.f64	d8, d8, d7
 801632a:	d03c      	beq.n	80163a6 <_strtod_l+0xac6>
 801632c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80163e0 <_strtod_l+0xb00>
 8016330:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016338:	f53f aced 	bmi.w	8015d16 <_strtod_l+0x436>
 801633c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80163e8 <_strtod_l+0xb08>
 8016340:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016348:	dda4      	ble.n	8016294 <_strtod_l+0x9b4>
 801634a:	e4e4      	b.n	8015d16 <_strtod_l+0x436>
 801634c:	9906      	ldr	r1, [sp, #24]
 801634e:	b1e1      	cbz	r1, 801638a <_strtod_l+0xaaa>
 8016350:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016354:	d819      	bhi.n	801638a <_strtod_l+0xaaa>
 8016356:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801635e:	d811      	bhi.n	8016384 <_strtod_l+0xaa4>
 8016360:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016364:	ee18 3a10 	vmov	r3, s16
 8016368:	2b01      	cmp	r3, #1
 801636a:	bf38      	it	cc
 801636c:	2301      	movcc	r3, #1
 801636e:	ee08 3a10 	vmov	s16, r3
 8016372:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016376:	f1b8 0f00 	cmp.w	r8, #0
 801637a:	d111      	bne.n	80163a0 <_strtod_l+0xac0>
 801637c:	eeb1 7b48 	vneg.f64	d7, d8
 8016380:	ec53 2b17 	vmov	r2, r3, d7
 8016384:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016388:	1bcb      	subs	r3, r1, r7
 801638a:	eeb0 0b49 	vmov.f64	d0, d9
 801638e:	ec43 2b1a 	vmov	d10, r2, r3
 8016392:	f002 fc7b 	bl	8018c8c <__ulp>
 8016396:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801639a:	ec5b ab19 	vmov	sl, fp, d9
 801639e:	e7aa      	b.n	80162f6 <_strtod_l+0xa16>
 80163a0:	eeb0 7b48 	vmov.f64	d7, d8
 80163a4:	e7ec      	b.n	8016380 <_strtod_l+0xaa0>
 80163a6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80163f0 <_strtod_l+0xb10>
 80163aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80163ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b2:	f57f af6f 	bpl.w	8016294 <_strtod_l+0x9b4>
 80163b6:	e4ae      	b.n	8015d16 <_strtod_l+0x436>
 80163b8:	2300      	movs	r3, #0
 80163ba:	9308      	str	r3, [sp, #32]
 80163bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80163be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80163c0:	6013      	str	r3, [r2, #0]
 80163c2:	f7ff bacc 	b.w	801595e <_strtod_l+0x7e>
 80163c6:	2a65      	cmp	r2, #101	@ 0x65
 80163c8:	f43f abbc 	beq.w	8015b44 <_strtod_l+0x264>
 80163cc:	2a45      	cmp	r2, #69	@ 0x45
 80163ce:	f43f abb9 	beq.w	8015b44 <_strtod_l+0x264>
 80163d2:	2301      	movs	r3, #1
 80163d4:	9306      	str	r3, [sp, #24]
 80163d6:	f7ff bbf0 	b.w	8015bba <_strtod_l+0x2da>
 80163da:	bf00      	nop
 80163dc:	f3af 8000 	nop.w
 80163e0:	94a03595 	.word	0x94a03595
 80163e4:	3fdfffff 	.word	0x3fdfffff
 80163e8:	35afe535 	.word	0x35afe535
 80163ec:	3fe00000 	.word	0x3fe00000
 80163f0:	94a03595 	.word	0x94a03595
 80163f4:	3fcfffff 	.word	0x3fcfffff
 80163f8:	000fffff 	.word	0x000fffff
 80163fc:	7ff00000 	.word	0x7ff00000
 8016400:	7fefffff 	.word	0x7fefffff
 8016404:	7fe00000 	.word	0x7fe00000
 8016408:	7c9fffff 	.word	0x7c9fffff

0801640c <strtod>:
 801640c:	460a      	mov	r2, r1
 801640e:	4601      	mov	r1, r0
 8016410:	4802      	ldr	r0, [pc, #8]	@ (801641c <strtod+0x10>)
 8016412:	4b03      	ldr	r3, [pc, #12]	@ (8016420 <strtod+0x14>)
 8016414:	6800      	ldr	r0, [r0, #0]
 8016416:	f7ff ba63 	b.w	80158e0 <_strtod_l>
 801641a:	bf00      	nop
 801641c:	2400027c 	.word	0x2400027c
 8016420:	24000110 	.word	0x24000110

08016424 <_strtol_l.constprop.0>:
 8016424:	2b24      	cmp	r3, #36	@ 0x24
 8016426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801642a:	4686      	mov	lr, r0
 801642c:	4690      	mov	r8, r2
 801642e:	d801      	bhi.n	8016434 <_strtol_l.constprop.0+0x10>
 8016430:	2b01      	cmp	r3, #1
 8016432:	d106      	bne.n	8016442 <_strtol_l.constprop.0+0x1e>
 8016434:	f000 fe46 	bl	80170c4 <__errno>
 8016438:	2316      	movs	r3, #22
 801643a:	6003      	str	r3, [r0, #0]
 801643c:	2000      	movs	r0, #0
 801643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016442:	4834      	ldr	r0, [pc, #208]	@ (8016514 <_strtol_l.constprop.0+0xf0>)
 8016444:	460d      	mov	r5, r1
 8016446:	462a      	mov	r2, r5
 8016448:	f815 4b01 	ldrb.w	r4, [r5], #1
 801644c:	5d06      	ldrb	r6, [r0, r4]
 801644e:	f016 0608 	ands.w	r6, r6, #8
 8016452:	d1f8      	bne.n	8016446 <_strtol_l.constprop.0+0x22>
 8016454:	2c2d      	cmp	r4, #45	@ 0x2d
 8016456:	d12d      	bne.n	80164b4 <_strtol_l.constprop.0+0x90>
 8016458:	782c      	ldrb	r4, [r5, #0]
 801645a:	2601      	movs	r6, #1
 801645c:	1c95      	adds	r5, r2, #2
 801645e:	f033 0210 	bics.w	r2, r3, #16
 8016462:	d109      	bne.n	8016478 <_strtol_l.constprop.0+0x54>
 8016464:	2c30      	cmp	r4, #48	@ 0x30
 8016466:	d12a      	bne.n	80164be <_strtol_l.constprop.0+0x9a>
 8016468:	782a      	ldrb	r2, [r5, #0]
 801646a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801646e:	2a58      	cmp	r2, #88	@ 0x58
 8016470:	d125      	bne.n	80164be <_strtol_l.constprop.0+0x9a>
 8016472:	786c      	ldrb	r4, [r5, #1]
 8016474:	2310      	movs	r3, #16
 8016476:	3502      	adds	r5, #2
 8016478:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801647c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016480:	2200      	movs	r2, #0
 8016482:	fbbc f9f3 	udiv	r9, ip, r3
 8016486:	4610      	mov	r0, r2
 8016488:	fb03 ca19 	mls	sl, r3, r9, ip
 801648c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016490:	2f09      	cmp	r7, #9
 8016492:	d81b      	bhi.n	80164cc <_strtol_l.constprop.0+0xa8>
 8016494:	463c      	mov	r4, r7
 8016496:	42a3      	cmp	r3, r4
 8016498:	dd27      	ble.n	80164ea <_strtol_l.constprop.0+0xc6>
 801649a:	1c57      	adds	r7, r2, #1
 801649c:	d007      	beq.n	80164ae <_strtol_l.constprop.0+0x8a>
 801649e:	4581      	cmp	r9, r0
 80164a0:	d320      	bcc.n	80164e4 <_strtol_l.constprop.0+0xc0>
 80164a2:	d101      	bne.n	80164a8 <_strtol_l.constprop.0+0x84>
 80164a4:	45a2      	cmp	sl, r4
 80164a6:	db1d      	blt.n	80164e4 <_strtol_l.constprop.0+0xc0>
 80164a8:	fb00 4003 	mla	r0, r0, r3, r4
 80164ac:	2201      	movs	r2, #1
 80164ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164b2:	e7eb      	b.n	801648c <_strtol_l.constprop.0+0x68>
 80164b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80164b6:	bf04      	itt	eq
 80164b8:	782c      	ldrbeq	r4, [r5, #0]
 80164ba:	1c95      	addeq	r5, r2, #2
 80164bc:	e7cf      	b.n	801645e <_strtol_l.constprop.0+0x3a>
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d1da      	bne.n	8016478 <_strtol_l.constprop.0+0x54>
 80164c2:	2c30      	cmp	r4, #48	@ 0x30
 80164c4:	bf0c      	ite	eq
 80164c6:	2308      	moveq	r3, #8
 80164c8:	230a      	movne	r3, #10
 80164ca:	e7d5      	b.n	8016478 <_strtol_l.constprop.0+0x54>
 80164cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80164d0:	2f19      	cmp	r7, #25
 80164d2:	d801      	bhi.n	80164d8 <_strtol_l.constprop.0+0xb4>
 80164d4:	3c37      	subs	r4, #55	@ 0x37
 80164d6:	e7de      	b.n	8016496 <_strtol_l.constprop.0+0x72>
 80164d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80164dc:	2f19      	cmp	r7, #25
 80164de:	d804      	bhi.n	80164ea <_strtol_l.constprop.0+0xc6>
 80164e0:	3c57      	subs	r4, #87	@ 0x57
 80164e2:	e7d8      	b.n	8016496 <_strtol_l.constprop.0+0x72>
 80164e4:	f04f 32ff 	mov.w	r2, #4294967295
 80164e8:	e7e1      	b.n	80164ae <_strtol_l.constprop.0+0x8a>
 80164ea:	1c53      	adds	r3, r2, #1
 80164ec:	d108      	bne.n	8016500 <_strtol_l.constprop.0+0xdc>
 80164ee:	2322      	movs	r3, #34	@ 0x22
 80164f0:	f8ce 3000 	str.w	r3, [lr]
 80164f4:	4660      	mov	r0, ip
 80164f6:	f1b8 0f00 	cmp.w	r8, #0
 80164fa:	d0a0      	beq.n	801643e <_strtol_l.constprop.0+0x1a>
 80164fc:	1e69      	subs	r1, r5, #1
 80164fe:	e006      	b.n	801650e <_strtol_l.constprop.0+0xea>
 8016500:	b106      	cbz	r6, 8016504 <_strtol_l.constprop.0+0xe0>
 8016502:	4240      	negs	r0, r0
 8016504:	f1b8 0f00 	cmp.w	r8, #0
 8016508:	d099      	beq.n	801643e <_strtol_l.constprop.0+0x1a>
 801650a:	2a00      	cmp	r2, #0
 801650c:	d1f6      	bne.n	80164fc <_strtol_l.constprop.0+0xd8>
 801650e:	f8c8 1000 	str.w	r1, [r8]
 8016512:	e794      	b.n	801643e <_strtol_l.constprop.0+0x1a>
 8016514:	0801ab71 	.word	0x0801ab71

08016518 <strtol>:
 8016518:	4613      	mov	r3, r2
 801651a:	460a      	mov	r2, r1
 801651c:	4601      	mov	r1, r0
 801651e:	4802      	ldr	r0, [pc, #8]	@ (8016528 <strtol+0x10>)
 8016520:	6800      	ldr	r0, [r0, #0]
 8016522:	f7ff bf7f 	b.w	8016424 <_strtol_l.constprop.0>
 8016526:	bf00      	nop
 8016528:	2400027c 	.word	0x2400027c

0801652c <__cvt>:
 801652c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801652e:	ed2d 8b02 	vpush	{d8}
 8016532:	eeb0 8b40 	vmov.f64	d8, d0
 8016536:	b085      	sub	sp, #20
 8016538:	4617      	mov	r7, r2
 801653a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801653c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801653e:	ee18 2a90 	vmov	r2, s17
 8016542:	f025 0520 	bic.w	r5, r5, #32
 8016546:	2a00      	cmp	r2, #0
 8016548:	bfb6      	itet	lt
 801654a:	222d      	movlt	r2, #45	@ 0x2d
 801654c:	2200      	movge	r2, #0
 801654e:	eeb1 8b40 	vneglt.f64	d8, d0
 8016552:	2d46      	cmp	r5, #70	@ 0x46
 8016554:	460c      	mov	r4, r1
 8016556:	701a      	strb	r2, [r3, #0]
 8016558:	d004      	beq.n	8016564 <__cvt+0x38>
 801655a:	2d45      	cmp	r5, #69	@ 0x45
 801655c:	d100      	bne.n	8016560 <__cvt+0x34>
 801655e:	3401      	adds	r4, #1
 8016560:	2102      	movs	r1, #2
 8016562:	e000      	b.n	8016566 <__cvt+0x3a>
 8016564:	2103      	movs	r1, #3
 8016566:	ab03      	add	r3, sp, #12
 8016568:	9301      	str	r3, [sp, #4]
 801656a:	ab02      	add	r3, sp, #8
 801656c:	9300      	str	r3, [sp, #0]
 801656e:	4622      	mov	r2, r4
 8016570:	4633      	mov	r3, r6
 8016572:	eeb0 0b48 	vmov.f64	d0, d8
 8016576:	f000 fe73 	bl	8017260 <_dtoa_r>
 801657a:	2d47      	cmp	r5, #71	@ 0x47
 801657c:	d114      	bne.n	80165a8 <__cvt+0x7c>
 801657e:	07fb      	lsls	r3, r7, #31
 8016580:	d50a      	bpl.n	8016598 <__cvt+0x6c>
 8016582:	1902      	adds	r2, r0, r4
 8016584:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658c:	bf08      	it	eq
 801658e:	9203      	streq	r2, [sp, #12]
 8016590:	2130      	movs	r1, #48	@ 0x30
 8016592:	9b03      	ldr	r3, [sp, #12]
 8016594:	4293      	cmp	r3, r2
 8016596:	d319      	bcc.n	80165cc <__cvt+0xa0>
 8016598:	9b03      	ldr	r3, [sp, #12]
 801659a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801659c:	1a1b      	subs	r3, r3, r0
 801659e:	6013      	str	r3, [r2, #0]
 80165a0:	b005      	add	sp, #20
 80165a2:	ecbd 8b02 	vpop	{d8}
 80165a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165a8:	2d46      	cmp	r5, #70	@ 0x46
 80165aa:	eb00 0204 	add.w	r2, r0, r4
 80165ae:	d1e9      	bne.n	8016584 <__cvt+0x58>
 80165b0:	7803      	ldrb	r3, [r0, #0]
 80165b2:	2b30      	cmp	r3, #48	@ 0x30
 80165b4:	d107      	bne.n	80165c6 <__cvt+0x9a>
 80165b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165be:	bf1c      	itt	ne
 80165c0:	f1c4 0401 	rsbne	r4, r4, #1
 80165c4:	6034      	strne	r4, [r6, #0]
 80165c6:	6833      	ldr	r3, [r6, #0]
 80165c8:	441a      	add	r2, r3
 80165ca:	e7db      	b.n	8016584 <__cvt+0x58>
 80165cc:	1c5c      	adds	r4, r3, #1
 80165ce:	9403      	str	r4, [sp, #12]
 80165d0:	7019      	strb	r1, [r3, #0]
 80165d2:	e7de      	b.n	8016592 <__cvt+0x66>

080165d4 <__exponent>:
 80165d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165d6:	2900      	cmp	r1, #0
 80165d8:	bfba      	itte	lt
 80165da:	4249      	neglt	r1, r1
 80165dc:	232d      	movlt	r3, #45	@ 0x2d
 80165de:	232b      	movge	r3, #43	@ 0x2b
 80165e0:	2909      	cmp	r1, #9
 80165e2:	7002      	strb	r2, [r0, #0]
 80165e4:	7043      	strb	r3, [r0, #1]
 80165e6:	dd29      	ble.n	801663c <__exponent+0x68>
 80165e8:	f10d 0307 	add.w	r3, sp, #7
 80165ec:	461d      	mov	r5, r3
 80165ee:	270a      	movs	r7, #10
 80165f0:	461a      	mov	r2, r3
 80165f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80165f6:	fb07 1416 	mls	r4, r7, r6, r1
 80165fa:	3430      	adds	r4, #48	@ 0x30
 80165fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016600:	460c      	mov	r4, r1
 8016602:	2c63      	cmp	r4, #99	@ 0x63
 8016604:	f103 33ff 	add.w	r3, r3, #4294967295
 8016608:	4631      	mov	r1, r6
 801660a:	dcf1      	bgt.n	80165f0 <__exponent+0x1c>
 801660c:	3130      	adds	r1, #48	@ 0x30
 801660e:	1e94      	subs	r4, r2, #2
 8016610:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016614:	1c41      	adds	r1, r0, #1
 8016616:	4623      	mov	r3, r4
 8016618:	42ab      	cmp	r3, r5
 801661a:	d30a      	bcc.n	8016632 <__exponent+0x5e>
 801661c:	f10d 0309 	add.w	r3, sp, #9
 8016620:	1a9b      	subs	r3, r3, r2
 8016622:	42ac      	cmp	r4, r5
 8016624:	bf88      	it	hi
 8016626:	2300      	movhi	r3, #0
 8016628:	3302      	adds	r3, #2
 801662a:	4403      	add	r3, r0
 801662c:	1a18      	subs	r0, r3, r0
 801662e:	b003      	add	sp, #12
 8016630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016632:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016636:	f801 6f01 	strb.w	r6, [r1, #1]!
 801663a:	e7ed      	b.n	8016618 <__exponent+0x44>
 801663c:	2330      	movs	r3, #48	@ 0x30
 801663e:	3130      	adds	r1, #48	@ 0x30
 8016640:	7083      	strb	r3, [r0, #2]
 8016642:	70c1      	strb	r1, [r0, #3]
 8016644:	1d03      	adds	r3, r0, #4
 8016646:	e7f1      	b.n	801662c <__exponent+0x58>

08016648 <_printf_float>:
 8016648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801664c:	b08d      	sub	sp, #52	@ 0x34
 801664e:	460c      	mov	r4, r1
 8016650:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016654:	4616      	mov	r6, r2
 8016656:	461f      	mov	r7, r3
 8016658:	4605      	mov	r5, r0
 801665a:	f000 fce9 	bl	8017030 <_localeconv_r>
 801665e:	f8d0 b000 	ldr.w	fp, [r0]
 8016662:	4658      	mov	r0, fp
 8016664:	f7e9 feb4 	bl	80003d0 <strlen>
 8016668:	2300      	movs	r3, #0
 801666a:	930a      	str	r3, [sp, #40]	@ 0x28
 801666c:	f8d8 3000 	ldr.w	r3, [r8]
 8016670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016674:	6822      	ldr	r2, [r4, #0]
 8016676:	9005      	str	r0, [sp, #20]
 8016678:	3307      	adds	r3, #7
 801667a:	f023 0307 	bic.w	r3, r3, #7
 801667e:	f103 0108 	add.w	r1, r3, #8
 8016682:	f8c8 1000 	str.w	r1, [r8]
 8016686:	ed93 0b00 	vldr	d0, [r3]
 801668a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80168e8 <_printf_float+0x2a0>
 801668e:	eeb0 7bc0 	vabs.f64	d7, d0
 8016692:	eeb4 7b46 	vcmp.f64	d7, d6
 8016696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801669e:	dd24      	ble.n	80166ea <_printf_float+0xa2>
 80166a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80166a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a8:	d502      	bpl.n	80166b0 <_printf_float+0x68>
 80166aa:	232d      	movs	r3, #45	@ 0x2d
 80166ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80166b0:	498f      	ldr	r1, [pc, #572]	@ (80168f0 <_printf_float+0x2a8>)
 80166b2:	4b90      	ldr	r3, [pc, #576]	@ (80168f4 <_printf_float+0x2ac>)
 80166b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80166b8:	bf94      	ite	ls
 80166ba:	4688      	movls	r8, r1
 80166bc:	4698      	movhi	r8, r3
 80166be:	f022 0204 	bic.w	r2, r2, #4
 80166c2:	2303      	movs	r3, #3
 80166c4:	6123      	str	r3, [r4, #16]
 80166c6:	6022      	str	r2, [r4, #0]
 80166c8:	f04f 0a00 	mov.w	sl, #0
 80166cc:	9700      	str	r7, [sp, #0]
 80166ce:	4633      	mov	r3, r6
 80166d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80166d2:	4621      	mov	r1, r4
 80166d4:	4628      	mov	r0, r5
 80166d6:	f000 f9d1 	bl	8016a7c <_printf_common>
 80166da:	3001      	adds	r0, #1
 80166dc:	f040 8089 	bne.w	80167f2 <_printf_float+0x1aa>
 80166e0:	f04f 30ff 	mov.w	r0, #4294967295
 80166e4:	b00d      	add	sp, #52	@ 0x34
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80166ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f2:	d709      	bvc.n	8016708 <_printf_float+0xc0>
 80166f4:	ee10 3a90 	vmov	r3, s1
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	bfbc      	itt	lt
 80166fc:	232d      	movlt	r3, #45	@ 0x2d
 80166fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016702:	497d      	ldr	r1, [pc, #500]	@ (80168f8 <_printf_float+0x2b0>)
 8016704:	4b7d      	ldr	r3, [pc, #500]	@ (80168fc <_printf_float+0x2b4>)
 8016706:	e7d5      	b.n	80166b4 <_printf_float+0x6c>
 8016708:	6863      	ldr	r3, [r4, #4]
 801670a:	1c59      	adds	r1, r3, #1
 801670c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8016710:	d139      	bne.n	8016786 <_printf_float+0x13e>
 8016712:	2306      	movs	r3, #6
 8016714:	6063      	str	r3, [r4, #4]
 8016716:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801671a:	2300      	movs	r3, #0
 801671c:	6022      	str	r2, [r4, #0]
 801671e:	9303      	str	r3, [sp, #12]
 8016720:	ab0a      	add	r3, sp, #40	@ 0x28
 8016722:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016726:	ab09      	add	r3, sp, #36	@ 0x24
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	6861      	ldr	r1, [r4, #4]
 801672c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016730:	4628      	mov	r0, r5
 8016732:	f7ff fefb 	bl	801652c <__cvt>
 8016736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801673a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801673c:	4680      	mov	r8, r0
 801673e:	d129      	bne.n	8016794 <_printf_float+0x14c>
 8016740:	1cc8      	adds	r0, r1, #3
 8016742:	db02      	blt.n	801674a <_printf_float+0x102>
 8016744:	6863      	ldr	r3, [r4, #4]
 8016746:	4299      	cmp	r1, r3
 8016748:	dd41      	ble.n	80167ce <_printf_float+0x186>
 801674a:	f1a9 0902 	sub.w	r9, r9, #2
 801674e:	fa5f f989 	uxtb.w	r9, r9
 8016752:	3901      	subs	r1, #1
 8016754:	464a      	mov	r2, r9
 8016756:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801675a:	9109      	str	r1, [sp, #36]	@ 0x24
 801675c:	f7ff ff3a 	bl	80165d4 <__exponent>
 8016760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016762:	1813      	adds	r3, r2, r0
 8016764:	2a01      	cmp	r2, #1
 8016766:	4682      	mov	sl, r0
 8016768:	6123      	str	r3, [r4, #16]
 801676a:	dc02      	bgt.n	8016772 <_printf_float+0x12a>
 801676c:	6822      	ldr	r2, [r4, #0]
 801676e:	07d2      	lsls	r2, r2, #31
 8016770:	d501      	bpl.n	8016776 <_printf_float+0x12e>
 8016772:	3301      	adds	r3, #1
 8016774:	6123      	str	r3, [r4, #16]
 8016776:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801677a:	2b00      	cmp	r3, #0
 801677c:	d0a6      	beq.n	80166cc <_printf_float+0x84>
 801677e:	232d      	movs	r3, #45	@ 0x2d
 8016780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016784:	e7a2      	b.n	80166cc <_printf_float+0x84>
 8016786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801678a:	d1c4      	bne.n	8016716 <_printf_float+0xce>
 801678c:	2b00      	cmp	r3, #0
 801678e:	d1c2      	bne.n	8016716 <_printf_float+0xce>
 8016790:	2301      	movs	r3, #1
 8016792:	e7bf      	b.n	8016714 <_printf_float+0xcc>
 8016794:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8016798:	d9db      	bls.n	8016752 <_printf_float+0x10a>
 801679a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801679e:	d118      	bne.n	80167d2 <_printf_float+0x18a>
 80167a0:	2900      	cmp	r1, #0
 80167a2:	6863      	ldr	r3, [r4, #4]
 80167a4:	dd0b      	ble.n	80167be <_printf_float+0x176>
 80167a6:	6121      	str	r1, [r4, #16]
 80167a8:	b913      	cbnz	r3, 80167b0 <_printf_float+0x168>
 80167aa:	6822      	ldr	r2, [r4, #0]
 80167ac:	07d0      	lsls	r0, r2, #31
 80167ae:	d502      	bpl.n	80167b6 <_printf_float+0x16e>
 80167b0:	3301      	adds	r3, #1
 80167b2:	440b      	add	r3, r1
 80167b4:	6123      	str	r3, [r4, #16]
 80167b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80167b8:	f04f 0a00 	mov.w	sl, #0
 80167bc:	e7db      	b.n	8016776 <_printf_float+0x12e>
 80167be:	b913      	cbnz	r3, 80167c6 <_printf_float+0x17e>
 80167c0:	6822      	ldr	r2, [r4, #0]
 80167c2:	07d2      	lsls	r2, r2, #31
 80167c4:	d501      	bpl.n	80167ca <_printf_float+0x182>
 80167c6:	3302      	adds	r3, #2
 80167c8:	e7f4      	b.n	80167b4 <_printf_float+0x16c>
 80167ca:	2301      	movs	r3, #1
 80167cc:	e7f2      	b.n	80167b4 <_printf_float+0x16c>
 80167ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80167d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80167d4:	4299      	cmp	r1, r3
 80167d6:	db05      	blt.n	80167e4 <_printf_float+0x19c>
 80167d8:	6823      	ldr	r3, [r4, #0]
 80167da:	6121      	str	r1, [r4, #16]
 80167dc:	07d8      	lsls	r0, r3, #31
 80167de:	d5ea      	bpl.n	80167b6 <_printf_float+0x16e>
 80167e0:	1c4b      	adds	r3, r1, #1
 80167e2:	e7e7      	b.n	80167b4 <_printf_float+0x16c>
 80167e4:	2900      	cmp	r1, #0
 80167e6:	bfd4      	ite	le
 80167e8:	f1c1 0202 	rsble	r2, r1, #2
 80167ec:	2201      	movgt	r2, #1
 80167ee:	4413      	add	r3, r2
 80167f0:	e7e0      	b.n	80167b4 <_printf_float+0x16c>
 80167f2:	6823      	ldr	r3, [r4, #0]
 80167f4:	055a      	lsls	r2, r3, #21
 80167f6:	d407      	bmi.n	8016808 <_printf_float+0x1c0>
 80167f8:	6923      	ldr	r3, [r4, #16]
 80167fa:	4642      	mov	r2, r8
 80167fc:	4631      	mov	r1, r6
 80167fe:	4628      	mov	r0, r5
 8016800:	47b8      	blx	r7
 8016802:	3001      	adds	r0, #1
 8016804:	d12a      	bne.n	801685c <_printf_float+0x214>
 8016806:	e76b      	b.n	80166e0 <_printf_float+0x98>
 8016808:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801680c:	f240 80e0 	bls.w	80169d0 <_printf_float+0x388>
 8016810:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016814:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681c:	d133      	bne.n	8016886 <_printf_float+0x23e>
 801681e:	4a38      	ldr	r2, [pc, #224]	@ (8016900 <_printf_float+0x2b8>)
 8016820:	2301      	movs	r3, #1
 8016822:	4631      	mov	r1, r6
 8016824:	4628      	mov	r0, r5
 8016826:	47b8      	blx	r7
 8016828:	3001      	adds	r0, #1
 801682a:	f43f af59 	beq.w	80166e0 <_printf_float+0x98>
 801682e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016832:	4543      	cmp	r3, r8
 8016834:	db02      	blt.n	801683c <_printf_float+0x1f4>
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	07d8      	lsls	r0, r3, #31
 801683a:	d50f      	bpl.n	801685c <_printf_float+0x214>
 801683c:	9b05      	ldr	r3, [sp, #20]
 801683e:	465a      	mov	r2, fp
 8016840:	4631      	mov	r1, r6
 8016842:	4628      	mov	r0, r5
 8016844:	47b8      	blx	r7
 8016846:	3001      	adds	r0, #1
 8016848:	f43f af4a 	beq.w	80166e0 <_printf_float+0x98>
 801684c:	f04f 0900 	mov.w	r9, #0
 8016850:	f108 38ff 	add.w	r8, r8, #4294967295
 8016854:	f104 0a1a 	add.w	sl, r4, #26
 8016858:	45c8      	cmp	r8, r9
 801685a:	dc09      	bgt.n	8016870 <_printf_float+0x228>
 801685c:	6823      	ldr	r3, [r4, #0]
 801685e:	079b      	lsls	r3, r3, #30
 8016860:	f100 8107 	bmi.w	8016a72 <_printf_float+0x42a>
 8016864:	68e0      	ldr	r0, [r4, #12]
 8016866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016868:	4298      	cmp	r0, r3
 801686a:	bfb8      	it	lt
 801686c:	4618      	movlt	r0, r3
 801686e:	e739      	b.n	80166e4 <_printf_float+0x9c>
 8016870:	2301      	movs	r3, #1
 8016872:	4652      	mov	r2, sl
 8016874:	4631      	mov	r1, r6
 8016876:	4628      	mov	r0, r5
 8016878:	47b8      	blx	r7
 801687a:	3001      	adds	r0, #1
 801687c:	f43f af30 	beq.w	80166e0 <_printf_float+0x98>
 8016880:	f109 0901 	add.w	r9, r9, #1
 8016884:	e7e8      	b.n	8016858 <_printf_float+0x210>
 8016886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016888:	2b00      	cmp	r3, #0
 801688a:	dc3b      	bgt.n	8016904 <_printf_float+0x2bc>
 801688c:	4a1c      	ldr	r2, [pc, #112]	@ (8016900 <_printf_float+0x2b8>)
 801688e:	2301      	movs	r3, #1
 8016890:	4631      	mov	r1, r6
 8016892:	4628      	mov	r0, r5
 8016894:	47b8      	blx	r7
 8016896:	3001      	adds	r0, #1
 8016898:	f43f af22 	beq.w	80166e0 <_printf_float+0x98>
 801689c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80168a0:	ea59 0303 	orrs.w	r3, r9, r3
 80168a4:	d102      	bne.n	80168ac <_printf_float+0x264>
 80168a6:	6823      	ldr	r3, [r4, #0]
 80168a8:	07d9      	lsls	r1, r3, #31
 80168aa:	d5d7      	bpl.n	801685c <_printf_float+0x214>
 80168ac:	9b05      	ldr	r3, [sp, #20]
 80168ae:	465a      	mov	r2, fp
 80168b0:	4631      	mov	r1, r6
 80168b2:	4628      	mov	r0, r5
 80168b4:	47b8      	blx	r7
 80168b6:	3001      	adds	r0, #1
 80168b8:	f43f af12 	beq.w	80166e0 <_printf_float+0x98>
 80168bc:	f04f 0a00 	mov.w	sl, #0
 80168c0:	f104 0b1a 	add.w	fp, r4, #26
 80168c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168c6:	425b      	negs	r3, r3
 80168c8:	4553      	cmp	r3, sl
 80168ca:	dc01      	bgt.n	80168d0 <_printf_float+0x288>
 80168cc:	464b      	mov	r3, r9
 80168ce:	e794      	b.n	80167fa <_printf_float+0x1b2>
 80168d0:	2301      	movs	r3, #1
 80168d2:	465a      	mov	r2, fp
 80168d4:	4631      	mov	r1, r6
 80168d6:	4628      	mov	r0, r5
 80168d8:	47b8      	blx	r7
 80168da:	3001      	adds	r0, #1
 80168dc:	f43f af00 	beq.w	80166e0 <_printf_float+0x98>
 80168e0:	f10a 0a01 	add.w	sl, sl, #1
 80168e4:	e7ee      	b.n	80168c4 <_printf_float+0x27c>
 80168e6:	bf00      	nop
 80168e8:	ffffffff 	.word	0xffffffff
 80168ec:	7fefffff 	.word	0x7fefffff
 80168f0:	0801ac71 	.word	0x0801ac71
 80168f4:	0801ac75 	.word	0x0801ac75
 80168f8:	0801ac79 	.word	0x0801ac79
 80168fc:	0801ac7d 	.word	0x0801ac7d
 8016900:	0801ac81 	.word	0x0801ac81
 8016904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801690a:	4553      	cmp	r3, sl
 801690c:	bfa8      	it	ge
 801690e:	4653      	movge	r3, sl
 8016910:	2b00      	cmp	r3, #0
 8016912:	4699      	mov	r9, r3
 8016914:	dc37      	bgt.n	8016986 <_printf_float+0x33e>
 8016916:	2300      	movs	r3, #0
 8016918:	9307      	str	r3, [sp, #28]
 801691a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801691e:	f104 021a 	add.w	r2, r4, #26
 8016922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016924:	9907      	ldr	r1, [sp, #28]
 8016926:	9306      	str	r3, [sp, #24]
 8016928:	eba3 0309 	sub.w	r3, r3, r9
 801692c:	428b      	cmp	r3, r1
 801692e:	dc31      	bgt.n	8016994 <_printf_float+0x34c>
 8016930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016932:	459a      	cmp	sl, r3
 8016934:	dc3b      	bgt.n	80169ae <_printf_float+0x366>
 8016936:	6823      	ldr	r3, [r4, #0]
 8016938:	07da      	lsls	r2, r3, #31
 801693a:	d438      	bmi.n	80169ae <_printf_float+0x366>
 801693c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801693e:	ebaa 0903 	sub.w	r9, sl, r3
 8016942:	9b06      	ldr	r3, [sp, #24]
 8016944:	ebaa 0303 	sub.w	r3, sl, r3
 8016948:	4599      	cmp	r9, r3
 801694a:	bfa8      	it	ge
 801694c:	4699      	movge	r9, r3
 801694e:	f1b9 0f00 	cmp.w	r9, #0
 8016952:	dc34      	bgt.n	80169be <_printf_float+0x376>
 8016954:	f04f 0800 	mov.w	r8, #0
 8016958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801695c:	f104 0b1a 	add.w	fp, r4, #26
 8016960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016962:	ebaa 0303 	sub.w	r3, sl, r3
 8016966:	eba3 0309 	sub.w	r3, r3, r9
 801696a:	4543      	cmp	r3, r8
 801696c:	f77f af76 	ble.w	801685c <_printf_float+0x214>
 8016970:	2301      	movs	r3, #1
 8016972:	465a      	mov	r2, fp
 8016974:	4631      	mov	r1, r6
 8016976:	4628      	mov	r0, r5
 8016978:	47b8      	blx	r7
 801697a:	3001      	adds	r0, #1
 801697c:	f43f aeb0 	beq.w	80166e0 <_printf_float+0x98>
 8016980:	f108 0801 	add.w	r8, r8, #1
 8016984:	e7ec      	b.n	8016960 <_printf_float+0x318>
 8016986:	4642      	mov	r2, r8
 8016988:	4631      	mov	r1, r6
 801698a:	4628      	mov	r0, r5
 801698c:	47b8      	blx	r7
 801698e:	3001      	adds	r0, #1
 8016990:	d1c1      	bne.n	8016916 <_printf_float+0x2ce>
 8016992:	e6a5      	b.n	80166e0 <_printf_float+0x98>
 8016994:	2301      	movs	r3, #1
 8016996:	4631      	mov	r1, r6
 8016998:	4628      	mov	r0, r5
 801699a:	9206      	str	r2, [sp, #24]
 801699c:	47b8      	blx	r7
 801699e:	3001      	adds	r0, #1
 80169a0:	f43f ae9e 	beq.w	80166e0 <_printf_float+0x98>
 80169a4:	9b07      	ldr	r3, [sp, #28]
 80169a6:	9a06      	ldr	r2, [sp, #24]
 80169a8:	3301      	adds	r3, #1
 80169aa:	9307      	str	r3, [sp, #28]
 80169ac:	e7b9      	b.n	8016922 <_printf_float+0x2da>
 80169ae:	9b05      	ldr	r3, [sp, #20]
 80169b0:	465a      	mov	r2, fp
 80169b2:	4631      	mov	r1, r6
 80169b4:	4628      	mov	r0, r5
 80169b6:	47b8      	blx	r7
 80169b8:	3001      	adds	r0, #1
 80169ba:	d1bf      	bne.n	801693c <_printf_float+0x2f4>
 80169bc:	e690      	b.n	80166e0 <_printf_float+0x98>
 80169be:	9a06      	ldr	r2, [sp, #24]
 80169c0:	464b      	mov	r3, r9
 80169c2:	4442      	add	r2, r8
 80169c4:	4631      	mov	r1, r6
 80169c6:	4628      	mov	r0, r5
 80169c8:	47b8      	blx	r7
 80169ca:	3001      	adds	r0, #1
 80169cc:	d1c2      	bne.n	8016954 <_printf_float+0x30c>
 80169ce:	e687      	b.n	80166e0 <_printf_float+0x98>
 80169d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80169d4:	f1b9 0f01 	cmp.w	r9, #1
 80169d8:	dc01      	bgt.n	80169de <_printf_float+0x396>
 80169da:	07db      	lsls	r3, r3, #31
 80169dc:	d536      	bpl.n	8016a4c <_printf_float+0x404>
 80169de:	2301      	movs	r3, #1
 80169e0:	4642      	mov	r2, r8
 80169e2:	4631      	mov	r1, r6
 80169e4:	4628      	mov	r0, r5
 80169e6:	47b8      	blx	r7
 80169e8:	3001      	adds	r0, #1
 80169ea:	f43f ae79 	beq.w	80166e0 <_printf_float+0x98>
 80169ee:	9b05      	ldr	r3, [sp, #20]
 80169f0:	465a      	mov	r2, fp
 80169f2:	4631      	mov	r1, r6
 80169f4:	4628      	mov	r0, r5
 80169f6:	47b8      	blx	r7
 80169f8:	3001      	adds	r0, #1
 80169fa:	f43f ae71 	beq.w	80166e0 <_printf_float+0x98>
 80169fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016a02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a0e:	d018      	beq.n	8016a42 <_printf_float+0x3fa>
 8016a10:	464b      	mov	r3, r9
 8016a12:	f108 0201 	add.w	r2, r8, #1
 8016a16:	4631      	mov	r1, r6
 8016a18:	4628      	mov	r0, r5
 8016a1a:	47b8      	blx	r7
 8016a1c:	3001      	adds	r0, #1
 8016a1e:	d10c      	bne.n	8016a3a <_printf_float+0x3f2>
 8016a20:	e65e      	b.n	80166e0 <_printf_float+0x98>
 8016a22:	2301      	movs	r3, #1
 8016a24:	465a      	mov	r2, fp
 8016a26:	4631      	mov	r1, r6
 8016a28:	4628      	mov	r0, r5
 8016a2a:	47b8      	blx	r7
 8016a2c:	3001      	adds	r0, #1
 8016a2e:	f43f ae57 	beq.w	80166e0 <_printf_float+0x98>
 8016a32:	f108 0801 	add.w	r8, r8, #1
 8016a36:	45c8      	cmp	r8, r9
 8016a38:	dbf3      	blt.n	8016a22 <_printf_float+0x3da>
 8016a3a:	4653      	mov	r3, sl
 8016a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016a40:	e6dc      	b.n	80167fc <_printf_float+0x1b4>
 8016a42:	f04f 0800 	mov.w	r8, #0
 8016a46:	f104 0b1a 	add.w	fp, r4, #26
 8016a4a:	e7f4      	b.n	8016a36 <_printf_float+0x3ee>
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	4642      	mov	r2, r8
 8016a50:	e7e1      	b.n	8016a16 <_printf_float+0x3ce>
 8016a52:	2301      	movs	r3, #1
 8016a54:	464a      	mov	r2, r9
 8016a56:	4631      	mov	r1, r6
 8016a58:	4628      	mov	r0, r5
 8016a5a:	47b8      	blx	r7
 8016a5c:	3001      	adds	r0, #1
 8016a5e:	f43f ae3f 	beq.w	80166e0 <_printf_float+0x98>
 8016a62:	f108 0801 	add.w	r8, r8, #1
 8016a66:	68e3      	ldr	r3, [r4, #12]
 8016a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016a6a:	1a5b      	subs	r3, r3, r1
 8016a6c:	4543      	cmp	r3, r8
 8016a6e:	dcf0      	bgt.n	8016a52 <_printf_float+0x40a>
 8016a70:	e6f8      	b.n	8016864 <_printf_float+0x21c>
 8016a72:	f04f 0800 	mov.w	r8, #0
 8016a76:	f104 0919 	add.w	r9, r4, #25
 8016a7a:	e7f4      	b.n	8016a66 <_printf_float+0x41e>

08016a7c <_printf_common>:
 8016a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a80:	4616      	mov	r6, r2
 8016a82:	4698      	mov	r8, r3
 8016a84:	688a      	ldr	r2, [r1, #8]
 8016a86:	690b      	ldr	r3, [r1, #16]
 8016a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	bfb8      	it	lt
 8016a90:	4613      	movlt	r3, r2
 8016a92:	6033      	str	r3, [r6, #0]
 8016a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016a98:	4607      	mov	r7, r0
 8016a9a:	460c      	mov	r4, r1
 8016a9c:	b10a      	cbz	r2, 8016aa2 <_printf_common+0x26>
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	6033      	str	r3, [r6, #0]
 8016aa2:	6823      	ldr	r3, [r4, #0]
 8016aa4:	0699      	lsls	r1, r3, #26
 8016aa6:	bf42      	ittt	mi
 8016aa8:	6833      	ldrmi	r3, [r6, #0]
 8016aaa:	3302      	addmi	r3, #2
 8016aac:	6033      	strmi	r3, [r6, #0]
 8016aae:	6825      	ldr	r5, [r4, #0]
 8016ab0:	f015 0506 	ands.w	r5, r5, #6
 8016ab4:	d106      	bne.n	8016ac4 <_printf_common+0x48>
 8016ab6:	f104 0a19 	add.w	sl, r4, #25
 8016aba:	68e3      	ldr	r3, [r4, #12]
 8016abc:	6832      	ldr	r2, [r6, #0]
 8016abe:	1a9b      	subs	r3, r3, r2
 8016ac0:	42ab      	cmp	r3, r5
 8016ac2:	dc26      	bgt.n	8016b12 <_printf_common+0x96>
 8016ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016ac8:	6822      	ldr	r2, [r4, #0]
 8016aca:	3b00      	subs	r3, #0
 8016acc:	bf18      	it	ne
 8016ace:	2301      	movne	r3, #1
 8016ad0:	0692      	lsls	r2, r2, #26
 8016ad2:	d42b      	bmi.n	8016b2c <_printf_common+0xb0>
 8016ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016ad8:	4641      	mov	r1, r8
 8016ada:	4638      	mov	r0, r7
 8016adc:	47c8      	blx	r9
 8016ade:	3001      	adds	r0, #1
 8016ae0:	d01e      	beq.n	8016b20 <_printf_common+0xa4>
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	6922      	ldr	r2, [r4, #16]
 8016ae6:	f003 0306 	and.w	r3, r3, #6
 8016aea:	2b04      	cmp	r3, #4
 8016aec:	bf02      	ittt	eq
 8016aee:	68e5      	ldreq	r5, [r4, #12]
 8016af0:	6833      	ldreq	r3, [r6, #0]
 8016af2:	1aed      	subeq	r5, r5, r3
 8016af4:	68a3      	ldr	r3, [r4, #8]
 8016af6:	bf0c      	ite	eq
 8016af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016afc:	2500      	movne	r5, #0
 8016afe:	4293      	cmp	r3, r2
 8016b00:	bfc4      	itt	gt
 8016b02:	1a9b      	subgt	r3, r3, r2
 8016b04:	18ed      	addgt	r5, r5, r3
 8016b06:	2600      	movs	r6, #0
 8016b08:	341a      	adds	r4, #26
 8016b0a:	42b5      	cmp	r5, r6
 8016b0c:	d11a      	bne.n	8016b44 <_printf_common+0xc8>
 8016b0e:	2000      	movs	r0, #0
 8016b10:	e008      	b.n	8016b24 <_printf_common+0xa8>
 8016b12:	2301      	movs	r3, #1
 8016b14:	4652      	mov	r2, sl
 8016b16:	4641      	mov	r1, r8
 8016b18:	4638      	mov	r0, r7
 8016b1a:	47c8      	blx	r9
 8016b1c:	3001      	adds	r0, #1
 8016b1e:	d103      	bne.n	8016b28 <_printf_common+0xac>
 8016b20:	f04f 30ff 	mov.w	r0, #4294967295
 8016b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b28:	3501      	adds	r5, #1
 8016b2a:	e7c6      	b.n	8016aba <_printf_common+0x3e>
 8016b2c:	18e1      	adds	r1, r4, r3
 8016b2e:	1c5a      	adds	r2, r3, #1
 8016b30:	2030      	movs	r0, #48	@ 0x30
 8016b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016b36:	4422      	add	r2, r4
 8016b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016b40:	3302      	adds	r3, #2
 8016b42:	e7c7      	b.n	8016ad4 <_printf_common+0x58>
 8016b44:	2301      	movs	r3, #1
 8016b46:	4622      	mov	r2, r4
 8016b48:	4641      	mov	r1, r8
 8016b4a:	4638      	mov	r0, r7
 8016b4c:	47c8      	blx	r9
 8016b4e:	3001      	adds	r0, #1
 8016b50:	d0e6      	beq.n	8016b20 <_printf_common+0xa4>
 8016b52:	3601      	adds	r6, #1
 8016b54:	e7d9      	b.n	8016b0a <_printf_common+0x8e>
	...

08016b58 <_printf_i>:
 8016b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b5c:	7e0f      	ldrb	r7, [r1, #24]
 8016b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016b60:	2f78      	cmp	r7, #120	@ 0x78
 8016b62:	4691      	mov	r9, r2
 8016b64:	4680      	mov	r8, r0
 8016b66:	460c      	mov	r4, r1
 8016b68:	469a      	mov	sl, r3
 8016b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016b6e:	d807      	bhi.n	8016b80 <_printf_i+0x28>
 8016b70:	2f62      	cmp	r7, #98	@ 0x62
 8016b72:	d80a      	bhi.n	8016b8a <_printf_i+0x32>
 8016b74:	2f00      	cmp	r7, #0
 8016b76:	f000 80d2 	beq.w	8016d1e <_printf_i+0x1c6>
 8016b7a:	2f58      	cmp	r7, #88	@ 0x58
 8016b7c:	f000 80b9 	beq.w	8016cf2 <_printf_i+0x19a>
 8016b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016b88:	e03a      	b.n	8016c00 <_printf_i+0xa8>
 8016b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016b8e:	2b15      	cmp	r3, #21
 8016b90:	d8f6      	bhi.n	8016b80 <_printf_i+0x28>
 8016b92:	a101      	add	r1, pc, #4	@ (adr r1, 8016b98 <_printf_i+0x40>)
 8016b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016b98:	08016bf1 	.word	0x08016bf1
 8016b9c:	08016c05 	.word	0x08016c05
 8016ba0:	08016b81 	.word	0x08016b81
 8016ba4:	08016b81 	.word	0x08016b81
 8016ba8:	08016b81 	.word	0x08016b81
 8016bac:	08016b81 	.word	0x08016b81
 8016bb0:	08016c05 	.word	0x08016c05
 8016bb4:	08016b81 	.word	0x08016b81
 8016bb8:	08016b81 	.word	0x08016b81
 8016bbc:	08016b81 	.word	0x08016b81
 8016bc0:	08016b81 	.word	0x08016b81
 8016bc4:	08016d05 	.word	0x08016d05
 8016bc8:	08016c2f 	.word	0x08016c2f
 8016bcc:	08016cbf 	.word	0x08016cbf
 8016bd0:	08016b81 	.word	0x08016b81
 8016bd4:	08016b81 	.word	0x08016b81
 8016bd8:	08016d27 	.word	0x08016d27
 8016bdc:	08016b81 	.word	0x08016b81
 8016be0:	08016c2f 	.word	0x08016c2f
 8016be4:	08016b81 	.word	0x08016b81
 8016be8:	08016b81 	.word	0x08016b81
 8016bec:	08016cc7 	.word	0x08016cc7
 8016bf0:	6833      	ldr	r3, [r6, #0]
 8016bf2:	1d1a      	adds	r2, r3, #4
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	6032      	str	r2, [r6, #0]
 8016bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016c00:	2301      	movs	r3, #1
 8016c02:	e09d      	b.n	8016d40 <_printf_i+0x1e8>
 8016c04:	6833      	ldr	r3, [r6, #0]
 8016c06:	6820      	ldr	r0, [r4, #0]
 8016c08:	1d19      	adds	r1, r3, #4
 8016c0a:	6031      	str	r1, [r6, #0]
 8016c0c:	0606      	lsls	r6, r0, #24
 8016c0e:	d501      	bpl.n	8016c14 <_printf_i+0xbc>
 8016c10:	681d      	ldr	r5, [r3, #0]
 8016c12:	e003      	b.n	8016c1c <_printf_i+0xc4>
 8016c14:	0645      	lsls	r5, r0, #25
 8016c16:	d5fb      	bpl.n	8016c10 <_printf_i+0xb8>
 8016c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016c1c:	2d00      	cmp	r5, #0
 8016c1e:	da03      	bge.n	8016c28 <_printf_i+0xd0>
 8016c20:	232d      	movs	r3, #45	@ 0x2d
 8016c22:	426d      	negs	r5, r5
 8016c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c28:	4859      	ldr	r0, [pc, #356]	@ (8016d90 <_printf_i+0x238>)
 8016c2a:	230a      	movs	r3, #10
 8016c2c:	e011      	b.n	8016c52 <_printf_i+0xfa>
 8016c2e:	6821      	ldr	r1, [r4, #0]
 8016c30:	6833      	ldr	r3, [r6, #0]
 8016c32:	0608      	lsls	r0, r1, #24
 8016c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c38:	d402      	bmi.n	8016c40 <_printf_i+0xe8>
 8016c3a:	0649      	lsls	r1, r1, #25
 8016c3c:	bf48      	it	mi
 8016c3e:	b2ad      	uxthmi	r5, r5
 8016c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8016c42:	4853      	ldr	r0, [pc, #332]	@ (8016d90 <_printf_i+0x238>)
 8016c44:	6033      	str	r3, [r6, #0]
 8016c46:	bf14      	ite	ne
 8016c48:	230a      	movne	r3, #10
 8016c4a:	2308      	moveq	r3, #8
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016c52:	6866      	ldr	r6, [r4, #4]
 8016c54:	60a6      	str	r6, [r4, #8]
 8016c56:	2e00      	cmp	r6, #0
 8016c58:	bfa2      	ittt	ge
 8016c5a:	6821      	ldrge	r1, [r4, #0]
 8016c5c:	f021 0104 	bicge.w	r1, r1, #4
 8016c60:	6021      	strge	r1, [r4, #0]
 8016c62:	b90d      	cbnz	r5, 8016c68 <_printf_i+0x110>
 8016c64:	2e00      	cmp	r6, #0
 8016c66:	d04b      	beq.n	8016d00 <_printf_i+0x1a8>
 8016c68:	4616      	mov	r6, r2
 8016c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8016c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8016c72:	5dc7      	ldrb	r7, [r0, r7]
 8016c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016c78:	462f      	mov	r7, r5
 8016c7a:	42bb      	cmp	r3, r7
 8016c7c:	460d      	mov	r5, r1
 8016c7e:	d9f4      	bls.n	8016c6a <_printf_i+0x112>
 8016c80:	2b08      	cmp	r3, #8
 8016c82:	d10b      	bne.n	8016c9c <_printf_i+0x144>
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	07df      	lsls	r7, r3, #31
 8016c88:	d508      	bpl.n	8016c9c <_printf_i+0x144>
 8016c8a:	6923      	ldr	r3, [r4, #16]
 8016c8c:	6861      	ldr	r1, [r4, #4]
 8016c8e:	4299      	cmp	r1, r3
 8016c90:	bfde      	ittt	le
 8016c92:	2330      	movle	r3, #48	@ 0x30
 8016c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016c9c:	1b92      	subs	r2, r2, r6
 8016c9e:	6122      	str	r2, [r4, #16]
 8016ca0:	f8cd a000 	str.w	sl, [sp]
 8016ca4:	464b      	mov	r3, r9
 8016ca6:	aa03      	add	r2, sp, #12
 8016ca8:	4621      	mov	r1, r4
 8016caa:	4640      	mov	r0, r8
 8016cac:	f7ff fee6 	bl	8016a7c <_printf_common>
 8016cb0:	3001      	adds	r0, #1
 8016cb2:	d14a      	bne.n	8016d4a <_printf_i+0x1f2>
 8016cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8016cb8:	b004      	add	sp, #16
 8016cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cbe:	6823      	ldr	r3, [r4, #0]
 8016cc0:	f043 0320 	orr.w	r3, r3, #32
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	4833      	ldr	r0, [pc, #204]	@ (8016d94 <_printf_i+0x23c>)
 8016cc8:	2778      	movs	r7, #120	@ 0x78
 8016cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016cce:	6823      	ldr	r3, [r4, #0]
 8016cd0:	6831      	ldr	r1, [r6, #0]
 8016cd2:	061f      	lsls	r7, r3, #24
 8016cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8016cd8:	d402      	bmi.n	8016ce0 <_printf_i+0x188>
 8016cda:	065f      	lsls	r7, r3, #25
 8016cdc:	bf48      	it	mi
 8016cde:	b2ad      	uxthmi	r5, r5
 8016ce0:	6031      	str	r1, [r6, #0]
 8016ce2:	07d9      	lsls	r1, r3, #31
 8016ce4:	bf44      	itt	mi
 8016ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8016cea:	6023      	strmi	r3, [r4, #0]
 8016cec:	b11d      	cbz	r5, 8016cf6 <_printf_i+0x19e>
 8016cee:	2310      	movs	r3, #16
 8016cf0:	e7ac      	b.n	8016c4c <_printf_i+0xf4>
 8016cf2:	4827      	ldr	r0, [pc, #156]	@ (8016d90 <_printf_i+0x238>)
 8016cf4:	e7e9      	b.n	8016cca <_printf_i+0x172>
 8016cf6:	6823      	ldr	r3, [r4, #0]
 8016cf8:	f023 0320 	bic.w	r3, r3, #32
 8016cfc:	6023      	str	r3, [r4, #0]
 8016cfe:	e7f6      	b.n	8016cee <_printf_i+0x196>
 8016d00:	4616      	mov	r6, r2
 8016d02:	e7bd      	b.n	8016c80 <_printf_i+0x128>
 8016d04:	6833      	ldr	r3, [r6, #0]
 8016d06:	6825      	ldr	r5, [r4, #0]
 8016d08:	6961      	ldr	r1, [r4, #20]
 8016d0a:	1d18      	adds	r0, r3, #4
 8016d0c:	6030      	str	r0, [r6, #0]
 8016d0e:	062e      	lsls	r6, r5, #24
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	d501      	bpl.n	8016d18 <_printf_i+0x1c0>
 8016d14:	6019      	str	r1, [r3, #0]
 8016d16:	e002      	b.n	8016d1e <_printf_i+0x1c6>
 8016d18:	0668      	lsls	r0, r5, #25
 8016d1a:	d5fb      	bpl.n	8016d14 <_printf_i+0x1bc>
 8016d1c:	8019      	strh	r1, [r3, #0]
 8016d1e:	2300      	movs	r3, #0
 8016d20:	6123      	str	r3, [r4, #16]
 8016d22:	4616      	mov	r6, r2
 8016d24:	e7bc      	b.n	8016ca0 <_printf_i+0x148>
 8016d26:	6833      	ldr	r3, [r6, #0]
 8016d28:	1d1a      	adds	r2, r3, #4
 8016d2a:	6032      	str	r2, [r6, #0]
 8016d2c:	681e      	ldr	r6, [r3, #0]
 8016d2e:	6862      	ldr	r2, [r4, #4]
 8016d30:	2100      	movs	r1, #0
 8016d32:	4630      	mov	r0, r6
 8016d34:	f7e9 fafc 	bl	8000330 <memchr>
 8016d38:	b108      	cbz	r0, 8016d3e <_printf_i+0x1e6>
 8016d3a:	1b80      	subs	r0, r0, r6
 8016d3c:	6060      	str	r0, [r4, #4]
 8016d3e:	6863      	ldr	r3, [r4, #4]
 8016d40:	6123      	str	r3, [r4, #16]
 8016d42:	2300      	movs	r3, #0
 8016d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016d48:	e7aa      	b.n	8016ca0 <_printf_i+0x148>
 8016d4a:	6923      	ldr	r3, [r4, #16]
 8016d4c:	4632      	mov	r2, r6
 8016d4e:	4649      	mov	r1, r9
 8016d50:	4640      	mov	r0, r8
 8016d52:	47d0      	blx	sl
 8016d54:	3001      	adds	r0, #1
 8016d56:	d0ad      	beq.n	8016cb4 <_printf_i+0x15c>
 8016d58:	6823      	ldr	r3, [r4, #0]
 8016d5a:	079b      	lsls	r3, r3, #30
 8016d5c:	d413      	bmi.n	8016d86 <_printf_i+0x22e>
 8016d5e:	68e0      	ldr	r0, [r4, #12]
 8016d60:	9b03      	ldr	r3, [sp, #12]
 8016d62:	4298      	cmp	r0, r3
 8016d64:	bfb8      	it	lt
 8016d66:	4618      	movlt	r0, r3
 8016d68:	e7a6      	b.n	8016cb8 <_printf_i+0x160>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	4632      	mov	r2, r6
 8016d6e:	4649      	mov	r1, r9
 8016d70:	4640      	mov	r0, r8
 8016d72:	47d0      	blx	sl
 8016d74:	3001      	adds	r0, #1
 8016d76:	d09d      	beq.n	8016cb4 <_printf_i+0x15c>
 8016d78:	3501      	adds	r5, #1
 8016d7a:	68e3      	ldr	r3, [r4, #12]
 8016d7c:	9903      	ldr	r1, [sp, #12]
 8016d7e:	1a5b      	subs	r3, r3, r1
 8016d80:	42ab      	cmp	r3, r5
 8016d82:	dcf2      	bgt.n	8016d6a <_printf_i+0x212>
 8016d84:	e7eb      	b.n	8016d5e <_printf_i+0x206>
 8016d86:	2500      	movs	r5, #0
 8016d88:	f104 0619 	add.w	r6, r4, #25
 8016d8c:	e7f5      	b.n	8016d7a <_printf_i+0x222>
 8016d8e:	bf00      	nop
 8016d90:	0801ac83 	.word	0x0801ac83
 8016d94:	0801ac94 	.word	0x0801ac94

08016d98 <std>:
 8016d98:	2300      	movs	r3, #0
 8016d9a:	b510      	push	{r4, lr}
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8016da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016da6:	6083      	str	r3, [r0, #8]
 8016da8:	8181      	strh	r1, [r0, #12]
 8016daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8016dac:	81c2      	strh	r2, [r0, #14]
 8016dae:	6183      	str	r3, [r0, #24]
 8016db0:	4619      	mov	r1, r3
 8016db2:	2208      	movs	r2, #8
 8016db4:	305c      	adds	r0, #92	@ 0x5c
 8016db6:	f000 f914 	bl	8016fe2 <memset>
 8016dba:	4b0d      	ldr	r3, [pc, #52]	@ (8016df0 <std+0x58>)
 8016dbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8016dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8016df4 <std+0x5c>)
 8016dc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8016df8 <std+0x60>)
 8016dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8016dfc <std+0x64>)
 8016dc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8016dca:	4b0d      	ldr	r3, [pc, #52]	@ (8016e00 <std+0x68>)
 8016dcc:	6224      	str	r4, [r4, #32]
 8016dce:	429c      	cmp	r4, r3
 8016dd0:	d006      	beq.n	8016de0 <std+0x48>
 8016dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016dd6:	4294      	cmp	r4, r2
 8016dd8:	d002      	beq.n	8016de0 <std+0x48>
 8016dda:	33d0      	adds	r3, #208	@ 0xd0
 8016ddc:	429c      	cmp	r4, r3
 8016dde:	d105      	bne.n	8016dec <std+0x54>
 8016de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de8:	f000 b996 	b.w	8017118 <__retarget_lock_init_recursive>
 8016dec:	bd10      	pop	{r4, pc}
 8016dee:	bf00      	nop
 8016df0:	08016f5d 	.word	0x08016f5d
 8016df4:	08016f7f 	.word	0x08016f7f
 8016df8:	08016fb7 	.word	0x08016fb7
 8016dfc:	08016fdb 	.word	0x08016fdb
 8016e00:	240060f8 	.word	0x240060f8

08016e04 <stdio_exit_handler>:
 8016e04:	4a02      	ldr	r2, [pc, #8]	@ (8016e10 <stdio_exit_handler+0xc>)
 8016e06:	4903      	ldr	r1, [pc, #12]	@ (8016e14 <stdio_exit_handler+0x10>)
 8016e08:	4803      	ldr	r0, [pc, #12]	@ (8016e18 <stdio_exit_handler+0x14>)
 8016e0a:	f000 b869 	b.w	8016ee0 <_fwalk_sglue>
 8016e0e:	bf00      	nop
 8016e10:	24000104 	.word	0x24000104
 8016e14:	080192d5 	.word	0x080192d5
 8016e18:	24000280 	.word	0x24000280

08016e1c <cleanup_stdio>:
 8016e1c:	6841      	ldr	r1, [r0, #4]
 8016e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8016e50 <cleanup_stdio+0x34>)
 8016e20:	4299      	cmp	r1, r3
 8016e22:	b510      	push	{r4, lr}
 8016e24:	4604      	mov	r4, r0
 8016e26:	d001      	beq.n	8016e2c <cleanup_stdio+0x10>
 8016e28:	f002 fa54 	bl	80192d4 <_fflush_r>
 8016e2c:	68a1      	ldr	r1, [r4, #8]
 8016e2e:	4b09      	ldr	r3, [pc, #36]	@ (8016e54 <cleanup_stdio+0x38>)
 8016e30:	4299      	cmp	r1, r3
 8016e32:	d002      	beq.n	8016e3a <cleanup_stdio+0x1e>
 8016e34:	4620      	mov	r0, r4
 8016e36:	f002 fa4d 	bl	80192d4 <_fflush_r>
 8016e3a:	68e1      	ldr	r1, [r4, #12]
 8016e3c:	4b06      	ldr	r3, [pc, #24]	@ (8016e58 <cleanup_stdio+0x3c>)
 8016e3e:	4299      	cmp	r1, r3
 8016e40:	d004      	beq.n	8016e4c <cleanup_stdio+0x30>
 8016e42:	4620      	mov	r0, r4
 8016e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e48:	f002 ba44 	b.w	80192d4 <_fflush_r>
 8016e4c:	bd10      	pop	{r4, pc}
 8016e4e:	bf00      	nop
 8016e50:	240060f8 	.word	0x240060f8
 8016e54:	24006160 	.word	0x24006160
 8016e58:	240061c8 	.word	0x240061c8

08016e5c <global_stdio_init.part.0>:
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8016e8c <global_stdio_init.part.0+0x30>)
 8016e60:	4c0b      	ldr	r4, [pc, #44]	@ (8016e90 <global_stdio_init.part.0+0x34>)
 8016e62:	4a0c      	ldr	r2, [pc, #48]	@ (8016e94 <global_stdio_init.part.0+0x38>)
 8016e64:	601a      	str	r2, [r3, #0]
 8016e66:	4620      	mov	r0, r4
 8016e68:	2200      	movs	r2, #0
 8016e6a:	2104      	movs	r1, #4
 8016e6c:	f7ff ff94 	bl	8016d98 <std>
 8016e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016e74:	2201      	movs	r2, #1
 8016e76:	2109      	movs	r1, #9
 8016e78:	f7ff ff8e 	bl	8016d98 <std>
 8016e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016e80:	2202      	movs	r2, #2
 8016e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e86:	2112      	movs	r1, #18
 8016e88:	f7ff bf86 	b.w	8016d98 <std>
 8016e8c:	24006230 	.word	0x24006230
 8016e90:	240060f8 	.word	0x240060f8
 8016e94:	08016e05 	.word	0x08016e05

08016e98 <__sfp_lock_acquire>:
 8016e98:	4801      	ldr	r0, [pc, #4]	@ (8016ea0 <__sfp_lock_acquire+0x8>)
 8016e9a:	f000 b93e 	b.w	801711a <__retarget_lock_acquire_recursive>
 8016e9e:	bf00      	nop
 8016ea0:	24006239 	.word	0x24006239

08016ea4 <__sfp_lock_release>:
 8016ea4:	4801      	ldr	r0, [pc, #4]	@ (8016eac <__sfp_lock_release+0x8>)
 8016ea6:	f000 b939 	b.w	801711c <__retarget_lock_release_recursive>
 8016eaa:	bf00      	nop
 8016eac:	24006239 	.word	0x24006239

08016eb0 <__sinit>:
 8016eb0:	b510      	push	{r4, lr}
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	f7ff fff0 	bl	8016e98 <__sfp_lock_acquire>
 8016eb8:	6a23      	ldr	r3, [r4, #32]
 8016eba:	b11b      	cbz	r3, 8016ec4 <__sinit+0x14>
 8016ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ec0:	f7ff bff0 	b.w	8016ea4 <__sfp_lock_release>
 8016ec4:	4b04      	ldr	r3, [pc, #16]	@ (8016ed8 <__sinit+0x28>)
 8016ec6:	6223      	str	r3, [r4, #32]
 8016ec8:	4b04      	ldr	r3, [pc, #16]	@ (8016edc <__sinit+0x2c>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d1f5      	bne.n	8016ebc <__sinit+0xc>
 8016ed0:	f7ff ffc4 	bl	8016e5c <global_stdio_init.part.0>
 8016ed4:	e7f2      	b.n	8016ebc <__sinit+0xc>
 8016ed6:	bf00      	nop
 8016ed8:	08016e1d 	.word	0x08016e1d
 8016edc:	24006230 	.word	0x24006230

08016ee0 <_fwalk_sglue>:
 8016ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ee4:	4607      	mov	r7, r0
 8016ee6:	4688      	mov	r8, r1
 8016ee8:	4614      	mov	r4, r2
 8016eea:	2600      	movs	r6, #0
 8016eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8016ef4:	d505      	bpl.n	8016f02 <_fwalk_sglue+0x22>
 8016ef6:	6824      	ldr	r4, [r4, #0]
 8016ef8:	2c00      	cmp	r4, #0
 8016efa:	d1f7      	bne.n	8016eec <_fwalk_sglue+0xc>
 8016efc:	4630      	mov	r0, r6
 8016efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f02:	89ab      	ldrh	r3, [r5, #12]
 8016f04:	2b01      	cmp	r3, #1
 8016f06:	d907      	bls.n	8016f18 <_fwalk_sglue+0x38>
 8016f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	d003      	beq.n	8016f18 <_fwalk_sglue+0x38>
 8016f10:	4629      	mov	r1, r5
 8016f12:	4638      	mov	r0, r7
 8016f14:	47c0      	blx	r8
 8016f16:	4306      	orrs	r6, r0
 8016f18:	3568      	adds	r5, #104	@ 0x68
 8016f1a:	e7e9      	b.n	8016ef0 <_fwalk_sglue+0x10>

08016f1c <siprintf>:
 8016f1c:	b40e      	push	{r1, r2, r3}
 8016f1e:	b500      	push	{lr}
 8016f20:	b09c      	sub	sp, #112	@ 0x70
 8016f22:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f24:	9002      	str	r0, [sp, #8]
 8016f26:	9006      	str	r0, [sp, #24]
 8016f28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f2c:	4809      	ldr	r0, [pc, #36]	@ (8016f54 <siprintf+0x38>)
 8016f2e:	9107      	str	r1, [sp, #28]
 8016f30:	9104      	str	r1, [sp, #16]
 8016f32:	4909      	ldr	r1, [pc, #36]	@ (8016f58 <siprintf+0x3c>)
 8016f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f38:	9105      	str	r1, [sp, #20]
 8016f3a:	6800      	ldr	r0, [r0, #0]
 8016f3c:	9301      	str	r3, [sp, #4]
 8016f3e:	a902      	add	r1, sp, #8
 8016f40:	f002 f848 	bl	8018fd4 <_svfiprintf_r>
 8016f44:	9b02      	ldr	r3, [sp, #8]
 8016f46:	2200      	movs	r2, #0
 8016f48:	701a      	strb	r2, [r3, #0]
 8016f4a:	b01c      	add	sp, #112	@ 0x70
 8016f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f50:	b003      	add	sp, #12
 8016f52:	4770      	bx	lr
 8016f54:	2400027c 	.word	0x2400027c
 8016f58:	ffff0208 	.word	0xffff0208

08016f5c <__sread>:
 8016f5c:	b510      	push	{r4, lr}
 8016f5e:	460c      	mov	r4, r1
 8016f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f64:	f000 f88a 	bl	801707c <_read_r>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	bfab      	itete	ge
 8016f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8016f70:	181b      	addge	r3, r3, r0
 8016f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f76:	bfac      	ite	ge
 8016f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f7a:	81a3      	strhlt	r3, [r4, #12]
 8016f7c:	bd10      	pop	{r4, pc}

08016f7e <__swrite>:
 8016f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f82:	461f      	mov	r7, r3
 8016f84:	898b      	ldrh	r3, [r1, #12]
 8016f86:	05db      	lsls	r3, r3, #23
 8016f88:	4605      	mov	r5, r0
 8016f8a:	460c      	mov	r4, r1
 8016f8c:	4616      	mov	r6, r2
 8016f8e:	d505      	bpl.n	8016f9c <__swrite+0x1e>
 8016f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f94:	2302      	movs	r3, #2
 8016f96:	2200      	movs	r2, #0
 8016f98:	f000 f85e 	bl	8017058 <_lseek_r>
 8016f9c:	89a3      	ldrh	r3, [r4, #12]
 8016f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016fa6:	81a3      	strh	r3, [r4, #12]
 8016fa8:	4632      	mov	r2, r6
 8016faa:	463b      	mov	r3, r7
 8016fac:	4628      	mov	r0, r5
 8016fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb2:	f000 b875 	b.w	80170a0 <_write_r>

08016fb6 <__sseek>:
 8016fb6:	b510      	push	{r4, lr}
 8016fb8:	460c      	mov	r4, r1
 8016fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fbe:	f000 f84b 	bl	8017058 <_lseek_r>
 8016fc2:	1c43      	adds	r3, r0, #1
 8016fc4:	89a3      	ldrh	r3, [r4, #12]
 8016fc6:	bf15      	itete	ne
 8016fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016fd2:	81a3      	strheq	r3, [r4, #12]
 8016fd4:	bf18      	it	ne
 8016fd6:	81a3      	strhne	r3, [r4, #12]
 8016fd8:	bd10      	pop	{r4, pc}

08016fda <__sclose>:
 8016fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fde:	f000 b82b 	b.w	8017038 <_close_r>

08016fe2 <memset>:
 8016fe2:	4402      	add	r2, r0
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d100      	bne.n	8016fec <memset+0xa>
 8016fea:	4770      	bx	lr
 8016fec:	f803 1b01 	strb.w	r1, [r3], #1
 8016ff0:	e7f9      	b.n	8016fe6 <memset+0x4>

08016ff2 <strchr>:
 8016ff2:	b2c9      	uxtb	r1, r1
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ffc:	b112      	cbz	r2, 8017004 <strchr+0x12>
 8016ffe:	428a      	cmp	r2, r1
 8017000:	d1f9      	bne.n	8016ff6 <strchr+0x4>
 8017002:	4770      	bx	lr
 8017004:	2900      	cmp	r1, #0
 8017006:	bf18      	it	ne
 8017008:	2000      	movne	r0, #0
 801700a:	4770      	bx	lr

0801700c <strncmp>:
 801700c:	b510      	push	{r4, lr}
 801700e:	b16a      	cbz	r2, 801702c <strncmp+0x20>
 8017010:	3901      	subs	r1, #1
 8017012:	1884      	adds	r4, r0, r2
 8017014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017018:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801701c:	429a      	cmp	r2, r3
 801701e:	d103      	bne.n	8017028 <strncmp+0x1c>
 8017020:	42a0      	cmp	r0, r4
 8017022:	d001      	beq.n	8017028 <strncmp+0x1c>
 8017024:	2a00      	cmp	r2, #0
 8017026:	d1f5      	bne.n	8017014 <strncmp+0x8>
 8017028:	1ad0      	subs	r0, r2, r3
 801702a:	bd10      	pop	{r4, pc}
 801702c:	4610      	mov	r0, r2
 801702e:	e7fc      	b.n	801702a <strncmp+0x1e>

08017030 <_localeconv_r>:
 8017030:	4800      	ldr	r0, [pc, #0]	@ (8017034 <_localeconv_r+0x4>)
 8017032:	4770      	bx	lr
 8017034:	24000200 	.word	0x24000200

08017038 <_close_r>:
 8017038:	b538      	push	{r3, r4, r5, lr}
 801703a:	4d06      	ldr	r5, [pc, #24]	@ (8017054 <_close_r+0x1c>)
 801703c:	2300      	movs	r3, #0
 801703e:	4604      	mov	r4, r0
 8017040:	4608      	mov	r0, r1
 8017042:	602b      	str	r3, [r5, #0]
 8017044:	f7eb fa34 	bl	80024b0 <_close>
 8017048:	1c43      	adds	r3, r0, #1
 801704a:	d102      	bne.n	8017052 <_close_r+0x1a>
 801704c:	682b      	ldr	r3, [r5, #0]
 801704e:	b103      	cbz	r3, 8017052 <_close_r+0x1a>
 8017050:	6023      	str	r3, [r4, #0]
 8017052:	bd38      	pop	{r3, r4, r5, pc}
 8017054:	24006234 	.word	0x24006234

08017058 <_lseek_r>:
 8017058:	b538      	push	{r3, r4, r5, lr}
 801705a:	4d07      	ldr	r5, [pc, #28]	@ (8017078 <_lseek_r+0x20>)
 801705c:	4604      	mov	r4, r0
 801705e:	4608      	mov	r0, r1
 8017060:	4611      	mov	r1, r2
 8017062:	2200      	movs	r2, #0
 8017064:	602a      	str	r2, [r5, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	f7eb fa49 	bl	80024fe <_lseek>
 801706c:	1c43      	adds	r3, r0, #1
 801706e:	d102      	bne.n	8017076 <_lseek_r+0x1e>
 8017070:	682b      	ldr	r3, [r5, #0]
 8017072:	b103      	cbz	r3, 8017076 <_lseek_r+0x1e>
 8017074:	6023      	str	r3, [r4, #0]
 8017076:	bd38      	pop	{r3, r4, r5, pc}
 8017078:	24006234 	.word	0x24006234

0801707c <_read_r>:
 801707c:	b538      	push	{r3, r4, r5, lr}
 801707e:	4d07      	ldr	r5, [pc, #28]	@ (801709c <_read_r+0x20>)
 8017080:	4604      	mov	r4, r0
 8017082:	4608      	mov	r0, r1
 8017084:	4611      	mov	r1, r2
 8017086:	2200      	movs	r2, #0
 8017088:	602a      	str	r2, [r5, #0]
 801708a:	461a      	mov	r2, r3
 801708c:	f7eb f9d7 	bl	800243e <_read>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_read_r+0x1e>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_read_r+0x1e>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	24006234 	.word	0x24006234

080170a0 <_write_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	@ (80170c0 <_write_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7eb f9e2 	bl	8002478 <_write>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_write_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_write_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	24006234 	.word	0x24006234

080170c4 <__errno>:
 80170c4:	4b01      	ldr	r3, [pc, #4]	@ (80170cc <__errno+0x8>)
 80170c6:	6818      	ldr	r0, [r3, #0]
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	2400027c 	.word	0x2400027c

080170d0 <__libc_init_array>:
 80170d0:	b570      	push	{r4, r5, r6, lr}
 80170d2:	4d0d      	ldr	r5, [pc, #52]	@ (8017108 <__libc_init_array+0x38>)
 80170d4:	4c0d      	ldr	r4, [pc, #52]	@ (801710c <__libc_init_array+0x3c>)
 80170d6:	1b64      	subs	r4, r4, r5
 80170d8:	10a4      	asrs	r4, r4, #2
 80170da:	2600      	movs	r6, #0
 80170dc:	42a6      	cmp	r6, r4
 80170de:	d109      	bne.n	80170f4 <__libc_init_array+0x24>
 80170e0:	4d0b      	ldr	r5, [pc, #44]	@ (8017110 <__libc_init_array+0x40>)
 80170e2:	4c0c      	ldr	r4, [pc, #48]	@ (8017114 <__libc_init_array+0x44>)
 80170e4:	f003 fb18 	bl	801a718 <_init>
 80170e8:	1b64      	subs	r4, r4, r5
 80170ea:	10a4      	asrs	r4, r4, #2
 80170ec:	2600      	movs	r6, #0
 80170ee:	42a6      	cmp	r6, r4
 80170f0:	d105      	bne.n	80170fe <__libc_init_array+0x2e>
 80170f2:	bd70      	pop	{r4, r5, r6, pc}
 80170f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80170f8:	4798      	blx	r3
 80170fa:	3601      	adds	r6, #1
 80170fc:	e7ee      	b.n	80170dc <__libc_init_array+0xc>
 80170fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017102:	4798      	blx	r3
 8017104:	3601      	adds	r6, #1
 8017106:	e7f2      	b.n	80170ee <__libc_init_array+0x1e>
 8017108:	0801b260 	.word	0x0801b260
 801710c:	0801b260 	.word	0x0801b260
 8017110:	0801b260 	.word	0x0801b260
 8017114:	0801b264 	.word	0x0801b264

08017118 <__retarget_lock_init_recursive>:
 8017118:	4770      	bx	lr

0801711a <__retarget_lock_acquire_recursive>:
 801711a:	4770      	bx	lr

0801711c <__retarget_lock_release_recursive>:
 801711c:	4770      	bx	lr

0801711e <memcpy>:
 801711e:	440a      	add	r2, r1
 8017120:	4291      	cmp	r1, r2
 8017122:	f100 33ff 	add.w	r3, r0, #4294967295
 8017126:	d100      	bne.n	801712a <memcpy+0xc>
 8017128:	4770      	bx	lr
 801712a:	b510      	push	{r4, lr}
 801712c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017134:	4291      	cmp	r1, r2
 8017136:	d1f9      	bne.n	801712c <memcpy+0xe>
 8017138:	bd10      	pop	{r4, pc}
 801713a:	0000      	movs	r0, r0
 801713c:	0000      	movs	r0, r0
	...

08017140 <nan>:
 8017140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017148 <nan+0x8>
 8017144:	4770      	bx	lr
 8017146:	bf00      	nop
 8017148:	00000000 	.word	0x00000000
 801714c:	7ff80000 	.word	0x7ff80000

08017150 <quorem>:
 8017150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	6903      	ldr	r3, [r0, #16]
 8017156:	690c      	ldr	r4, [r1, #16]
 8017158:	42a3      	cmp	r3, r4
 801715a:	4607      	mov	r7, r0
 801715c:	db7e      	blt.n	801725c <quorem+0x10c>
 801715e:	3c01      	subs	r4, #1
 8017160:	f101 0814 	add.w	r8, r1, #20
 8017164:	00a3      	lsls	r3, r4, #2
 8017166:	f100 0514 	add.w	r5, r0, #20
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017170:	9301      	str	r3, [sp, #4]
 8017172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801717a:	3301      	adds	r3, #1
 801717c:	429a      	cmp	r2, r3
 801717e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017182:	fbb2 f6f3 	udiv	r6, r2, r3
 8017186:	d32e      	bcc.n	80171e6 <quorem+0x96>
 8017188:	f04f 0a00 	mov.w	sl, #0
 801718c:	46c4      	mov	ip, r8
 801718e:	46ae      	mov	lr, r5
 8017190:	46d3      	mov	fp, sl
 8017192:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017196:	b298      	uxth	r0, r3
 8017198:	fb06 a000 	mla	r0, r6, r0, sl
 801719c:	0c02      	lsrs	r2, r0, #16
 801719e:	0c1b      	lsrs	r3, r3, #16
 80171a0:	fb06 2303 	mla	r3, r6, r3, r2
 80171a4:	f8de 2000 	ldr.w	r2, [lr]
 80171a8:	b280      	uxth	r0, r0
 80171aa:	b292      	uxth	r2, r2
 80171ac:	1a12      	subs	r2, r2, r0
 80171ae:	445a      	add	r2, fp
 80171b0:	f8de 0000 	ldr.w	r0, [lr]
 80171b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171b8:	b29b      	uxth	r3, r3
 80171ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80171be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80171c2:	b292      	uxth	r2, r2
 80171c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80171c8:	45e1      	cmp	r9, ip
 80171ca:	f84e 2b04 	str.w	r2, [lr], #4
 80171ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80171d2:	d2de      	bcs.n	8017192 <quorem+0x42>
 80171d4:	9b00      	ldr	r3, [sp, #0]
 80171d6:	58eb      	ldr	r3, [r5, r3]
 80171d8:	b92b      	cbnz	r3, 80171e6 <quorem+0x96>
 80171da:	9b01      	ldr	r3, [sp, #4]
 80171dc:	3b04      	subs	r3, #4
 80171de:	429d      	cmp	r5, r3
 80171e0:	461a      	mov	r2, r3
 80171e2:	d32f      	bcc.n	8017244 <quorem+0xf4>
 80171e4:	613c      	str	r4, [r7, #16]
 80171e6:	4638      	mov	r0, r7
 80171e8:	f001 fca0 	bl	8018b2c <__mcmp>
 80171ec:	2800      	cmp	r0, #0
 80171ee:	db25      	blt.n	801723c <quorem+0xec>
 80171f0:	4629      	mov	r1, r5
 80171f2:	2000      	movs	r0, #0
 80171f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80171f8:	f8d1 c000 	ldr.w	ip, [r1]
 80171fc:	fa1f fe82 	uxth.w	lr, r2
 8017200:	fa1f f38c 	uxth.w	r3, ip
 8017204:	eba3 030e 	sub.w	r3, r3, lr
 8017208:	4403      	add	r3, r0
 801720a:	0c12      	lsrs	r2, r2, #16
 801720c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017210:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017214:	b29b      	uxth	r3, r3
 8017216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801721a:	45c1      	cmp	r9, r8
 801721c:	f841 3b04 	str.w	r3, [r1], #4
 8017220:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017224:	d2e6      	bcs.n	80171f4 <quorem+0xa4>
 8017226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801722a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801722e:	b922      	cbnz	r2, 801723a <quorem+0xea>
 8017230:	3b04      	subs	r3, #4
 8017232:	429d      	cmp	r5, r3
 8017234:	461a      	mov	r2, r3
 8017236:	d30b      	bcc.n	8017250 <quorem+0x100>
 8017238:	613c      	str	r4, [r7, #16]
 801723a:	3601      	adds	r6, #1
 801723c:	4630      	mov	r0, r6
 801723e:	b003      	add	sp, #12
 8017240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017244:	6812      	ldr	r2, [r2, #0]
 8017246:	3b04      	subs	r3, #4
 8017248:	2a00      	cmp	r2, #0
 801724a:	d1cb      	bne.n	80171e4 <quorem+0x94>
 801724c:	3c01      	subs	r4, #1
 801724e:	e7c6      	b.n	80171de <quorem+0x8e>
 8017250:	6812      	ldr	r2, [r2, #0]
 8017252:	3b04      	subs	r3, #4
 8017254:	2a00      	cmp	r2, #0
 8017256:	d1ef      	bne.n	8017238 <quorem+0xe8>
 8017258:	3c01      	subs	r4, #1
 801725a:	e7ea      	b.n	8017232 <quorem+0xe2>
 801725c:	2000      	movs	r0, #0
 801725e:	e7ee      	b.n	801723e <quorem+0xee>

08017260 <_dtoa_r>:
 8017260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	ed2d 8b02 	vpush	{d8}
 8017268:	69c7      	ldr	r7, [r0, #28]
 801726a:	b091      	sub	sp, #68	@ 0x44
 801726c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017270:	ec55 4b10 	vmov	r4, r5, d0
 8017274:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017276:	9107      	str	r1, [sp, #28]
 8017278:	4681      	mov	r9, r0
 801727a:	9209      	str	r2, [sp, #36]	@ 0x24
 801727c:	930d      	str	r3, [sp, #52]	@ 0x34
 801727e:	b97f      	cbnz	r7, 80172a0 <_dtoa_r+0x40>
 8017280:	2010      	movs	r0, #16
 8017282:	f001 f8c7 	bl	8018414 <malloc>
 8017286:	4602      	mov	r2, r0
 8017288:	f8c9 001c 	str.w	r0, [r9, #28]
 801728c:	b920      	cbnz	r0, 8017298 <_dtoa_r+0x38>
 801728e:	4ba0      	ldr	r3, [pc, #640]	@ (8017510 <_dtoa_r+0x2b0>)
 8017290:	21ef      	movs	r1, #239	@ 0xef
 8017292:	48a0      	ldr	r0, [pc, #640]	@ (8017514 <_dtoa_r+0x2b4>)
 8017294:	f002 f870 	bl	8019378 <__assert_func>
 8017298:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801729c:	6007      	str	r7, [r0, #0]
 801729e:	60c7      	str	r7, [r0, #12]
 80172a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80172a4:	6819      	ldr	r1, [r3, #0]
 80172a6:	b159      	cbz	r1, 80172c0 <_dtoa_r+0x60>
 80172a8:	685a      	ldr	r2, [r3, #4]
 80172aa:	604a      	str	r2, [r1, #4]
 80172ac:	2301      	movs	r3, #1
 80172ae:	4093      	lsls	r3, r2
 80172b0:	608b      	str	r3, [r1, #8]
 80172b2:	4648      	mov	r0, r9
 80172b4:	f001 f9b6 	bl	8018624 <_Bfree>
 80172b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80172bc:	2200      	movs	r2, #0
 80172be:	601a      	str	r2, [r3, #0]
 80172c0:	1e2b      	subs	r3, r5, #0
 80172c2:	bfbb      	ittet	lt
 80172c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80172c8:	9303      	strlt	r3, [sp, #12]
 80172ca:	2300      	movge	r3, #0
 80172cc:	2201      	movlt	r2, #1
 80172ce:	bfac      	ite	ge
 80172d0:	6033      	strge	r3, [r6, #0]
 80172d2:	6032      	strlt	r2, [r6, #0]
 80172d4:	4b90      	ldr	r3, [pc, #576]	@ (8017518 <_dtoa_r+0x2b8>)
 80172d6:	9e03      	ldr	r6, [sp, #12]
 80172d8:	43b3      	bics	r3, r6
 80172da:	d110      	bne.n	80172fe <_dtoa_r+0x9e>
 80172dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80172de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80172e2:	6013      	str	r3, [r2, #0]
 80172e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80172e8:	4323      	orrs	r3, r4
 80172ea:	f000 84de 	beq.w	8017caa <_dtoa_r+0xa4a>
 80172ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80172f0:	4f8a      	ldr	r7, [pc, #552]	@ (801751c <_dtoa_r+0x2bc>)
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	f000 84e0 	beq.w	8017cb8 <_dtoa_r+0xa58>
 80172f8:	1cfb      	adds	r3, r7, #3
 80172fa:	f000 bcdb 	b.w	8017cb4 <_dtoa_r+0xa54>
 80172fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017302:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801730a:	d10a      	bne.n	8017322 <_dtoa_r+0xc2>
 801730c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801730e:	2301      	movs	r3, #1
 8017310:	6013      	str	r3, [r2, #0]
 8017312:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017314:	b113      	cbz	r3, 801731c <_dtoa_r+0xbc>
 8017316:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8017318:	4b81      	ldr	r3, [pc, #516]	@ (8017520 <_dtoa_r+0x2c0>)
 801731a:	6013      	str	r3, [r2, #0]
 801731c:	4f81      	ldr	r7, [pc, #516]	@ (8017524 <_dtoa_r+0x2c4>)
 801731e:	f000 bccb 	b.w	8017cb8 <_dtoa_r+0xa58>
 8017322:	aa0e      	add	r2, sp, #56	@ 0x38
 8017324:	a90f      	add	r1, sp, #60	@ 0x3c
 8017326:	4648      	mov	r0, r9
 8017328:	eeb0 0b48 	vmov.f64	d0, d8
 801732c:	f001 fd1e 	bl	8018d6c <__d2b>
 8017330:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8017334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017336:	9001      	str	r0, [sp, #4]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d045      	beq.n	80173c8 <_dtoa_r+0x168>
 801733c:	eeb0 7b48 	vmov.f64	d7, d8
 8017340:	ee18 1a90 	vmov	r1, s17
 8017344:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8017348:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801734c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8017350:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017354:	2500      	movs	r5, #0
 8017356:	ee07 1a90 	vmov	s15, r1
 801735a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801735e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80174f8 <_dtoa_r+0x298>
 8017362:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017366:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8017500 <_dtoa_r+0x2a0>
 801736a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801736e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8017508 <_dtoa_r+0x2a8>
 8017372:	ee07 3a90 	vmov	s15, r3
 8017376:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801737a:	eeb0 7b46 	vmov.f64	d7, d6
 801737e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017382:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017386:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801738a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801738e:	ee16 8a90 	vmov	r8, s13
 8017392:	d508      	bpl.n	80173a6 <_dtoa_r+0x146>
 8017394:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017398:	eeb4 6b47 	vcmp.f64	d6, d7
 801739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a0:	bf18      	it	ne
 80173a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80173a6:	f1b8 0f16 	cmp.w	r8, #22
 80173aa:	d82b      	bhi.n	8017404 <_dtoa_r+0x1a4>
 80173ac:	495e      	ldr	r1, [pc, #376]	@ (8017528 <_dtoa_r+0x2c8>)
 80173ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80173b2:	ed91 7b00 	vldr	d7, [r1]
 80173b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80173ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173be:	d501      	bpl.n	80173c4 <_dtoa_r+0x164>
 80173c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80173c4:	2100      	movs	r1, #0
 80173c6:	e01e      	b.n	8017406 <_dtoa_r+0x1a6>
 80173c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173ca:	4413      	add	r3, r2
 80173cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80173d0:	2920      	cmp	r1, #32
 80173d2:	bfc1      	itttt	gt
 80173d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80173d8:	408e      	lslgt	r6, r1
 80173da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80173de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80173e2:	bfd6      	itet	le
 80173e4:	f1c1 0120 	rsble	r1, r1, #32
 80173e8:	4331      	orrgt	r1, r6
 80173ea:	fa04 f101 	lslle.w	r1, r4, r1
 80173ee:	ee07 1a90 	vmov	s15, r1
 80173f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80173f6:	3b01      	subs	r3, #1
 80173f8:	ee17 1a90 	vmov	r1, s15
 80173fc:	2501      	movs	r5, #1
 80173fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8017402:	e7a8      	b.n	8017356 <_dtoa_r+0xf6>
 8017404:	2101      	movs	r1, #1
 8017406:	1ad2      	subs	r2, r2, r3
 8017408:	1e53      	subs	r3, r2, #1
 801740a:	9306      	str	r3, [sp, #24]
 801740c:	bf45      	ittet	mi
 801740e:	f1c2 0301 	rsbmi	r3, r2, #1
 8017412:	9305      	strmi	r3, [sp, #20]
 8017414:	2300      	movpl	r3, #0
 8017416:	2300      	movmi	r3, #0
 8017418:	bf4c      	ite	mi
 801741a:	9306      	strmi	r3, [sp, #24]
 801741c:	9305      	strpl	r3, [sp, #20]
 801741e:	f1b8 0f00 	cmp.w	r8, #0
 8017422:	910c      	str	r1, [sp, #48]	@ 0x30
 8017424:	db18      	blt.n	8017458 <_dtoa_r+0x1f8>
 8017426:	9b06      	ldr	r3, [sp, #24]
 8017428:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801742c:	4443      	add	r3, r8
 801742e:	9306      	str	r3, [sp, #24]
 8017430:	2300      	movs	r3, #0
 8017432:	9a07      	ldr	r2, [sp, #28]
 8017434:	2a09      	cmp	r2, #9
 8017436:	d849      	bhi.n	80174cc <_dtoa_r+0x26c>
 8017438:	2a05      	cmp	r2, #5
 801743a:	bfc4      	itt	gt
 801743c:	3a04      	subgt	r2, #4
 801743e:	9207      	strgt	r2, [sp, #28]
 8017440:	9a07      	ldr	r2, [sp, #28]
 8017442:	f1a2 0202 	sub.w	r2, r2, #2
 8017446:	bfcc      	ite	gt
 8017448:	2400      	movgt	r4, #0
 801744a:	2401      	movle	r4, #1
 801744c:	2a03      	cmp	r2, #3
 801744e:	d848      	bhi.n	80174e2 <_dtoa_r+0x282>
 8017450:	e8df f002 	tbb	[pc, r2]
 8017454:	3a2c2e0b 	.word	0x3a2c2e0b
 8017458:	9b05      	ldr	r3, [sp, #20]
 801745a:	2200      	movs	r2, #0
 801745c:	eba3 0308 	sub.w	r3, r3, r8
 8017460:	9305      	str	r3, [sp, #20]
 8017462:	920a      	str	r2, [sp, #40]	@ 0x28
 8017464:	f1c8 0300 	rsb	r3, r8, #0
 8017468:	e7e3      	b.n	8017432 <_dtoa_r+0x1d2>
 801746a:	2200      	movs	r2, #0
 801746c:	9208      	str	r2, [sp, #32]
 801746e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017470:	2a00      	cmp	r2, #0
 8017472:	dc39      	bgt.n	80174e8 <_dtoa_r+0x288>
 8017474:	f04f 0b01 	mov.w	fp, #1
 8017478:	46da      	mov	sl, fp
 801747a:	465a      	mov	r2, fp
 801747c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8017480:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8017484:	2100      	movs	r1, #0
 8017486:	2004      	movs	r0, #4
 8017488:	f100 0614 	add.w	r6, r0, #20
 801748c:	4296      	cmp	r6, r2
 801748e:	d930      	bls.n	80174f2 <_dtoa_r+0x292>
 8017490:	6079      	str	r1, [r7, #4]
 8017492:	4648      	mov	r0, r9
 8017494:	9304      	str	r3, [sp, #16]
 8017496:	f001 f885 	bl	80185a4 <_Balloc>
 801749a:	9b04      	ldr	r3, [sp, #16]
 801749c:	4607      	mov	r7, r0
 801749e:	2800      	cmp	r0, #0
 80174a0:	d146      	bne.n	8017530 <_dtoa_r+0x2d0>
 80174a2:	4b22      	ldr	r3, [pc, #136]	@ (801752c <_dtoa_r+0x2cc>)
 80174a4:	4602      	mov	r2, r0
 80174a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80174aa:	e6f2      	b.n	8017292 <_dtoa_r+0x32>
 80174ac:	2201      	movs	r2, #1
 80174ae:	e7dd      	b.n	801746c <_dtoa_r+0x20c>
 80174b0:	2200      	movs	r2, #0
 80174b2:	9208      	str	r2, [sp, #32]
 80174b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174b6:	eb08 0b02 	add.w	fp, r8, r2
 80174ba:	f10b 0a01 	add.w	sl, fp, #1
 80174be:	4652      	mov	r2, sl
 80174c0:	2a01      	cmp	r2, #1
 80174c2:	bfb8      	it	lt
 80174c4:	2201      	movlt	r2, #1
 80174c6:	e7db      	b.n	8017480 <_dtoa_r+0x220>
 80174c8:	2201      	movs	r2, #1
 80174ca:	e7f2      	b.n	80174b2 <_dtoa_r+0x252>
 80174cc:	2401      	movs	r4, #1
 80174ce:	2200      	movs	r2, #0
 80174d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80174d4:	f04f 3bff 	mov.w	fp, #4294967295
 80174d8:	2100      	movs	r1, #0
 80174da:	46da      	mov	sl, fp
 80174dc:	2212      	movs	r2, #18
 80174de:	9109      	str	r1, [sp, #36]	@ 0x24
 80174e0:	e7ce      	b.n	8017480 <_dtoa_r+0x220>
 80174e2:	2201      	movs	r2, #1
 80174e4:	9208      	str	r2, [sp, #32]
 80174e6:	e7f5      	b.n	80174d4 <_dtoa_r+0x274>
 80174e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80174ec:	46da      	mov	sl, fp
 80174ee:	465a      	mov	r2, fp
 80174f0:	e7c6      	b.n	8017480 <_dtoa_r+0x220>
 80174f2:	3101      	adds	r1, #1
 80174f4:	0040      	lsls	r0, r0, #1
 80174f6:	e7c7      	b.n	8017488 <_dtoa_r+0x228>
 80174f8:	636f4361 	.word	0x636f4361
 80174fc:	3fd287a7 	.word	0x3fd287a7
 8017500:	8b60c8b3 	.word	0x8b60c8b3
 8017504:	3fc68a28 	.word	0x3fc68a28
 8017508:	509f79fb 	.word	0x509f79fb
 801750c:	3fd34413 	.word	0x3fd34413
 8017510:	0801acba 	.word	0x0801acba
 8017514:	0801acd1 	.word	0x0801acd1
 8017518:	7ff00000 	.word	0x7ff00000
 801751c:	0801acb6 	.word	0x0801acb6
 8017520:	0801ac82 	.word	0x0801ac82
 8017524:	0801ac81 	.word	0x0801ac81
 8017528:	0801ae28 	.word	0x0801ae28
 801752c:	0801ad29 	.word	0x0801ad29
 8017530:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8017534:	f1ba 0f0e 	cmp.w	sl, #14
 8017538:	6010      	str	r0, [r2, #0]
 801753a:	d86f      	bhi.n	801761c <_dtoa_r+0x3bc>
 801753c:	2c00      	cmp	r4, #0
 801753e:	d06d      	beq.n	801761c <_dtoa_r+0x3bc>
 8017540:	f1b8 0f00 	cmp.w	r8, #0
 8017544:	f340 80c2 	ble.w	80176cc <_dtoa_r+0x46c>
 8017548:	4aca      	ldr	r2, [pc, #808]	@ (8017874 <_dtoa_r+0x614>)
 801754a:	f008 010f 	and.w	r1, r8, #15
 801754e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017552:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8017556:	ed92 7b00 	vldr	d7, [r2]
 801755a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801755e:	f000 80a9 	beq.w	80176b4 <_dtoa_r+0x454>
 8017562:	4ac5      	ldr	r2, [pc, #788]	@ (8017878 <_dtoa_r+0x618>)
 8017564:	ed92 6b08 	vldr	d6, [r2, #32]
 8017568:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801756c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017570:	f001 010f 	and.w	r1, r1, #15
 8017574:	2203      	movs	r2, #3
 8017576:	48c0      	ldr	r0, [pc, #768]	@ (8017878 <_dtoa_r+0x618>)
 8017578:	2900      	cmp	r1, #0
 801757a:	f040 809d 	bne.w	80176b8 <_dtoa_r+0x458>
 801757e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017582:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017586:	ed8d 7b02 	vstr	d7, [sp, #8]
 801758a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801758c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017590:	2900      	cmp	r1, #0
 8017592:	f000 80c1 	beq.w	8017718 <_dtoa_r+0x4b8>
 8017596:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801759a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a2:	f140 80b9 	bpl.w	8017718 <_dtoa_r+0x4b8>
 80175a6:	f1ba 0f00 	cmp.w	sl, #0
 80175aa:	f000 80b5 	beq.w	8017718 <_dtoa_r+0x4b8>
 80175ae:	f1bb 0f00 	cmp.w	fp, #0
 80175b2:	dd31      	ble.n	8017618 <_dtoa_r+0x3b8>
 80175b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80175b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80175bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80175c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80175c4:	9104      	str	r1, [sp, #16]
 80175c6:	3201      	adds	r2, #1
 80175c8:	465c      	mov	r4, fp
 80175ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80175ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80175d2:	ee07 2a90 	vmov	s15, r2
 80175d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80175da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80175de:	ee15 2a90 	vmov	r2, s11
 80175e2:	ec51 0b15 	vmov	r0, r1, d5
 80175e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80175ea:	2c00      	cmp	r4, #0
 80175ec:	f040 8098 	bne.w	8017720 <_dtoa_r+0x4c0>
 80175f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80175f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80175f8:	ec41 0b17 	vmov	d7, r0, r1
 80175fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017604:	f300 8261 	bgt.w	8017aca <_dtoa_r+0x86a>
 8017608:	eeb1 7b47 	vneg.f64	d7, d7
 801760c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017614:	f100 80f5 	bmi.w	8017802 <_dtoa_r+0x5a2>
 8017618:	ed8d 8b02 	vstr	d8, [sp, #8]
 801761c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801761e:	2a00      	cmp	r2, #0
 8017620:	f2c0 812c 	blt.w	801787c <_dtoa_r+0x61c>
 8017624:	f1b8 0f0e 	cmp.w	r8, #14
 8017628:	f300 8128 	bgt.w	801787c <_dtoa_r+0x61c>
 801762c:	4b91      	ldr	r3, [pc, #580]	@ (8017874 <_dtoa_r+0x614>)
 801762e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017632:	ed93 6b00 	vldr	d6, [r3]
 8017636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017638:	2b00      	cmp	r3, #0
 801763a:	da03      	bge.n	8017644 <_dtoa_r+0x3e4>
 801763c:	f1ba 0f00 	cmp.w	sl, #0
 8017640:	f340 80d2 	ble.w	80177e8 <_dtoa_r+0x588>
 8017644:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8017648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801764c:	463e      	mov	r6, r7
 801764e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017652:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017656:	ee15 3a10 	vmov	r3, s10
 801765a:	3330      	adds	r3, #48	@ 0x30
 801765c:	f806 3b01 	strb.w	r3, [r6], #1
 8017660:	1bf3      	subs	r3, r6, r7
 8017662:	459a      	cmp	sl, r3
 8017664:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017668:	eea3 7b46 	vfms.f64	d7, d3, d6
 801766c:	f040 80f8 	bne.w	8017860 <_dtoa_r+0x600>
 8017670:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017674:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801767c:	f300 80dd 	bgt.w	801783a <_dtoa_r+0x5da>
 8017680:	eeb4 7b46 	vcmp.f64	d7, d6
 8017684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017688:	d104      	bne.n	8017694 <_dtoa_r+0x434>
 801768a:	ee15 3a10 	vmov	r3, s10
 801768e:	07db      	lsls	r3, r3, #31
 8017690:	f100 80d3 	bmi.w	801783a <_dtoa_r+0x5da>
 8017694:	9901      	ldr	r1, [sp, #4]
 8017696:	4648      	mov	r0, r9
 8017698:	f000 ffc4 	bl	8018624 <_Bfree>
 801769c:	2300      	movs	r3, #0
 801769e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80176a0:	7033      	strb	r3, [r6, #0]
 80176a2:	f108 0301 	add.w	r3, r8, #1
 80176a6:	6013      	str	r3, [r2, #0]
 80176a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	f000 8304 	beq.w	8017cb8 <_dtoa_r+0xa58>
 80176b0:	601e      	str	r6, [r3, #0]
 80176b2:	e301      	b.n	8017cb8 <_dtoa_r+0xa58>
 80176b4:	2202      	movs	r2, #2
 80176b6:	e75e      	b.n	8017576 <_dtoa_r+0x316>
 80176b8:	07cc      	lsls	r4, r1, #31
 80176ba:	d504      	bpl.n	80176c6 <_dtoa_r+0x466>
 80176bc:	ed90 6b00 	vldr	d6, [r0]
 80176c0:	3201      	adds	r2, #1
 80176c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80176c6:	1049      	asrs	r1, r1, #1
 80176c8:	3008      	adds	r0, #8
 80176ca:	e755      	b.n	8017578 <_dtoa_r+0x318>
 80176cc:	d022      	beq.n	8017714 <_dtoa_r+0x4b4>
 80176ce:	f1c8 0100 	rsb	r1, r8, #0
 80176d2:	4a68      	ldr	r2, [pc, #416]	@ (8017874 <_dtoa_r+0x614>)
 80176d4:	f001 000f 	and.w	r0, r1, #15
 80176d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80176dc:	ed92 7b00 	vldr	d7, [r2]
 80176e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80176e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80176e8:	4863      	ldr	r0, [pc, #396]	@ (8017878 <_dtoa_r+0x618>)
 80176ea:	1109      	asrs	r1, r1, #4
 80176ec:	2400      	movs	r4, #0
 80176ee:	2202      	movs	r2, #2
 80176f0:	b929      	cbnz	r1, 80176fe <_dtoa_r+0x49e>
 80176f2:	2c00      	cmp	r4, #0
 80176f4:	f43f af49 	beq.w	801758a <_dtoa_r+0x32a>
 80176f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80176fc:	e745      	b.n	801758a <_dtoa_r+0x32a>
 80176fe:	07ce      	lsls	r6, r1, #31
 8017700:	d505      	bpl.n	801770e <_dtoa_r+0x4ae>
 8017702:	ed90 6b00 	vldr	d6, [r0]
 8017706:	3201      	adds	r2, #1
 8017708:	2401      	movs	r4, #1
 801770a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801770e:	1049      	asrs	r1, r1, #1
 8017710:	3008      	adds	r0, #8
 8017712:	e7ed      	b.n	80176f0 <_dtoa_r+0x490>
 8017714:	2202      	movs	r2, #2
 8017716:	e738      	b.n	801758a <_dtoa_r+0x32a>
 8017718:	f8cd 8010 	str.w	r8, [sp, #16]
 801771c:	4654      	mov	r4, sl
 801771e:	e754      	b.n	80175ca <_dtoa_r+0x36a>
 8017720:	4a54      	ldr	r2, [pc, #336]	@ (8017874 <_dtoa_r+0x614>)
 8017722:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8017726:	ed12 4b02 	vldr	d4, [r2, #-8]
 801772a:	9a08      	ldr	r2, [sp, #32]
 801772c:	ec41 0b17 	vmov	d7, r0, r1
 8017730:	443c      	add	r4, r7
 8017732:	b34a      	cbz	r2, 8017788 <_dtoa_r+0x528>
 8017734:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8017738:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801773c:	463e      	mov	r6, r7
 801773e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017742:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8017746:	ee35 7b47 	vsub.f64	d7, d5, d7
 801774a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801774e:	ee14 2a90 	vmov	r2, s9
 8017752:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017756:	3230      	adds	r2, #48	@ 0x30
 8017758:	ee36 6b45 	vsub.f64	d6, d6, d5
 801775c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017764:	f806 2b01 	strb.w	r2, [r6], #1
 8017768:	d438      	bmi.n	80177dc <_dtoa_r+0x57c>
 801776a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801776e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017776:	d462      	bmi.n	801783e <_dtoa_r+0x5de>
 8017778:	42a6      	cmp	r6, r4
 801777a:	f43f af4d 	beq.w	8017618 <_dtoa_r+0x3b8>
 801777e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017782:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017786:	e7e0      	b.n	801774a <_dtoa_r+0x4ea>
 8017788:	4621      	mov	r1, r4
 801778a:	463e      	mov	r6, r7
 801778c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017790:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8017794:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017798:	ee14 2a90 	vmov	r2, s9
 801779c:	3230      	adds	r2, #48	@ 0x30
 801779e:	f806 2b01 	strb.w	r2, [r6], #1
 80177a2:	42a6      	cmp	r6, r4
 80177a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80177a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80177ac:	d119      	bne.n	80177e2 <_dtoa_r+0x582>
 80177ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80177b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80177b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80177ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177be:	dc3e      	bgt.n	801783e <_dtoa_r+0x5de>
 80177c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80177c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80177c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177cc:	f57f af24 	bpl.w	8017618 <_dtoa_r+0x3b8>
 80177d0:	460e      	mov	r6, r1
 80177d2:	3901      	subs	r1, #1
 80177d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80177d8:	2b30      	cmp	r3, #48	@ 0x30
 80177da:	d0f9      	beq.n	80177d0 <_dtoa_r+0x570>
 80177dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80177e0:	e758      	b.n	8017694 <_dtoa_r+0x434>
 80177e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80177e6:	e7d5      	b.n	8017794 <_dtoa_r+0x534>
 80177e8:	d10b      	bne.n	8017802 <_dtoa_r+0x5a2>
 80177ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80177ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80177f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80177fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fe:	f2c0 8161 	blt.w	8017ac4 <_dtoa_r+0x864>
 8017802:	2400      	movs	r4, #0
 8017804:	4625      	mov	r5, r4
 8017806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017808:	43db      	mvns	r3, r3
 801780a:	9304      	str	r3, [sp, #16]
 801780c:	463e      	mov	r6, r7
 801780e:	f04f 0800 	mov.w	r8, #0
 8017812:	4621      	mov	r1, r4
 8017814:	4648      	mov	r0, r9
 8017816:	f000 ff05 	bl	8018624 <_Bfree>
 801781a:	2d00      	cmp	r5, #0
 801781c:	d0de      	beq.n	80177dc <_dtoa_r+0x57c>
 801781e:	f1b8 0f00 	cmp.w	r8, #0
 8017822:	d005      	beq.n	8017830 <_dtoa_r+0x5d0>
 8017824:	45a8      	cmp	r8, r5
 8017826:	d003      	beq.n	8017830 <_dtoa_r+0x5d0>
 8017828:	4641      	mov	r1, r8
 801782a:	4648      	mov	r0, r9
 801782c:	f000 fefa 	bl	8018624 <_Bfree>
 8017830:	4629      	mov	r1, r5
 8017832:	4648      	mov	r0, r9
 8017834:	f000 fef6 	bl	8018624 <_Bfree>
 8017838:	e7d0      	b.n	80177dc <_dtoa_r+0x57c>
 801783a:	f8cd 8010 	str.w	r8, [sp, #16]
 801783e:	4633      	mov	r3, r6
 8017840:	461e      	mov	r6, r3
 8017842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017846:	2a39      	cmp	r2, #57	@ 0x39
 8017848:	d106      	bne.n	8017858 <_dtoa_r+0x5f8>
 801784a:	429f      	cmp	r7, r3
 801784c:	d1f8      	bne.n	8017840 <_dtoa_r+0x5e0>
 801784e:	9a04      	ldr	r2, [sp, #16]
 8017850:	3201      	adds	r2, #1
 8017852:	9204      	str	r2, [sp, #16]
 8017854:	2230      	movs	r2, #48	@ 0x30
 8017856:	703a      	strb	r2, [r7, #0]
 8017858:	781a      	ldrb	r2, [r3, #0]
 801785a:	3201      	adds	r2, #1
 801785c:	701a      	strb	r2, [r3, #0]
 801785e:	e7bd      	b.n	80177dc <_dtoa_r+0x57c>
 8017860:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017864:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786c:	f47f aeef 	bne.w	801764e <_dtoa_r+0x3ee>
 8017870:	e710      	b.n	8017694 <_dtoa_r+0x434>
 8017872:	bf00      	nop
 8017874:	0801ae28 	.word	0x0801ae28
 8017878:	0801ae00 	.word	0x0801ae00
 801787c:	9908      	ldr	r1, [sp, #32]
 801787e:	2900      	cmp	r1, #0
 8017880:	f000 80e3 	beq.w	8017a4a <_dtoa_r+0x7ea>
 8017884:	9907      	ldr	r1, [sp, #28]
 8017886:	2901      	cmp	r1, #1
 8017888:	f300 80c8 	bgt.w	8017a1c <_dtoa_r+0x7bc>
 801788c:	2d00      	cmp	r5, #0
 801788e:	f000 80c1 	beq.w	8017a14 <_dtoa_r+0x7b4>
 8017892:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017896:	9e05      	ldr	r6, [sp, #20]
 8017898:	461c      	mov	r4, r3
 801789a:	9304      	str	r3, [sp, #16]
 801789c:	9b05      	ldr	r3, [sp, #20]
 801789e:	4413      	add	r3, r2
 80178a0:	9305      	str	r3, [sp, #20]
 80178a2:	9b06      	ldr	r3, [sp, #24]
 80178a4:	2101      	movs	r1, #1
 80178a6:	4413      	add	r3, r2
 80178a8:	4648      	mov	r0, r9
 80178aa:	9306      	str	r3, [sp, #24]
 80178ac:	f000 ffb8 	bl	8018820 <__i2b>
 80178b0:	9b04      	ldr	r3, [sp, #16]
 80178b2:	4605      	mov	r5, r0
 80178b4:	b166      	cbz	r6, 80178d0 <_dtoa_r+0x670>
 80178b6:	9a06      	ldr	r2, [sp, #24]
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	dd09      	ble.n	80178d0 <_dtoa_r+0x670>
 80178bc:	42b2      	cmp	r2, r6
 80178be:	9905      	ldr	r1, [sp, #20]
 80178c0:	bfa8      	it	ge
 80178c2:	4632      	movge	r2, r6
 80178c4:	1a89      	subs	r1, r1, r2
 80178c6:	9105      	str	r1, [sp, #20]
 80178c8:	9906      	ldr	r1, [sp, #24]
 80178ca:	1ab6      	subs	r6, r6, r2
 80178cc:	1a8a      	subs	r2, r1, r2
 80178ce:	9206      	str	r2, [sp, #24]
 80178d0:	b1fb      	cbz	r3, 8017912 <_dtoa_r+0x6b2>
 80178d2:	9a08      	ldr	r2, [sp, #32]
 80178d4:	2a00      	cmp	r2, #0
 80178d6:	f000 80bc 	beq.w	8017a52 <_dtoa_r+0x7f2>
 80178da:	b19c      	cbz	r4, 8017904 <_dtoa_r+0x6a4>
 80178dc:	4629      	mov	r1, r5
 80178de:	4622      	mov	r2, r4
 80178e0:	4648      	mov	r0, r9
 80178e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80178e4:	f001 f85c 	bl	80189a0 <__pow5mult>
 80178e8:	9a01      	ldr	r2, [sp, #4]
 80178ea:	4601      	mov	r1, r0
 80178ec:	4605      	mov	r5, r0
 80178ee:	4648      	mov	r0, r9
 80178f0:	f000 ffac 	bl	801884c <__multiply>
 80178f4:	9901      	ldr	r1, [sp, #4]
 80178f6:	9004      	str	r0, [sp, #16]
 80178f8:	4648      	mov	r0, r9
 80178fa:	f000 fe93 	bl	8018624 <_Bfree>
 80178fe:	9a04      	ldr	r2, [sp, #16]
 8017900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017902:	9201      	str	r2, [sp, #4]
 8017904:	1b1a      	subs	r2, r3, r4
 8017906:	d004      	beq.n	8017912 <_dtoa_r+0x6b2>
 8017908:	9901      	ldr	r1, [sp, #4]
 801790a:	4648      	mov	r0, r9
 801790c:	f001 f848 	bl	80189a0 <__pow5mult>
 8017910:	9001      	str	r0, [sp, #4]
 8017912:	2101      	movs	r1, #1
 8017914:	4648      	mov	r0, r9
 8017916:	f000 ff83 	bl	8018820 <__i2b>
 801791a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801791c:	4604      	mov	r4, r0
 801791e:	2b00      	cmp	r3, #0
 8017920:	f000 81d0 	beq.w	8017cc4 <_dtoa_r+0xa64>
 8017924:	461a      	mov	r2, r3
 8017926:	4601      	mov	r1, r0
 8017928:	4648      	mov	r0, r9
 801792a:	f001 f839 	bl	80189a0 <__pow5mult>
 801792e:	9b07      	ldr	r3, [sp, #28]
 8017930:	2b01      	cmp	r3, #1
 8017932:	4604      	mov	r4, r0
 8017934:	f300 8095 	bgt.w	8017a62 <_dtoa_r+0x802>
 8017938:	9b02      	ldr	r3, [sp, #8]
 801793a:	2b00      	cmp	r3, #0
 801793c:	f040 808b 	bne.w	8017a56 <_dtoa_r+0x7f6>
 8017940:	9b03      	ldr	r3, [sp, #12]
 8017942:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017946:	2a00      	cmp	r2, #0
 8017948:	f040 8087 	bne.w	8017a5a <_dtoa_r+0x7fa>
 801794c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017950:	0d12      	lsrs	r2, r2, #20
 8017952:	0512      	lsls	r2, r2, #20
 8017954:	2a00      	cmp	r2, #0
 8017956:	f000 8082 	beq.w	8017a5e <_dtoa_r+0x7fe>
 801795a:	9b05      	ldr	r3, [sp, #20]
 801795c:	3301      	adds	r3, #1
 801795e:	9305      	str	r3, [sp, #20]
 8017960:	9b06      	ldr	r3, [sp, #24]
 8017962:	3301      	adds	r3, #1
 8017964:	9306      	str	r3, [sp, #24]
 8017966:	2301      	movs	r3, #1
 8017968:	930b      	str	r3, [sp, #44]	@ 0x2c
 801796a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801796c:	2b00      	cmp	r3, #0
 801796e:	f000 81af 	beq.w	8017cd0 <_dtoa_r+0xa70>
 8017972:	6922      	ldr	r2, [r4, #16]
 8017974:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017978:	6910      	ldr	r0, [r2, #16]
 801797a:	f000 ff05 	bl	8018788 <__hi0bits>
 801797e:	f1c0 0020 	rsb	r0, r0, #32
 8017982:	9b06      	ldr	r3, [sp, #24]
 8017984:	4418      	add	r0, r3
 8017986:	f010 001f 	ands.w	r0, r0, #31
 801798a:	d076      	beq.n	8017a7a <_dtoa_r+0x81a>
 801798c:	f1c0 0220 	rsb	r2, r0, #32
 8017990:	2a04      	cmp	r2, #4
 8017992:	dd69      	ble.n	8017a68 <_dtoa_r+0x808>
 8017994:	9b05      	ldr	r3, [sp, #20]
 8017996:	f1c0 001c 	rsb	r0, r0, #28
 801799a:	4403      	add	r3, r0
 801799c:	9305      	str	r3, [sp, #20]
 801799e:	9b06      	ldr	r3, [sp, #24]
 80179a0:	4406      	add	r6, r0
 80179a2:	4403      	add	r3, r0
 80179a4:	9306      	str	r3, [sp, #24]
 80179a6:	9b05      	ldr	r3, [sp, #20]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dd05      	ble.n	80179b8 <_dtoa_r+0x758>
 80179ac:	9901      	ldr	r1, [sp, #4]
 80179ae:	461a      	mov	r2, r3
 80179b0:	4648      	mov	r0, r9
 80179b2:	f001 f84f 	bl	8018a54 <__lshift>
 80179b6:	9001      	str	r0, [sp, #4]
 80179b8:	9b06      	ldr	r3, [sp, #24]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	dd05      	ble.n	80179ca <_dtoa_r+0x76a>
 80179be:	4621      	mov	r1, r4
 80179c0:	461a      	mov	r2, r3
 80179c2:	4648      	mov	r0, r9
 80179c4:	f001 f846 	bl	8018a54 <__lshift>
 80179c8:	4604      	mov	r4, r0
 80179ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d056      	beq.n	8017a7e <_dtoa_r+0x81e>
 80179d0:	9801      	ldr	r0, [sp, #4]
 80179d2:	4621      	mov	r1, r4
 80179d4:	f001 f8aa 	bl	8018b2c <__mcmp>
 80179d8:	2800      	cmp	r0, #0
 80179da:	da50      	bge.n	8017a7e <_dtoa_r+0x81e>
 80179dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80179e0:	9304      	str	r3, [sp, #16]
 80179e2:	9901      	ldr	r1, [sp, #4]
 80179e4:	2300      	movs	r3, #0
 80179e6:	220a      	movs	r2, #10
 80179e8:	4648      	mov	r0, r9
 80179ea:	f000 fe3d 	bl	8018668 <__multadd>
 80179ee:	9b08      	ldr	r3, [sp, #32]
 80179f0:	9001      	str	r0, [sp, #4]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	f000 816e 	beq.w	8017cd4 <_dtoa_r+0xa74>
 80179f8:	4629      	mov	r1, r5
 80179fa:	2300      	movs	r3, #0
 80179fc:	220a      	movs	r2, #10
 80179fe:	4648      	mov	r0, r9
 8017a00:	f000 fe32 	bl	8018668 <__multadd>
 8017a04:	f1bb 0f00 	cmp.w	fp, #0
 8017a08:	4605      	mov	r5, r0
 8017a0a:	dc64      	bgt.n	8017ad6 <_dtoa_r+0x876>
 8017a0c:	9b07      	ldr	r3, [sp, #28]
 8017a0e:	2b02      	cmp	r3, #2
 8017a10:	dc3e      	bgt.n	8017a90 <_dtoa_r+0x830>
 8017a12:	e060      	b.n	8017ad6 <_dtoa_r+0x876>
 8017a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017a1a:	e73c      	b.n	8017896 <_dtoa_r+0x636>
 8017a1c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8017a20:	42a3      	cmp	r3, r4
 8017a22:	bfbf      	itttt	lt
 8017a24:	1ae2      	sublt	r2, r4, r3
 8017a26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017a28:	189b      	addlt	r3, r3, r2
 8017a2a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8017a2c:	bfae      	itee	ge
 8017a2e:	1b1c      	subge	r4, r3, r4
 8017a30:	4623      	movlt	r3, r4
 8017a32:	2400      	movlt	r4, #0
 8017a34:	f1ba 0f00 	cmp.w	sl, #0
 8017a38:	bfb5      	itete	lt
 8017a3a:	9a05      	ldrlt	r2, [sp, #20]
 8017a3c:	9e05      	ldrge	r6, [sp, #20]
 8017a3e:	eba2 060a 	sublt.w	r6, r2, sl
 8017a42:	4652      	movge	r2, sl
 8017a44:	bfb8      	it	lt
 8017a46:	2200      	movlt	r2, #0
 8017a48:	e727      	b.n	801789a <_dtoa_r+0x63a>
 8017a4a:	9e05      	ldr	r6, [sp, #20]
 8017a4c:	9d08      	ldr	r5, [sp, #32]
 8017a4e:	461c      	mov	r4, r3
 8017a50:	e730      	b.n	80178b4 <_dtoa_r+0x654>
 8017a52:	461a      	mov	r2, r3
 8017a54:	e758      	b.n	8017908 <_dtoa_r+0x6a8>
 8017a56:	2300      	movs	r3, #0
 8017a58:	e786      	b.n	8017968 <_dtoa_r+0x708>
 8017a5a:	9b02      	ldr	r3, [sp, #8]
 8017a5c:	e784      	b.n	8017968 <_dtoa_r+0x708>
 8017a5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017a60:	e783      	b.n	801796a <_dtoa_r+0x70a>
 8017a62:	2300      	movs	r3, #0
 8017a64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017a66:	e784      	b.n	8017972 <_dtoa_r+0x712>
 8017a68:	d09d      	beq.n	80179a6 <_dtoa_r+0x746>
 8017a6a:	9b05      	ldr	r3, [sp, #20]
 8017a6c:	321c      	adds	r2, #28
 8017a6e:	4413      	add	r3, r2
 8017a70:	9305      	str	r3, [sp, #20]
 8017a72:	9b06      	ldr	r3, [sp, #24]
 8017a74:	4416      	add	r6, r2
 8017a76:	4413      	add	r3, r2
 8017a78:	e794      	b.n	80179a4 <_dtoa_r+0x744>
 8017a7a:	4602      	mov	r2, r0
 8017a7c:	e7f5      	b.n	8017a6a <_dtoa_r+0x80a>
 8017a7e:	f1ba 0f00 	cmp.w	sl, #0
 8017a82:	f8cd 8010 	str.w	r8, [sp, #16]
 8017a86:	46d3      	mov	fp, sl
 8017a88:	dc21      	bgt.n	8017ace <_dtoa_r+0x86e>
 8017a8a:	9b07      	ldr	r3, [sp, #28]
 8017a8c:	2b02      	cmp	r3, #2
 8017a8e:	dd1e      	ble.n	8017ace <_dtoa_r+0x86e>
 8017a90:	f1bb 0f00 	cmp.w	fp, #0
 8017a94:	f47f aeb7 	bne.w	8017806 <_dtoa_r+0x5a6>
 8017a98:	4621      	mov	r1, r4
 8017a9a:	465b      	mov	r3, fp
 8017a9c:	2205      	movs	r2, #5
 8017a9e:	4648      	mov	r0, r9
 8017aa0:	f000 fde2 	bl	8018668 <__multadd>
 8017aa4:	4601      	mov	r1, r0
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	9801      	ldr	r0, [sp, #4]
 8017aaa:	f001 f83f 	bl	8018b2c <__mcmp>
 8017aae:	2800      	cmp	r0, #0
 8017ab0:	f77f aea9 	ble.w	8017806 <_dtoa_r+0x5a6>
 8017ab4:	463e      	mov	r6, r7
 8017ab6:	2331      	movs	r3, #49	@ 0x31
 8017ab8:	f806 3b01 	strb.w	r3, [r6], #1
 8017abc:	9b04      	ldr	r3, [sp, #16]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	9304      	str	r3, [sp, #16]
 8017ac2:	e6a4      	b.n	801780e <_dtoa_r+0x5ae>
 8017ac4:	f8cd 8010 	str.w	r8, [sp, #16]
 8017ac8:	4654      	mov	r4, sl
 8017aca:	4625      	mov	r5, r4
 8017acc:	e7f2      	b.n	8017ab4 <_dtoa_r+0x854>
 8017ace:	9b08      	ldr	r3, [sp, #32]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 8103 	beq.w	8017cdc <_dtoa_r+0xa7c>
 8017ad6:	2e00      	cmp	r6, #0
 8017ad8:	dd05      	ble.n	8017ae6 <_dtoa_r+0x886>
 8017ada:	4629      	mov	r1, r5
 8017adc:	4632      	mov	r2, r6
 8017ade:	4648      	mov	r0, r9
 8017ae0:	f000 ffb8 	bl	8018a54 <__lshift>
 8017ae4:	4605      	mov	r5, r0
 8017ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d058      	beq.n	8017b9e <_dtoa_r+0x93e>
 8017aec:	6869      	ldr	r1, [r5, #4]
 8017aee:	4648      	mov	r0, r9
 8017af0:	f000 fd58 	bl	80185a4 <_Balloc>
 8017af4:	4606      	mov	r6, r0
 8017af6:	b928      	cbnz	r0, 8017b04 <_dtoa_r+0x8a4>
 8017af8:	4b82      	ldr	r3, [pc, #520]	@ (8017d04 <_dtoa_r+0xaa4>)
 8017afa:	4602      	mov	r2, r0
 8017afc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017b00:	f7ff bbc7 	b.w	8017292 <_dtoa_r+0x32>
 8017b04:	692a      	ldr	r2, [r5, #16]
 8017b06:	3202      	adds	r2, #2
 8017b08:	0092      	lsls	r2, r2, #2
 8017b0a:	f105 010c 	add.w	r1, r5, #12
 8017b0e:	300c      	adds	r0, #12
 8017b10:	f7ff fb05 	bl	801711e <memcpy>
 8017b14:	2201      	movs	r2, #1
 8017b16:	4631      	mov	r1, r6
 8017b18:	4648      	mov	r0, r9
 8017b1a:	f000 ff9b 	bl	8018a54 <__lshift>
 8017b1e:	1c7b      	adds	r3, r7, #1
 8017b20:	9305      	str	r3, [sp, #20]
 8017b22:	eb07 030b 	add.w	r3, r7, fp
 8017b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b28:	9b02      	ldr	r3, [sp, #8]
 8017b2a:	f003 0301 	and.w	r3, r3, #1
 8017b2e:	46a8      	mov	r8, r5
 8017b30:	9308      	str	r3, [sp, #32]
 8017b32:	4605      	mov	r5, r0
 8017b34:	9b05      	ldr	r3, [sp, #20]
 8017b36:	9801      	ldr	r0, [sp, #4]
 8017b38:	4621      	mov	r1, r4
 8017b3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8017b3e:	f7ff fb07 	bl	8017150 <quorem>
 8017b42:	4641      	mov	r1, r8
 8017b44:	9002      	str	r0, [sp, #8]
 8017b46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8017b4a:	9801      	ldr	r0, [sp, #4]
 8017b4c:	f000 ffee 	bl	8018b2c <__mcmp>
 8017b50:	462a      	mov	r2, r5
 8017b52:	9006      	str	r0, [sp, #24]
 8017b54:	4621      	mov	r1, r4
 8017b56:	4648      	mov	r0, r9
 8017b58:	f001 f804 	bl	8018b64 <__mdiff>
 8017b5c:	68c2      	ldr	r2, [r0, #12]
 8017b5e:	4606      	mov	r6, r0
 8017b60:	b9fa      	cbnz	r2, 8017ba2 <_dtoa_r+0x942>
 8017b62:	4601      	mov	r1, r0
 8017b64:	9801      	ldr	r0, [sp, #4]
 8017b66:	f000 ffe1 	bl	8018b2c <__mcmp>
 8017b6a:	4602      	mov	r2, r0
 8017b6c:	4631      	mov	r1, r6
 8017b6e:	4648      	mov	r0, r9
 8017b70:	920a      	str	r2, [sp, #40]	@ 0x28
 8017b72:	f000 fd57 	bl	8018624 <_Bfree>
 8017b76:	9b07      	ldr	r3, [sp, #28]
 8017b78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b7a:	9e05      	ldr	r6, [sp, #20]
 8017b7c:	ea43 0102 	orr.w	r1, r3, r2
 8017b80:	9b08      	ldr	r3, [sp, #32]
 8017b82:	4319      	orrs	r1, r3
 8017b84:	d10f      	bne.n	8017ba6 <_dtoa_r+0x946>
 8017b86:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017b8a:	d028      	beq.n	8017bde <_dtoa_r+0x97e>
 8017b8c:	9b06      	ldr	r3, [sp, #24]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	dd02      	ble.n	8017b98 <_dtoa_r+0x938>
 8017b92:	9b02      	ldr	r3, [sp, #8]
 8017b94:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8017b98:	f88b a000 	strb.w	sl, [fp]
 8017b9c:	e639      	b.n	8017812 <_dtoa_r+0x5b2>
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	e7bd      	b.n	8017b1e <_dtoa_r+0x8be>
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	e7e2      	b.n	8017b6c <_dtoa_r+0x90c>
 8017ba6:	9b06      	ldr	r3, [sp, #24]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	db04      	blt.n	8017bb6 <_dtoa_r+0x956>
 8017bac:	9907      	ldr	r1, [sp, #28]
 8017bae:	430b      	orrs	r3, r1
 8017bb0:	9908      	ldr	r1, [sp, #32]
 8017bb2:	430b      	orrs	r3, r1
 8017bb4:	d120      	bne.n	8017bf8 <_dtoa_r+0x998>
 8017bb6:	2a00      	cmp	r2, #0
 8017bb8:	ddee      	ble.n	8017b98 <_dtoa_r+0x938>
 8017bba:	9901      	ldr	r1, [sp, #4]
 8017bbc:	2201      	movs	r2, #1
 8017bbe:	4648      	mov	r0, r9
 8017bc0:	f000 ff48 	bl	8018a54 <__lshift>
 8017bc4:	4621      	mov	r1, r4
 8017bc6:	9001      	str	r0, [sp, #4]
 8017bc8:	f000 ffb0 	bl	8018b2c <__mcmp>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	dc03      	bgt.n	8017bd8 <_dtoa_r+0x978>
 8017bd0:	d1e2      	bne.n	8017b98 <_dtoa_r+0x938>
 8017bd2:	f01a 0f01 	tst.w	sl, #1
 8017bd6:	d0df      	beq.n	8017b98 <_dtoa_r+0x938>
 8017bd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017bdc:	d1d9      	bne.n	8017b92 <_dtoa_r+0x932>
 8017bde:	2339      	movs	r3, #57	@ 0x39
 8017be0:	f88b 3000 	strb.w	r3, [fp]
 8017be4:	4633      	mov	r3, r6
 8017be6:	461e      	mov	r6, r3
 8017be8:	3b01      	subs	r3, #1
 8017bea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017bee:	2a39      	cmp	r2, #57	@ 0x39
 8017bf0:	d053      	beq.n	8017c9a <_dtoa_r+0xa3a>
 8017bf2:	3201      	adds	r2, #1
 8017bf4:	701a      	strb	r2, [r3, #0]
 8017bf6:	e60c      	b.n	8017812 <_dtoa_r+0x5b2>
 8017bf8:	2a00      	cmp	r2, #0
 8017bfa:	dd07      	ble.n	8017c0c <_dtoa_r+0x9ac>
 8017bfc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017c00:	d0ed      	beq.n	8017bde <_dtoa_r+0x97e>
 8017c02:	f10a 0301 	add.w	r3, sl, #1
 8017c06:	f88b 3000 	strb.w	r3, [fp]
 8017c0a:	e602      	b.n	8017812 <_dtoa_r+0x5b2>
 8017c0c:	9b05      	ldr	r3, [sp, #20]
 8017c0e:	9a05      	ldr	r2, [sp, #20]
 8017c10:	f803 ac01 	strb.w	sl, [r3, #-1]
 8017c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c16:	4293      	cmp	r3, r2
 8017c18:	d029      	beq.n	8017c6e <_dtoa_r+0xa0e>
 8017c1a:	9901      	ldr	r1, [sp, #4]
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	220a      	movs	r2, #10
 8017c20:	4648      	mov	r0, r9
 8017c22:	f000 fd21 	bl	8018668 <__multadd>
 8017c26:	45a8      	cmp	r8, r5
 8017c28:	9001      	str	r0, [sp, #4]
 8017c2a:	f04f 0300 	mov.w	r3, #0
 8017c2e:	f04f 020a 	mov.w	r2, #10
 8017c32:	4641      	mov	r1, r8
 8017c34:	4648      	mov	r0, r9
 8017c36:	d107      	bne.n	8017c48 <_dtoa_r+0x9e8>
 8017c38:	f000 fd16 	bl	8018668 <__multadd>
 8017c3c:	4680      	mov	r8, r0
 8017c3e:	4605      	mov	r5, r0
 8017c40:	9b05      	ldr	r3, [sp, #20]
 8017c42:	3301      	adds	r3, #1
 8017c44:	9305      	str	r3, [sp, #20]
 8017c46:	e775      	b.n	8017b34 <_dtoa_r+0x8d4>
 8017c48:	f000 fd0e 	bl	8018668 <__multadd>
 8017c4c:	4629      	mov	r1, r5
 8017c4e:	4680      	mov	r8, r0
 8017c50:	2300      	movs	r3, #0
 8017c52:	220a      	movs	r2, #10
 8017c54:	4648      	mov	r0, r9
 8017c56:	f000 fd07 	bl	8018668 <__multadd>
 8017c5a:	4605      	mov	r5, r0
 8017c5c:	e7f0      	b.n	8017c40 <_dtoa_r+0x9e0>
 8017c5e:	f1bb 0f00 	cmp.w	fp, #0
 8017c62:	bfcc      	ite	gt
 8017c64:	465e      	movgt	r6, fp
 8017c66:	2601      	movle	r6, #1
 8017c68:	443e      	add	r6, r7
 8017c6a:	f04f 0800 	mov.w	r8, #0
 8017c6e:	9901      	ldr	r1, [sp, #4]
 8017c70:	2201      	movs	r2, #1
 8017c72:	4648      	mov	r0, r9
 8017c74:	f000 feee 	bl	8018a54 <__lshift>
 8017c78:	4621      	mov	r1, r4
 8017c7a:	9001      	str	r0, [sp, #4]
 8017c7c:	f000 ff56 	bl	8018b2c <__mcmp>
 8017c80:	2800      	cmp	r0, #0
 8017c82:	dcaf      	bgt.n	8017be4 <_dtoa_r+0x984>
 8017c84:	d102      	bne.n	8017c8c <_dtoa_r+0xa2c>
 8017c86:	f01a 0f01 	tst.w	sl, #1
 8017c8a:	d1ab      	bne.n	8017be4 <_dtoa_r+0x984>
 8017c8c:	4633      	mov	r3, r6
 8017c8e:	461e      	mov	r6, r3
 8017c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017c94:	2a30      	cmp	r2, #48	@ 0x30
 8017c96:	d0fa      	beq.n	8017c8e <_dtoa_r+0xa2e>
 8017c98:	e5bb      	b.n	8017812 <_dtoa_r+0x5b2>
 8017c9a:	429f      	cmp	r7, r3
 8017c9c:	d1a3      	bne.n	8017be6 <_dtoa_r+0x986>
 8017c9e:	9b04      	ldr	r3, [sp, #16]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	9304      	str	r3, [sp, #16]
 8017ca4:	2331      	movs	r3, #49	@ 0x31
 8017ca6:	703b      	strb	r3, [r7, #0]
 8017ca8:	e5b3      	b.n	8017812 <_dtoa_r+0x5b2>
 8017caa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017cac:	4f16      	ldr	r7, [pc, #88]	@ (8017d08 <_dtoa_r+0xaa8>)
 8017cae:	b11b      	cbz	r3, 8017cb8 <_dtoa_r+0xa58>
 8017cb0:	f107 0308 	add.w	r3, r7, #8
 8017cb4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8017cb6:	6013      	str	r3, [r2, #0]
 8017cb8:	4638      	mov	r0, r7
 8017cba:	b011      	add	sp, #68	@ 0x44
 8017cbc:	ecbd 8b02 	vpop	{d8}
 8017cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc4:	9b07      	ldr	r3, [sp, #28]
 8017cc6:	2b01      	cmp	r3, #1
 8017cc8:	f77f ae36 	ble.w	8017938 <_dtoa_r+0x6d8>
 8017ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017cd0:	2001      	movs	r0, #1
 8017cd2:	e656      	b.n	8017982 <_dtoa_r+0x722>
 8017cd4:	f1bb 0f00 	cmp.w	fp, #0
 8017cd8:	f77f aed7 	ble.w	8017a8a <_dtoa_r+0x82a>
 8017cdc:	463e      	mov	r6, r7
 8017cde:	9801      	ldr	r0, [sp, #4]
 8017ce0:	4621      	mov	r1, r4
 8017ce2:	f7ff fa35 	bl	8017150 <quorem>
 8017ce6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8017cea:	f806 ab01 	strb.w	sl, [r6], #1
 8017cee:	1bf2      	subs	r2, r6, r7
 8017cf0:	4593      	cmp	fp, r2
 8017cf2:	ddb4      	ble.n	8017c5e <_dtoa_r+0x9fe>
 8017cf4:	9901      	ldr	r1, [sp, #4]
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	220a      	movs	r2, #10
 8017cfa:	4648      	mov	r0, r9
 8017cfc:	f000 fcb4 	bl	8018668 <__multadd>
 8017d00:	9001      	str	r0, [sp, #4]
 8017d02:	e7ec      	b.n	8017cde <_dtoa_r+0xa7e>
 8017d04:	0801ad29 	.word	0x0801ad29
 8017d08:	0801acad 	.word	0x0801acad

08017d0c <_free_r>:
 8017d0c:	b538      	push	{r3, r4, r5, lr}
 8017d0e:	4605      	mov	r5, r0
 8017d10:	2900      	cmp	r1, #0
 8017d12:	d041      	beq.n	8017d98 <_free_r+0x8c>
 8017d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d18:	1f0c      	subs	r4, r1, #4
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	bfb8      	it	lt
 8017d1e:	18e4      	addlt	r4, r4, r3
 8017d20:	f000 fc34 	bl	801858c <__malloc_lock>
 8017d24:	4a1d      	ldr	r2, [pc, #116]	@ (8017d9c <_free_r+0x90>)
 8017d26:	6813      	ldr	r3, [r2, #0]
 8017d28:	b933      	cbnz	r3, 8017d38 <_free_r+0x2c>
 8017d2a:	6063      	str	r3, [r4, #4]
 8017d2c:	6014      	str	r4, [r2, #0]
 8017d2e:	4628      	mov	r0, r5
 8017d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d34:	f000 bc30 	b.w	8018598 <__malloc_unlock>
 8017d38:	42a3      	cmp	r3, r4
 8017d3a:	d908      	bls.n	8017d4e <_free_r+0x42>
 8017d3c:	6820      	ldr	r0, [r4, #0]
 8017d3e:	1821      	adds	r1, r4, r0
 8017d40:	428b      	cmp	r3, r1
 8017d42:	bf01      	itttt	eq
 8017d44:	6819      	ldreq	r1, [r3, #0]
 8017d46:	685b      	ldreq	r3, [r3, #4]
 8017d48:	1809      	addeq	r1, r1, r0
 8017d4a:	6021      	streq	r1, [r4, #0]
 8017d4c:	e7ed      	b.n	8017d2a <_free_r+0x1e>
 8017d4e:	461a      	mov	r2, r3
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	b10b      	cbz	r3, 8017d58 <_free_r+0x4c>
 8017d54:	42a3      	cmp	r3, r4
 8017d56:	d9fa      	bls.n	8017d4e <_free_r+0x42>
 8017d58:	6811      	ldr	r1, [r2, #0]
 8017d5a:	1850      	adds	r0, r2, r1
 8017d5c:	42a0      	cmp	r0, r4
 8017d5e:	d10b      	bne.n	8017d78 <_free_r+0x6c>
 8017d60:	6820      	ldr	r0, [r4, #0]
 8017d62:	4401      	add	r1, r0
 8017d64:	1850      	adds	r0, r2, r1
 8017d66:	4283      	cmp	r3, r0
 8017d68:	6011      	str	r1, [r2, #0]
 8017d6a:	d1e0      	bne.n	8017d2e <_free_r+0x22>
 8017d6c:	6818      	ldr	r0, [r3, #0]
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	6053      	str	r3, [r2, #4]
 8017d72:	4408      	add	r0, r1
 8017d74:	6010      	str	r0, [r2, #0]
 8017d76:	e7da      	b.n	8017d2e <_free_r+0x22>
 8017d78:	d902      	bls.n	8017d80 <_free_r+0x74>
 8017d7a:	230c      	movs	r3, #12
 8017d7c:	602b      	str	r3, [r5, #0]
 8017d7e:	e7d6      	b.n	8017d2e <_free_r+0x22>
 8017d80:	6820      	ldr	r0, [r4, #0]
 8017d82:	1821      	adds	r1, r4, r0
 8017d84:	428b      	cmp	r3, r1
 8017d86:	bf04      	itt	eq
 8017d88:	6819      	ldreq	r1, [r3, #0]
 8017d8a:	685b      	ldreq	r3, [r3, #4]
 8017d8c:	6063      	str	r3, [r4, #4]
 8017d8e:	bf04      	itt	eq
 8017d90:	1809      	addeq	r1, r1, r0
 8017d92:	6021      	streq	r1, [r4, #0]
 8017d94:	6054      	str	r4, [r2, #4]
 8017d96:	e7ca      	b.n	8017d2e <_free_r+0x22>
 8017d98:	bd38      	pop	{r3, r4, r5, pc}
 8017d9a:	bf00      	nop
 8017d9c:	24006240 	.word	0x24006240

08017da0 <rshift>:
 8017da0:	6903      	ldr	r3, [r0, #16]
 8017da2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017da6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017daa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017dae:	f100 0414 	add.w	r4, r0, #20
 8017db2:	dd45      	ble.n	8017e40 <rshift+0xa0>
 8017db4:	f011 011f 	ands.w	r1, r1, #31
 8017db8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017dbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017dc0:	d10c      	bne.n	8017ddc <rshift+0x3c>
 8017dc2:	f100 0710 	add.w	r7, r0, #16
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	42b1      	cmp	r1, r6
 8017dca:	d334      	bcc.n	8017e36 <rshift+0x96>
 8017dcc:	1a9b      	subs	r3, r3, r2
 8017dce:	009b      	lsls	r3, r3, #2
 8017dd0:	1eea      	subs	r2, r5, #3
 8017dd2:	4296      	cmp	r6, r2
 8017dd4:	bf38      	it	cc
 8017dd6:	2300      	movcc	r3, #0
 8017dd8:	4423      	add	r3, r4
 8017dda:	e015      	b.n	8017e08 <rshift+0x68>
 8017ddc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017de0:	f1c1 0820 	rsb	r8, r1, #32
 8017de4:	40cf      	lsrs	r7, r1
 8017de6:	f105 0e04 	add.w	lr, r5, #4
 8017dea:	46a1      	mov	r9, r4
 8017dec:	4576      	cmp	r6, lr
 8017dee:	46f4      	mov	ip, lr
 8017df0:	d815      	bhi.n	8017e1e <rshift+0x7e>
 8017df2:	1a9a      	subs	r2, r3, r2
 8017df4:	0092      	lsls	r2, r2, #2
 8017df6:	3a04      	subs	r2, #4
 8017df8:	3501      	adds	r5, #1
 8017dfa:	42ae      	cmp	r6, r5
 8017dfc:	bf38      	it	cc
 8017dfe:	2200      	movcc	r2, #0
 8017e00:	18a3      	adds	r3, r4, r2
 8017e02:	50a7      	str	r7, [r4, r2]
 8017e04:	b107      	cbz	r7, 8017e08 <rshift+0x68>
 8017e06:	3304      	adds	r3, #4
 8017e08:	1b1a      	subs	r2, r3, r4
 8017e0a:	42a3      	cmp	r3, r4
 8017e0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e10:	bf08      	it	eq
 8017e12:	2300      	moveq	r3, #0
 8017e14:	6102      	str	r2, [r0, #16]
 8017e16:	bf08      	it	eq
 8017e18:	6143      	streq	r3, [r0, #20]
 8017e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e1e:	f8dc c000 	ldr.w	ip, [ip]
 8017e22:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e26:	ea4c 0707 	orr.w	r7, ip, r7
 8017e2a:	f849 7b04 	str.w	r7, [r9], #4
 8017e2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e32:	40cf      	lsrs	r7, r1
 8017e34:	e7da      	b.n	8017dec <rshift+0x4c>
 8017e36:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e3a:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e3e:	e7c3      	b.n	8017dc8 <rshift+0x28>
 8017e40:	4623      	mov	r3, r4
 8017e42:	e7e1      	b.n	8017e08 <rshift+0x68>

08017e44 <__hexdig_fun>:
 8017e44:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017e48:	2b09      	cmp	r3, #9
 8017e4a:	d802      	bhi.n	8017e52 <__hexdig_fun+0xe>
 8017e4c:	3820      	subs	r0, #32
 8017e4e:	b2c0      	uxtb	r0, r0
 8017e50:	4770      	bx	lr
 8017e52:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017e56:	2b05      	cmp	r3, #5
 8017e58:	d801      	bhi.n	8017e5e <__hexdig_fun+0x1a>
 8017e5a:	3847      	subs	r0, #71	@ 0x47
 8017e5c:	e7f7      	b.n	8017e4e <__hexdig_fun+0xa>
 8017e5e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017e62:	2b05      	cmp	r3, #5
 8017e64:	d801      	bhi.n	8017e6a <__hexdig_fun+0x26>
 8017e66:	3827      	subs	r0, #39	@ 0x27
 8017e68:	e7f1      	b.n	8017e4e <__hexdig_fun+0xa>
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	4770      	bx	lr
	...

08017e70 <__gethex>:
 8017e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e74:	b085      	sub	sp, #20
 8017e76:	468a      	mov	sl, r1
 8017e78:	9302      	str	r3, [sp, #8]
 8017e7a:	680b      	ldr	r3, [r1, #0]
 8017e7c:	9001      	str	r0, [sp, #4]
 8017e7e:	4690      	mov	r8, r2
 8017e80:	1c9c      	adds	r4, r3, #2
 8017e82:	46a1      	mov	r9, r4
 8017e84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017e88:	2830      	cmp	r0, #48	@ 0x30
 8017e8a:	d0fa      	beq.n	8017e82 <__gethex+0x12>
 8017e8c:	eba9 0303 	sub.w	r3, r9, r3
 8017e90:	f1a3 0b02 	sub.w	fp, r3, #2
 8017e94:	f7ff ffd6 	bl	8017e44 <__hexdig_fun>
 8017e98:	4605      	mov	r5, r0
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d168      	bne.n	8017f70 <__gethex+0x100>
 8017e9e:	49a0      	ldr	r1, [pc, #640]	@ (8018120 <__gethex+0x2b0>)
 8017ea0:	2201      	movs	r2, #1
 8017ea2:	4648      	mov	r0, r9
 8017ea4:	f7ff f8b2 	bl	801700c <strncmp>
 8017ea8:	4607      	mov	r7, r0
 8017eaa:	2800      	cmp	r0, #0
 8017eac:	d167      	bne.n	8017f7e <__gethex+0x10e>
 8017eae:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017eb2:	4626      	mov	r6, r4
 8017eb4:	f7ff ffc6 	bl	8017e44 <__hexdig_fun>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d062      	beq.n	8017f82 <__gethex+0x112>
 8017ebc:	4623      	mov	r3, r4
 8017ebe:	7818      	ldrb	r0, [r3, #0]
 8017ec0:	2830      	cmp	r0, #48	@ 0x30
 8017ec2:	4699      	mov	r9, r3
 8017ec4:	f103 0301 	add.w	r3, r3, #1
 8017ec8:	d0f9      	beq.n	8017ebe <__gethex+0x4e>
 8017eca:	f7ff ffbb 	bl	8017e44 <__hexdig_fun>
 8017ece:	fab0 f580 	clz	r5, r0
 8017ed2:	096d      	lsrs	r5, r5, #5
 8017ed4:	f04f 0b01 	mov.w	fp, #1
 8017ed8:	464a      	mov	r2, r9
 8017eda:	4616      	mov	r6, r2
 8017edc:	3201      	adds	r2, #1
 8017ede:	7830      	ldrb	r0, [r6, #0]
 8017ee0:	f7ff ffb0 	bl	8017e44 <__hexdig_fun>
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	d1f8      	bne.n	8017eda <__gethex+0x6a>
 8017ee8:	498d      	ldr	r1, [pc, #564]	@ (8018120 <__gethex+0x2b0>)
 8017eea:	2201      	movs	r2, #1
 8017eec:	4630      	mov	r0, r6
 8017eee:	f7ff f88d 	bl	801700c <strncmp>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d13f      	bne.n	8017f76 <__gethex+0x106>
 8017ef6:	b944      	cbnz	r4, 8017f0a <__gethex+0x9a>
 8017ef8:	1c74      	adds	r4, r6, #1
 8017efa:	4622      	mov	r2, r4
 8017efc:	4616      	mov	r6, r2
 8017efe:	3201      	adds	r2, #1
 8017f00:	7830      	ldrb	r0, [r6, #0]
 8017f02:	f7ff ff9f 	bl	8017e44 <__hexdig_fun>
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d1f8      	bne.n	8017efc <__gethex+0x8c>
 8017f0a:	1ba4      	subs	r4, r4, r6
 8017f0c:	00a7      	lsls	r7, r4, #2
 8017f0e:	7833      	ldrb	r3, [r6, #0]
 8017f10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017f14:	2b50      	cmp	r3, #80	@ 0x50
 8017f16:	d13e      	bne.n	8017f96 <__gethex+0x126>
 8017f18:	7873      	ldrb	r3, [r6, #1]
 8017f1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8017f1c:	d033      	beq.n	8017f86 <__gethex+0x116>
 8017f1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8017f20:	d034      	beq.n	8017f8c <__gethex+0x11c>
 8017f22:	1c71      	adds	r1, r6, #1
 8017f24:	2400      	movs	r4, #0
 8017f26:	7808      	ldrb	r0, [r1, #0]
 8017f28:	f7ff ff8c 	bl	8017e44 <__hexdig_fun>
 8017f2c:	1e43      	subs	r3, r0, #1
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	2b18      	cmp	r3, #24
 8017f32:	d830      	bhi.n	8017f96 <__gethex+0x126>
 8017f34:	f1a0 0210 	sub.w	r2, r0, #16
 8017f38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f3c:	f7ff ff82 	bl	8017e44 <__hexdig_fun>
 8017f40:	f100 3cff 	add.w	ip, r0, #4294967295
 8017f44:	fa5f fc8c 	uxtb.w	ip, ip
 8017f48:	f1bc 0f18 	cmp.w	ip, #24
 8017f4c:	f04f 030a 	mov.w	r3, #10
 8017f50:	d91e      	bls.n	8017f90 <__gethex+0x120>
 8017f52:	b104      	cbz	r4, 8017f56 <__gethex+0xe6>
 8017f54:	4252      	negs	r2, r2
 8017f56:	4417      	add	r7, r2
 8017f58:	f8ca 1000 	str.w	r1, [sl]
 8017f5c:	b1ed      	cbz	r5, 8017f9a <__gethex+0x12a>
 8017f5e:	f1bb 0f00 	cmp.w	fp, #0
 8017f62:	bf0c      	ite	eq
 8017f64:	2506      	moveq	r5, #6
 8017f66:	2500      	movne	r5, #0
 8017f68:	4628      	mov	r0, r5
 8017f6a:	b005      	add	sp, #20
 8017f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f70:	2500      	movs	r5, #0
 8017f72:	462c      	mov	r4, r5
 8017f74:	e7b0      	b.n	8017ed8 <__gethex+0x68>
 8017f76:	2c00      	cmp	r4, #0
 8017f78:	d1c7      	bne.n	8017f0a <__gethex+0x9a>
 8017f7a:	4627      	mov	r7, r4
 8017f7c:	e7c7      	b.n	8017f0e <__gethex+0x9e>
 8017f7e:	464e      	mov	r6, r9
 8017f80:	462f      	mov	r7, r5
 8017f82:	2501      	movs	r5, #1
 8017f84:	e7c3      	b.n	8017f0e <__gethex+0x9e>
 8017f86:	2400      	movs	r4, #0
 8017f88:	1cb1      	adds	r1, r6, #2
 8017f8a:	e7cc      	b.n	8017f26 <__gethex+0xb6>
 8017f8c:	2401      	movs	r4, #1
 8017f8e:	e7fb      	b.n	8017f88 <__gethex+0x118>
 8017f90:	fb03 0002 	mla	r0, r3, r2, r0
 8017f94:	e7ce      	b.n	8017f34 <__gethex+0xc4>
 8017f96:	4631      	mov	r1, r6
 8017f98:	e7de      	b.n	8017f58 <__gethex+0xe8>
 8017f9a:	eba6 0309 	sub.w	r3, r6, r9
 8017f9e:	3b01      	subs	r3, #1
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	2b07      	cmp	r3, #7
 8017fa4:	dc0a      	bgt.n	8017fbc <__gethex+0x14c>
 8017fa6:	9801      	ldr	r0, [sp, #4]
 8017fa8:	f000 fafc 	bl	80185a4 <_Balloc>
 8017fac:	4604      	mov	r4, r0
 8017fae:	b940      	cbnz	r0, 8017fc2 <__gethex+0x152>
 8017fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8018124 <__gethex+0x2b4>)
 8017fb2:	4602      	mov	r2, r0
 8017fb4:	21e4      	movs	r1, #228	@ 0xe4
 8017fb6:	485c      	ldr	r0, [pc, #368]	@ (8018128 <__gethex+0x2b8>)
 8017fb8:	f001 f9de 	bl	8019378 <__assert_func>
 8017fbc:	3101      	adds	r1, #1
 8017fbe:	105b      	asrs	r3, r3, #1
 8017fc0:	e7ef      	b.n	8017fa2 <__gethex+0x132>
 8017fc2:	f100 0a14 	add.w	sl, r0, #20
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	4655      	mov	r5, sl
 8017fca:	469b      	mov	fp, r3
 8017fcc:	45b1      	cmp	r9, r6
 8017fce:	d337      	bcc.n	8018040 <__gethex+0x1d0>
 8017fd0:	f845 bb04 	str.w	fp, [r5], #4
 8017fd4:	eba5 050a 	sub.w	r5, r5, sl
 8017fd8:	10ad      	asrs	r5, r5, #2
 8017fda:	6125      	str	r5, [r4, #16]
 8017fdc:	4658      	mov	r0, fp
 8017fde:	f000 fbd3 	bl	8018788 <__hi0bits>
 8017fe2:	016d      	lsls	r5, r5, #5
 8017fe4:	f8d8 6000 	ldr.w	r6, [r8]
 8017fe8:	1a2d      	subs	r5, r5, r0
 8017fea:	42b5      	cmp	r5, r6
 8017fec:	dd54      	ble.n	8018098 <__gethex+0x228>
 8017fee:	1bad      	subs	r5, r5, r6
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	f000 ff64 	bl	8018ec0 <__any_on>
 8017ff8:	4681      	mov	r9, r0
 8017ffa:	b178      	cbz	r0, 801801c <__gethex+0x1ac>
 8017ffc:	1e6b      	subs	r3, r5, #1
 8017ffe:	1159      	asrs	r1, r3, #5
 8018000:	f003 021f 	and.w	r2, r3, #31
 8018004:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018008:	f04f 0901 	mov.w	r9, #1
 801800c:	fa09 f202 	lsl.w	r2, r9, r2
 8018010:	420a      	tst	r2, r1
 8018012:	d003      	beq.n	801801c <__gethex+0x1ac>
 8018014:	454b      	cmp	r3, r9
 8018016:	dc36      	bgt.n	8018086 <__gethex+0x216>
 8018018:	f04f 0902 	mov.w	r9, #2
 801801c:	4629      	mov	r1, r5
 801801e:	4620      	mov	r0, r4
 8018020:	f7ff febe 	bl	8017da0 <rshift>
 8018024:	442f      	add	r7, r5
 8018026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801802a:	42bb      	cmp	r3, r7
 801802c:	da42      	bge.n	80180b4 <__gethex+0x244>
 801802e:	9801      	ldr	r0, [sp, #4]
 8018030:	4621      	mov	r1, r4
 8018032:	f000 faf7 	bl	8018624 <_Bfree>
 8018036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018038:	2300      	movs	r3, #0
 801803a:	6013      	str	r3, [r2, #0]
 801803c:	25a3      	movs	r5, #163	@ 0xa3
 801803e:	e793      	b.n	8017f68 <__gethex+0xf8>
 8018040:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018044:	2a2e      	cmp	r2, #46	@ 0x2e
 8018046:	d012      	beq.n	801806e <__gethex+0x1fe>
 8018048:	2b20      	cmp	r3, #32
 801804a:	d104      	bne.n	8018056 <__gethex+0x1e6>
 801804c:	f845 bb04 	str.w	fp, [r5], #4
 8018050:	f04f 0b00 	mov.w	fp, #0
 8018054:	465b      	mov	r3, fp
 8018056:	7830      	ldrb	r0, [r6, #0]
 8018058:	9303      	str	r3, [sp, #12]
 801805a:	f7ff fef3 	bl	8017e44 <__hexdig_fun>
 801805e:	9b03      	ldr	r3, [sp, #12]
 8018060:	f000 000f 	and.w	r0, r0, #15
 8018064:	4098      	lsls	r0, r3
 8018066:	ea4b 0b00 	orr.w	fp, fp, r0
 801806a:	3304      	adds	r3, #4
 801806c:	e7ae      	b.n	8017fcc <__gethex+0x15c>
 801806e:	45b1      	cmp	r9, r6
 8018070:	d8ea      	bhi.n	8018048 <__gethex+0x1d8>
 8018072:	492b      	ldr	r1, [pc, #172]	@ (8018120 <__gethex+0x2b0>)
 8018074:	9303      	str	r3, [sp, #12]
 8018076:	2201      	movs	r2, #1
 8018078:	4630      	mov	r0, r6
 801807a:	f7fe ffc7 	bl	801700c <strncmp>
 801807e:	9b03      	ldr	r3, [sp, #12]
 8018080:	2800      	cmp	r0, #0
 8018082:	d1e1      	bne.n	8018048 <__gethex+0x1d8>
 8018084:	e7a2      	b.n	8017fcc <__gethex+0x15c>
 8018086:	1ea9      	subs	r1, r5, #2
 8018088:	4620      	mov	r0, r4
 801808a:	f000 ff19 	bl	8018ec0 <__any_on>
 801808e:	2800      	cmp	r0, #0
 8018090:	d0c2      	beq.n	8018018 <__gethex+0x1a8>
 8018092:	f04f 0903 	mov.w	r9, #3
 8018096:	e7c1      	b.n	801801c <__gethex+0x1ac>
 8018098:	da09      	bge.n	80180ae <__gethex+0x23e>
 801809a:	1b75      	subs	r5, r6, r5
 801809c:	4621      	mov	r1, r4
 801809e:	9801      	ldr	r0, [sp, #4]
 80180a0:	462a      	mov	r2, r5
 80180a2:	f000 fcd7 	bl	8018a54 <__lshift>
 80180a6:	1b7f      	subs	r7, r7, r5
 80180a8:	4604      	mov	r4, r0
 80180aa:	f100 0a14 	add.w	sl, r0, #20
 80180ae:	f04f 0900 	mov.w	r9, #0
 80180b2:	e7b8      	b.n	8018026 <__gethex+0x1b6>
 80180b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80180b8:	42bd      	cmp	r5, r7
 80180ba:	dd6f      	ble.n	801819c <__gethex+0x32c>
 80180bc:	1bed      	subs	r5, r5, r7
 80180be:	42ae      	cmp	r6, r5
 80180c0:	dc34      	bgt.n	801812c <__gethex+0x2bc>
 80180c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80180c6:	2b02      	cmp	r3, #2
 80180c8:	d022      	beq.n	8018110 <__gethex+0x2a0>
 80180ca:	2b03      	cmp	r3, #3
 80180cc:	d024      	beq.n	8018118 <__gethex+0x2a8>
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d115      	bne.n	80180fe <__gethex+0x28e>
 80180d2:	42ae      	cmp	r6, r5
 80180d4:	d113      	bne.n	80180fe <__gethex+0x28e>
 80180d6:	2e01      	cmp	r6, #1
 80180d8:	d10b      	bne.n	80180f2 <__gethex+0x282>
 80180da:	9a02      	ldr	r2, [sp, #8]
 80180dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80180e0:	6013      	str	r3, [r2, #0]
 80180e2:	2301      	movs	r3, #1
 80180e4:	6123      	str	r3, [r4, #16]
 80180e6:	f8ca 3000 	str.w	r3, [sl]
 80180ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180ec:	2562      	movs	r5, #98	@ 0x62
 80180ee:	601c      	str	r4, [r3, #0]
 80180f0:	e73a      	b.n	8017f68 <__gethex+0xf8>
 80180f2:	1e71      	subs	r1, r6, #1
 80180f4:	4620      	mov	r0, r4
 80180f6:	f000 fee3 	bl	8018ec0 <__any_on>
 80180fa:	2800      	cmp	r0, #0
 80180fc:	d1ed      	bne.n	80180da <__gethex+0x26a>
 80180fe:	9801      	ldr	r0, [sp, #4]
 8018100:	4621      	mov	r1, r4
 8018102:	f000 fa8f 	bl	8018624 <_Bfree>
 8018106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018108:	2300      	movs	r3, #0
 801810a:	6013      	str	r3, [r2, #0]
 801810c:	2550      	movs	r5, #80	@ 0x50
 801810e:	e72b      	b.n	8017f68 <__gethex+0xf8>
 8018110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018112:	2b00      	cmp	r3, #0
 8018114:	d1f3      	bne.n	80180fe <__gethex+0x28e>
 8018116:	e7e0      	b.n	80180da <__gethex+0x26a>
 8018118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801811a:	2b00      	cmp	r3, #0
 801811c:	d1dd      	bne.n	80180da <__gethex+0x26a>
 801811e:	e7ee      	b.n	80180fe <__gethex+0x28e>
 8018120:	0801ab18 	.word	0x0801ab18
 8018124:	0801ad29 	.word	0x0801ad29
 8018128:	0801ad3a 	.word	0x0801ad3a
 801812c:	1e6f      	subs	r7, r5, #1
 801812e:	f1b9 0f00 	cmp.w	r9, #0
 8018132:	d130      	bne.n	8018196 <__gethex+0x326>
 8018134:	b127      	cbz	r7, 8018140 <__gethex+0x2d0>
 8018136:	4639      	mov	r1, r7
 8018138:	4620      	mov	r0, r4
 801813a:	f000 fec1 	bl	8018ec0 <__any_on>
 801813e:	4681      	mov	r9, r0
 8018140:	117a      	asrs	r2, r7, #5
 8018142:	2301      	movs	r3, #1
 8018144:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018148:	f007 071f 	and.w	r7, r7, #31
 801814c:	40bb      	lsls	r3, r7
 801814e:	4213      	tst	r3, r2
 8018150:	4629      	mov	r1, r5
 8018152:	4620      	mov	r0, r4
 8018154:	bf18      	it	ne
 8018156:	f049 0902 	orrne.w	r9, r9, #2
 801815a:	f7ff fe21 	bl	8017da0 <rshift>
 801815e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018162:	1b76      	subs	r6, r6, r5
 8018164:	2502      	movs	r5, #2
 8018166:	f1b9 0f00 	cmp.w	r9, #0
 801816a:	d047      	beq.n	80181fc <__gethex+0x38c>
 801816c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018170:	2b02      	cmp	r3, #2
 8018172:	d015      	beq.n	80181a0 <__gethex+0x330>
 8018174:	2b03      	cmp	r3, #3
 8018176:	d017      	beq.n	80181a8 <__gethex+0x338>
 8018178:	2b01      	cmp	r3, #1
 801817a:	d109      	bne.n	8018190 <__gethex+0x320>
 801817c:	f019 0f02 	tst.w	r9, #2
 8018180:	d006      	beq.n	8018190 <__gethex+0x320>
 8018182:	f8da 3000 	ldr.w	r3, [sl]
 8018186:	ea49 0903 	orr.w	r9, r9, r3
 801818a:	f019 0f01 	tst.w	r9, #1
 801818e:	d10e      	bne.n	80181ae <__gethex+0x33e>
 8018190:	f045 0510 	orr.w	r5, r5, #16
 8018194:	e032      	b.n	80181fc <__gethex+0x38c>
 8018196:	f04f 0901 	mov.w	r9, #1
 801819a:	e7d1      	b.n	8018140 <__gethex+0x2d0>
 801819c:	2501      	movs	r5, #1
 801819e:	e7e2      	b.n	8018166 <__gethex+0x2f6>
 80181a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181a2:	f1c3 0301 	rsb	r3, r3, #1
 80181a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d0f0      	beq.n	8018190 <__gethex+0x320>
 80181ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80181b2:	f104 0314 	add.w	r3, r4, #20
 80181b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80181ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80181be:	f04f 0c00 	mov.w	ip, #0
 80181c2:	4618      	mov	r0, r3
 80181c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80181c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80181cc:	d01b      	beq.n	8018206 <__gethex+0x396>
 80181ce:	3201      	adds	r2, #1
 80181d0:	6002      	str	r2, [r0, #0]
 80181d2:	2d02      	cmp	r5, #2
 80181d4:	f104 0314 	add.w	r3, r4, #20
 80181d8:	d13c      	bne.n	8018254 <__gethex+0x3e4>
 80181da:	f8d8 2000 	ldr.w	r2, [r8]
 80181de:	3a01      	subs	r2, #1
 80181e0:	42b2      	cmp	r2, r6
 80181e2:	d109      	bne.n	80181f8 <__gethex+0x388>
 80181e4:	1171      	asrs	r1, r6, #5
 80181e6:	2201      	movs	r2, #1
 80181e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80181ec:	f006 061f 	and.w	r6, r6, #31
 80181f0:	fa02 f606 	lsl.w	r6, r2, r6
 80181f4:	421e      	tst	r6, r3
 80181f6:	d13a      	bne.n	801826e <__gethex+0x3fe>
 80181f8:	f045 0520 	orr.w	r5, r5, #32
 80181fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181fe:	601c      	str	r4, [r3, #0]
 8018200:	9b02      	ldr	r3, [sp, #8]
 8018202:	601f      	str	r7, [r3, #0]
 8018204:	e6b0      	b.n	8017f68 <__gethex+0xf8>
 8018206:	4299      	cmp	r1, r3
 8018208:	f843 cc04 	str.w	ip, [r3, #-4]
 801820c:	d8d9      	bhi.n	80181c2 <__gethex+0x352>
 801820e:	68a3      	ldr	r3, [r4, #8]
 8018210:	459b      	cmp	fp, r3
 8018212:	db17      	blt.n	8018244 <__gethex+0x3d4>
 8018214:	6861      	ldr	r1, [r4, #4]
 8018216:	9801      	ldr	r0, [sp, #4]
 8018218:	3101      	adds	r1, #1
 801821a:	f000 f9c3 	bl	80185a4 <_Balloc>
 801821e:	4681      	mov	r9, r0
 8018220:	b918      	cbnz	r0, 801822a <__gethex+0x3ba>
 8018222:	4b1a      	ldr	r3, [pc, #104]	@ (801828c <__gethex+0x41c>)
 8018224:	4602      	mov	r2, r0
 8018226:	2184      	movs	r1, #132	@ 0x84
 8018228:	e6c5      	b.n	8017fb6 <__gethex+0x146>
 801822a:	6922      	ldr	r2, [r4, #16]
 801822c:	3202      	adds	r2, #2
 801822e:	f104 010c 	add.w	r1, r4, #12
 8018232:	0092      	lsls	r2, r2, #2
 8018234:	300c      	adds	r0, #12
 8018236:	f7fe ff72 	bl	801711e <memcpy>
 801823a:	4621      	mov	r1, r4
 801823c:	9801      	ldr	r0, [sp, #4]
 801823e:	f000 f9f1 	bl	8018624 <_Bfree>
 8018242:	464c      	mov	r4, r9
 8018244:	6923      	ldr	r3, [r4, #16]
 8018246:	1c5a      	adds	r2, r3, #1
 8018248:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801824c:	6122      	str	r2, [r4, #16]
 801824e:	2201      	movs	r2, #1
 8018250:	615a      	str	r2, [r3, #20]
 8018252:	e7be      	b.n	80181d2 <__gethex+0x362>
 8018254:	6922      	ldr	r2, [r4, #16]
 8018256:	455a      	cmp	r2, fp
 8018258:	dd0b      	ble.n	8018272 <__gethex+0x402>
 801825a:	2101      	movs	r1, #1
 801825c:	4620      	mov	r0, r4
 801825e:	f7ff fd9f 	bl	8017da0 <rshift>
 8018262:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018266:	3701      	adds	r7, #1
 8018268:	42bb      	cmp	r3, r7
 801826a:	f6ff aee0 	blt.w	801802e <__gethex+0x1be>
 801826e:	2501      	movs	r5, #1
 8018270:	e7c2      	b.n	80181f8 <__gethex+0x388>
 8018272:	f016 061f 	ands.w	r6, r6, #31
 8018276:	d0fa      	beq.n	801826e <__gethex+0x3fe>
 8018278:	4453      	add	r3, sl
 801827a:	f1c6 0620 	rsb	r6, r6, #32
 801827e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018282:	f000 fa81 	bl	8018788 <__hi0bits>
 8018286:	42b0      	cmp	r0, r6
 8018288:	dbe7      	blt.n	801825a <__gethex+0x3ea>
 801828a:	e7f0      	b.n	801826e <__gethex+0x3fe>
 801828c:	0801ad29 	.word	0x0801ad29

08018290 <L_shift>:
 8018290:	f1c2 0208 	rsb	r2, r2, #8
 8018294:	0092      	lsls	r2, r2, #2
 8018296:	b570      	push	{r4, r5, r6, lr}
 8018298:	f1c2 0620 	rsb	r6, r2, #32
 801829c:	6843      	ldr	r3, [r0, #4]
 801829e:	6804      	ldr	r4, [r0, #0]
 80182a0:	fa03 f506 	lsl.w	r5, r3, r6
 80182a4:	432c      	orrs	r4, r5
 80182a6:	40d3      	lsrs	r3, r2
 80182a8:	6004      	str	r4, [r0, #0]
 80182aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80182ae:	4288      	cmp	r0, r1
 80182b0:	d3f4      	bcc.n	801829c <L_shift+0xc>
 80182b2:	bd70      	pop	{r4, r5, r6, pc}

080182b4 <__match>:
 80182b4:	b530      	push	{r4, r5, lr}
 80182b6:	6803      	ldr	r3, [r0, #0]
 80182b8:	3301      	adds	r3, #1
 80182ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182be:	b914      	cbnz	r4, 80182c6 <__match+0x12>
 80182c0:	6003      	str	r3, [r0, #0]
 80182c2:	2001      	movs	r0, #1
 80182c4:	bd30      	pop	{r4, r5, pc}
 80182c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80182ce:	2d19      	cmp	r5, #25
 80182d0:	bf98      	it	ls
 80182d2:	3220      	addls	r2, #32
 80182d4:	42a2      	cmp	r2, r4
 80182d6:	d0f0      	beq.n	80182ba <__match+0x6>
 80182d8:	2000      	movs	r0, #0
 80182da:	e7f3      	b.n	80182c4 <__match+0x10>

080182dc <__hexnan>:
 80182dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182e0:	680b      	ldr	r3, [r1, #0]
 80182e2:	6801      	ldr	r1, [r0, #0]
 80182e4:	115e      	asrs	r6, r3, #5
 80182e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80182ea:	f013 031f 	ands.w	r3, r3, #31
 80182ee:	b087      	sub	sp, #28
 80182f0:	bf18      	it	ne
 80182f2:	3604      	addne	r6, #4
 80182f4:	2500      	movs	r5, #0
 80182f6:	1f37      	subs	r7, r6, #4
 80182f8:	4682      	mov	sl, r0
 80182fa:	4690      	mov	r8, r2
 80182fc:	9301      	str	r3, [sp, #4]
 80182fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8018302:	46b9      	mov	r9, r7
 8018304:	463c      	mov	r4, r7
 8018306:	9502      	str	r5, [sp, #8]
 8018308:	46ab      	mov	fp, r5
 801830a:	784a      	ldrb	r2, [r1, #1]
 801830c:	1c4b      	adds	r3, r1, #1
 801830e:	9303      	str	r3, [sp, #12]
 8018310:	b342      	cbz	r2, 8018364 <__hexnan+0x88>
 8018312:	4610      	mov	r0, r2
 8018314:	9105      	str	r1, [sp, #20]
 8018316:	9204      	str	r2, [sp, #16]
 8018318:	f7ff fd94 	bl	8017e44 <__hexdig_fun>
 801831c:	2800      	cmp	r0, #0
 801831e:	d151      	bne.n	80183c4 <__hexnan+0xe8>
 8018320:	9a04      	ldr	r2, [sp, #16]
 8018322:	9905      	ldr	r1, [sp, #20]
 8018324:	2a20      	cmp	r2, #32
 8018326:	d818      	bhi.n	801835a <__hexnan+0x7e>
 8018328:	9b02      	ldr	r3, [sp, #8]
 801832a:	459b      	cmp	fp, r3
 801832c:	dd13      	ble.n	8018356 <__hexnan+0x7a>
 801832e:	454c      	cmp	r4, r9
 8018330:	d206      	bcs.n	8018340 <__hexnan+0x64>
 8018332:	2d07      	cmp	r5, #7
 8018334:	dc04      	bgt.n	8018340 <__hexnan+0x64>
 8018336:	462a      	mov	r2, r5
 8018338:	4649      	mov	r1, r9
 801833a:	4620      	mov	r0, r4
 801833c:	f7ff ffa8 	bl	8018290 <L_shift>
 8018340:	4544      	cmp	r4, r8
 8018342:	d952      	bls.n	80183ea <__hexnan+0x10e>
 8018344:	2300      	movs	r3, #0
 8018346:	f1a4 0904 	sub.w	r9, r4, #4
 801834a:	f844 3c04 	str.w	r3, [r4, #-4]
 801834e:	f8cd b008 	str.w	fp, [sp, #8]
 8018352:	464c      	mov	r4, r9
 8018354:	461d      	mov	r5, r3
 8018356:	9903      	ldr	r1, [sp, #12]
 8018358:	e7d7      	b.n	801830a <__hexnan+0x2e>
 801835a:	2a29      	cmp	r2, #41	@ 0x29
 801835c:	d157      	bne.n	801840e <__hexnan+0x132>
 801835e:	3102      	adds	r1, #2
 8018360:	f8ca 1000 	str.w	r1, [sl]
 8018364:	f1bb 0f00 	cmp.w	fp, #0
 8018368:	d051      	beq.n	801840e <__hexnan+0x132>
 801836a:	454c      	cmp	r4, r9
 801836c:	d206      	bcs.n	801837c <__hexnan+0xa0>
 801836e:	2d07      	cmp	r5, #7
 8018370:	dc04      	bgt.n	801837c <__hexnan+0xa0>
 8018372:	462a      	mov	r2, r5
 8018374:	4649      	mov	r1, r9
 8018376:	4620      	mov	r0, r4
 8018378:	f7ff ff8a 	bl	8018290 <L_shift>
 801837c:	4544      	cmp	r4, r8
 801837e:	d936      	bls.n	80183ee <__hexnan+0x112>
 8018380:	f1a8 0204 	sub.w	r2, r8, #4
 8018384:	4623      	mov	r3, r4
 8018386:	f853 1b04 	ldr.w	r1, [r3], #4
 801838a:	f842 1f04 	str.w	r1, [r2, #4]!
 801838e:	429f      	cmp	r7, r3
 8018390:	d2f9      	bcs.n	8018386 <__hexnan+0xaa>
 8018392:	1b3b      	subs	r3, r7, r4
 8018394:	f023 0303 	bic.w	r3, r3, #3
 8018398:	3304      	adds	r3, #4
 801839a:	3401      	adds	r4, #1
 801839c:	3e03      	subs	r6, #3
 801839e:	42b4      	cmp	r4, r6
 80183a0:	bf88      	it	hi
 80183a2:	2304      	movhi	r3, #4
 80183a4:	4443      	add	r3, r8
 80183a6:	2200      	movs	r2, #0
 80183a8:	f843 2b04 	str.w	r2, [r3], #4
 80183ac:	429f      	cmp	r7, r3
 80183ae:	d2fb      	bcs.n	80183a8 <__hexnan+0xcc>
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	b91b      	cbnz	r3, 80183bc <__hexnan+0xe0>
 80183b4:	4547      	cmp	r7, r8
 80183b6:	d128      	bne.n	801840a <__hexnan+0x12e>
 80183b8:	2301      	movs	r3, #1
 80183ba:	603b      	str	r3, [r7, #0]
 80183bc:	2005      	movs	r0, #5
 80183be:	b007      	add	sp, #28
 80183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c4:	3501      	adds	r5, #1
 80183c6:	2d08      	cmp	r5, #8
 80183c8:	f10b 0b01 	add.w	fp, fp, #1
 80183cc:	dd06      	ble.n	80183dc <__hexnan+0x100>
 80183ce:	4544      	cmp	r4, r8
 80183d0:	d9c1      	bls.n	8018356 <__hexnan+0x7a>
 80183d2:	2300      	movs	r3, #0
 80183d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80183d8:	2501      	movs	r5, #1
 80183da:	3c04      	subs	r4, #4
 80183dc:	6822      	ldr	r2, [r4, #0]
 80183de:	f000 000f 	and.w	r0, r0, #15
 80183e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80183e6:	6020      	str	r0, [r4, #0]
 80183e8:	e7b5      	b.n	8018356 <__hexnan+0x7a>
 80183ea:	2508      	movs	r5, #8
 80183ec:	e7b3      	b.n	8018356 <__hexnan+0x7a>
 80183ee:	9b01      	ldr	r3, [sp, #4]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d0dd      	beq.n	80183b0 <__hexnan+0xd4>
 80183f4:	f1c3 0320 	rsb	r3, r3, #32
 80183f8:	f04f 32ff 	mov.w	r2, #4294967295
 80183fc:	40da      	lsrs	r2, r3
 80183fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018402:	4013      	ands	r3, r2
 8018404:	f846 3c04 	str.w	r3, [r6, #-4]
 8018408:	e7d2      	b.n	80183b0 <__hexnan+0xd4>
 801840a:	3f04      	subs	r7, #4
 801840c:	e7d0      	b.n	80183b0 <__hexnan+0xd4>
 801840e:	2004      	movs	r0, #4
 8018410:	e7d5      	b.n	80183be <__hexnan+0xe2>
	...

08018414 <malloc>:
 8018414:	4b02      	ldr	r3, [pc, #8]	@ (8018420 <malloc+0xc>)
 8018416:	4601      	mov	r1, r0
 8018418:	6818      	ldr	r0, [r3, #0]
 801841a:	f000 b825 	b.w	8018468 <_malloc_r>
 801841e:	bf00      	nop
 8018420:	2400027c 	.word	0x2400027c

08018424 <sbrk_aligned>:
 8018424:	b570      	push	{r4, r5, r6, lr}
 8018426:	4e0f      	ldr	r6, [pc, #60]	@ (8018464 <sbrk_aligned+0x40>)
 8018428:	460c      	mov	r4, r1
 801842a:	6831      	ldr	r1, [r6, #0]
 801842c:	4605      	mov	r5, r0
 801842e:	b911      	cbnz	r1, 8018436 <sbrk_aligned+0x12>
 8018430:	f000 ff92 	bl	8019358 <_sbrk_r>
 8018434:	6030      	str	r0, [r6, #0]
 8018436:	4621      	mov	r1, r4
 8018438:	4628      	mov	r0, r5
 801843a:	f000 ff8d 	bl	8019358 <_sbrk_r>
 801843e:	1c43      	adds	r3, r0, #1
 8018440:	d103      	bne.n	801844a <sbrk_aligned+0x26>
 8018442:	f04f 34ff 	mov.w	r4, #4294967295
 8018446:	4620      	mov	r0, r4
 8018448:	bd70      	pop	{r4, r5, r6, pc}
 801844a:	1cc4      	adds	r4, r0, #3
 801844c:	f024 0403 	bic.w	r4, r4, #3
 8018450:	42a0      	cmp	r0, r4
 8018452:	d0f8      	beq.n	8018446 <sbrk_aligned+0x22>
 8018454:	1a21      	subs	r1, r4, r0
 8018456:	4628      	mov	r0, r5
 8018458:	f000 ff7e 	bl	8019358 <_sbrk_r>
 801845c:	3001      	adds	r0, #1
 801845e:	d1f2      	bne.n	8018446 <sbrk_aligned+0x22>
 8018460:	e7ef      	b.n	8018442 <sbrk_aligned+0x1e>
 8018462:	bf00      	nop
 8018464:	2400623c 	.word	0x2400623c

08018468 <_malloc_r>:
 8018468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801846c:	1ccd      	adds	r5, r1, #3
 801846e:	f025 0503 	bic.w	r5, r5, #3
 8018472:	3508      	adds	r5, #8
 8018474:	2d0c      	cmp	r5, #12
 8018476:	bf38      	it	cc
 8018478:	250c      	movcc	r5, #12
 801847a:	2d00      	cmp	r5, #0
 801847c:	4606      	mov	r6, r0
 801847e:	db01      	blt.n	8018484 <_malloc_r+0x1c>
 8018480:	42a9      	cmp	r1, r5
 8018482:	d904      	bls.n	801848e <_malloc_r+0x26>
 8018484:	230c      	movs	r3, #12
 8018486:	6033      	str	r3, [r6, #0]
 8018488:	2000      	movs	r0, #0
 801848a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801848e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018564 <_malloc_r+0xfc>
 8018492:	f000 f87b 	bl	801858c <__malloc_lock>
 8018496:	f8d8 3000 	ldr.w	r3, [r8]
 801849a:	461c      	mov	r4, r3
 801849c:	bb44      	cbnz	r4, 80184f0 <_malloc_r+0x88>
 801849e:	4629      	mov	r1, r5
 80184a0:	4630      	mov	r0, r6
 80184a2:	f7ff ffbf 	bl	8018424 <sbrk_aligned>
 80184a6:	1c43      	adds	r3, r0, #1
 80184a8:	4604      	mov	r4, r0
 80184aa:	d158      	bne.n	801855e <_malloc_r+0xf6>
 80184ac:	f8d8 4000 	ldr.w	r4, [r8]
 80184b0:	4627      	mov	r7, r4
 80184b2:	2f00      	cmp	r7, #0
 80184b4:	d143      	bne.n	801853e <_malloc_r+0xd6>
 80184b6:	2c00      	cmp	r4, #0
 80184b8:	d04b      	beq.n	8018552 <_malloc_r+0xea>
 80184ba:	6823      	ldr	r3, [r4, #0]
 80184bc:	4639      	mov	r1, r7
 80184be:	4630      	mov	r0, r6
 80184c0:	eb04 0903 	add.w	r9, r4, r3
 80184c4:	f000 ff48 	bl	8019358 <_sbrk_r>
 80184c8:	4581      	cmp	r9, r0
 80184ca:	d142      	bne.n	8018552 <_malloc_r+0xea>
 80184cc:	6821      	ldr	r1, [r4, #0]
 80184ce:	1a6d      	subs	r5, r5, r1
 80184d0:	4629      	mov	r1, r5
 80184d2:	4630      	mov	r0, r6
 80184d4:	f7ff ffa6 	bl	8018424 <sbrk_aligned>
 80184d8:	3001      	adds	r0, #1
 80184da:	d03a      	beq.n	8018552 <_malloc_r+0xea>
 80184dc:	6823      	ldr	r3, [r4, #0]
 80184de:	442b      	add	r3, r5
 80184e0:	6023      	str	r3, [r4, #0]
 80184e2:	f8d8 3000 	ldr.w	r3, [r8]
 80184e6:	685a      	ldr	r2, [r3, #4]
 80184e8:	bb62      	cbnz	r2, 8018544 <_malloc_r+0xdc>
 80184ea:	f8c8 7000 	str.w	r7, [r8]
 80184ee:	e00f      	b.n	8018510 <_malloc_r+0xa8>
 80184f0:	6822      	ldr	r2, [r4, #0]
 80184f2:	1b52      	subs	r2, r2, r5
 80184f4:	d420      	bmi.n	8018538 <_malloc_r+0xd0>
 80184f6:	2a0b      	cmp	r2, #11
 80184f8:	d917      	bls.n	801852a <_malloc_r+0xc2>
 80184fa:	1961      	adds	r1, r4, r5
 80184fc:	42a3      	cmp	r3, r4
 80184fe:	6025      	str	r5, [r4, #0]
 8018500:	bf18      	it	ne
 8018502:	6059      	strne	r1, [r3, #4]
 8018504:	6863      	ldr	r3, [r4, #4]
 8018506:	bf08      	it	eq
 8018508:	f8c8 1000 	streq.w	r1, [r8]
 801850c:	5162      	str	r2, [r4, r5]
 801850e:	604b      	str	r3, [r1, #4]
 8018510:	4630      	mov	r0, r6
 8018512:	f000 f841 	bl	8018598 <__malloc_unlock>
 8018516:	f104 000b 	add.w	r0, r4, #11
 801851a:	1d23      	adds	r3, r4, #4
 801851c:	f020 0007 	bic.w	r0, r0, #7
 8018520:	1ac2      	subs	r2, r0, r3
 8018522:	bf1c      	itt	ne
 8018524:	1a1b      	subne	r3, r3, r0
 8018526:	50a3      	strne	r3, [r4, r2]
 8018528:	e7af      	b.n	801848a <_malloc_r+0x22>
 801852a:	6862      	ldr	r2, [r4, #4]
 801852c:	42a3      	cmp	r3, r4
 801852e:	bf0c      	ite	eq
 8018530:	f8c8 2000 	streq.w	r2, [r8]
 8018534:	605a      	strne	r2, [r3, #4]
 8018536:	e7eb      	b.n	8018510 <_malloc_r+0xa8>
 8018538:	4623      	mov	r3, r4
 801853a:	6864      	ldr	r4, [r4, #4]
 801853c:	e7ae      	b.n	801849c <_malloc_r+0x34>
 801853e:	463c      	mov	r4, r7
 8018540:	687f      	ldr	r7, [r7, #4]
 8018542:	e7b6      	b.n	80184b2 <_malloc_r+0x4a>
 8018544:	461a      	mov	r2, r3
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	42a3      	cmp	r3, r4
 801854a:	d1fb      	bne.n	8018544 <_malloc_r+0xdc>
 801854c:	2300      	movs	r3, #0
 801854e:	6053      	str	r3, [r2, #4]
 8018550:	e7de      	b.n	8018510 <_malloc_r+0xa8>
 8018552:	230c      	movs	r3, #12
 8018554:	6033      	str	r3, [r6, #0]
 8018556:	4630      	mov	r0, r6
 8018558:	f000 f81e 	bl	8018598 <__malloc_unlock>
 801855c:	e794      	b.n	8018488 <_malloc_r+0x20>
 801855e:	6005      	str	r5, [r0, #0]
 8018560:	e7d6      	b.n	8018510 <_malloc_r+0xa8>
 8018562:	bf00      	nop
 8018564:	24006240 	.word	0x24006240

08018568 <__ascii_mbtowc>:
 8018568:	b082      	sub	sp, #8
 801856a:	b901      	cbnz	r1, 801856e <__ascii_mbtowc+0x6>
 801856c:	a901      	add	r1, sp, #4
 801856e:	b142      	cbz	r2, 8018582 <__ascii_mbtowc+0x1a>
 8018570:	b14b      	cbz	r3, 8018586 <__ascii_mbtowc+0x1e>
 8018572:	7813      	ldrb	r3, [r2, #0]
 8018574:	600b      	str	r3, [r1, #0]
 8018576:	7812      	ldrb	r2, [r2, #0]
 8018578:	1e10      	subs	r0, r2, #0
 801857a:	bf18      	it	ne
 801857c:	2001      	movne	r0, #1
 801857e:	b002      	add	sp, #8
 8018580:	4770      	bx	lr
 8018582:	4610      	mov	r0, r2
 8018584:	e7fb      	b.n	801857e <__ascii_mbtowc+0x16>
 8018586:	f06f 0001 	mvn.w	r0, #1
 801858a:	e7f8      	b.n	801857e <__ascii_mbtowc+0x16>

0801858c <__malloc_lock>:
 801858c:	4801      	ldr	r0, [pc, #4]	@ (8018594 <__malloc_lock+0x8>)
 801858e:	f7fe bdc4 	b.w	801711a <__retarget_lock_acquire_recursive>
 8018592:	bf00      	nop
 8018594:	24006238 	.word	0x24006238

08018598 <__malloc_unlock>:
 8018598:	4801      	ldr	r0, [pc, #4]	@ (80185a0 <__malloc_unlock+0x8>)
 801859a:	f7fe bdbf 	b.w	801711c <__retarget_lock_release_recursive>
 801859e:	bf00      	nop
 80185a0:	24006238 	.word	0x24006238

080185a4 <_Balloc>:
 80185a4:	b570      	push	{r4, r5, r6, lr}
 80185a6:	69c6      	ldr	r6, [r0, #28]
 80185a8:	4604      	mov	r4, r0
 80185aa:	460d      	mov	r5, r1
 80185ac:	b976      	cbnz	r6, 80185cc <_Balloc+0x28>
 80185ae:	2010      	movs	r0, #16
 80185b0:	f7ff ff30 	bl	8018414 <malloc>
 80185b4:	4602      	mov	r2, r0
 80185b6:	61e0      	str	r0, [r4, #28]
 80185b8:	b920      	cbnz	r0, 80185c4 <_Balloc+0x20>
 80185ba:	4b18      	ldr	r3, [pc, #96]	@ (801861c <_Balloc+0x78>)
 80185bc:	4818      	ldr	r0, [pc, #96]	@ (8018620 <_Balloc+0x7c>)
 80185be:	216b      	movs	r1, #107	@ 0x6b
 80185c0:	f000 feda 	bl	8019378 <__assert_func>
 80185c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80185c8:	6006      	str	r6, [r0, #0]
 80185ca:	60c6      	str	r6, [r0, #12]
 80185cc:	69e6      	ldr	r6, [r4, #28]
 80185ce:	68f3      	ldr	r3, [r6, #12]
 80185d0:	b183      	cbz	r3, 80185f4 <_Balloc+0x50>
 80185d2:	69e3      	ldr	r3, [r4, #28]
 80185d4:	68db      	ldr	r3, [r3, #12]
 80185d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80185da:	b9b8      	cbnz	r0, 801860c <_Balloc+0x68>
 80185dc:	2101      	movs	r1, #1
 80185de:	fa01 f605 	lsl.w	r6, r1, r5
 80185e2:	1d72      	adds	r2, r6, #5
 80185e4:	0092      	lsls	r2, r2, #2
 80185e6:	4620      	mov	r0, r4
 80185e8:	f000 fee4 	bl	80193b4 <_calloc_r>
 80185ec:	b160      	cbz	r0, 8018608 <_Balloc+0x64>
 80185ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80185f2:	e00e      	b.n	8018612 <_Balloc+0x6e>
 80185f4:	2221      	movs	r2, #33	@ 0x21
 80185f6:	2104      	movs	r1, #4
 80185f8:	4620      	mov	r0, r4
 80185fa:	f000 fedb 	bl	80193b4 <_calloc_r>
 80185fe:	69e3      	ldr	r3, [r4, #28]
 8018600:	60f0      	str	r0, [r6, #12]
 8018602:	68db      	ldr	r3, [r3, #12]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d1e4      	bne.n	80185d2 <_Balloc+0x2e>
 8018608:	2000      	movs	r0, #0
 801860a:	bd70      	pop	{r4, r5, r6, pc}
 801860c:	6802      	ldr	r2, [r0, #0]
 801860e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018612:	2300      	movs	r3, #0
 8018614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018618:	e7f7      	b.n	801860a <_Balloc+0x66>
 801861a:	bf00      	nop
 801861c:	0801acba 	.word	0x0801acba
 8018620:	0801ad9a 	.word	0x0801ad9a

08018624 <_Bfree>:
 8018624:	b570      	push	{r4, r5, r6, lr}
 8018626:	69c6      	ldr	r6, [r0, #28]
 8018628:	4605      	mov	r5, r0
 801862a:	460c      	mov	r4, r1
 801862c:	b976      	cbnz	r6, 801864c <_Bfree+0x28>
 801862e:	2010      	movs	r0, #16
 8018630:	f7ff fef0 	bl	8018414 <malloc>
 8018634:	4602      	mov	r2, r0
 8018636:	61e8      	str	r0, [r5, #28]
 8018638:	b920      	cbnz	r0, 8018644 <_Bfree+0x20>
 801863a:	4b09      	ldr	r3, [pc, #36]	@ (8018660 <_Bfree+0x3c>)
 801863c:	4809      	ldr	r0, [pc, #36]	@ (8018664 <_Bfree+0x40>)
 801863e:	218f      	movs	r1, #143	@ 0x8f
 8018640:	f000 fe9a 	bl	8019378 <__assert_func>
 8018644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018648:	6006      	str	r6, [r0, #0]
 801864a:	60c6      	str	r6, [r0, #12]
 801864c:	b13c      	cbz	r4, 801865e <_Bfree+0x3a>
 801864e:	69eb      	ldr	r3, [r5, #28]
 8018650:	6862      	ldr	r2, [r4, #4]
 8018652:	68db      	ldr	r3, [r3, #12]
 8018654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018658:	6021      	str	r1, [r4, #0]
 801865a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801865e:	bd70      	pop	{r4, r5, r6, pc}
 8018660:	0801acba 	.word	0x0801acba
 8018664:	0801ad9a 	.word	0x0801ad9a

08018668 <__multadd>:
 8018668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	690d      	ldr	r5, [r1, #16]
 801866e:	4607      	mov	r7, r0
 8018670:	460c      	mov	r4, r1
 8018672:	461e      	mov	r6, r3
 8018674:	f101 0c14 	add.w	ip, r1, #20
 8018678:	2000      	movs	r0, #0
 801867a:	f8dc 3000 	ldr.w	r3, [ip]
 801867e:	b299      	uxth	r1, r3
 8018680:	fb02 6101 	mla	r1, r2, r1, r6
 8018684:	0c1e      	lsrs	r6, r3, #16
 8018686:	0c0b      	lsrs	r3, r1, #16
 8018688:	fb02 3306 	mla	r3, r2, r6, r3
 801868c:	b289      	uxth	r1, r1
 801868e:	3001      	adds	r0, #1
 8018690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018694:	4285      	cmp	r5, r0
 8018696:	f84c 1b04 	str.w	r1, [ip], #4
 801869a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801869e:	dcec      	bgt.n	801867a <__multadd+0x12>
 80186a0:	b30e      	cbz	r6, 80186e6 <__multadd+0x7e>
 80186a2:	68a3      	ldr	r3, [r4, #8]
 80186a4:	42ab      	cmp	r3, r5
 80186a6:	dc19      	bgt.n	80186dc <__multadd+0x74>
 80186a8:	6861      	ldr	r1, [r4, #4]
 80186aa:	4638      	mov	r0, r7
 80186ac:	3101      	adds	r1, #1
 80186ae:	f7ff ff79 	bl	80185a4 <_Balloc>
 80186b2:	4680      	mov	r8, r0
 80186b4:	b928      	cbnz	r0, 80186c2 <__multadd+0x5a>
 80186b6:	4602      	mov	r2, r0
 80186b8:	4b0c      	ldr	r3, [pc, #48]	@ (80186ec <__multadd+0x84>)
 80186ba:	480d      	ldr	r0, [pc, #52]	@ (80186f0 <__multadd+0x88>)
 80186bc:	21ba      	movs	r1, #186	@ 0xba
 80186be:	f000 fe5b 	bl	8019378 <__assert_func>
 80186c2:	6922      	ldr	r2, [r4, #16]
 80186c4:	3202      	adds	r2, #2
 80186c6:	f104 010c 	add.w	r1, r4, #12
 80186ca:	0092      	lsls	r2, r2, #2
 80186cc:	300c      	adds	r0, #12
 80186ce:	f7fe fd26 	bl	801711e <memcpy>
 80186d2:	4621      	mov	r1, r4
 80186d4:	4638      	mov	r0, r7
 80186d6:	f7ff ffa5 	bl	8018624 <_Bfree>
 80186da:	4644      	mov	r4, r8
 80186dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80186e0:	3501      	adds	r5, #1
 80186e2:	615e      	str	r6, [r3, #20]
 80186e4:	6125      	str	r5, [r4, #16]
 80186e6:	4620      	mov	r0, r4
 80186e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186ec:	0801ad29 	.word	0x0801ad29
 80186f0:	0801ad9a 	.word	0x0801ad9a

080186f4 <__s2b>:
 80186f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186f8:	460c      	mov	r4, r1
 80186fa:	4615      	mov	r5, r2
 80186fc:	461f      	mov	r7, r3
 80186fe:	2209      	movs	r2, #9
 8018700:	3308      	adds	r3, #8
 8018702:	4606      	mov	r6, r0
 8018704:	fb93 f3f2 	sdiv	r3, r3, r2
 8018708:	2100      	movs	r1, #0
 801870a:	2201      	movs	r2, #1
 801870c:	429a      	cmp	r2, r3
 801870e:	db09      	blt.n	8018724 <__s2b+0x30>
 8018710:	4630      	mov	r0, r6
 8018712:	f7ff ff47 	bl	80185a4 <_Balloc>
 8018716:	b940      	cbnz	r0, 801872a <__s2b+0x36>
 8018718:	4602      	mov	r2, r0
 801871a:	4b19      	ldr	r3, [pc, #100]	@ (8018780 <__s2b+0x8c>)
 801871c:	4819      	ldr	r0, [pc, #100]	@ (8018784 <__s2b+0x90>)
 801871e:	21d3      	movs	r1, #211	@ 0xd3
 8018720:	f000 fe2a 	bl	8019378 <__assert_func>
 8018724:	0052      	lsls	r2, r2, #1
 8018726:	3101      	adds	r1, #1
 8018728:	e7f0      	b.n	801870c <__s2b+0x18>
 801872a:	9b08      	ldr	r3, [sp, #32]
 801872c:	6143      	str	r3, [r0, #20]
 801872e:	2d09      	cmp	r5, #9
 8018730:	f04f 0301 	mov.w	r3, #1
 8018734:	6103      	str	r3, [r0, #16]
 8018736:	dd16      	ble.n	8018766 <__s2b+0x72>
 8018738:	f104 0909 	add.w	r9, r4, #9
 801873c:	46c8      	mov	r8, r9
 801873e:	442c      	add	r4, r5
 8018740:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018744:	4601      	mov	r1, r0
 8018746:	3b30      	subs	r3, #48	@ 0x30
 8018748:	220a      	movs	r2, #10
 801874a:	4630      	mov	r0, r6
 801874c:	f7ff ff8c 	bl	8018668 <__multadd>
 8018750:	45a0      	cmp	r8, r4
 8018752:	d1f5      	bne.n	8018740 <__s2b+0x4c>
 8018754:	f1a5 0408 	sub.w	r4, r5, #8
 8018758:	444c      	add	r4, r9
 801875a:	1b2d      	subs	r5, r5, r4
 801875c:	1963      	adds	r3, r4, r5
 801875e:	42bb      	cmp	r3, r7
 8018760:	db04      	blt.n	801876c <__s2b+0x78>
 8018762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018766:	340a      	adds	r4, #10
 8018768:	2509      	movs	r5, #9
 801876a:	e7f6      	b.n	801875a <__s2b+0x66>
 801876c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018770:	4601      	mov	r1, r0
 8018772:	3b30      	subs	r3, #48	@ 0x30
 8018774:	220a      	movs	r2, #10
 8018776:	4630      	mov	r0, r6
 8018778:	f7ff ff76 	bl	8018668 <__multadd>
 801877c:	e7ee      	b.n	801875c <__s2b+0x68>
 801877e:	bf00      	nop
 8018780:	0801ad29 	.word	0x0801ad29
 8018784:	0801ad9a 	.word	0x0801ad9a

08018788 <__hi0bits>:
 8018788:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801878c:	4603      	mov	r3, r0
 801878e:	bf36      	itet	cc
 8018790:	0403      	lslcc	r3, r0, #16
 8018792:	2000      	movcs	r0, #0
 8018794:	2010      	movcc	r0, #16
 8018796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801879a:	bf3c      	itt	cc
 801879c:	021b      	lslcc	r3, r3, #8
 801879e:	3008      	addcc	r0, #8
 80187a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80187a4:	bf3c      	itt	cc
 80187a6:	011b      	lslcc	r3, r3, #4
 80187a8:	3004      	addcc	r0, #4
 80187aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80187ae:	bf3c      	itt	cc
 80187b0:	009b      	lslcc	r3, r3, #2
 80187b2:	3002      	addcc	r0, #2
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	db05      	blt.n	80187c4 <__hi0bits+0x3c>
 80187b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80187bc:	f100 0001 	add.w	r0, r0, #1
 80187c0:	bf08      	it	eq
 80187c2:	2020      	moveq	r0, #32
 80187c4:	4770      	bx	lr

080187c6 <__lo0bits>:
 80187c6:	6803      	ldr	r3, [r0, #0]
 80187c8:	4602      	mov	r2, r0
 80187ca:	f013 0007 	ands.w	r0, r3, #7
 80187ce:	d00b      	beq.n	80187e8 <__lo0bits+0x22>
 80187d0:	07d9      	lsls	r1, r3, #31
 80187d2:	d421      	bmi.n	8018818 <__lo0bits+0x52>
 80187d4:	0798      	lsls	r0, r3, #30
 80187d6:	bf49      	itett	mi
 80187d8:	085b      	lsrmi	r3, r3, #1
 80187da:	089b      	lsrpl	r3, r3, #2
 80187dc:	2001      	movmi	r0, #1
 80187de:	6013      	strmi	r3, [r2, #0]
 80187e0:	bf5c      	itt	pl
 80187e2:	6013      	strpl	r3, [r2, #0]
 80187e4:	2002      	movpl	r0, #2
 80187e6:	4770      	bx	lr
 80187e8:	b299      	uxth	r1, r3
 80187ea:	b909      	cbnz	r1, 80187f0 <__lo0bits+0x2a>
 80187ec:	0c1b      	lsrs	r3, r3, #16
 80187ee:	2010      	movs	r0, #16
 80187f0:	b2d9      	uxtb	r1, r3
 80187f2:	b909      	cbnz	r1, 80187f8 <__lo0bits+0x32>
 80187f4:	3008      	adds	r0, #8
 80187f6:	0a1b      	lsrs	r3, r3, #8
 80187f8:	0719      	lsls	r1, r3, #28
 80187fa:	bf04      	itt	eq
 80187fc:	091b      	lsreq	r3, r3, #4
 80187fe:	3004      	addeq	r0, #4
 8018800:	0799      	lsls	r1, r3, #30
 8018802:	bf04      	itt	eq
 8018804:	089b      	lsreq	r3, r3, #2
 8018806:	3002      	addeq	r0, #2
 8018808:	07d9      	lsls	r1, r3, #31
 801880a:	d403      	bmi.n	8018814 <__lo0bits+0x4e>
 801880c:	085b      	lsrs	r3, r3, #1
 801880e:	f100 0001 	add.w	r0, r0, #1
 8018812:	d003      	beq.n	801881c <__lo0bits+0x56>
 8018814:	6013      	str	r3, [r2, #0]
 8018816:	4770      	bx	lr
 8018818:	2000      	movs	r0, #0
 801881a:	4770      	bx	lr
 801881c:	2020      	movs	r0, #32
 801881e:	4770      	bx	lr

08018820 <__i2b>:
 8018820:	b510      	push	{r4, lr}
 8018822:	460c      	mov	r4, r1
 8018824:	2101      	movs	r1, #1
 8018826:	f7ff febd 	bl	80185a4 <_Balloc>
 801882a:	4602      	mov	r2, r0
 801882c:	b928      	cbnz	r0, 801883a <__i2b+0x1a>
 801882e:	4b05      	ldr	r3, [pc, #20]	@ (8018844 <__i2b+0x24>)
 8018830:	4805      	ldr	r0, [pc, #20]	@ (8018848 <__i2b+0x28>)
 8018832:	f240 1145 	movw	r1, #325	@ 0x145
 8018836:	f000 fd9f 	bl	8019378 <__assert_func>
 801883a:	2301      	movs	r3, #1
 801883c:	6144      	str	r4, [r0, #20]
 801883e:	6103      	str	r3, [r0, #16]
 8018840:	bd10      	pop	{r4, pc}
 8018842:	bf00      	nop
 8018844:	0801ad29 	.word	0x0801ad29
 8018848:	0801ad9a 	.word	0x0801ad9a

0801884c <__multiply>:
 801884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018850:	4614      	mov	r4, r2
 8018852:	690a      	ldr	r2, [r1, #16]
 8018854:	6923      	ldr	r3, [r4, #16]
 8018856:	429a      	cmp	r2, r3
 8018858:	bfa8      	it	ge
 801885a:	4623      	movge	r3, r4
 801885c:	460f      	mov	r7, r1
 801885e:	bfa4      	itt	ge
 8018860:	460c      	movge	r4, r1
 8018862:	461f      	movge	r7, r3
 8018864:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018868:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801886c:	68a3      	ldr	r3, [r4, #8]
 801886e:	6861      	ldr	r1, [r4, #4]
 8018870:	eb0a 0609 	add.w	r6, sl, r9
 8018874:	42b3      	cmp	r3, r6
 8018876:	b085      	sub	sp, #20
 8018878:	bfb8      	it	lt
 801887a:	3101      	addlt	r1, #1
 801887c:	f7ff fe92 	bl	80185a4 <_Balloc>
 8018880:	b930      	cbnz	r0, 8018890 <__multiply+0x44>
 8018882:	4602      	mov	r2, r0
 8018884:	4b44      	ldr	r3, [pc, #272]	@ (8018998 <__multiply+0x14c>)
 8018886:	4845      	ldr	r0, [pc, #276]	@ (801899c <__multiply+0x150>)
 8018888:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801888c:	f000 fd74 	bl	8019378 <__assert_func>
 8018890:	f100 0514 	add.w	r5, r0, #20
 8018894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018898:	462b      	mov	r3, r5
 801889a:	2200      	movs	r2, #0
 801889c:	4543      	cmp	r3, r8
 801889e:	d321      	bcc.n	80188e4 <__multiply+0x98>
 80188a0:	f107 0114 	add.w	r1, r7, #20
 80188a4:	f104 0214 	add.w	r2, r4, #20
 80188a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80188ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80188b0:	9302      	str	r3, [sp, #8]
 80188b2:	1b13      	subs	r3, r2, r4
 80188b4:	3b15      	subs	r3, #21
 80188b6:	f023 0303 	bic.w	r3, r3, #3
 80188ba:	3304      	adds	r3, #4
 80188bc:	f104 0715 	add.w	r7, r4, #21
 80188c0:	42ba      	cmp	r2, r7
 80188c2:	bf38      	it	cc
 80188c4:	2304      	movcc	r3, #4
 80188c6:	9301      	str	r3, [sp, #4]
 80188c8:	9b02      	ldr	r3, [sp, #8]
 80188ca:	9103      	str	r1, [sp, #12]
 80188cc:	428b      	cmp	r3, r1
 80188ce:	d80c      	bhi.n	80188ea <__multiply+0x9e>
 80188d0:	2e00      	cmp	r6, #0
 80188d2:	dd03      	ble.n	80188dc <__multiply+0x90>
 80188d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d05b      	beq.n	8018994 <__multiply+0x148>
 80188dc:	6106      	str	r6, [r0, #16]
 80188de:	b005      	add	sp, #20
 80188e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e4:	f843 2b04 	str.w	r2, [r3], #4
 80188e8:	e7d8      	b.n	801889c <__multiply+0x50>
 80188ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80188ee:	f1ba 0f00 	cmp.w	sl, #0
 80188f2:	d024      	beq.n	801893e <__multiply+0xf2>
 80188f4:	f104 0e14 	add.w	lr, r4, #20
 80188f8:	46a9      	mov	r9, r5
 80188fa:	f04f 0c00 	mov.w	ip, #0
 80188fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018902:	f8d9 3000 	ldr.w	r3, [r9]
 8018906:	fa1f fb87 	uxth.w	fp, r7
 801890a:	b29b      	uxth	r3, r3
 801890c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018910:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018914:	f8d9 7000 	ldr.w	r7, [r9]
 8018918:	4463      	add	r3, ip
 801891a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801891e:	fb0a c70b 	mla	r7, sl, fp, ip
 8018922:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018926:	b29b      	uxth	r3, r3
 8018928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801892c:	4572      	cmp	r2, lr
 801892e:	f849 3b04 	str.w	r3, [r9], #4
 8018932:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018936:	d8e2      	bhi.n	80188fe <__multiply+0xb2>
 8018938:	9b01      	ldr	r3, [sp, #4]
 801893a:	f845 c003 	str.w	ip, [r5, r3]
 801893e:	9b03      	ldr	r3, [sp, #12]
 8018940:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018944:	3104      	adds	r1, #4
 8018946:	f1b9 0f00 	cmp.w	r9, #0
 801894a:	d021      	beq.n	8018990 <__multiply+0x144>
 801894c:	682b      	ldr	r3, [r5, #0]
 801894e:	f104 0c14 	add.w	ip, r4, #20
 8018952:	46ae      	mov	lr, r5
 8018954:	f04f 0a00 	mov.w	sl, #0
 8018958:	f8bc b000 	ldrh.w	fp, [ip]
 801895c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018960:	fb09 770b 	mla	r7, r9, fp, r7
 8018964:	4457      	add	r7, sl
 8018966:	b29b      	uxth	r3, r3
 8018968:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801896c:	f84e 3b04 	str.w	r3, [lr], #4
 8018970:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018978:	f8be 3000 	ldrh.w	r3, [lr]
 801897c:	fb09 330a 	mla	r3, r9, sl, r3
 8018980:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018984:	4562      	cmp	r2, ip
 8018986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801898a:	d8e5      	bhi.n	8018958 <__multiply+0x10c>
 801898c:	9f01      	ldr	r7, [sp, #4]
 801898e:	51eb      	str	r3, [r5, r7]
 8018990:	3504      	adds	r5, #4
 8018992:	e799      	b.n	80188c8 <__multiply+0x7c>
 8018994:	3e01      	subs	r6, #1
 8018996:	e79b      	b.n	80188d0 <__multiply+0x84>
 8018998:	0801ad29 	.word	0x0801ad29
 801899c:	0801ad9a 	.word	0x0801ad9a

080189a0 <__pow5mult>:
 80189a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189a4:	4615      	mov	r5, r2
 80189a6:	f012 0203 	ands.w	r2, r2, #3
 80189aa:	4607      	mov	r7, r0
 80189ac:	460e      	mov	r6, r1
 80189ae:	d007      	beq.n	80189c0 <__pow5mult+0x20>
 80189b0:	4c25      	ldr	r4, [pc, #148]	@ (8018a48 <__pow5mult+0xa8>)
 80189b2:	3a01      	subs	r2, #1
 80189b4:	2300      	movs	r3, #0
 80189b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189ba:	f7ff fe55 	bl	8018668 <__multadd>
 80189be:	4606      	mov	r6, r0
 80189c0:	10ad      	asrs	r5, r5, #2
 80189c2:	d03d      	beq.n	8018a40 <__pow5mult+0xa0>
 80189c4:	69fc      	ldr	r4, [r7, #28]
 80189c6:	b97c      	cbnz	r4, 80189e8 <__pow5mult+0x48>
 80189c8:	2010      	movs	r0, #16
 80189ca:	f7ff fd23 	bl	8018414 <malloc>
 80189ce:	4602      	mov	r2, r0
 80189d0:	61f8      	str	r0, [r7, #28]
 80189d2:	b928      	cbnz	r0, 80189e0 <__pow5mult+0x40>
 80189d4:	4b1d      	ldr	r3, [pc, #116]	@ (8018a4c <__pow5mult+0xac>)
 80189d6:	481e      	ldr	r0, [pc, #120]	@ (8018a50 <__pow5mult+0xb0>)
 80189d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80189dc:	f000 fccc 	bl	8019378 <__assert_func>
 80189e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189e4:	6004      	str	r4, [r0, #0]
 80189e6:	60c4      	str	r4, [r0, #12]
 80189e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80189ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80189f0:	b94c      	cbnz	r4, 8018a06 <__pow5mult+0x66>
 80189f2:	f240 2171 	movw	r1, #625	@ 0x271
 80189f6:	4638      	mov	r0, r7
 80189f8:	f7ff ff12 	bl	8018820 <__i2b>
 80189fc:	2300      	movs	r3, #0
 80189fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a02:	4604      	mov	r4, r0
 8018a04:	6003      	str	r3, [r0, #0]
 8018a06:	f04f 0900 	mov.w	r9, #0
 8018a0a:	07eb      	lsls	r3, r5, #31
 8018a0c:	d50a      	bpl.n	8018a24 <__pow5mult+0x84>
 8018a0e:	4631      	mov	r1, r6
 8018a10:	4622      	mov	r2, r4
 8018a12:	4638      	mov	r0, r7
 8018a14:	f7ff ff1a 	bl	801884c <__multiply>
 8018a18:	4631      	mov	r1, r6
 8018a1a:	4680      	mov	r8, r0
 8018a1c:	4638      	mov	r0, r7
 8018a1e:	f7ff fe01 	bl	8018624 <_Bfree>
 8018a22:	4646      	mov	r6, r8
 8018a24:	106d      	asrs	r5, r5, #1
 8018a26:	d00b      	beq.n	8018a40 <__pow5mult+0xa0>
 8018a28:	6820      	ldr	r0, [r4, #0]
 8018a2a:	b938      	cbnz	r0, 8018a3c <__pow5mult+0x9c>
 8018a2c:	4622      	mov	r2, r4
 8018a2e:	4621      	mov	r1, r4
 8018a30:	4638      	mov	r0, r7
 8018a32:	f7ff ff0b 	bl	801884c <__multiply>
 8018a36:	6020      	str	r0, [r4, #0]
 8018a38:	f8c0 9000 	str.w	r9, [r0]
 8018a3c:	4604      	mov	r4, r0
 8018a3e:	e7e4      	b.n	8018a0a <__pow5mult+0x6a>
 8018a40:	4630      	mov	r0, r6
 8018a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a46:	bf00      	nop
 8018a48:	0801adf4 	.word	0x0801adf4
 8018a4c:	0801acba 	.word	0x0801acba
 8018a50:	0801ad9a 	.word	0x0801ad9a

08018a54 <__lshift>:
 8018a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a58:	460c      	mov	r4, r1
 8018a5a:	6849      	ldr	r1, [r1, #4]
 8018a5c:	6923      	ldr	r3, [r4, #16]
 8018a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018a62:	68a3      	ldr	r3, [r4, #8]
 8018a64:	4607      	mov	r7, r0
 8018a66:	4691      	mov	r9, r2
 8018a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a6c:	f108 0601 	add.w	r6, r8, #1
 8018a70:	42b3      	cmp	r3, r6
 8018a72:	db0b      	blt.n	8018a8c <__lshift+0x38>
 8018a74:	4638      	mov	r0, r7
 8018a76:	f7ff fd95 	bl	80185a4 <_Balloc>
 8018a7a:	4605      	mov	r5, r0
 8018a7c:	b948      	cbnz	r0, 8018a92 <__lshift+0x3e>
 8018a7e:	4602      	mov	r2, r0
 8018a80:	4b28      	ldr	r3, [pc, #160]	@ (8018b24 <__lshift+0xd0>)
 8018a82:	4829      	ldr	r0, [pc, #164]	@ (8018b28 <__lshift+0xd4>)
 8018a84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018a88:	f000 fc76 	bl	8019378 <__assert_func>
 8018a8c:	3101      	adds	r1, #1
 8018a8e:	005b      	lsls	r3, r3, #1
 8018a90:	e7ee      	b.n	8018a70 <__lshift+0x1c>
 8018a92:	2300      	movs	r3, #0
 8018a94:	f100 0114 	add.w	r1, r0, #20
 8018a98:	f100 0210 	add.w	r2, r0, #16
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	4553      	cmp	r3, sl
 8018aa0:	db33      	blt.n	8018b0a <__lshift+0xb6>
 8018aa2:	6920      	ldr	r0, [r4, #16]
 8018aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018aa8:	f104 0314 	add.w	r3, r4, #20
 8018aac:	f019 091f 	ands.w	r9, r9, #31
 8018ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ab8:	d02b      	beq.n	8018b12 <__lshift+0xbe>
 8018aba:	f1c9 0e20 	rsb	lr, r9, #32
 8018abe:	468a      	mov	sl, r1
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	6818      	ldr	r0, [r3, #0]
 8018ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8018ac8:	4310      	orrs	r0, r2
 8018aca:	f84a 0b04 	str.w	r0, [sl], #4
 8018ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ad2:	459c      	cmp	ip, r3
 8018ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ad8:	d8f3      	bhi.n	8018ac2 <__lshift+0x6e>
 8018ada:	ebac 0304 	sub.w	r3, ip, r4
 8018ade:	3b15      	subs	r3, #21
 8018ae0:	f023 0303 	bic.w	r3, r3, #3
 8018ae4:	3304      	adds	r3, #4
 8018ae6:	f104 0015 	add.w	r0, r4, #21
 8018aea:	4584      	cmp	ip, r0
 8018aec:	bf38      	it	cc
 8018aee:	2304      	movcc	r3, #4
 8018af0:	50ca      	str	r2, [r1, r3]
 8018af2:	b10a      	cbz	r2, 8018af8 <__lshift+0xa4>
 8018af4:	f108 0602 	add.w	r6, r8, #2
 8018af8:	3e01      	subs	r6, #1
 8018afa:	4638      	mov	r0, r7
 8018afc:	612e      	str	r6, [r5, #16]
 8018afe:	4621      	mov	r1, r4
 8018b00:	f7ff fd90 	bl	8018624 <_Bfree>
 8018b04:	4628      	mov	r0, r5
 8018b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018b0e:	3301      	adds	r3, #1
 8018b10:	e7c5      	b.n	8018a9e <__lshift+0x4a>
 8018b12:	3904      	subs	r1, #4
 8018b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b1c:	459c      	cmp	ip, r3
 8018b1e:	d8f9      	bhi.n	8018b14 <__lshift+0xc0>
 8018b20:	e7ea      	b.n	8018af8 <__lshift+0xa4>
 8018b22:	bf00      	nop
 8018b24:	0801ad29 	.word	0x0801ad29
 8018b28:	0801ad9a 	.word	0x0801ad9a

08018b2c <__mcmp>:
 8018b2c:	690a      	ldr	r2, [r1, #16]
 8018b2e:	4603      	mov	r3, r0
 8018b30:	6900      	ldr	r0, [r0, #16]
 8018b32:	1a80      	subs	r0, r0, r2
 8018b34:	b530      	push	{r4, r5, lr}
 8018b36:	d10e      	bne.n	8018b56 <__mcmp+0x2a>
 8018b38:	3314      	adds	r3, #20
 8018b3a:	3114      	adds	r1, #20
 8018b3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018b40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b4c:	4295      	cmp	r5, r2
 8018b4e:	d003      	beq.n	8018b58 <__mcmp+0x2c>
 8018b50:	d205      	bcs.n	8018b5e <__mcmp+0x32>
 8018b52:	f04f 30ff 	mov.w	r0, #4294967295
 8018b56:	bd30      	pop	{r4, r5, pc}
 8018b58:	42a3      	cmp	r3, r4
 8018b5a:	d3f3      	bcc.n	8018b44 <__mcmp+0x18>
 8018b5c:	e7fb      	b.n	8018b56 <__mcmp+0x2a>
 8018b5e:	2001      	movs	r0, #1
 8018b60:	e7f9      	b.n	8018b56 <__mcmp+0x2a>
	...

08018b64 <__mdiff>:
 8018b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b68:	4689      	mov	r9, r1
 8018b6a:	4606      	mov	r6, r0
 8018b6c:	4611      	mov	r1, r2
 8018b6e:	4648      	mov	r0, r9
 8018b70:	4614      	mov	r4, r2
 8018b72:	f7ff ffdb 	bl	8018b2c <__mcmp>
 8018b76:	1e05      	subs	r5, r0, #0
 8018b78:	d112      	bne.n	8018ba0 <__mdiff+0x3c>
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	4630      	mov	r0, r6
 8018b7e:	f7ff fd11 	bl	80185a4 <_Balloc>
 8018b82:	4602      	mov	r2, r0
 8018b84:	b928      	cbnz	r0, 8018b92 <__mdiff+0x2e>
 8018b86:	4b3f      	ldr	r3, [pc, #252]	@ (8018c84 <__mdiff+0x120>)
 8018b88:	f240 2137 	movw	r1, #567	@ 0x237
 8018b8c:	483e      	ldr	r0, [pc, #248]	@ (8018c88 <__mdiff+0x124>)
 8018b8e:	f000 fbf3 	bl	8019378 <__assert_func>
 8018b92:	2301      	movs	r3, #1
 8018b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018b98:	4610      	mov	r0, r2
 8018b9a:	b003      	add	sp, #12
 8018b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba0:	bfbc      	itt	lt
 8018ba2:	464b      	movlt	r3, r9
 8018ba4:	46a1      	movlt	r9, r4
 8018ba6:	4630      	mov	r0, r6
 8018ba8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018bac:	bfba      	itte	lt
 8018bae:	461c      	movlt	r4, r3
 8018bb0:	2501      	movlt	r5, #1
 8018bb2:	2500      	movge	r5, #0
 8018bb4:	f7ff fcf6 	bl	80185a4 <_Balloc>
 8018bb8:	4602      	mov	r2, r0
 8018bba:	b918      	cbnz	r0, 8018bc4 <__mdiff+0x60>
 8018bbc:	4b31      	ldr	r3, [pc, #196]	@ (8018c84 <__mdiff+0x120>)
 8018bbe:	f240 2145 	movw	r1, #581	@ 0x245
 8018bc2:	e7e3      	b.n	8018b8c <__mdiff+0x28>
 8018bc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018bc8:	6926      	ldr	r6, [r4, #16]
 8018bca:	60c5      	str	r5, [r0, #12]
 8018bcc:	f109 0310 	add.w	r3, r9, #16
 8018bd0:	f109 0514 	add.w	r5, r9, #20
 8018bd4:	f104 0e14 	add.w	lr, r4, #20
 8018bd8:	f100 0b14 	add.w	fp, r0, #20
 8018bdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018be0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018be4:	9301      	str	r3, [sp, #4]
 8018be6:	46d9      	mov	r9, fp
 8018be8:	f04f 0c00 	mov.w	ip, #0
 8018bec:	9b01      	ldr	r3, [sp, #4]
 8018bee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018bf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018bf6:	9301      	str	r3, [sp, #4]
 8018bf8:	fa1f f38a 	uxth.w	r3, sl
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	b283      	uxth	r3, r0
 8018c00:	1acb      	subs	r3, r1, r3
 8018c02:	0c00      	lsrs	r0, r0, #16
 8018c04:	4463      	add	r3, ip
 8018c06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018c0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018c0e:	b29b      	uxth	r3, r3
 8018c10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018c14:	4576      	cmp	r6, lr
 8018c16:	f849 3b04 	str.w	r3, [r9], #4
 8018c1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018c1e:	d8e5      	bhi.n	8018bec <__mdiff+0x88>
 8018c20:	1b33      	subs	r3, r6, r4
 8018c22:	3b15      	subs	r3, #21
 8018c24:	f023 0303 	bic.w	r3, r3, #3
 8018c28:	3415      	adds	r4, #21
 8018c2a:	3304      	adds	r3, #4
 8018c2c:	42a6      	cmp	r6, r4
 8018c2e:	bf38      	it	cc
 8018c30:	2304      	movcc	r3, #4
 8018c32:	441d      	add	r5, r3
 8018c34:	445b      	add	r3, fp
 8018c36:	461e      	mov	r6, r3
 8018c38:	462c      	mov	r4, r5
 8018c3a:	4544      	cmp	r4, r8
 8018c3c:	d30e      	bcc.n	8018c5c <__mdiff+0xf8>
 8018c3e:	f108 0103 	add.w	r1, r8, #3
 8018c42:	1b49      	subs	r1, r1, r5
 8018c44:	f021 0103 	bic.w	r1, r1, #3
 8018c48:	3d03      	subs	r5, #3
 8018c4a:	45a8      	cmp	r8, r5
 8018c4c:	bf38      	it	cc
 8018c4e:	2100      	movcc	r1, #0
 8018c50:	440b      	add	r3, r1
 8018c52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c56:	b191      	cbz	r1, 8018c7e <__mdiff+0x11a>
 8018c58:	6117      	str	r7, [r2, #16]
 8018c5a:	e79d      	b.n	8018b98 <__mdiff+0x34>
 8018c5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8018c60:	46e6      	mov	lr, ip
 8018c62:	0c08      	lsrs	r0, r1, #16
 8018c64:	fa1c fc81 	uxtah	ip, ip, r1
 8018c68:	4471      	add	r1, lr
 8018c6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018c6e:	b289      	uxth	r1, r1
 8018c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018c74:	f846 1b04 	str.w	r1, [r6], #4
 8018c78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018c7c:	e7dd      	b.n	8018c3a <__mdiff+0xd6>
 8018c7e:	3f01      	subs	r7, #1
 8018c80:	e7e7      	b.n	8018c52 <__mdiff+0xee>
 8018c82:	bf00      	nop
 8018c84:	0801ad29 	.word	0x0801ad29
 8018c88:	0801ad9a 	.word	0x0801ad9a

08018c8c <__ulp>:
 8018c8c:	b082      	sub	sp, #8
 8018c8e:	ed8d 0b00 	vstr	d0, [sp]
 8018c92:	9a01      	ldr	r2, [sp, #4]
 8018c94:	4b0f      	ldr	r3, [pc, #60]	@ (8018cd4 <__ulp+0x48>)
 8018c96:	4013      	ands	r3, r2
 8018c98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	dc08      	bgt.n	8018cb2 <__ulp+0x26>
 8018ca0:	425b      	negs	r3, r3
 8018ca2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018ca6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018caa:	da04      	bge.n	8018cb6 <__ulp+0x2a>
 8018cac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018cb0:	4113      	asrs	r3, r2
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	e008      	b.n	8018cc8 <__ulp+0x3c>
 8018cb6:	f1a2 0314 	sub.w	r3, r2, #20
 8018cba:	2b1e      	cmp	r3, #30
 8018cbc:	bfda      	itte	le
 8018cbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018cc2:	40da      	lsrle	r2, r3
 8018cc4:	2201      	movgt	r2, #1
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	4619      	mov	r1, r3
 8018cca:	4610      	mov	r0, r2
 8018ccc:	ec41 0b10 	vmov	d0, r0, r1
 8018cd0:	b002      	add	sp, #8
 8018cd2:	4770      	bx	lr
 8018cd4:	7ff00000 	.word	0x7ff00000

08018cd8 <__b2d>:
 8018cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cdc:	6906      	ldr	r6, [r0, #16]
 8018cde:	f100 0814 	add.w	r8, r0, #20
 8018ce2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018ce6:	1f37      	subs	r7, r6, #4
 8018ce8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018cec:	4610      	mov	r0, r2
 8018cee:	f7ff fd4b 	bl	8018788 <__hi0bits>
 8018cf2:	f1c0 0320 	rsb	r3, r0, #32
 8018cf6:	280a      	cmp	r0, #10
 8018cf8:	600b      	str	r3, [r1, #0]
 8018cfa:	491b      	ldr	r1, [pc, #108]	@ (8018d68 <__b2d+0x90>)
 8018cfc:	dc15      	bgt.n	8018d2a <__b2d+0x52>
 8018cfe:	f1c0 0c0b 	rsb	ip, r0, #11
 8018d02:	fa22 f30c 	lsr.w	r3, r2, ip
 8018d06:	45b8      	cmp	r8, r7
 8018d08:	ea43 0501 	orr.w	r5, r3, r1
 8018d0c:	bf34      	ite	cc
 8018d0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d12:	2300      	movcs	r3, #0
 8018d14:	3015      	adds	r0, #21
 8018d16:	fa02 f000 	lsl.w	r0, r2, r0
 8018d1a:	fa23 f30c 	lsr.w	r3, r3, ip
 8018d1e:	4303      	orrs	r3, r0
 8018d20:	461c      	mov	r4, r3
 8018d22:	ec45 4b10 	vmov	d0, r4, r5
 8018d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2a:	45b8      	cmp	r8, r7
 8018d2c:	bf3a      	itte	cc
 8018d2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d32:	f1a6 0708 	subcc.w	r7, r6, #8
 8018d36:	2300      	movcs	r3, #0
 8018d38:	380b      	subs	r0, #11
 8018d3a:	d012      	beq.n	8018d62 <__b2d+0x8a>
 8018d3c:	f1c0 0120 	rsb	r1, r0, #32
 8018d40:	fa23 f401 	lsr.w	r4, r3, r1
 8018d44:	4082      	lsls	r2, r0
 8018d46:	4322      	orrs	r2, r4
 8018d48:	4547      	cmp	r7, r8
 8018d4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018d4e:	bf8c      	ite	hi
 8018d50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018d54:	2200      	movls	r2, #0
 8018d56:	4083      	lsls	r3, r0
 8018d58:	40ca      	lsrs	r2, r1
 8018d5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018d5e:	4313      	orrs	r3, r2
 8018d60:	e7de      	b.n	8018d20 <__b2d+0x48>
 8018d62:	ea42 0501 	orr.w	r5, r2, r1
 8018d66:	e7db      	b.n	8018d20 <__b2d+0x48>
 8018d68:	3ff00000 	.word	0x3ff00000

08018d6c <__d2b>:
 8018d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d70:	460f      	mov	r7, r1
 8018d72:	2101      	movs	r1, #1
 8018d74:	ec59 8b10 	vmov	r8, r9, d0
 8018d78:	4616      	mov	r6, r2
 8018d7a:	f7ff fc13 	bl	80185a4 <_Balloc>
 8018d7e:	4604      	mov	r4, r0
 8018d80:	b930      	cbnz	r0, 8018d90 <__d2b+0x24>
 8018d82:	4602      	mov	r2, r0
 8018d84:	4b23      	ldr	r3, [pc, #140]	@ (8018e14 <__d2b+0xa8>)
 8018d86:	4824      	ldr	r0, [pc, #144]	@ (8018e18 <__d2b+0xac>)
 8018d88:	f240 310f 	movw	r1, #783	@ 0x30f
 8018d8c:	f000 faf4 	bl	8019378 <__assert_func>
 8018d90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018d94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018d98:	b10d      	cbz	r5, 8018d9e <__d2b+0x32>
 8018d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018d9e:	9301      	str	r3, [sp, #4]
 8018da0:	f1b8 0300 	subs.w	r3, r8, #0
 8018da4:	d023      	beq.n	8018dee <__d2b+0x82>
 8018da6:	4668      	mov	r0, sp
 8018da8:	9300      	str	r3, [sp, #0]
 8018daa:	f7ff fd0c 	bl	80187c6 <__lo0bits>
 8018dae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018db2:	b1d0      	cbz	r0, 8018dea <__d2b+0x7e>
 8018db4:	f1c0 0320 	rsb	r3, r0, #32
 8018db8:	fa02 f303 	lsl.w	r3, r2, r3
 8018dbc:	430b      	orrs	r3, r1
 8018dbe:	40c2      	lsrs	r2, r0
 8018dc0:	6163      	str	r3, [r4, #20]
 8018dc2:	9201      	str	r2, [sp, #4]
 8018dc4:	9b01      	ldr	r3, [sp, #4]
 8018dc6:	61a3      	str	r3, [r4, #24]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	bf0c      	ite	eq
 8018dcc:	2201      	moveq	r2, #1
 8018dce:	2202      	movne	r2, #2
 8018dd0:	6122      	str	r2, [r4, #16]
 8018dd2:	b1a5      	cbz	r5, 8018dfe <__d2b+0x92>
 8018dd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018dd8:	4405      	add	r5, r0
 8018dda:	603d      	str	r5, [r7, #0]
 8018ddc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018de0:	6030      	str	r0, [r6, #0]
 8018de2:	4620      	mov	r0, r4
 8018de4:	b003      	add	sp, #12
 8018de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dea:	6161      	str	r1, [r4, #20]
 8018dec:	e7ea      	b.n	8018dc4 <__d2b+0x58>
 8018dee:	a801      	add	r0, sp, #4
 8018df0:	f7ff fce9 	bl	80187c6 <__lo0bits>
 8018df4:	9b01      	ldr	r3, [sp, #4]
 8018df6:	6163      	str	r3, [r4, #20]
 8018df8:	3020      	adds	r0, #32
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	e7e8      	b.n	8018dd0 <__d2b+0x64>
 8018dfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018e06:	6038      	str	r0, [r7, #0]
 8018e08:	6918      	ldr	r0, [r3, #16]
 8018e0a:	f7ff fcbd 	bl	8018788 <__hi0bits>
 8018e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018e12:	e7e5      	b.n	8018de0 <__d2b+0x74>
 8018e14:	0801ad29 	.word	0x0801ad29
 8018e18:	0801ad9a 	.word	0x0801ad9a

08018e1c <__ratio>:
 8018e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e20:	4688      	mov	r8, r1
 8018e22:	4669      	mov	r1, sp
 8018e24:	4681      	mov	r9, r0
 8018e26:	f7ff ff57 	bl	8018cd8 <__b2d>
 8018e2a:	a901      	add	r1, sp, #4
 8018e2c:	4640      	mov	r0, r8
 8018e2e:	ec55 4b10 	vmov	r4, r5, d0
 8018e32:	f7ff ff51 	bl	8018cd8 <__b2d>
 8018e36:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e3a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018e3e:	1ad2      	subs	r2, r2, r3
 8018e40:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018e44:	1a5b      	subs	r3, r3, r1
 8018e46:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018e4a:	ec57 6b10 	vmov	r6, r7, d0
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	bfd6      	itet	le
 8018e52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e56:	462a      	movgt	r2, r5
 8018e58:	463a      	movle	r2, r7
 8018e5a:	46ab      	mov	fp, r5
 8018e5c:	46a2      	mov	sl, r4
 8018e5e:	bfce      	itee	gt
 8018e60:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018e64:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018e68:	ee00 3a90 	vmovle	s1, r3
 8018e6c:	ec4b ab17 	vmov	d7, sl, fp
 8018e70:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018e74:	b003      	add	sp, #12
 8018e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e7a <__copybits>:
 8018e7a:	3901      	subs	r1, #1
 8018e7c:	b570      	push	{r4, r5, r6, lr}
 8018e7e:	1149      	asrs	r1, r1, #5
 8018e80:	6914      	ldr	r4, [r2, #16]
 8018e82:	3101      	adds	r1, #1
 8018e84:	f102 0314 	add.w	r3, r2, #20
 8018e88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018e8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018e90:	1f05      	subs	r5, r0, #4
 8018e92:	42a3      	cmp	r3, r4
 8018e94:	d30c      	bcc.n	8018eb0 <__copybits+0x36>
 8018e96:	1aa3      	subs	r3, r4, r2
 8018e98:	3b11      	subs	r3, #17
 8018e9a:	f023 0303 	bic.w	r3, r3, #3
 8018e9e:	3211      	adds	r2, #17
 8018ea0:	42a2      	cmp	r2, r4
 8018ea2:	bf88      	it	hi
 8018ea4:	2300      	movhi	r3, #0
 8018ea6:	4418      	add	r0, r3
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	4288      	cmp	r0, r1
 8018eac:	d305      	bcc.n	8018eba <__copybits+0x40>
 8018eae:	bd70      	pop	{r4, r5, r6, pc}
 8018eb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8018eb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8018eb8:	e7eb      	b.n	8018e92 <__copybits+0x18>
 8018eba:	f840 3b04 	str.w	r3, [r0], #4
 8018ebe:	e7f4      	b.n	8018eaa <__copybits+0x30>

08018ec0 <__any_on>:
 8018ec0:	f100 0214 	add.w	r2, r0, #20
 8018ec4:	6900      	ldr	r0, [r0, #16]
 8018ec6:	114b      	asrs	r3, r1, #5
 8018ec8:	4298      	cmp	r0, r3
 8018eca:	b510      	push	{r4, lr}
 8018ecc:	db11      	blt.n	8018ef2 <__any_on+0x32>
 8018ece:	dd0a      	ble.n	8018ee6 <__any_on+0x26>
 8018ed0:	f011 011f 	ands.w	r1, r1, #31
 8018ed4:	d007      	beq.n	8018ee6 <__any_on+0x26>
 8018ed6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018eda:	fa24 f001 	lsr.w	r0, r4, r1
 8018ede:	fa00 f101 	lsl.w	r1, r0, r1
 8018ee2:	428c      	cmp	r4, r1
 8018ee4:	d10b      	bne.n	8018efe <__any_on+0x3e>
 8018ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d803      	bhi.n	8018ef6 <__any_on+0x36>
 8018eee:	2000      	movs	r0, #0
 8018ef0:	bd10      	pop	{r4, pc}
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	e7f7      	b.n	8018ee6 <__any_on+0x26>
 8018ef6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018efa:	2900      	cmp	r1, #0
 8018efc:	d0f5      	beq.n	8018eea <__any_on+0x2a>
 8018efe:	2001      	movs	r0, #1
 8018f00:	e7f6      	b.n	8018ef0 <__any_on+0x30>

08018f02 <__ascii_wctomb>:
 8018f02:	4603      	mov	r3, r0
 8018f04:	4608      	mov	r0, r1
 8018f06:	b141      	cbz	r1, 8018f1a <__ascii_wctomb+0x18>
 8018f08:	2aff      	cmp	r2, #255	@ 0xff
 8018f0a:	d904      	bls.n	8018f16 <__ascii_wctomb+0x14>
 8018f0c:	228a      	movs	r2, #138	@ 0x8a
 8018f0e:	601a      	str	r2, [r3, #0]
 8018f10:	f04f 30ff 	mov.w	r0, #4294967295
 8018f14:	4770      	bx	lr
 8018f16:	700a      	strb	r2, [r1, #0]
 8018f18:	2001      	movs	r0, #1
 8018f1a:	4770      	bx	lr

08018f1c <__ssputs_r>:
 8018f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f20:	688e      	ldr	r6, [r1, #8]
 8018f22:	461f      	mov	r7, r3
 8018f24:	42be      	cmp	r6, r7
 8018f26:	680b      	ldr	r3, [r1, #0]
 8018f28:	4682      	mov	sl, r0
 8018f2a:	460c      	mov	r4, r1
 8018f2c:	4690      	mov	r8, r2
 8018f2e:	d82d      	bhi.n	8018f8c <__ssputs_r+0x70>
 8018f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018f38:	d026      	beq.n	8018f88 <__ssputs_r+0x6c>
 8018f3a:	6965      	ldr	r5, [r4, #20]
 8018f3c:	6909      	ldr	r1, [r1, #16]
 8018f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f42:	eba3 0901 	sub.w	r9, r3, r1
 8018f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018f4a:	1c7b      	adds	r3, r7, #1
 8018f4c:	444b      	add	r3, r9
 8018f4e:	106d      	asrs	r5, r5, #1
 8018f50:	429d      	cmp	r5, r3
 8018f52:	bf38      	it	cc
 8018f54:	461d      	movcc	r5, r3
 8018f56:	0553      	lsls	r3, r2, #21
 8018f58:	d527      	bpl.n	8018faa <__ssputs_r+0x8e>
 8018f5a:	4629      	mov	r1, r5
 8018f5c:	f7ff fa84 	bl	8018468 <_malloc_r>
 8018f60:	4606      	mov	r6, r0
 8018f62:	b360      	cbz	r0, 8018fbe <__ssputs_r+0xa2>
 8018f64:	6921      	ldr	r1, [r4, #16]
 8018f66:	464a      	mov	r2, r9
 8018f68:	f7fe f8d9 	bl	801711e <memcpy>
 8018f6c:	89a3      	ldrh	r3, [r4, #12]
 8018f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018f76:	81a3      	strh	r3, [r4, #12]
 8018f78:	6126      	str	r6, [r4, #16]
 8018f7a:	6165      	str	r5, [r4, #20]
 8018f7c:	444e      	add	r6, r9
 8018f7e:	eba5 0509 	sub.w	r5, r5, r9
 8018f82:	6026      	str	r6, [r4, #0]
 8018f84:	60a5      	str	r5, [r4, #8]
 8018f86:	463e      	mov	r6, r7
 8018f88:	42be      	cmp	r6, r7
 8018f8a:	d900      	bls.n	8018f8e <__ssputs_r+0x72>
 8018f8c:	463e      	mov	r6, r7
 8018f8e:	6820      	ldr	r0, [r4, #0]
 8018f90:	4632      	mov	r2, r6
 8018f92:	4641      	mov	r1, r8
 8018f94:	f000 f9c6 	bl	8019324 <memmove>
 8018f98:	68a3      	ldr	r3, [r4, #8]
 8018f9a:	1b9b      	subs	r3, r3, r6
 8018f9c:	60a3      	str	r3, [r4, #8]
 8018f9e:	6823      	ldr	r3, [r4, #0]
 8018fa0:	4433      	add	r3, r6
 8018fa2:	6023      	str	r3, [r4, #0]
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018faa:	462a      	mov	r2, r5
 8018fac:	f000 fa16 	bl	80193dc <_realloc_r>
 8018fb0:	4606      	mov	r6, r0
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	d1e0      	bne.n	8018f78 <__ssputs_r+0x5c>
 8018fb6:	6921      	ldr	r1, [r4, #16]
 8018fb8:	4650      	mov	r0, sl
 8018fba:	f7fe fea7 	bl	8017d0c <_free_r>
 8018fbe:	230c      	movs	r3, #12
 8018fc0:	f8ca 3000 	str.w	r3, [sl]
 8018fc4:	89a3      	ldrh	r3, [r4, #12]
 8018fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018fca:	81a3      	strh	r3, [r4, #12]
 8018fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8018fd0:	e7e9      	b.n	8018fa6 <__ssputs_r+0x8a>
	...

08018fd4 <_svfiprintf_r>:
 8018fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd8:	4698      	mov	r8, r3
 8018fda:	898b      	ldrh	r3, [r1, #12]
 8018fdc:	061b      	lsls	r3, r3, #24
 8018fde:	b09d      	sub	sp, #116	@ 0x74
 8018fe0:	4607      	mov	r7, r0
 8018fe2:	460d      	mov	r5, r1
 8018fe4:	4614      	mov	r4, r2
 8018fe6:	d510      	bpl.n	801900a <_svfiprintf_r+0x36>
 8018fe8:	690b      	ldr	r3, [r1, #16]
 8018fea:	b973      	cbnz	r3, 801900a <_svfiprintf_r+0x36>
 8018fec:	2140      	movs	r1, #64	@ 0x40
 8018fee:	f7ff fa3b 	bl	8018468 <_malloc_r>
 8018ff2:	6028      	str	r0, [r5, #0]
 8018ff4:	6128      	str	r0, [r5, #16]
 8018ff6:	b930      	cbnz	r0, 8019006 <_svfiprintf_r+0x32>
 8018ff8:	230c      	movs	r3, #12
 8018ffa:	603b      	str	r3, [r7, #0]
 8018ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8019000:	b01d      	add	sp, #116	@ 0x74
 8019002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019006:	2340      	movs	r3, #64	@ 0x40
 8019008:	616b      	str	r3, [r5, #20]
 801900a:	2300      	movs	r3, #0
 801900c:	9309      	str	r3, [sp, #36]	@ 0x24
 801900e:	2320      	movs	r3, #32
 8019010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019014:	f8cd 800c 	str.w	r8, [sp, #12]
 8019018:	2330      	movs	r3, #48	@ 0x30
 801901a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80191b8 <_svfiprintf_r+0x1e4>
 801901e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019022:	f04f 0901 	mov.w	r9, #1
 8019026:	4623      	mov	r3, r4
 8019028:	469a      	mov	sl, r3
 801902a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801902e:	b10a      	cbz	r2, 8019034 <_svfiprintf_r+0x60>
 8019030:	2a25      	cmp	r2, #37	@ 0x25
 8019032:	d1f9      	bne.n	8019028 <_svfiprintf_r+0x54>
 8019034:	ebba 0b04 	subs.w	fp, sl, r4
 8019038:	d00b      	beq.n	8019052 <_svfiprintf_r+0x7e>
 801903a:	465b      	mov	r3, fp
 801903c:	4622      	mov	r2, r4
 801903e:	4629      	mov	r1, r5
 8019040:	4638      	mov	r0, r7
 8019042:	f7ff ff6b 	bl	8018f1c <__ssputs_r>
 8019046:	3001      	adds	r0, #1
 8019048:	f000 80a7 	beq.w	801919a <_svfiprintf_r+0x1c6>
 801904c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801904e:	445a      	add	r2, fp
 8019050:	9209      	str	r2, [sp, #36]	@ 0x24
 8019052:	f89a 3000 	ldrb.w	r3, [sl]
 8019056:	2b00      	cmp	r3, #0
 8019058:	f000 809f 	beq.w	801919a <_svfiprintf_r+0x1c6>
 801905c:	2300      	movs	r3, #0
 801905e:	f04f 32ff 	mov.w	r2, #4294967295
 8019062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019066:	f10a 0a01 	add.w	sl, sl, #1
 801906a:	9304      	str	r3, [sp, #16]
 801906c:	9307      	str	r3, [sp, #28]
 801906e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019072:	931a      	str	r3, [sp, #104]	@ 0x68
 8019074:	4654      	mov	r4, sl
 8019076:	2205      	movs	r2, #5
 8019078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801907c:	484e      	ldr	r0, [pc, #312]	@ (80191b8 <_svfiprintf_r+0x1e4>)
 801907e:	f7e7 f957 	bl	8000330 <memchr>
 8019082:	9a04      	ldr	r2, [sp, #16]
 8019084:	b9d8      	cbnz	r0, 80190be <_svfiprintf_r+0xea>
 8019086:	06d0      	lsls	r0, r2, #27
 8019088:	bf44      	itt	mi
 801908a:	2320      	movmi	r3, #32
 801908c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019090:	0711      	lsls	r1, r2, #28
 8019092:	bf44      	itt	mi
 8019094:	232b      	movmi	r3, #43	@ 0x2b
 8019096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801909a:	f89a 3000 	ldrb.w	r3, [sl]
 801909e:	2b2a      	cmp	r3, #42	@ 0x2a
 80190a0:	d015      	beq.n	80190ce <_svfiprintf_r+0xfa>
 80190a2:	9a07      	ldr	r2, [sp, #28]
 80190a4:	4654      	mov	r4, sl
 80190a6:	2000      	movs	r0, #0
 80190a8:	f04f 0c0a 	mov.w	ip, #10
 80190ac:	4621      	mov	r1, r4
 80190ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190b2:	3b30      	subs	r3, #48	@ 0x30
 80190b4:	2b09      	cmp	r3, #9
 80190b6:	d94b      	bls.n	8019150 <_svfiprintf_r+0x17c>
 80190b8:	b1b0      	cbz	r0, 80190e8 <_svfiprintf_r+0x114>
 80190ba:	9207      	str	r2, [sp, #28]
 80190bc:	e014      	b.n	80190e8 <_svfiprintf_r+0x114>
 80190be:	eba0 0308 	sub.w	r3, r0, r8
 80190c2:	fa09 f303 	lsl.w	r3, r9, r3
 80190c6:	4313      	orrs	r3, r2
 80190c8:	9304      	str	r3, [sp, #16]
 80190ca:	46a2      	mov	sl, r4
 80190cc:	e7d2      	b.n	8019074 <_svfiprintf_r+0xa0>
 80190ce:	9b03      	ldr	r3, [sp, #12]
 80190d0:	1d19      	adds	r1, r3, #4
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	9103      	str	r1, [sp, #12]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	bfbb      	ittet	lt
 80190da:	425b      	neglt	r3, r3
 80190dc:	f042 0202 	orrlt.w	r2, r2, #2
 80190e0:	9307      	strge	r3, [sp, #28]
 80190e2:	9307      	strlt	r3, [sp, #28]
 80190e4:	bfb8      	it	lt
 80190e6:	9204      	strlt	r2, [sp, #16]
 80190e8:	7823      	ldrb	r3, [r4, #0]
 80190ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80190ec:	d10a      	bne.n	8019104 <_svfiprintf_r+0x130>
 80190ee:	7863      	ldrb	r3, [r4, #1]
 80190f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80190f2:	d132      	bne.n	801915a <_svfiprintf_r+0x186>
 80190f4:	9b03      	ldr	r3, [sp, #12]
 80190f6:	1d1a      	adds	r2, r3, #4
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	9203      	str	r2, [sp, #12]
 80190fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019100:	3402      	adds	r4, #2
 8019102:	9305      	str	r3, [sp, #20]
 8019104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80191c8 <_svfiprintf_r+0x1f4>
 8019108:	7821      	ldrb	r1, [r4, #0]
 801910a:	2203      	movs	r2, #3
 801910c:	4650      	mov	r0, sl
 801910e:	f7e7 f90f 	bl	8000330 <memchr>
 8019112:	b138      	cbz	r0, 8019124 <_svfiprintf_r+0x150>
 8019114:	9b04      	ldr	r3, [sp, #16]
 8019116:	eba0 000a 	sub.w	r0, r0, sl
 801911a:	2240      	movs	r2, #64	@ 0x40
 801911c:	4082      	lsls	r2, r0
 801911e:	4313      	orrs	r3, r2
 8019120:	3401      	adds	r4, #1
 8019122:	9304      	str	r3, [sp, #16]
 8019124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019128:	4824      	ldr	r0, [pc, #144]	@ (80191bc <_svfiprintf_r+0x1e8>)
 801912a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801912e:	2206      	movs	r2, #6
 8019130:	f7e7 f8fe 	bl	8000330 <memchr>
 8019134:	2800      	cmp	r0, #0
 8019136:	d036      	beq.n	80191a6 <_svfiprintf_r+0x1d2>
 8019138:	4b21      	ldr	r3, [pc, #132]	@ (80191c0 <_svfiprintf_r+0x1ec>)
 801913a:	bb1b      	cbnz	r3, 8019184 <_svfiprintf_r+0x1b0>
 801913c:	9b03      	ldr	r3, [sp, #12]
 801913e:	3307      	adds	r3, #7
 8019140:	f023 0307 	bic.w	r3, r3, #7
 8019144:	3308      	adds	r3, #8
 8019146:	9303      	str	r3, [sp, #12]
 8019148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801914a:	4433      	add	r3, r6
 801914c:	9309      	str	r3, [sp, #36]	@ 0x24
 801914e:	e76a      	b.n	8019026 <_svfiprintf_r+0x52>
 8019150:	fb0c 3202 	mla	r2, ip, r2, r3
 8019154:	460c      	mov	r4, r1
 8019156:	2001      	movs	r0, #1
 8019158:	e7a8      	b.n	80190ac <_svfiprintf_r+0xd8>
 801915a:	2300      	movs	r3, #0
 801915c:	3401      	adds	r4, #1
 801915e:	9305      	str	r3, [sp, #20]
 8019160:	4619      	mov	r1, r3
 8019162:	f04f 0c0a 	mov.w	ip, #10
 8019166:	4620      	mov	r0, r4
 8019168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801916c:	3a30      	subs	r2, #48	@ 0x30
 801916e:	2a09      	cmp	r2, #9
 8019170:	d903      	bls.n	801917a <_svfiprintf_r+0x1a6>
 8019172:	2b00      	cmp	r3, #0
 8019174:	d0c6      	beq.n	8019104 <_svfiprintf_r+0x130>
 8019176:	9105      	str	r1, [sp, #20]
 8019178:	e7c4      	b.n	8019104 <_svfiprintf_r+0x130>
 801917a:	fb0c 2101 	mla	r1, ip, r1, r2
 801917e:	4604      	mov	r4, r0
 8019180:	2301      	movs	r3, #1
 8019182:	e7f0      	b.n	8019166 <_svfiprintf_r+0x192>
 8019184:	ab03      	add	r3, sp, #12
 8019186:	9300      	str	r3, [sp, #0]
 8019188:	462a      	mov	r2, r5
 801918a:	4b0e      	ldr	r3, [pc, #56]	@ (80191c4 <_svfiprintf_r+0x1f0>)
 801918c:	a904      	add	r1, sp, #16
 801918e:	4638      	mov	r0, r7
 8019190:	f7fd fa5a 	bl	8016648 <_printf_float>
 8019194:	1c42      	adds	r2, r0, #1
 8019196:	4606      	mov	r6, r0
 8019198:	d1d6      	bne.n	8019148 <_svfiprintf_r+0x174>
 801919a:	89ab      	ldrh	r3, [r5, #12]
 801919c:	065b      	lsls	r3, r3, #25
 801919e:	f53f af2d 	bmi.w	8018ffc <_svfiprintf_r+0x28>
 80191a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80191a4:	e72c      	b.n	8019000 <_svfiprintf_r+0x2c>
 80191a6:	ab03      	add	r3, sp, #12
 80191a8:	9300      	str	r3, [sp, #0]
 80191aa:	462a      	mov	r2, r5
 80191ac:	4b05      	ldr	r3, [pc, #20]	@ (80191c4 <_svfiprintf_r+0x1f0>)
 80191ae:	a904      	add	r1, sp, #16
 80191b0:	4638      	mov	r0, r7
 80191b2:	f7fd fcd1 	bl	8016b58 <_printf_i>
 80191b6:	e7ed      	b.n	8019194 <_svfiprintf_r+0x1c0>
 80191b8:	0801aef0 	.word	0x0801aef0
 80191bc:	0801aefa 	.word	0x0801aefa
 80191c0:	08016649 	.word	0x08016649
 80191c4:	08018f1d 	.word	0x08018f1d
 80191c8:	0801aef6 	.word	0x0801aef6

080191cc <__sflush_r>:
 80191cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80191d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d4:	0716      	lsls	r6, r2, #28
 80191d6:	4605      	mov	r5, r0
 80191d8:	460c      	mov	r4, r1
 80191da:	d454      	bmi.n	8019286 <__sflush_r+0xba>
 80191dc:	684b      	ldr	r3, [r1, #4]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	dc02      	bgt.n	80191e8 <__sflush_r+0x1c>
 80191e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	dd48      	ble.n	801927a <__sflush_r+0xae>
 80191e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80191ea:	2e00      	cmp	r6, #0
 80191ec:	d045      	beq.n	801927a <__sflush_r+0xae>
 80191ee:	2300      	movs	r3, #0
 80191f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80191f4:	682f      	ldr	r7, [r5, #0]
 80191f6:	6a21      	ldr	r1, [r4, #32]
 80191f8:	602b      	str	r3, [r5, #0]
 80191fa:	d030      	beq.n	801925e <__sflush_r+0x92>
 80191fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80191fe:	89a3      	ldrh	r3, [r4, #12]
 8019200:	0759      	lsls	r1, r3, #29
 8019202:	d505      	bpl.n	8019210 <__sflush_r+0x44>
 8019204:	6863      	ldr	r3, [r4, #4]
 8019206:	1ad2      	subs	r2, r2, r3
 8019208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801920a:	b10b      	cbz	r3, 8019210 <__sflush_r+0x44>
 801920c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801920e:	1ad2      	subs	r2, r2, r3
 8019210:	2300      	movs	r3, #0
 8019212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019214:	6a21      	ldr	r1, [r4, #32]
 8019216:	4628      	mov	r0, r5
 8019218:	47b0      	blx	r6
 801921a:	1c43      	adds	r3, r0, #1
 801921c:	89a3      	ldrh	r3, [r4, #12]
 801921e:	d106      	bne.n	801922e <__sflush_r+0x62>
 8019220:	6829      	ldr	r1, [r5, #0]
 8019222:	291d      	cmp	r1, #29
 8019224:	d82b      	bhi.n	801927e <__sflush_r+0xb2>
 8019226:	4a2a      	ldr	r2, [pc, #168]	@ (80192d0 <__sflush_r+0x104>)
 8019228:	410a      	asrs	r2, r1
 801922a:	07d6      	lsls	r6, r2, #31
 801922c:	d427      	bmi.n	801927e <__sflush_r+0xb2>
 801922e:	2200      	movs	r2, #0
 8019230:	6062      	str	r2, [r4, #4]
 8019232:	04d9      	lsls	r1, r3, #19
 8019234:	6922      	ldr	r2, [r4, #16]
 8019236:	6022      	str	r2, [r4, #0]
 8019238:	d504      	bpl.n	8019244 <__sflush_r+0x78>
 801923a:	1c42      	adds	r2, r0, #1
 801923c:	d101      	bne.n	8019242 <__sflush_r+0x76>
 801923e:	682b      	ldr	r3, [r5, #0]
 8019240:	b903      	cbnz	r3, 8019244 <__sflush_r+0x78>
 8019242:	6560      	str	r0, [r4, #84]	@ 0x54
 8019244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019246:	602f      	str	r7, [r5, #0]
 8019248:	b1b9      	cbz	r1, 801927a <__sflush_r+0xae>
 801924a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801924e:	4299      	cmp	r1, r3
 8019250:	d002      	beq.n	8019258 <__sflush_r+0x8c>
 8019252:	4628      	mov	r0, r5
 8019254:	f7fe fd5a 	bl	8017d0c <_free_r>
 8019258:	2300      	movs	r3, #0
 801925a:	6363      	str	r3, [r4, #52]	@ 0x34
 801925c:	e00d      	b.n	801927a <__sflush_r+0xae>
 801925e:	2301      	movs	r3, #1
 8019260:	4628      	mov	r0, r5
 8019262:	47b0      	blx	r6
 8019264:	4602      	mov	r2, r0
 8019266:	1c50      	adds	r0, r2, #1
 8019268:	d1c9      	bne.n	80191fe <__sflush_r+0x32>
 801926a:	682b      	ldr	r3, [r5, #0]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d0c6      	beq.n	80191fe <__sflush_r+0x32>
 8019270:	2b1d      	cmp	r3, #29
 8019272:	d001      	beq.n	8019278 <__sflush_r+0xac>
 8019274:	2b16      	cmp	r3, #22
 8019276:	d11e      	bne.n	80192b6 <__sflush_r+0xea>
 8019278:	602f      	str	r7, [r5, #0]
 801927a:	2000      	movs	r0, #0
 801927c:	e022      	b.n	80192c4 <__sflush_r+0xf8>
 801927e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019282:	b21b      	sxth	r3, r3
 8019284:	e01b      	b.n	80192be <__sflush_r+0xf2>
 8019286:	690f      	ldr	r7, [r1, #16]
 8019288:	2f00      	cmp	r7, #0
 801928a:	d0f6      	beq.n	801927a <__sflush_r+0xae>
 801928c:	0793      	lsls	r3, r2, #30
 801928e:	680e      	ldr	r6, [r1, #0]
 8019290:	bf08      	it	eq
 8019292:	694b      	ldreq	r3, [r1, #20]
 8019294:	600f      	str	r7, [r1, #0]
 8019296:	bf18      	it	ne
 8019298:	2300      	movne	r3, #0
 801929a:	eba6 0807 	sub.w	r8, r6, r7
 801929e:	608b      	str	r3, [r1, #8]
 80192a0:	f1b8 0f00 	cmp.w	r8, #0
 80192a4:	dde9      	ble.n	801927a <__sflush_r+0xae>
 80192a6:	6a21      	ldr	r1, [r4, #32]
 80192a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80192aa:	4643      	mov	r3, r8
 80192ac:	463a      	mov	r2, r7
 80192ae:	4628      	mov	r0, r5
 80192b0:	47b0      	blx	r6
 80192b2:	2800      	cmp	r0, #0
 80192b4:	dc08      	bgt.n	80192c8 <__sflush_r+0xfc>
 80192b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80192be:	81a3      	strh	r3, [r4, #12]
 80192c0:	f04f 30ff 	mov.w	r0, #4294967295
 80192c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c8:	4407      	add	r7, r0
 80192ca:	eba8 0800 	sub.w	r8, r8, r0
 80192ce:	e7e7      	b.n	80192a0 <__sflush_r+0xd4>
 80192d0:	dfbffffe 	.word	0xdfbffffe

080192d4 <_fflush_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	690b      	ldr	r3, [r1, #16]
 80192d8:	4605      	mov	r5, r0
 80192da:	460c      	mov	r4, r1
 80192dc:	b913      	cbnz	r3, 80192e4 <_fflush_r+0x10>
 80192de:	2500      	movs	r5, #0
 80192e0:	4628      	mov	r0, r5
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	b118      	cbz	r0, 80192ee <_fflush_r+0x1a>
 80192e6:	6a03      	ldr	r3, [r0, #32]
 80192e8:	b90b      	cbnz	r3, 80192ee <_fflush_r+0x1a>
 80192ea:	f7fd fde1 	bl	8016eb0 <__sinit>
 80192ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d0f3      	beq.n	80192de <_fflush_r+0xa>
 80192f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80192f8:	07d0      	lsls	r0, r2, #31
 80192fa:	d404      	bmi.n	8019306 <_fflush_r+0x32>
 80192fc:	0599      	lsls	r1, r3, #22
 80192fe:	d402      	bmi.n	8019306 <_fflush_r+0x32>
 8019300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019302:	f7fd ff0a 	bl	801711a <__retarget_lock_acquire_recursive>
 8019306:	4628      	mov	r0, r5
 8019308:	4621      	mov	r1, r4
 801930a:	f7ff ff5f 	bl	80191cc <__sflush_r>
 801930e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019310:	07da      	lsls	r2, r3, #31
 8019312:	4605      	mov	r5, r0
 8019314:	d4e4      	bmi.n	80192e0 <_fflush_r+0xc>
 8019316:	89a3      	ldrh	r3, [r4, #12]
 8019318:	059b      	lsls	r3, r3, #22
 801931a:	d4e1      	bmi.n	80192e0 <_fflush_r+0xc>
 801931c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801931e:	f7fd fefd 	bl	801711c <__retarget_lock_release_recursive>
 8019322:	e7dd      	b.n	80192e0 <_fflush_r+0xc>

08019324 <memmove>:
 8019324:	4288      	cmp	r0, r1
 8019326:	b510      	push	{r4, lr}
 8019328:	eb01 0402 	add.w	r4, r1, r2
 801932c:	d902      	bls.n	8019334 <memmove+0x10>
 801932e:	4284      	cmp	r4, r0
 8019330:	4623      	mov	r3, r4
 8019332:	d807      	bhi.n	8019344 <memmove+0x20>
 8019334:	1e43      	subs	r3, r0, #1
 8019336:	42a1      	cmp	r1, r4
 8019338:	d008      	beq.n	801934c <memmove+0x28>
 801933a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801933e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019342:	e7f8      	b.n	8019336 <memmove+0x12>
 8019344:	4402      	add	r2, r0
 8019346:	4601      	mov	r1, r0
 8019348:	428a      	cmp	r2, r1
 801934a:	d100      	bne.n	801934e <memmove+0x2a>
 801934c:	bd10      	pop	{r4, pc}
 801934e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019356:	e7f7      	b.n	8019348 <memmove+0x24>

08019358 <_sbrk_r>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4d06      	ldr	r5, [pc, #24]	@ (8019374 <_sbrk_r+0x1c>)
 801935c:	2300      	movs	r3, #0
 801935e:	4604      	mov	r4, r0
 8019360:	4608      	mov	r0, r1
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	f7e9 f8d8 	bl	8002518 <_sbrk>
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	d102      	bne.n	8019372 <_sbrk_r+0x1a>
 801936c:	682b      	ldr	r3, [r5, #0]
 801936e:	b103      	cbz	r3, 8019372 <_sbrk_r+0x1a>
 8019370:	6023      	str	r3, [r4, #0]
 8019372:	bd38      	pop	{r3, r4, r5, pc}
 8019374:	24006234 	.word	0x24006234

08019378 <__assert_func>:
 8019378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801937a:	4614      	mov	r4, r2
 801937c:	461a      	mov	r2, r3
 801937e:	4b09      	ldr	r3, [pc, #36]	@ (80193a4 <__assert_func+0x2c>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	4605      	mov	r5, r0
 8019384:	68d8      	ldr	r0, [r3, #12]
 8019386:	b954      	cbnz	r4, 801939e <__assert_func+0x26>
 8019388:	4b07      	ldr	r3, [pc, #28]	@ (80193a8 <__assert_func+0x30>)
 801938a:	461c      	mov	r4, r3
 801938c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019390:	9100      	str	r1, [sp, #0]
 8019392:	462b      	mov	r3, r5
 8019394:	4905      	ldr	r1, [pc, #20]	@ (80193ac <__assert_func+0x34>)
 8019396:	f000 f84f 	bl	8019438 <fiprintf>
 801939a:	f000 f85f 	bl	801945c <abort>
 801939e:	4b04      	ldr	r3, [pc, #16]	@ (80193b0 <__assert_func+0x38>)
 80193a0:	e7f4      	b.n	801938c <__assert_func+0x14>
 80193a2:	bf00      	nop
 80193a4:	2400027c 	.word	0x2400027c
 80193a8:	0801af3c 	.word	0x0801af3c
 80193ac:	0801af0e 	.word	0x0801af0e
 80193b0:	0801af01 	.word	0x0801af01

080193b4 <_calloc_r>:
 80193b4:	b570      	push	{r4, r5, r6, lr}
 80193b6:	fba1 5402 	umull	r5, r4, r1, r2
 80193ba:	b93c      	cbnz	r4, 80193cc <_calloc_r+0x18>
 80193bc:	4629      	mov	r1, r5
 80193be:	f7ff f853 	bl	8018468 <_malloc_r>
 80193c2:	4606      	mov	r6, r0
 80193c4:	b928      	cbnz	r0, 80193d2 <_calloc_r+0x1e>
 80193c6:	2600      	movs	r6, #0
 80193c8:	4630      	mov	r0, r6
 80193ca:	bd70      	pop	{r4, r5, r6, pc}
 80193cc:	220c      	movs	r2, #12
 80193ce:	6002      	str	r2, [r0, #0]
 80193d0:	e7f9      	b.n	80193c6 <_calloc_r+0x12>
 80193d2:	462a      	mov	r2, r5
 80193d4:	4621      	mov	r1, r4
 80193d6:	f7fd fe04 	bl	8016fe2 <memset>
 80193da:	e7f5      	b.n	80193c8 <_calloc_r+0x14>

080193dc <_realloc_r>:
 80193dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193e0:	4680      	mov	r8, r0
 80193e2:	4615      	mov	r5, r2
 80193e4:	460c      	mov	r4, r1
 80193e6:	b921      	cbnz	r1, 80193f2 <_realloc_r+0x16>
 80193e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193ec:	4611      	mov	r1, r2
 80193ee:	f7ff b83b 	b.w	8018468 <_malloc_r>
 80193f2:	b92a      	cbnz	r2, 8019400 <_realloc_r+0x24>
 80193f4:	f7fe fc8a 	bl	8017d0c <_free_r>
 80193f8:	2400      	movs	r4, #0
 80193fa:	4620      	mov	r0, r4
 80193fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019400:	f000 f833 	bl	801946a <_malloc_usable_size_r>
 8019404:	4285      	cmp	r5, r0
 8019406:	4606      	mov	r6, r0
 8019408:	d802      	bhi.n	8019410 <_realloc_r+0x34>
 801940a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801940e:	d8f4      	bhi.n	80193fa <_realloc_r+0x1e>
 8019410:	4629      	mov	r1, r5
 8019412:	4640      	mov	r0, r8
 8019414:	f7ff f828 	bl	8018468 <_malloc_r>
 8019418:	4607      	mov	r7, r0
 801941a:	2800      	cmp	r0, #0
 801941c:	d0ec      	beq.n	80193f8 <_realloc_r+0x1c>
 801941e:	42b5      	cmp	r5, r6
 8019420:	462a      	mov	r2, r5
 8019422:	4621      	mov	r1, r4
 8019424:	bf28      	it	cs
 8019426:	4632      	movcs	r2, r6
 8019428:	f7fd fe79 	bl	801711e <memcpy>
 801942c:	4621      	mov	r1, r4
 801942e:	4640      	mov	r0, r8
 8019430:	f7fe fc6c 	bl	8017d0c <_free_r>
 8019434:	463c      	mov	r4, r7
 8019436:	e7e0      	b.n	80193fa <_realloc_r+0x1e>

08019438 <fiprintf>:
 8019438:	b40e      	push	{r1, r2, r3}
 801943a:	b503      	push	{r0, r1, lr}
 801943c:	4601      	mov	r1, r0
 801943e:	ab03      	add	r3, sp, #12
 8019440:	4805      	ldr	r0, [pc, #20]	@ (8019458 <fiprintf+0x20>)
 8019442:	f853 2b04 	ldr.w	r2, [r3], #4
 8019446:	6800      	ldr	r0, [r0, #0]
 8019448:	9301      	str	r3, [sp, #4]
 801944a:	f000 f83f 	bl	80194cc <_vfiprintf_r>
 801944e:	b002      	add	sp, #8
 8019450:	f85d eb04 	ldr.w	lr, [sp], #4
 8019454:	b003      	add	sp, #12
 8019456:	4770      	bx	lr
 8019458:	2400027c 	.word	0x2400027c

0801945c <abort>:
 801945c:	b508      	push	{r3, lr}
 801945e:	2006      	movs	r0, #6
 8019460:	f000 fa08 	bl	8019874 <raise>
 8019464:	2001      	movs	r0, #1
 8019466:	f7e8 ffdf 	bl	8002428 <_exit>

0801946a <_malloc_usable_size_r>:
 801946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801946e:	1f18      	subs	r0, r3, #4
 8019470:	2b00      	cmp	r3, #0
 8019472:	bfbc      	itt	lt
 8019474:	580b      	ldrlt	r3, [r1, r0]
 8019476:	18c0      	addlt	r0, r0, r3
 8019478:	4770      	bx	lr

0801947a <__sfputc_r>:
 801947a:	6893      	ldr	r3, [r2, #8]
 801947c:	3b01      	subs	r3, #1
 801947e:	2b00      	cmp	r3, #0
 8019480:	b410      	push	{r4}
 8019482:	6093      	str	r3, [r2, #8]
 8019484:	da08      	bge.n	8019498 <__sfputc_r+0x1e>
 8019486:	6994      	ldr	r4, [r2, #24]
 8019488:	42a3      	cmp	r3, r4
 801948a:	db01      	blt.n	8019490 <__sfputc_r+0x16>
 801948c:	290a      	cmp	r1, #10
 801948e:	d103      	bne.n	8019498 <__sfputc_r+0x1e>
 8019490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019494:	f000 b932 	b.w	80196fc <__swbuf_r>
 8019498:	6813      	ldr	r3, [r2, #0]
 801949a:	1c58      	adds	r0, r3, #1
 801949c:	6010      	str	r0, [r2, #0]
 801949e:	7019      	strb	r1, [r3, #0]
 80194a0:	4608      	mov	r0, r1
 80194a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194a6:	4770      	bx	lr

080194a8 <__sfputs_r>:
 80194a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194aa:	4606      	mov	r6, r0
 80194ac:	460f      	mov	r7, r1
 80194ae:	4614      	mov	r4, r2
 80194b0:	18d5      	adds	r5, r2, r3
 80194b2:	42ac      	cmp	r4, r5
 80194b4:	d101      	bne.n	80194ba <__sfputs_r+0x12>
 80194b6:	2000      	movs	r0, #0
 80194b8:	e007      	b.n	80194ca <__sfputs_r+0x22>
 80194ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194be:	463a      	mov	r2, r7
 80194c0:	4630      	mov	r0, r6
 80194c2:	f7ff ffda 	bl	801947a <__sfputc_r>
 80194c6:	1c43      	adds	r3, r0, #1
 80194c8:	d1f3      	bne.n	80194b2 <__sfputs_r+0xa>
 80194ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080194cc <_vfiprintf_r>:
 80194cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d0:	460d      	mov	r5, r1
 80194d2:	b09d      	sub	sp, #116	@ 0x74
 80194d4:	4614      	mov	r4, r2
 80194d6:	4698      	mov	r8, r3
 80194d8:	4606      	mov	r6, r0
 80194da:	b118      	cbz	r0, 80194e4 <_vfiprintf_r+0x18>
 80194dc:	6a03      	ldr	r3, [r0, #32]
 80194de:	b90b      	cbnz	r3, 80194e4 <_vfiprintf_r+0x18>
 80194e0:	f7fd fce6 	bl	8016eb0 <__sinit>
 80194e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80194e6:	07d9      	lsls	r1, r3, #31
 80194e8:	d405      	bmi.n	80194f6 <_vfiprintf_r+0x2a>
 80194ea:	89ab      	ldrh	r3, [r5, #12]
 80194ec:	059a      	lsls	r2, r3, #22
 80194ee:	d402      	bmi.n	80194f6 <_vfiprintf_r+0x2a>
 80194f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80194f2:	f7fd fe12 	bl	801711a <__retarget_lock_acquire_recursive>
 80194f6:	89ab      	ldrh	r3, [r5, #12]
 80194f8:	071b      	lsls	r3, r3, #28
 80194fa:	d501      	bpl.n	8019500 <_vfiprintf_r+0x34>
 80194fc:	692b      	ldr	r3, [r5, #16]
 80194fe:	b99b      	cbnz	r3, 8019528 <_vfiprintf_r+0x5c>
 8019500:	4629      	mov	r1, r5
 8019502:	4630      	mov	r0, r6
 8019504:	f000 f938 	bl	8019778 <__swsetup_r>
 8019508:	b170      	cbz	r0, 8019528 <_vfiprintf_r+0x5c>
 801950a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801950c:	07dc      	lsls	r4, r3, #31
 801950e:	d504      	bpl.n	801951a <_vfiprintf_r+0x4e>
 8019510:	f04f 30ff 	mov.w	r0, #4294967295
 8019514:	b01d      	add	sp, #116	@ 0x74
 8019516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801951a:	89ab      	ldrh	r3, [r5, #12]
 801951c:	0598      	lsls	r0, r3, #22
 801951e:	d4f7      	bmi.n	8019510 <_vfiprintf_r+0x44>
 8019520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019522:	f7fd fdfb 	bl	801711c <__retarget_lock_release_recursive>
 8019526:	e7f3      	b.n	8019510 <_vfiprintf_r+0x44>
 8019528:	2300      	movs	r3, #0
 801952a:	9309      	str	r3, [sp, #36]	@ 0x24
 801952c:	2320      	movs	r3, #32
 801952e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019532:	f8cd 800c 	str.w	r8, [sp, #12]
 8019536:	2330      	movs	r3, #48	@ 0x30
 8019538:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80196e8 <_vfiprintf_r+0x21c>
 801953c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019540:	f04f 0901 	mov.w	r9, #1
 8019544:	4623      	mov	r3, r4
 8019546:	469a      	mov	sl, r3
 8019548:	f813 2b01 	ldrb.w	r2, [r3], #1
 801954c:	b10a      	cbz	r2, 8019552 <_vfiprintf_r+0x86>
 801954e:	2a25      	cmp	r2, #37	@ 0x25
 8019550:	d1f9      	bne.n	8019546 <_vfiprintf_r+0x7a>
 8019552:	ebba 0b04 	subs.w	fp, sl, r4
 8019556:	d00b      	beq.n	8019570 <_vfiprintf_r+0xa4>
 8019558:	465b      	mov	r3, fp
 801955a:	4622      	mov	r2, r4
 801955c:	4629      	mov	r1, r5
 801955e:	4630      	mov	r0, r6
 8019560:	f7ff ffa2 	bl	80194a8 <__sfputs_r>
 8019564:	3001      	adds	r0, #1
 8019566:	f000 80a7 	beq.w	80196b8 <_vfiprintf_r+0x1ec>
 801956a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801956c:	445a      	add	r2, fp
 801956e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019570:	f89a 3000 	ldrb.w	r3, [sl]
 8019574:	2b00      	cmp	r3, #0
 8019576:	f000 809f 	beq.w	80196b8 <_vfiprintf_r+0x1ec>
 801957a:	2300      	movs	r3, #0
 801957c:	f04f 32ff 	mov.w	r2, #4294967295
 8019580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019584:	f10a 0a01 	add.w	sl, sl, #1
 8019588:	9304      	str	r3, [sp, #16]
 801958a:	9307      	str	r3, [sp, #28]
 801958c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019590:	931a      	str	r3, [sp, #104]	@ 0x68
 8019592:	4654      	mov	r4, sl
 8019594:	2205      	movs	r2, #5
 8019596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801959a:	4853      	ldr	r0, [pc, #332]	@ (80196e8 <_vfiprintf_r+0x21c>)
 801959c:	f7e6 fec8 	bl	8000330 <memchr>
 80195a0:	9a04      	ldr	r2, [sp, #16]
 80195a2:	b9d8      	cbnz	r0, 80195dc <_vfiprintf_r+0x110>
 80195a4:	06d1      	lsls	r1, r2, #27
 80195a6:	bf44      	itt	mi
 80195a8:	2320      	movmi	r3, #32
 80195aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195ae:	0713      	lsls	r3, r2, #28
 80195b0:	bf44      	itt	mi
 80195b2:	232b      	movmi	r3, #43	@ 0x2b
 80195b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195b8:	f89a 3000 	ldrb.w	r3, [sl]
 80195bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80195be:	d015      	beq.n	80195ec <_vfiprintf_r+0x120>
 80195c0:	9a07      	ldr	r2, [sp, #28]
 80195c2:	4654      	mov	r4, sl
 80195c4:	2000      	movs	r0, #0
 80195c6:	f04f 0c0a 	mov.w	ip, #10
 80195ca:	4621      	mov	r1, r4
 80195cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195d0:	3b30      	subs	r3, #48	@ 0x30
 80195d2:	2b09      	cmp	r3, #9
 80195d4:	d94b      	bls.n	801966e <_vfiprintf_r+0x1a2>
 80195d6:	b1b0      	cbz	r0, 8019606 <_vfiprintf_r+0x13a>
 80195d8:	9207      	str	r2, [sp, #28]
 80195da:	e014      	b.n	8019606 <_vfiprintf_r+0x13a>
 80195dc:	eba0 0308 	sub.w	r3, r0, r8
 80195e0:	fa09 f303 	lsl.w	r3, r9, r3
 80195e4:	4313      	orrs	r3, r2
 80195e6:	9304      	str	r3, [sp, #16]
 80195e8:	46a2      	mov	sl, r4
 80195ea:	e7d2      	b.n	8019592 <_vfiprintf_r+0xc6>
 80195ec:	9b03      	ldr	r3, [sp, #12]
 80195ee:	1d19      	adds	r1, r3, #4
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	9103      	str	r1, [sp, #12]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	bfbb      	ittet	lt
 80195f8:	425b      	neglt	r3, r3
 80195fa:	f042 0202 	orrlt.w	r2, r2, #2
 80195fe:	9307      	strge	r3, [sp, #28]
 8019600:	9307      	strlt	r3, [sp, #28]
 8019602:	bfb8      	it	lt
 8019604:	9204      	strlt	r2, [sp, #16]
 8019606:	7823      	ldrb	r3, [r4, #0]
 8019608:	2b2e      	cmp	r3, #46	@ 0x2e
 801960a:	d10a      	bne.n	8019622 <_vfiprintf_r+0x156>
 801960c:	7863      	ldrb	r3, [r4, #1]
 801960e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019610:	d132      	bne.n	8019678 <_vfiprintf_r+0x1ac>
 8019612:	9b03      	ldr	r3, [sp, #12]
 8019614:	1d1a      	adds	r2, r3, #4
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	9203      	str	r2, [sp, #12]
 801961a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801961e:	3402      	adds	r4, #2
 8019620:	9305      	str	r3, [sp, #20]
 8019622:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80196f8 <_vfiprintf_r+0x22c>
 8019626:	7821      	ldrb	r1, [r4, #0]
 8019628:	2203      	movs	r2, #3
 801962a:	4650      	mov	r0, sl
 801962c:	f7e6 fe80 	bl	8000330 <memchr>
 8019630:	b138      	cbz	r0, 8019642 <_vfiprintf_r+0x176>
 8019632:	9b04      	ldr	r3, [sp, #16]
 8019634:	eba0 000a 	sub.w	r0, r0, sl
 8019638:	2240      	movs	r2, #64	@ 0x40
 801963a:	4082      	lsls	r2, r0
 801963c:	4313      	orrs	r3, r2
 801963e:	3401      	adds	r4, #1
 8019640:	9304      	str	r3, [sp, #16]
 8019642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019646:	4829      	ldr	r0, [pc, #164]	@ (80196ec <_vfiprintf_r+0x220>)
 8019648:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801964c:	2206      	movs	r2, #6
 801964e:	f7e6 fe6f 	bl	8000330 <memchr>
 8019652:	2800      	cmp	r0, #0
 8019654:	d03f      	beq.n	80196d6 <_vfiprintf_r+0x20a>
 8019656:	4b26      	ldr	r3, [pc, #152]	@ (80196f0 <_vfiprintf_r+0x224>)
 8019658:	bb1b      	cbnz	r3, 80196a2 <_vfiprintf_r+0x1d6>
 801965a:	9b03      	ldr	r3, [sp, #12]
 801965c:	3307      	adds	r3, #7
 801965e:	f023 0307 	bic.w	r3, r3, #7
 8019662:	3308      	adds	r3, #8
 8019664:	9303      	str	r3, [sp, #12]
 8019666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019668:	443b      	add	r3, r7
 801966a:	9309      	str	r3, [sp, #36]	@ 0x24
 801966c:	e76a      	b.n	8019544 <_vfiprintf_r+0x78>
 801966e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019672:	460c      	mov	r4, r1
 8019674:	2001      	movs	r0, #1
 8019676:	e7a8      	b.n	80195ca <_vfiprintf_r+0xfe>
 8019678:	2300      	movs	r3, #0
 801967a:	3401      	adds	r4, #1
 801967c:	9305      	str	r3, [sp, #20]
 801967e:	4619      	mov	r1, r3
 8019680:	f04f 0c0a 	mov.w	ip, #10
 8019684:	4620      	mov	r0, r4
 8019686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801968a:	3a30      	subs	r2, #48	@ 0x30
 801968c:	2a09      	cmp	r2, #9
 801968e:	d903      	bls.n	8019698 <_vfiprintf_r+0x1cc>
 8019690:	2b00      	cmp	r3, #0
 8019692:	d0c6      	beq.n	8019622 <_vfiprintf_r+0x156>
 8019694:	9105      	str	r1, [sp, #20]
 8019696:	e7c4      	b.n	8019622 <_vfiprintf_r+0x156>
 8019698:	fb0c 2101 	mla	r1, ip, r1, r2
 801969c:	4604      	mov	r4, r0
 801969e:	2301      	movs	r3, #1
 80196a0:	e7f0      	b.n	8019684 <_vfiprintf_r+0x1b8>
 80196a2:	ab03      	add	r3, sp, #12
 80196a4:	9300      	str	r3, [sp, #0]
 80196a6:	462a      	mov	r2, r5
 80196a8:	4b12      	ldr	r3, [pc, #72]	@ (80196f4 <_vfiprintf_r+0x228>)
 80196aa:	a904      	add	r1, sp, #16
 80196ac:	4630      	mov	r0, r6
 80196ae:	f7fc ffcb 	bl	8016648 <_printf_float>
 80196b2:	4607      	mov	r7, r0
 80196b4:	1c78      	adds	r0, r7, #1
 80196b6:	d1d6      	bne.n	8019666 <_vfiprintf_r+0x19a>
 80196b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196ba:	07d9      	lsls	r1, r3, #31
 80196bc:	d405      	bmi.n	80196ca <_vfiprintf_r+0x1fe>
 80196be:	89ab      	ldrh	r3, [r5, #12]
 80196c0:	059a      	lsls	r2, r3, #22
 80196c2:	d402      	bmi.n	80196ca <_vfiprintf_r+0x1fe>
 80196c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196c6:	f7fd fd29 	bl	801711c <__retarget_lock_release_recursive>
 80196ca:	89ab      	ldrh	r3, [r5, #12]
 80196cc:	065b      	lsls	r3, r3, #25
 80196ce:	f53f af1f 	bmi.w	8019510 <_vfiprintf_r+0x44>
 80196d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80196d4:	e71e      	b.n	8019514 <_vfiprintf_r+0x48>
 80196d6:	ab03      	add	r3, sp, #12
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	462a      	mov	r2, r5
 80196dc:	4b05      	ldr	r3, [pc, #20]	@ (80196f4 <_vfiprintf_r+0x228>)
 80196de:	a904      	add	r1, sp, #16
 80196e0:	4630      	mov	r0, r6
 80196e2:	f7fd fa39 	bl	8016b58 <_printf_i>
 80196e6:	e7e4      	b.n	80196b2 <_vfiprintf_r+0x1e6>
 80196e8:	0801aef0 	.word	0x0801aef0
 80196ec:	0801aefa 	.word	0x0801aefa
 80196f0:	08016649 	.word	0x08016649
 80196f4:	080194a9 	.word	0x080194a9
 80196f8:	0801aef6 	.word	0x0801aef6

080196fc <__swbuf_r>:
 80196fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196fe:	460e      	mov	r6, r1
 8019700:	4614      	mov	r4, r2
 8019702:	4605      	mov	r5, r0
 8019704:	b118      	cbz	r0, 801970e <__swbuf_r+0x12>
 8019706:	6a03      	ldr	r3, [r0, #32]
 8019708:	b90b      	cbnz	r3, 801970e <__swbuf_r+0x12>
 801970a:	f7fd fbd1 	bl	8016eb0 <__sinit>
 801970e:	69a3      	ldr	r3, [r4, #24]
 8019710:	60a3      	str	r3, [r4, #8]
 8019712:	89a3      	ldrh	r3, [r4, #12]
 8019714:	071a      	lsls	r2, r3, #28
 8019716:	d501      	bpl.n	801971c <__swbuf_r+0x20>
 8019718:	6923      	ldr	r3, [r4, #16]
 801971a:	b943      	cbnz	r3, 801972e <__swbuf_r+0x32>
 801971c:	4621      	mov	r1, r4
 801971e:	4628      	mov	r0, r5
 8019720:	f000 f82a 	bl	8019778 <__swsetup_r>
 8019724:	b118      	cbz	r0, 801972e <__swbuf_r+0x32>
 8019726:	f04f 37ff 	mov.w	r7, #4294967295
 801972a:	4638      	mov	r0, r7
 801972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801972e:	6823      	ldr	r3, [r4, #0]
 8019730:	6922      	ldr	r2, [r4, #16]
 8019732:	1a98      	subs	r0, r3, r2
 8019734:	6963      	ldr	r3, [r4, #20]
 8019736:	b2f6      	uxtb	r6, r6
 8019738:	4283      	cmp	r3, r0
 801973a:	4637      	mov	r7, r6
 801973c:	dc05      	bgt.n	801974a <__swbuf_r+0x4e>
 801973e:	4621      	mov	r1, r4
 8019740:	4628      	mov	r0, r5
 8019742:	f7ff fdc7 	bl	80192d4 <_fflush_r>
 8019746:	2800      	cmp	r0, #0
 8019748:	d1ed      	bne.n	8019726 <__swbuf_r+0x2a>
 801974a:	68a3      	ldr	r3, [r4, #8]
 801974c:	3b01      	subs	r3, #1
 801974e:	60a3      	str	r3, [r4, #8]
 8019750:	6823      	ldr	r3, [r4, #0]
 8019752:	1c5a      	adds	r2, r3, #1
 8019754:	6022      	str	r2, [r4, #0]
 8019756:	701e      	strb	r6, [r3, #0]
 8019758:	6962      	ldr	r2, [r4, #20]
 801975a:	1c43      	adds	r3, r0, #1
 801975c:	429a      	cmp	r2, r3
 801975e:	d004      	beq.n	801976a <__swbuf_r+0x6e>
 8019760:	89a3      	ldrh	r3, [r4, #12]
 8019762:	07db      	lsls	r3, r3, #31
 8019764:	d5e1      	bpl.n	801972a <__swbuf_r+0x2e>
 8019766:	2e0a      	cmp	r6, #10
 8019768:	d1df      	bne.n	801972a <__swbuf_r+0x2e>
 801976a:	4621      	mov	r1, r4
 801976c:	4628      	mov	r0, r5
 801976e:	f7ff fdb1 	bl	80192d4 <_fflush_r>
 8019772:	2800      	cmp	r0, #0
 8019774:	d0d9      	beq.n	801972a <__swbuf_r+0x2e>
 8019776:	e7d6      	b.n	8019726 <__swbuf_r+0x2a>

08019778 <__swsetup_r>:
 8019778:	b538      	push	{r3, r4, r5, lr}
 801977a:	4b29      	ldr	r3, [pc, #164]	@ (8019820 <__swsetup_r+0xa8>)
 801977c:	4605      	mov	r5, r0
 801977e:	6818      	ldr	r0, [r3, #0]
 8019780:	460c      	mov	r4, r1
 8019782:	b118      	cbz	r0, 801978c <__swsetup_r+0x14>
 8019784:	6a03      	ldr	r3, [r0, #32]
 8019786:	b90b      	cbnz	r3, 801978c <__swsetup_r+0x14>
 8019788:	f7fd fb92 	bl	8016eb0 <__sinit>
 801978c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019790:	0719      	lsls	r1, r3, #28
 8019792:	d422      	bmi.n	80197da <__swsetup_r+0x62>
 8019794:	06da      	lsls	r2, r3, #27
 8019796:	d407      	bmi.n	80197a8 <__swsetup_r+0x30>
 8019798:	2209      	movs	r2, #9
 801979a:	602a      	str	r2, [r5, #0]
 801979c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197a0:	81a3      	strh	r3, [r4, #12]
 80197a2:	f04f 30ff 	mov.w	r0, #4294967295
 80197a6:	e033      	b.n	8019810 <__swsetup_r+0x98>
 80197a8:	0758      	lsls	r0, r3, #29
 80197aa:	d512      	bpl.n	80197d2 <__swsetup_r+0x5a>
 80197ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197ae:	b141      	cbz	r1, 80197c2 <__swsetup_r+0x4a>
 80197b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197b4:	4299      	cmp	r1, r3
 80197b6:	d002      	beq.n	80197be <__swsetup_r+0x46>
 80197b8:	4628      	mov	r0, r5
 80197ba:	f7fe faa7 	bl	8017d0c <_free_r>
 80197be:	2300      	movs	r3, #0
 80197c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	2300      	movs	r3, #0
 80197cc:	6063      	str	r3, [r4, #4]
 80197ce:	6923      	ldr	r3, [r4, #16]
 80197d0:	6023      	str	r3, [r4, #0]
 80197d2:	89a3      	ldrh	r3, [r4, #12]
 80197d4:	f043 0308 	orr.w	r3, r3, #8
 80197d8:	81a3      	strh	r3, [r4, #12]
 80197da:	6923      	ldr	r3, [r4, #16]
 80197dc:	b94b      	cbnz	r3, 80197f2 <__swsetup_r+0x7a>
 80197de:	89a3      	ldrh	r3, [r4, #12]
 80197e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80197e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197e8:	d003      	beq.n	80197f2 <__swsetup_r+0x7a>
 80197ea:	4621      	mov	r1, r4
 80197ec:	4628      	mov	r0, r5
 80197ee:	f000 f883 	bl	80198f8 <__smakebuf_r>
 80197f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197f6:	f013 0201 	ands.w	r2, r3, #1
 80197fa:	d00a      	beq.n	8019812 <__swsetup_r+0x9a>
 80197fc:	2200      	movs	r2, #0
 80197fe:	60a2      	str	r2, [r4, #8]
 8019800:	6962      	ldr	r2, [r4, #20]
 8019802:	4252      	negs	r2, r2
 8019804:	61a2      	str	r2, [r4, #24]
 8019806:	6922      	ldr	r2, [r4, #16]
 8019808:	b942      	cbnz	r2, 801981c <__swsetup_r+0xa4>
 801980a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801980e:	d1c5      	bne.n	801979c <__swsetup_r+0x24>
 8019810:	bd38      	pop	{r3, r4, r5, pc}
 8019812:	0799      	lsls	r1, r3, #30
 8019814:	bf58      	it	pl
 8019816:	6962      	ldrpl	r2, [r4, #20]
 8019818:	60a2      	str	r2, [r4, #8]
 801981a:	e7f4      	b.n	8019806 <__swsetup_r+0x8e>
 801981c:	2000      	movs	r0, #0
 801981e:	e7f7      	b.n	8019810 <__swsetup_r+0x98>
 8019820:	2400027c 	.word	0x2400027c

08019824 <_raise_r>:
 8019824:	291f      	cmp	r1, #31
 8019826:	b538      	push	{r3, r4, r5, lr}
 8019828:	4605      	mov	r5, r0
 801982a:	460c      	mov	r4, r1
 801982c:	d904      	bls.n	8019838 <_raise_r+0x14>
 801982e:	2316      	movs	r3, #22
 8019830:	6003      	str	r3, [r0, #0]
 8019832:	f04f 30ff 	mov.w	r0, #4294967295
 8019836:	bd38      	pop	{r3, r4, r5, pc}
 8019838:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801983a:	b112      	cbz	r2, 8019842 <_raise_r+0x1e>
 801983c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019840:	b94b      	cbnz	r3, 8019856 <_raise_r+0x32>
 8019842:	4628      	mov	r0, r5
 8019844:	f000 f830 	bl	80198a8 <_getpid_r>
 8019848:	4622      	mov	r2, r4
 801984a:	4601      	mov	r1, r0
 801984c:	4628      	mov	r0, r5
 801984e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019852:	f000 b817 	b.w	8019884 <_kill_r>
 8019856:	2b01      	cmp	r3, #1
 8019858:	d00a      	beq.n	8019870 <_raise_r+0x4c>
 801985a:	1c59      	adds	r1, r3, #1
 801985c:	d103      	bne.n	8019866 <_raise_r+0x42>
 801985e:	2316      	movs	r3, #22
 8019860:	6003      	str	r3, [r0, #0]
 8019862:	2001      	movs	r0, #1
 8019864:	e7e7      	b.n	8019836 <_raise_r+0x12>
 8019866:	2100      	movs	r1, #0
 8019868:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801986c:	4620      	mov	r0, r4
 801986e:	4798      	blx	r3
 8019870:	2000      	movs	r0, #0
 8019872:	e7e0      	b.n	8019836 <_raise_r+0x12>

08019874 <raise>:
 8019874:	4b02      	ldr	r3, [pc, #8]	@ (8019880 <raise+0xc>)
 8019876:	4601      	mov	r1, r0
 8019878:	6818      	ldr	r0, [r3, #0]
 801987a:	f7ff bfd3 	b.w	8019824 <_raise_r>
 801987e:	bf00      	nop
 8019880:	2400027c 	.word	0x2400027c

08019884 <_kill_r>:
 8019884:	b538      	push	{r3, r4, r5, lr}
 8019886:	4d07      	ldr	r5, [pc, #28]	@ (80198a4 <_kill_r+0x20>)
 8019888:	2300      	movs	r3, #0
 801988a:	4604      	mov	r4, r0
 801988c:	4608      	mov	r0, r1
 801988e:	4611      	mov	r1, r2
 8019890:	602b      	str	r3, [r5, #0]
 8019892:	f7e8 fdb9 	bl	8002408 <_kill>
 8019896:	1c43      	adds	r3, r0, #1
 8019898:	d102      	bne.n	80198a0 <_kill_r+0x1c>
 801989a:	682b      	ldr	r3, [r5, #0]
 801989c:	b103      	cbz	r3, 80198a0 <_kill_r+0x1c>
 801989e:	6023      	str	r3, [r4, #0]
 80198a0:	bd38      	pop	{r3, r4, r5, pc}
 80198a2:	bf00      	nop
 80198a4:	24006234 	.word	0x24006234

080198a8 <_getpid_r>:
 80198a8:	f7e8 bda6 	b.w	80023f8 <_getpid>

080198ac <__swhatbuf_r>:
 80198ac:	b570      	push	{r4, r5, r6, lr}
 80198ae:	460c      	mov	r4, r1
 80198b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198b4:	2900      	cmp	r1, #0
 80198b6:	b096      	sub	sp, #88	@ 0x58
 80198b8:	4615      	mov	r5, r2
 80198ba:	461e      	mov	r6, r3
 80198bc:	da0d      	bge.n	80198da <__swhatbuf_r+0x2e>
 80198be:	89a3      	ldrh	r3, [r4, #12]
 80198c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80198c4:	f04f 0100 	mov.w	r1, #0
 80198c8:	bf14      	ite	ne
 80198ca:	2340      	movne	r3, #64	@ 0x40
 80198cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80198d0:	2000      	movs	r0, #0
 80198d2:	6031      	str	r1, [r6, #0]
 80198d4:	602b      	str	r3, [r5, #0]
 80198d6:	b016      	add	sp, #88	@ 0x58
 80198d8:	bd70      	pop	{r4, r5, r6, pc}
 80198da:	466a      	mov	r2, sp
 80198dc:	f000 f848 	bl	8019970 <_fstat_r>
 80198e0:	2800      	cmp	r0, #0
 80198e2:	dbec      	blt.n	80198be <__swhatbuf_r+0x12>
 80198e4:	9901      	ldr	r1, [sp, #4]
 80198e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80198ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80198ee:	4259      	negs	r1, r3
 80198f0:	4159      	adcs	r1, r3
 80198f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80198f6:	e7eb      	b.n	80198d0 <__swhatbuf_r+0x24>

080198f8 <__smakebuf_r>:
 80198f8:	898b      	ldrh	r3, [r1, #12]
 80198fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198fc:	079d      	lsls	r5, r3, #30
 80198fe:	4606      	mov	r6, r0
 8019900:	460c      	mov	r4, r1
 8019902:	d507      	bpl.n	8019914 <__smakebuf_r+0x1c>
 8019904:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	6123      	str	r3, [r4, #16]
 801990c:	2301      	movs	r3, #1
 801990e:	6163      	str	r3, [r4, #20]
 8019910:	b003      	add	sp, #12
 8019912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019914:	ab01      	add	r3, sp, #4
 8019916:	466a      	mov	r2, sp
 8019918:	f7ff ffc8 	bl	80198ac <__swhatbuf_r>
 801991c:	9f00      	ldr	r7, [sp, #0]
 801991e:	4605      	mov	r5, r0
 8019920:	4639      	mov	r1, r7
 8019922:	4630      	mov	r0, r6
 8019924:	f7fe fda0 	bl	8018468 <_malloc_r>
 8019928:	b948      	cbnz	r0, 801993e <__smakebuf_r+0x46>
 801992a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801992e:	059a      	lsls	r2, r3, #22
 8019930:	d4ee      	bmi.n	8019910 <__smakebuf_r+0x18>
 8019932:	f023 0303 	bic.w	r3, r3, #3
 8019936:	f043 0302 	orr.w	r3, r3, #2
 801993a:	81a3      	strh	r3, [r4, #12]
 801993c:	e7e2      	b.n	8019904 <__smakebuf_r+0xc>
 801993e:	89a3      	ldrh	r3, [r4, #12]
 8019940:	6020      	str	r0, [r4, #0]
 8019942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019946:	81a3      	strh	r3, [r4, #12]
 8019948:	9b01      	ldr	r3, [sp, #4]
 801994a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801994e:	b15b      	cbz	r3, 8019968 <__smakebuf_r+0x70>
 8019950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019954:	4630      	mov	r0, r6
 8019956:	f000 f81d 	bl	8019994 <_isatty_r>
 801995a:	b128      	cbz	r0, 8019968 <__smakebuf_r+0x70>
 801995c:	89a3      	ldrh	r3, [r4, #12]
 801995e:	f023 0303 	bic.w	r3, r3, #3
 8019962:	f043 0301 	orr.w	r3, r3, #1
 8019966:	81a3      	strh	r3, [r4, #12]
 8019968:	89a3      	ldrh	r3, [r4, #12]
 801996a:	431d      	orrs	r5, r3
 801996c:	81a5      	strh	r5, [r4, #12]
 801996e:	e7cf      	b.n	8019910 <__smakebuf_r+0x18>

08019970 <_fstat_r>:
 8019970:	b538      	push	{r3, r4, r5, lr}
 8019972:	4d07      	ldr	r5, [pc, #28]	@ (8019990 <_fstat_r+0x20>)
 8019974:	2300      	movs	r3, #0
 8019976:	4604      	mov	r4, r0
 8019978:	4608      	mov	r0, r1
 801997a:	4611      	mov	r1, r2
 801997c:	602b      	str	r3, [r5, #0]
 801997e:	f7e8 fda3 	bl	80024c8 <_fstat>
 8019982:	1c43      	adds	r3, r0, #1
 8019984:	d102      	bne.n	801998c <_fstat_r+0x1c>
 8019986:	682b      	ldr	r3, [r5, #0]
 8019988:	b103      	cbz	r3, 801998c <_fstat_r+0x1c>
 801998a:	6023      	str	r3, [r4, #0]
 801998c:	bd38      	pop	{r3, r4, r5, pc}
 801998e:	bf00      	nop
 8019990:	24006234 	.word	0x24006234

08019994 <_isatty_r>:
 8019994:	b538      	push	{r3, r4, r5, lr}
 8019996:	4d06      	ldr	r5, [pc, #24]	@ (80199b0 <_isatty_r+0x1c>)
 8019998:	2300      	movs	r3, #0
 801999a:	4604      	mov	r4, r0
 801999c:	4608      	mov	r0, r1
 801999e:	602b      	str	r3, [r5, #0]
 80199a0:	f7e8 fda2 	bl	80024e8 <_isatty>
 80199a4:	1c43      	adds	r3, r0, #1
 80199a6:	d102      	bne.n	80199ae <_isatty_r+0x1a>
 80199a8:	682b      	ldr	r3, [r5, #0]
 80199aa:	b103      	cbz	r3, 80199ae <_isatty_r+0x1a>
 80199ac:	6023      	str	r3, [r4, #0]
 80199ae:	bd38      	pop	{r3, r4, r5, pc}
 80199b0:	24006234 	.word	0x24006234
 80199b4:	00000000 	.word	0x00000000

080199b8 <sin>:
 80199b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80199ba:	eeb0 7b40 	vmov.f64	d7, d0
 80199be:	ee17 3a90 	vmov	r3, s15
 80199c2:	4a21      	ldr	r2, [pc, #132]	@ (8019a48 <sin+0x90>)
 80199c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80199c8:	4293      	cmp	r3, r2
 80199ca:	d807      	bhi.n	80199dc <sin+0x24>
 80199cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8019a40 <sin+0x88>
 80199d0:	2000      	movs	r0, #0
 80199d2:	b005      	add	sp, #20
 80199d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199d8:	f000 b986 	b.w	8019ce8 <__kernel_sin>
 80199dc:	4a1b      	ldr	r2, [pc, #108]	@ (8019a4c <sin+0x94>)
 80199de:	4293      	cmp	r3, r2
 80199e0:	d904      	bls.n	80199ec <sin+0x34>
 80199e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80199e6:	b005      	add	sp, #20
 80199e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80199ec:	4668      	mov	r0, sp
 80199ee:	f000 f9d3 	bl	8019d98 <__ieee754_rem_pio2>
 80199f2:	f000 0003 	and.w	r0, r0, #3
 80199f6:	2801      	cmp	r0, #1
 80199f8:	d00a      	beq.n	8019a10 <sin+0x58>
 80199fa:	2802      	cmp	r0, #2
 80199fc:	d00f      	beq.n	8019a1e <sin+0x66>
 80199fe:	b9c0      	cbnz	r0, 8019a32 <sin+0x7a>
 8019a00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a04:	ed9d 0b00 	vldr	d0, [sp]
 8019a08:	2001      	movs	r0, #1
 8019a0a:	f000 f96d 	bl	8019ce8 <__kernel_sin>
 8019a0e:	e7ea      	b.n	80199e6 <sin+0x2e>
 8019a10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a14:	ed9d 0b00 	vldr	d0, [sp]
 8019a18:	f000 f8fe 	bl	8019c18 <__kernel_cos>
 8019a1c:	e7e3      	b.n	80199e6 <sin+0x2e>
 8019a1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a22:	ed9d 0b00 	vldr	d0, [sp]
 8019a26:	2001      	movs	r0, #1
 8019a28:	f000 f95e 	bl	8019ce8 <__kernel_sin>
 8019a2c:	eeb1 0b40 	vneg.f64	d0, d0
 8019a30:	e7d9      	b.n	80199e6 <sin+0x2e>
 8019a32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a36:	ed9d 0b00 	vldr	d0, [sp]
 8019a3a:	f000 f8ed 	bl	8019c18 <__kernel_cos>
 8019a3e:	e7f5      	b.n	8019a2c <sin+0x74>
	...
 8019a48:	3fe921fb 	.word	0x3fe921fb
 8019a4c:	7fefffff 	.word	0x7fefffff

08019a50 <sinf_poly>:
 8019a50:	07cb      	lsls	r3, r1, #31
 8019a52:	d412      	bmi.n	8019a7a <sinf_poly+0x2a>
 8019a54:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019a58:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8019a5c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8019a60:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019a64:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8019a68:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019a6c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019a70:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019a74:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019a78:	4770      	bx	lr
 8019a7a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8019a7e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8019a82:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8019a86:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8019a8a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8019a8e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8019a92:	eea1 0b06 	vfma.f64	d0, d1, d6
 8019a96:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8019a9a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019a9e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019aa2:	e7e5      	b.n	8019a70 <sinf_poly+0x20>
 8019aa4:	0000      	movs	r0, r0
	...

08019aa8 <sinf>:
 8019aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aaa:	ee10 4a10 	vmov	r4, s0
 8019aae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019ab2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8019ab6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8019aba:	eef0 7a40 	vmov.f32	s15, s0
 8019abe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8019ac2:	d218      	bcs.n	8019af6 <sinf+0x4e>
 8019ac4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019ac8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8019acc:	d20a      	bcs.n	8019ae4 <sinf+0x3c>
 8019ace:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8019ad2:	d103      	bne.n	8019adc <sinf+0x34>
 8019ad4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8019ad8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8019adc:	eeb0 0a67 	vmov.f32	s0, s15
 8019ae0:	b003      	add	sp, #12
 8019ae2:	bd30      	pop	{r4, r5, pc}
 8019ae4:	483a      	ldr	r0, [pc, #232]	@ (8019bd0 <sinf+0x128>)
 8019ae6:	eeb0 0b46 	vmov.f64	d0, d6
 8019aea:	2100      	movs	r1, #0
 8019aec:	b003      	add	sp, #12
 8019aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019af2:	f7ff bfad 	b.w	8019a50 <sinf_poly>
 8019af6:	f240 422e 	movw	r2, #1070	@ 0x42e
 8019afa:	4293      	cmp	r3, r2
 8019afc:	d824      	bhi.n	8019b48 <sinf+0xa0>
 8019afe:	4b34      	ldr	r3, [pc, #208]	@ (8019bd0 <sinf+0x128>)
 8019b00:	ed93 7b08 	vldr	d7, [r3, #32]
 8019b04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019b08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019b0c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019b10:	ee17 1a90 	vmov	r1, s15
 8019b14:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8019b18:	1609      	asrs	r1, r1, #24
 8019b1a:	ee07 1a90 	vmov	s15, r1
 8019b1e:	f001 0203 	and.w	r2, r1, #3
 8019b22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019b26:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019b2a:	ed92 0b00 	vldr	d0, [r2]
 8019b2e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8019b32:	f011 0f02 	tst.w	r1, #2
 8019b36:	eea5 6b47 	vfms.f64	d6, d5, d7
 8019b3a:	bf08      	it	eq
 8019b3c:	4618      	moveq	r0, r3
 8019b3e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019b42:	ee20 0b06 	vmul.f64	d0, d0, d6
 8019b46:	e7d1      	b.n	8019aec <sinf+0x44>
 8019b48:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8019b4c:	d237      	bcs.n	8019bbe <sinf+0x116>
 8019b4e:	4921      	ldr	r1, [pc, #132]	@ (8019bd4 <sinf+0x12c>)
 8019b50:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8019b54:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8019b58:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8019b5c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8019b60:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019b64:	6a10      	ldr	r0, [r2, #32]
 8019b66:	6912      	ldr	r2, [r2, #16]
 8019b68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019b6c:	40ab      	lsls	r3, r5
 8019b6e:	fba0 5003 	umull	r5, r0, r0, r3
 8019b72:	4359      	muls	r1, r3
 8019b74:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019b78:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8019b7c:	0f9d      	lsrs	r5, r3, #30
 8019b7e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8019b82:	1ac9      	subs	r1, r1, r3
 8019b84:	f7e6 fdba 	bl	80006fc <__aeabi_l2d>
 8019b88:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8019b8c:	4b10      	ldr	r3, [pc, #64]	@ (8019bd0 <sinf+0x128>)
 8019b8e:	f004 0203 	and.w	r2, r4, #3
 8019b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019b96:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8019bc8 <sinf+0x120>
 8019b9a:	ed92 0b00 	vldr	d0, [r2]
 8019b9e:	ec41 0b17 	vmov	d7, r0, r1
 8019ba2:	f014 0f02 	tst.w	r4, #2
 8019ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019baa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019bae:	4629      	mov	r1, r5
 8019bb0:	bf08      	it	eq
 8019bb2:	4618      	moveq	r0, r3
 8019bb4:	ee27 1b07 	vmul.f64	d1, d7, d7
 8019bb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019bbc:	e796      	b.n	8019aec <sinf+0x44>
 8019bbe:	b003      	add	sp, #12
 8019bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bc4:	f000 b816 	b.w	8019bf4 <__math_invalidf>
 8019bc8:	54442d18 	.word	0x54442d18
 8019bcc:	3c1921fb 	.word	0x3c1921fb
 8019bd0:	0801afa0 	.word	0x0801afa0
 8019bd4:	0801af40 	.word	0x0801af40

08019bd8 <with_errnof>:
 8019bd8:	b510      	push	{r4, lr}
 8019bda:	ed2d 8b02 	vpush	{d8}
 8019bde:	eeb0 8a40 	vmov.f32	s16, s0
 8019be2:	4604      	mov	r4, r0
 8019be4:	f7fd fa6e 	bl	80170c4 <__errno>
 8019be8:	eeb0 0a48 	vmov.f32	s0, s16
 8019bec:	ecbd 8b02 	vpop	{d8}
 8019bf0:	6004      	str	r4, [r0, #0]
 8019bf2:	bd10      	pop	{r4, pc}

08019bf4 <__math_invalidf>:
 8019bf4:	eef0 7a40 	vmov.f32	s15, s0
 8019bf8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019bfc:	eef4 7a67 	vcmp.f32	s15, s15
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019c08:	d602      	bvs.n	8019c10 <__math_invalidf+0x1c>
 8019c0a:	2021      	movs	r0, #33	@ 0x21
 8019c0c:	f7ff bfe4 	b.w	8019bd8 <with_errnof>
 8019c10:	4770      	bx	lr
 8019c12:	0000      	movs	r0, r0
 8019c14:	0000      	movs	r0, r0
	...

08019c18 <__kernel_cos>:
 8019c18:	eeb0 5b40 	vmov.f64	d5, d0
 8019c1c:	ee15 1a90 	vmov	r1, s11
 8019c20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8019c24:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8019c28:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8019c2c:	d204      	bcs.n	8019c38 <__kernel_cos+0x20>
 8019c2e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8019c32:	ee17 3a90 	vmov	r3, s15
 8019c36:	b343      	cbz	r3, 8019c8a <__kernel_cos+0x72>
 8019c38:	ee25 6b05 	vmul.f64	d6, d5, d5
 8019c3c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8019c40:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8019cb0 <__kernel_cos+0x98>
 8019c44:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019cb8 <__kernel_cos+0xa0>
 8019c48:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019c4c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8019cc0 <__kernel_cos+0xa8>
 8019c50:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019c54:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019cc8 <__kernel_cos+0xb0>
 8019c58:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019c5c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8019cd0 <__kernel_cos+0xb8>
 8019c60:	4b1f      	ldr	r3, [pc, #124]	@ (8019ce0 <__kernel_cos+0xc8>)
 8019c62:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019c66:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019cd8 <__kernel_cos+0xc0>
 8019c6a:	4299      	cmp	r1, r3
 8019c6c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019c70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8019c74:	ee24 4b06 	vmul.f64	d4, d4, d6
 8019c78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019c7c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8019c80:	d804      	bhi.n	8019c8c <__kernel_cos+0x74>
 8019c82:	ee37 7b41 	vsub.f64	d7, d7, d1
 8019c86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019c8a:	4770      	bx	lr
 8019c8c:	4b15      	ldr	r3, [pc, #84]	@ (8019ce4 <__kernel_cos+0xcc>)
 8019c8e:	4299      	cmp	r1, r3
 8019c90:	d809      	bhi.n	8019ca6 <__kernel_cos+0x8e>
 8019c92:	2200      	movs	r2, #0
 8019c94:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8019c98:	ec43 2b16 	vmov	d6, r2, r3
 8019c9c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019ca0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019ca4:	e7ed      	b.n	8019c82 <__kernel_cos+0x6a>
 8019ca6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8019caa:	e7f7      	b.n	8019c9c <__kernel_cos+0x84>
 8019cac:	f3af 8000 	nop.w
 8019cb0:	be8838d4 	.word	0xbe8838d4
 8019cb4:	bda8fae9 	.word	0xbda8fae9
 8019cb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8019cbc:	3e21ee9e 	.word	0x3e21ee9e
 8019cc0:	809c52ad 	.word	0x809c52ad
 8019cc4:	be927e4f 	.word	0xbe927e4f
 8019cc8:	19cb1590 	.word	0x19cb1590
 8019ccc:	3efa01a0 	.word	0x3efa01a0
 8019cd0:	16c15177 	.word	0x16c15177
 8019cd4:	bf56c16c 	.word	0xbf56c16c
 8019cd8:	5555554c 	.word	0x5555554c
 8019cdc:	3fa55555 	.word	0x3fa55555
 8019ce0:	3fd33332 	.word	0x3fd33332
 8019ce4:	3fe90000 	.word	0x3fe90000

08019ce8 <__kernel_sin>:
 8019ce8:	ee10 3a90 	vmov	r3, s1
 8019cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019cf0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8019cf4:	d204      	bcs.n	8019d00 <__kernel_sin+0x18>
 8019cf6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8019cfa:	ee17 3a90 	vmov	r3, s15
 8019cfe:	b35b      	cbz	r3, 8019d58 <__kernel_sin+0x70>
 8019d00:	ee20 6b00 	vmul.f64	d6, d0, d0
 8019d04:	ee20 5b06 	vmul.f64	d5, d0, d6
 8019d08:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8019d60 <__kernel_sin+0x78>
 8019d0c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019d68 <__kernel_sin+0x80>
 8019d10:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019d14:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019d70 <__kernel_sin+0x88>
 8019d18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019d1c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019d78 <__kernel_sin+0x90>
 8019d20:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019d24:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019d80 <__kernel_sin+0x98>
 8019d28:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019d2c:	b930      	cbnz	r0, 8019d3c <__kernel_sin+0x54>
 8019d2e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019d88 <__kernel_sin+0xa0>
 8019d32:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019d36:	eea4 0b05 	vfma.f64	d0, d4, d5
 8019d3a:	4770      	bx	lr
 8019d3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8019d40:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8019d44:	eea1 7b04 	vfma.f64	d7, d1, d4
 8019d48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8019d4c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019d90 <__kernel_sin+0xa8>
 8019d50:	eea5 1b07 	vfma.f64	d1, d5, d7
 8019d54:	ee30 0b41 	vsub.f64	d0, d0, d1
 8019d58:	4770      	bx	lr
 8019d5a:	bf00      	nop
 8019d5c:	f3af 8000 	nop.w
 8019d60:	5acfd57c 	.word	0x5acfd57c
 8019d64:	3de5d93a 	.word	0x3de5d93a
 8019d68:	8a2b9ceb 	.word	0x8a2b9ceb
 8019d6c:	be5ae5e6 	.word	0xbe5ae5e6
 8019d70:	57b1fe7d 	.word	0x57b1fe7d
 8019d74:	3ec71de3 	.word	0x3ec71de3
 8019d78:	19c161d5 	.word	0x19c161d5
 8019d7c:	bf2a01a0 	.word	0xbf2a01a0
 8019d80:	1110f8a6 	.word	0x1110f8a6
 8019d84:	3f811111 	.word	0x3f811111
 8019d88:	55555549 	.word	0x55555549
 8019d8c:	bfc55555 	.word	0xbfc55555
 8019d90:	55555549 	.word	0x55555549
 8019d94:	3fc55555 	.word	0x3fc55555

08019d98 <__ieee754_rem_pio2>:
 8019d98:	b570      	push	{r4, r5, r6, lr}
 8019d9a:	eeb0 7b40 	vmov.f64	d7, d0
 8019d9e:	ee17 5a90 	vmov	r5, s15
 8019da2:	4b99      	ldr	r3, [pc, #612]	@ (801a008 <__ieee754_rem_pio2+0x270>)
 8019da4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019da8:	429e      	cmp	r6, r3
 8019daa:	b088      	sub	sp, #32
 8019dac:	4604      	mov	r4, r0
 8019dae:	d807      	bhi.n	8019dc0 <__ieee754_rem_pio2+0x28>
 8019db0:	2200      	movs	r2, #0
 8019db2:	2300      	movs	r3, #0
 8019db4:	ed84 0b00 	vstr	d0, [r4]
 8019db8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	e01b      	b.n	8019df8 <__ieee754_rem_pio2+0x60>
 8019dc0:	4b92      	ldr	r3, [pc, #584]	@ (801a00c <__ieee754_rem_pio2+0x274>)
 8019dc2:	429e      	cmp	r6, r3
 8019dc4:	d83b      	bhi.n	8019e3e <__ieee754_rem_pio2+0xa6>
 8019dc6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8019dca:	2d00      	cmp	r5, #0
 8019dcc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8019fc8 <__ieee754_rem_pio2+0x230>
 8019dd0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8019dd4:	dd19      	ble.n	8019e0a <__ieee754_rem_pio2+0x72>
 8019dd6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019dda:	429e      	cmp	r6, r3
 8019ddc:	d00e      	beq.n	8019dfc <__ieee754_rem_pio2+0x64>
 8019dde:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8019fd0 <__ieee754_rem_pio2+0x238>
 8019de2:	ee37 6b45 	vsub.f64	d6, d7, d5
 8019de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019dea:	ed84 6b00 	vstr	d6, [r4]
 8019dee:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019df2:	ed84 7b02 	vstr	d7, [r4, #8]
 8019df6:	2001      	movs	r0, #1
 8019df8:	b008      	add	sp, #32
 8019dfa:	bd70      	pop	{r4, r5, r6, pc}
 8019dfc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8019fd8 <__ieee754_rem_pio2+0x240>
 8019e00:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8019fe0 <__ieee754_rem_pio2+0x248>
 8019e04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019e08:	e7eb      	b.n	8019de2 <__ieee754_rem_pio2+0x4a>
 8019e0a:	429e      	cmp	r6, r3
 8019e0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019e10:	d00e      	beq.n	8019e30 <__ieee754_rem_pio2+0x98>
 8019e12:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8019fd0 <__ieee754_rem_pio2+0x238>
 8019e16:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019e1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019e1e:	ed84 6b00 	vstr	d6, [r4]
 8019e22:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019e26:	f04f 30ff 	mov.w	r0, #4294967295
 8019e2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8019e2e:	e7e3      	b.n	8019df8 <__ieee754_rem_pio2+0x60>
 8019e30:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8019fd8 <__ieee754_rem_pio2+0x240>
 8019e34:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8019fe0 <__ieee754_rem_pio2+0x248>
 8019e38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019e3c:	e7eb      	b.n	8019e16 <__ieee754_rem_pio2+0x7e>
 8019e3e:	4b74      	ldr	r3, [pc, #464]	@ (801a010 <__ieee754_rem_pio2+0x278>)
 8019e40:	429e      	cmp	r6, r3
 8019e42:	d870      	bhi.n	8019f26 <__ieee754_rem_pio2+0x18e>
 8019e44:	f000 f8ec 	bl	801a020 <fabs>
 8019e48:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8019e4c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019fe8 <__ieee754_rem_pio2+0x250>
 8019e50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019e54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019e58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019e5c:	ee17 0a90 	vmov	r0, s15
 8019e60:	eeb1 4b45 	vneg.f64	d4, d5
 8019e64:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019fc8 <__ieee754_rem_pio2+0x230>
 8019e68:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019e6c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019fd0 <__ieee754_rem_pio2+0x238>
 8019e70:	281f      	cmp	r0, #31
 8019e72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019e76:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019e7a:	dc05      	bgt.n	8019e88 <__ieee754_rem_pio2+0xf0>
 8019e7c:	4b65      	ldr	r3, [pc, #404]	@ (801a014 <__ieee754_rem_pio2+0x27c>)
 8019e7e:	1e42      	subs	r2, r0, #1
 8019e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e84:	42b3      	cmp	r3, r6
 8019e86:	d109      	bne.n	8019e9c <__ieee754_rem_pio2+0x104>
 8019e88:	ee16 3a90 	vmov	r3, s13
 8019e8c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019e90:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019e94:	2b10      	cmp	r3, #16
 8019e96:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019e9a:	dc02      	bgt.n	8019ea2 <__ieee754_rem_pio2+0x10a>
 8019e9c:	ed84 6b00 	vstr	d6, [r4]
 8019ea0:	e01a      	b.n	8019ed8 <__ieee754_rem_pio2+0x140>
 8019ea2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8019fd8 <__ieee754_rem_pio2+0x240>
 8019ea6:	eeb0 6b40 	vmov.f64	d6, d0
 8019eaa:	eea4 6b03 	vfma.f64	d6, d4, d3
 8019eae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019eb2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019eb6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8019fe0 <__ieee754_rem_pio2+0x248>
 8019eba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019ebe:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019ec2:	ee13 3a90 	vmov	r3, s7
 8019ec6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019eca:	1ad3      	subs	r3, r2, r3
 8019ecc:	2b31      	cmp	r3, #49	@ 0x31
 8019ece:	dc17      	bgt.n	8019f00 <__ieee754_rem_pio2+0x168>
 8019ed0:	eeb0 0b46 	vmov.f64	d0, d6
 8019ed4:	ed84 3b00 	vstr	d3, [r4]
 8019ed8:	ed94 6b00 	vldr	d6, [r4]
 8019edc:	2d00      	cmp	r5, #0
 8019ede:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019ee2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019ee6:	ed84 0b02 	vstr	d0, [r4, #8]
 8019eea:	da85      	bge.n	8019df8 <__ieee754_rem_pio2+0x60>
 8019eec:	eeb1 6b46 	vneg.f64	d6, d6
 8019ef0:	eeb1 0b40 	vneg.f64	d0, d0
 8019ef4:	ed84 6b00 	vstr	d6, [r4]
 8019ef8:	ed84 0b02 	vstr	d0, [r4, #8]
 8019efc:	4240      	negs	r0, r0
 8019efe:	e77b      	b.n	8019df8 <__ieee754_rem_pio2+0x60>
 8019f00:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8019ff0 <__ieee754_rem_pio2+0x258>
 8019f04:	eeb0 0b46 	vmov.f64	d0, d6
 8019f08:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019f0c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8019f10:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019f14:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8019ff8 <__ieee754_rem_pio2+0x260>
 8019f18:	eeb0 7b46 	vmov.f64	d7, d6
 8019f1c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8019f20:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019f24:	e7ba      	b.n	8019e9c <__ieee754_rem_pio2+0x104>
 8019f26:	4b3c      	ldr	r3, [pc, #240]	@ (801a018 <__ieee754_rem_pio2+0x280>)
 8019f28:	429e      	cmp	r6, r3
 8019f2a:	d906      	bls.n	8019f3a <__ieee754_rem_pio2+0x1a2>
 8019f2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019f30:	ed80 7b02 	vstr	d7, [r0, #8]
 8019f34:	ed80 7b00 	vstr	d7, [r0]
 8019f38:	e740      	b.n	8019dbc <__ieee754_rem_pio2+0x24>
 8019f3a:	ee10 3a10 	vmov	r3, s0
 8019f3e:	1532      	asrs	r2, r6, #20
 8019f40:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8019f44:	4618      	mov	r0, r3
 8019f46:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019f4a:	ec41 0b17 	vmov	d7, r0, r1
 8019f4e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019f52:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801a000 <__ieee754_rem_pio2+0x268>
 8019f56:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f5e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019f62:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019f66:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019f6a:	a808      	add	r0, sp, #32
 8019f6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019f70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f74:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019f78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019f7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019f80:	2103      	movs	r1, #3
 8019f82:	ed30 7b02 	vldmdb	r0!, {d7}
 8019f86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f8e:	460b      	mov	r3, r1
 8019f90:	f101 31ff 	add.w	r1, r1, #4294967295
 8019f94:	d0f5      	beq.n	8019f82 <__ieee754_rem_pio2+0x1ea>
 8019f96:	4921      	ldr	r1, [pc, #132]	@ (801a01c <__ieee754_rem_pio2+0x284>)
 8019f98:	9101      	str	r1, [sp, #4]
 8019f9a:	2102      	movs	r1, #2
 8019f9c:	9100      	str	r1, [sp, #0]
 8019f9e:	a802      	add	r0, sp, #8
 8019fa0:	4621      	mov	r1, r4
 8019fa2:	f000 f845 	bl	801a030 <__kernel_rem_pio2>
 8019fa6:	2d00      	cmp	r5, #0
 8019fa8:	f6bf af26 	bge.w	8019df8 <__ieee754_rem_pio2+0x60>
 8019fac:	ed94 7b00 	vldr	d7, [r4]
 8019fb0:	eeb1 7b47 	vneg.f64	d7, d7
 8019fb4:	ed84 7b00 	vstr	d7, [r4]
 8019fb8:	ed94 7b02 	vldr	d7, [r4, #8]
 8019fbc:	eeb1 7b47 	vneg.f64	d7, d7
 8019fc0:	ed84 7b02 	vstr	d7, [r4, #8]
 8019fc4:	e79a      	b.n	8019efc <__ieee754_rem_pio2+0x164>
 8019fc6:	bf00      	nop
 8019fc8:	54400000 	.word	0x54400000
 8019fcc:	3ff921fb 	.word	0x3ff921fb
 8019fd0:	1a626331 	.word	0x1a626331
 8019fd4:	3dd0b461 	.word	0x3dd0b461
 8019fd8:	1a600000 	.word	0x1a600000
 8019fdc:	3dd0b461 	.word	0x3dd0b461
 8019fe0:	2e037073 	.word	0x2e037073
 8019fe4:	3ba3198a 	.word	0x3ba3198a
 8019fe8:	6dc9c883 	.word	0x6dc9c883
 8019fec:	3fe45f30 	.word	0x3fe45f30
 8019ff0:	2e000000 	.word	0x2e000000
 8019ff4:	3ba3198a 	.word	0x3ba3198a
 8019ff8:	252049c1 	.word	0x252049c1
 8019ffc:	397b839a 	.word	0x397b839a
 801a000:	00000000 	.word	0x00000000
 801a004:	41700000 	.word	0x41700000
 801a008:	3fe921fb 	.word	0x3fe921fb
 801a00c:	4002d97b 	.word	0x4002d97b
 801a010:	413921fb 	.word	0x413921fb
 801a014:	0801b080 	.word	0x0801b080
 801a018:	7fefffff 	.word	0x7fefffff
 801a01c:	0801b100 	.word	0x0801b100

0801a020 <fabs>:
 801a020:	ec51 0b10 	vmov	r0, r1, d0
 801a024:	4602      	mov	r2, r0
 801a026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a02a:	ec43 2b10 	vmov	d0, r2, r3
 801a02e:	4770      	bx	lr

0801a030 <__kernel_rem_pio2>:
 801a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a034:	ed2d 8b06 	vpush	{d8-d10}
 801a038:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801a03c:	469b      	mov	fp, r3
 801a03e:	9001      	str	r0, [sp, #4]
 801a040:	4bbb      	ldr	r3, [pc, #748]	@ (801a330 <__kernel_rem_pio2+0x300>)
 801a042:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801a044:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801a048:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801a04c:	f112 0f14 	cmn.w	r2, #20
 801a050:	bfa8      	it	ge
 801a052:	1ed3      	subge	r3, r2, #3
 801a054:	f10b 3aff 	add.w	sl, fp, #4294967295
 801a058:	bfb8      	it	lt
 801a05a:	2300      	movlt	r3, #0
 801a05c:	f06f 0517 	mvn.w	r5, #23
 801a060:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801a318 <__kernel_rem_pio2+0x2e8>
 801a064:	bfa4      	itt	ge
 801a066:	2018      	movge	r0, #24
 801a068:	fb93 f3f0 	sdivge	r3, r3, r0
 801a06c:	fb03 5505 	mla	r5, r3, r5, r5
 801a070:	eba3 040a 	sub.w	r4, r3, sl
 801a074:	4415      	add	r5, r2
 801a076:	460f      	mov	r7, r1
 801a078:	eb09 060a 	add.w	r6, r9, sl
 801a07c:	a81a      	add	r0, sp, #104	@ 0x68
 801a07e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801a082:	2200      	movs	r2, #0
 801a084:	42b2      	cmp	r2, r6
 801a086:	dd0e      	ble.n	801a0a6 <__kernel_rem_pio2+0x76>
 801a088:	aa1a      	add	r2, sp, #104	@ 0x68
 801a08a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801a08e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801a092:	2600      	movs	r6, #0
 801a094:	454e      	cmp	r6, r9
 801a096:	dc25      	bgt.n	801a0e4 <__kernel_rem_pio2+0xb4>
 801a098:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801a318 <__kernel_rem_pio2+0x2e8>
 801a09c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a0a0:	4614      	mov	r4, r2
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	e015      	b.n	801a0d2 <__kernel_rem_pio2+0xa2>
 801a0a6:	42d4      	cmn	r4, r2
 801a0a8:	d409      	bmi.n	801a0be <__kernel_rem_pio2+0x8e>
 801a0aa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801a0ae:	ee07 1a90 	vmov	s15, r1
 801a0b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a0b6:	eca0 7b02 	vstmia	r0!, {d7}
 801a0ba:	3201      	adds	r2, #1
 801a0bc:	e7e2      	b.n	801a084 <__kernel_rem_pio2+0x54>
 801a0be:	eeb0 7b46 	vmov.f64	d7, d6
 801a0c2:	e7f8      	b.n	801a0b6 <__kernel_rem_pio2+0x86>
 801a0c4:	ecbc 5b02 	vldmia	ip!, {d5}
 801a0c8:	ed94 6b00 	vldr	d6, [r4]
 801a0cc:	3001      	adds	r0, #1
 801a0ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a0d2:	4550      	cmp	r0, sl
 801a0d4:	f1a4 0408 	sub.w	r4, r4, #8
 801a0d8:	ddf4      	ble.n	801a0c4 <__kernel_rem_pio2+0x94>
 801a0da:	ecae 7b02 	vstmia	lr!, {d7}
 801a0de:	3601      	adds	r6, #1
 801a0e0:	3208      	adds	r2, #8
 801a0e2:	e7d7      	b.n	801a094 <__kernel_rem_pio2+0x64>
 801a0e4:	aa06      	add	r2, sp, #24
 801a0e6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801a320 <__kernel_rem_pio2+0x2f0>
 801a0ea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801a328 <__kernel_rem_pio2+0x2f8>
 801a0ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801a0f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801a0f6:	9203      	str	r2, [sp, #12]
 801a0f8:	9302      	str	r3, [sp, #8]
 801a0fa:	464c      	mov	r4, r9
 801a0fc:	00e3      	lsls	r3, r4, #3
 801a0fe:	9304      	str	r3, [sp, #16]
 801a100:	ab92      	add	r3, sp, #584	@ 0x248
 801a102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a106:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801a10a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801a10c:	ab06      	add	r3, sp, #24
 801a10e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a112:	461e      	mov	r6, r3
 801a114:	4620      	mov	r0, r4
 801a116:	2800      	cmp	r0, #0
 801a118:	f1a2 0208 	sub.w	r2, r2, #8
 801a11c:	dc4a      	bgt.n	801a1b4 <__kernel_rem_pio2+0x184>
 801a11e:	4628      	mov	r0, r5
 801a120:	9305      	str	r3, [sp, #20]
 801a122:	f000 fa01 	bl	801a528 <scalbn>
 801a126:	eeb0 8b40 	vmov.f64	d8, d0
 801a12a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801a12e:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a132:	f000 fa79 	bl	801a628 <floor>
 801a136:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801a13a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a13e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a142:	2d00      	cmp	r5, #0
 801a144:	ee17 8a90 	vmov	r8, s15
 801a148:	9b05      	ldr	r3, [sp, #20]
 801a14a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a14e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801a152:	dd41      	ble.n	801a1d8 <__kernel_rem_pio2+0x1a8>
 801a154:	1e60      	subs	r0, r4, #1
 801a156:	aa06      	add	r2, sp, #24
 801a158:	f1c5 0c18 	rsb	ip, r5, #24
 801a15c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a160:	fa46 f20c 	asr.w	r2, r6, ip
 801a164:	4490      	add	r8, r2
 801a166:	fa02 f20c 	lsl.w	r2, r2, ip
 801a16a:	1ab6      	subs	r6, r6, r2
 801a16c:	aa06      	add	r2, sp, #24
 801a16e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801a172:	f1c5 0217 	rsb	r2, r5, #23
 801a176:	4116      	asrs	r6, r2
 801a178:	2e00      	cmp	r6, #0
 801a17a:	dd3c      	ble.n	801a1f6 <__kernel_rem_pio2+0x1c6>
 801a17c:	f04f 0c00 	mov.w	ip, #0
 801a180:	f108 0801 	add.w	r8, r8, #1
 801a184:	4660      	mov	r0, ip
 801a186:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801a18a:	4564      	cmp	r4, ip
 801a18c:	dc66      	bgt.n	801a25c <__kernel_rem_pio2+0x22c>
 801a18e:	2d00      	cmp	r5, #0
 801a190:	dd03      	ble.n	801a19a <__kernel_rem_pio2+0x16a>
 801a192:	2d01      	cmp	r5, #1
 801a194:	d072      	beq.n	801a27c <__kernel_rem_pio2+0x24c>
 801a196:	2d02      	cmp	r5, #2
 801a198:	d07a      	beq.n	801a290 <__kernel_rem_pio2+0x260>
 801a19a:	2e02      	cmp	r6, #2
 801a19c:	d12b      	bne.n	801a1f6 <__kernel_rem_pio2+0x1c6>
 801a19e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801a1a2:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a1a6:	b330      	cbz	r0, 801a1f6 <__kernel_rem_pio2+0x1c6>
 801a1a8:	4628      	mov	r0, r5
 801a1aa:	f000 f9bd 	bl	801a528 <scalbn>
 801a1ae:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a1b2:	e020      	b.n	801a1f6 <__kernel_rem_pio2+0x1c6>
 801a1b4:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a1b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a1bc:	3801      	subs	r0, #1
 801a1be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a1c2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a1c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a1ca:	eca6 0a01 	vstmia	r6!, {s0}
 801a1ce:	ed92 0b00 	vldr	d0, [r2]
 801a1d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a1d6:	e79e      	b.n	801a116 <__kernel_rem_pio2+0xe6>
 801a1d8:	d105      	bne.n	801a1e6 <__kernel_rem_pio2+0x1b6>
 801a1da:	1e62      	subs	r2, r4, #1
 801a1dc:	a906      	add	r1, sp, #24
 801a1de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a1e2:	15f6      	asrs	r6, r6, #23
 801a1e4:	e7c8      	b.n	801a178 <__kernel_rem_pio2+0x148>
 801a1e6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801a1ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1f2:	da31      	bge.n	801a258 <__kernel_rem_pio2+0x228>
 801a1f4:	2600      	movs	r6, #0
 801a1f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1fe:	f040 809b 	bne.w	801a338 <__kernel_rem_pio2+0x308>
 801a202:	1e62      	subs	r2, r4, #1
 801a204:	2000      	movs	r0, #0
 801a206:	454a      	cmp	r2, r9
 801a208:	da49      	bge.n	801a29e <__kernel_rem_pio2+0x26e>
 801a20a:	2800      	cmp	r0, #0
 801a20c:	d062      	beq.n	801a2d4 <__kernel_rem_pio2+0x2a4>
 801a20e:	3c01      	subs	r4, #1
 801a210:	ab06      	add	r3, sp, #24
 801a212:	3d18      	subs	r5, #24
 801a214:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d0f8      	beq.n	801a20e <__kernel_rem_pio2+0x1de>
 801a21c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801a220:	4628      	mov	r0, r5
 801a222:	f000 f981 	bl	801a528 <scalbn>
 801a226:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801a320 <__kernel_rem_pio2+0x2f0>
 801a22a:	1c62      	adds	r2, r4, #1
 801a22c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801a22e:	00d3      	lsls	r3, r2, #3
 801a230:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a234:	4622      	mov	r2, r4
 801a236:	2a00      	cmp	r2, #0
 801a238:	f280 80a8 	bge.w	801a38c <__kernel_rem_pio2+0x35c>
 801a23c:	4622      	mov	r2, r4
 801a23e:	2a00      	cmp	r2, #0
 801a240:	f2c0 80c6 	blt.w	801a3d0 <__kernel_rem_pio2+0x3a0>
 801a244:	a96a      	add	r1, sp, #424	@ 0x1a8
 801a246:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801a24a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801a318 <__kernel_rem_pio2+0x2e8>
 801a24e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801a334 <__kernel_rem_pio2+0x304>
 801a252:	2000      	movs	r0, #0
 801a254:	1aa1      	subs	r1, r4, r2
 801a256:	e0b0      	b.n	801a3ba <__kernel_rem_pio2+0x38a>
 801a258:	2602      	movs	r6, #2
 801a25a:	e78f      	b.n	801a17c <__kernel_rem_pio2+0x14c>
 801a25c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a260:	b948      	cbnz	r0, 801a276 <__kernel_rem_pio2+0x246>
 801a262:	b122      	cbz	r2, 801a26e <__kernel_rem_pio2+0x23e>
 801a264:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801a268:	f843 2c04 	str.w	r2, [r3, #-4]
 801a26c:	2201      	movs	r2, #1
 801a26e:	f10c 0c01 	add.w	ip, ip, #1
 801a272:	4610      	mov	r0, r2
 801a274:	e789      	b.n	801a18a <__kernel_rem_pio2+0x15a>
 801a276:	ebae 0202 	sub.w	r2, lr, r2
 801a27a:	e7f5      	b.n	801a268 <__kernel_rem_pio2+0x238>
 801a27c:	1e62      	subs	r2, r4, #1
 801a27e:	ab06      	add	r3, sp, #24
 801a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a284:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a288:	a906      	add	r1, sp, #24
 801a28a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a28e:	e784      	b.n	801a19a <__kernel_rem_pio2+0x16a>
 801a290:	1e62      	subs	r2, r4, #1
 801a292:	ab06      	add	r3, sp, #24
 801a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a29c:	e7f4      	b.n	801a288 <__kernel_rem_pio2+0x258>
 801a29e:	ab06      	add	r3, sp, #24
 801a2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2a4:	3a01      	subs	r2, #1
 801a2a6:	4318      	orrs	r0, r3
 801a2a8:	e7ad      	b.n	801a206 <__kernel_rem_pio2+0x1d6>
 801a2aa:	3301      	adds	r3, #1
 801a2ac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	d0fa      	beq.n	801a2aa <__kernel_rem_pio2+0x27a>
 801a2b4:	9a04      	ldr	r2, [sp, #16]
 801a2b6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801a2ba:	446a      	add	r2, sp
 801a2bc:	eb04 000b 	add.w	r0, r4, fp
 801a2c0:	a91a      	add	r1, sp, #104	@ 0x68
 801a2c2:	1c66      	adds	r6, r4, #1
 801a2c4:	3a98      	subs	r2, #152	@ 0x98
 801a2c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801a2ca:	4423      	add	r3, r4
 801a2cc:	42b3      	cmp	r3, r6
 801a2ce:	da04      	bge.n	801a2da <__kernel_rem_pio2+0x2aa>
 801a2d0:	461c      	mov	r4, r3
 801a2d2:	e713      	b.n	801a0fc <__kernel_rem_pio2+0xcc>
 801a2d4:	9a03      	ldr	r2, [sp, #12]
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	e7e8      	b.n	801a2ac <__kernel_rem_pio2+0x27c>
 801a2da:	9902      	ldr	r1, [sp, #8]
 801a2dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a2e0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801a2e4:	9104      	str	r1, [sp, #16]
 801a2e6:	ee07 1a90 	vmov	s15, r1
 801a2ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a2ee:	2400      	movs	r4, #0
 801a2f0:	eca0 7b02 	vstmia	r0!, {d7}
 801a2f4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801a318 <__kernel_rem_pio2+0x2e8>
 801a2f8:	4686      	mov	lr, r0
 801a2fa:	4554      	cmp	r4, sl
 801a2fc:	dd03      	ble.n	801a306 <__kernel_rem_pio2+0x2d6>
 801a2fe:	eca2 7b02 	vstmia	r2!, {d7}
 801a302:	3601      	adds	r6, #1
 801a304:	e7e2      	b.n	801a2cc <__kernel_rem_pio2+0x29c>
 801a306:	ecbc 5b02 	vldmia	ip!, {d5}
 801a30a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801a30e:	3401      	adds	r4, #1
 801a310:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a314:	e7f1      	b.n	801a2fa <__kernel_rem_pio2+0x2ca>
 801a316:	bf00      	nop
	...
 801a324:	3e700000 	.word	0x3e700000
 801a328:	00000000 	.word	0x00000000
 801a32c:	41700000 	.word	0x41700000
 801a330:	0801b248 	.word	0x0801b248
 801a334:	0801b208 	.word	0x0801b208
 801a338:	4268      	negs	r0, r5
 801a33a:	eeb0 0b48 	vmov.f64	d0, d8
 801a33e:	f000 f8f3 	bl	801a528 <scalbn>
 801a342:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801a510 <__kernel_rem_pio2+0x4e0>
 801a346:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a34e:	db17      	blt.n	801a380 <__kernel_rem_pio2+0x350>
 801a350:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801a518 <__kernel_rem_pio2+0x4e8>
 801a354:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a358:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a35c:	aa06      	add	r2, sp, #24
 801a35e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a362:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a366:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a36a:	3518      	adds	r5, #24
 801a36c:	ee10 3a10 	vmov	r3, s0
 801a370:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a374:	ee17 3a10 	vmov	r3, s14
 801a378:	3401      	adds	r4, #1
 801a37a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a37e:	e74d      	b.n	801a21c <__kernel_rem_pio2+0x1ec>
 801a380:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a384:	aa06      	add	r2, sp, #24
 801a386:	ee10 3a10 	vmov	r3, s0
 801a38a:	e7f6      	b.n	801a37a <__kernel_rem_pio2+0x34a>
 801a38c:	a806      	add	r0, sp, #24
 801a38e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a392:	9001      	str	r0, [sp, #4]
 801a394:	ee07 0a90 	vmov	s15, r0
 801a398:	3a01      	subs	r2, #1
 801a39a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a39e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a3a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a3a6:	ed21 7b02 	vstmdb	r1!, {d7}
 801a3aa:	e744      	b.n	801a236 <__kernel_rem_pio2+0x206>
 801a3ac:	ecbc 5b02 	vldmia	ip!, {d5}
 801a3b0:	ecb5 6b02 	vldmia	r5!, {d6}
 801a3b4:	3001      	adds	r0, #1
 801a3b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a3ba:	4548      	cmp	r0, r9
 801a3bc:	dc01      	bgt.n	801a3c2 <__kernel_rem_pio2+0x392>
 801a3be:	4281      	cmp	r1, r0
 801a3c0:	daf4      	bge.n	801a3ac <__kernel_rem_pio2+0x37c>
 801a3c2:	a842      	add	r0, sp, #264	@ 0x108
 801a3c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a3c8:	ed81 7b00 	vstr	d7, [r1]
 801a3cc:	3a01      	subs	r2, #1
 801a3ce:	e736      	b.n	801a23e <__kernel_rem_pio2+0x20e>
 801a3d0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801a3d2:	2a02      	cmp	r2, #2
 801a3d4:	dc0a      	bgt.n	801a3ec <__kernel_rem_pio2+0x3bc>
 801a3d6:	2a00      	cmp	r2, #0
 801a3d8:	dc2d      	bgt.n	801a436 <__kernel_rem_pio2+0x406>
 801a3da:	d046      	beq.n	801a46a <__kernel_rem_pio2+0x43a>
 801a3dc:	f008 0007 	and.w	r0, r8, #7
 801a3e0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801a3e4:	ecbd 8b06 	vpop	{d8-d10}
 801a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801a3ee:	2a03      	cmp	r2, #3
 801a3f0:	d1f4      	bne.n	801a3dc <__kernel_rem_pio2+0x3ac>
 801a3f2:	a942      	add	r1, sp, #264	@ 0x108
 801a3f4:	f1a3 0208 	sub.w	r2, r3, #8
 801a3f8:	440a      	add	r2, r1
 801a3fa:	4611      	mov	r1, r2
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	2800      	cmp	r0, #0
 801a400:	f1a1 0108 	sub.w	r1, r1, #8
 801a404:	dc52      	bgt.n	801a4ac <__kernel_rem_pio2+0x47c>
 801a406:	4621      	mov	r1, r4
 801a408:	2901      	cmp	r1, #1
 801a40a:	f1a2 0208 	sub.w	r2, r2, #8
 801a40e:	dc5d      	bgt.n	801a4cc <__kernel_rem_pio2+0x49c>
 801a410:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801a520 <__kernel_rem_pio2+0x4f0>
 801a414:	aa42      	add	r2, sp, #264	@ 0x108
 801a416:	4413      	add	r3, r2
 801a418:	2c01      	cmp	r4, #1
 801a41a:	dc67      	bgt.n	801a4ec <__kernel_rem_pio2+0x4bc>
 801a41c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801a420:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801a424:	2e00      	cmp	r6, #0
 801a426:	d167      	bne.n	801a4f8 <__kernel_rem_pio2+0x4c8>
 801a428:	ed87 5b00 	vstr	d5, [r7]
 801a42c:	ed87 6b02 	vstr	d6, [r7, #8]
 801a430:	ed87 7b04 	vstr	d7, [r7, #16]
 801a434:	e7d2      	b.n	801a3dc <__kernel_rem_pio2+0x3ac>
 801a436:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801a520 <__kernel_rem_pio2+0x4f0>
 801a43a:	aa42      	add	r2, sp, #264	@ 0x108
 801a43c:	4413      	add	r3, r2
 801a43e:	4622      	mov	r2, r4
 801a440:	2a00      	cmp	r2, #0
 801a442:	da24      	bge.n	801a48e <__kernel_rem_pio2+0x45e>
 801a444:	b34e      	cbz	r6, 801a49a <__kernel_rem_pio2+0x46a>
 801a446:	eeb1 7b46 	vneg.f64	d7, d6
 801a44a:	ed87 7b00 	vstr	d7, [r7]
 801a44e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801a452:	aa44      	add	r2, sp, #272	@ 0x110
 801a454:	2301      	movs	r3, #1
 801a456:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a45a:	429c      	cmp	r4, r3
 801a45c:	da20      	bge.n	801a4a0 <__kernel_rem_pio2+0x470>
 801a45e:	b10e      	cbz	r6, 801a464 <__kernel_rem_pio2+0x434>
 801a460:	eeb1 7b47 	vneg.f64	d7, d7
 801a464:	ed87 7b02 	vstr	d7, [r7, #8]
 801a468:	e7b8      	b.n	801a3dc <__kernel_rem_pio2+0x3ac>
 801a46a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801a520 <__kernel_rem_pio2+0x4f0>
 801a46e:	aa42      	add	r2, sp, #264	@ 0x108
 801a470:	4413      	add	r3, r2
 801a472:	2c00      	cmp	r4, #0
 801a474:	da05      	bge.n	801a482 <__kernel_rem_pio2+0x452>
 801a476:	b10e      	cbz	r6, 801a47c <__kernel_rem_pio2+0x44c>
 801a478:	eeb1 7b47 	vneg.f64	d7, d7
 801a47c:	ed87 7b00 	vstr	d7, [r7]
 801a480:	e7ac      	b.n	801a3dc <__kernel_rem_pio2+0x3ac>
 801a482:	ed33 6b02 	vldmdb	r3!, {d6}
 801a486:	3c01      	subs	r4, #1
 801a488:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a48c:	e7f1      	b.n	801a472 <__kernel_rem_pio2+0x442>
 801a48e:	ed33 7b02 	vldmdb	r3!, {d7}
 801a492:	3a01      	subs	r2, #1
 801a494:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a498:	e7d2      	b.n	801a440 <__kernel_rem_pio2+0x410>
 801a49a:	eeb0 7b46 	vmov.f64	d7, d6
 801a49e:	e7d4      	b.n	801a44a <__kernel_rem_pio2+0x41a>
 801a4a0:	ecb2 6b02 	vldmia	r2!, {d6}
 801a4a4:	3301      	adds	r3, #1
 801a4a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a4aa:	e7d6      	b.n	801a45a <__kernel_rem_pio2+0x42a>
 801a4ac:	ed91 7b00 	vldr	d7, [r1]
 801a4b0:	ed91 5b02 	vldr	d5, [r1, #8]
 801a4b4:	3801      	subs	r0, #1
 801a4b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a4ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4be:	ed81 6b00 	vstr	d6, [r1]
 801a4c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a4c6:	ed81 7b02 	vstr	d7, [r1, #8]
 801a4ca:	e798      	b.n	801a3fe <__kernel_rem_pio2+0x3ce>
 801a4cc:	ed92 7b00 	vldr	d7, [r2]
 801a4d0:	ed92 5b02 	vldr	d5, [r2, #8]
 801a4d4:	3901      	subs	r1, #1
 801a4d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a4da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4de:	ed82 6b00 	vstr	d6, [r2]
 801a4e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a4e6:	ed82 7b02 	vstr	d7, [r2, #8]
 801a4ea:	e78d      	b.n	801a408 <__kernel_rem_pio2+0x3d8>
 801a4ec:	ed33 6b02 	vldmdb	r3!, {d6}
 801a4f0:	3c01      	subs	r4, #1
 801a4f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a4f6:	e78f      	b.n	801a418 <__kernel_rem_pio2+0x3e8>
 801a4f8:	eeb1 5b45 	vneg.f64	d5, d5
 801a4fc:	eeb1 6b46 	vneg.f64	d6, d6
 801a500:	ed87 5b00 	vstr	d5, [r7]
 801a504:	eeb1 7b47 	vneg.f64	d7, d7
 801a508:	ed87 6b02 	vstr	d6, [r7, #8]
 801a50c:	e790      	b.n	801a430 <__kernel_rem_pio2+0x400>
 801a50e:	bf00      	nop
 801a510:	00000000 	.word	0x00000000
 801a514:	41700000 	.word	0x41700000
 801a518:	00000000 	.word	0x00000000
 801a51c:	3e700000 	.word	0x3e700000
	...

0801a528 <scalbn>:
 801a528:	ee10 1a90 	vmov	r1, s1
 801a52c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a530:	b98b      	cbnz	r3, 801a556 <scalbn+0x2e>
 801a532:	ee10 3a10 	vmov	r3, s0
 801a536:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801a53a:	4319      	orrs	r1, r3
 801a53c:	d00a      	beq.n	801a554 <scalbn+0x2c>
 801a53e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801a5f0 <scalbn+0xc8>
 801a542:	4b37      	ldr	r3, [pc, #220]	@ (801a620 <scalbn+0xf8>)
 801a544:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a548:	4298      	cmp	r0, r3
 801a54a:	da0b      	bge.n	801a564 <scalbn+0x3c>
 801a54c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801a5f8 <scalbn+0xd0>
 801a550:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a554:	4770      	bx	lr
 801a556:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801a55a:	4293      	cmp	r3, r2
 801a55c:	d107      	bne.n	801a56e <scalbn+0x46>
 801a55e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a562:	4770      	bx	lr
 801a564:	ee10 1a90 	vmov	r1, s1
 801a568:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a56c:	3b36      	subs	r3, #54	@ 0x36
 801a56e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801a572:	4290      	cmp	r0, r2
 801a574:	dd0d      	ble.n	801a592 <scalbn+0x6a>
 801a576:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801a600 <scalbn+0xd8>
 801a57a:	ee10 3a90 	vmov	r3, s1
 801a57e:	eeb0 6b47 	vmov.f64	d6, d7
 801a582:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801a608 <scalbn+0xe0>
 801a586:	2b00      	cmp	r3, #0
 801a588:	fe27 7b05 	vselge.f64	d7, d7, d5
 801a58c:	ee27 0b06 	vmul.f64	d0, d7, d6
 801a590:	4770      	bx	lr
 801a592:	4418      	add	r0, r3
 801a594:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801a598:	4298      	cmp	r0, r3
 801a59a:	dcec      	bgt.n	801a576 <scalbn+0x4e>
 801a59c:	2800      	cmp	r0, #0
 801a59e:	dd0a      	ble.n	801a5b6 <scalbn+0x8e>
 801a5a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801a5a4:	ec53 2b10 	vmov	r2, r3, d0
 801a5a8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801a5ac:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a5b0:	ec43 2b10 	vmov	d0, r2, r3
 801a5b4:	4770      	bx	lr
 801a5b6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801a5ba:	da09      	bge.n	801a5d0 <scalbn+0xa8>
 801a5bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801a5f8 <scalbn+0xd0>
 801a5c0:	ee10 3a90 	vmov	r3, s1
 801a5c4:	eeb0 6b47 	vmov.f64	d6, d7
 801a5c8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801a610 <scalbn+0xe8>
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	e7db      	b.n	801a588 <scalbn+0x60>
 801a5d0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801a5d4:	ec53 2b10 	vmov	r2, r3, d0
 801a5d8:	3036      	adds	r0, #54	@ 0x36
 801a5da:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801a5de:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a5e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801a618 <scalbn+0xf0>
 801a5e6:	ec43 2b10 	vmov	d0, r2, r3
 801a5ea:	e7b1      	b.n	801a550 <scalbn+0x28>
 801a5ec:	f3af 8000 	nop.w
 801a5f0:	00000000 	.word	0x00000000
 801a5f4:	43500000 	.word	0x43500000
 801a5f8:	c2f8f359 	.word	0xc2f8f359
 801a5fc:	01a56e1f 	.word	0x01a56e1f
 801a600:	8800759c 	.word	0x8800759c
 801a604:	7e37e43c 	.word	0x7e37e43c
 801a608:	8800759c 	.word	0x8800759c
 801a60c:	fe37e43c 	.word	0xfe37e43c
 801a610:	c2f8f359 	.word	0xc2f8f359
 801a614:	81a56e1f 	.word	0x81a56e1f
 801a618:	00000000 	.word	0x00000000
 801a61c:	3c900000 	.word	0x3c900000
 801a620:	ffff3cb0 	.word	0xffff3cb0
 801a624:	00000000 	.word	0x00000000

0801a628 <floor>:
 801a628:	ee10 3a90 	vmov	r3, s1
 801a62c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801a630:	ee10 2a10 	vmov	r2, s0
 801a634:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801a638:	2913      	cmp	r1, #19
 801a63a:	b530      	push	{r4, r5, lr}
 801a63c:	4615      	mov	r5, r2
 801a63e:	dc33      	bgt.n	801a6a8 <floor+0x80>
 801a640:	2900      	cmp	r1, #0
 801a642:	da18      	bge.n	801a676 <floor+0x4e>
 801a644:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801a708 <floor+0xe0>
 801a648:	ee30 0b07 	vadd.f64	d0, d0, d7
 801a64c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a654:	dd0a      	ble.n	801a66c <floor+0x44>
 801a656:	2b00      	cmp	r3, #0
 801a658:	da50      	bge.n	801a6fc <floor+0xd4>
 801a65a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a65e:	4313      	orrs	r3, r2
 801a660:	2200      	movs	r2, #0
 801a662:	4293      	cmp	r3, r2
 801a664:	4b2a      	ldr	r3, [pc, #168]	@ (801a710 <floor+0xe8>)
 801a666:	bf08      	it	eq
 801a668:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a66c:	4619      	mov	r1, r3
 801a66e:	4610      	mov	r0, r2
 801a670:	ec41 0b10 	vmov	d0, r0, r1
 801a674:	e01f      	b.n	801a6b6 <floor+0x8e>
 801a676:	4827      	ldr	r0, [pc, #156]	@ (801a714 <floor+0xec>)
 801a678:	4108      	asrs	r0, r1
 801a67a:	ea03 0400 	and.w	r4, r3, r0
 801a67e:	4314      	orrs	r4, r2
 801a680:	d019      	beq.n	801a6b6 <floor+0x8e>
 801a682:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a708 <floor+0xe0>
 801a686:	ee30 0b07 	vadd.f64	d0, d0, d7
 801a68a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a692:	ddeb      	ble.n	801a66c <floor+0x44>
 801a694:	2b00      	cmp	r3, #0
 801a696:	bfbe      	ittt	lt
 801a698:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801a69c:	410a      	asrlt	r2, r1
 801a69e:	189b      	addlt	r3, r3, r2
 801a6a0:	ea23 0300 	bic.w	r3, r3, r0
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	e7e1      	b.n	801a66c <floor+0x44>
 801a6a8:	2933      	cmp	r1, #51	@ 0x33
 801a6aa:	dd05      	ble.n	801a6b8 <floor+0x90>
 801a6ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a6b0:	d101      	bne.n	801a6b6 <floor+0x8e>
 801a6b2:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a6b6:	bd30      	pop	{r4, r5, pc}
 801a6b8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6c0:	40e0      	lsrs	r0, r4
 801a6c2:	4210      	tst	r0, r2
 801a6c4:	d0f7      	beq.n	801a6b6 <floor+0x8e>
 801a6c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801a708 <floor+0xe0>
 801a6ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 801a6ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d6:	ddc9      	ble.n	801a66c <floor+0x44>
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	da02      	bge.n	801a6e2 <floor+0xba>
 801a6dc:	2914      	cmp	r1, #20
 801a6de:	d103      	bne.n	801a6e8 <floor+0xc0>
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	ea22 0200 	bic.w	r2, r2, r0
 801a6e6:	e7c1      	b.n	801a66c <floor+0x44>
 801a6e8:	2401      	movs	r4, #1
 801a6ea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801a6ee:	fa04 f101 	lsl.w	r1, r4, r1
 801a6f2:	440a      	add	r2, r1
 801a6f4:	42aa      	cmp	r2, r5
 801a6f6:	bf38      	it	cc
 801a6f8:	191b      	addcc	r3, r3, r4
 801a6fa:	e7f2      	b.n	801a6e2 <floor+0xba>
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	4613      	mov	r3, r2
 801a700:	e7b4      	b.n	801a66c <floor+0x44>
 801a702:	bf00      	nop
 801a704:	f3af 8000 	nop.w
 801a708:	8800759c 	.word	0x8800759c
 801a70c:	7e37e43c 	.word	0x7e37e43c
 801a710:	bff00000 	.word	0xbff00000
 801a714:	000fffff 	.word	0x000fffff

0801a718 <_init>:
 801a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a71a:	bf00      	nop
 801a71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a71e:	bc08      	pop	{r3}
 801a720:	469e      	mov	lr, r3
 801a722:	4770      	bx	lr

0801a724 <_fini>:
 801a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a726:	bf00      	nop
 801a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a72a:	bc08      	pop	{r3}
 801a72c:	469e      	mov	lr, r3
 801a72e:	4770      	bx	lr
