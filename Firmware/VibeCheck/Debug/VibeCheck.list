
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d518  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  0801d7e8  0801d7e8  0001e7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ea78  0801ea78  0001fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ea80  0801ea80  0001fa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ea84  0801ea84  0001fa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801ea88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001cb48  240002fc  0801ed84  000202fc  2**2
                  ALLOC
  8 ._user_heap_stack 00006404  2401ce44  0801ed84  00020e44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a74a  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007483  00000000  00000000  0005aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002920  00000000  00000000  00061ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fdd  00000000  00000000  00064818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e675  00000000  00000000  000667f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c339  00000000  00000000  000a4e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017321e  00000000  00000000  000e11a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002543c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c508  00000000  00000000  00254404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  0026090c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  002609b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d7d0 	.word	0x0801d7d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801d7d0 	.word	0x0801d7d0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a ff3f 	bl	800b980 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801d7e8 	.word	0x0801d7e8
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801d7f0 	.word	0x0801d7f0
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00a fbf4 	bl	800b980 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f00f fe97 	bl	8010edc <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00a fbdf 	bl	800b980 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00a fbc2 	bl	800b980 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f00f fc7a 	bl	8010b00 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00a fbb0 	bl	800b980 <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	b470      	push	{r4, r5, r6}
 800122e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001232:	4684      	mov	ip, r0
 8001234:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001236:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123a:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123c:	685e      	ldr	r6, [r3, #4]
 800123e:	4030      	ands	r0, r6
 8001240:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001242:	68d8      	ldr	r0, [r3, #12]
 8001244:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 8001248:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f040 0001 	orr.w	r0, r0, #1
 8001250:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001258:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125a:	b1a2      	cbz	r2, 8001286 <SPI_TxRx_Fast+0x5a>
 800125c:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001260:	6958      	ldr	r0, [r3, #20]
 8001262:	0780      	lsls	r0, r0, #30
 8001264:	d5fc      	bpl.n	8001260 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001266:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800126a:	45b4      	cmp	ip, r6
 800126c:	f883 0020 	strb.w	r0, [r3, #32]
 8001270:	d1f6      	bne.n	8001260 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001272:	440a      	add	r2, r1

	/* FIXME: this can get stuck -- add a timeout or max iteration limit */

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001274:	6958      	ldr	r0, [r3, #20]
 8001276:	07c0      	lsls	r0, r0, #31
 8001278:	d5fc      	bpl.n	8001274 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800127a:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 800127e:	f801 0b01 	strb.w	r0, [r1], #1
 8001282:	4291      	cmp	r1, r2
 8001284:	d1f6      	bne.n	8001274 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 800128e:	61a5      	str	r5, [r4, #24]
}
 8001290:	bc70      	pop	{r4, r5, r6}
 8001292:	4770      	bx	lr
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012a2:	f004 ff38 	bl	8006116 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24011de0 	.word	0x24011de0

080012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012be:	f005 fd49 	bl	8006d54 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24011e00 	.word	0x24011e00

080012d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80012da:	f005 fd57 	bl	8006d8c <VibeCheckWaveGen_DMACpltCallback>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24011e00 	.word	0x24011e00

080012ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012fc:	f003 fc40 	bl	8004b80 <VibeCheckSensor_EXTICallback>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240133cc 	.word	0x240133cc

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001312:	f000 ff23 	bl	800215c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f006 f835 	bl	8007384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f84d 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800131e:	f000 f8bb 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fdbf 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fd8d 	bl	8001e44 <MX_DMA_Init>
  MX_DAC1_Init();
 800132a:	f000 f9cb 	bl	80016c4 <MX_DAC1_Init>
  MX_I2C2_Init();
 800132e:	f000 fa05 	bl	800173c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001332:	f000 fa43 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001336:	f000 fa97 	bl	8001868 <MX_SPI3_Init>
  MX_SPI4_Init();
 800133a:	f000 faeb 	bl	8001914 <MX_SPI4_Init>
  MX_TIM4_Init();
 800133e:	f000 fc6f 	bl	8001c20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001342:	f000 fbdf 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd31 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800134a:	f000 fb39 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134e:	f000 fb8b 	bl	8001a68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001352:	f000 f8d1 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001356:	f000 f94b 	bl	80015f0 <MX_ADC2_Init>
  MX_UART7_Init();
 800135a:	f000 fcd9 	bl	8001d10 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800135e:	f016 fddb 	bl	8017f18 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0x84>)
 8001364:	f010 fa34 	bl	80117d0 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x88>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <main+0x8c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <main+0x90>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <main+0x94>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0x98>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <main+0x9c>)
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <main+0xa0>)
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xa4>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa8>)
 8001384:	f001 fe42 	bl	800300c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa8>)
 800138a:	f002 f815 	bl	80033b8 <VibeCheck_Loop>
 800138e:	e7fb      	b.n	8001388 <main+0x7c>
 8001390:	24000734 	.word	0x24000734
 8001394:	24000660 	.word	0x24000660
 8001398:	240005d8 	.word	0x240005d8
 800139c:	24000550 	.word	0x24000550
 80013a0:	40000024 	.word	0x40000024
 80013a4:	240007cc 	.word	0x240007cc
 80013a8:	240003f8 	.word	0x240003f8
 80013ac:	240006e8 	.word	0x240006e8
 80013b0:	24000780 	.word	0x24000780
 80013b4:	240009b8 	.word	0x240009b8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	224c      	movs	r2, #76	@ 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f018 fe67 	bl	801a09a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f018 fe61 	bl	801a09a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f00b fed7 	bl	800d18c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemClock_Config+0xdc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	@ 0x21
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	@ 0x28
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001434:	230c      	movs	r3, #12
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4618      	mov	r0, r3
 8001446:	f00b feeb 	bl	800d220 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 feb0 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f00c faaa 	bl	800d9d4 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fe95 	bl	80021b4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	@ 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	@ 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f018 fdf8 	bl	801a09a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fe04 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fe63 	bl	80021b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f018 fdc2 	bl	801a09a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <MX_ADC1_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001532:	2204      	movs	r2, #4
 8001534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001544:	2201      	movs	r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800157e:	f006 f9fd 	bl	800797c <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001588:	f000 fe14 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001598:	f007 fa3c 	bl	8008a14 <HAL_ADCEx_MultiModeConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 fe07 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_ADC1_Init+0xf0>)
 80015a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_ADC1_Init+0xf4>)
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 80015ca:	f006 fbdf 	bl	8007d8c <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015d4:	f000 fdee 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000318 	.word	0x24000318
 80015e4:	40022000 	.word	0x40022000
 80015e8:	10c00010 	.word	0x10c00010
 80015ec:	47ff0000 	.word	0x47ff0000

080015f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f018 fd4c 	bl	801a09a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <MX_ADC2_Init+0xc8>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001664:	2201      	movs	r2, #1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800166a:	f006 f987 	bl	800797c <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001674:	f000 fd9e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_ADC2_Init+0xcc>)
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC2_Init+0xd0>)
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001688:	2304      	movs	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800169c:	f006 fb76 	bl	8007d8c <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016a6:	f000 fd85 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000388 	.word	0x24000388
 80016b8:	40022100 	.word	0x40022100
 80016bc:	0c900008 	.word	0x0c900008
 80016c0:	47ff0000 	.word	0x47ff0000

080016c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2224      	movs	r2, #36	@ 0x24
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f018 fce2 	bl	801a09a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_DAC1_Init+0x74>)
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016de:	f007 fc03 	bl	8008ee8 <HAL_DAC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e8:	f000 fd64 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80016f0:	2306      	movs	r3, #6
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_DAC1_Init+0x70>)
 8001708:	f007 fcda 	bl	80090c0 <HAL_DAC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fd4f 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2210      	movs	r2, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_DAC1_Init+0x70>)
 800171e:	f007 fccf 	bl	80090c0 <HAL_DAC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 fd44 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240003f8 	.word	0x240003f8
 8001738:	40007400 	.word	0x40007400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f00a f936 	bl	800b9e8 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fd17 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f00a f9c9 	bl	800bb20 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f00a fa0b 	bl	800bbb6 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fd05 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240004fc 	.word	0x240004fc
 80017b4:	40005800 	.word	0x40005800
 80017b8:	307075b1 	.word	0x307075b1

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800184e:	f00f f833 	bl	80108b8 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fcac 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000550 	.word	0x24000550
 8001864:	40003800 	.word	0x40003800

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_SPI3_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_SPI3_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_SPI3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_SPI3_Init+0xa4>)
 800189c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018fa:	f00e ffdd 	bl	80108b8 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fc56 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240005d8 	.word	0x240005d8
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <MX_SPI4_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a6:	f00e ff87 	bl	80108b8 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fc00 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000660 	.word	0x24000660
 80019bc:	40013400 	.word	0x40013400

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f00f fe89 	bl	8011722 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fbcd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f010 fe3a 	bl	80126a0 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 fbbf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f011 fc7c 	bl	8013344 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fbaf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240006e8 	.word	0x240006e8
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f00f fe37 	bl	8011722 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fb7b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f010 fde8 	bl	80126a0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fb6d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ada:	2320      	movs	r3, #32
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f011 fc2c 	bl	8013344 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fb5f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000734 	.word	0x24000734

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM3_Init+0x118>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b5e:	f00f fde0 	bl	8011722 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b68:	f000 fb24 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b7a:	f010 fd91 	bl	80126a0 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b84:	f000 fb16 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b8a:	f00f ff25 	bl	80119d8 <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b94:	f000 fb0e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001ba8:	f011 fbcc 	bl	8013344 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb2:	f000 faff 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bce:	f010 fc53 	bl	8012478 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001be4:	f010 fc48 	bl	8012478 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bee:	f000 fae1 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bfa:	f010 fc3d 	bl	8012478 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001c0a:	f000 fee3 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000780 	.word	0x24000780
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	@ 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <MX_TIM4_Init+0xec>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c78:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c7a:	f00f fd52 	bl	8011722 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c84:	f000 fa96 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c96:	f010 fd03 	bl	80126a0 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ca0:	f000 fa88 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001ca6:	f00f fe97 	bl	80119d8 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cb0:	f000 fa80 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cc4:	f011 fb3e 	bl	8013344 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fa71 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd2:	2360      	movs	r3, #96	@ 0x60
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cea:	f010 fbc5 	bl	8012478 <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001cf4:	f000 fa5e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cfa:	f000 fe6b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240007cc 	.word	0x240007cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <MX_UART7_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d3c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d5c:	f011 fbac 	bl	80134b8 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa25 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d6e:	f012 fcb8 	bl	80146e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d80:	f012 fced 	bl	801475e <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fa13 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d90:	f012 fc6e 	bl	8014670 <HAL_UARTEx_DisableFifoMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000890 	.word	0x24000890
 8001da8:	40007800 	.word	0x40007800

08001dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART1_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df6:	f011 fb5f 	bl	80134b8 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f9d8 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e08:	f012 fc6b 	bl	80146e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f9cf 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e1a:	f012 fca0 	bl	801475e <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f9c6 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e2a:	f012 fc21 	bl	8014670 <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000924 	.word	0x24000924
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f006 ff8e 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e72:	200b      	movs	r0, #11
 8001e74:	f006 ffa5 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f006 ff86 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f006 ff9d 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f006 ff7e 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f006 ff95 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a99      	ldr	r2, [pc, #612]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a91      	ldr	r2, [pc, #580]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b87      	ldr	r3, [pc, #540]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b78      	ldr	r3, [pc, #480]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4875      	ldr	r0, [pc, #468]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001f74:	f009 fd04 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4873      	ldr	r0, [pc, #460]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8001f7e:	f009 fcff 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4872      	ldr	r0, [pc, #456]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f88:	f009 fcfa 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	486f      	ldr	r0, [pc, #444]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f92:	f009 fcf5 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	486d      	ldr	r0, [pc, #436]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001f9e:	f009 fcef 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	486c      	ldr	r0, [pc, #432]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8001fa8:	f009 fcea 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	4868      	ldr	r0, [pc, #416]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001fb4:	f009 fce4 	bl	800b980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	485e      	ldr	r0, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fce:	f009 fb17 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4857      	ldr	r0, [pc, #348]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fea:	f009 fb09 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4851      	ldr	r0, [pc, #324]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002006:	f009 fafb 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	484a      	ldr	r0, [pc, #296]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002022:	f009 faed 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002026:	230b      	movs	r3, #11
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 800203e:	f009 fadf 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8002042:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8002058:	f009 fad2 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8002076:	f009 fac3 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800207a:	f240 3306 	movw	r3, #774	@ 0x306
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8002092:	f009 fab5 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_GPIO_Init+0x2a8>)
 80020ac:	f009 faa8 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4824      	ldr	r0, [pc, #144]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 80020c8:	f009 fa9a 	bl	800b600 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481b      	ldr	r0, [pc, #108]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 80020e6:	f009 fa8b 	bl	800b600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2007      	movs	r0, #7
 80020f0:	f006 fe4d 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f006 fe64 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2008      	movs	r0, #8
 8002100:	f006 fe45 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002104:	2008      	movs	r0, #8
 8002106:	f006 fe5c 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2009      	movs	r0, #9
 8002110:	f006 fe3d 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002114:	2009      	movs	r0, #9
 8002116:	f006 fe54 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2017      	movs	r0, #23
 8002120:	f006 fe35 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002124:	2017      	movs	r0, #23
 8002126:	f006 fe4c 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f006 fe2d 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	@ 0x28
 8002136:	f006 fe44 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	@ 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	58021000 	.word	0x58021000
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58020c00 	.word	0x58020c00

0800215c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800216e:	f006 fe43 	bl	8008df8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800217e:	231f      	movs	r3, #31
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002182:	2387      	movs	r3, #135	@ 0x87
 8002184:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 fe61 	bl	8008e68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021a6:	2004      	movs	r0, #4
 80021a8:	f006 fe3e 	bl	8008e28 <HAL_MPU_Enable>

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	745a      	strb	r2, [r3, #17]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7c1b      	ldrb	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <Sequencer_Update+0x76>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02c      	beq.n	800229a <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d927      	bls.n	800229a <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10a      	bne.n	8002296 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7c5b      	ldrb	r3, [r3, #17]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e002      	b.n	8002296 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Sequencer_Update+0x78>
		}
	}

	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	741a      	strb	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	741a      	strb	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x34>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002310:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_MspInit+0x34>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_MspInit+0x34>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002328:	2005      	movs	r0, #5
 800232a:	f006 fd25 	bl	8008d78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002376:	4a34      	ldr	r2, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <HAL_ADC_MspInit+0x110>)
 80023c0:	f009 f91e 	bl	800b600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c4:	e037      	b.n	8002436 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_MspInit+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d132      	bne.n	8002436 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_ADC_MspInit+0x118>)
 8002432:	f009 f8e5 	bl	800b600 <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	24013904 	.word	0x24013904
 8002448:	58024400 	.word	0x58024400
 800244c:	58020800 	.word	0x58020800
 8002450:	40022100 	.word	0x40022100
 8002454:	58020000 	.word	0x58020000

08002458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_DAC_MspInit+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808a 	bne.w	8002590 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DAC_MspInit+0x144>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024b8:	2330      	movs	r3, #48	@ 0x30
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4835      	ldr	r0, [pc, #212]	@ (80025a0 <HAL_DAC_MspInit+0x148>)
 80024cc:	f009 f898 	bl	800b600 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d2:	4a35      	ldr	r2, [pc, #212]	@ (80025a8 <HAL_DAC_MspInit+0x150>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d8:	2243      	movs	r2, #67	@ 0x43
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002516:	f006 ff9f 	bl	8009458 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002520:	f7ff fe48 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DAC_MspInit+0x158>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800254a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002576:	f006 ff6f 	bl	8009458 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fe18 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007400 	.word	0x40007400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	2400040c 	.word	0x2400040c
 80025a8:	40020010 	.word	0x40020010
 80025ac:	24000484 	.word	0x24000484
 80025b0:	40020028 	.word	0x40020028

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b8      	sub	sp, #224	@ 0xe0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	22b8      	movs	r2, #184	@ 0xb8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f017 fd60 	bl	801a09a <memset>
  if(hi2c->Instance==I2C2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_I2C_MspInit+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d146      	bne.n	8002672 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025e4:	f04f 0208 	mov.w	r2, #8
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00b fd76 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002628:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002642:	2304      	movs	r3, #4
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_I2C_MspInit+0xd0>)
 8002650:	f008 ffd6 	bl	800b600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	@ 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005800 	.word	0x40005800
 8002680:	58024400 	.word	0x58024400
 8002684:	58020400 	.word	0x58020400

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0bc      	sub	sp, #240	@ 0xf0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	22b8      	movs	r2, #184	@ 0xb8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f017 fcf6 	bl	801a09a <memset>
  if(hspi->Instance==SPI2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_SPI_MspInit+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d146      	bne.n	8002746 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00b fd0d 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80026d8:	f7ff fd6c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026dc:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a67      	ldr	r2, [pc, #412]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002718:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800271c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002732:	2305      	movs	r3, #5
 8002734:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273c:	4619      	mov	r1, r3
 800273e:	4851      	ldr	r0, [pc, #324]	@ (8002884 <HAL_SPI_MspInit+0x1fc>)
 8002740:	f008 ff5e 	bl	800b600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002744:	e096      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_SPI_MspInit+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800275c:	2300      	movs	r3, #0
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fcc1 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002770:	f7ff fd20 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027d4:	4619      	mov	r1, r3
 80027d6:	482d      	ldr	r0, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0x204>)
 80027d8:	f008 ff12 	bl	800b600 <HAL_GPIO_Init>
}
 80027dc:	e04a      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_SPI_MspInit+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d145      	bne.n	8002874 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b fc74 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002862:	2305      	movs	r3, #5
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800286c:	4619      	mov	r1, r3
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <HAL_SPI_MspInit+0x20c>)
 8002870:	f008 fec6 	bl	800b600 <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	40003c00 	.word	0x40003c00
 800288c:	58020800 	.word	0x58020800
 8002890:	40013400 	.word	0x40013400
 8002894:	58021000 	.word	0x58021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_TIM_Base_MspInit+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c8:	e074      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a39      	ldr	r2, [pc, #228]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	e05f      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d117      	bne.n	800292e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800291c:	2201      	movs	r2, #1
 800291e:	2101      	movs	r1, #1
 8002920:	201d      	movs	r0, #29
 8002922:	f006 fa34 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f006 fa4b 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
}
 800292c:	e042      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_TIM_Base_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13d      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800295e:	221d      	movs	r2, #29
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800299a:	f006 fd5d 	bl	8009458 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029a4:	f7ff fc06 	bl	80021b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	24000818 	.word	0x24000818
 80029d0:	40020040 	.word	0x40020040

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d120      	bne.n	8002a38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <HAL_TIM_MspPostInit+0xc0>)
 8002a32:	f008 fde5 	bl	800b600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a36:	e024      	b.n	8002a82 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_MspPostInit+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a72:	2302      	movs	r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <HAL_TIM_MspPostInit+0xc8>)
 8002a7e:	f008 fdbf 	bl	800b600 <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	58020c00 	.word	0x58020c00

08002aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	22b8      	movs	r2, #184	@ 0xb8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f017 faea 	bl	801a09a <memset>
  if(huart->Instance==UART7)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_UART_MspInit+0x160>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d147      	bne.n	8002b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ad0:	f04f 0202 	mov.w	r2, #2
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00b fb00 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002af2:	f7ff fb5f 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002afc:	4a41      	ldr	r2, [pc, #260]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x168>)
 8002b5a:	f008 fd51 	bl	800b600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	e04a      	b.n	8002bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d145      	bne.n	8002bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6a:	f04f 0201 	mov.w	r2, #1
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b fab3 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b8c:	f7ff fb12 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <HAL_UART_MspInit+0x170>)
 8002bf2:	f008 fd05 	bl	800b600 <HAL_GPIO_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	@ 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40007800 	.word	0x40007800
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	58020400 	.word	0x58020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f004 fbfd 	bl	8007468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f008 fe9b 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f008 fe94 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c92:	2008      	movs	r0, #8
 8002c94:	f008 fe8d 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Stream0_IRQHandler+0x10>)
 8002ca2:	f007 f99b 	bl	8009fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400040c 	.word	0x2400040c

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f007 f991 	bl	8009fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000484 	.word	0x24000484

08002cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8002cca:	f007 f987 	bl	8009fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000818 	.word	0x24000818

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f008 fe67 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002ce4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ce8:	f008 fe63 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f00f fab7 	bl	8012268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000780 	.word	0x24000780

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d0c:	f008 fe51 	bl	800b9b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <OTG_HS_IRQHandler+0x10>)
 8002d1a:	f009 f8d9 	bl	800bed0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2401c5f4 	.word	0x2401c5f4

08002d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d42:	f017 fa1b 	bl	801a17c <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2216      	movs	r2, #22
 8002d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_exit>:

void _exit (int status)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ffe7 	bl	8002d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <_exit+0x12>

08002d6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d80:	f3af 8000 	nop.w
 8002d84:	4601      	mov	r1, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60ba      	str	r2, [r7, #8]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dbf0      	blt.n	8002d80 <_read+0x12>
  }

  return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60ba      	str	r2, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf1      	blt.n	8002dba <_write+0x12>
  }
  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f017 f980 	bl	801a17c <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24050000 	.word	0x24050000
 8002ea8:	00003200 	.word	0x00003200
 8002eac:	24013908 	.word	0x24013908
 8002eb0:	2401ce48 	.word	0x2401ce48

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <SystemInit+0xd0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <SystemInit+0xd0>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <SystemInit+0xd4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d807      	bhi.n	8002ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <SystemInit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <SystemInit+0xd4>)
 8002ede:	f043 0307 	orr.w	r3, r3, #7
 8002ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <SystemInit+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <SystemInit+0xd8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <SystemInit+0xd8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <SystemInit+0xd8>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <SystemInit+0xd8>)
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <SystemInit+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <SystemInit+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SystemInit+0xd4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <SystemInit+0xd4>)
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <SystemInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SystemInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <SystemInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <SystemInit+0xd8>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <SystemInit+0xe0>)
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <SystemInit+0xd8>)
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <SystemInit+0xe4>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <SystemInit+0xd8>)
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <SystemInit+0xe8>)
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <SystemInit+0xd8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <SystemInit+0xd8>)
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <SystemInit+0xe8>)
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <SystemInit+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <SystemInit+0xd8>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <SystemInit+0xe8>)
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <SystemInit+0xd8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <SystemInit+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <SystemInit+0xd8>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <SystemInit+0xd8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemInit+0xec>)
 8002f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f94:	02020200 	.word	0x02020200
 8002f98:	01ff0000 	.word	0x01ff0000
 8002f9c:	01010280 	.word	0x01010280
 8002fa0:	52004000 	.word	0x52004000

08002fa4 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e019      	b.n	8002ff6 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bfb8      	it	lt
 8002fd4:	425b      	neglt	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3e1      	bcc.n	8002fc2 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b0e5      	sub	sp, #404	@ 0x194
 8003010:	af10      	add	r7, sp, #64	@ 0x40
 8003012:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8003016:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8003020:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8003024:	6001      	str	r1, [r0, #0]
 8003026:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800302a:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800302e:	600a      	str	r2, [r1, #0]
 8003030:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003034:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003038:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 800303a:	200a      	movs	r0, #10
 800303c:	f004 fa34 	bl	80074a8 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8003040:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003044:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fa56 	bl	80054fc <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8003050:	4ac6      	ldr	r2, [pc, #792]	@ (800336c <VibeCheck_Init+0x360>)
 8003052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	6018      	str	r0, [r3, #0]
 800305a:	8891      	ldrh	r1, [r2, #4]
 800305c:	7992      	ldrb	r2, [r2, #6]
 800305e:	8099      	strh	r1, [r3, #4]
 8003060:	719a      	strb	r2, [r3, #6]
 8003062:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8003066:	2239      	movs	r2, #57	@ 0x39
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f017 f815 	bl	801a09a <memset>
 8003070:	4bbf      	ldr	r3, [pc, #764]	@ (8003370 <VibeCheck_Init+0x364>)
 8003072:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8003076:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800307a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4bbc      	ldr	r3, [pc, #752]	@ (8003374 <VibeCheck_Init+0x368>)
 8003082:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003084:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8003088:	4abb      	ldr	r2, [pc, #748]	@ (8003378 <VibeCheck_Init+0x36c>)
 800308a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	c303      	stmia	r3!, {r0, r1}
 8003094:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003098:	2238      	movs	r2, #56	@ 0x38
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f016 fffc 	bl	801a09a <memset>
 80030a2:	4bb6      	ldr	r3, [pc, #728]	@ (800337c <VibeCheck_Init+0x370>)
 80030a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 80030a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4bb3      	ldr	r3, [pc, #716]	@ (8003380 <VibeCheck_Init+0x374>)
 80030b4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 80030b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 80030ba:	4bb2      	ldr	r3, [pc, #712]	@ (8003384 <VibeCheck_Init+0x378>)
 80030bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80030c2:	223c      	movs	r2, #60	@ 0x3c
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f016 ffe7 	bl	801a09a <memset>
 80030cc:	4bae      	ldr	r3, [pc, #696]	@ (8003388 <VibeCheck_Init+0x37c>)
 80030ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 80030d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4bab      	ldr	r3, [pc, #684]	@ (800338c <VibeCheck_Init+0x380>)
 80030de:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 80030e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 80030e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030e8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80030ec:	4aa8      	ldr	r2, [pc, #672]	@ (8003390 <VibeCheck_Init+0x384>)
 80030ee:	460b      	mov	r3, r1
 80030f0:	6810      	ldr	r0, [r2, #0]
 80030f2:	6018      	str	r0, [r3, #0]
 80030f4:	8890      	ldrh	r0, [r2, #4]
 80030f6:	7992      	ldrb	r2, [r2, #6]
 80030f8:	8098      	strh	r0, [r3, #4]
 80030fa:	719a      	strb	r2, [r3, #6]
 80030fc:	1dcb      	adds	r3, r1, #7
 80030fe:	2239      	movs	r2, #57	@ 0x39
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f016 ffc9 	bl	801a09a <memset>
 8003108:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800310c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003110:	4aa0      	ldr	r2, [pc, #640]	@ (8003394 <VibeCheck_Init+0x388>)
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003114:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003118:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b9e      	ldr	r3, [pc, #632]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003120:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 8003122:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003126:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800312a:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 800312c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003134:	681e      	ldr	r6, [r3, #0]
 8003136:	466d      	mov	r5, sp
 8003138:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800314c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003156:	4630      	mov	r0, r6
 8003158:	f002 fb36 	bl	80057c8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 800315c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003160:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003164:	681e      	ldr	r6, [r3, #0]
 8003166:	466d      	mov	r5, sp
 8003168:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 800316c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800316e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003178:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800317c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003180:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003186:	4630      	mov	r0, r6
 8003188:	f002 fb1e 	bl	80057c8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 800318c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003190:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	466d      	mov	r5, sp
 8003198:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800319c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	4630      	mov	r0, r6
 80031b8:	f002 fb06 	bl	80057c8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 80031bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031cc:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 80031d0:	466d      	mov	r5, sp
 80031d2:	f106 040c 	add.w	r4, r6, #12
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f002 faea 	bl	80057c8 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80031f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031fc:	4a67      	ldr	r2, [pc, #412]	@ (800339c <VibeCheck_Init+0x390>)
 80031fe:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003200:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003204:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <VibeCheck_Init+0x374>)
 800320c:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 800320e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003212:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003216:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003218:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800321c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003220:	4a5f      	ldr	r2, [pc, #380]	@ (80033a0 <VibeCheck_Init+0x394>)
 8003222:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 8003224:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003228:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b5a      	ldr	r3, [pc, #360]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003230:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003232:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003236:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800323a:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 800323c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003240:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003244:	4a57      	ldr	r2, [pc, #348]	@ (80033a4 <VibeCheck_Init+0x398>)
 8003246:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 8003248:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800324c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003254:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 8003256:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800325a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800325e:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8003260:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003264:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800326e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003272:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003276:	f002 fadb 	bl	8005830 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 800327a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003288:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800328c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003290:	f002 face 	bl	8005830 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003294:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003298:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80032a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032aa:	f002 fac1 	bl	8005830 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80032ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <VibeCheck_Init+0x368>)
 80032ba:	4413      	add	r3, r2
 80032bc:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032c0:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80032c4:	6811      	ldr	r1, [r2, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fd78 	bl	8005dbc <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 80032cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003380 <VibeCheck_Init+0x374>)
 80032d8:	4413      	add	r3, r2
 80032da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032de:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80032e2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80032e6:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	6809      	ldr	r1, [r1, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fab4 	bl	800685c <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 80032f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <VibeCheck_Init+0x380>)
 8003300:	4413      	add	r3, r2
 8003302:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8003306:	4618      	mov	r0, r3
 8003308:	f000 faf4 	bl	80038f4 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 800330c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003310:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	481d      	ldr	r0, [pc, #116]	@ (800338c <VibeCheck_Init+0x380>)
 8003318:	4418      	add	r0, r3
 800331a:	2310      	movs	r3, #16
 800331c:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <VibeCheck_Init+0x39c>)
 800331e:	4923      	ldr	r1, [pc, #140]	@ (80033ac <VibeCheck_Init+0x3a0>)
 8003320:	f000 fb9b 	bl	8003a5a <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 8003324:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003328:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4817      	ldr	r0, [pc, #92]	@ (800338c <VibeCheck_Init+0x380>)
 8003330:	4418      	add	r0, r3
 8003332:	2304      	movs	r3, #4
 8003334:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <VibeCheck_Init+0x3a4>)
 8003336:	491f      	ldr	r1, [pc, #124]	@ (80033b4 <VibeCheck_Init+0x3a8>)
 8003338:	f000 fbc6 	bl	8003ac8 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 800333c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003340:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4814      	ldr	r0, [pc, #80]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003348:	4418      	add	r0, r3
 800334a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003354:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8003358:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800335c:	f000 fdca 	bl	8003ef4 <VibeCheckSensor_Init>
}
 8003360:	bf00      	nop
 8003362:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8003366:	46bd      	mov	sp, r7
 8003368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336a:	bf00      	nop
 800336c:	0801d7f8 	.word	0x0801d7f8
 8003370:	0800635d 	.word	0x0800635d
 8003374:	00011428 	.word	0x00011428
 8003378:	0801d800 	.word	0x0801d800
 800337c:	0800715d 	.word	0x0800715d
 8003380:	00011448 	.word	0x00011448
 8003384:	00626772 	.word	0x00626772
 8003388:	08003d2d 	.word	0x08003d2d
 800338c:	00012494 	.word	0x00012494
 8003390:	0801d808 	.word	0x0801d808
 8003394:	08005151 	.word	0x08005151
 8003398:	00012a14 	.word	0x00012a14
 800339c:	080072b9 	.word	0x080072b9
 80033a0:	080053a1 	.word	0x080053a1
 80033a4:	08005471 	.word	0x08005471
 80033a8:	0801dae0 	.word	0x0801dae0
 80033ac:	0801daa0 	.word	0x0801daa0
 80033b0:	0801da34 	.word	0x0801da34
 80033b4:	0801da24 	.word	0x0801da24

080033b8 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b08d      	sub	sp, #52	@ 0x34
 80033bc:	af02      	add	r7, sp, #8
 80033be:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80033c0:	f004 f866 	bl	8007490 <HAL_GetTick>
 80033c4:	6238      	str	r0, [r7, #32]


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4ba7      	ldr	r3, [pc, #668]	@ (8003668 <VibeCheck_Loop+0x2b0>)
 80033ca:	4413      	add	r3, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fae5 	bl	800699c <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4ba5      	ldr	r3, [pc, #660]	@ (800366c <VibeCheck_Loop+0x2b4>)
 80033d6:	4413      	add	r3, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fac1 	bl	8003960 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4ba3      	ldr	r3, [pc, #652]	@ (8003670 <VibeCheck_Loop+0x2b8>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe97 	bl	8004118 <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 f8cd 	bl	800558c <VibeCheckShell_Update>
 80033f2:	4603      	mov	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]

	/* blink indicator LEDs based on shell status */
	if (shell_status.ihandl_status == VC_SHELL_INPUT_PROCESSED)
 80033f6:	7e3b      	ldrb	r3, [r7, #24]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10e      	bne.n	800341a <VibeCheck_Loop+0x62>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_success_times, led_shell_success_colors, led_shell_success_len);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	489b      	ldr	r0, [pc, #620]	@ (800366c <VibeCheck_Loop+0x2b4>)
 8003400:	4418      	add	r0, r3
 8003402:	2304      	movs	r3, #4
 8003404:	4a9b      	ldr	r2, [pc, #620]	@ (8003674 <VibeCheck_Loop+0x2bc>)
 8003406:	499c      	ldr	r1, [pc, #624]	@ (8003678 <VibeCheck_Loop+0x2c0>)
 8003408:	f000 fb5e 	bl	8003ac8 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4b97      	ldr	r3, [pc, #604]	@ (800366c <VibeCheck_Loop+0x2b4>)
 8003410:	4413      	add	r3, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb6f 	bl	8003af6 <VibeCheckRGB_StartTopSequence>
 8003418:	e013      	b.n	8003442 <VibeCheck_Loop+0x8a>
	}
	else if (shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_NO_HANDLER || shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_EXECUTING)
 800341a:	7e3b      	ldrb	r3, [r7, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d002      	beq.n	8003426 <VibeCheck_Loop+0x6e>
 8003420:	7e3b      	ldrb	r3, [r7, #24]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d10d      	bne.n	8003442 <VibeCheck_Loop+0x8a>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_failure_times, led_shell_failure_colors, led_shell_failure_len);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4890      	ldr	r0, [pc, #576]	@ (800366c <VibeCheck_Loop+0x2b4>)
 800342a:	4418      	add	r0, r3
 800342c:	2304      	movs	r3, #4
 800342e:	4a93      	ldr	r2, [pc, #588]	@ (800367c <VibeCheck_Loop+0x2c4>)
 8003430:	4993      	ldr	r1, [pc, #588]	@ (8003680 <VibeCheck_Loop+0x2c8>)
 8003432:	f000 fb49 	bl	8003ac8 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4b8c      	ldr	r3, [pc, #560]	@ (800366c <VibeCheck_Loop+0x2b4>)
 800343a:	4413      	add	r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fb5a 	bl	8003af6 <VibeCheckRGB_StartTopSequence>


	/* send over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f107 0210 	add.w	r2, r7, #16
 8003448:	f107 0114 	add.w	r1, r7, #20
 800344c:	4618      	mov	r0, r3
 800344e:	f002 fa6f 	bl	8005930 <VibeCheckShell_GetOutput>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d028      	beq.n	80034aa <VibeCheck_Loop+0xf2>
		 * with a single call to CDC_Transmit_HS but the memory is not contiguous. We fixed this by having the shell
		 * output buffer wrap before getting the next packet so that each packet is continuous in memory
		 */

		/* XXX */
		char start = usb_tx[0];  /* should be 'd', 'a', or 'e' */
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	77fb      	strb	r3, [r7, #31]
		char end = usb_tx[usb_tx_len - 1];  /* should be '\n' */
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3b01      	subs	r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	77bb      	strb	r3, [r7, #30]

		if ((end != '\n') || (start != 'a' && start != 'd' && start != 'e'))
 800346a:	7fbb      	ldrb	r3, [r7, #30]
 800346c:	2b0a      	cmp	r3, #10
 800346e:	d108      	bne.n	8003482 <VibeCheck_Loop+0xca>
 8003470:	7ffb      	ldrb	r3, [r7, #31]
 8003472:	2b61      	cmp	r3, #97	@ 0x61
 8003474:	d009      	beq.n	800348a <VibeCheck_Loop+0xd2>
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	2b64      	cmp	r3, #100	@ 0x64
 800347a:	d006      	beq.n	800348a <VibeCheck_Loop+0xd2>
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	2b65      	cmp	r3, #101	@ 0x65
 8003480:	d003      	beq.n	800348a <VibeCheck_Loop+0xd2>
			HAL_Delay(1000);
 8003482:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003486:	f004 f80f 	bl	80074a8 <HAL_Delay>
			/* XXX */

		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	b292      	uxth	r2, r2
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f014 fe08 	bl	80180a8 <CDC_Transmit_HS>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <VibeCheck_Loop+0xf2>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fa98 	bl	80059da <VibeCheckShell_UpdateOutputBuffer>
	}


	/* visualize the acceleration with the RGB LEDs */
	/* TODO: turn off the LEDs when done measuring */
	if (time - time_prev_led_update > 30)
 80034aa:	4b76      	ldr	r3, [pc, #472]	@ (8003684 <VibeCheck_Loop+0x2cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b1e      	cmp	r3, #30
 80034b4:	f240 81b2 	bls.w	800381c <VibeCheck_Loop+0x464>
	{
		time_prev_led_update = time;
 80034b8:	4a72      	ldr	r2, [pc, #456]	@ (8003684 <VibeCheck_Loop+0x2cc>)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	6013      	str	r3, [r2, #0]

		if (!vc->rgb.top_sequence.is_running)  /* let the top sequence have precedence over the visualization */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 80034c4:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	@ 0xa0c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f040 81a7 	bne.w	800381c <VibeCheck_Loop+0x464>
		{
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	e19f      	b.n	8003814 <VibeCheck_Loop+0x45c>
			{
				if (vc->sensor.status[i].is_connected)
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	18ca      	adds	r2, r1, r3
 80034e2:	4b69      	ldr	r3, [pc, #420]	@ (8003688 <VibeCheck_Loop+0x2d0>)
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8190 	beq.w	800380e <VibeCheck_Loop+0x456>
				{
					if (vc->sensor.status[i].accel_measuring)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	18ca      	adds	r2, r1, r3
 80034fc:	4b63      	ldr	r3, [pc, #396]	@ (800368c <VibeCheck_Loop+0x2d4>)
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80cc 	beq.w	80036a0 <VibeCheck_Loop+0x2e8>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4858      	ldr	r0, [pc, #352]	@ (800366c <VibeCheck_Loop+0x2b4>)
 800350c:	4418      	add	r0, r3
 800350e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	189c      	adds	r4, r3, r2
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	18ca      	adds	r2, r1, r3
 8003524:	4b5a      	ldr	r3, [pc, #360]	@ (8003690 <VibeCheck_Loop+0x2d8>)
 8003526:	4413      	add	r3, r2
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	eef0 7ae7 	vabs.f32	s15, s15
 8003530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003534:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8003660 <VibeCheck_Loop+0x2a8>
 8003538:	ee27 5b06 	vmul.f64	d5, d7, d6
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	18ca      	adds	r2, r1, r3
 800354a:	4b52      	ldr	r3, [pc, #328]	@ (8003694 <VibeCheck_Loop+0x2dc>)
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003558:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800355c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003560:	edc7 7a00 	vstr	s15, [r7]
 8003564:	783b      	ldrb	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	4621      	mov	r1, r4
 8003570:	f000 fae1 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	483d      	ldr	r0, [pc, #244]	@ (800366c <VibeCheck_Loop+0x2b4>)
 8003578:	4418      	add	r0, r3
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	1c5c      	adds	r4, r3, #1
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	18ca      	adds	r2, r1, r3
 8003592:	4b41      	ldr	r3, [pc, #260]	@ (8003698 <VibeCheck_Loop+0x2e0>)
 8003594:	4413      	add	r3, r2
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	eef0 7ae7 	vabs.f32	s15, s15
 800359e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035a2:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8003660 <VibeCheck_Loop+0x2a8>
 80035a6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	18ca      	adds	r2, r1, r3
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <VibeCheck_Loop+0x2dc>)
 80035ba:	4413      	add	r3, r2
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035ce:	edc7 7a00 	vstr	s15, [r7]
 80035d2:	783b      	ldrb	r3, [r7, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	9200      	str	r2, [sp, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	4621      	mov	r1, r4
 80035de:	f000 faaa 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4821      	ldr	r0, [pc, #132]	@ (800366c <VibeCheck_Loop+0x2b4>)
 80035e6:	4418      	add	r0, r3
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	1c9c      	adds	r4, r3, #2
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	18ca      	adds	r2, r1, r3
 8003600:	4b26      	ldr	r3, [pc, #152]	@ (800369c <VibeCheck_Loop+0x2e4>)
 8003602:	4413      	add	r3, r2
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	eef0 7ae7 	vabs.f32	s15, s15
 800360c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003610:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8003660 <VibeCheck_Loop+0x2a8>
 8003614:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	18ca      	adds	r2, r1, r3
 8003626:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <VibeCheck_Loop+0x2dc>)
 8003628:	4413      	add	r3, r2
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003634:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003638:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800363c:	edc7 7a00 	vstr	s15, [r7]
 8003640:	783b      	ldrb	r3, [r7, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	2200      	movs	r2, #0
 800364a:	4621      	mov	r1, r4
 800364c:	f000 fa73 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <VibeCheck_Loop+0x2b4>)
 8003654:	4413      	add	r3, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fadf 	bl	8003c1a <VibeCheckRGB_SendColors>
 800365c:	e0d7      	b.n	800380e <VibeCheck_Loop+0x456>
 800365e:	bf00      	nop
 8003660:	00000000 	.word	0x00000000
 8003664:	406fe000 	.word	0x406fe000
 8003668:	00011448 	.word	0x00011448
 800366c:	00012494 	.word	0x00012494
 8003670:	00012a14 	.word	0x00012a14
 8003674:	0801dca0 	.word	0x0801dca0
 8003678:	0801dc90 	.word	0x0801dc90
 800367c:	0801dd1c 	.word	0x0801dd1c
 8003680:	0801dd0c 	.word	0x0801dd0c
 8003684:	2401390c 	.word	0x2401390c
 8003688:	00012b10 	.word	0x00012b10
 800368c:	00012b14 	.word	0x00012b14
 8003690:	00012a88 	.word	0x00012a88
 8003694:	00012a24 	.word	0x00012a24
 8003698:	00012a8c 	.word	0x00012a8c
 800369c:	00012a90 	.word	0x00012a90
					}
					else if (vc->sensor.status[i].gyro_measuring)
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	18ca      	adds	r2, r1, r3
 80036ae:	4b84      	ldr	r3, [pc, #528]	@ (80038c0 <VibeCheck_Loop+0x508>)
 80036b0:	4413      	add	r3, r2
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80aa 	beq.w	800380e <VibeCheck_Loop+0x456>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4881      	ldr	r0, [pc, #516]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 80036be:	4418      	add	r0, r3
 80036c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	189c      	adds	r4, r3, r2
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	18ca      	adds	r2, r1, r3
 80036d6:	4b7c      	ldr	r3, [pc, #496]	@ (80038c8 <VibeCheck_Loop+0x510>)
 80036d8:	4413      	add	r3, r2
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eef0 7ae7 	vabs.f32	s15, s15
 80036e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036e6:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 80038b8 <VibeCheck_Loop+0x500>
 80036ea:	ee27 5b06 	vmul.f64	d5, d7, d6
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	18ca      	adds	r2, r1, r3
 80036fc:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <VibeCheck_Loop+0x514>)
 80036fe:	4413      	add	r3, r2
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800370a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800370e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003712:	edc7 7a00 	vstr	s15, [r7]
 8003716:	783b      	ldrb	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	4621      	mov	r1, r4
 8003722:	f000 fa08 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4866      	ldr	r0, [pc, #408]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 800372a:	4418      	add	r0, r3
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	1c5c      	adds	r4, r3, #1
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	18ca      	adds	r2, r1, r3
 8003744:	4b62      	ldr	r3, [pc, #392]	@ (80038d0 <VibeCheck_Loop+0x518>)
 8003746:	4413      	add	r3, r2
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	eef0 7ae7 	vabs.f32	s15, s15
 8003750:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003754:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80038b8 <VibeCheck_Loop+0x500>
 8003758:	ee27 5b06 	vmul.f64	d5, d7, d6
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18ca      	adds	r2, r1, r3
 800376a:	4b58      	ldr	r3, [pc, #352]	@ (80038cc <VibeCheck_Loop+0x514>)
 800376c:	4413      	add	r3, r2
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003778:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800377c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003780:	edc7 7a00 	vstr	s15, [r7]
 8003784:	783b      	ldrb	r3, [r7, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2200      	movs	r2, #0
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	4621      	mov	r1, r4
 8003790:	f000 f9d1 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	484b      	ldr	r0, [pc, #300]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003798:	4418      	add	r0, r3
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	1c9c      	adds	r4, r3, #2
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	18ca      	adds	r2, r1, r3
 80037b2:	4b48      	ldr	r3, [pc, #288]	@ (80038d4 <VibeCheck_Loop+0x51c>)
 80037b4:	4413      	add	r3, r2
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	eef0 7ae7 	vabs.f32	s15, s15
 80037be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c2:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 80038b8 <VibeCheck_Loop+0x500>
 80037c6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	18ca      	adds	r2, r1, r3
 80037d8:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <VibeCheck_Loop+0x514>)
 80037da:	4413      	add	r3, r2
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80037e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80037ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037ee:	edc7 7a00 	vstr	s15, [r7]
 80037f2:	783b      	ldrb	r3, [r7, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	2200      	movs	r2, #0
 80037fc:	4621      	mov	r1, r4
 80037fe:	f000 f99a 	bl	8003b36 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4b2f      	ldr	r3, [pc, #188]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003806:	4413      	add	r3, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa06 	bl	8003c1a <VibeCheckRGB_SendColors>
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	3301      	adds	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	2b02      	cmp	r3, #2
 8003818:	f67f ae5c 	bls.w	80034d4 <VibeCheck_Loop+0x11c>
	/* use RGB LEDs to indicate when sensors are connected or disconnected */

	/* TODO: make these only affect the LEDs corresponding the recently connected sensor (transparency?) */
	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4b2e      	ldr	r3, [pc, #184]	@ (80038d8 <VibeCheck_Loop+0x520>)
 8003820:	4413      	add	r3, r2
 8003822:	f107 0208 	add.w	r2, r7, #8
 8003826:	f107 010c 	add.w	r1, r7, #12
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f86d 	bl	800490a <VibeCheckSensor_ConnectionChanged>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d039      	beq.n	80038aa <VibeCheck_Loop+0x4f2>
	{
		if (is_connected)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <VibeCheck_Loop+0x4b4>
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4821      	ldr	r0, [pc, #132]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003840:	4418      	add	r0, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <VibeCheck_Loop+0x524>)
 8003846:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a24      	ldr	r2, [pc, #144]	@ (80038e0 <VibeCheck_Loop+0x528>)
 800384e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4c23      	ldr	r4, [pc, #140]	@ (80038e4 <VibeCheck_Loop+0x52c>)
 8003856:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800385a:	f000 f935 	bl	8003ac8 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4b18      	ldr	r3, [pc, #96]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003862:	4413      	add	r3, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f946 	bl	8003af6 <VibeCheckRGB_StartTopSequence>
 800386a:	e016      	b.n	800389a <VibeCheck_Loop+0x4e2>
		}
		else
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4815      	ldr	r0, [pc, #84]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003870:	4418      	add	r0, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <VibeCheck_Loop+0x530>)
 8003876:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <VibeCheck_Loop+0x534>)
 800387e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4c1a      	ldr	r4, [pc, #104]	@ (80038f0 <VibeCheck_Loop+0x538>)
 8003886:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800388a:	f000 f91d 	bl	8003ac8 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <VibeCheck_Loop+0x50c>)
 8003892:	4413      	add	r3, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f92e 	bl	8003af6 <VibeCheckRGB_StartTopSequence>
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <VibeCheck_Loop+0x520>)
 800389e:	4413      	add	r3, r2
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f862 	bl	800496e <VibeCheckSensor_ResetConnectionFlag>
	}
}
 80038aa:	bf00      	nop
 80038ac:	372c      	adds	r7, #44	@ 0x2c
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd90      	pop	{r4, r7, pc}
 80038b2:	bf00      	nop
 80038b4:	f3af 8000 	nop.w
 80038b8:	00000000 	.word	0x00000000
 80038bc:	406fe000 	.word	0x406fe000
 80038c0:	00012b18 	.word	0x00012b18
 80038c4:	00012494 	.word	0x00012494
 80038c8:	00012a94 	.word	0x00012a94
 80038cc:	00012a2c 	.word	0x00012a2c
 80038d0:	00012a98 	.word	0x00012a98
 80038d4:	00012a9c 	.word	0x00012a9c
 80038d8:	00012a14 	.word	0x00012a14
 80038dc:	24000008 	.word	0x24000008
 80038e0:	24000014 	.word	0x24000014
 80038e4:	0801e070 	.word	0x0801e070
 80038e8:	24000020 	.word	0x24000020
 80038ec:	2400002c 	.word	0x2400002c
 80038f0:	0801e07c 	.word	0x0801e07c

080038f4 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fc5b 	bl	80021c0 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fc55 	bl	80021c0 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2263      	movs	r2, #99	@ 0x63
 8003924:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e008      	b.n	8003944 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	3210      	adds	r2, #16
 8003938:	2100      	movs	r1, #0
 800393a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 800394a:	d3f2      	bcc.n	8003932 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f94a 	bl	8003be6 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f961 	bl	8003c1a <VibeCheckRGB_SendColors>
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003968:	f003 fd92 	bl	8007490 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003974:	f107 0210 	add.w	r2, r7, #16
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fc52 	bl	8002224 <Sequencer_Update>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e01e      	b.n	80039ca <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	441a      	add	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	441a      	add	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	18ca      	adds	r2, r1, r3
 80039a6:	f107 030c 	add.w	r3, r7, #12
 80039aa:	8811      	ldrh	r1, [r2, #0]
 80039ac:	7892      	ldrb	r2, [r2, #2]
 80039ae:	8019      	strh	r1, [r3, #0]
 80039b0:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80039b2:	7b3a      	ldrb	r2, [r7, #12]
 80039b4:	7b79      	ldrb	r1, [r7, #13]
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	460b      	mov	r3, r1
 80039bc:	69f9      	ldr	r1, [r7, #28]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8b9 	bl	8003b36 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d9dd      	bls.n	800398c <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f922 	bl	8003c1a <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 80039d6:	e03c      	b.n	8003a52 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fc83 	bl	80022ea <Sequencer_IsRunning>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d133      	bne.n	8003a52 <VibeCheckRGB_Update+0xf2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80039f0:	f107 0210 	add.w	r2, r7, #16
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fc14 	bl	8002224 <Sequencer_Update>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d027      	beq.n	8003a52 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e01e      	b.n	8003a46 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	441a      	add	r2, r3
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	441a      	add	r2, r3
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	18ca      	adds	r2, r1, r3
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	8811      	ldrh	r1, [r2, #0]
 8003a28:	7892      	ldrb	r2, [r2, #2]
 8003a2a:	8019      	strh	r1, [r3, #0]
 8003a2c:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003a2e:	7a3a      	ldrb	r2, [r7, #8]
 8003a30:	7a79      	ldrb	r1, [r7, #9]
 8003a32:	7abb      	ldrb	r3, [r7, #10]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	460b      	mov	r3, r1
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f87b 	bl	8003b36 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d9dd      	bls.n	8003a08 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8e4 	bl	8003c1a <VibeCheckRGB_SendColors>
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003a76:	2301      	movs	r3, #1
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	f7fe fbbc 	bl	80021f8 <Sequencer_SetSequence>
}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003a96:	f003 fcfb 	bl	8007490 <HAL_GetTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7fe fc02 	bl	80022a8 <Sequencer_Start>
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}

08003aac <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fc08 	bl	80022d0 <Sequencer_Stop>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	f7fe fb85 	bl	80021f8 <Sequencer_SetSequence>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003af6:	b590      	push	{r4, r7, lr}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 8003b04:	f003 fcc4 	bl	8007490 <HAL_GetTick>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7fe fbcb 	bl	80022a8 <Sequencer_Start>
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd90      	pop	{r4, r7, pc}

08003b1a <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fbd1 	bl	80022d0 <Sequencer_Stop>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	4611      	mov	r1, r2
 8003b42:	461a      	mov	r2, r3
 8003b44:	460b      	mov	r3, r1
 8003b46:	71fb      	strb	r3, [r7, #7]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d901      	bls.n	8003b56 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003b52:	2308      	movs	r3, #8
 8003b54:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	440b      	add	r3, r1
 8003b62:	3304      	adds	r3, #4
 8003b64:	79fa      	ldrb	r2, [r7, #7]
 8003b66:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	440b      	add	r3, r1
 8003b74:	3305      	adds	r3, #5
 8003b76:	79ba      	ldrb	r2, [r7, #6]
 8003b78:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	440b      	add	r3, r1
 8003b86:	3306      	adds	r3, #6
 8003b88:	7e3a      	ldrb	r2, [r7, #24]
 8003b8a:	701a      	strb	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d901      	bls.n	8003bac <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003ba8:	2308      	movs	r3, #8
 8003baa:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	18ca      	adds	r2, r1, r3
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	3204      	adds	r2, #4
 8003bbe:	8811      	ldrh	r1, [r2, #0]
 8003bc0:	7892      	ldrb	r2, [r2, #2]
 8003bc2:	8019      	strh	r1, [r3, #0]
 8003bc4:	709a      	strb	r2, [r3, #2]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	7b3a      	ldrb	r2, [r7, #12]
 8003bca:	f362 0307 	bfi	r3, r2, #0, #8
 8003bce:	7b7a      	ldrb	r2, [r7, #13]
 8003bd0:	f362 230f 	bfi	r3, r2, #8, #8
 8003bd4:	7bba      	ldrb	r2, [r7, #14]
 8003bd6:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e00a      	b.n	8003c0a <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff99 	bl	8003b36 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d9f1      	bls.n	8003bf4 <VibeCheckRGB_SetAllOff+0xe>
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8003c22:	23e0      	movs	r3, #224	@ 0xe0
 8003c24:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e06e      	b.n	8003d0a <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e01d      	b.n	8003c6e <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3305      	adds	r3, #5
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	fa42 f303 	asr.w	r3, r2, r3
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <VibeCheckRGB_SendColors+0x3e>
 8003c54:	2130      	movs	r1, #48	@ 0x30
 8003c56:	e000      	b.n	8003c5a <VibeCheckRGB_SendColors+0x40>
 8003c58:	2118      	movs	r1, #24
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	61fa      	str	r2, [r7, #28]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	3310      	adds	r3, #16
 8003c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1de      	bne.n	8003c32 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003c74:	2308      	movs	r3, #8
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e01d      	b.n	8003cb6 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	440b      	add	r3, r1
 8003c86:	3304      	adds	r3, #4
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	fa42 f303 	asr.w	r3, r2, r3
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <VibeCheckRGB_SendColors+0x86>
 8003c9c:	2130      	movs	r1, #48	@ 0x30
 8003c9e:	e000      	b.n	8003ca2 <VibeCheckRGB_SendColors+0x88>
 8003ca0:	2118      	movs	r1, #24
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	3310      	adds	r3, #16
 8003cac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1de      	bne.n	8003c7a <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e01d      	b.n	8003cfe <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3306      	adds	r3, #6
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	fa42 f303 	asr.w	r3, r2, r3
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <VibeCheckRGB_SendColors+0xce>
 8003ce4:	2130      	movs	r1, #48	@ 0x30
 8003ce6:	e000      	b.n	8003cea <VibeCheckRGB_SendColors+0xd0>
 8003ce8:	2118      	movs	r1, #24
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	61fa      	str	r2, [r7, #28]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	3310      	adds	r3, #16
 8003cf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1de      	bne.n	8003cc2 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d98d      	bls.n	8003c2c <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 0220 	add.w	r2, r3, #32
 8003d1a:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f00e f86e 	bl	8011e00 <HAL_TIM_PWM_Start_DMA>
}
 8003d24:	bf00      	nop
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b09c      	sub	sp, #112	@ 0x70
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d3e:	2240      	movs	r2, #64	@ 0x40
 8003d40:	4619      	mov	r1, r3
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f001 fe8c 	bl	8005a60 <VibeCheckShell_GetNextString>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80c2 	beq.w	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d54:	4962      	ldr	r1, [pc, #392]	@ (8003ee0 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fc fada 	bl	8000310 <strcmp>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d141      	bne.n	8003de6 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003d62:	f107 0320 	add.w	r3, r7, #32
 8003d66:	4619      	mov	r1, r3
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f001 fef1 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80af 	beq.w	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6838      	ldr	r0, [r7, #0]
 8003d7e:	f001 fee7 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a5 	beq.w	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003d8a:	f107 0318 	add.w	r3, r7, #24
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6838      	ldr	r0, [r7, #0]
 8003d92:	f001 fedd 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 809b 	beq.w	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	4619      	mov	r1, r3
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	f001 fed3 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8091 	beq.w	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	4618      	mov	r0, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	b2d9      	uxtb	r1, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003dca:	f7ff feb4 	bl	8003b36 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 8003dce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003dd0:	f7ff ff23 	bl	8003c1a <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003dd4:	4943      	ldr	r1, [pc, #268]	@ (8003ee4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	f001 ff62 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003ddc:	6838      	ldr	r0, [r7, #0]
 8003dde:	f001 ffdf 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e077      	b.n	8003ed6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dea:	493f      	ldr	r1, [pc, #252]	@ (8003ee8 <VibeCheckRGBCMD_Execute+0x1bc>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fa8f 	bl	8000310 <strcmp>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d137      	bne.n	8003e68 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6838      	ldr	r0, [r7, #0]
 8003e00:	f001 fea6 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d064      	beq.n	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e10:	f7ff fec2 	bl	8003b98 <VibeCheckRGB_GetColor>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	733a      	strb	r2, [r7, #12]
 8003e1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003e1e:	737a      	strb	r2, [r7, #13]
 8003e20:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003e24:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8003e26:	492f      	ldr	r1, [pc, #188]	@ (8003ee4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e28:	6838      	ldr	r0, [r7, #0]
 8003e2a:	f001 ff39 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f001 ffa8 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8003e34:	7b3b      	ldrb	r3, [r7, #12]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6838      	ldr	r0, [r7, #0]
 8003e3a:	f001 ff6d 	bl	8005d18 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	f001 ffa0 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8003e44:	7b7b      	ldrb	r3, [r7, #13]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f001 ff65 	bl	8005d18 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f001 ff98 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	4619      	mov	r1, r3
 8003e58:	6838      	ldr	r0, [r7, #0]
 8003e5a:	f001 ff5d 	bl	8005d18 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f001 ff9e 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e036      	b.n	8003ed6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e6c:	491f      	ldr	r1, [pc, #124]	@ (8003eec <VibeCheckRGBCMD_Execute+0x1c0>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fa4e 	bl	8000310 <strcmp>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10e      	bne.n	8003e98 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8003e7a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e7c:	f7ff fe04 	bl	8003a88 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003e80:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e82:	f7ff fe38 	bl	8003af6 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e86:	4917      	ldr	r1, [pc, #92]	@ (8003ee4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e88:	6838      	ldr	r0, [r7, #0]
 8003e8a:	f001 ff09 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f001 ff86 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e01e      	b.n	8003ed6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e9c:	4914      	ldr	r1, [pc, #80]	@ (8003ef0 <VibeCheckRGBCMD_Execute+0x1c4>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fa36 	bl	8000310 <strcmp>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d114      	bne.n	8003ed4 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8003eaa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003eac:	f7ff fdfe 	bl	8003aac <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003eb0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003eb2:	f7ff fe32 	bl	8003b1a <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003eb6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003eb8:	f7ff fe95 	bl	8003be6 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8003ebc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003ebe:	f7ff feac 	bl	8003c1a <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003ec2:	4908      	ldr	r1, [pc, #32]	@ (8003ee4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003ec4:	6838      	ldr	r0, [r7, #0]
 8003ec6:	f001 feeb 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	f001 ff68 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3768      	adds	r7, #104	@ 0x68
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	0801d810 	.word	0x0801d810
 8003ee4:	0801d814 	.word	0x0801d814
 8003ee8:	0801d818 	.word	0x0801d818
 8003eec:	0801d81c 	.word	0x0801d81c
 8003ef0:	0801d824 	.word	0x0801d824

08003ef4 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	b0a1      	sub	sp, #132	@ 0x84
 8003ef8:	af06      	add	r7, sp, #24
 8003efa:	6178      	str	r0, [r7, #20]
 8003efc:	6139      	str	r1, [r7, #16]
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
	sensor->data_ready = 0;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c3 2524 	str.w	r2, [r3, #1316]	@ 0x524
	sensor->time_prev_update = 0;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
	sensor->generate_fake_data = 0;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 252c 	str.w	r2, [r3, #1324]	@ 0x52c

	sensor->time_micros = time_micros;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	f8c3 2530 	str.w	r2, [r3, #1328]	@ 0x530

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f2e:	e04a      	b.n	8003fc6 <VibeCheckSensor_Init+0xd2>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3304      	adds	r3, #4
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3308      	adds	r3, #8
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003f70:	6979      	ldr	r1, [r7, #20]
 8003f72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	330c      	adds	r3, #12
 8003f80:	220d      	movs	r2, #13
 8003f82:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3310      	adds	r3, #16
 8003f94:	2202      	movs	r2, #2
 8003f96:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	220d      	movs	r2, #13
 8003faa:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3318      	adds	r3, #24
 8003fbc:	227d      	movs	r2, #125	@ 0x7d
 8003fbe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d9b1      	bls.n	8003f30 <VibeCheckSensor_Init+0x3c>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003fda:	4a49      	ldr	r2, [pc, #292]	@ (8004100 <VibeCheckSensor_Init+0x20c>)
 8003fdc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003fe6:	4a47      	ldr	r2, [pc, #284]	@ (8004104 <VibeCheckSensor_Init+0x210>)
 8003fe8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff0:	6018      	str	r0, [r3, #0]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003ff6:	4a44      	ldr	r2, [pc, #272]	@ (8004108 <VibeCheckSensor_Init+0x214>)
 8003ff8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8004002:	4a42      	ldr	r2, [pc, #264]	@ (800410c <VibeCheckSensor_Init+0x218>)
 8004004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400c:	6018      	str	r0, [r3, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8004012:	4a3f      	ldr	r2, [pc, #252]	@ (8004110 <VibeCheckSensor_Init+0x21c>)
 8004014:	f107 0320 	add.w	r3, r7, #32
 8004018:	ca07      	ldmia	r2, {r0, r1, r2}
 800401a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 800401e:	4a3d      	ldr	r2, [pc, #244]	@ (8004114 <VibeCheckSensor_Init+0x220>)
 8004020:	f107 0318 	add.w	r3, r7, #24
 8004024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004028:	6018      	str	r0, [r3, #0]
 800402a:	3304      	adds	r3, #4
 800402c:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	663b      	str	r3, [r7, #96]	@ 0x60
 8004032:	e05c      	b.n	80040ee <VibeCheckSensor_Init+0x1fa>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8004034:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	3350      	adds	r3, #80	@ 0x50
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4413      	add	r3, r2
 8004044:	1d1d      	adds	r5, r3, #4
 8004046:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	18d6      	adds	r6, r2, r3
 8004054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	3360      	adds	r3, #96	@ 0x60
 800405a:	f107 0208 	add.w	r2, r7, #8
 800405e:	4413      	add	r3, r2
 8004060:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	18cb      	adds	r3, r1, r3
 8004074:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	18c3      	adds	r3, r0, r3
 8004088:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 800408c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	18c3      	adds	r3, r0, r3
 800409a:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800409e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	18c3      	adds	r3, r0, r3
 80040ac:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 80040b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	18e3      	adds	r3, r4, r3
 80040be:	f853 4c48 	ldr.w	r4, [r3, #-72]
 80040c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	3360      	adds	r3, #96	@ 0x60
 80040c8:	f107 0c08 	add.w	ip, r7, #8
 80040cc:	4463      	add	r3, ip
 80040ce:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	9403      	str	r4, [sp, #12]
 80040d6:	9002      	str	r0, [sp, #8]
 80040d8:	9101      	str	r1, [sp, #4]
 80040da:	9200      	str	r2, [sp, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4631      	mov	r1, r6
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7fc fce8 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80040e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ea:	3301      	adds	r3, #1
 80040ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d99f      	bls.n	8004034 <VibeCheckSensor_Init+0x140>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	376c      	adds	r7, #108	@ 0x6c
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fe:	bf00      	nop
 8004100:	0801d82c 	.word	0x0801d82c
 8004104:	0801d838 	.word	0x0801d838
 8004108:	0801d840 	.word	0x0801d840
 800410c:	0801d84c 	.word	0x0801d84c
 8004110:	0801d854 	.word	0x0801d854
 8004114:	0801d860 	.word	0x0801d860

08004118 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004120:	f003 f9b6 	bl	8007490 <HAL_GetTick>
 8004124:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3528 	ldr.w	r3, [r3, #1320]	@ 0x528
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004134:	f240 8113 	bls.w	800435e <VibeCheckSensor_Update+0x246>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e0ac      	b.n	8004298 <VibeCheckSensor_Update+0x180>
		{
			if (!sensor->status[i].is_connected)
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	33fc      	adds	r3, #252	@ 0xfc
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d134      	bne.n	80041be <VibeCheckSensor_Update+0xa6>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	3350      	adds	r3, #80	@ 0x50
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	3304      	adds	r3, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fcd0 	bl	8000b0c <LSM6DS3_TestCommunication>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 808f 	beq.w	8004292 <VibeCheckSensor_Update+0x17a>
				{
					sensor->status[i].is_connected = 1;
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	33fc      	adds	r3, #252	@ 0xfc
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fbf4 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
 80041bc:	e069      	b.n	8004292 <VibeCheckSensor_Update+0x17a>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d130      	bne.n	8004238 <VibeCheckSensor_Update+0x120>
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d124      	bne.n	8004238 <VibeCheckSensor_Update+0x120>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3350      	adds	r3, #80	@ 0x50
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc fc83 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d142      	bne.n	8004292 <VibeCheckSensor_Update+0x17a>
					{
						sensor->status[i].is_connected = 0;
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	33fc      	adds	r3, #252	@ 0xfc
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004236:	e02c      	b.n	8004292 <VibeCheckSensor_Update+0x17a>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <VibeCheckSensor_Update+0x150>
					{
						sensor->status[i].received_data_flag = 0;
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e014      	b.n	8004292 <VibeCheckSensor_Update+0x17a>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	33fc      	adds	r3, #252	@ 0xfc
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b02      	cmp	r3, #2
 800429c:	f67f af4f 	bls.w	800413e <VibeCheckSensor_Update+0x26>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	@ 0x52c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d055      	beq.n	8004356 <VibeCheckSensor_Update+0x23e>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004368 <VibeCheckSensor_Update+0x250>
 80042b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042bc:	eeb0 0a67 	vmov.f32	s0, s15
 80042c0:	f018 fc4e 	bl	801cb60 <sinf>
 80042c4:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004368 <VibeCheckSensor_Update+0x250>
 80042d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042da:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800436c <VibeCheckSensor_Update+0x254>
 80042de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042e2:	eeb0 0a67 	vmov.f32	s0, s15
 80042e6:	f018 fc3b 	bl	801cb60 <sinf>
 80042ea:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004368 <VibeCheckSensor_Update+0x250>
 80042fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004300:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004370 <VibeCheckSensor_Update+0x258>
 8004304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	f018 fc28 	bl	801cb60 <sinf>
 8004310:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8004314:	ed97 1a03 	vldr	s2, [r7, #12]
 8004318:	edd7 0a04 	vldr	s1, [r7, #16]
 800431c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	2101      	movs	r1, #1
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb92 	bl	8004a4e <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 800432a:	ed97 1a04 	vldr	s2, [r7, #16]
 800432e:	edd7 0a05 	vldr	s1, [r7, #20]
 8004332:	ed97 0a03 	vldr	s0, [r7, #12]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	2102      	movs	r1, #2
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fb87 	bl	8004a4e <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8004340:	ed97 1a05 	vldr	s2, [r7, #20]
 8004344:	edd7 0a03 	vldr	s1, [r7, #12]
 8004348:	ed97 0a04 	vldr	s0, [r7, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	2103      	movs	r1, #3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fb7c 	bl	8004a4e <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
	}
}
 800435e:	bf00      	nop
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40c90fd0 	.word	0x40c90fd0
 800436c:	3f860a8b 	.word	0x3f860a8b
 8004370:	40060a8b 	.word	0x40060a8b

08004374 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <VibeCheckSensor_StartAccel+0x14>
 8004384:	2302      	movs	r3, #2
 8004386:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	33fc      	adds	r3, #252	@ 0xfc
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <VibeCheckSensor_StartAccel+0x5a>
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3350      	adds	r3, #80	@ 0x50
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fc5d 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <VibeCheckSensor_StopAccel+0x14>
 80043fc:	2302      	movs	r3, #2
 80043fe:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	33fc      	adds	r3, #252	@ 0xfc
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <VibeCheckSensor_StopAccel+0x5a>
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3350      	adds	r3, #80	@ 0x50
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc fd5b 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <VibeCheckSensor_StartGyro+0x14>
 8004474:	2302      	movs	r3, #2
 8004476:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	33fc      	adds	r3, #252	@ 0xfc
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <VibeCheckSensor_StartGyro+0x5a>
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3350      	adds	r3, #80	@ 0x50
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fc87 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <VibeCheckSensor_StopGyro+0x14>
 80044ec:	2302      	movs	r3, #2
 80044ee:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	33fc      	adds	r3, #252	@ 0xfc
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <VibeCheckSensor_StopGyro+0x5a>
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3350      	adds	r3, #80	@ 0x50
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc fcf1 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <VibeCheckSensor_SetAccelODR+0x16>
 8004566:	2302      	movs	r3, #2
 8004568:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	210a      	movs	r1, #10
 800456e:	480a      	ldr	r0, [pc, #40]	@ (8004598 <VibeCheckSensor_SetAccelODR+0x44>)
 8004570:	f7fe fd18 	bl	8002fa4 <FindClosest>
 8004574:	68f9      	ldr	r1, [r7, #12]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	330c      	adds	r3, #12
 8004584:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa0b 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	0801e088 	.word	0x0801e088

0800459c <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <VibeCheckSensor_SetGyroODR+0x16>
 80045ae:	2302      	movs	r3, #2
 80045b0:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	210a      	movs	r1, #10
 80045b6:	480a      	ldr	r0, [pc, #40]	@ (80045e0 <VibeCheckSensor_SetGyroODR+0x44>)
 80045b8:	f7fe fcf4 	bl	8002fa4 <FindClosest>
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3314      	adds	r3, #20
 80045cc:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f9e7 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	0801e088 	.word	0x0801e088

080045e4 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <VibeCheckSensor_SetAccelRange+0x16>
 80045f6:	2302      	movs	r3, #2
 80045f8:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	2104      	movs	r1, #4
 80045fe:	480a      	ldr	r0, [pc, #40]	@ (8004628 <VibeCheckSensor_SetAccelRange+0x44>)
 8004600:	f7fe fcd0 	bl	8002fa4 <FindClosest>
 8004604:	68f9      	ldr	r1, [r7, #12]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	3310      	adds	r3, #16
 8004614:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f9c3 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	0801e0b0 	.word	0x0801e0b0

0800462c <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <VibeCheckSensor_SetGyroRange+0x16>
 800463e:	2302      	movs	r3, #2
 8004640:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	2105      	movs	r1, #5
 8004646:	480a      	ldr	r0, [pc, #40]	@ (8004670 <VibeCheckSensor_SetGyroRange+0x44>)
 8004648:	f7fe fcac 	bl	8002fa4 <FindClosest>
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	3318      	adds	r3, #24
 800465c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f99f 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	0801e0c0 	.word	0x0801e0c0

08004674 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6178      	str	r0, [r7, #20]
 800467c:	6139      	str	r1, [r7, #16]
 800467e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004682:	edc7 0a02 	vstr	s1, [r7, #8]
 8004686:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <VibeCheckSensor_SetOffsets+0x20>
 8004690:	2302      	movs	r3, #2
 8004692:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004694:	edd7 7a03 	vldr	s15, [r7, #12]
 8004698:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004764 <VibeCheckSensor_SetOffsets+0xf0>
 800469c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	dd01      	ble.n	80046aa <VibeCheckSensor_SetOffsets+0x36>
 80046a6:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <VibeCheckSensor_SetOffsets+0xf4>)
 80046a8:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 80046aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ae:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800476c <VibeCheckSensor_SetOffsets+0xf8>
 80046b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d501      	bpl.n	80046c0 <VibeCheckSensor_SetOffsets+0x4c>
 80046bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004770 <VibeCheckSensor_SetOffsets+0xfc>)
 80046be:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 80046c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80046c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004764 <VibeCheckSensor_SetOffsets+0xf0>
 80046c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	dd01      	ble.n	80046d6 <VibeCheckSensor_SetOffsets+0x62>
 80046d2:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <VibeCheckSensor_SetOffsets+0xf4>)
 80046d4:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 80046d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80046da:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800476c <VibeCheckSensor_SetOffsets+0xf8>
 80046de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e6:	d501      	bpl.n	80046ec <VibeCheckSensor_SetOffsets+0x78>
 80046e8:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <VibeCheckSensor_SetOffsets+0xfc>)
 80046ea:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 80046ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80046f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004764 <VibeCheckSensor_SetOffsets+0xf0>
 80046f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	dd01      	ble.n	8004702 <VibeCheckSensor_SetOffsets+0x8e>
 80046fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <VibeCheckSensor_SetOffsets+0xf4>)
 8004700:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004702:	edd7 7a01 	vldr	s15, [r7, #4]
 8004706:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800476c <VibeCheckSensor_SetOffsets+0xf8>
 800470a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d501      	bpl.n	8004718 <VibeCheckSensor_SetOffsets+0xa4>
 8004714:	4b16      	ldr	r3, [pc, #88]	@ (8004770 <VibeCheckSensor_SetOffsets+0xfc>)
 8004716:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3304      	adds	r3, #4
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3308      	adds	r3, #8
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004752:	6939      	ldr	r1, [r7, #16]
 8004754:	6978      	ldr	r0, [r7, #20]
 8004756:	f000 f925 	bl	80049a4 <VibeCheckSensor_UpdateSensor>
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	3dfe0000 	.word	0x3dfe0000
 8004768:	3dfe0000 	.word	0x3dfe0000
 800476c:	bdfe0000 	.word	0xbdfe0000
 8004770:	bdfe0000 	.word	0xbdfe0000

08004774 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <VibeCheckSensor_GetAccelODR+0x14>
 8004784:	2302      	movs	r3, #2
 8004786:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	330c      	adds	r3, #12
 8004798:	681b      	ldr	r3, [r3, #0]
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <VibeCheckSensor_GetGyroODR+0x14>
 80047b6:	2302      	movs	r3, #2
 80047b8:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	3314      	adds	r3, #20
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <VibeCheckSensor_GetAccelRange+0x14>
 80047e8:	2302      	movs	r3, #2
 80047ea:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	3310      	adds	r3, #16
 80047fc:	681b      	ldr	r3, [r3, #0]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <VibeCheckSensor_GetGyroRange+0x14>
 800481a:	2302      	movs	r3, #2
 800481c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	3318      	adds	r3, #24
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <VibeCheckSensor_GetOffsets+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3304      	adds	r3, #4
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3308      	adds	r3, #8
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8c3 252c 	str.w	r2, [r3, #1324]	@ 0x52c
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 252c 	str.w	r2, [r3, #1324]	@ 0x52c
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <VibeCheckSensor_IsConnected+0x14>
 80048e8:	2302      	movs	r3, #2
 80048ea:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	33fc      	adds	r3, #252	@ 0xfc
 80048fc:	681b      	ldr	r3, [r3, #0]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e01e      	b.n	800495a <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	33fc      	adds	r3, #252	@ 0xfc
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
			return 1;
 8004950:	2301      	movs	r3, #1
 8004952:	e006      	b.n	8004962 <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3301      	adds	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d9dd      	bls.n	800491c <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <VibeCheckSensor_ResetConnectionFlag+0x14>
 800497e:	2302      	movs	r3, #2
 8004980:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <VibeCheckSensor_UpdateSensor+0x14>
 80049b4:	2302      	movs	r3, #2
 80049b6:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	33fc      	adds	r3, #252	@ 0xfc
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d03b      	beq.n	8004a46 <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	3350      	adds	r3, #80	@ 0x50
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	3304      	adds	r3, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc f8ad 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	3350      	adds	r3, #80	@ 0x50
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fc f939 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	3350      	adds	r3, #80	@ 0x50
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc f9c3 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6178      	str	r0, [r7, #20]
 8004a56:	460b      	mov	r3, r1
 8004a58:	60fa      	str	r2, [r7, #12]
 8004a5a:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a5e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a62:	ed87 1a00 	vstr	s2, [r7]
 8004a66:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	@ 0x520
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004a7e:	7cfa      	ldrb	r2, [r7, #19]
 8004a80:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8d3 2520 	ldr.w	r2, [r3, #1312]	@ 0x520
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	@ 0x520
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	@ 0x520
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	@ 0x520
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8004afe:	2b19      	cmp	r3, #25
 8004b00:	d104      	bne.n	8004b0c <VibeCheckSensor_AddData+0xbe>
	{
		sensor->data_ready = 1;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f8c3 2524 	str.w	r2, [r3, #1316]	@ 0x524
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 8004b0a:	e00c      	b.n	8004b26 <VibeCheckSensor_AddData+0xd8>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8004b12:	2b32      	cmp	r3, #50	@ 0x32
 8004b14:	d107      	bne.n	8004b26 <VibeCheckSensor_AddData+0xd8>
		sensor->data_ind = 0;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
		sensor->data_ready = 1;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f8c3 2524 	str.w	r2, [r3, #1316]	@ 0x524
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3524 	ldr.w	r3, [r3, #1316]	@ 0x524
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d015      	beq.n	8004b72 <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 2524 	str.w	r2, [r3, #1316]	@ 0x524
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8004b54:	2b18      	cmp	r3, #24
 8004b56:	d805      	bhi.n	8004b64 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e004      	b.n	8004b6e <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	@ 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b90:	e0a6      	b.n	8004ce0 <VibeCheckSensor_EXTICallback+0x160>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b96:	4613      	mov	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	440b      	add	r3, r1
 8004ba0:	3364      	adds	r3, #100	@ 0x64
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	887a      	ldrh	r2, [r7, #2]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d144      	bne.n	8004c34 <VibeCheckSensor_EXTICallback+0xb4>
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d038      	beq.n	8004c34 <VibeCheckSensor_EXTICallback+0xb4>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	3350      	adds	r3, #80	@ 0x50
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	1d18      	adds	r0, r3, #4
 8004bd4:	f107 0318 	add.w	r3, r7, #24
 8004bd8:	f107 021c 	add.w	r2, r7, #28
 8004bdc:	f107 0120 	add.w	r1, r7, #32
 8004be0:	f7fc f9a8 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	b2d9      	uxtb	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3530 	ldr.w	r3, [r3, #1328]	@ 0x530
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3534 	ldr.w	r3, [r3, #1332]	@ 0x534
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c00:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c04:	edd7 6a06 	vldr	s13, [r7, #24]
 8004c08:	eeb0 1a66 	vmov.f32	s2, s13
 8004c0c:	eef0 0a47 	vmov.f32	s1, s14
 8004c10:	eeb0 0a67 	vmov.f32	s0, s15
 8004c14:	461a      	mov	r2, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ff19 	bl	8004a4e <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
			break;
 8004c32:	e05a      	b.n	8004cea <VibeCheckSensor_EXTICallback+0x16a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	336c      	adds	r3, #108	@ 0x6c
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d146      	bne.n	8004cda <VibeCheckSensor_EXTICallback+0x15a>
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d03a      	beq.n	8004cda <VibeCheckSensor_EXTICallback+0x15a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	3350      	adds	r3, #80	@ 0x50
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	1d18      	adds	r0, r3, #4
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	f107 0210 	add.w	r2, r7, #16
 8004c7e:	f107 0114 	add.w	r1, r7, #20
 8004c82:	f7fc f9e5 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	b2d9      	uxtb	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3530 	ldr.w	r3, [r3, #1328]	@ 0x530
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3534 	ldr.w	r3, [r3, #1332]	@ 0x534
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ca6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004caa:	edd7 6a03 	vldr	s13, [r7, #12]
 8004cae:	eeb0 1a66 	vmov.f32	s2, s13
 8004cb2:	eef0 0a47 	vmov.f32	s1, s14
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fec6 	bl	8004a4e <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
			break;
 8004cd8:	e007      	b.n	8004cea <VibeCheckSensor_EXTICallback+0x16a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	3301      	adds	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	f67f af55 	bls.w	8004b92 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3728      	adds	r7, #40	@ 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b09c      	sub	sp, #112	@ 0x70
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d04:	2240      	movs	r2, #64	@ 0x40
 8004d06:	4619      	mov	r1, r3
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f000 fea9 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80eb 	beq.w	8004eec <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8004d16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d1a:	4977      	ldr	r1, [pc, #476]	@ (8004ef8 <VibeCheckSensorCMD_Set+0x204>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fb faf7 	bl	8000310 <strcmp>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d14f      	bne.n	8004dc8 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d2c:	2240      	movs	r2, #64	@ 0x40
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f000 fe95 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80d7 	beq.w	8004eec <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004d3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d42:	496e      	ldr	r1, [pc, #440]	@ (8004efc <VibeCheckSensorCMD_Set+0x208>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fae3 	bl	8000310 <strcmp>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	68b8      	ldr	r0, [r7, #8]
 8004d58:	f000 fefa 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80c4 	beq.w	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	461a      	mov	r2, r3
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fbf2 	bl	8004554 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004d70:	4963      	ldr	r1, [pc, #396]	@ (8004f00 <VibeCheckSensorCMD_Set+0x20c>)
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f000 ff94 	bl	8005ca0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f001 f811 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0b5      	b.n	8004eee <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004d82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d86:	495f      	ldr	r1, [pc, #380]	@ (8004f04 <VibeCheckSensorCMD_Set+0x210>)
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fb fac1 	bl	8000310 <strcmp>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 80ab 	bne.w	8004eec <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68b8      	ldr	r0, [r7, #8]
 8004d9e:	f000 fed7 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a1 	beq.w	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	461a      	mov	r2, r3
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fc17 	bl	80045e4 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004db6:	4952      	ldr	r1, [pc, #328]	@ (8004f00 <VibeCheckSensorCMD_Set+0x20c>)
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f000 ff71 	bl	8005ca0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f000 ffee 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e092      	b.n	8004eee <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004dc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dcc:	494e      	ldr	r1, [pc, #312]	@ (8004f08 <VibeCheckSensorCMD_Set+0x214>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fa9e 	bl	8000310 <strcmp>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d14b      	bne.n	8004e72 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004dda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dde:	2240      	movs	r2, #64	@ 0x40
 8004de0:	4619      	mov	r1, r3
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f000 fe3c 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d07e      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004dee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004df2:	4942      	ldr	r1, [pc, #264]	@ (8004efc <VibeCheckSensorCMD_Set+0x208>)
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fa8b 	bl	8000310 <strcmp>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d117      	bne.n	8004e30 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e04:	4619      	mov	r1, r3
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f000 fea2 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d06c      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	461a      	mov	r2, r3
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fbbf 	bl	800459c <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e1e:	4938      	ldr	r1, [pc, #224]	@ (8004f00 <VibeCheckSensorCMD_Set+0x20c>)
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f000 ff3d 	bl	8005ca0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f000 ffba 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e05e      	b.n	8004eee <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004e30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e34:	4933      	ldr	r1, [pc, #204]	@ (8004f04 <VibeCheckSensorCMD_Set+0x210>)
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb fa6a 	bl	8000310 <strcmp>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d154      	bne.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004e42:	f107 0320 	add.w	r3, r7, #32
 8004e46:	4619      	mov	r1, r3
 8004e48:	68b8      	ldr	r0, [r7, #8]
 8004e4a:	f000 fe81 	bl	8005b50 <VibeCheckShell_GetNextInt>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d04b      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fbe6 	bl	800462c <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e60:	4927      	ldr	r1, [pc, #156]	@ (8004f00 <VibeCheckSensorCMD_Set+0x20c>)
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f000 ff1c 	bl	8005ca0 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	f000 ff99 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e03d      	b.n	8004eee <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004e72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e76:	4925      	ldr	r1, [pc, #148]	@ (8004f0c <VibeCheckSensorCMD_Set+0x218>)
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb fa49 	bl	8000310 <strcmp>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d133      	bne.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	4619      	mov	r1, r3
 8004e8a:	68b8      	ldr	r0, [r7, #8]
 8004e8c:	f000 fe7c 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d02a      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004e96:	f107 0318 	add.w	r3, r7, #24
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	68b8      	ldr	r0, [r7, #8]
 8004e9e:	f000 fe73 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d021      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	4619      	mov	r1, r3
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f000 fe6a 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d018      	beq.n	8004eec <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 8004eba:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ebe:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ec2:	edd7 6a05 	vldr	s13, [r7, #20]
 8004ec6:	eeb0 1a66 	vmov.f32	s2, s13
 8004eca:	eef0 0a47 	vmov.f32	s1, s14
 8004ece:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fbcd 	bl	8004674 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004eda:	4909      	ldr	r1, [pc, #36]	@ (8004f00 <VibeCheckSensorCMD_Set+0x20c>)
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f000 fedf 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004ee2:	68b8      	ldr	r0, [r7, #8]
 8004ee4:	f000 ff5c 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3770      	adds	r7, #112	@ 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0801d868 	.word	0x0801d868
 8004efc:	0801d870 	.word	0x0801d870
 8004f00:	0801d874 	.word	0x0801d874
 8004f04:	0801d878 	.word	0x0801d878
 8004f08:	0801d880 	.word	0x0801d880
 8004f0c:	0801d888 	.word	0x0801d888

08004f10 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09a      	sub	sp, #104	@ 0x68
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f1c:	f107 0320 	add.w	r3, r7, #32
 8004f20:	2240      	movs	r2, #64	@ 0x40
 8004f22:	4619      	mov	r1, r3
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f000 fd9b 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80fb 	beq.w	8005128 <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 8004f32:	f107 0320 	add.w	r3, r7, #32
 8004f36:	497f      	ldr	r1, [pc, #508]	@ (8005134 <VibeCheckSensorCMD_Get+0x224>)
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fb f9e9 	bl	8000310 <strcmp>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d147      	bne.n	8004fd4 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f44:	f107 0320 	add.w	r3, r7, #32
 8004f48:	2240      	movs	r2, #64	@ 0x40
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f000 fd87 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80e7 	beq.w	8005128 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004f5a:	f107 0320 	add.w	r3, r7, #32
 8004f5e:	4976      	ldr	r1, [pc, #472]	@ (8005138 <VibeCheckSensorCMD_Get+0x228>)
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb f9d5 	bl	8000310 <strcmp>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d114      	bne.n	8004f96 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004f6c:	4973      	ldr	r1, [pc, #460]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f000 fe96 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004f74:	68b8      	ldr	r0, [r7, #8]
 8004f76:	f000 ff05 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff fbf9 	bl	8004774 <VibeCheckSensor_GetAccelODR>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4619      	mov	r1, r3
 8004f86:	68b8      	ldr	r0, [r7, #8]
 8004f88:	f000 fec6 	bl	8005d18 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004f8c:	68b8      	ldr	r0, [r7, #8]
 8004f8e:	f000 ff07 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0c9      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8004f96:	f107 0320 	add.w	r3, r7, #32
 8004f9a:	4969      	ldr	r1, [pc, #420]	@ (8005140 <VibeCheckSensorCMD_Get+0x230>)
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb f9b7 	bl	8000310 <strcmp>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 80bf 	bne.w	8005128 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004faa:	4964      	ldr	r1, [pc, #400]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 fe77 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f000 fee6 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fc0c 	bl	80047d8 <VibeCheckSensor_GetAccelRange>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f000 fea7 	bl	8005d18 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004fca:	68b8      	ldr	r0, [r7, #8]
 8004fcc:	f000 fee8 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0aa      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004fd4:	f107 0320 	add.w	r3, r7, #32
 8004fd8:	495a      	ldr	r1, [pc, #360]	@ (8005144 <VibeCheckSensorCMD_Get+0x234>)
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb f998 	bl	8000310 <strcmp>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d146      	bne.n	8005074 <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004fe6:	f107 0320 	add.w	r3, r7, #32
 8004fea:	2240      	movs	r2, #64	@ 0x40
 8004fec:	4619      	mov	r1, r3
 8004fee:	68b8      	ldr	r0, [r7, #8]
 8004ff0:	f000 fd36 	bl	8005a60 <VibeCheckShell_GetNextString>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8096 	beq.w	8005128 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004ffc:	f107 0320 	add.w	r3, r7, #32
 8005000:	494d      	ldr	r1, [pc, #308]	@ (8005138 <VibeCheckSensorCMD_Get+0x228>)
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb f984 	bl	8000310 <strcmp>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d114      	bne.n	8005038 <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800500e:	494b      	ldr	r1, [pc, #300]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 8005010:	68b8      	ldr	r0, [r7, #8]
 8005012:	f000 fe45 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f000 feb4 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fbc1 	bl	80047a6 <VibeCheckSensor_GetGyroODR>
 8005024:	4603      	mov	r3, r0
 8005026:	4619      	mov	r1, r3
 8005028:	68b8      	ldr	r0, [r7, #8]
 800502a:	f000 fe75 	bl	8005d18 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f000 feb6 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005034:	2301      	movs	r3, #1
 8005036:	e078      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8005038:	f107 0320 	add.w	r3, r7, #32
 800503c:	4940      	ldr	r1, [pc, #256]	@ (8005140 <VibeCheckSensorCMD_Get+0x230>)
 800503e:	4618      	mov	r0, r3
 8005040:	f7fb f966 	bl	8000310 <strcmp>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d16e      	bne.n	8005128 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800504a:	493c      	ldr	r1, [pc, #240]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 800504c:	68b8      	ldr	r0, [r7, #8]
 800504e:	f000 fe27 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005052:	68b8      	ldr	r0, [r7, #8]
 8005054:	f000 fe96 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fbd5 	bl	800480a <VibeCheckSensor_GetGyroRange>
 8005060:	4603      	mov	r3, r0
 8005062:	4619      	mov	r1, r3
 8005064:	68b8      	ldr	r0, [r7, #8]
 8005066:	f000 fe57 	bl	8005d18 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800506a:	68b8      	ldr	r0, [r7, #8]
 800506c:	f000 fe98 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005070:	2301      	movs	r3, #1
 8005072:	e05a      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8005074:	f107 0320 	add.w	r3, r7, #32
 8005078:	4933      	ldr	r1, [pc, #204]	@ (8005148 <VibeCheckSensorCMD_Get+0x238>)
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f948 	bl	8000310 <strcmp>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d132      	bne.n	80050ec <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 8005086:	f107 0118 	add.w	r1, r7, #24
 800508a:	f107 021c 	add.w	r2, r7, #28
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	460b      	mov	r3, r1
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fbcf 	bl	800483c <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 800509e:	4927      	ldr	r1, [pc, #156]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 80050a0:	68b8      	ldr	r0, [r7, #8]
 80050a2:	f000 fdfd 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f000 fe6c 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 80050ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80050b0:	eeb0 0a67 	vmov.f32	s0, s15
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f000 fe47 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	f000 fe62 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 80050c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80050c4:	eeb0 0a67 	vmov.f32	s0, s15
 80050c8:	68b8      	ldr	r0, [r7, #8]
 80050ca:	f000 fe3d 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f000 fe58 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 80050d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80050d8:	eeb0 0a67 	vmov.f32	s0, s15
 80050dc:	68b8      	ldr	r0, [r7, #8]
 80050de:	f000 fe33 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f000 fe5c 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e01e      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 80050ec:	f107 0320 	add.w	r3, r7, #32
 80050f0:	4916      	ldr	r1, [pc, #88]	@ (800514c <VibeCheckSensorCMD_Get+0x23c>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb f90c 	bl	8000310 <strcmp>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d114      	bne.n	8005128 <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80050fe:	490f      	ldr	r1, [pc, #60]	@ (800513c <VibeCheckSensorCMD_Get+0x22c>)
 8005100:	68b8      	ldr	r0, [r7, #8]
 8005102:	f000 fdcd 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f000 fe3c 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fbe2 	bl	80048d8 <VibeCheckSensor_IsConnected>
 8005114:	4603      	mov	r3, r0
 8005116:	4619      	mov	r1, r3
 8005118:	68b8      	ldr	r0, [r7, #8]
 800511a:	f000 fdfd 	bl	8005d18 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 800511e:	68b8      	ldr	r0, [r7, #8]
 8005120:	f000 fe3e 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3760      	adds	r7, #96	@ 0x60
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	0801d868 	.word	0x0801d868
 8005138:	0801d870 	.word	0x0801d870
 800513c:	0801d874 	.word	0x0801d874
 8005140:	0801d878 	.word	0x0801d878
 8005144:	0801d880 	.word	0x0801d880
 8005148:	0801d888 	.word	0x0801d888
 800514c:	0801d890 	.word	0x0801d890

08005150 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b094      	sub	sp, #80	@ 0x50
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	2240      	movs	r2, #64	@ 0x40
 8005164:	4619      	mov	r1, r3
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f000 fc7a 	bl	8005a60 <VibeCheckShell_GetNextString>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8101 	beq.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	4981      	ldr	r1, [pc, #516]	@ (8005380 <VibeCheckSensorCMD_Execute+0x230>)
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb f8c8 	bl	8000310 <strcmp>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d135      	bne.n	80051f2 <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005186:	f107 030c 	add.w	r3, r7, #12
 800518a:	2240      	movs	r2, #64	@ 0x40
 800518c:	4619      	mov	r1, r3
 800518e:	6838      	ldr	r0, [r7, #0]
 8005190:	f000 fc66 	bl	8005a60 <VibeCheckShell_GetNextString>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80ed 	beq.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4978      	ldr	r1, [pc, #480]	@ (8005384 <VibeCheckSensorCMD_Execute+0x234>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb f8b4 	bl	8000310 <strcmp>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 80051ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051b0:	f7ff fb76 	bl	80048a0 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80051b4:	4974      	ldr	r1, [pc, #464]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 80051b6:	6838      	ldr	r0, [r7, #0]
 80051b8:	f000 fd72 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80051bc:	6838      	ldr	r0, [r7, #0]
 80051be:	f000 fdef 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0d8      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 80051c6:	f107 030c 	add.w	r3, r7, #12
 80051ca:	4970      	ldr	r1, [pc, #448]	@ (800538c <VibeCheckSensorCMD_Execute+0x23c>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb f89f 	bl	8000310 <strcmp>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 80ce 	bne.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 80051da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051dc:	f7ff fb6e 	bl	80048bc <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80051e0:	4969      	ldr	r1, [pc, #420]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 80051e2:	6838      	ldr	r0, [r7, #0]
 80051e4:	f000 fd5c 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80051e8:	6838      	ldr	r0, [r7, #0]
 80051ea:	f000 fdd9 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0c2      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 80051f2:	f107 0208 	add.w	r2, r7, #8
 80051f6:	f107 030c 	add.w	r3, r7, #12
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fcdf 	bl	8005bc0 <VibeCheckShell_TurnToInt>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80b6 	beq.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800520a:	f107 030c 	add.w	r3, r7, #12
 800520e:	2240      	movs	r2, #64	@ 0x40
 8005210:	4619      	mov	r1, r3
 8005212:	6838      	ldr	r0, [r7, #0]
 8005214:	f000 fc24 	bl	8005a60 <VibeCheckShell_GetNextString>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80ab 	beq.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8005220:	f107 030c 	add.w	r3, r7, #12
 8005224:	4957      	ldr	r1, [pc, #348]	@ (8005384 <VibeCheckSensorCMD_Execute+0x234>)
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb f872 	bl	8000310 <strcmp>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d138      	bne.n	80052a4 <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005232:	f107 030c 	add.w	r3, r7, #12
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	4619      	mov	r1, r3
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f000 fc10 	bl	8005a60 <VibeCheckShell_GetNextString>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8097 	beq.w	8005376 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	4950      	ldr	r1, [pc, #320]	@ (8005390 <VibeCheckSensorCMD_Execute+0x240>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb f85e 	bl	8000310 <strcmp>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10d      	bne.n	8005276 <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4619      	mov	r1, r3
 800525e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005260:	f7ff f888 	bl	8004374 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005264:	4948      	ldr	r1, [pc, #288]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 8005266:	6838      	ldr	r0, [r7, #0]
 8005268:	f000 fd1a 	bl	8005ca0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f000 fd97 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005272:	2301      	movs	r3, #1
 8005274:	e080      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	4946      	ldr	r1, [pc, #280]	@ (8005394 <VibeCheckSensorCMD_Execute+0x244>)
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f847 	bl	8000310 <strcmp>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d176      	bne.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4619      	mov	r1, r3
 800528c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800528e:	f7ff f8e9 	bl	8004464 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005292:	493d      	ldr	r1, [pc, #244]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f000 fd03 	bl	8005ca0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800529a:	6838      	ldr	r0, [r7, #0]
 800529c:	f000 fd80 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e069      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	4938      	ldr	r1, [pc, #224]	@ (800538c <VibeCheckSensorCMD_Execute+0x23c>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb f830 	bl	8000310 <strcmp>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d137      	bne.n	8005326 <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	4619      	mov	r1, r3
 80052be:	6838      	ldr	r0, [r7, #0]
 80052c0:	f000 fbce 	bl	8005a60 <VibeCheckShell_GetNextString>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d055      	beq.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 80052ca:	f107 030c 	add.w	r3, r7, #12
 80052ce:	4930      	ldr	r1, [pc, #192]	@ (8005390 <VibeCheckSensorCMD_Execute+0x240>)
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f81d 	bl	8000310 <strcmp>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10d      	bne.n	80052f8 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4619      	mov	r1, r3
 80052e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80052e2:	f7ff f883 	bl	80043ec <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 80052e6:	4928      	ldr	r1, [pc, #160]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 80052e8:	6838      	ldr	r0, [r7, #0]
 80052ea:	f000 fcd9 	bl	8005ca0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80052ee:	6838      	ldr	r0, [r7, #0]
 80052f0:	f000 fd56 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e03f      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	4925      	ldr	r1, [pc, #148]	@ (8005394 <VibeCheckSensorCMD_Execute+0x244>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fb f806 	bl	8000310 <strcmp>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d135      	bne.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4619      	mov	r1, r3
 800530e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005310:	f7ff f8e4 	bl	80044dc <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005314:	491c      	ldr	r1, [pc, #112]	@ (8005388 <VibeCheckSensorCMD_Execute+0x238>)
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f000 fcc2 	bl	8005ca0 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f000 fd3f 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005322:	2301      	movs	r3, #1
 8005324:	e028      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	491b      	ldr	r1, [pc, #108]	@ (8005398 <VibeCheckSensorCMD_Execute+0x248>)
 800532c:	4618      	mov	r0, r3
 800532e:	f7fa ffef 	bl	8000310 <strcmp>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	461a      	mov	r2, r3
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005340:	f7ff fcd8 	bl	8004cf4 <VibeCheckSensorCMD_Set>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d015      	beq.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 800534a:	2301      	movs	r3, #1
 800534c:	e014      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 800534e:	f107 030c 	add.w	r3, r7, #12
 8005352:	4912      	ldr	r1, [pc, #72]	@ (800539c <VibeCheckSensorCMD_Execute+0x24c>)
 8005354:	4618      	mov	r0, r3
 8005356:	f7fa ffdb 	bl	8000310 <strcmp>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	461a      	mov	r2, r3
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005368:	f7ff fdd2 	bl	8004f10 <VibeCheckSensorCMD_Get>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3750      	adds	r7, #80	@ 0x50
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	0801d89c 	.word	0x0801d89c
 8005384:	0801d8a8 	.word	0x0801d8a8
 8005388:	0801d874 	.word	0x0801d874
 800538c:	0801d8b0 	.word	0x0801d8b0
 8005390:	0801d868 	.word	0x0801d868
 8005394:	0801d880 	.word	0x0801d880
 8005398:	0801d8b8 	.word	0x0801d8b8
 800539c:	0801d8bc 	.word	0x0801d8bc

080053a0 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4619      	mov	r1, r3
 80053b4:	6938      	ldr	r0, [r7, #16]
 80053b6:	f7ff fbbc 	bl	8004b32 <VibeCheckSensor_GetDataReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d04f      	beq.n	8005460 <VibeCheckSensorSender_Data_Execute+0xc0>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 80053c0:	492a      	ldr	r1, [pc, #168]	@ (800546c <VibeCheckSensorSender_Data_Execute+0xcc>)
 80053c2:	6838      	ldr	r0, [r7, #0]
 80053c4:	f000 fc6c 	bl	8005ca0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	f000 fcdb 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 80053ce:	2119      	movs	r1, #25
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	f000 fca1 	bl	8005d18 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 80053da:	e039      	b.n	8005450 <VibeCheckSensorSender_Data_Execute+0xb0>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 80053dc:	6838      	ldr	r0, [r7, #0]
 80053de:	f000 fcd1 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f000 fc94 	bl	8005d18 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	f000 fcc7 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4619      	mov	r1, r3
 80053fc:	6838      	ldr	r0, [r7, #0]
 80053fe:	f000 fc8b 	bl	8005d18 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005402:	6838      	ldr	r0, [r7, #0]
 8005404:	f000 fcbe 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	edd3 7a02 	vldr	s15, [r3, #8]
 800540e:	eeb0 0a67 	vmov.f32	s0, s15
 8005412:	6838      	ldr	r0, [r7, #0]
 8005414:	f000 fc98 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005418:	6838      	ldr	r0, [r7, #0]
 800541a:	f000 fcb3 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	edd3 7a03 	vldr	s15, [r3, #12]
 8005424:	eeb0 0a67 	vmov.f32	s0, s15
 8005428:	6838      	ldr	r0, [r7, #0]
 800542a:	f000 fc8d 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800542e:	6838      	ldr	r0, [r7, #0]
 8005430:	f000 fca8 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	edd3 7a04 	vldr	s15, [r3, #16]
 800543a:	eeb0 0a67 	vmov.f32	s0, s15
 800543e:	6838      	ldr	r0, [r7, #0]
 8005440:	f000 fc82 	bl	8005d48 <VibeCheckShell_PutOutputFloat>


			data++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3314      	adds	r3, #20
 8005448:	60fb      	str	r3, [r7, #12]
			data_written++;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	3301      	adds	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b18      	cmp	r3, #24
 8005454:	d9c2      	bls.n	80053dc <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f000 fca2 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <VibeCheckSensorSender_Data_Execute+0xc2>
	}

	return 0;
 8005460:	2300      	movs	r3, #0

}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	0801d8c0 	.word	0x0801d8c0

08005470 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 800547e:	f107 020c 	add.w	r2, r7, #12
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4619      	mov	r1, r3
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f7ff fa3e 	bl	800490a <VibeCheckSensor_ConnectionChanged>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d026      	beq.n	80054e2 <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8005494:	4915      	ldr	r1, [pc, #84]	@ (80054ec <VibeCheckSensorSender_Status_Execute+0x7c>)
 8005496:	6838      	ldr	r0, [r7, #0]
 8005498:	f000 fc02 	bl	8005ca0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800549c:	6838      	ldr	r0, [r7, #0]
 800549e:	f000 fc71 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 80054a2:	4913      	ldr	r1, [pc, #76]	@ (80054f0 <VibeCheckSensorSender_Status_Execute+0x80>)
 80054a4:	6838      	ldr	r0, [r7, #0]
 80054a6:	f000 fbfb 	bl	8005ca0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f000 fc6a 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6838      	ldr	r0, [r7, #0]
 80054b6:	f000 fc2f 	bl	8005d18 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 80054ba:	6838      	ldr	r0, [r7, #0]
 80054bc:	f000 fc62 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 80054c6:	490b      	ldr	r1, [pc, #44]	@ (80054f4 <VibeCheckSensorSender_Status_Execute+0x84>)
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f000 fbe9 	bl	8005ca0 <VibeCheckShell_PutOutputString>
 80054ce:	e003      	b.n	80054d8 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 80054d0:	4909      	ldr	r1, [pc, #36]	@ (80054f8 <VibeCheckSensorSender_Status_Execute+0x88>)
 80054d2:	6838      	ldr	r0, [r7, #0]
 80054d4:	f000 fbe4 	bl	8005ca0 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 80054d8:	6838      	ldr	r0, [r7, #0]
 80054da:	f000 fc61 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0801d8c8 	.word	0x0801d8c8
 80054f0:	0801d8d0 	.word	0x0801d8d0
 80054f4:	0801d890 	.word	0x0801d890
 80054f8:	0801d8d8 	.word	0x0801d8d8

080054fc <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800553a:	461a      	mov	r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	6153      	str	r3, [r2, #20]
	shell->output_end = 0;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005552:	461a      	mov	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	6193      	str	r3, [r2, #24]
	shell->output_count = 0;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800555e:	461a      	mov	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	61d3      	str	r3, [r2, #28]

	shell->ih_count = 0;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	shell->oh_count = 0;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005578:	461a      	mov	r2, r3
 800557a:	2300      	movs	r3, #0
 800557c:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b099      	sub	sp, #100	@ 0x64
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8005594:	2300      	movs	r3, #0
 8005596:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a4:	d302      	bcc.n	80055ac <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8099 	beq.w	80056ec <VibeCheckShell_Update+0x160>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 80055c0:	e094      	b.n	80056ec <VibeCheckShell_Update+0x160>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa48 	bl	8005a60 <VibeCheckShell_GetNextString>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04a      	beq.n	800566c <VibeCheckShell_Update+0xe0>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055da:	e03e      	b.n	800565a <VibeCheckShell_Update+0xce>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 80055dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4a74      	ldr	r2, [pc, #464]	@ (80057b8 <VibeCheckShell_Update+0x22c>)
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	f107 020c 	add.w	r2, r7, #12
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fa fe8b 	bl	8000310 <strcmp>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11d      	bne.n	800563c <VibeCheckShell_Update+0xb0>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	18ca      	adds	r2, r1, r3
 800560e:	4b6b      	ldr	r3, [pc, #428]	@ (80057bc <VibeCheckShell_Update+0x230>)
 8005610:	4413      	add	r3, r2
 8005612:	681c      	ldr	r4, [r3, #0]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	18ca      	adds	r2, r1, r3
 8005622:	4b67      	ldr	r3, [pc, #412]	@ (80057c0 <VibeCheckShell_Update+0x234>)
 8005624:	4413      	add	r3, r2
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	47a0      	blx	r4
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11f      	bne.n	8005674 <VibeCheckShell_Update+0xe8>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8005634:	2303      	movs	r3, #3
 8005636:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 800563a:	e01b      	b.n	8005674 <VibeCheckShell_Update+0xe8>
				}

				if (i == shell->ih_count - 1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005642:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005646:	3b01      	subs	r3, #1
 8005648:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800564a:	429a      	cmp	r2, r3
 800564c:	d102      	bne.n	8005654 <VibeCheckShell_Update+0xc8>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800564e:	2302      	movs	r3, #2
 8005650:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005656:	3301      	adds	r3, #1
 8005658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005660:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005664:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005666:	429a      	cmp	r2, r3
 8005668:	d3b8      	bcc.n	80055dc <VibeCheckShell_Update+0x50>
 800566a:	e004      	b.n	8005676 <VibeCheckShell_Update+0xea>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800566c:	2302      	movs	r3, #2
 800566e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005672:	e000      	b.n	8005676 <VibeCheckShell_Update+0xea>
					break;
 8005674:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	5cd3      	ldrb	r3, [r2, r3]
 8005682:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	3b01      	subs	r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005696:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	3301      	adds	r3, #1
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056a8:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b6:	d105      	bne.n	80056c4 <VibeCheckShell_Update+0x138>
				shell->input_tail = 0;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056be:	461a      	mov	r2, r3
 80056c0:	2300      	movs	r3, #0
 80056c2:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 80056c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056c8:	4619      	mov	r1, r3
 80056ca:	483e      	ldr	r0, [pc, #248]	@ (80057c4 <VibeCheckShell_Update+0x238>)
 80056cc:	f014 fced 	bl	801a0aa <strchr>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d100      	bne.n	80056d8 <VibeCheckShell_Update+0x14c>
		{
 80056d6:	e7ce      	b.n	8005676 <VibeCheckShell_Update+0xea>
				break;  /* found the delimiter */
 80056d8:	bf00      	nop
		}


		shell->input_delimiter_count--;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056ea:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af64 	bne.w	80055c2 <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056fe:	e032      	b.n	8005766 <VibeCheckShell_Update+0x1da>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005704:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005708:	440b      	add	r3, r1
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005714:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005718:	4403      	add	r3, r0
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	4790      	blx	r2
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d019      	beq.n	8005760 <VibeCheckShell_Update+0x1d4>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			/* wrap the output buffer if necessary so that an output packet doesn't get split up */
			if (VC_SHELL_IO_BUF_LEN - shell->output_head < VC_SHELL_MAX_OUTPUT_PACKET_LEN)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800573e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005742:	d20d      	bcs.n	8005760 <VibeCheckShell_Update+0x1d4>
			{
				shell->output_end = shell->output_head;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005752:	6193      	str	r3, [r2, #24]
				shell->output_head = 0;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6113      	str	r3, [r2, #16]
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005762:	3301      	adds	r3, #1
 8005764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800576c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8005770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005772:	429a      	cmp	r2, r3
 8005774:	d3c4      	bcc.n	8005700 <VibeCheckShell_Update+0x174>
			}
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005782:	d302      	bcc.n	800578a <VibeCheckShell_Update+0x1fe>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 800578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578c:	653b      	str	r3, [r7, #80]	@ 0x50
 800578e:	2300      	movs	r3, #0
 8005790:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8005794:	f362 0307 	bfi	r3, r2, #0, #8
 8005798:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800579c:	f362 230f 	bfi	r3, r2, #8, #8
 80057a0:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80057a4:	f362 4317 	bfi	r3, r2, #16, #8
 80057a8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80057ac:	f362 631f 	bfi	r3, r2, #24, #8
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3764      	adds	r7, #100	@ 0x64
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd90      	pop	{r4, r7, pc}
 80057b8:	00010020 	.word	0x00010020
 80057bc:	00010060 	.word	0x00010060
 80057c0:	00010064 	.word	0x00010064
 80057c4:	0801d8e8 	.word	0x0801d8e8

080057c8 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80057c8:	b084      	sub	sp, #16
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	f107 0014 	add.w	r0, r7, #20
 80057d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80057e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80057e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80057e6:	d819      	bhi.n	800581c <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80057ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 80057fa:	f8c1 3220 	str.w	r3, [r1, #544]	@ 0x220
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	18ca      	adds	r2, r1, r3
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <VibeCheckShell_RegisterInputHandler+0x64>)
 800580c:	4413      	add	r3, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	2248      	movs	r2, #72	@ 0x48
 8005816:	4619      	mov	r1, r3
 8005818:	f014 fcdd 	bl	801a1d6 <memcpy>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005826:	b004      	add	sp, #16
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	00010020 	.word	0x00010020

08005830 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005844:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8005848:	2b3f      	cmp	r3, #63	@ 0x3f
 800584a:	d816      	bhi.n	800587a <VibeCheckShell_RegisterOutputHandler+0x4a>
		shell->output_handlers[shell->oh_count++] = handler;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005852:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 8005856:	1c53      	adds	r3, r2, #1
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 800585e:	f8c1 3424 	str.w	r3, [r1, #1060]	@ 0x424
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	3304      	adds	r3, #4
 8005870:	1d3a      	adds	r2, r7, #4
 8005872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005876:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e03e      	b.n	8005918 <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03f      	beq.n	8005922 <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80058b2:	600a      	str	r2, [r1, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	7811      	ldrb	r1, [r2, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c8:	d105      	bne.n	80058d6 <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	3301      	adds	r3, #1
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80058e6:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4619      	mov	r1, r3
 80058ee:	480f      	ldr	r0, [pc, #60]	@ (800592c <VibeCheckShell_PutInput+0xa4>)
 80058f0:	f014 fbdb 	bl	801a0aa <strchr>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800590a:	60d3      	str	r3, [r2, #12]

			input++;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3301      	adds	r3, #1
 8005910:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	3301      	adds	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3bc      	bcc.n	800589a <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8005920:	e000      	b.n	8005924 <VibeCheckShell_PutInput+0x9c>
			break;
 8005922:	bf00      	nop
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	0801d8e8 	.word	0x0801d8e8

08005930 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	uint32_t head = shell->output_head;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	617b      	str	r3, [r7, #20]
	uint32_t tail = shell->output_tail;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	613b      	str	r3, [r7, #16]

	if (head == tail)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d101      	bne.n	800595c <VibeCheckShell_GetOutput+0x2c>
		return 0;
 8005958:	2300      	movs	r3, #0
 800595a:	e038      	b.n	80059ce <VibeCheckShell_GetOutput+0x9e>

	if (head > tail)
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d90e      	bls.n	8005982 <VibeCheckShell_GetOutput+0x52>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[tail];
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	f248 0310 	movw	r3, #32784	@ 0x8010
 800596a:	4413      	add	r3, r2
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	441a      	add	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	601a      	str	r2, [r3, #0]
		*len = head - tail;
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
		return 1;
 800597e:	2301      	movs	r3, #1
 8005980:	e025      	b.n	80059ce <VibeCheckShell_GetOutput+0x9e>
	}
	else
	{
		if (shell->output_end)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d011      	beq.n	80059b2 <VibeCheckShell_GetOutput+0x82>
		{
			/* the output would have wrapped but we caught it - only send up to the delimited end of the output */
			*output = &shell->output[tail];
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005994:	4413      	add	r3, r2
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	441a      	add	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	601a      	str	r2, [r3, #0]
			*len = shell->output_end - tail;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad2      	subs	r2, r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
			return 1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e00d      	b.n	80059ce <VibeCheckShell_GetOutput+0x9e>
		}
		else
		{
			/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
			*output = &shell->output[tail];
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	f248 0310 	movw	r3, #32784	@ 0x8010
 80059b8:	4413      	add	r3, r2
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	441a      	add	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	601a      	str	r2, [r3, #0]
			*len = VC_SHELL_IO_BUF_LEN - tail;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
			return 1;
 80059cc:	2301      	movs	r3, #1
		}
	}
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80059f6:	61d3      	str	r3, [r2, #28]
	shell->output_tail += len;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a0a:	6153      	str	r3, [r2, #20]

	if (shell->output_end)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <VibeCheckShell_UpdateOutputBuffer+0x58>
	{
		/* sent a packet which ends in the wrapping boundary region */
		shell->output_end = 0;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6153      	str	r3, [r2, #20]
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
	}


}
 8005a30:	e010      	b.n	8005a54 <VibeCheckShell_UpdateOutputBuffer+0x7a>
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3e:	d309      	bcc.n	8005a54 <VibeCheckShell_UpdateOutputBuffer+0x7a>
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a52:	6153      	str	r3, [r2, #20]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e05f      	b.n	8005b32 <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	4619      	mov	r1, r3
 8005a84:	482f      	ldr	r0, [pc, #188]	@ (8005b44 <VibeCheckShell_GetNextString+0xe4>)
 8005a86:	f014 fb10 	bl	801a0aa <strchr>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
				return 1;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04d      	b.n	8005b3c <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e04b      	b.n	8005b3c <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005ab4:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005ac6:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad4:	d105      	bne.n	8005ae2 <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005adc:	461a      	mov	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4818      	ldr	r0, [pc, #96]	@ (8005b48 <VibeCheckShell_GetNextString+0xe8>)
 8005ae8:	f014 fadf 	bl	801a0aa <strchr>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
					return 1;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01c      	b.n	8005b3c <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	74bb      	strb	r3, [r7, #18]
 8005b06:	7cbb      	ldrb	r3, [r7, #18]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <VibeCheckShell_GetNextString+0xec>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d103      	bne.n	8005b20 <VibeCheckShell_GetNextString+0xc0>
 8005b18:	7cbb      	ldrb	r3, [r7, #18]
 8005b1a:	f103 0220 	add.w	r2, r3, #32
 8005b1e:	e000      	b.n	8005b22 <VibeCheckShell_GetNextString+0xc2>
 8005b20:	7cba      	ldrb	r2, [r7, #18]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
				i++;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d39b      	bcc.n	8005a72 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	0801d8e8 	.word	0x0801d8e8
 8005b48:	0801d8ec 	.word	0x0801d8ec
 8005b4c:	0801e390 	.word	0x0801e390

08005b50 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b092      	sub	sp, #72	@ 0x48
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b5a:	f107 0308 	add.w	r3, r7, #8
 8005b5e:	2240      	movs	r2, #64	@ 0x40
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff7c 	bl	8005a60 <VibeCheckShell_GetNextString>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f823 	bl	8005bc0 <VibeCheckShell_TurnToInt>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	e000      	b.n	8005b80 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3748      	adds	r7, #72	@ 0x48
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b092      	sub	sp, #72	@ 0x48
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b92:	f107 0308 	add.w	r3, r7, #8
 8005b96:	2240      	movs	r2, #64	@ 0x40
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff60 	bl	8005a60 <VibeCheckShell_GetNextString>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f83d 	bl	8005c2c <VibeCheckShell_TurnToFloat>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	e000      	b.n	8005bb8 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3748      	adds	r7, #72	@ 0x48
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <VibeCheckShell_TurnToInt+0x68>)
 8005bcc:	f107 0308 	add.w	r3, r7, #8
 8005bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e012      	b.n	8005c02 <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f014 fa5c 	bl	801a0aa <strchr>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e010      	b.n	8005c1e <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fa fbe4 	bl	80003d0 <strlen>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d3e5      	bcc.n	8005bdc <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f012 fea0 	bl	8018956 <atoi>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	601a      	str	r2, [r3, #0]
	return 1;
 8005c1c:	2301      	movs	r3, #1
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	0801d8f0 	.word	0x0801d8f0

08005c2c <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b089      	sub	sp, #36	@ 0x24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 8005c36:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <VibeCheckShell_TurnToFloat+0x70>)
 8005c38:	f107 040c 	add.w	r4, r7, #12
 8005c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c3e:	c407      	stmia	r4!, {r0, r1, r2}
 8005c40:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e012      	b.n	8005c6e <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	f107 030c 	add.w	r3, r7, #12
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f014 fa26 	bl	801a0aa <strchr>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005c64:	2300      	movs	r3, #0
 8005c66:	e014      	b.n	8005c92 <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fa fbae 	bl	80003d0 <strlen>
 8005c74:	4602      	mov	r2, r0
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d3e5      	bcc.n	8005c48 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f012 fe67 	bl	8018950 <atof>
 8005c82:	eeb0 7b40 	vmov.f64	d7, d0
 8005c86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005c90:	2301      	movs	r3, #1
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3724      	adds	r7, #36	@ 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd90      	pop	{r4, r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	0801d8fc 	.word	0x0801d8fc

08005ca0 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	while (*str)
 8005caa:	e029      	b.n	8005d00 <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	1c53      	adds	r3, r2, #1
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8005cc2:	6101      	str	r1, [r0, #16]
 8005cc4:	7811      	ldrb	r1, [r2, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	441a      	add	r2, r3
 8005cca:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005cce:	4413      	add	r3, r2
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005ce4:	61d3      	str	r3, [r2, #28]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf2:	d105      	bne.n	8005d00 <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6113      	str	r3, [r2, #16]
	while (*str)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1d1      	bne.n	8005cac <VibeCheckShell_PutOutputString+0xc>
	}
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b092      	sub	sp, #72	@ 0x48
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4906      	ldr	r1, [pc, #24]	@ (8005d44 <VibeCheckShell_PutOutputInt+0x2c>)
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f014 f952 	bl	8019fd4 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d30:	f107 0308 	add.w	r3, r7, #8
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffb2 	bl	8005ca0 <VibeCheckShell_PutOutputString>
}
 8005d3c:	bf00      	nop
 8005d3e:	3748      	adds	r7, #72	@ 0x48
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0801d90c 	.word	0x0801d90c

08005d48 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b092      	sub	sp, #72	@ 0x48
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%.3f", val);
 8005d54:	edd7 7a00 	vldr	s15, [r7]
 8005d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d5c:	f107 0008 	add.w	r0, r7, #8
 8005d60:	ec53 2b17 	vmov	r2, r3, d7
 8005d64:	4906      	ldr	r1, [pc, #24]	@ (8005d80 <VibeCheckShell_PutOutputFloat+0x38>)
 8005d66:	f014 f935 	bl	8019fd4 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d6a:	f107 0308 	add.w	r3, r7, #8
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff95 	bl	8005ca0 <VibeCheckShell_PutOutputString>
}
 8005d76:	bf00      	nop
 8005d78:	3748      	adds	r7, #72	@ 0x48
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	0801d910 	.word	0x0801d910

08005d84 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8005d8c:	4903      	ldr	r1, [pc, #12]	@ (8005d9c <VibeCheckShell_PutOutputSeparator+0x18>)
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff86 	bl	8005ca0 <VibeCheckShell_PutOutputString>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	0801d918 	.word	0x0801d918

08005da0 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8005da8:	4903      	ldr	r1, [pc, #12]	@ (8005db8 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ff78 	bl	8005ca0 <VibeCheckShell_PutOutputString>
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	0801d8e8 	.word	0x0801d8e8

08005dbc <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dd2:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005dda:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f640 125f 	movw	r2, #2399	@ 0x95f
 8005dee:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005df6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f84a 	bl	8005e94 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e06:	eeb0 0a67 	vmov.f32	s0, s15
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f928 	bl	8006060 <VibeCheckStrobe_SetExposure>

}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00b fd51 	bl	80118cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f00b fe33 	bl	8011a9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00b fe2d 	bl	8011a9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2108      	movs	r1, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f00b fe27 	bl	8011a9c <HAL_TIM_PWM_Start>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f00b fd32 	bl	80118cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f00b ff30 	bl	8011cd4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2104      	movs	r1, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f00b ff2a 	bl	8011cd4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2108      	movs	r1, #8
 8005e86:	4618      	mov	r0, r3
 8005e88:	f00b ff24 	bl	8011cd4 <HAL_TIM_PWM_Stop>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005ea0:	edd7 7a00 	vldr	s15, [r7]
 8005ea4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	d502      	bpl.n	8005eb8 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005eb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005eb6:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8005eb8:	edd7 7a00 	vldr	s15, [r7]
 8005ebc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005f28 <VibeCheckStrobe_SetFrequency+0x94>
 8005ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	dd01      	ble.n	8005ece <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8005eca:	4b18      	ldr	r3, [pc, #96]	@ (8005f2c <VibeCheckStrobe_SetFrequency+0x98>)
 8005ecc:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005ece:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005f30 <VibeCheckStrobe_SetFrequency+0x9c>
 8005ed2:	ed97 7a00 	vldr	s14, [r7]
 8005ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee6:	ee17 2a90 	vmov	r2, s15
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f02:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005f30 <VibeCheckStrobe_SetFrequency+0x9c>
 8005f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6912      	ldr	r2, [r2, #16]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	447a0000 	.word	0x447a0000
 8005f2c:	447a0000 	.word	0x447a0000
 8005f30:	47c35000 	.word	0x47c35000

08005f34 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	ee07 3a90 	vmov	s15, r3
}
 8005f44:	eeb0 0a67 	vmov.f32	s0, s15
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005f60:	edd7 7a00 	vldr	s15, [r7]
 8005f64:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800602c <VibeCheckStrobe_SetPhase+0xd8>
 8005f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	d501      	bpl.n	8005f76 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005f72:	4b2f      	ldr	r3, [pc, #188]	@ (8006030 <VibeCheckStrobe_SetPhase+0xdc>)
 8005f74:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8005f76:	edd7 7a00 	vldr	s15, [r7]
 8005f7a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006034 <VibeCheckStrobe_SetPhase+0xe0>
 8005f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	dd01      	ble.n	8005f8c <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8005f88:	4b2b      	ldr	r3, [pc, #172]	@ (8006038 <VibeCheckStrobe_SetPhase+0xe4>)
 8005f8a:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f92:	ed97 7a00 	vldr	s14, [r7]
 8005f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9a:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fa2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800603c <VibeCheckStrobe_SetPhase+0xe8>
 8005fa6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fbe:	ee17 3a90 	vmov	r3, s15
 8005fc2:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d029      	beq.n	800601e <VibeCheckStrobe_SetPhase+0xca>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d125      	bne.n	800601e <VibeCheckStrobe_SetPhase+0xca>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d121      	bne.n	800601e <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	ed93 7a03 	vldr	s14, [r3, #12]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005ffa:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800603c <VibeCheckStrobe_SetPhase+0xe8>
 8005ffe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	619a      	str	r2, [r3, #24]
	}
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	c3340000 	.word	0xc3340000
 8006030:	c3340000 	.word	0xc3340000
 8006034:	43340000 	.word	0x43340000
 8006038:	43340000 	.word	0x43340000
 800603c:	43b40000 	.word	0x43b40000

08006040 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	ee07 3a90 	vmov	s15, r3
}
 8006050:	eeb0 0a67 	vmov.f32	s0, s15
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 800606c:	edd7 7a00 	vldr	s15, [r7]
 8006070:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80060ec <VibeCheckStrobe_SetExposure+0x8c>
 8006074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006078:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80060f0 <VibeCheckStrobe_SetExposure+0x90>
 800607c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006084:	ee17 3a90 	vmov	r3, s15
 8006088:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	429a      	cmp	r2, r3
 8006096:	d904      	bls.n	80060a2 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a0:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060ac:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80060f0 <VibeCheckStrobe_SetExposure+0x90>
 80060b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80060f4 <VibeCheckStrobe_SetExposure+0x94>
 80060b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	3a83126f 	.word	0x3a83126f
 80060f0:	47c35000 	.word	0x47c35000
 80060f4:	447a0000 	.word	0x447a0000

080060f8 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	ee07 3a90 	vmov	s15, r3
}
 8006108:	eeb0 0a67 	vmov.f32	s0, s15
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6912      	ldr	r2, [r2, #16]
 8006130:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6952      	ldr	r2, [r2, #20]
 800614a:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	619a      	str	r2, [r3, #24]
	}
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b096      	sub	sp, #88	@ 0x58
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800616e:	f107 0318 	add.w	r3, r7, #24
 8006172:	2240      	movs	r2, #64	@ 0x40
 8006174:	4619      	mov	r1, r3
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f7ff fc72 	bl	8005a60 <VibeCheckShell_GetNextString>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d065      	beq.n	800624e <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8006182:	f107 0318 	add.w	r3, r7, #24
 8006186:	4934      	ldr	r1, [pc, #208]	@ (8006258 <VibeCheckStrobeCMD_Set+0xf4>)
 8006188:	4618      	mov	r0, r3
 800618a:	f7fa f8c1 	bl	8000310 <strcmp>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d118      	bne.n	80061c6 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	4619      	mov	r1, r3
 800619a:	6838      	ldr	r0, [r7, #0]
 800619c:	f7ff fcf4 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d053      	beq.n	800624e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 80061a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80061aa:	eeb0 0a67 	vmov.f32	s0, s15
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fe70 	bl	8005e94 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80061b4:	4929      	ldr	r1, [pc, #164]	@ (800625c <VibeCheckStrobeCMD_Set+0xf8>)
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f7ff fd72 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80061bc:	6838      	ldr	r0, [r7, #0]
 80061be:	f7ff fdef 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e044      	b.n	8006250 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 80061c6:	f107 0318 	add.w	r3, r7, #24
 80061ca:	4925      	ldr	r1, [pc, #148]	@ (8006260 <VibeCheckStrobeCMD_Set+0xfc>)
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fa f89f 	bl	8000310 <strcmp>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d118      	bne.n	800620a <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	4619      	mov	r1, r3
 80061de:	6838      	ldr	r0, [r7, #0]
 80061e0:	f7ff fcd2 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d031      	beq.n	800624e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 80061ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ee:	eeb0 0a67 	vmov.f32	s0, s15
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff feae 	bl	8005f54 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 80061f8:	4918      	ldr	r1, [pc, #96]	@ (800625c <VibeCheckStrobeCMD_Set+0xf8>)
 80061fa:	6838      	ldr	r0, [r7, #0]
 80061fc:	f7ff fd50 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f7ff fdcd 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006206:	2301      	movs	r3, #1
 8006208:	e022      	b.n	8006250 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 800620a:	f107 0318 	add.w	r3, r7, #24
 800620e:	4915      	ldr	r1, [pc, #84]	@ (8006264 <VibeCheckStrobeCMD_Set+0x100>)
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa f87d 	bl	8000310 <strcmp>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d118      	bne.n	800624e <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800621c:	f107 030c 	add.w	r3, r7, #12
 8006220:	4619      	mov	r1, r3
 8006222:	6838      	ldr	r0, [r7, #0]
 8006224:	f7ff fcb0 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800622e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006232:	eeb0 0a67 	vmov.f32	s0, s15
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff ff12 	bl	8006060 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 800623c:	4907      	ldr	r1, [pc, #28]	@ (800625c <VibeCheckStrobeCMD_Set+0xf8>)
 800623e:	6838      	ldr	r0, [r7, #0]
 8006240:	f7ff fd2e 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006244:	6838      	ldr	r0, [r7, #0]
 8006246:	f7ff fdab 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3758      	adds	r7, #88	@ 0x58
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	0801d91c 	.word	0x0801d91c
 800625c:	0801d928 	.word	0x0801d928
 8006260:	0801d92c 	.word	0x0801d92c
 8006264:	0801d934 	.word	0x0801d934

08006268 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b092      	sub	sp, #72	@ 0x48
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	2240      	movs	r2, #64	@ 0x40
 8006278:	4619      	mov	r1, r3
 800627a:	6838      	ldr	r0, [r7, #0]
 800627c:	f7ff fbf0 	bl	8005a60 <VibeCheckShell_GetNextString>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d05c      	beq.n	8006340 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	4930      	ldr	r1, [pc, #192]	@ (800634c <VibeCheckStrobeCMD_Get+0xe4>)
 800628c:	4618      	mov	r0, r3
 800628e:	f7fa f83f 	bl	8000310 <strcmp>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d115      	bne.n	80062c4 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006298:	492d      	ldr	r1, [pc, #180]	@ (8006350 <VibeCheckStrobeCMD_Get+0xe8>)
 800629a:	6838      	ldr	r0, [r7, #0]
 800629c:	f7ff fd00 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80062a0:	6838      	ldr	r0, [r7, #0]
 80062a2:	f7ff fd6f 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fe44 	bl	8005f34 <VibeCheckStrobe_GetFrequency>
 80062ac:	eef0 7a40 	vmov.f32	s15, s0
 80062b0:	eeb0 0a67 	vmov.f32	s0, s15
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	f7ff fd47 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80062ba:	6838      	ldr	r0, [r7, #0]
 80062bc:	f7ff fd70 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e03e      	b.n	8006342 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	4922      	ldr	r1, [pc, #136]	@ (8006354 <VibeCheckStrobeCMD_Get+0xec>)
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fa f820 	bl	8000310 <strcmp>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d115      	bne.n	8006302 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80062d6:	491e      	ldr	r1, [pc, #120]	@ (8006350 <VibeCheckStrobeCMD_Get+0xe8>)
 80062d8:	6838      	ldr	r0, [r7, #0]
 80062da:	f7ff fce1 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80062de:	6838      	ldr	r0, [r7, #0]
 80062e0:	f7ff fd50 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff feab 	bl	8006040 <VibeCheckStrobe_GetPhase>
 80062ea:	eef0 7a40 	vmov.f32	s15, s0
 80062ee:	eeb0 0a67 	vmov.f32	s0, s15
 80062f2:	6838      	ldr	r0, [r7, #0]
 80062f4:	f7ff fd28 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	f7ff fd51 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80062fe:	2301      	movs	r3, #1
 8006300:	e01f      	b.n	8006342 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4914      	ldr	r1, [pc, #80]	@ (8006358 <VibeCheckStrobeCMD_Get+0xf0>)
 8006308:	4618      	mov	r0, r3
 800630a:	f7fa f801 	bl	8000310 <strcmp>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d115      	bne.n	8006340 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006314:	490e      	ldr	r1, [pc, #56]	@ (8006350 <VibeCheckStrobeCMD_Get+0xe8>)
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f7ff fcc2 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800631c:	6838      	ldr	r0, [r7, #0]
 800631e:	f7ff fd31 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fee8 	bl	80060f8 <VibeCheckStrobe_GetExposure>
 8006328:	eef0 7a40 	vmov.f32	s15, s0
 800632c:	eeb0 0a67 	vmov.f32	s0, s15
 8006330:	6838      	ldr	r0, [r7, #0]
 8006332:	f7ff fd09 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006336:	6838      	ldr	r0, [r7, #0]
 8006338:	f7ff fd32 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3748      	adds	r7, #72	@ 0x48
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	0801d91c 	.word	0x0801d91c
 8006350:	0801d928 	.word	0x0801d928
 8006354:	0801d92c 	.word	0x0801d92c
 8006358:	0801d934 	.word	0x0801d934

0800635c <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b094      	sub	sp, #80	@ 0x50
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800636a:	f107 030c 	add.w	r3, r7, #12
 800636e:	2240      	movs	r2, #64	@ 0x40
 8006370:	4619      	mov	r1, r3
 8006372:	6838      	ldr	r0, [r7, #0]
 8006374:	f7ff fb74 	bl	8005a60 <VibeCheckShell_GetNextString>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d04d      	beq.n	800641a <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	4928      	ldr	r1, [pc, #160]	@ (8006424 <VibeCheckStrobeCMD_Execute+0xc8>)
 8006384:	4618      	mov	r0, r3
 8006386:	f7f9 ffc3 	bl	8000310 <strcmp>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8006390:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006392:	f7ff fd41 	bl	8005e18 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006396:	4924      	ldr	r1, [pc, #144]	@ (8006428 <VibeCheckStrobeCMD_Execute+0xcc>)
 8006398:	6838      	ldr	r0, [r7, #0]
 800639a:	f7ff fc81 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f7ff fcfe 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e039      	b.n	800641c <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	491f      	ldr	r1, [pc, #124]	@ (800642c <VibeCheckStrobeCMD_Execute+0xd0>)
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7f9 ffae 	bl	8000310 <strcmp>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 80063ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063bc:	f7ff fd4b 	bl	8005e56 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80063c0:	4919      	ldr	r1, [pc, #100]	@ (8006428 <VibeCheckStrobeCMD_Execute+0xcc>)
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	f7ff fc6c 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80063c8:	6838      	ldr	r0, [r7, #0]
 80063ca:	f7ff fce9 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e024      	b.n	800641c <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80063d2:	f107 030c 	add.w	r3, r7, #12
 80063d6:	4916      	ldr	r1, [pc, #88]	@ (8006430 <VibeCheckStrobeCMD_Execute+0xd4>)
 80063d8:	4618      	mov	r0, r3
 80063da:	f7f9 ff99 	bl	8000310 <strcmp>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063e8:	f7ff febc 	bl	8006164 <VibeCheckStrobeCMD_Set>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d013      	beq.n	800641a <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e012      	b.n	800641c <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	490e      	ldr	r1, [pc, #56]	@ (8006434 <VibeCheckStrobeCMD_Execute+0xd8>)
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7f9 ff87 	bl	8000310 <strcmp>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800640c:	f7ff ff2c 	bl	8006268 <VibeCheckStrobeCMD_Get>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3750      	adds	r7, #80	@ 0x50
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	0801d940 	.word	0x0801d940
 8006428:	0801d928 	.word	0x0801d928
 800642c:	0801d948 	.word	0x0801d948
 8006430:	0801d950 	.word	0x0801d950
 8006434:	0801d954 	.word	0x0801d954

08006438 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	ed2d 8b02 	vpush	{d8}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e032      	b.n	80064b6 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006450:	edd7 7a01 	vldr	s15, [r7, #4]
 8006454:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006466:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80064d8 <ComputeSineWave+0xa0>
 800646a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006480:	eeb0 0b47 	vmov.f64	d0, d7
 8006484:	f016 faf4 	bl	801ca70 <sin>
 8006488:	eeb0 7b40 	vmov.f64	d7, d0
 800648c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006490:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006494:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006498:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80064d0 <ComputeSineWave+0x98>
 800649c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	60fa      	str	r2, [r7, #12]
 80064a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064aa:	ee17 2a90 	vmov	r2, s15
 80064ae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d3c8      	bcc.n	8006450 <ComputeSineWave+0x18>
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	ecbd 8b02 	vpop	{d8}
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	f3af 8000 	nop.w
 80064d0:	00000000 	.word	0x00000000
 80064d4:	409ffe00 	.word	0x409ffe00
 80064d8:	40490fd0 	.word	0x40490fd0

080064dc <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e02c      	b.n	800654a <ComputeSquareWave+0x6e>
		if (i < len / 2)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d212      	bcs.n	8006520 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 80064fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80064fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006506:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006560 <ComputeSquareWave+0x84>
 800650a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	60fa      	str	r2, [r7, #12]
 8006514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006518:	ee17 2a90 	vmov	r2, s15
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e011      	b.n	8006544 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8006520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006524:	edd7 7a01 	vldr	s15, [r7, #4]
 8006528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006560 <ComputeSquareWave+0x84>
 8006530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	60fa      	str	r2, [r7, #12]
 800653a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653e:	ee17 2a90 	vmov	r2, s15
 8006542:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	3301      	adds	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3ce      	bcc.n	80064f0 <ComputeSquareWave+0x14>
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	44fff000 	.word	0x44fff000

08006564 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e052      	b.n	800661e <ComputeSawWave+0xba>
		if (i < len / 2)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	429a      	cmp	r2, r3
 8006580:	d222      	bcs.n	80065c8 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006590:	edd7 7a01 	vldr	s15, [r7, #4]
 8006594:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065ae:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006634 <ComputeSawWave+0xd0>
 80065b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	60fa      	str	r2, [r7, #12]
 80065bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c0:	ee17 2a90 	vmov	r2, s15
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e027      	b.n	8006618 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80065c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80065cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80065ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80065fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006600:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006634 <ComputeSawWave+0xd0>
 8006604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	60fa      	str	r2, [r7, #12]
 800660e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006612:	ee17 2a90 	vmov	r2, s15
 8006616:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3301      	adds	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	d3a8      	bcc.n	8006578 <ComputeSawWave+0x14>
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	44fff000 	.word	0x44fff000

08006638 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e082      	b.n	8006752 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	429a      	cmp	r2, r3
 8006654:	d221      	bcs.n	800669a <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006662:	edd7 7a01 	vldr	s15, [r7, #4]
 8006666:	ee67 6a27 	vmul.f32	s13, s14, s15
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006680:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800676c <ComputeTriangleWave+0x134>
 8006684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	1d1a      	adds	r2, r3, #4
 800668c:	60fa      	str	r2, [r7, #12]
 800668e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006692:	ee17 2a90 	vmov	r2, s15
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e058      	b.n	800674c <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d227      	bcs.n	80066fa <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80066aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ca:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800676c <ComputeTriangleWave+0x134>
 80066e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	1d1a      	adds	r2, r3, #4
 80066ec:	60fa      	str	r2, [r7, #12]
 80066ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f2:	ee17 2a90 	vmov	r2, s15
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e028      	b.n	800674c <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 80066fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80066fe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800670a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	edd7 7a01 	vldr	s15, [r7, #4]
 800671e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006734:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800676c <ComputeTriangleWave+0x134>
 8006738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1d1a      	adds	r2, r3, #4
 8006740:	60fa      	str	r2, [r7, #12]
 8006742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006746:	ee17 2a90 	vmov	r2, s15
 800674a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	f4ff af78 	bcc.w	800664c <ComputeTriangleWave+0x14>
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	44fff000 	.word	0x44fff000

08006770 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e008      	b.n	8006792 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1d1a      	adds	r2, r3, #4
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800678a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d3f2      	bcc.n	8006780 <ComputeNullWave+0x10>
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d044      	beq.n	8006848 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c4:	7e1b      	ldrb	r3, [r3, #24]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d844      	bhi.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067fb 	.word	0x080067fb
 80067d8:	08006815 	.word	0x08006815
 80067dc:	0800682f 	.word	0x0800682f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80067ea:	eeb0 0a67 	vmov.f32	s0, s15
 80067ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80067f2:	6838      	ldr	r0, [r7, #0]
 80067f4:	f7ff fe20 	bl	8006438 <ComputeSineWave>
			break;
 80067f8:	e02c      	b.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006800:	edd3 7a08 	vldr	s15, [r3, #32]
 8006804:	eeb0 0a67 	vmov.f32	s0, s15
 8006808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800680c:	6838      	ldr	r0, [r7, #0]
 800680e:	f7ff fe65 	bl	80064dc <ComputeSquareWave>
			break;
 8006812:	e01f      	b.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800681a:	edd3 7a08 	vldr	s15, [r3, #32]
 800681e:	eeb0 0a67 	vmov.f32	s0, s15
 8006822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f7ff fe9c 	bl	8006564 <ComputeSawWave>
			break;
 800682c:	e012      	b.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006834:	edd3 7a08 	vldr	s15, [r3, #32]
 8006838:	eeb0 0a67 	vmov.f32	s0, s15
 800683c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f7ff fef9 	bl	8006638 <ComputeTriangleWave>
			break;
 8006846:	e005      	b.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f7ff ff8f 	bl	8006770 <ComputeNullWave>
	}
}
 8006852:	e7ff      	b.n	8006854 <VibeCheckWaveGen_RecomputeWave+0xac>
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687a:	461a      	mov	r2, r3
 800687c:	4b44      	ldr	r3, [pc, #272]	@ (8006990 <VibeCheckWaveGen_Init+0x134>)
 800687e:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006886:	461a      	mov	r2, r3
 8006888:	4b42      	ldr	r3, [pc, #264]	@ (8006994 <VibeCheckWaveGen_Init+0x138>)
 800688a:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006892:	2200      	movs	r2, #0
 8006894:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689c:	461a      	mov	r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a8:	461a      	mov	r2, r3
 80068aa:	2300      	movs	r3, #0
 80068ac:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	220b      	movs	r2, #11
 800690a:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006912:	edd3 7a07 	vldr	s15, [r3, #28]
 8006916:	eeb0 0a67 	vmov.f32	s0, s15
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f920 	bl	8006b60 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3308      	adds	r3, #8
 8006924:	4619      	mov	r1, r3
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff3e 	bl	80067a8 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006932:	4619      	mov	r1, r3
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ff37 	bl	80067a8 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6858      	ldr	r0, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f103 0208 	add.w	r2, r3, #8
 8006944:	2300      	movs	r3, #0
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800694c:	2100      	movs	r1, #0
 800694e:	f002 faed 	bl	8008f2c <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6858      	ldr	r0, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f103 0208 	add.w	r2, r3, #8
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006964:	2110      	movs	r1, #16
 8006966:	f002 fae1 	bl	8008f2c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f00a ff2e 	bl	80117d0 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8006974:	2200      	movs	r2, #0
 8006976:	2108      	movs	r1, #8
 8006978:	4807      	ldr	r0, [pc, #28]	@ (8006998 <VibeCheckWaveGen_Init+0x13c>)
 800697a:	f005 f801 	bl	800b980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 800697e:	2200      	movs	r2, #0
 8006980:	2102      	movs	r1, #2
 8006982:	4805      	ldr	r0, [pc, #20]	@ (8006998 <VibeCheckWaveGen_Init+0x13c>)
 8006984:	f004 fffc 	bl	800b980 <HAL_GPIO_WritePin>
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	43dc0000 	.word	0x43dc0000
 8006994:	3a83126f 	.word	0x3a83126f
 8006998:	58020000 	.word	0x58020000

0800699c <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 80069a4:	f000 fd74 	bl	8007490 <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2bfa      	cmp	r3, #250	@ 0xfa
 80069b8:	d939      	bls.n	8006a2e <VibeCheckWaveGen_Update+0x92>
 80069ba:	2104      	movs	r1, #4
 80069bc:	4843      	ldr	r0, [pc, #268]	@ (8006acc <VibeCheckWaveGen_Update+0x130>)
 80069be:	f004 ffc7 	bl	800b950 <HAL_GPIO_ReadPin>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d032      	beq.n	8006a2e <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069da:	461a      	mov	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 80069e0:	2200      	movs	r2, #0
 80069e2:	2108      	movs	r1, #8
 80069e4:	4839      	ldr	r0, [pc, #228]	@ (8006acc <VibeCheckWaveGen_Update+0x130>)
 80069e6:	f004 ffcb 	bl	800b980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 80069ea:	2200      	movs	r2, #0
 80069ec:	2102      	movs	r1, #2
 80069ee:	4837      	ldr	r0, [pc, #220]	@ (8006acc <VibeCheckWaveGen_Update+0x130>)
 80069f0:	f004 ffc6 	bl	800b980 <HAL_GPIO_WritePin>
 80069f4:	e00f      	b.n	8006a16 <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069fc:	461a      	mov	r2, r3
 80069fe:	2301      	movs	r3, #1
 8006a00:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8006a02:	2201      	movs	r2, #1
 8006a04:	2108      	movs	r1, #8
 8006a06:	4831      	ldr	r0, [pc, #196]	@ (8006acc <VibeCheckWaveGen_Update+0x130>)
 8006a08:	f004 ffba 	bl	800b980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	2102      	movs	r1, #2
 8006a10:	482e      	ldr	r0, [pc, #184]	@ (8006acc <VibeCheckWaveGen_Update+0x130>)
 8006a12:	f004 ffb5 	bl	800b980 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2301      	movs	r3, #1
 8006a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff feb1 	bl	80067a8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00c      	beq.n	8006a78 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe9e 	bl	80067a8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006a7e:	4413      	add	r3, r2
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fb fbcc 	bl	8002224 <Sequencer_Update>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d017      	beq.n	8006ac2 <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <VibeCheckWaveGen_Update+0x110>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad0 <VibeCheckWaveGen_Update+0x134>)
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	edd3 7a00 	vldr	s15, [r3]
 8006aaa:	e005      	b.n	8006ab8 <VibeCheckWaveGen_Update+0x11c>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <VibeCheckWaveGen_Update+0x138>)
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	edd3 7a00 	vldr	s15, [r3]
 8006ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f84f 	bl	8006b60 <VibeCheckWaveGen_SetFrequency>
	}

}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	58020000 	.word	0x58020000
 8006ad0:	0801e258 	.word	0x0801e258
 8006ad4:	0801e13c 	.word	0x0801e13c

08006ad8 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d111      	bne.n	8006b10 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af2:	461a      	mov	r2, r3
 8006af4:	2301      	movs	r3, #1
 8006af6:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afe:	461a      	mov	r2, r3
 8006b00:	2301      	movs	r3, #1
 8006b02:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	60d3      	str	r3, [r2, #12]
	}

}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d011      	beq.n	8006b54 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b36:	461a      	mov	r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b42:	461a      	mov	r2, r3
 8006b44:	2301      	movs	r3, #1
 8006b46:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4e:	461a      	mov	r2, r3
 8006b50:	2301      	movs	r3, #1
 8006b52:	60d3      	str	r3, [r2, #12]
	}
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8006b6c:	edd7 7a00 	vldr	s15, [r7]
 8006b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	d502      	bpl.n	8006b80 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006b80:	edd7 7a00 	vldr	s15, [r7]
 8006b84:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006c00 <VibeCheckWaveGen_SetFrequency+0xa0>
 8006b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b90:	dd01      	ble.n	8006b96 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8006b92:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <VibeCheckWaveGen_SetFrequency+0xa4>)
 8006b94:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8006b96:	edd7 7a00 	vldr	s15, [r7]
 8006b9a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006c08 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006b9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ba2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006c0c <VibeCheckWaveGen_SetFrequency+0xac>
 8006ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb6:	ee17 3a90 	vmov	r3, s15
 8006bba:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bce:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006c0c <VibeCheckWaveGen_SetFrequency+0xac>
 8006bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8006c08 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be4:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	46989600 	.word	0x46989600
 8006c04:	46989600 	.word	0x46989600
 8006c08:	44000000 	.word	0x44000000
 8006c0c:	4b989680 	.word	0x4b989680

08006c10 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	ee07 3a90 	vmov	s15, r3
}
 8006c24:	eeb0 0a67 	vmov.f32	s0, s15
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8006c3e:	edd7 7a00 	vldr	s15, [r7]
 8006c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	d502      	bpl.n	8006c52 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 8006c52:	edd7 7a00 	vldr	s15, [r7]
 8006c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	dd02      	ble.n	8006c6a <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8006c64:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006c68:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c70:	461a      	mov	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2301      	movs	r3, #1
 8006c80:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	60d3      	str	r3, [r2, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	ee07 3a90 	vmov	s15, r3
}
 8006cae:	eeb0 0a67 	vmov.f32	s0, s15
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cce:	461a      	mov	r2, r3
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2301      	movs	r3, #1
 8006cde:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2301      	movs	r3, #1
 8006cea:	60d3      	str	r3, [r2, #12]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d06:	7e1b      	ldrb	r3, [r3, #24]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	601a      	str	r2, [r3, #0]
		return 1;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d6e:	461a      	mov	r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6113      	str	r3, [r2, #16]
	}
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da6:	461a      	mov	r2, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db2:	461a      	mov	r2, r3
 8006db4:	2301      	movs	r3, #1
 8006db6:	6153      	str	r3, [r2, #20]
	}
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fb f9f3 	bl	80021c0 <Sequencer_Init>
	if (wavegen->demo_num)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006dec:	4418      	add	r0, r3
 8006dee:	2301      	movs	r3, #1
 8006df0:	221a      	movs	r2, #26
 8006df2:	4916      	ldr	r1, [pc, #88]	@ (8006e4c <VibeCheckWaveGen_StartDemo+0x88>)
 8006df4:	f7fb fa00 	bl	80021f8 <Sequencer_SetSequence>
 8006df8:	e008      	b.n	8006e0c <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006e00:	4418      	add	r0, r3
 8006e02:	2301      	movs	r3, #1
 8006e04:	222d      	movs	r2, #45	@ 0x2d
 8006e06:	4912      	ldr	r1, [pc, #72]	@ (8006e50 <VibeCheckWaveGen_StartDemo+0x8c>)
 8006e08:	f7fb f9f6 	bl	80021f8 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e26:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f241 0438 	movw	r4, #4152	@ 0x1038
 8006e2e:	441c      	add	r4, r3
 8006e30:	f000 fb2e 	bl	8007490 <HAL_GetTick>
 8006e34:	4603      	mov	r3, r0
 8006e36:	4619      	mov	r1, r3
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7fb fa35 	bl	80022a8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe4a 	bl	8006ad8 <VibeCheckWaveGen_Start>
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd90      	pop	{r4, r7, pc}
 8006e4c:	0801e0d4 	.word	0x0801e0d4
 8006e50:	0801e1a4 	.word	0x0801e1a4

08006e54 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff fe5d 	bl	8006b1c <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fb fa30 	bl	80022d0 <Sequencer_Stop>
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b094      	sub	sp, #80	@ 0x50
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006e82:	f107 0310 	add.w	r3, r7, #16
 8006e86:	2240      	movs	r2, #64	@ 0x40
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6838      	ldr	r0, [r7, #0]
 8006e8c:	f7fe fde8 	bl	8005a60 <VibeCheckShell_GetNextString>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80b0 	beq.w	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	4959      	ldr	r1, [pc, #356]	@ (8007004 <VibeCheckWaveGenCMD_Set+0x18c>)
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 fa36 	bl	8000310 <strcmp>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d119      	bne.n	8006ede <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6838      	ldr	r0, [r7, #0]
 8006eb2:	f7fe fe69 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 809d 	beq.w	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fe4a 	bl	8006b60 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006ecc:	494e      	ldr	r1, [pc, #312]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006ece:	6838      	ldr	r0, [r7, #0]
 8006ed0:	f7fe fee6 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006ed4:	6838      	ldr	r0, [r7, #0]
 8006ed6:	f7fe ff63 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e08d      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006ede:	f107 0310 	add.w	r3, r7, #16
 8006ee2:	494a      	ldr	r1, [pc, #296]	@ (800700c <VibeCheckWaveGenCMD_Set+0x194>)
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7f9 fa13 	bl	8000310 <strcmp>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d118      	bne.n	8006f22 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6838      	ldr	r0, [r7, #0]
 8006ef8:	f7fe fe46 	bl	8005b88 <VibeCheckShell_GetNextFloat>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d07a      	beq.n	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8006f02:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f06:	eeb0 0a67 	vmov.f32	s0, s15
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fe91 	bl	8006c32 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006f10:	493d      	ldr	r1, [pc, #244]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f12:	6838      	ldr	r0, [r7, #0]
 8006f14:	f7fe fec4 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006f18:	6838      	ldr	r0, [r7, #0]
 8006f1a:	f7fe ff41 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e06b      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8006f22:	f107 0310 	add.w	r3, r7, #16
 8006f26:	493a      	ldr	r1, [pc, #232]	@ (8007010 <VibeCheckWaveGenCMD_Set+0x198>)
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7f9 f9f1 	bl	8000310 <strcmp>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d161      	bne.n	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006f34:	f107 0310 	add.w	r3, r7, #16
 8006f38:	2240      	movs	r2, #64	@ 0x40
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6838      	ldr	r0, [r7, #0]
 8006f3e:	f7fe fd8f 	bl	8005a60 <VibeCheckShell_GetNextString>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d057      	beq.n	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8006f48:	f107 0310 	add.w	r3, r7, #16
 8006f4c:	4931      	ldr	r1, [pc, #196]	@ (8007014 <VibeCheckWaveGenCMD_Set+0x19c>)
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 f9de 	bl	8000310 <strcmp>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fead 	bl	8006cbc <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006f62:	4929      	ldr	r1, [pc, #164]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f64:	6838      	ldr	r0, [r7, #0]
 8006f66:	f7fe fe9b 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f7fe ff18 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e042      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8006f74:	f107 0310 	add.w	r3, r7, #16
 8006f78:	4927      	ldr	r1, [pc, #156]	@ (8007018 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7f9 f9c8 	bl	8000310 <strcmp>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10c      	bne.n	8006fa0 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8006f86:	2101      	movs	r1, #1
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fe97 	bl	8006cbc <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006f8e:	491e      	ldr	r1, [pc, #120]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f90:	6838      	ldr	r0, [r7, #0]
 8006f92:	f7fe fe85 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006f96:	6838      	ldr	r0, [r7, #0]
 8006f98:	f7fe ff02 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e02c      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006fa0:	f107 0310 	add.w	r3, r7, #16
 8006fa4:	491d      	ldr	r1, [pc, #116]	@ (800701c <VibeCheckWaveGenCMD_Set+0x1a4>)
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 f9b2 	bl	8000310 <strcmp>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fe81 	bl	8006cbc <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fba:	4913      	ldr	r1, [pc, #76]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fbc:	6838      	ldr	r0, [r7, #0]
 8006fbe:	f7fe fe6f 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f7fe feec 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e016      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	4913      	ldr	r1, [pc, #76]	@ (8007020 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7f9 f99c 	bl	8000310 <strcmp>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8006fde:	2103      	movs	r1, #3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fe6b 	bl	8006cbc <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fe6:	4908      	ldr	r1, [pc, #32]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7fe fe59 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006fee:	6838      	ldr	r0, [r7, #0]
 8006ff0:	f7fe fed6 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3750      	adds	r7, #80	@ 0x50
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	0801d958 	.word	0x0801d958
 8007008:	0801d964 	.word	0x0801d964
 800700c:	0801d968 	.word	0x0801d968
 8007010:	0801d974 	.word	0x0801d974
 8007014:	0801d980 	.word	0x0801d980
 8007018:	0801d988 	.word	0x0801d988
 800701c:	0801d990 	.word	0x0801d990
 8007020:	0801d994 	.word	0x0801d994

08007024 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b092      	sub	sp, #72	@ 0x48
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800702e:	f107 0308 	add.w	r3, r7, #8
 8007032:	2240      	movs	r2, #64	@ 0x40
 8007034:	4619      	mov	r1, r3
 8007036:	6838      	ldr	r0, [r7, #0]
 8007038:	f7fe fd12 	bl	8005a60 <VibeCheckShell_GetNextString>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d077      	beq.n	8007132 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8007042:	f107 0308 	add.w	r3, r7, #8
 8007046:	493d      	ldr	r1, [pc, #244]	@ (800713c <VibeCheckWaveGenCMD_Get+0x118>)
 8007048:	4618      	mov	r0, r3
 800704a:	f7f9 f961 	bl	8000310 <strcmp>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d115      	bne.n	8007080 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007054:	493a      	ldr	r1, [pc, #232]	@ (8007140 <VibeCheckWaveGenCMD_Get+0x11c>)
 8007056:	6838      	ldr	r0, [r7, #0]
 8007058:	f7fe fe22 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800705c:	6838      	ldr	r0, [r7, #0]
 800705e:	f7fe fe91 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fdd4 	bl	8006c10 <VibeCheckWaveGen_GetFrequency>
 8007068:	eef0 7a40 	vmov.f32	s15, s0
 800706c:	eeb0 0a67 	vmov.f32	s0, s15
 8007070:	6838      	ldr	r0, [r7, #0]
 8007072:	f7fe fe69 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	f7fe fe92 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800707c:	2301      	movs	r3, #1
 800707e:	e059      	b.n	8007134 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	492f      	ldr	r1, [pc, #188]	@ (8007144 <VibeCheckWaveGenCMD_Get+0x120>)
 8007086:	4618      	mov	r0, r3
 8007088:	f7f9 f942 	bl	8000310 <strcmp>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d115      	bne.n	80070be <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007092:	492b      	ldr	r1, [pc, #172]	@ (8007140 <VibeCheckWaveGenCMD_Get+0x11c>)
 8007094:	6838      	ldr	r0, [r7, #0]
 8007096:	f7fe fe03 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800709a:	6838      	ldr	r0, [r7, #0]
 800709c:	f7fe fe72 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fdfa 	bl	8006c9a <VibeCheckWaveGen_GetAmplitude>
 80070a6:	eef0 7a40 	vmov.f32	s15, s0
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f7fe fe4a 	bl	8005d48 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80070b4:	6838      	ldr	r0, [r7, #0]
 80070b6:	f7fe fe73 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e03a      	b.n	8007134 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	4921      	ldr	r1, [pc, #132]	@ (8007148 <VibeCheckWaveGenCMD_Get+0x124>)
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7f9 f923 	bl	8000310 <strcmp>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d130      	bne.n	8007132 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80070d0:	491b      	ldr	r1, [pc, #108]	@ (8007140 <VibeCheckWaveGenCMD_Get+0x11c>)
 80070d2:	6838      	ldr	r0, [r7, #0]
 80070d4:	f7fe fde4 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80070d8:	6838      	ldr	r0, [r7, #0]
 80070da:	f7fe fe53 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fe0a 	bl	8006cf8 <VibeCheckWaveGen_GetWaveform>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d81e      	bhi.n	8007128 <VibeCheckWaveGenCMD_Get+0x104>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <VibeCheckWaveGenCMD_Get+0xcc>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	0800710b 	.word	0x0800710b
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800711f 	.word	0x0800711f
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8007100:	4912      	ldr	r1, [pc, #72]	@ (800714c <VibeCheckWaveGenCMD_Get+0x128>)
 8007102:	6838      	ldr	r0, [r7, #0]
 8007104:	f7fe fdcc 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				break;
 8007108:	e00e      	b.n	8007128 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 800710a:	4911      	ldr	r1, [pc, #68]	@ (8007150 <VibeCheckWaveGenCMD_Get+0x12c>)
 800710c:	6838      	ldr	r0, [r7, #0]
 800710e:	f7fe fdc7 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				break;
 8007112:	e009      	b.n	8007128 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8007114:	490f      	ldr	r1, [pc, #60]	@ (8007154 <VibeCheckWaveGenCMD_Get+0x130>)
 8007116:	6838      	ldr	r0, [r7, #0]
 8007118:	f7fe fdc2 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				break;
 800711c:	e004      	b.n	8007128 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 800711e:	490e      	ldr	r1, [pc, #56]	@ (8007158 <VibeCheckWaveGenCMD_Get+0x134>)
 8007120:	6838      	ldr	r0, [r7, #0]
 8007122:	f7fe fdbd 	bl	8005ca0 <VibeCheckShell_PutOutputString>
				break;
 8007126:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007128:	6838      	ldr	r0, [r7, #0]
 800712a:	f7fe fe39 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3748      	adds	r7, #72	@ 0x48
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	0801d958 	.word	0x0801d958
 8007140:	0801d964 	.word	0x0801d964
 8007144:	0801d968 	.word	0x0801d968
 8007148:	0801d974 	.word	0x0801d974
 800714c:	0801d980 	.word	0x0801d980
 8007150:	0801d988 	.word	0x0801d988
 8007154:	0801d990 	.word	0x0801d990
 8007158:	0801d994 	.word	0x0801d994

0800715c <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b094      	sub	sp, #80	@ 0x50
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	2240      	movs	r2, #64	@ 0x40
 8007170:	4619      	mov	r1, r3
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f7fe fc74 	bl	8005a60 <VibeCheckShell_GetNextString>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 808b 	beq.w	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4946      	ldr	r1, [pc, #280]	@ (80072a0 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 f8c2 	bl	8000310 <strcmp>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8007192:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007194:	f7ff fca0 	bl	8006ad8 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007198:	4942      	ldr	r1, [pc, #264]	@ (80072a4 <VibeCheckWaveGenCMD_Execute+0x148>)
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	f7fe fd80 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80071a0:	6838      	ldr	r0, [r7, #0]
 80071a2:	f7fe fdfd 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e076      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	493e      	ldr	r1, [pc, #248]	@ (80072a8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7f9 f8ad 	bl	8000310 <strcmp>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80071bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071be:	f7ff fcad 	bl	8006b1c <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80071c2:	4938      	ldr	r1, [pc, #224]	@ (80072a4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80071c4:	6838      	ldr	r0, [r7, #0]
 80071c6:	f7fe fd6b 	bl	8005ca0 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80071ca:	6838      	ldr	r0, [r7, #0]
 80071cc:	f7fe fde8 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e061      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4934      	ldr	r1, [pc, #208]	@ (80072ac <VibeCheckWaveGenCMD_Execute+0x150>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 f898 	bl	8000310 <strcmp>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d108      	bne.n	80071f8 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071ea:	f7ff fe45 	bl	8006e78 <VibeCheckWaveGenCMD_Set>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d050      	beq.n	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e04f      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 80071f8:	f107 030c 	add.w	r3, r7, #12
 80071fc:	492c      	ldr	r1, [pc, #176]	@ (80072b0 <VibeCheckWaveGenCMD_Execute+0x154>)
 80071fe:	4618      	mov	r0, r3
 8007200:	f7f9 f886 	bl	8000310 <strcmp>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d108      	bne.n	800721c <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800720e:	f7ff ff09 	bl	8007024 <VibeCheckWaveGenCMD_Get>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d03e      	beq.n	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007218:	2301      	movs	r3, #1
 800721a:	e03d      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	4924      	ldr	r1, [pc, #144]	@ (80072b4 <VibeCheckWaveGenCMD_Execute+0x158>)
 8007222:	4618      	mov	r0, r3
 8007224:	f7f9 f874 	bl	8000310 <strcmp>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d133      	bne.n	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	2240      	movs	r2, #64	@ 0x40
 8007234:	4619      	mov	r1, r3
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f7fe fc12 	bl	8005a60 <VibeCheckShell_GetNextString>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d029      	beq.n	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4916      	ldr	r1, [pc, #88]	@ (80072a0 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007248:	4618      	mov	r0, r3
 800724a:	f7f9 f861 	bl	8000310 <strcmp>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10b      	bne.n	800726c <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8007254:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007256:	f7ff fdb5 	bl	8006dc4 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 800725a:	4912      	ldr	r1, [pc, #72]	@ (80072a4 <VibeCheckWaveGenCMD_Execute+0x148>)
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f7fe fd1f 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007262:	6838      	ldr	r0, [r7, #0]
 8007264:	f7fe fd9c 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007268:	2301      	movs	r3, #1
 800726a:	e015      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 800726c:	f107 030c 	add.w	r3, r7, #12
 8007270:	490d      	ldr	r1, [pc, #52]	@ (80072a8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7f9 f84c 	bl	8000310 <strcmp>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 800727e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007280:	f7ff fde8 	bl	8006e54 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007284:	4907      	ldr	r1, [pc, #28]	@ (80072a4 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007286:	6838      	ldr	r0, [r7, #0]
 8007288:	f7fe fd0a 	bl	8005ca0 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800728c:	6838      	ldr	r0, [r7, #0]
 800728e:	f7fe fd87 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3750      	adds	r7, #80	@ 0x50
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	0801d9a0 	.word	0x0801d9a0
 80072a4:	0801d964 	.word	0x0801d964
 80072a8:	0801d9a8 	.word	0x0801d9a8
 80072ac:	0801d9b0 	.word	0x0801d9b0
 80072b0:	0801d9b4 	.word	0x0801d9b4
 80072b4:	0801d9b8 	.word	0x0801d9b8

080072b8 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fd21 	bl	8006d14 <VibeCheckWaveGen_WasMuteButtonPressed>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01e      	beq.n	8007316 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 80072d8:	4911      	ldr	r1, [pc, #68]	@ (8007320 <VibeCheckWaveGenSender_Execute+0x68>)
 80072da:	6838      	ldr	r0, [r7, #0]
 80072dc:	f7fe fce0 	bl	8005ca0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80072e0:	6838      	ldr	r0, [r7, #0]
 80072e2:	f7fe fd4f 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 80072e6:	490f      	ldr	r1, [pc, #60]	@ (8007324 <VibeCheckWaveGenSender_Execute+0x6c>)
 80072e8:	6838      	ldr	r0, [r7, #0]
 80072ea:	f7fe fcd9 	bl	8005ca0 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80072ee:	6838      	ldr	r0, [r7, #0]
 80072f0:	f7fe fd48 	bl	8005d84 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 80072fa:	490b      	ldr	r1, [pc, #44]	@ (8007328 <VibeCheckWaveGenSender_Execute+0x70>)
 80072fc:	6838      	ldr	r0, [r7, #0]
 80072fe:	f7fe fccf 	bl	8005ca0 <VibeCheckShell_PutOutputString>
 8007302:	e003      	b.n	800730c <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8007304:	4909      	ldr	r1, [pc, #36]	@ (800732c <VibeCheckWaveGenSender_Execute+0x74>)
 8007306:	6838      	ldr	r0, [r7, #0]
 8007308:	f7fe fcca 	bl	8005ca0 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 800730c:	6838      	ldr	r0, [r7, #0]
 800730e:	f7fe fd47 	bl	8005da0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	0801d9c0 	.word	0x0801d9c0
 8007324:	0801d9c8 	.word	0x0801d9c8
 8007328:	0801d9d0 	.word	0x0801d9d0
 800732c:	0801d9d8 	.word	0x0801d9d8

08007330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007334:	f7fb fdbe 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007338:	480c      	ldr	r0, [pc, #48]	@ (800736c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800733a:	490d      	ldr	r1, [pc, #52]	@ (8007370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800733c:	4a0d      	ldr	r2, [pc, #52]	@ (8007374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800733e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007340:	e002      	b.n	8007348 <LoopCopyDataInit>

08007342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007346:	3304      	adds	r3, #4

08007348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800734a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800734c:	d3f9      	bcc.n	8007342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800734e:	4a0a      	ldr	r2, [pc, #40]	@ (8007378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007350:	4c0a      	ldr	r4, [pc, #40]	@ (800737c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007354:	e001      	b.n	800735a <LoopFillZerobss>

08007356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007358:	3204      	adds	r2, #4

0800735a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800735a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800735c:	d3fb      	bcc.n	8007356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800735e:	f012 ff13 	bl	801a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007362:	f7f9 ffd3 	bl	800130c <main>
  bx  lr
 8007366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007368:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800736c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007370:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 8007374:	0801ea88 	.word	0x0801ea88
  ldr r2, =_sbss
 8007378:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 800737c:	2401ce44 	.word	0x2401ce44

08007380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007380:	e7fe      	b.n	8007380 <ADC3_IRQHandler>
	...

08007384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800738a:	2003      	movs	r0, #3
 800738c:	f001 fcf4 	bl	8008d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007390:	f006 fcd6 	bl	800dd40 <HAL_RCC_GetSysClockFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <HAL_Init+0x68>)
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	4913      	ldr	r1, [pc, #76]	@ (80073f0 <HAL_Init+0x6c>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ae:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <HAL_Init+0x68>)
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <HAL_Init+0x6c>)
 80073b8:	5cd3      	ldrb	r3, [r2, r3]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	4a0b      	ldr	r2, [pc, #44]	@ (80073f4 <HAL_Init+0x70>)
 80073c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073c8:	4a0b      	ldr	r2, [pc, #44]	@ (80073f8 <HAL_Init+0x74>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073ce:	2002      	movs	r0, #2
 80073d0:	f000 f814 	bl	80073fc <HAL_InitTick>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e002      	b.n	80073e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80073de:	f7fa ff91 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	58024400 	.word	0x58024400
 80073f0:	0801da14 	.word	0x0801da14
 80073f4:	24000004 	.word	0x24000004
 80073f8:	24000000 	.word	0x24000000

080073fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007404:	4b15      	ldr	r3, [pc, #84]	@ (800745c <HAL_InitTick+0x60>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e021      	b.n	8007454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007410:	4b13      	ldr	r3, [pc, #76]	@ (8007460 <HAL_InitTick+0x64>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b11      	ldr	r3, [pc, #68]	@ (800745c <HAL_InitTick+0x60>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800741e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fcd9 	bl	8008dde <HAL_SYSTICK_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e00e      	b.n	8007454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d80a      	bhi.n	8007452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800743c:	2200      	movs	r2, #0
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	f001 fca3 	bl	8008d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007448:	4a06      	ldr	r2, [pc, #24]	@ (8007464 <HAL_InitTick+0x68>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	2400003c 	.word	0x2400003c
 8007460:	24000000 	.word	0x24000000
 8007464:	24000038 	.word	0x24000038

08007468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <HAL_IncTick+0x20>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	4b06      	ldr	r3, [pc, #24]	@ (800748c <HAL_IncTick+0x24>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4413      	add	r3, r2
 8007478:	4a04      	ldr	r2, [pc, #16]	@ (800748c <HAL_IncTick+0x24>)
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	2400003c 	.word	0x2400003c
 800748c:	24013910 	.word	0x24013910

08007490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return uwTick;
 8007494:	4b03      	ldr	r3, [pc, #12]	@ (80074a4 <HAL_GetTick+0x14>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	24013910 	.word	0x24013910

080074a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074b0:	f7ff ffee 	bl	8007490 <HAL_GetTick>
 80074b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d005      	beq.n	80074ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <HAL_Delay+0x44>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074ce:	bf00      	nop
 80074d0:	f7ff ffde 	bl	8007490 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d8f7      	bhi.n	80074d0 <HAL_Delay+0x28>
  {
  }
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	2400003c 	.word	0x2400003c

080074f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3360      	adds	r3, #96	@ 0x60
 800756a:	461a      	mov	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a10      	ldr	r2, [pc, #64]	@ (80075b8 <LL_ADC_SetOffset+0x60>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d10b      	bne.n	8007594 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	4313      	orrs	r3, r2
 800758a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007592:	e00b      	b.n	80075ac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	430b      	orrs	r3, r1
 80075a6:	431a      	orrs	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	601a      	str	r2, [r3, #0]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	58026000 	.word	0x58026000

080075bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3360      	adds	r3, #96	@ 0x60
 80075ca:	461a      	mov	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	611a      	str	r2, [r3, #16]
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a0c      	ldr	r2, [pc, #48]	@ (800765c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3360      	adds	r3, #96	@ 0x60
 8007634:	461a      	mov	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	431a      	orrs	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	601a      	str	r2, [r3, #0]
  }
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	58026000 	.word	0x58026000

08007660 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a0c      	ldr	r2, [pc, #48]	@ (80076a0 <LL_ADC_SetOffsetSaturation+0x40>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10e      	bne.n	8007692 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3360      	adds	r3, #96	@ 0x60
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	431a      	orrs	r2, r3
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	58026000 	.word	0x58026000

080076a4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a0c      	ldr	r2, [pc, #48]	@ (80076e4 <LL_ADC_SetOffsetSign+0x40>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d10e      	bne.n	80076d6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3360      	adds	r3, #96	@ 0x60
 80076bc:	461a      	mov	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	58026000 	.word	0x58026000

080076e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3360      	adds	r3, #96	@ 0x60
 80076f8:	461a      	mov	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a0c      	ldr	r2, [pc, #48]	@ (8007738 <LL_ADC_SetOffsetState+0x50>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d108      	bne.n	800771c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	431a      	orrs	r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800771a:	e007      	b.n	800772c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	431a      	orrs	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	601a      	str	r2, [r3, #0]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	58026000 	.word	0x58026000

0800773c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3330      	adds	r3, #48	@ 0x30
 800774c:	461a      	mov	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	f003 030c 	and.w	r3, r3, #12
 8007758:	4413      	add	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	211f      	movs	r1, #31
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	43db      	mvns	r3, r3
 800776e:	401a      	ands	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0e9b      	lsrs	r3, r3, #26
 8007774:	f003 011f 	and.w	r1, r3, #31
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	431a      	orrs	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3314      	adds	r3, #20
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	0e5b      	lsrs	r3, r3, #25
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	4413      	add	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	0d1b      	lsrs	r3, r3, #20
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	2107      	movs	r1, #7
 80077c2:	fa01 f303 	lsl.w	r3, r1, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	401a      	ands	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	431a      	orrs	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
	...

080077ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007864 <LL_ADC_SetChannelSingleDiff+0x78>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d115      	bne.n	800782c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0318 	and.w	r3, r3, #24
 8007816:	4914      	ldr	r1, [pc, #80]	@ (8007868 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007818:	40d9      	lsrs	r1, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	400b      	ands	r3, r1
 800781e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007822:	431a      	orrs	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800782a:	e014      	b.n	8007856 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	43db      	mvns	r3, r3
 800783a:	401a      	ands	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f003 0318 	and.w	r3, r3, #24
 8007842:	4909      	ldr	r1, [pc, #36]	@ (8007868 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007844:	40d9      	lsrs	r1, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	400b      	ands	r3, r1
 800784a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784e:	431a      	orrs	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	58026000 	.word	0x58026000
 8007868:	000fffff 	.word	0x000fffff

0800786c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <LL_ADC_DisableDeepPowerDown+0x20>)
 800787a:	4013      	ands	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6093      	str	r3, [r2, #8]
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	5fffffc0 	.word	0x5fffffc0

08007890 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a4:	d101      	bne.n	80078aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <LL_ADC_EnableInternalRegulator+0x24>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	6fffffc0 	.word	0x6fffffc0

080078e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f4:	d101      	bne.n	80078fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <LL_ADC_IsEnabled+0x18>
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <LL_ADC_IsEnabled+0x1a>
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b04      	cmp	r3, #4
 8007940:	d101      	bne.n	8007946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b08      	cmp	r3, #8
 8007966:	d101      	bne.n	800796c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800797c:	b590      	push	{r4, r7, lr}
 800797e:	b089      	sub	sp, #36	@ 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007988:	2300      	movs	r3, #0
 800798a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e1ee      	b.n	8007d74 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fa fcc9 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff67 	bl	8007890 <LL_ADC_IsDeepPowerDownEnabled>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ff4d 	bl	800786c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff ff82 	bl	80078e0 <LL_ADC_IsInternalRegulatorEnabled>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d114      	bne.n	8007a0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff ff66 	bl	80078b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079ec:	4b8e      	ldr	r3, [pc, #568]	@ (8007c28 <HAL_ADC_Init+0x2ac>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	099b      	lsrs	r3, r3, #6
 80079f2:	4a8e      	ldr	r2, [pc, #568]	@ (8007c2c <HAL_ADC_Init+0x2b0>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	099b      	lsrs	r3, r3, #6
 80079fa:	3301      	adds	r3, #1
 80079fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80079fe:	e002      	b.n	8007a06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f9      	bne.n	8007a00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ff65 	bl	80078e0 <LL_ADC_IsInternalRegulatorEnabled>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10d      	bne.n	8007a38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a20:	f043 0210 	orr.w	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a2c:	f043 0201 	orr.w	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff ff76 	bl	800792e <LL_ADC_REG_IsConversionOngoing>
 8007a42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8188 	bne.w	8007d62 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 8184 	bne.w	8007d62 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007a62:	f043 0202 	orr.w	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ff4a 	bl	8007908 <LL_ADC_IsEnabled>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d136      	bne.n	8007ae8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a6c      	ldr	r2, [pc, #432]	@ (8007c30 <HAL_ADC_Init+0x2b4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_ADC_Init+0x112>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a6a      	ldr	r2, [pc, #424]	@ (8007c34 <HAL_ADC_Init+0x2b8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d10e      	bne.n	8007aac <HAL_ADC_Init+0x130>
 8007a8e:	4868      	ldr	r0, [pc, #416]	@ (8007c30 <HAL_ADC_Init+0x2b4>)
 8007a90:	f7ff ff3a 	bl	8007908 <LL_ADC_IsEnabled>
 8007a94:	4604      	mov	r4, r0
 8007a96:	4867      	ldr	r0, [pc, #412]	@ (8007c34 <HAL_ADC_Init+0x2b8>)
 8007a98:	f7ff ff36 	bl	8007908 <LL_ADC_IsEnabled>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	4323      	orrs	r3, r4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	e008      	b.n	8007abe <HAL_ADC_Init+0x142>
 8007aac:	4862      	ldr	r0, [pc, #392]	@ (8007c38 <HAL_ADC_Init+0x2bc>)
 8007aae:	f7ff ff2b 	bl	8007908 <LL_ADC_IsEnabled>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d012      	beq.n	8007ae8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8007c30 <HAL_ADC_Init+0x2b4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_ADC_Init+0x15a>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a58      	ldr	r2, [pc, #352]	@ (8007c34 <HAL_ADC_Init+0x2b8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d101      	bne.n	8007ada <HAL_ADC_Init+0x15e>
 8007ad6:	4a59      	ldr	r2, [pc, #356]	@ (8007c3c <HAL_ADC_Init+0x2c0>)
 8007ad8:	e000      	b.n	8007adc <HAL_ADC_Init+0x160>
 8007ada:	4a59      	ldr	r2, [pc, #356]	@ (8007c40 <HAL_ADC_Init+0x2c4>)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7ff fd04 	bl	80074f0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a52      	ldr	r2, [pc, #328]	@ (8007c38 <HAL_ADC_Init+0x2bc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d129      	bne.n	8007b46 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7e5b      	ldrb	r3, [r3, #25]
 8007af6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007afc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007b02:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d013      	beq.n	8007b34 <HAL_ADC_Init+0x1b8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b0c      	cmp	r3, #12
 8007b12:	d00d      	beq.n	8007b30 <HAL_ADC_Init+0x1b4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b1c      	cmp	r3, #28
 8007b1a:	d007      	beq.n	8007b2c <HAL_ADC_Init+0x1b0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b18      	cmp	r3, #24
 8007b22:	d101      	bne.n	8007b28 <HAL_ADC_Init+0x1ac>
 8007b24:	2318      	movs	r3, #24
 8007b26:	e006      	b.n	8007b36 <HAL_ADC_Init+0x1ba>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e004      	b.n	8007b36 <HAL_ADC_Init+0x1ba>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	e002      	b.n	8007b36 <HAL_ADC_Init+0x1ba>
 8007b30:	2308      	movs	r3, #8
 8007b32:	e000      	b.n	8007b36 <HAL_ADC_Init+0x1ba>
 8007b34:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007b36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b40:	4313      	orrs	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	e00e      	b.n	8007b64 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7e5b      	ldrb	r3, [r3, #25]
 8007b4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007b56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b60:	4313      	orrs	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d106      	bne.n	8007b7c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	3b01      	subs	r3, #1
 8007b74:	045b      	lsls	r3, r3, #17
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a26      	ldr	r2, [pc, #152]	@ (8007c38 <HAL_ADC_Init+0x2bc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d115      	bne.n	8007bce <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	4b26      	ldr	r3, [pc, #152]	@ (8007c44 <HAL_ADC_Init+0x2c8>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	611a      	str	r2, [r3, #16]
 8007bcc:	e009      	b.n	8007be2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <HAL_ADC_Init+0x2cc>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	69b9      	ldr	r1, [r7, #24]
 8007bde:	430b      	orrs	r3, r1
 8007be0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fea1 	bl	800792e <LL_ADC_REG_IsConversionOngoing>
 8007bec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff feae 	bl	8007954 <LL_ADC_INJ_IsConversionOngoing>
 8007bf8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 808e 	bne.w	8007d1e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 808a 	bne.w	8007d1e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c38 <HAL_ADC_Init+0x2bc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d11b      	bne.n	8007c4c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7e1b      	ldrb	r3, [r3, #24]
 8007c18:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c20:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	e018      	b.n	8007c5a <HAL_ADC_Init+0x2de>
 8007c28:	24000000 	.word	0x24000000
 8007c2c:	053e2d63 	.word	0x053e2d63
 8007c30:	40022000 	.word	0x40022000
 8007c34:	40022100 	.word	0x40022100
 8007c38:	58026000 	.word	0x58026000
 8007c3c:	40022300 	.word	0x40022300
 8007c40:	58026300 	.word	0x58026300
 8007c44:	fff04007 	.word	0xfff04007
 8007c48:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7e1b      	ldrb	r3, [r3, #24]
 8007c50:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	4b46      	ldr	r3, [pc, #280]	@ (8007d7c <HAL_ADC_Init+0x400>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	69b9      	ldr	r1, [r7, #24]
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d137      	bne.n	8007ce8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a3f      	ldr	r2, [pc, #252]	@ (8007d80 <HAL_ADC_Init+0x404>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d116      	bne.n	8007cb6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d84 <HAL_ADC_Init+0x408>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c9a:	4311      	orrs	r1, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ca0:	4311      	orrs	r1, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0201 	orr.w	r2, r2, #1
 8007cb2:	611a      	str	r2, [r3, #16]
 8007cb4:	e020      	b.n	8007cf8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	4b32      	ldr	r3, [pc, #200]	@ (8007d88 <HAL_ADC_Init+0x40c>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007cc4:	3a01      	subs	r2, #1
 8007cc6:	0411      	lsls	r1, r2, #16
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ccc:	4311      	orrs	r1, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007cd2:	4311      	orrs	r1, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	611a      	str	r2, [r3, #16]
 8007ce6:	e007      	b.n	8007cf8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1b      	ldr	r2, [pc, #108]	@ (8007d80 <HAL_ADC_Init+0x404>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d002      	beq.n	8007d1e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fd67 	bl	80087ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d10c      	bne.n	8007d40 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2c:	f023 010f 	bic.w	r1, r3, #15
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	1e5a      	subs	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d3e:	e007      	b.n	8007d50 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 020f 	bic.w	r2, r2, #15
 8007d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	f043 0201 	orr.w	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007d60:	e007      	b.n	8007d72 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d66:	f043 0210 	orr.w	r2, r3, #16
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3724      	adds	r7, #36	@ 0x24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd90      	pop	{r4, r7, pc}
 8007d7c:	ffffbffc 	.word	0xffffbffc
 8007d80:	58026000 	.word	0x58026000
 8007d84:	fc00f81f 	.word	0xfc00f81f
 8007d88:	fc00f81e 	.word	0xfc00f81e

08007d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b0b9      	sub	sp, #228	@ 0xe4
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007da6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4aab      	ldr	r2, [pc, #684]	@ (800805c <HAL_ADC_ConfigChannel+0x2d0>)
 8007dae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d102      	bne.n	8007dc0 <HAL_ADC_ConfigChannel+0x34>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	f000 bcfe 	b.w	80087bc <HAL_ADC_ConfigChannel+0xa30>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fdae 	bl	800792e <LL_ADC_REG_IsConversionOngoing>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 84e2 	bne.w	800879e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	db38      	blt.n	8007e54 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a9e      	ldr	r2, [pc, #632]	@ (8008060 <HAL_ADC_ConfigChannel+0x2d4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d033      	beq.n	8007e54 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <HAL_ADC_ConfigChannel+0x7e>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	0e9b      	lsrs	r3, r3, #26
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	2201      	movs	r2, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	e01d      	b.n	8007e46 <HAL_ADC_ConfigChannel+0xba>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e16:	fa93 f3a3 	rbit	r3, r3
 8007e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007e2e:	2320      	movs	r3, #32
 8007e30:	e004      	b.n	8007e3c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8007e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e36:	fab3 f383 	clz	r3, r3
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2201      	movs	r2, #1
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	69d1      	ldr	r1, [r2, #28]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	430b      	orrs	r3, r1
 8007e52:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	6859      	ldr	r1, [r3, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	f7ff fc6b 	bl	800773c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fd5f 	bl	800792e <LL_ADC_REG_IsConversionOngoing>
 8007e70:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff fd6b 	bl	8007954 <LL_ADC_INJ_IsConversionOngoing>
 8007e7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f040 8270 	bne.w	800836c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 826b 	bne.w	800836c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6819      	ldr	r1, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7ff fc76 	bl	8007794 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a6c      	ldr	r2, [pc, #432]	@ (8008060 <HAL_ADC_ConfigChannel+0x2d4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10d      	bne.n	8007ece <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695a      	ldr	r2, [r3, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ecc:	e032      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007ece:	4b65      	ldr	r3, [pc, #404]	@ (8008064 <HAL_ADC_ConfigChannel+0x2d8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eda:	d10b      	bne.n	8007ef4 <HAL_ADC_ConfigChannel+0x168>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	e01d      	b.n	8007f30 <HAL_ADC_ConfigChannel+0x1a4>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x18e>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	089b      	lsrs	r3, r3, #2
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	e00a      	b.n	8007f30 <HAL_ADC_ConfigChannel+0x1a4>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d048      	beq.n	8007fce <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6919      	ldr	r1, [r3, #16]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f4c:	f7ff fb04 	bl	8007558 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a42      	ldr	r2, [pc, #264]	@ (8008060 <HAL_ADC_ConfigChannel+0x2d4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d119      	bne.n	8007f8e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6919      	ldr	r1, [r3, #16]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7ff fb9c 	bl	80076a4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6919      	ldr	r1, [r3, #16]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d102      	bne.n	8007f84 <HAL_ADC_ConfigChannel+0x1f8>
 8007f7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f82:	e000      	b.n	8007f86 <HAL_ADC_ConfigChannel+0x1fa>
 8007f84:	2300      	movs	r3, #0
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7ff fb6a 	bl	8007660 <LL_ADC_SetOffsetSaturation>
 8007f8c:	e1ee      	b.n	800836c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6919      	ldr	r1, [r3, #16]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d102      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x21a>
 8007fa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fa4:	e000      	b.n	8007fa8 <HAL_ADC_ConfigChannel+0x21c>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f7ff fb37 	bl	800761c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6919      	ldr	r1, [r3, #16]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	7e1b      	ldrb	r3, [r3, #24]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d102      	bne.n	8007fc4 <HAL_ADC_ConfigChannel+0x238>
 8007fbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fc2:	e000      	b.n	8007fc6 <HAL_ADC_ConfigChannel+0x23a>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7ff fb0e 	bl	80075e8 <LL_ADC_SetDataRightShift>
 8007fcc:	e1ce      	b.n	800836c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a23      	ldr	r2, [pc, #140]	@ (8008060 <HAL_ADC_ConfigChannel+0x2d4>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	f040 8181 	bne.w	80082dc <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff faeb 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <HAL_ADC_ConfigChannel+0x27a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fae0 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	0e9b      	lsrs	r3, r3, #26
 8008000:	f003 021f 	and.w	r2, r3, #31
 8008004:	e01e      	b.n	8008044 <HAL_ADC_ConfigChannel+0x2b8>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2100      	movs	r1, #0
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fad5 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8008012:	4603      	mov	r3, r0
 8008014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800801c:	fa93 f3a3 	rbit	r3, r3
 8008020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8008024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008028:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800802c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8008034:	2320      	movs	r3, #32
 8008036:	e004      	b.n	8008042 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8008038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800803c:	fab3 f383 	clz	r3, r3
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <HAL_ADC_ConfigChannel+0x2dc>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	0e9b      	lsrs	r3, r3, #26
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	e01e      	b.n	800809a <HAL_ADC_ConfigChannel+0x30e>
 800805c:	47ff0000 	.word	0x47ff0000
 8008060:	58026000 	.word	0x58026000
 8008064:	5c001000 	.word	0x5c001000
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008074:	fa93 f3a3 	rbit	r3, r3
 8008078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800807c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800808c:	2320      	movs	r3, #32
 800808e:	e004      	b.n	800809a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8008090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008094:	fab3 f383 	clz	r3, r3
 8008098:	b2db      	uxtb	r3, r3
 800809a:	429a      	cmp	r2, r3
 800809c:	d106      	bne.n	80080ac <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fb1e 	bl	80076e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2101      	movs	r1, #1
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fa82 	bl	80075bc <LL_ADC_GetOffsetChannel>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <HAL_ADC_ConfigChannel+0x34c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2101      	movs	r1, #1
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fa77 	bl	80075bc <LL_ADC_GetOffsetChannel>
 80080ce:	4603      	mov	r3, r0
 80080d0:	0e9b      	lsrs	r3, r3, #26
 80080d2:	f003 021f 	and.w	r2, r3, #31
 80080d6:	e01e      	b.n	8008116 <HAL_ADC_ConfigChannel+0x38a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff fa6c 	bl	80075bc <LL_ADC_GetOffsetChannel>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80080f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80080fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8008106:	2320      	movs	r3, #32
 8008108:	e004      	b.n	8008114 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800810a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800810e:	fab3 f383 	clz	r3, r3
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <HAL_ADC_ConfigChannel+0x3a2>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	0e9b      	lsrs	r3, r3, #26
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	e018      	b.n	8008160 <HAL_ADC_ConfigChannel+0x3d4>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008136:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800813a:	fa93 f3a3 	rbit	r3, r3
 800813e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8008142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008146:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800814a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8008152:	2320      	movs	r3, #32
 8008154:	e004      	b.n	8008160 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8008156:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800815a:	fab3 f383 	clz	r3, r3
 800815e:	b2db      	uxtb	r3, r3
 8008160:	429a      	cmp	r2, r3
 8008162:	d106      	bne.n	8008172 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2200      	movs	r2, #0
 800816a:	2101      	movs	r1, #1
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fabb 	bl	80076e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2102      	movs	r1, #2
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fa1f 	bl	80075bc <LL_ADC_GetOffsetChannel>
 800817e:	4603      	mov	r3, r0
 8008180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <HAL_ADC_ConfigChannel+0x412>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fa14 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8008194:	4603      	mov	r3, r0
 8008196:	0e9b      	lsrs	r3, r3, #26
 8008198:	f003 021f 	and.w	r2, r3, #31
 800819c:	e01e      	b.n	80081dc <HAL_ADC_ConfigChannel+0x450>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2102      	movs	r1, #2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fa09 	bl	80075bc <LL_ADC_GetOffsetChannel>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081b4:	fa93 f3a3 	rbit	r3, r3
 80081b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80081bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80081c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80081cc:	2320      	movs	r3, #32
 80081ce:	e004      	b.n	80081da <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80081d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d4:	fab3 f383 	clz	r3, r3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <HAL_ADC_ConfigChannel+0x468>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	0e9b      	lsrs	r3, r3, #26
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	e014      	b.n	800821e <HAL_ADC_ConfigChannel+0x492>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081fc:	fa93 f3a3 	rbit	r3, r3
 8008200:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008208:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008210:	2320      	movs	r3, #32
 8008212:	e004      	b.n	800821e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008214:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008218:	fab3 f383 	clz	r3, r3
 800821c:	b2db      	uxtb	r3, r3
 800821e:	429a      	cmp	r2, r3
 8008220:	d106      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	2102      	movs	r1, #2
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fa5c 	bl	80076e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2103      	movs	r1, #3
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff f9c0 	bl	80075bc <LL_ADC_GetOffsetChannel>
 800823c:	4603      	mov	r3, r0
 800823e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <HAL_ADC_ConfigChannel+0x4d0>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2103      	movs	r1, #3
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff f9b5 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8008252:	4603      	mov	r3, r0
 8008254:	0e9b      	lsrs	r3, r3, #26
 8008256:	f003 021f 	and.w	r2, r3, #31
 800825a:	e017      	b.n	800828c <HAL_ADC_ConfigChannel+0x500>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2103      	movs	r1, #3
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff f9aa 	bl	80075bc <LL_ADC_GetOffsetChannel>
 8008268:	4603      	mov	r3, r0
 800826a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800826e:	fa93 f3a3 	rbit	r3, r3
 8008272:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008276:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800827e:	2320      	movs	r3, #32
 8008280:	e003      	b.n	800828a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8008282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008284:	fab3 f383 	clz	r3, r3
 8008288:	b2db      	uxtb	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_ADC_ConfigChannel+0x518>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	0e9b      	lsrs	r3, r3, #26
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	e011      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x53c>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ac:	fa93 f3a3 	rbit	r3, r3
 80082b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80082b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80082b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80082bc:	2320      	movs	r3, #32
 80082be:	e003      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80082c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082c2:	fab3 f383 	clz	r3, r3
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d14f      	bne.n	800836c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2103      	movs	r1, #3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fa07 	bl	80076e8 <LL_ADC_SetOffsetState>
 80082da:	e047      	b.n	800836c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	069b      	lsls	r3, r3, #26
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d107      	bne.n	8008300 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80082fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	069b      	lsls	r3, r3, #26
 8008310:	429a      	cmp	r2, r3
 8008312:	d107      	bne.n	8008324 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008322:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800832a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	069b      	lsls	r3, r3, #26
 8008334:	429a      	cmp	r2, r3
 8008336:	d107      	bne.n	8008348 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008346:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800834e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	069b      	lsls	r3, r3, #26
 8008358:	429a      	cmp	r2, r3
 800835a:	d107      	bne.n	800836c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800836a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fac9 	bl	8007908 <LL_ADC_IsEnabled>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8219 	bne.w	80087b0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6819      	ldr	r1, [r3, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	461a      	mov	r2, r3
 800838c:	f7ff fa2e 	bl	80077ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	4aa1      	ldr	r2, [pc, #644]	@ (800861c <HAL_ADC_ConfigChannel+0x890>)
 8008396:	4293      	cmp	r3, r2
 8008398:	f040 812e 	bne.w	80085f8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <HAL_ADC_ConfigChannel+0x638>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	0e9b      	lsrs	r3, r3, #26
 80083b2:	3301      	adds	r3, #1
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	bf94      	ite	ls
 80083bc:	2301      	movls	r3, #1
 80083be:	2300      	movhi	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e019      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x66c>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083cc:	fa93 f3a3 	rbit	r3, r3
 80083d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80083d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80083d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80083dc:	2320      	movs	r3, #32
 80083de:	e003      	b.n	80083e8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80083e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083e2:	fab3 f383 	clz	r3, r3
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	3301      	adds	r3, #1
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	2b09      	cmp	r3, #9
 80083f0:	bf94      	ite	ls
 80083f2:	2301      	movls	r3, #1
 80083f4:	2300      	movhi	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d079      	beq.n	80084f0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008404:	2b00      	cmp	r3, #0
 8008406:	d107      	bne.n	8008418 <HAL_ADC_ConfigChannel+0x68c>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	0e9b      	lsrs	r3, r3, #26
 800840e:	3301      	adds	r3, #1
 8008410:	069b      	lsls	r3, r3, #26
 8008412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008416:	e015      	b.n	8008444 <HAL_ADC_ConfigChannel+0x6b8>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008420:	fa93 f3a3 	rbit	r3, r3
 8008424:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008428:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800842a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008430:	2320      	movs	r3, #32
 8008432:	e003      	b.n	800843c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008436:	fab3 f383 	clz	r3, r3
 800843a:	b2db      	uxtb	r3, r3
 800843c:	3301      	adds	r3, #1
 800843e:	069b      	lsls	r3, r3, #26
 8008440:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <HAL_ADC_ConfigChannel+0x6d8>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	0e9b      	lsrs	r3, r3, #26
 8008456:	3301      	adds	r3, #1
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f303 	lsl.w	r3, r1, r3
 8008462:	e017      	b.n	8008494 <HAL_ADC_ConfigChannel+0x708>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800846c:	fa93 f3a3 	rbit	r3, r3
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8008472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008474:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800847c:	2320      	movs	r3, #32
 800847e:	e003      	b.n	8008488 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008482:	fab3 f383 	clz	r3, r3
 8008486:	b2db      	uxtb	r3, r3
 8008488:	3301      	adds	r3, #1
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2101      	movs	r1, #1
 8008490:	fa01 f303 	lsl.w	r3, r1, r3
 8008494:	ea42 0103 	orr.w	r1, r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <HAL_ADC_ConfigChannel+0x72e>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	0e9b      	lsrs	r3, r3, #26
 80084aa:	3301      	adds	r3, #1
 80084ac:	f003 021f 	and.w	r2, r3, #31
 80084b0:	4613      	mov	r3, r2
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	4413      	add	r3, r2
 80084b6:	051b      	lsls	r3, r3, #20
 80084b8:	e018      	b.n	80084ec <HAL_ADC_ConfigChannel+0x760>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c2:	fa93 f3a3 	rbit	r3, r3
 80084c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80084d2:	2320      	movs	r3, #32
 80084d4:	e003      	b.n	80084de <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	fab3 f383 	clz	r3, r3
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	3301      	adds	r3, #1
 80084e0:	f003 021f 	and.w	r2, r3, #31
 80084e4:	4613      	mov	r3, r2
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084ec:	430b      	orrs	r3, r1
 80084ee:	e07e      	b.n	80085ee <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <HAL_ADC_ConfigChannel+0x780>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	0e9b      	lsrs	r3, r3, #26
 8008502:	3301      	adds	r3, #1
 8008504:	069b      	lsls	r3, r3, #26
 8008506:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800850a:	e015      	b.n	8008538 <HAL_ADC_ConfigChannel+0x7ac>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	fa93 f3a3 	rbit	r3, r3
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008524:	2320      	movs	r3, #32
 8008526:	e003      	b.n	8008530 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	fab3 f383 	clz	r3, r3
 800852e:	b2db      	uxtb	r3, r3
 8008530:	3301      	adds	r3, #1
 8008532:	069b      	lsls	r3, r3, #26
 8008534:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x7cc>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	0e9b      	lsrs	r3, r3, #26
 800854a:	3301      	adds	r3, #1
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	2101      	movs	r1, #1
 8008552:	fa01 f303 	lsl.w	r3, r1, r3
 8008556:	e017      	b.n	8008588 <HAL_ADC_ConfigChannel+0x7fc>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	fa93 f3a3 	rbit	r3, r3
 8008564:	61bb      	str	r3, [r7, #24]
  return result;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008570:	2320      	movs	r3, #32
 8008572:	e003      	b.n	800857c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	fab3 f383 	clz	r3, r3
 800857a:	b2db      	uxtb	r3, r3
 800857c:	3301      	adds	r3, #1
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	2101      	movs	r1, #1
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	ea42 0103 	orr.w	r1, r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10d      	bne.n	80085b4 <HAL_ADC_ConfigChannel+0x828>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	0e9b      	lsrs	r3, r3, #26
 800859e:	3301      	adds	r3, #1
 80085a0:	f003 021f 	and.w	r2, r3, #31
 80085a4:	4613      	mov	r3, r2
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	3b1e      	subs	r3, #30
 80085ac:	051b      	lsls	r3, r3, #20
 80085ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085b2:	e01b      	b.n	80085ec <HAL_ADC_ConfigChannel+0x860>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	fa93 f3a3 	rbit	r3, r3
 80085c0:	60fb      	str	r3, [r7, #12]
  return result;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80085cc:	2320      	movs	r3, #32
 80085ce:	e003      	b.n	80085d8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	fab3 f383 	clz	r3, r3
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	3301      	adds	r3, #1
 80085da:	f003 021f 	and.w	r2, r3, #31
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	3b1e      	subs	r3, #30
 80085e6:	051b      	lsls	r3, r3, #20
 80085e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085ec:	430b      	orrs	r3, r1
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	6892      	ldr	r2, [r2, #8]
 80085f2:	4619      	mov	r1, r3
 80085f4:	f7ff f8ce 	bl	8007794 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f280 80d7 	bge.w	80087b0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a06      	ldr	r2, [pc, #24]	@ (8008620 <HAL_ADC_ConfigChannel+0x894>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d004      	beq.n	8008616 <HAL_ADC_ConfigChannel+0x88a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a04      	ldr	r2, [pc, #16]	@ (8008624 <HAL_ADC_ConfigChannel+0x898>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d10a      	bne.n	800862c <HAL_ADC_ConfigChannel+0x8a0>
 8008616:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <HAL_ADC_ConfigChannel+0x89c>)
 8008618:	e009      	b.n	800862e <HAL_ADC_ConfigChannel+0x8a2>
 800861a:	bf00      	nop
 800861c:	47ff0000 	.word	0x47ff0000
 8008620:	40022000 	.word	0x40022000
 8008624:	40022100 	.word	0x40022100
 8008628:	40022300 	.word	0x40022300
 800862c:	4b65      	ldr	r3, [pc, #404]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa38>)
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe ff84 	bl	800753c <LL_ADC_GetCommonPathInternalCh>
 8008634:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a62      	ldr	r2, [pc, #392]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_ADC_ConfigChannel+0x8c0>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a61      	ldr	r2, [pc, #388]	@ (80087cc <HAL_ADC_ConfigChannel+0xa40>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d10e      	bne.n	800866a <HAL_ADC_ConfigChannel+0x8de>
 800864c:	485e      	ldr	r0, [pc, #376]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800864e:	f7ff f95b 	bl	8007908 <LL_ADC_IsEnabled>
 8008652:	4604      	mov	r4, r0
 8008654:	485d      	ldr	r0, [pc, #372]	@ (80087cc <HAL_ADC_ConfigChannel+0xa40>)
 8008656:	f7ff f957 	bl	8007908 <LL_ADC_IsEnabled>
 800865a:	4603      	mov	r3, r0
 800865c:	4323      	orrs	r3, r4
 800865e:	2b00      	cmp	r3, #0
 8008660:	bf0c      	ite	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	2300      	movne	r3, #0
 8008666:	b2db      	uxtb	r3, r3
 8008668:	e008      	b.n	800867c <HAL_ADC_ConfigChannel+0x8f0>
 800866a:	4859      	ldr	r0, [pc, #356]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa44>)
 800866c:	f7ff f94c 	bl	8007908 <LL_ADC_IsEnabled>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8084 	beq.w	800878a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a53      	ldr	r2, [pc, #332]	@ (80087d4 <HAL_ADC_ConfigChannel+0xa48>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d132      	bne.n	80086f2 <HAL_ADC_ConfigChannel+0x966>
 800868c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d12c      	bne.n	80086f2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a4c      	ldr	r2, [pc, #304]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa44>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f040 8086 	bne.w	80087b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a47      	ldr	r2, [pc, #284]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa3c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_ADC_ConfigChannel+0x92c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a46      	ldr	r2, [pc, #280]	@ (80087cc <HAL_ADC_ConfigChannel+0xa40>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d101      	bne.n	80086bc <HAL_ADC_ConfigChannel+0x930>
 80086b8:	4a47      	ldr	r2, [pc, #284]	@ (80087d8 <HAL_ADC_ConfigChannel+0xa4c>)
 80086ba:	e000      	b.n	80086be <HAL_ADC_ConfigChannel+0x932>
 80086bc:	4a41      	ldr	r2, [pc, #260]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa38>)
 80086be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7fe ff24 	bl	8007516 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086ce:	4b43      	ldr	r3, [pc, #268]	@ (80087dc <HAL_ADC_ConfigChannel+0xa50>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	099b      	lsrs	r3, r3, #6
 80086d4:	4a42      	ldr	r2, [pc, #264]	@ (80087e0 <HAL_ADC_ConfigChannel+0xa54>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	099b      	lsrs	r3, r3, #6
 80086dc:	3301      	adds	r3, #1
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086e2:	e002      	b.n	80086ea <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f9      	bne.n	80086e4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086f0:	e05e      	b.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	@ (80087e4 <HAL_ADC_ConfigChannel+0xa58>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d120      	bne.n	800873e <HAL_ADC_ConfigChannel+0x9b2>
 80086fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a30      	ldr	r2, [pc, #192]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa44>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d14e      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2c      	ldr	r2, [pc, #176]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_ADC_ConfigChannel+0x99a>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a2a      	ldr	r2, [pc, #168]	@ (80087cc <HAL_ADC_ConfigChannel+0xa40>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d101      	bne.n	800872a <HAL_ADC_ConfigChannel+0x99e>
 8008726:	4a2c      	ldr	r2, [pc, #176]	@ (80087d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8008728:	e000      	b.n	800872c <HAL_ADC_ConfigChannel+0x9a0>
 800872a:	4a26      	ldr	r2, [pc, #152]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa38>)
 800872c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f7fe feed 	bl	8007516 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800873c:	e038      	b.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a29      	ldr	r2, [pc, #164]	@ (80087e8 <HAL_ADC_ConfigChannel+0xa5c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d133      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
 8008748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800874c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d12d      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa44>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d128      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a19      	ldr	r2, [pc, #100]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_ADC_ConfigChannel+0x9e6>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <HAL_ADC_ConfigChannel+0xa40>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d101      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x9ea>
 8008772:	4a19      	ldr	r2, [pc, #100]	@ (80087d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8008774:	e000      	b.n	8008778 <HAL_ADC_ConfigChannel+0x9ec>
 8008776:	4a13      	ldr	r2, [pc, #76]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa38>)
 8008778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800877c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f7fe fec7 	bl	8007516 <LL_ADC_SetCommonPathInternalCh>
 8008788:	e012      	b.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878e:	f043 0220 	orr.w	r2, r3, #32
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800879c:	e008      	b.n	80087b0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80087b8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80087bc:	4618      	mov	r0, r3
 80087be:	37e4      	adds	r7, #228	@ 0xe4
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd90      	pop	{r4, r7, pc}
 80087c4:	58026300 	.word	0x58026300
 80087c8:	40022000 	.word	0x40022000
 80087cc:	40022100 	.word	0x40022100
 80087d0:	58026000 	.word	0x58026000
 80087d4:	c7520000 	.word	0xc7520000
 80087d8:	40022300 	.word	0x40022300
 80087dc:	24000000 	.word	0x24000000
 80087e0:	053e2d63 	.word	0x053e2d63
 80087e4:	c3210000 	.word	0xc3210000
 80087e8:	cb840000 	.word	0xcb840000

080087ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a6c      	ldr	r2, [pc, #432]	@ (80089ac <ADC_ConfigureBoostMode+0x1c0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <ADC_ConfigureBoostMode+0x1c>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a6b      	ldr	r2, [pc, #428]	@ (80089b0 <ADC_ConfigureBoostMode+0x1c4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d109      	bne.n	800881c <ADC_ConfigureBoostMode+0x30>
 8008808:	4b6a      	ldr	r3, [pc, #424]	@ (80089b4 <ADC_ConfigureBoostMode+0x1c8>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008810:	2b00      	cmp	r3, #0
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e008      	b.n	800882e <ADC_ConfigureBoostMode+0x42>
 800881c:	4b66      	ldr	r3, [pc, #408]	@ (80089b8 <ADC_ConfigureBoostMode+0x1cc>)
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008824:	2b00      	cmp	r3, #0
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01c      	beq.n	800886c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008832:	f005 fbff 	bl	800e034 <HAL_RCC_GetHCLKFreq>
 8008836:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008840:	d010      	beq.n	8008864 <ADC_ConfigureBoostMode+0x78>
 8008842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008846:	d873      	bhi.n	8008930 <ADC_ConfigureBoostMode+0x144>
 8008848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800884c:	d002      	beq.n	8008854 <ADC_ConfigureBoostMode+0x68>
 800884e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008852:	d16d      	bne.n	8008930 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	0c1b      	lsrs	r3, r3, #16
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	60fb      	str	r3, [r7, #12]
        break;
 8008862:	e068      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	089b      	lsrs	r3, r3, #2
 8008868:	60fb      	str	r3, [r7, #12]
        break;
 800886a:	e064      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800886c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008870:	f04f 0100 	mov.w	r1, #0
 8008874:	f006 fdda 	bl	800f42c <HAL_RCCEx_GetPeriphCLKFreq>
 8008878:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008882:	d051      	beq.n	8008928 <ADC_ConfigureBoostMode+0x13c>
 8008884:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008888:	d854      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 800888a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800888e:	d047      	beq.n	8008920 <ADC_ConfigureBoostMode+0x134>
 8008890:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008894:	d84e      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 8008896:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800889a:	d03d      	beq.n	8008918 <ADC_ConfigureBoostMode+0x12c>
 800889c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80088a0:	d848      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088a6:	d033      	beq.n	8008910 <ADC_ConfigureBoostMode+0x124>
 80088a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088ac:	d842      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088b2:	d029      	beq.n	8008908 <ADC_ConfigureBoostMode+0x11c>
 80088b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088b8:	d83c      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088be:	d01a      	beq.n	80088f6 <ADC_ConfigureBoostMode+0x10a>
 80088c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088c4:	d836      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80088ca:	d014      	beq.n	80088f6 <ADC_ConfigureBoostMode+0x10a>
 80088cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80088d0:	d830      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088d6:	d00e      	beq.n	80088f6 <ADC_ConfigureBoostMode+0x10a>
 80088d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088dc:	d82a      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088e2:	d008      	beq.n	80088f6 <ADC_ConfigureBoostMode+0x10a>
 80088e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088e8:	d824      	bhi.n	8008934 <ADC_ConfigureBoostMode+0x148>
 80088ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ee:	d002      	beq.n	80088f6 <ADC_ConfigureBoostMode+0x10a>
 80088f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088f4:	d11e      	bne.n	8008934 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	0c9b      	lsrs	r3, r3, #18
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	60fb      	str	r3, [r7, #12]
        break;
 8008906:	e016      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	091b      	lsrs	r3, r3, #4
 800890c:	60fb      	str	r3, [r7, #12]
        break;
 800890e:	e012      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	60fb      	str	r3, [r7, #12]
        break;
 8008916:	e00e      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	099b      	lsrs	r3, r3, #6
 800891c:	60fb      	str	r3, [r7, #12]
        break;
 800891e:	e00a      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	09db      	lsrs	r3, r3, #7
 8008924:	60fb      	str	r3, [r7, #12]
        break;
 8008926:	e006      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	0a1b      	lsrs	r3, r3, #8
 800892c:	60fb      	str	r3, [r7, #12]
        break;
 800892e:	e002      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
        break;
 8008930:	bf00      	nop
 8008932:	e000      	b.n	8008936 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008934:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4a1f      	ldr	r2, [pc, #124]	@ (80089bc <ADC_ConfigureBoostMode+0x1d0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d808      	bhi.n	8008956 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008952:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008954:	e025      	b.n	80089a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <ADC_ConfigureBoostMode+0x1d4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d80a      	bhi.n	8008974 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008970:	609a      	str	r2, [r3, #8]
}
 8008972:	e016      	b.n	80089a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a13      	ldr	r2, [pc, #76]	@ (80089c4 <ADC_ConfigureBoostMode+0x1d8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d80a      	bhi.n	8008992 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800898e:	609a      	str	r2, [r3, #8]
}
 8008990:	e007      	b.n	80089a2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80089a0:	609a      	str	r2, [r3, #8]
}
 80089a2:	bf00      	nop
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40022000 	.word	0x40022000
 80089b0:	40022100 	.word	0x40022100
 80089b4:	40022300 	.word	0x40022300
 80089b8:	58026300 	.word	0x58026300
 80089bc:	005f5e10 	.word	0x005f5e10
 80089c0:	00bebc20 	.word	0x00bebc20
 80089c4:	017d7840 	.word	0x017d7840

080089c8 <LL_ADC_IsEnabled>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <LL_ADC_IsEnabled+0x18>
 80089dc:	2301      	movs	r3, #1
 80089de:	e000      	b.n	80089e2 <LL_ADC_IsEnabled+0x1a>
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <LL_ADC_REG_IsConversionOngoing>:
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d101      	bne.n	8008a06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b0a3      	sub	sp, #140	@ 0x8c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e0c1      	b.n	8008bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e001      	b.n	8008a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10b      	bne.n	8008a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0a0      	b.n	8008bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ffb9 	bl	80089ee <LL_ADC_REG_IsConversionOngoing>
 8008a7c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff ffb2 	bl	80089ee <LL_ADC_REG_IsConversionOngoing>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 8081 	bne.w	8008b94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d17c      	bne.n	8008b94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a48      	ldr	r2, [pc, #288]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a46      	ldr	r2, [pc, #280]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d101      	bne.n	8008ab2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008aae:	4b46      	ldr	r3, [pc, #280]	@ (8008bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008ab0:	e000      	b.n	8008ab4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008ab2:	4b46      	ldr	r3, [pc, #280]	@ (8008bcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d039      	beq.n	8008b32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ace:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a39      	ldr	r2, [pc, #228]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d10e      	bne.n	8008b02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008ae4:	4836      	ldr	r0, [pc, #216]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ae6:	f7ff ff6f 	bl	80089c8 <LL_ADC_IsEnabled>
 8008aea:	4604      	mov	r4, r0
 8008aec:	4835      	ldr	r0, [pc, #212]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008aee:	f7ff ff6b 	bl	80089c8 <LL_ADC_IsEnabled>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4323      	orrs	r3, r4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bf0c      	ite	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	2300      	movne	r3, #0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	e008      	b.n	8008b14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008b02:	4833      	ldr	r0, [pc, #204]	@ (8008bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008b04:	f7ff ff60 	bl	80089c8 <LL_ADC_IsEnabled>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2300      	movne	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d047      	beq.n	8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	6811      	ldr	r1, [r2, #0]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	6892      	ldr	r2, [r2, #8]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b30:	e03a      	b.n	8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008b32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1f      	ldr	r2, [pc, #124]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10e      	bne.n	8008b70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008b52:	481b      	ldr	r0, [pc, #108]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b54:	f7ff ff38 	bl	80089c8 <LL_ADC_IsEnabled>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	481a      	ldr	r0, [pc, #104]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b5c:	f7ff ff34 	bl	80089c8 <LL_ADC_IsEnabled>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4323      	orrs	r3, r4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	e008      	b.n	8008b82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008b70:	4817      	ldr	r0, [pc, #92]	@ (8008bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008b72:	f7ff ff29 	bl	80089c8 <LL_ADC_IsEnabled>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2301      	moveq	r3, #1
 8008b7e:	2300      	movne	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d010      	beq.n	8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	4b12      	ldr	r3, [pc, #72]	@ (8008bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008b90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b92:	e009      	b.n	8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008ba6:	e000      	b.n	8008baa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ba8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008bb2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	378c      	adds	r7, #140	@ 0x8c
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	40022000 	.word	0x40022000
 8008bc4:	40022100 	.word	0x40022100
 8008bc8:	40022300 	.word	0x40022300
 8008bcc:	58026300 	.word	0x58026300
 8008bd0:	58026000 	.word	0x58026000
 8008bd4:	fffff0e0 	.word	0xfffff0e0

08008bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008be8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <__NVIC_SetPriorityGrouping+0x40>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008c00:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <__NVIC_SetPriorityGrouping+0x44>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c06:	4a04      	ldr	r2, [pc, #16]	@ (8008c18 <__NVIC_SetPriorityGrouping+0x40>)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	60d3      	str	r3, [r2, #12]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	e000ed00 	.word	0xe000ed00
 8008c1c:	05fa0000 	.word	0x05fa0000

08008c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c24:	4b04      	ldr	r3, [pc, #16]	@ (8008c38 <__NVIC_GetPriorityGrouping+0x18>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	f003 0307 	and.w	r3, r3, #7
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db0b      	blt.n	8008c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	f003 021f 	and.w	r2, r3, #31
 8008c54:	4907      	ldr	r1, [pc, #28]	@ (8008c74 <__NVIC_EnableIRQ+0x38>)
 8008c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8008c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	e000e100 	.word	0xe000e100

08008c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db0a      	blt.n	8008ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	490c      	ldr	r1, [pc, #48]	@ (8008cc4 <__NVIC_SetPriority+0x4c>)
 8008c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c96:	0112      	lsls	r2, r2, #4
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ca0:	e00a      	b.n	8008cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4908      	ldr	r1, [pc, #32]	@ (8008cc8 <__NVIC_SetPriority+0x50>)
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	3b04      	subs	r3, #4
 8008cb0:	0112      	lsls	r2, r2, #4
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	761a      	strb	r2, [r3, #24]
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	e000e100 	.word	0xe000e100
 8008cc8:	e000ed00 	.word	0xe000ed00

08008ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b089      	sub	sp, #36	@ 0x24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f1c3 0307 	rsb	r3, r3, #7
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	bf28      	it	cs
 8008cea:	2304      	movcs	r3, #4
 8008cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d902      	bls.n	8008cfc <NVIC_EncodePriority+0x30>
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	3b03      	subs	r3, #3
 8008cfa:	e000      	b.n	8008cfe <NVIC_EncodePriority+0x32>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	401a      	ands	r2, r3
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d14:	f04f 31ff 	mov.w	r1, #4294967295
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	43d9      	mvns	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d24:	4313      	orrs	r3, r2
         );
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3724      	adds	r7, #36	@ 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d44:	d301      	bcc.n	8008d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d46:	2301      	movs	r3, #1
 8008d48:	e00f      	b.n	8008d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d74 <SysTick_Config+0x40>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d52:	210f      	movs	r1, #15
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	f7ff ff8e 	bl	8008c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d5c:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <SysTick_Config+0x40>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d62:	4b04      	ldr	r3, [pc, #16]	@ (8008d74 <SysTick_Config+0x40>)
 8008d64:	2207      	movs	r2, #7
 8008d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000e010 	.word	0xe000e010

08008d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff29 	bl	8008bd8 <__NVIC_SetPriorityGrouping>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	4603      	mov	r3, r0
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d9c:	f7ff ff40 	bl	8008c20 <__NVIC_GetPriorityGrouping>
 8008da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	6978      	ldr	r0, [r7, #20]
 8008da8:	f7ff ff90 	bl	8008ccc <NVIC_EncodePriority>
 8008dac:	4602      	mov	r2, r0
 8008dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff ff5f 	bl	8008c78 <__NVIC_SetPriority>
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	4603      	mov	r3, r0
 8008dca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff ff33 	bl	8008c3c <__NVIC_EnableIRQ>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ffa4 	bl	8008d34 <SysTick_Config>
 8008dec:	4603      	mov	r3, r0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008dfc:	f3bf 8f5f 	dmb	sy
}
 8008e00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008e02:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <HAL_MPU_Disable+0x28>)
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	4a06      	ldr	r2, [pc, #24]	@ (8008e20 <HAL_MPU_Disable+0x28>)
 8008e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_MPU_Disable+0x2c>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
}
 8008e14:	bf00      	nop
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	e000ed00 	.word	0xe000ed00
 8008e24:	e000ed90 	.word	0xe000ed90

08008e28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008e30:	4a0b      	ldr	r2, [pc, #44]	@ (8008e60 <HAL_MPU_Enable+0x38>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e64 <HAL_MPU_Enable+0x3c>)
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	4a09      	ldr	r2, [pc, #36]	@ (8008e64 <HAL_MPU_Enable+0x3c>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008e46:	f3bf 8f4f 	dsb	sy
}
 8008e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e4c:	f3bf 8f6f 	isb	sy
}
 8008e50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	e000ed90 	.word	0xe000ed90
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	785a      	ldrb	r2, [r3, #1]
 8008e74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8008e76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008e78:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	4a19      	ldr	r2, [pc, #100]	@ (8008ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008e84:	4a17      	ldr	r2, [pc, #92]	@ (8008ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7b1b      	ldrb	r3, [r3, #12]
 8008e90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7adb      	ldrb	r3, [r3, #11]
 8008e96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7a9b      	ldrb	r3, [r3, #10]
 8008e9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7b5b      	ldrb	r3, [r3, #13]
 8008ea6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7b9b      	ldrb	r3, [r3, #14]
 8008eae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7bdb      	ldrb	r3, [r3, #15]
 8008eb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7a5b      	ldrb	r3, [r3, #9]
 8008ebe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7a1b      	ldrb	r3, [r3, #8]
 8008ec6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008ec8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	7812      	ldrb	r2, [r2, #0]
 8008ece:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ed0:	4a04      	ldr	r2, [pc, #16]	@ (8008ee4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008ed2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ed4:	6113      	str	r3, [r2, #16]
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	e000ed90 	.word	0xe000ed90

08008ee8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e014      	b.n	8008f24 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	791b      	ldrb	r3, [r3, #4]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d105      	bne.n	8008f10 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7f9 faa4 	bl	8002458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0a2      	b.n	800908a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	795b      	ldrb	r3, [r3, #5]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_DAC_Start_DMA+0x24>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e09c      	b.n	800908a <HAL_DAC_Start_DMA+0x15e>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d129      	bne.n	8008fb6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4a4b      	ldr	r2, [pc, #300]	@ (8009094 <HAL_DAC_Start_DMA+0x168>)
 8008f68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8009098 <HAL_DAC_Start_DMA+0x16c>)
 8008f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	4a49      	ldr	r2, [pc, #292]	@ (800909c <HAL_DAC_Start_DMA+0x170>)
 8008f78:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_DAC_Start_DMA+0x6c>
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d005      	beq.n	8008fa2 <HAL_DAC_Start_DMA+0x76>
 8008f96:	e009      	b.n	8008fac <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	613b      	str	r3, [r7, #16]
        break;
 8008fa0:	e033      	b.n	800900a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	613b      	str	r3, [r7, #16]
        break;
 8008faa:	e02e      	b.n	800900a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	613b      	str	r3, [r7, #16]
        break;
 8008fb4:	e029      	b.n	800900a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	4a39      	ldr	r2, [pc, #228]	@ (80090a0 <HAL_DAC_Start_DMA+0x174>)
 8008fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4a38      	ldr	r2, [pc, #224]	@ (80090a4 <HAL_DAC_Start_DMA+0x178>)
 8008fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	4a37      	ldr	r2, [pc, #220]	@ (80090a8 <HAL_DAC_Start_DMA+0x17c>)
 8008fcc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_DAC_Start_DMA+0xc0>
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d005      	beq.n	8008ff6 <HAL_DAC_Start_DMA+0xca>
 8008fea:	e009      	b.n	8009000 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	613b      	str	r3, [r7, #16]
        break;
 8008ff4:	e009      	b.n	800900a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3318      	adds	r3, #24
 8008ffc:	613b      	str	r3, [r7, #16]
        break;
 8008ffe:	e004      	b.n	800900a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	331c      	adds	r3, #28
 8009006:	613b      	str	r3, [r7, #16]
        break;
 8009008:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d111      	bne.n	8009034 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800901e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6898      	ldr	r0, [r3, #8]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	f000 fd6d 	bl	8009b08 <HAL_DMA_Start_IT>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
 8009032:	e010      	b.n	8009056 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8009042:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68d8      	ldr	r0, [r3, #12]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	f000 fd5b 	bl	8009b08 <HAL_DMA_Start_IT>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10c      	bne.n	800907c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6819      	ldr	r1, [r3, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2201      	movs	r2, #1
 8009070:	409a      	lsls	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e005      	b.n	8009088 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f043 0204 	orr.w	r2, r3, #4
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	08009345 	.word	0x08009345
 8009098:	08009367 	.word	0x08009367
 800909c:	08009383 	.word	0x08009383
 80090a0:	080093ed 	.word	0x080093ed
 80090a4:	0800940f 	.word	0x0800940f
 80090a8:	0800942b 	.word	0x0800942b

080090ac <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08a      	sub	sp, #40	@ 0x28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <HAL_DAC_ConfigChannel+0x1e>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e12a      	b.n	8009338 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	795b      	ldrb	r3, [r3, #5]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_DAC_ConfigChannel+0x2e>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e124      	b.n	8009338 <HAL_DAC_ConfigChannel+0x278>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2202      	movs	r2, #2
 80090f8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d17a      	bne.n	80091f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009102:	f7fe f9c5 	bl	8007490 <HAL_GetTick>
 8009106:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d13d      	bne.n	800918a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800910e:	e018      	b.n	8009142 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009110:	f7fe f9be 	bl	8007490 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b01      	cmp	r3, #1
 800911c:	d911      	bls.n	8009142 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009124:	4b86      	ldr	r3, [pc, #536]	@ (8009340 <HAL_DAC_ConfigChannel+0x280>)
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00a      	beq.n	8009142 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f043 0208 	orr.w	r2, r3, #8
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2203      	movs	r2, #3
 800913c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e0fa      	b.n	8009338 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009148:	4b7d      	ldr	r3, [pc, #500]	@ (8009340 <HAL_DAC_ConfigChannel+0x280>)
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1df      	bne.n	8009110 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	6992      	ldr	r2, [r2, #24]
 8009158:	641a      	str	r2, [r3, #64]	@ 0x40
 800915a:	e020      	b.n	800919e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800915c:	f7fe f998 	bl	8007490 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b01      	cmp	r3, #1
 8009168:	d90f      	bls.n	800918a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	da0a      	bge.n	800918a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f043 0208 	orr.w	r2, r3, #8
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2203      	movs	r2, #3
 8009184:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e0d6      	b.n	8009338 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	2b00      	cmp	r3, #0
 8009192:	dbe3      	blt.n	800915c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	6992      	ldr	r2, [r2, #24]
 800919c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f003 0310 	and.w	r3, r3, #16
 80091aa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	43db      	mvns	r3, r3
 80091b4:	ea02 0103 	and.w	r1, r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	409a      	lsls	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	21ff      	movs	r1, #255	@ 0xff
 80091da:	fa01 f303 	lsl.w	r3, r1, r3
 80091de:	43db      	mvns	r3, r3
 80091e0:	ea02 0103 	and.w	r1, r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	409a      	lsls	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d11d      	bne.n	800923c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009206:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	221f      	movs	r2, #31
 8009210:	fa02 f303 	lsl.w	r3, r2, r3
 8009214:	43db      	mvns	r3, r3
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	4013      	ands	r3, r2
 800921a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	fa02 f303 	lsl.w	r3, r2, r3
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	4313      	orrs	r3, r2
 8009232:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009242:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2207      	movs	r2, #7
 800924c:	fa02 f303 	lsl.w	r3, r2, r3
 8009250:	43db      	mvns	r3, r3
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	4013      	ands	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d102      	bne.n	8009266 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8009260:	2300      	movs	r3, #0
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
 8009264:	e00f      	b.n	8009286 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d102      	bne.n	8009274 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800926e:	2301      	movs	r3, #1
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
 8009272:	e008      	b.n	8009286 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800927c:	2301      	movs	r3, #1
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009280:	e001      	b.n	8009286 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009282:	2300      	movs	r3, #0
 8009284:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	4313      	orrs	r3, r2
 8009290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f003 0310 	and.w	r3, r3, #16
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	fa02 f303 	lsl.w	r3, r2, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6819      	ldr	r1, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092c0:	fa02 f303 	lsl.w	r3, r2, r3
 80092c4:	43da      	mvns	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	400a      	ands	r2, r1
 80092cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	43db      	mvns	r3, r3
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	4013      	ands	r3, r2
 80092ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	4313      	orrs	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6819      	ldr	r1, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	22c0      	movs	r2, #192	@ 0xc0
 800931a:	fa02 f303 	lsl.w	r3, r2, r3
 800931e:	43da      	mvns	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	400a      	ands	r2, r1
 8009326:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009338:	4618      	mov	r0, r3
 800933a:	3728      	adds	r7, #40	@ 0x28
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20008000 	.word	0x20008000

08009344 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7f7 ffbc 	bl	80012d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	711a      	strb	r2, [r3, #4]
}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f7f7 ff9d 	bl	80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f043 0204 	orr.w	r2, r3, #4
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff fe85 	bl	80090ac <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	711a      	strb	r2, [r3, #4]
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff ffd8 	bl	80093b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	711a      	strb	r2, [r3, #4]
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff ffd1 	bl	80093c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f043 0204 	orr.w	r2, r3, #4
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff ffc7 	bl	80093d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	711a      	strb	r2, [r3, #4]
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009460:	f7fe f816 	bl	8007490 <HAL_GetTick>
 8009464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e312      	b.n	8009a96 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a66      	ldr	r2, [pc, #408]	@ (8009610 <HAL_DMA_Init+0x1b8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d04a      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a65      	ldr	r2, [pc, #404]	@ (8009614 <HAL_DMA_Init+0x1bc>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d045      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a63      	ldr	r2, [pc, #396]	@ (8009618 <HAL_DMA_Init+0x1c0>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d040      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a62      	ldr	r2, [pc, #392]	@ (800961c <HAL_DMA_Init+0x1c4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d03b      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a60      	ldr	r2, [pc, #384]	@ (8009620 <HAL_DMA_Init+0x1c8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d036      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a5f      	ldr	r2, [pc, #380]	@ (8009624 <HAL_DMA_Init+0x1cc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d031      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a5d      	ldr	r2, [pc, #372]	@ (8009628 <HAL_DMA_Init+0x1d0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d02c      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a5c      	ldr	r2, [pc, #368]	@ (800962c <HAL_DMA_Init+0x1d4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d027      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a5a      	ldr	r2, [pc, #360]	@ (8009630 <HAL_DMA_Init+0x1d8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d022      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a59      	ldr	r2, [pc, #356]	@ (8009634 <HAL_DMA_Init+0x1dc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d01d      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a57      	ldr	r2, [pc, #348]	@ (8009638 <HAL_DMA_Init+0x1e0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d018      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a56      	ldr	r2, [pc, #344]	@ (800963c <HAL_DMA_Init+0x1e4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d013      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a54      	ldr	r2, [pc, #336]	@ (8009640 <HAL_DMA_Init+0x1e8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00e      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a53      	ldr	r2, [pc, #332]	@ (8009644 <HAL_DMA_Init+0x1ec>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d009      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a51      	ldr	r2, [pc, #324]	@ (8009648 <HAL_DMA_Init+0x1f0>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d004      	beq.n	8009510 <HAL_DMA_Init+0xb8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a50      	ldr	r2, [pc, #320]	@ (800964c <HAL_DMA_Init+0x1f4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d101      	bne.n	8009514 <HAL_DMA_Init+0xbc>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <HAL_DMA_Init+0xbe>
 8009514:	2300      	movs	r3, #0
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 813c 	beq.w	8009794 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a37      	ldr	r2, [pc, #220]	@ (8009610 <HAL_DMA_Init+0x1b8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d04a      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a36      	ldr	r2, [pc, #216]	@ (8009614 <HAL_DMA_Init+0x1bc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d045      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a34      	ldr	r2, [pc, #208]	@ (8009618 <HAL_DMA_Init+0x1c0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d040      	beq.n	80095cc <HAL_DMA_Init+0x174>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a33      	ldr	r2, [pc, #204]	@ (800961c <HAL_DMA_Init+0x1c4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d03b      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a31      	ldr	r2, [pc, #196]	@ (8009620 <HAL_DMA_Init+0x1c8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d036      	beq.n	80095cc <HAL_DMA_Init+0x174>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a30      	ldr	r2, [pc, #192]	@ (8009624 <HAL_DMA_Init+0x1cc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d031      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a2e      	ldr	r2, [pc, #184]	@ (8009628 <HAL_DMA_Init+0x1d0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d02c      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a2d      	ldr	r2, [pc, #180]	@ (800962c <HAL_DMA_Init+0x1d4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d027      	beq.n	80095cc <HAL_DMA_Init+0x174>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a2b      	ldr	r2, [pc, #172]	@ (8009630 <HAL_DMA_Init+0x1d8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d022      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a2a      	ldr	r2, [pc, #168]	@ (8009634 <HAL_DMA_Init+0x1dc>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d01d      	beq.n	80095cc <HAL_DMA_Init+0x174>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a28      	ldr	r2, [pc, #160]	@ (8009638 <HAL_DMA_Init+0x1e0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d018      	beq.n	80095cc <HAL_DMA_Init+0x174>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a27      	ldr	r2, [pc, #156]	@ (800963c <HAL_DMA_Init+0x1e4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d013      	beq.n	80095cc <HAL_DMA_Init+0x174>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a25      	ldr	r2, [pc, #148]	@ (8009640 <HAL_DMA_Init+0x1e8>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00e      	beq.n	80095cc <HAL_DMA_Init+0x174>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a24      	ldr	r2, [pc, #144]	@ (8009644 <HAL_DMA_Init+0x1ec>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d009      	beq.n	80095cc <HAL_DMA_Init+0x174>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a22      	ldr	r2, [pc, #136]	@ (8009648 <HAL_DMA_Init+0x1f0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d004      	beq.n	80095cc <HAL_DMA_Init+0x174>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a21      	ldr	r2, [pc, #132]	@ (800964c <HAL_DMA_Init+0x1f4>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d108      	bne.n	80095de <HAL_DMA_Init+0x186>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0201 	bic.w	r2, r2, #1
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	e007      	b.n	80095ee <HAL_DMA_Init+0x196>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80095ee:	e02f      	b.n	8009650 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80095f0:	f7fd ff4e 	bl	8007490 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	d928      	bls.n	8009650 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2203      	movs	r2, #3
 8009608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e242      	b.n	8009a96 <HAL_DMA_Init+0x63e>
 8009610:	40020010 	.word	0x40020010
 8009614:	40020028 	.word	0x40020028
 8009618:	40020040 	.word	0x40020040
 800961c:	40020058 	.word	0x40020058
 8009620:	40020070 	.word	0x40020070
 8009624:	40020088 	.word	0x40020088
 8009628:	400200a0 	.word	0x400200a0
 800962c:	400200b8 	.word	0x400200b8
 8009630:	40020410 	.word	0x40020410
 8009634:	40020428 	.word	0x40020428
 8009638:	40020440 	.word	0x40020440
 800963c:	40020458 	.word	0x40020458
 8009640:	40020470 	.word	0x40020470
 8009644:	40020488 	.word	0x40020488
 8009648:	400204a0 	.word	0x400204a0
 800964c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1c8      	bne.n	80095f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4b83      	ldr	r3, [pc, #524]	@ (8009878 <HAL_DMA_Init+0x420>)
 800966a:	4013      	ands	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009676:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009682:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800968e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d107      	bne.n	80096b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ac:	4313      	orrs	r3, r2
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b28      	cmp	r3, #40	@ 0x28
 80096ba:	d903      	bls.n	80096c4 <HAL_DMA_Init+0x26c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096c2:	d91f      	bls.n	8009704 <HAL_DMA_Init+0x2ac>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80096ca:	d903      	bls.n	80096d4 <HAL_DMA_Init+0x27c>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b42      	cmp	r3, #66	@ 0x42
 80096d2:	d917      	bls.n	8009704 <HAL_DMA_Init+0x2ac>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b46      	cmp	r3, #70	@ 0x46
 80096da:	d903      	bls.n	80096e4 <HAL_DMA_Init+0x28c>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b48      	cmp	r3, #72	@ 0x48
 80096e2:	d90f      	bls.n	8009704 <HAL_DMA_Init+0x2ac>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80096ea:	d903      	bls.n	80096f4 <HAL_DMA_Init+0x29c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b52      	cmp	r3, #82	@ 0x52
 80096f2:	d907      	bls.n	8009704 <HAL_DMA_Init+0x2ac>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b73      	cmp	r3, #115	@ 0x73
 80096fa:	d905      	bls.n	8009708 <HAL_DMA_Init+0x2b0>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b77      	cmp	r3, #119	@ 0x77
 8009702:	d801      	bhi.n	8009708 <HAL_DMA_Init+0x2b0>
 8009704:	2301      	movs	r3, #1
 8009706:	e000      	b.n	800970a <HAL_DMA_Init+0x2b2>
 8009708:	2300      	movs	r3, #0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009714:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973c:	2b04      	cmp	r3, #4
 800973e:	d117      	bne.n	8009770 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00e      	beq.n	8009770 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 fdca 	bl	800b2ec <DMA_CheckFifoParam>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d008      	beq.n	8009770 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2240      	movs	r2, #64	@ 0x40
 8009762:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e192      	b.n	8009a96 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fd05 	bl	800b188 <DMA_CalcBaseAndBitshift>
 800977e:	4603      	mov	r3, r0
 8009780:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	223f      	movs	r2, #63	@ 0x3f
 800978c:	409a      	lsls	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	609a      	str	r2, [r3, #8]
 8009792:	e0c8      	b.n	8009926 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a38      	ldr	r2, [pc, #224]	@ (800987c <HAL_DMA_Init+0x424>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d022      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a37      	ldr	r2, [pc, #220]	@ (8009880 <HAL_DMA_Init+0x428>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d01d      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a35      	ldr	r2, [pc, #212]	@ (8009884 <HAL_DMA_Init+0x42c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d018      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a34      	ldr	r2, [pc, #208]	@ (8009888 <HAL_DMA_Init+0x430>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d013      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a32      	ldr	r2, [pc, #200]	@ (800988c <HAL_DMA_Init+0x434>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00e      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a31      	ldr	r2, [pc, #196]	@ (8009890 <HAL_DMA_Init+0x438>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d009      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a2f      	ldr	r2, [pc, #188]	@ (8009894 <HAL_DMA_Init+0x43c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d004      	beq.n	80097e4 <HAL_DMA_Init+0x38c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a2e      	ldr	r2, [pc, #184]	@ (8009898 <HAL_DMA_Init+0x440>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d101      	bne.n	80097e8 <HAL_DMA_Init+0x390>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <HAL_DMA_Init+0x392>
 80097e8:	2300      	movs	r3, #0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 8092 	beq.w	8009914 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a21      	ldr	r2, [pc, #132]	@ (800987c <HAL_DMA_Init+0x424>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d021      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a20      	ldr	r2, [pc, #128]	@ (8009880 <HAL_DMA_Init+0x428>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d01c      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1e      	ldr	r2, [pc, #120]	@ (8009884 <HAL_DMA_Init+0x42c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d017      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1d      	ldr	r2, [pc, #116]	@ (8009888 <HAL_DMA_Init+0x430>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d012      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1b      	ldr	r2, [pc, #108]	@ (800988c <HAL_DMA_Init+0x434>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00d      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a1a      	ldr	r2, [pc, #104]	@ (8009890 <HAL_DMA_Init+0x438>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d008      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a18      	ldr	r2, [pc, #96]	@ (8009894 <HAL_DMA_Init+0x43c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d003      	beq.n	800983e <HAL_DMA_Init+0x3e6>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a17      	ldr	r2, [pc, #92]	@ (8009898 <HAL_DMA_Init+0x440>)
 800983c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4b10      	ldr	r3, [pc, #64]	@ (800989c <HAL_DMA_Init+0x444>)
 800985a:	4013      	ands	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d01c      	beq.n	80098a0 <HAL_DMA_Init+0x448>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b80      	cmp	r3, #128	@ 0x80
 800986c:	d102      	bne.n	8009874 <HAL_DMA_Init+0x41c>
 800986e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009872:	e016      	b.n	80098a2 <HAL_DMA_Init+0x44a>
 8009874:	2300      	movs	r3, #0
 8009876:	e014      	b.n	80098a2 <HAL_DMA_Init+0x44a>
 8009878:	fe10803f 	.word	0xfe10803f
 800987c:	58025408 	.word	0x58025408
 8009880:	5802541c 	.word	0x5802541c
 8009884:	58025430 	.word	0x58025430
 8009888:	58025444 	.word	0x58025444
 800988c:	58025458 	.word	0x58025458
 8009890:	5802546c 	.word	0x5802546c
 8009894:	58025480 	.word	0x58025480
 8009898:	58025494 	.word	0x58025494
 800989c:	fffe000f 	.word	0xfffe000f
 80098a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68d2      	ldr	r2, [r2, #12]
 80098a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80098b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b6e      	ldr	r3, [pc, #440]	@ (8009aa0 <HAL_DMA_Init+0x648>)
 80098e8:	4413      	add	r3, r2
 80098ea:	4a6e      	ldr	r2, [pc, #440]	@ (8009aa4 <HAL_DMA_Init+0x64c>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	009a      	lsls	r2, r3, #2
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 fc45 	bl	800b188 <DMA_CalcBaseAndBitshift>
 80098fe:	4603      	mov	r3, r0
 8009900:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009906:	f003 031f 	and.w	r3, r3, #31
 800990a:	2201      	movs	r2, #1
 800990c:	409a      	lsls	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	e008      	b.n	8009926 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2240      	movs	r2, #64	@ 0x40
 8009918:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2203      	movs	r2, #3
 800991e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e0b7      	b.n	8009a96 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a5f      	ldr	r2, [pc, #380]	@ (8009aa8 <HAL_DMA_Init+0x650>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d072      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a5d      	ldr	r2, [pc, #372]	@ (8009aac <HAL_DMA_Init+0x654>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d06d      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a5c      	ldr	r2, [pc, #368]	@ (8009ab0 <HAL_DMA_Init+0x658>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d068      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5a      	ldr	r2, [pc, #360]	@ (8009ab4 <HAL_DMA_Init+0x65c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d063      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a59      	ldr	r2, [pc, #356]	@ (8009ab8 <HAL_DMA_Init+0x660>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d05e      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a57      	ldr	r2, [pc, #348]	@ (8009abc <HAL_DMA_Init+0x664>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d059      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a56      	ldr	r2, [pc, #344]	@ (8009ac0 <HAL_DMA_Init+0x668>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d054      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a54      	ldr	r2, [pc, #336]	@ (8009ac4 <HAL_DMA_Init+0x66c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d04f      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a53      	ldr	r2, [pc, #332]	@ (8009ac8 <HAL_DMA_Init+0x670>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d04a      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a51      	ldr	r2, [pc, #324]	@ (8009acc <HAL_DMA_Init+0x674>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d045      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a50      	ldr	r2, [pc, #320]	@ (8009ad0 <HAL_DMA_Init+0x678>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d040      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a4e      	ldr	r2, [pc, #312]	@ (8009ad4 <HAL_DMA_Init+0x67c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d03b      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a4d      	ldr	r2, [pc, #308]	@ (8009ad8 <HAL_DMA_Init+0x680>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d036      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a4b      	ldr	r2, [pc, #300]	@ (8009adc <HAL_DMA_Init+0x684>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d031      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a4a      	ldr	r2, [pc, #296]	@ (8009ae0 <HAL_DMA_Init+0x688>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d02c      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a48      	ldr	r2, [pc, #288]	@ (8009ae4 <HAL_DMA_Init+0x68c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d027      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a47      	ldr	r2, [pc, #284]	@ (8009ae8 <HAL_DMA_Init+0x690>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d022      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a45      	ldr	r2, [pc, #276]	@ (8009aec <HAL_DMA_Init+0x694>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d01d      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a44      	ldr	r2, [pc, #272]	@ (8009af0 <HAL_DMA_Init+0x698>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d018      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a42      	ldr	r2, [pc, #264]	@ (8009af4 <HAL_DMA_Init+0x69c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d013      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a41      	ldr	r2, [pc, #260]	@ (8009af8 <HAL_DMA_Init+0x6a0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00e      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a3f      	ldr	r2, [pc, #252]	@ (8009afc <HAL_DMA_Init+0x6a4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d009      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a3e      	ldr	r2, [pc, #248]	@ (8009b00 <HAL_DMA_Init+0x6a8>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d004      	beq.n	8009a16 <HAL_DMA_Init+0x5be>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a3c      	ldr	r2, [pc, #240]	@ (8009b04 <HAL_DMA_Init+0x6ac>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d101      	bne.n	8009a1a <HAL_DMA_Init+0x5c2>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <HAL_DMA_Init+0x5c4>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d032      	beq.n	8009a86 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 fcdf 	bl	800b3e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	2b80      	cmp	r3, #128	@ 0x80
 8009a2c:	d102      	bne.n	8009a34 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009a48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d010      	beq.n	8009a74 <HAL_DMA_Init+0x61c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b08      	cmp	r3, #8
 8009a58:	d80c      	bhi.n	8009a74 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 fd5c 	bl	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	e008      	b.n	8009a86 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	a7fdabf8 	.word	0xa7fdabf8
 8009aa4:	cccccccd 	.word	0xcccccccd
 8009aa8:	40020010 	.word	0x40020010
 8009aac:	40020028 	.word	0x40020028
 8009ab0:	40020040 	.word	0x40020040
 8009ab4:	40020058 	.word	0x40020058
 8009ab8:	40020070 	.word	0x40020070
 8009abc:	40020088 	.word	0x40020088
 8009ac0:	400200a0 	.word	0x400200a0
 8009ac4:	400200b8 	.word	0x400200b8
 8009ac8:	40020410 	.word	0x40020410
 8009acc:	40020428 	.word	0x40020428
 8009ad0:	40020440 	.word	0x40020440
 8009ad4:	40020458 	.word	0x40020458
 8009ad8:	40020470 	.word	0x40020470
 8009adc:	40020488 	.word	0x40020488
 8009ae0:	400204a0 	.word	0x400204a0
 8009ae4:	400204b8 	.word	0x400204b8
 8009ae8:	58025408 	.word	0x58025408
 8009aec:	5802541c 	.word	0x5802541c
 8009af0:	58025430 	.word	0x58025430
 8009af4:	58025444 	.word	0x58025444
 8009af8:	58025458 	.word	0x58025458
 8009afc:	5802546c 	.word	0x5802546c
 8009b00:	58025480 	.word	0x58025480
 8009b04:	58025494 	.word	0x58025494

08009b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e226      	b.n	8009f72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d101      	bne.n	8009b32 <HAL_DMA_Start_IT+0x2a>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e21f      	b.n	8009f72 <HAL_DMA_Start_IT+0x46a>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	f040 820a 	bne.w	8009f5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a68      	ldr	r2, [pc, #416]	@ (8009cfc <HAL_DMA_Start_IT+0x1f4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d04a      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a66      	ldr	r2, [pc, #408]	@ (8009d00 <HAL_DMA_Start_IT+0x1f8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d045      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a65      	ldr	r2, [pc, #404]	@ (8009d04 <HAL_DMA_Start_IT+0x1fc>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d040      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a63      	ldr	r2, [pc, #396]	@ (8009d08 <HAL_DMA_Start_IT+0x200>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d03b      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a62      	ldr	r2, [pc, #392]	@ (8009d0c <HAL_DMA_Start_IT+0x204>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d036      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a60      	ldr	r2, [pc, #384]	@ (8009d10 <HAL_DMA_Start_IT+0x208>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d031      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a5f      	ldr	r2, [pc, #380]	@ (8009d14 <HAL_DMA_Start_IT+0x20c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d02c      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8009d18 <HAL_DMA_Start_IT+0x210>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d027      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a5c      	ldr	r2, [pc, #368]	@ (8009d1c <HAL_DMA_Start_IT+0x214>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d022      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8009d20 <HAL_DMA_Start_IT+0x218>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d01d      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a59      	ldr	r2, [pc, #356]	@ (8009d24 <HAL_DMA_Start_IT+0x21c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d018      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a57      	ldr	r2, [pc, #348]	@ (8009d28 <HAL_DMA_Start_IT+0x220>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a56      	ldr	r2, [pc, #344]	@ (8009d2c <HAL_DMA_Start_IT+0x224>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00e      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a54      	ldr	r2, [pc, #336]	@ (8009d30 <HAL_DMA_Start_IT+0x228>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d009      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a53      	ldr	r2, [pc, #332]	@ (8009d34 <HAL_DMA_Start_IT+0x22c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d004      	beq.n	8009bf6 <HAL_DMA_Start_IT+0xee>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a51      	ldr	r2, [pc, #324]	@ (8009d38 <HAL_DMA_Start_IT+0x230>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d108      	bne.n	8009c08 <HAL_DMA_Start_IT+0x100>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0201 	bic.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e007      	b.n	8009c18 <HAL_DMA_Start_IT+0x110>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0201 	bic.w	r2, r2, #1
 8009c16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f001 f906 	bl	800ae30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a34      	ldr	r2, [pc, #208]	@ (8009cfc <HAL_DMA_Start_IT+0x1f4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d04a      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a33      	ldr	r2, [pc, #204]	@ (8009d00 <HAL_DMA_Start_IT+0x1f8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d045      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a31      	ldr	r2, [pc, #196]	@ (8009d04 <HAL_DMA_Start_IT+0x1fc>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d040      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a30      	ldr	r2, [pc, #192]	@ (8009d08 <HAL_DMA_Start_IT+0x200>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d03b      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a2e      	ldr	r2, [pc, #184]	@ (8009d0c <HAL_DMA_Start_IT+0x204>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d036      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8009d10 <HAL_DMA_Start_IT+0x208>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d031      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a2b      	ldr	r2, [pc, #172]	@ (8009d14 <HAL_DMA_Start_IT+0x20c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d02c      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d18 <HAL_DMA_Start_IT+0x210>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d027      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a28      	ldr	r2, [pc, #160]	@ (8009d1c <HAL_DMA_Start_IT+0x214>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d022      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a27      	ldr	r2, [pc, #156]	@ (8009d20 <HAL_DMA_Start_IT+0x218>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d01d      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a25      	ldr	r2, [pc, #148]	@ (8009d24 <HAL_DMA_Start_IT+0x21c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d018      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a24      	ldr	r2, [pc, #144]	@ (8009d28 <HAL_DMA_Start_IT+0x220>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d013      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a22      	ldr	r2, [pc, #136]	@ (8009d2c <HAL_DMA_Start_IT+0x224>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00e      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a21      	ldr	r2, [pc, #132]	@ (8009d30 <HAL_DMA_Start_IT+0x228>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d009      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d34 <HAL_DMA_Start_IT+0x22c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_DMA_Start_IT+0x1bc>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8009d38 <HAL_DMA_Start_IT+0x230>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d101      	bne.n	8009cc8 <HAL_DMA_Start_IT+0x1c0>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e000      	b.n	8009cca <HAL_DMA_Start_IT+0x1c2>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d036      	beq.n	8009d3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f023 021e 	bic.w	r2, r3, #30
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0216 	orr.w	r2, r2, #22
 8009ce0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d03e      	beq.n	8009d68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 0208 	orr.w	r2, r2, #8
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	e035      	b.n	8009d68 <HAL_DMA_Start_IT+0x260>
 8009cfc:	40020010 	.word	0x40020010
 8009d00:	40020028 	.word	0x40020028
 8009d04:	40020040 	.word	0x40020040
 8009d08:	40020058 	.word	0x40020058
 8009d0c:	40020070 	.word	0x40020070
 8009d10:	40020088 	.word	0x40020088
 8009d14:	400200a0 	.word	0x400200a0
 8009d18:	400200b8 	.word	0x400200b8
 8009d1c:	40020410 	.word	0x40020410
 8009d20:	40020428 	.word	0x40020428
 8009d24:	40020440 	.word	0x40020440
 8009d28:	40020458 	.word	0x40020458
 8009d2c:	40020470 	.word	0x40020470
 8009d30:	40020488 	.word	0x40020488
 8009d34:	400204a0 	.word	0x400204a0
 8009d38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f023 020e 	bic.w	r2, r3, #14
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f042 020a 	orr.w	r2, r2, #10
 8009d4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0204 	orr.w	r2, r2, #4
 8009d66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a83      	ldr	r2, [pc, #524]	@ (8009f7c <HAL_DMA_Start_IT+0x474>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d072      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a82      	ldr	r2, [pc, #520]	@ (8009f80 <HAL_DMA_Start_IT+0x478>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d06d      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a80      	ldr	r2, [pc, #512]	@ (8009f84 <HAL_DMA_Start_IT+0x47c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d068      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a7f      	ldr	r2, [pc, #508]	@ (8009f88 <HAL_DMA_Start_IT+0x480>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d063      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a7d      	ldr	r2, [pc, #500]	@ (8009f8c <HAL_DMA_Start_IT+0x484>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d05e      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8009f90 <HAL_DMA_Start_IT+0x488>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d059      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a7a      	ldr	r2, [pc, #488]	@ (8009f94 <HAL_DMA_Start_IT+0x48c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d054      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a79      	ldr	r2, [pc, #484]	@ (8009f98 <HAL_DMA_Start_IT+0x490>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d04f      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a77      	ldr	r2, [pc, #476]	@ (8009f9c <HAL_DMA_Start_IT+0x494>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d04a      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a76      	ldr	r2, [pc, #472]	@ (8009fa0 <HAL_DMA_Start_IT+0x498>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d045      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a74      	ldr	r2, [pc, #464]	@ (8009fa4 <HAL_DMA_Start_IT+0x49c>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d040      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a73      	ldr	r2, [pc, #460]	@ (8009fa8 <HAL_DMA_Start_IT+0x4a0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d03b      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a71      	ldr	r2, [pc, #452]	@ (8009fac <HAL_DMA_Start_IT+0x4a4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d036      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a70      	ldr	r2, [pc, #448]	@ (8009fb0 <HAL_DMA_Start_IT+0x4a8>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d031      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a6e      	ldr	r2, [pc, #440]	@ (8009fb4 <HAL_DMA_Start_IT+0x4ac>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d02c      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a6d      	ldr	r2, [pc, #436]	@ (8009fb8 <HAL_DMA_Start_IT+0x4b0>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d027      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8009fbc <HAL_DMA_Start_IT+0x4b4>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d022      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a6a      	ldr	r2, [pc, #424]	@ (8009fc0 <HAL_DMA_Start_IT+0x4b8>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d01d      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a68      	ldr	r2, [pc, #416]	@ (8009fc4 <HAL_DMA_Start_IT+0x4bc>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d018      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a67      	ldr	r2, [pc, #412]	@ (8009fc8 <HAL_DMA_Start_IT+0x4c0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d013      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a65      	ldr	r2, [pc, #404]	@ (8009fcc <HAL_DMA_Start_IT+0x4c4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00e      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a64      	ldr	r2, [pc, #400]	@ (8009fd0 <HAL_DMA_Start_IT+0x4c8>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d009      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a62      	ldr	r2, [pc, #392]	@ (8009fd4 <HAL_DMA_Start_IT+0x4cc>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d004      	beq.n	8009e58 <HAL_DMA_Start_IT+0x350>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a61      	ldr	r2, [pc, #388]	@ (8009fd8 <HAL_DMA_Start_IT+0x4d0>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d101      	bne.n	8009e5c <HAL_DMA_Start_IT+0x354>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <HAL_DMA_Start_IT+0x356>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01a      	beq.n	8009e98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a37      	ldr	r2, [pc, #220]	@ (8009f7c <HAL_DMA_Start_IT+0x474>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d04a      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a36      	ldr	r2, [pc, #216]	@ (8009f80 <HAL_DMA_Start_IT+0x478>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d045      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a34      	ldr	r2, [pc, #208]	@ (8009f84 <HAL_DMA_Start_IT+0x47c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d040      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a33      	ldr	r2, [pc, #204]	@ (8009f88 <HAL_DMA_Start_IT+0x480>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d03b      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a31      	ldr	r2, [pc, #196]	@ (8009f8c <HAL_DMA_Start_IT+0x484>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d036      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a30      	ldr	r2, [pc, #192]	@ (8009f90 <HAL_DMA_Start_IT+0x488>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d031      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8009f94 <HAL_DMA_Start_IT+0x48c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d02c      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8009f98 <HAL_DMA_Start_IT+0x490>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d027      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a2b      	ldr	r2, [pc, #172]	@ (8009f9c <HAL_DMA_Start_IT+0x494>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d022      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa0 <HAL_DMA_Start_IT+0x498>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d01d      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a28      	ldr	r2, [pc, #160]	@ (8009fa4 <HAL_DMA_Start_IT+0x49c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d018      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a27      	ldr	r2, [pc, #156]	@ (8009fa8 <HAL_DMA_Start_IT+0x4a0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a25      	ldr	r2, [pc, #148]	@ (8009fac <HAL_DMA_Start_IT+0x4a4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a24      	ldr	r2, [pc, #144]	@ (8009fb0 <HAL_DMA_Start_IT+0x4a8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d009      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a22      	ldr	r2, [pc, #136]	@ (8009fb4 <HAL_DMA_Start_IT+0x4ac>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_DMA_Start_IT+0x430>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a21      	ldr	r2, [pc, #132]	@ (8009fb8 <HAL_DMA_Start_IT+0x4b0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d108      	bne.n	8009f4a <HAL_DMA_Start_IT+0x442>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e012      	b.n	8009f70 <HAL_DMA_Start_IT+0x468>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f042 0201 	orr.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e009      	b.n	8009f70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	40020010 	.word	0x40020010
 8009f80:	40020028 	.word	0x40020028
 8009f84:	40020040 	.word	0x40020040
 8009f88:	40020058 	.word	0x40020058
 8009f8c:	40020070 	.word	0x40020070
 8009f90:	40020088 	.word	0x40020088
 8009f94:	400200a0 	.word	0x400200a0
 8009f98:	400200b8 	.word	0x400200b8
 8009f9c:	40020410 	.word	0x40020410
 8009fa0:	40020428 	.word	0x40020428
 8009fa4:	40020440 	.word	0x40020440
 8009fa8:	40020458 	.word	0x40020458
 8009fac:	40020470 	.word	0x40020470
 8009fb0:	40020488 	.word	0x40020488
 8009fb4:	400204a0 	.word	0x400204a0
 8009fb8:	400204b8 	.word	0x400204b8
 8009fbc:	58025408 	.word	0x58025408
 8009fc0:	5802541c 	.word	0x5802541c
 8009fc4:	58025430 	.word	0x58025430
 8009fc8:	58025444 	.word	0x58025444
 8009fcc:	58025458 	.word	0x58025458
 8009fd0:	5802546c 	.word	0x5802546c
 8009fd4:	58025480 	.word	0x58025480
 8009fd8:	58025494 	.word	0x58025494

08009fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fe8:	4b67      	ldr	r3, [pc, #412]	@ (800a188 <HAL_DMA_IRQHandler+0x1ac>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a67      	ldr	r2, [pc, #412]	@ (800a18c <HAL_DMA_IRQHandler+0x1b0>)
 8009fee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff2:	0a9b      	lsrs	r3, r3, #10
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ffa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a000:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a5f      	ldr	r2, [pc, #380]	@ (800a190 <HAL_DMA_IRQHandler+0x1b4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d04a      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a5d      	ldr	r2, [pc, #372]	@ (800a194 <HAL_DMA_IRQHandler+0x1b8>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d045      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a5c      	ldr	r2, [pc, #368]	@ (800a198 <HAL_DMA_IRQHandler+0x1bc>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d040      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a5a      	ldr	r2, [pc, #360]	@ (800a19c <HAL_DMA_IRQHandler+0x1c0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d03b      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a59      	ldr	r2, [pc, #356]	@ (800a1a0 <HAL_DMA_IRQHandler+0x1c4>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d036      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a57      	ldr	r2, [pc, #348]	@ (800a1a4 <HAL_DMA_IRQHandler+0x1c8>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d031      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a56      	ldr	r2, [pc, #344]	@ (800a1a8 <HAL_DMA_IRQHandler+0x1cc>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d02c      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a54      	ldr	r2, [pc, #336]	@ (800a1ac <HAL_DMA_IRQHandler+0x1d0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d027      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a53      	ldr	r2, [pc, #332]	@ (800a1b0 <HAL_DMA_IRQHandler+0x1d4>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d022      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a51      	ldr	r2, [pc, #324]	@ (800a1b4 <HAL_DMA_IRQHandler+0x1d8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d01d      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a50      	ldr	r2, [pc, #320]	@ (800a1b8 <HAL_DMA_IRQHandler+0x1dc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d018      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a4e      	ldr	r2, [pc, #312]	@ (800a1bc <HAL_DMA_IRQHandler+0x1e0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d013      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a4d      	ldr	r2, [pc, #308]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1e4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00e      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a4b      	ldr	r2, [pc, #300]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1e8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d009      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a4a      	ldr	r2, [pc, #296]	@ (800a1c8 <HAL_DMA_IRQHandler+0x1ec>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d004      	beq.n	800a0ae <HAL_DMA_IRQHandler+0xd2>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a48      	ldr	r2, [pc, #288]	@ (800a1cc <HAL_DMA_IRQHandler+0x1f0>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d101      	bne.n	800a0b2 <HAL_DMA_IRQHandler+0xd6>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <HAL_DMA_IRQHandler+0xd8>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 842b 	beq.w	800a910 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0be:	f003 031f 	and.w	r3, r3, #31
 800a0c2:	2208      	movs	r2, #8
 800a0c4:	409a      	lsls	r2, r3
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80a2 	beq.w	800a214 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a2e      	ldr	r2, [pc, #184]	@ (800a190 <HAL_DMA_IRQHandler+0x1b4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d04a      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a2d      	ldr	r2, [pc, #180]	@ (800a194 <HAL_DMA_IRQHandler+0x1b8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d045      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a2b      	ldr	r2, [pc, #172]	@ (800a198 <HAL_DMA_IRQHandler+0x1bc>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d040      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a19c <HAL_DMA_IRQHandler+0x1c0>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d03b      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a28      	ldr	r2, [pc, #160]	@ (800a1a0 <HAL_DMA_IRQHandler+0x1c4>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d036      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a27      	ldr	r2, [pc, #156]	@ (800a1a4 <HAL_DMA_IRQHandler+0x1c8>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d031      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a25      	ldr	r2, [pc, #148]	@ (800a1a8 <HAL_DMA_IRQHandler+0x1cc>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d02c      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a24      	ldr	r2, [pc, #144]	@ (800a1ac <HAL_DMA_IRQHandler+0x1d0>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d027      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a22      	ldr	r2, [pc, #136]	@ (800a1b0 <HAL_DMA_IRQHandler+0x1d4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d022      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a21      	ldr	r2, [pc, #132]	@ (800a1b4 <HAL_DMA_IRQHandler+0x1d8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d01d      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a1f      	ldr	r2, [pc, #124]	@ (800a1b8 <HAL_DMA_IRQHandler+0x1dc>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d018      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a1e      	ldr	r2, [pc, #120]	@ (800a1bc <HAL_DMA_IRQHandler+0x1e0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d013      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1e4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00e      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1e8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d009      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a19      	ldr	r2, [pc, #100]	@ (800a1c8 <HAL_DMA_IRQHandler+0x1ec>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d004      	beq.n	800a170 <HAL_DMA_IRQHandler+0x194>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a18      	ldr	r2, [pc, #96]	@ (800a1cc <HAL_DMA_IRQHandler+0x1f0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d12f      	bne.n	800a1d0 <HAL_DMA_IRQHandler+0x1f4>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0304 	and.w	r3, r3, #4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bf14      	ite	ne
 800a17e:	2301      	movne	r3, #1
 800a180:	2300      	moveq	r3, #0
 800a182:	b2db      	uxtb	r3, r3
 800a184:	e02e      	b.n	800a1e4 <HAL_DMA_IRQHandler+0x208>
 800a186:	bf00      	nop
 800a188:	24000000 	.word	0x24000000
 800a18c:	1b4e81b5 	.word	0x1b4e81b5
 800a190:	40020010 	.word	0x40020010
 800a194:	40020028 	.word	0x40020028
 800a198:	40020040 	.word	0x40020040
 800a19c:	40020058 	.word	0x40020058
 800a1a0:	40020070 	.word	0x40020070
 800a1a4:	40020088 	.word	0x40020088
 800a1a8:	400200a0 	.word	0x400200a0
 800a1ac:	400200b8 	.word	0x400200b8
 800a1b0:	40020410 	.word	0x40020410
 800a1b4:	40020428 	.word	0x40020428
 800a1b8:	40020440 	.word	0x40020440
 800a1bc:	40020458 	.word	0x40020458
 800a1c0:	40020470 	.word	0x40020470
 800a1c4:	40020488 	.word	0x40020488
 800a1c8:	400204a0 	.word	0x400204a0
 800a1cc:	400204b8 	.word	0x400204b8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bf14      	ite	ne
 800a1de:	2301      	movne	r3, #1
 800a1e0:	2300      	moveq	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d015      	beq.n	800a214 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 0204 	bic.w	r2, r2, #4
 800a1f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1fc:	f003 031f 	and.w	r3, r3, #31
 800a200:	2208      	movs	r2, #8
 800a202:	409a      	lsls	r2, r3
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a20c:	f043 0201 	orr.w	r2, r3, #1
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a218:	f003 031f 	and.w	r3, r3, #31
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	fa22 f303 	lsr.w	r3, r2, r3
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d06e      	beq.n	800a308 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a69      	ldr	r2, [pc, #420]	@ (800a3d4 <HAL_DMA_IRQHandler+0x3f8>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d04a      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a67      	ldr	r2, [pc, #412]	@ (800a3d8 <HAL_DMA_IRQHandler+0x3fc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d045      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a66      	ldr	r2, [pc, #408]	@ (800a3dc <HAL_DMA_IRQHandler+0x400>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d040      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a64      	ldr	r2, [pc, #400]	@ (800a3e0 <HAL_DMA_IRQHandler+0x404>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d03b      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a63      	ldr	r2, [pc, #396]	@ (800a3e4 <HAL_DMA_IRQHandler+0x408>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d036      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a61      	ldr	r2, [pc, #388]	@ (800a3e8 <HAL_DMA_IRQHandler+0x40c>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d031      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a60      	ldr	r2, [pc, #384]	@ (800a3ec <HAL_DMA_IRQHandler+0x410>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d02c      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a5e      	ldr	r2, [pc, #376]	@ (800a3f0 <HAL_DMA_IRQHandler+0x414>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d027      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a5d      	ldr	r2, [pc, #372]	@ (800a3f4 <HAL_DMA_IRQHandler+0x418>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d022      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a5b      	ldr	r2, [pc, #364]	@ (800a3f8 <HAL_DMA_IRQHandler+0x41c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d01d      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a5a      	ldr	r2, [pc, #360]	@ (800a3fc <HAL_DMA_IRQHandler+0x420>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d018      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a58      	ldr	r2, [pc, #352]	@ (800a400 <HAL_DMA_IRQHandler+0x424>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d013      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a57      	ldr	r2, [pc, #348]	@ (800a404 <HAL_DMA_IRQHandler+0x428>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00e      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a55      	ldr	r2, [pc, #340]	@ (800a408 <HAL_DMA_IRQHandler+0x42c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d009      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a54      	ldr	r2, [pc, #336]	@ (800a40c <HAL_DMA_IRQHandler+0x430>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d004      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x2ee>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a52      	ldr	r2, [pc, #328]	@ (800a410 <HAL_DMA_IRQHandler+0x434>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d10a      	bne.n	800a2e0 <HAL_DMA_IRQHandler+0x304>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bf14      	ite	ne
 800a2d8:	2301      	movne	r3, #1
 800a2da:	2300      	moveq	r3, #0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	e003      	b.n	800a2e8 <HAL_DMA_IRQHandler+0x30c>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00d      	beq.n	800a308 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2f0:	f003 031f 	and.w	r3, r3, #31
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	409a      	lsls	r2, r3
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a300:	f043 0202 	orr.w	r2, r3, #2
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a30c:	f003 031f 	and.w	r3, r3, #31
 800a310:	2204      	movs	r2, #4
 800a312:	409a      	lsls	r2, r3
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	4013      	ands	r3, r2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 808f 	beq.w	800a43c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a2c      	ldr	r2, [pc, #176]	@ (800a3d4 <HAL_DMA_IRQHandler+0x3f8>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d04a      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d8 <HAL_DMA_IRQHandler+0x3fc>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d045      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a29      	ldr	r2, [pc, #164]	@ (800a3dc <HAL_DMA_IRQHandler+0x400>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d040      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a27      	ldr	r2, [pc, #156]	@ (800a3e0 <HAL_DMA_IRQHandler+0x404>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d03b      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a26      	ldr	r2, [pc, #152]	@ (800a3e4 <HAL_DMA_IRQHandler+0x408>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d036      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a24      	ldr	r2, [pc, #144]	@ (800a3e8 <HAL_DMA_IRQHandler+0x40c>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d031      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a23      	ldr	r2, [pc, #140]	@ (800a3ec <HAL_DMA_IRQHandler+0x410>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d02c      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a21      	ldr	r2, [pc, #132]	@ (800a3f0 <HAL_DMA_IRQHandler+0x414>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d027      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a20      	ldr	r2, [pc, #128]	@ (800a3f4 <HAL_DMA_IRQHandler+0x418>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d022      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f8 <HAL_DMA_IRQHandler+0x41c>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d01d      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a1d      	ldr	r2, [pc, #116]	@ (800a3fc <HAL_DMA_IRQHandler+0x420>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d018      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1b      	ldr	r2, [pc, #108]	@ (800a400 <HAL_DMA_IRQHandler+0x424>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d013      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1a      	ldr	r2, [pc, #104]	@ (800a404 <HAL_DMA_IRQHandler+0x428>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00e      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a18      	ldr	r2, [pc, #96]	@ (800a408 <HAL_DMA_IRQHandler+0x42c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d009      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a17      	ldr	r2, [pc, #92]	@ (800a40c <HAL_DMA_IRQHandler+0x430>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d004      	beq.n	800a3be <HAL_DMA_IRQHandler+0x3e2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a15      	ldr	r2, [pc, #84]	@ (800a410 <HAL_DMA_IRQHandler+0x434>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d12a      	bne.n	800a414 <HAL_DMA_IRQHandler+0x438>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bf14      	ite	ne
 800a3cc:	2301      	movne	r3, #1
 800a3ce:	2300      	moveq	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	e023      	b.n	800a41c <HAL_DMA_IRQHandler+0x440>
 800a3d4:	40020010 	.word	0x40020010
 800a3d8:	40020028 	.word	0x40020028
 800a3dc:	40020040 	.word	0x40020040
 800a3e0:	40020058 	.word	0x40020058
 800a3e4:	40020070 	.word	0x40020070
 800a3e8:	40020088 	.word	0x40020088
 800a3ec:	400200a0 	.word	0x400200a0
 800a3f0:	400200b8 	.word	0x400200b8
 800a3f4:	40020410 	.word	0x40020410
 800a3f8:	40020428 	.word	0x40020428
 800a3fc:	40020440 	.word	0x40020440
 800a400:	40020458 	.word	0x40020458
 800a404:	40020470 	.word	0x40020470
 800a408:	40020488 	.word	0x40020488
 800a40c:	400204a0 	.word	0x400204a0
 800a410:	400204b8 	.word	0x400204b8
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2300      	movs	r3, #0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00d      	beq.n	800a43c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	2204      	movs	r2, #4
 800a42a:	409a      	lsls	r2, r3
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a434:	f043 0204 	orr.w	r2, r3, #4
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a440:	f003 031f 	and.w	r3, r3, #31
 800a444:	2210      	movs	r2, #16
 800a446:	409a      	lsls	r2, r3
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 80a6 	beq.w	800a59e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a85      	ldr	r2, [pc, #532]	@ (800a66c <HAL_DMA_IRQHandler+0x690>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d04a      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a83      	ldr	r2, [pc, #524]	@ (800a670 <HAL_DMA_IRQHandler+0x694>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d045      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a82      	ldr	r2, [pc, #520]	@ (800a674 <HAL_DMA_IRQHandler+0x698>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d040      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a80      	ldr	r2, [pc, #512]	@ (800a678 <HAL_DMA_IRQHandler+0x69c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d03b      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a7f      	ldr	r2, [pc, #508]	@ (800a67c <HAL_DMA_IRQHandler+0x6a0>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d036      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a7d      	ldr	r2, [pc, #500]	@ (800a680 <HAL_DMA_IRQHandler+0x6a4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d031      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a7c      	ldr	r2, [pc, #496]	@ (800a684 <HAL_DMA_IRQHandler+0x6a8>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d02c      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a7a      	ldr	r2, [pc, #488]	@ (800a688 <HAL_DMA_IRQHandler+0x6ac>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d027      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a79      	ldr	r2, [pc, #484]	@ (800a68c <HAL_DMA_IRQHandler+0x6b0>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d022      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a77      	ldr	r2, [pc, #476]	@ (800a690 <HAL_DMA_IRQHandler+0x6b4>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d01d      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a76      	ldr	r2, [pc, #472]	@ (800a694 <HAL_DMA_IRQHandler+0x6b8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d018      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a74      	ldr	r2, [pc, #464]	@ (800a698 <HAL_DMA_IRQHandler+0x6bc>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d013      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a73      	ldr	r2, [pc, #460]	@ (800a69c <HAL_DMA_IRQHandler+0x6c0>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a71      	ldr	r2, [pc, #452]	@ (800a6a0 <HAL_DMA_IRQHandler+0x6c4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a70      	ldr	r2, [pc, #448]	@ (800a6a4 <HAL_DMA_IRQHandler+0x6c8>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x516>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a6e      	ldr	r2, [pc, #440]	@ (800a6a8 <HAL_DMA_IRQHandler+0x6cc>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d10a      	bne.n	800a508 <HAL_DMA_IRQHandler+0x52c>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	e009      	b.n	800a51c <HAL_DMA_IRQHandler+0x540>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	bf14      	ite	ne
 800a516:	2301      	movne	r3, #1
 800a518:	2300      	moveq	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d03e      	beq.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	2210      	movs	r2, #16
 800a52a:	409a      	lsls	r2, r3
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d018      	beq.n	800a570 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d108      	bne.n	800a55e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	2b00      	cmp	r3, #0
 800a552:	d024      	beq.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
 800a55c:	e01f      	b.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01b      	beq.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
 800a56e:	e016      	b.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d107      	bne.n	800a58e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0208 	bic.w	r2, r2, #8
 800a58c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	409a      	lsls	r2, r3
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 8110 	beq.w	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a66c <HAL_DMA_IRQHandler+0x690>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d04a      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a2b      	ldr	r2, [pc, #172]	@ (800a670 <HAL_DMA_IRQHandler+0x694>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d045      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a29      	ldr	r2, [pc, #164]	@ (800a674 <HAL_DMA_IRQHandler+0x698>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d040      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a28      	ldr	r2, [pc, #160]	@ (800a678 <HAL_DMA_IRQHandler+0x69c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d03b      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a26      	ldr	r2, [pc, #152]	@ (800a67c <HAL_DMA_IRQHandler+0x6a0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d036      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a25      	ldr	r2, [pc, #148]	@ (800a680 <HAL_DMA_IRQHandler+0x6a4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d031      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a23      	ldr	r2, [pc, #140]	@ (800a684 <HAL_DMA_IRQHandler+0x6a8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d02c      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a22      	ldr	r2, [pc, #136]	@ (800a688 <HAL_DMA_IRQHandler+0x6ac>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d027      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a20      	ldr	r2, [pc, #128]	@ (800a68c <HAL_DMA_IRQHandler+0x6b0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d022      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a1f      	ldr	r2, [pc, #124]	@ (800a690 <HAL_DMA_IRQHandler+0x6b4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d01d      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a1d      	ldr	r2, [pc, #116]	@ (800a694 <HAL_DMA_IRQHandler+0x6b8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d018      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a1c      	ldr	r2, [pc, #112]	@ (800a698 <HAL_DMA_IRQHandler+0x6bc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d013      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a1a      	ldr	r2, [pc, #104]	@ (800a69c <HAL_DMA_IRQHandler+0x6c0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00e      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a19      	ldr	r2, [pc, #100]	@ (800a6a0 <HAL_DMA_IRQHandler+0x6c4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d009      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a17      	ldr	r2, [pc, #92]	@ (800a6a4 <HAL_DMA_IRQHandler+0x6c8>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d004      	beq.n	800a654 <HAL_DMA_IRQHandler+0x678>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a16      	ldr	r2, [pc, #88]	@ (800a6a8 <HAL_DMA_IRQHandler+0x6cc>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d12b      	bne.n	800a6ac <HAL_DMA_IRQHandler+0x6d0>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0310 	and.w	r3, r3, #16
 800a65e:	2b00      	cmp	r3, #0
 800a660:	bf14      	ite	ne
 800a662:	2301      	movne	r3, #1
 800a664:	2300      	moveq	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	e02a      	b.n	800a6c0 <HAL_DMA_IRQHandler+0x6e4>
 800a66a:	bf00      	nop
 800a66c:	40020010 	.word	0x40020010
 800a670:	40020028 	.word	0x40020028
 800a674:	40020040 	.word	0x40020040
 800a678:	40020058 	.word	0x40020058
 800a67c:	40020070 	.word	0x40020070
 800a680:	40020088 	.word	0x40020088
 800a684:	400200a0 	.word	0x400200a0
 800a688:	400200b8 	.word	0x400200b8
 800a68c:	40020410 	.word	0x40020410
 800a690:	40020428 	.word	0x40020428
 800a694:	40020440 	.word	0x40020440
 800a698:	40020458 	.word	0x40020458
 800a69c:	40020470 	.word	0x40020470
 800a6a0:	40020488 	.word	0x40020488
 800a6a4:	400204a0 	.word	0x400204a0
 800a6a8:	400204b8 	.word	0x400204b8
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	bf14      	ite	ne
 800a6ba:	2301      	movne	r3, #1
 800a6bc:	2300      	moveq	r3, #0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 8087 	beq.w	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	409a      	lsls	r2, r3
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d139      	bne.n	800a756 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0216 	bic.w	r2, r2, #22
 800a6f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	695a      	ldr	r2, [r3, #20]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a700:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d103      	bne.n	800a712 <HAL_DMA_IRQHandler+0x736>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d007      	beq.n	800a722 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0208 	bic.w	r2, r2, #8
 800a720:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	223f      	movs	r2, #63	@ 0x3f
 800a72c:	409a      	lsls	r2, r3
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 834a 	beq.w	800ade0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	4798      	blx	r3
          }
          return;
 800a754:	e344      	b.n	800ade0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d018      	beq.n	800a796 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d108      	bne.n	800a784 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a776:	2b00      	cmp	r3, #0
 800a778:	d02c      	beq.n	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
 800a782:	e027      	b.n	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d023      	beq.n	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
 800a794:	e01e      	b.n	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10f      	bne.n	800a7c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0210 	bic.w	r2, r2, #16
 800a7b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 8306 	beq.w	800adea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8088 	beq.w	800a8fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2204      	movs	r2, #4
 800a7f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a7a      	ldr	r2, [pc, #488]	@ (800a9e4 <HAL_DMA_IRQHandler+0xa08>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d04a      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a79      	ldr	r2, [pc, #484]	@ (800a9e8 <HAL_DMA_IRQHandler+0xa0c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d045      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a77      	ldr	r2, [pc, #476]	@ (800a9ec <HAL_DMA_IRQHandler+0xa10>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d040      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a76      	ldr	r2, [pc, #472]	@ (800a9f0 <HAL_DMA_IRQHandler+0xa14>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d03b      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a74      	ldr	r2, [pc, #464]	@ (800a9f4 <HAL_DMA_IRQHandler+0xa18>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d036      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a73      	ldr	r2, [pc, #460]	@ (800a9f8 <HAL_DMA_IRQHandler+0xa1c>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d031      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a71      	ldr	r2, [pc, #452]	@ (800a9fc <HAL_DMA_IRQHandler+0xa20>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d02c      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a70      	ldr	r2, [pc, #448]	@ (800aa00 <HAL_DMA_IRQHandler+0xa24>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d027      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a6e      	ldr	r2, [pc, #440]	@ (800aa04 <HAL_DMA_IRQHandler+0xa28>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d022      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a6d      	ldr	r2, [pc, #436]	@ (800aa08 <HAL_DMA_IRQHandler+0xa2c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d01d      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a6b      	ldr	r2, [pc, #428]	@ (800aa0c <HAL_DMA_IRQHandler+0xa30>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d018      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a6a      	ldr	r2, [pc, #424]	@ (800aa10 <HAL_DMA_IRQHandler+0xa34>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a68      	ldr	r2, [pc, #416]	@ (800aa14 <HAL_DMA_IRQHandler+0xa38>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00e      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a67      	ldr	r2, [pc, #412]	@ (800aa18 <HAL_DMA_IRQHandler+0xa3c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d009      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a65      	ldr	r2, [pc, #404]	@ (800aa1c <HAL_DMA_IRQHandler+0xa40>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_DMA_IRQHandler+0x8b8>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a64      	ldr	r2, [pc, #400]	@ (800aa20 <HAL_DMA_IRQHandler+0xa44>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d108      	bne.n	800a8a6 <HAL_DMA_IRQHandler+0x8ca>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0201 	bic.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e007      	b.n	800a8b6 <HAL_DMA_IRQHandler+0x8da>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d307      	bcc.n	800a8d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1f2      	bne.n	800a8b6 <HAL_DMA_IRQHandler+0x8da>
 800a8d0:	e000      	b.n	800a8d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a8d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a8ea:	e003      	b.n	800a8f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 8272 	beq.w	800adea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
 800a90e:	e26c      	b.n	800adea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a43      	ldr	r2, [pc, #268]	@ (800aa24 <HAL_DMA_IRQHandler+0xa48>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d022      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a42      	ldr	r2, [pc, #264]	@ (800aa28 <HAL_DMA_IRQHandler+0xa4c>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d01d      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a40      	ldr	r2, [pc, #256]	@ (800aa2c <HAL_DMA_IRQHandler+0xa50>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d018      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a3f      	ldr	r2, [pc, #252]	@ (800aa30 <HAL_DMA_IRQHandler+0xa54>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d013      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa34 <HAL_DMA_IRQHandler+0xa58>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00e      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a3c      	ldr	r2, [pc, #240]	@ (800aa38 <HAL_DMA_IRQHandler+0xa5c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d009      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a3a      	ldr	r2, [pc, #232]	@ (800aa3c <HAL_DMA_IRQHandler+0xa60>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d004      	beq.n	800a960 <HAL_DMA_IRQHandler+0x984>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a39      	ldr	r2, [pc, #228]	@ (800aa40 <HAL_DMA_IRQHandler+0xa64>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d101      	bne.n	800a964 <HAL_DMA_IRQHandler+0x988>
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <HAL_DMA_IRQHandler+0x98a>
 800a964:	2300      	movs	r3, #0
 800a966:	2b00      	cmp	r3, #0
 800a968:	f000 823f 	beq.w	800adea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	2204      	movs	r2, #4
 800a97e:	409a      	lsls	r2, r3
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	4013      	ands	r3, r2
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80cd 	beq.w	800ab24 <HAL_DMA_IRQHandler+0xb48>
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80c7 	beq.w	800ab24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	2204      	movs	r2, #4
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d049      	beq.n	800aa44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d109      	bne.n	800a9ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8210 	beq.w	800ade4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9cc:	e20a      	b.n	800ade4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 8206 	beq.w	800ade4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9e0:	e200      	b.n	800ade4 <HAL_DMA_IRQHandler+0xe08>
 800a9e2:	bf00      	nop
 800a9e4:	40020010 	.word	0x40020010
 800a9e8:	40020028 	.word	0x40020028
 800a9ec:	40020040 	.word	0x40020040
 800a9f0:	40020058 	.word	0x40020058
 800a9f4:	40020070 	.word	0x40020070
 800a9f8:	40020088 	.word	0x40020088
 800a9fc:	400200a0 	.word	0x400200a0
 800aa00:	400200b8 	.word	0x400200b8
 800aa04:	40020410 	.word	0x40020410
 800aa08:	40020428 	.word	0x40020428
 800aa0c:	40020440 	.word	0x40020440
 800aa10:	40020458 	.word	0x40020458
 800aa14:	40020470 	.word	0x40020470
 800aa18:	40020488 	.word	0x40020488
 800aa1c:	400204a0 	.word	0x400204a0
 800aa20:	400204b8 	.word	0x400204b8
 800aa24:	58025408 	.word	0x58025408
 800aa28:	5802541c 	.word	0x5802541c
 800aa2c:	58025430 	.word	0x58025430
 800aa30:	58025444 	.word	0x58025444
 800aa34:	58025458 	.word	0x58025458
 800aa38:	5802546c 	.word	0x5802546c
 800aa3c:	58025480 	.word	0x58025480
 800aa40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d160      	bne.n	800ab10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a7f      	ldr	r2, [pc, #508]	@ (800ac50 <HAL_DMA_IRQHandler+0xc74>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d04a      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a7d      	ldr	r2, [pc, #500]	@ (800ac54 <HAL_DMA_IRQHandler+0xc78>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d045      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a7c      	ldr	r2, [pc, #496]	@ (800ac58 <HAL_DMA_IRQHandler+0xc7c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d040      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a7a      	ldr	r2, [pc, #488]	@ (800ac5c <HAL_DMA_IRQHandler+0xc80>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d03b      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a79      	ldr	r2, [pc, #484]	@ (800ac60 <HAL_DMA_IRQHandler+0xc84>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d036      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a77      	ldr	r2, [pc, #476]	@ (800ac64 <HAL_DMA_IRQHandler+0xc88>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d031      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a76      	ldr	r2, [pc, #472]	@ (800ac68 <HAL_DMA_IRQHandler+0xc8c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d02c      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a74      	ldr	r2, [pc, #464]	@ (800ac6c <HAL_DMA_IRQHandler+0xc90>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d027      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a73      	ldr	r2, [pc, #460]	@ (800ac70 <HAL_DMA_IRQHandler+0xc94>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d022      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a71      	ldr	r2, [pc, #452]	@ (800ac74 <HAL_DMA_IRQHandler+0xc98>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d01d      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a70      	ldr	r2, [pc, #448]	@ (800ac78 <HAL_DMA_IRQHandler+0xc9c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d018      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a6e      	ldr	r2, [pc, #440]	@ (800ac7c <HAL_DMA_IRQHandler+0xca0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a6d      	ldr	r2, [pc, #436]	@ (800ac80 <HAL_DMA_IRQHandler+0xca4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00e      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a6b      	ldr	r2, [pc, #428]	@ (800ac84 <HAL_DMA_IRQHandler+0xca8>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d009      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a6a      	ldr	r2, [pc, #424]	@ (800ac88 <HAL_DMA_IRQHandler+0xcac>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d004      	beq.n	800aaee <HAL_DMA_IRQHandler+0xb12>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a68      	ldr	r2, [pc, #416]	@ (800ac8c <HAL_DMA_IRQHandler+0xcb0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d108      	bne.n	800ab00 <HAL_DMA_IRQHandler+0xb24>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0208 	bic.w	r2, r2, #8
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e007      	b.n	800ab10 <HAL_DMA_IRQHandler+0xb34>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0204 	bic.w	r2, r2, #4
 800ab0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8165 	beq.w	800ade4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab22:	e15f      	b.n	800ade4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	409a      	lsls	r2, r3
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	4013      	ands	r3, r2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80c5 	beq.w	800acc4 <HAL_DMA_IRQHandler+0xce8>
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 80bf 	beq.w	800acc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab4a:	f003 031f 	and.w	r3, r3, #31
 800ab4e:	2202      	movs	r2, #2
 800ab50:	409a      	lsls	r2, r3
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d018      	beq.n	800ab92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 813a 	beq.w	800ade8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab7c:	e134      	b.n	800ade8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8130 	beq.w	800ade8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab90:	e12a      	b.n	800ade8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f040 8089 	bne.w	800acb0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a2b      	ldr	r2, [pc, #172]	@ (800ac50 <HAL_DMA_IRQHandler+0xc74>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d04a      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a29      	ldr	r2, [pc, #164]	@ (800ac54 <HAL_DMA_IRQHandler+0xc78>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d045      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a28      	ldr	r2, [pc, #160]	@ (800ac58 <HAL_DMA_IRQHandler+0xc7c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d040      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a26      	ldr	r2, [pc, #152]	@ (800ac5c <HAL_DMA_IRQHandler+0xc80>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d03b      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a25      	ldr	r2, [pc, #148]	@ (800ac60 <HAL_DMA_IRQHandler+0xc84>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d036      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a23      	ldr	r2, [pc, #140]	@ (800ac64 <HAL_DMA_IRQHandler+0xc88>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d031      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a22      	ldr	r2, [pc, #136]	@ (800ac68 <HAL_DMA_IRQHandler+0xc8c>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d02c      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a20      	ldr	r2, [pc, #128]	@ (800ac6c <HAL_DMA_IRQHandler+0xc90>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d027      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac70 <HAL_DMA_IRQHandler+0xc94>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d022      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ac74 <HAL_DMA_IRQHandler+0xc98>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d01d      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1c      	ldr	r2, [pc, #112]	@ (800ac78 <HAL_DMA_IRQHandler+0xc9c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d018      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1a      	ldr	r2, [pc, #104]	@ (800ac7c <HAL_DMA_IRQHandler+0xca0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d013      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a19      	ldr	r2, [pc, #100]	@ (800ac80 <HAL_DMA_IRQHandler+0xca4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d00e      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a17      	ldr	r2, [pc, #92]	@ (800ac84 <HAL_DMA_IRQHandler+0xca8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d009      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a16      	ldr	r2, [pc, #88]	@ (800ac88 <HAL_DMA_IRQHandler+0xcac>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d004      	beq.n	800ac3e <HAL_DMA_IRQHandler+0xc62>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a14      	ldr	r2, [pc, #80]	@ (800ac8c <HAL_DMA_IRQHandler+0xcb0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d128      	bne.n	800ac90 <HAL_DMA_IRQHandler+0xcb4>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f022 0214 	bic.w	r2, r2, #20
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e027      	b.n	800aca0 <HAL_DMA_IRQHandler+0xcc4>
 800ac50:	40020010 	.word	0x40020010
 800ac54:	40020028 	.word	0x40020028
 800ac58:	40020040 	.word	0x40020040
 800ac5c:	40020058 	.word	0x40020058
 800ac60:	40020070 	.word	0x40020070
 800ac64:	40020088 	.word	0x40020088
 800ac68:	400200a0 	.word	0x400200a0
 800ac6c:	400200b8 	.word	0x400200b8
 800ac70:	40020410 	.word	0x40020410
 800ac74:	40020428 	.word	0x40020428
 800ac78:	40020440 	.word	0x40020440
 800ac7c:	40020458 	.word	0x40020458
 800ac80:	40020470 	.word	0x40020470
 800ac84:	40020488 	.word	0x40020488
 800ac88:	400204a0 	.word	0x400204a0
 800ac8c:	400204b8 	.word	0x400204b8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f022 020a 	bic.w	r2, r2, #10
 800ac9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8097 	beq.w	800ade8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acc2:	e091      	b.n	800ade8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acc8:	f003 031f 	and.w	r3, r3, #31
 800accc:	2208      	movs	r2, #8
 800acce:	409a      	lsls	r2, r3
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	4013      	ands	r3, r2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8088 	beq.w	800adea <HAL_DMA_IRQHandler+0xe0e>
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8082 	beq.w	800adea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a41      	ldr	r2, [pc, #260]	@ (800adf0 <HAL_DMA_IRQHandler+0xe14>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d04a      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a3f      	ldr	r2, [pc, #252]	@ (800adf4 <HAL_DMA_IRQHandler+0xe18>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d045      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a3e      	ldr	r2, [pc, #248]	@ (800adf8 <HAL_DMA_IRQHandler+0xe1c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d040      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a3c      	ldr	r2, [pc, #240]	@ (800adfc <HAL_DMA_IRQHandler+0xe20>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d03b      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a3b      	ldr	r2, [pc, #236]	@ (800ae00 <HAL_DMA_IRQHandler+0xe24>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d036      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a39      	ldr	r2, [pc, #228]	@ (800ae04 <HAL_DMA_IRQHandler+0xe28>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d031      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a38      	ldr	r2, [pc, #224]	@ (800ae08 <HAL_DMA_IRQHandler+0xe2c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d02c      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a36      	ldr	r2, [pc, #216]	@ (800ae0c <HAL_DMA_IRQHandler+0xe30>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d027      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a35      	ldr	r2, [pc, #212]	@ (800ae10 <HAL_DMA_IRQHandler+0xe34>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d022      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a33      	ldr	r2, [pc, #204]	@ (800ae14 <HAL_DMA_IRQHandler+0xe38>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d01d      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a32      	ldr	r2, [pc, #200]	@ (800ae18 <HAL_DMA_IRQHandler+0xe3c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d018      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a30      	ldr	r2, [pc, #192]	@ (800ae1c <HAL_DMA_IRQHandler+0xe40>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a2f      	ldr	r2, [pc, #188]	@ (800ae20 <HAL_DMA_IRQHandler+0xe44>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00e      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a2d      	ldr	r2, [pc, #180]	@ (800ae24 <HAL_DMA_IRQHandler+0xe48>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d009      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a2c      	ldr	r2, [pc, #176]	@ (800ae28 <HAL_DMA_IRQHandler+0xe4c>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <HAL_DMA_IRQHandler+0xdaa>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a2a      	ldr	r2, [pc, #168]	@ (800ae2c <HAL_DMA_IRQHandler+0xe50>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d108      	bne.n	800ad98 <HAL_DMA_IRQHandler+0xdbc>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 021c 	bic.w	r2, r2, #28
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	e007      	b.n	800ada8 <HAL_DMA_IRQHandler+0xdcc>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 020e 	bic.w	r2, r2, #14
 800ada6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adac:	f003 031f 	and.w	r3, r3, #31
 800adb0:	2201      	movs	r2, #1
 800adb2:	409a      	lsls	r2, r3
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
 800adde:	e004      	b.n	800adea <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ade0:	bf00      	nop
 800ade2:	e002      	b.n	800adea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ade4:	bf00      	nop
 800ade6:	e000      	b.n	800adea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ade8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800adea:	3728      	adds	r7, #40	@ 0x28
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	40020010 	.word	0x40020010
 800adf4:	40020028 	.word	0x40020028
 800adf8:	40020040 	.word	0x40020040
 800adfc:	40020058 	.word	0x40020058
 800ae00:	40020070 	.word	0x40020070
 800ae04:	40020088 	.word	0x40020088
 800ae08:	400200a0 	.word	0x400200a0
 800ae0c:	400200b8 	.word	0x400200b8
 800ae10:	40020410 	.word	0x40020410
 800ae14:	40020428 	.word	0x40020428
 800ae18:	40020440 	.word	0x40020440
 800ae1c:	40020458 	.word	0x40020458
 800ae20:	40020470 	.word	0x40020470
 800ae24:	40020488 	.word	0x40020488
 800ae28:	400204a0 	.word	0x400204a0
 800ae2c:	400204b8 	.word	0x400204b8

0800ae30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a7f      	ldr	r2, [pc, #508]	@ (800b04c <DMA_SetConfig+0x21c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d072      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a7d      	ldr	r2, [pc, #500]	@ (800b050 <DMA_SetConfig+0x220>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d06d      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a7c      	ldr	r2, [pc, #496]	@ (800b054 <DMA_SetConfig+0x224>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d068      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a7a      	ldr	r2, [pc, #488]	@ (800b058 <DMA_SetConfig+0x228>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d063      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a79      	ldr	r2, [pc, #484]	@ (800b05c <DMA_SetConfig+0x22c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d05e      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a77      	ldr	r2, [pc, #476]	@ (800b060 <DMA_SetConfig+0x230>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d059      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a76      	ldr	r2, [pc, #472]	@ (800b064 <DMA_SetConfig+0x234>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d054      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a74      	ldr	r2, [pc, #464]	@ (800b068 <DMA_SetConfig+0x238>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d04f      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a73      	ldr	r2, [pc, #460]	@ (800b06c <DMA_SetConfig+0x23c>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d04a      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a71      	ldr	r2, [pc, #452]	@ (800b070 <DMA_SetConfig+0x240>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d045      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a70      	ldr	r2, [pc, #448]	@ (800b074 <DMA_SetConfig+0x244>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d040      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a6e      	ldr	r2, [pc, #440]	@ (800b078 <DMA_SetConfig+0x248>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d03b      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a6d      	ldr	r2, [pc, #436]	@ (800b07c <DMA_SetConfig+0x24c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d036      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a6b      	ldr	r2, [pc, #428]	@ (800b080 <DMA_SetConfig+0x250>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d031      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a6a      	ldr	r2, [pc, #424]	@ (800b084 <DMA_SetConfig+0x254>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d02c      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a68      	ldr	r2, [pc, #416]	@ (800b088 <DMA_SetConfig+0x258>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d027      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a67      	ldr	r2, [pc, #412]	@ (800b08c <DMA_SetConfig+0x25c>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d022      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a65      	ldr	r2, [pc, #404]	@ (800b090 <DMA_SetConfig+0x260>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d01d      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a64      	ldr	r2, [pc, #400]	@ (800b094 <DMA_SetConfig+0x264>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d018      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a62      	ldr	r2, [pc, #392]	@ (800b098 <DMA_SetConfig+0x268>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d013      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a61      	ldr	r2, [pc, #388]	@ (800b09c <DMA_SetConfig+0x26c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00e      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a5f      	ldr	r2, [pc, #380]	@ (800b0a0 <DMA_SetConfig+0x270>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d009      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a5e      	ldr	r2, [pc, #376]	@ (800b0a4 <DMA_SetConfig+0x274>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <DMA_SetConfig+0x10a>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a5c      	ldr	r2, [pc, #368]	@ (800b0a8 <DMA_SetConfig+0x278>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d101      	bne.n	800af3e <DMA_SetConfig+0x10e>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <DMA_SetConfig+0x110>
 800af3e:	2300      	movs	r3, #0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800af4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d004      	beq.n	800af60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800af5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a39      	ldr	r2, [pc, #228]	@ (800b04c <DMA_SetConfig+0x21c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d04a      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a38      	ldr	r2, [pc, #224]	@ (800b050 <DMA_SetConfig+0x220>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d045      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a36      	ldr	r2, [pc, #216]	@ (800b054 <DMA_SetConfig+0x224>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d040      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a35      	ldr	r2, [pc, #212]	@ (800b058 <DMA_SetConfig+0x228>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d03b      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a33      	ldr	r2, [pc, #204]	@ (800b05c <DMA_SetConfig+0x22c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d036      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a32      	ldr	r2, [pc, #200]	@ (800b060 <DMA_SetConfig+0x230>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d031      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a30      	ldr	r2, [pc, #192]	@ (800b064 <DMA_SetConfig+0x234>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d02c      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a2f      	ldr	r2, [pc, #188]	@ (800b068 <DMA_SetConfig+0x238>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d027      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a2d      	ldr	r2, [pc, #180]	@ (800b06c <DMA_SetConfig+0x23c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d022      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a2c      	ldr	r2, [pc, #176]	@ (800b070 <DMA_SetConfig+0x240>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d01d      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a2a      	ldr	r2, [pc, #168]	@ (800b074 <DMA_SetConfig+0x244>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d018      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a29      	ldr	r2, [pc, #164]	@ (800b078 <DMA_SetConfig+0x248>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d013      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a27      	ldr	r2, [pc, #156]	@ (800b07c <DMA_SetConfig+0x24c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d00e      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a26      	ldr	r2, [pc, #152]	@ (800b080 <DMA_SetConfig+0x250>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d009      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a24      	ldr	r2, [pc, #144]	@ (800b084 <DMA_SetConfig+0x254>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d004      	beq.n	800b000 <DMA_SetConfig+0x1d0>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a23      	ldr	r2, [pc, #140]	@ (800b088 <DMA_SetConfig+0x258>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d101      	bne.n	800b004 <DMA_SetConfig+0x1d4>
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <DMA_SetConfig+0x1d6>
 800b004:	2300      	movs	r3, #0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d059      	beq.n	800b0be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	223f      	movs	r2, #63	@ 0x3f
 800b014:	409a      	lsls	r2, r3
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b028:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	2b40      	cmp	r3, #64	@ 0x40
 800b038:	d138      	bne.n	800b0ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b04a:	e086      	b.n	800b15a <DMA_SetConfig+0x32a>
 800b04c:	40020010 	.word	0x40020010
 800b050:	40020028 	.word	0x40020028
 800b054:	40020040 	.word	0x40020040
 800b058:	40020058 	.word	0x40020058
 800b05c:	40020070 	.word	0x40020070
 800b060:	40020088 	.word	0x40020088
 800b064:	400200a0 	.word	0x400200a0
 800b068:	400200b8 	.word	0x400200b8
 800b06c:	40020410 	.word	0x40020410
 800b070:	40020428 	.word	0x40020428
 800b074:	40020440 	.word	0x40020440
 800b078:	40020458 	.word	0x40020458
 800b07c:	40020470 	.word	0x40020470
 800b080:	40020488 	.word	0x40020488
 800b084:	400204a0 	.word	0x400204a0
 800b088:	400204b8 	.word	0x400204b8
 800b08c:	58025408 	.word	0x58025408
 800b090:	5802541c 	.word	0x5802541c
 800b094:	58025430 	.word	0x58025430
 800b098:	58025444 	.word	0x58025444
 800b09c:	58025458 	.word	0x58025458
 800b0a0:	5802546c 	.word	0x5802546c
 800b0a4:	58025480 	.word	0x58025480
 800b0a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	60da      	str	r2, [r3, #12]
}
 800b0bc:	e04d      	b.n	800b15a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a29      	ldr	r2, [pc, #164]	@ (800b168 <DMA_SetConfig+0x338>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d022      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a27      	ldr	r2, [pc, #156]	@ (800b16c <DMA_SetConfig+0x33c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d01d      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a26      	ldr	r2, [pc, #152]	@ (800b170 <DMA_SetConfig+0x340>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d018      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a24      	ldr	r2, [pc, #144]	@ (800b174 <DMA_SetConfig+0x344>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d013      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a23      	ldr	r2, [pc, #140]	@ (800b178 <DMA_SetConfig+0x348>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00e      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a21      	ldr	r2, [pc, #132]	@ (800b17c <DMA_SetConfig+0x34c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d009      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a20      	ldr	r2, [pc, #128]	@ (800b180 <DMA_SetConfig+0x350>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d004      	beq.n	800b10e <DMA_SetConfig+0x2de>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a1e      	ldr	r2, [pc, #120]	@ (800b184 <DMA_SetConfig+0x354>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d101      	bne.n	800b112 <DMA_SetConfig+0x2e2>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <DMA_SetConfig+0x2e4>
 800b112:	2300      	movs	r3, #0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d020      	beq.n	800b15a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b11c:	f003 031f 	and.w	r3, r3, #31
 800b120:	2201      	movs	r2, #1
 800b122:	409a      	lsls	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	2b40      	cmp	r3, #64	@ 0x40
 800b136:	d108      	bne.n	800b14a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	60da      	str	r2, [r3, #12]
}
 800b148:	e007      	b.n	800b15a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	60da      	str	r2, [r3, #12]
}
 800b15a:	bf00      	nop
 800b15c:	371c      	adds	r7, #28
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	58025408 	.word	0x58025408
 800b16c:	5802541c 	.word	0x5802541c
 800b170:	58025430 	.word	0x58025430
 800b174:	58025444 	.word	0x58025444
 800b178:	58025458 	.word	0x58025458
 800b17c:	5802546c 	.word	0x5802546c
 800b180:	58025480 	.word	0x58025480
 800b184:	58025494 	.word	0x58025494

0800b188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a42      	ldr	r2, [pc, #264]	@ (800b2a0 <DMA_CalcBaseAndBitshift+0x118>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d04a      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a41      	ldr	r2, [pc, #260]	@ (800b2a4 <DMA_CalcBaseAndBitshift+0x11c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d045      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a8 <DMA_CalcBaseAndBitshift+0x120>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d040      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a3e      	ldr	r2, [pc, #248]	@ (800b2ac <DMA_CalcBaseAndBitshift+0x124>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d03b      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b0 <DMA_CalcBaseAndBitshift+0x128>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d036      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b4 <DMA_CalcBaseAndBitshift+0x12c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d031      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a39      	ldr	r2, [pc, #228]	@ (800b2b8 <DMA_CalcBaseAndBitshift+0x130>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d02c      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a38      	ldr	r2, [pc, #224]	@ (800b2bc <DMA_CalcBaseAndBitshift+0x134>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d027      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a36      	ldr	r2, [pc, #216]	@ (800b2c0 <DMA_CalcBaseAndBitshift+0x138>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d022      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a35      	ldr	r2, [pc, #212]	@ (800b2c4 <DMA_CalcBaseAndBitshift+0x13c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d01d      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a33      	ldr	r2, [pc, #204]	@ (800b2c8 <DMA_CalcBaseAndBitshift+0x140>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d018      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a32      	ldr	r2, [pc, #200]	@ (800b2cc <DMA_CalcBaseAndBitshift+0x144>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d013      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a30      	ldr	r2, [pc, #192]	@ (800b2d0 <DMA_CalcBaseAndBitshift+0x148>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00e      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a2f      	ldr	r2, [pc, #188]	@ (800b2d4 <DMA_CalcBaseAndBitshift+0x14c>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d009      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a2d      	ldr	r2, [pc, #180]	@ (800b2d8 <DMA_CalcBaseAndBitshift+0x150>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d004      	beq.n	800b230 <DMA_CalcBaseAndBitshift+0xa8>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a2c      	ldr	r2, [pc, #176]	@ (800b2dc <DMA_CalcBaseAndBitshift+0x154>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d101      	bne.n	800b234 <DMA_CalcBaseAndBitshift+0xac>
 800b230:	2301      	movs	r3, #1
 800b232:	e000      	b.n	800b236 <DMA_CalcBaseAndBitshift+0xae>
 800b234:	2300      	movs	r3, #0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d024      	beq.n	800b284 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	3b10      	subs	r3, #16
 800b242:	4a27      	ldr	r2, [pc, #156]	@ (800b2e0 <DMA_CalcBaseAndBitshift+0x158>)
 800b244:	fba2 2303 	umull	r2, r3, r2, r3
 800b248:	091b      	lsrs	r3, r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f003 0307 	and.w	r3, r3, #7
 800b252:	4a24      	ldr	r2, [pc, #144]	@ (800b2e4 <DMA_CalcBaseAndBitshift+0x15c>)
 800b254:	5cd3      	ldrb	r3, [r2, r3]
 800b256:	461a      	mov	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d908      	bls.n	800b274 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	4b1f      	ldr	r3, [pc, #124]	@ (800b2e8 <DMA_CalcBaseAndBitshift+0x160>)
 800b26a:	4013      	ands	r3, r2
 800b26c:	1d1a      	adds	r2, r3, #4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	659a      	str	r2, [r3, #88]	@ 0x58
 800b272:	e00d      	b.n	800b290 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e8 <DMA_CalcBaseAndBitshift+0x160>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	6593      	str	r3, [r2, #88]	@ 0x58
 800b282:	e005      	b.n	800b290 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	40020010 	.word	0x40020010
 800b2a4:	40020028 	.word	0x40020028
 800b2a8:	40020040 	.word	0x40020040
 800b2ac:	40020058 	.word	0x40020058
 800b2b0:	40020070 	.word	0x40020070
 800b2b4:	40020088 	.word	0x40020088
 800b2b8:	400200a0 	.word	0x400200a0
 800b2bc:	400200b8 	.word	0x400200b8
 800b2c0:	40020410 	.word	0x40020410
 800b2c4:	40020428 	.word	0x40020428
 800b2c8:	40020440 	.word	0x40020440
 800b2cc:	40020458 	.word	0x40020458
 800b2d0:	40020470 	.word	0x40020470
 800b2d4:	40020488 	.word	0x40020488
 800b2d8:	400204a0 	.word	0x400204a0
 800b2dc:	400204b8 	.word	0x400204b8
 800b2e0:	aaaaaaab 	.word	0xaaaaaaab
 800b2e4:	0801e30c 	.word	0x0801e30c
 800b2e8:	fffffc00 	.word	0xfffffc00

0800b2ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d120      	bne.n	800b342 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	2b03      	cmp	r3, #3
 800b306:	d858      	bhi.n	800b3ba <DMA_CheckFifoParam+0xce>
 800b308:	a201      	add	r2, pc, #4	@ (adr r2, 800b310 <DMA_CheckFifoParam+0x24>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b333 	.word	0x0800b333
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b3bb 	.word	0x0800b3bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d048      	beq.n	800b3be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b330:	e045      	b.n	800b3be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b336:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b33a:	d142      	bne.n	800b3c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b340:	e03f      	b.n	800b3c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b34a:	d123      	bne.n	800b394 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b350:	2b03      	cmp	r3, #3
 800b352:	d838      	bhi.n	800b3c6 <DMA_CheckFifoParam+0xda>
 800b354:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <DMA_CheckFifoParam+0x70>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b36d 	.word	0x0800b36d
 800b360:	0800b373 	.word	0x0800b373
 800b364:	0800b36d 	.word	0x0800b36d
 800b368:	0800b385 	.word	0x0800b385
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]
        break;
 800b370:	e030      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d025      	beq.n	800b3ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b382:	e022      	b.n	800b3ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b388:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b38c:	d11f      	bne.n	800b3ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b392:	e01c      	b.n	800b3ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d902      	bls.n	800b3a2 <DMA_CheckFifoParam+0xb6>
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d003      	beq.n	800b3a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b3a0:	e018      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	73fb      	strb	r3, [r7, #15]
        break;
 800b3a6:	e015      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00e      	beq.n	800b3d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	e00b      	b.n	800b3d2 <DMA_CheckFifoParam+0xe6>
        break;
 800b3ba:	bf00      	nop
 800b3bc:	e00a      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        break;
 800b3be:	bf00      	nop
 800b3c0:	e008      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        break;
 800b3c2:	bf00      	nop
 800b3c4:	e006      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        break;
 800b3c6:	bf00      	nop
 800b3c8:	e004      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        break;
 800b3ca:	bf00      	nop
 800b3cc:	e002      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
        break;
 800b3ce:	bf00      	nop
 800b3d0:	e000      	b.n	800b3d4 <DMA_CheckFifoParam+0xe8>
    break;
 800b3d2:	bf00      	nop
    }
  }

  return status;
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop

0800b3e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a38      	ldr	r2, [pc, #224]	@ (800b4d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d022      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a36      	ldr	r2, [pc, #216]	@ (800b4dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d01d      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a35      	ldr	r2, [pc, #212]	@ (800b4e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d018      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a33      	ldr	r2, [pc, #204]	@ (800b4e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d013      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a32      	ldr	r2, [pc, #200]	@ (800b4e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d00e      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a30      	ldr	r2, [pc, #192]	@ (800b4ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d009      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a2f      	ldr	r2, [pc, #188]	@ (800b4f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d004      	beq.n	800b442 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a2d      	ldr	r2, [pc, #180]	@ (800b4f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d101      	bne.n	800b446 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b442:	2301      	movs	r3, #1
 800b444:	e000      	b.n	800b448 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b446:	2300      	movs	r3, #0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01a      	beq.n	800b482 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	b2db      	uxtb	r3, r3
 800b452:	3b08      	subs	r3, #8
 800b454:	4a28      	ldr	r2, [pc, #160]	@ (800b4f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b456:	fba2 2303 	umull	r2, r3, r2, r3
 800b45a:	091b      	lsrs	r3, r3, #4
 800b45c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	4b26      	ldr	r3, [pc, #152]	@ (800b4fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a24      	ldr	r2, [pc, #144]	@ (800b500 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b470:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f003 031f 	and.w	r3, r3, #31
 800b478:	2201      	movs	r2, #1
 800b47a:	409a      	lsls	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b480:	e024      	b.n	800b4cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	3b10      	subs	r3, #16
 800b48a:	4a1e      	ldr	r2, [pc, #120]	@ (800b504 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b48c:	fba2 2303 	umull	r2, r3, r2, r3
 800b490:	091b      	lsrs	r3, r3, #4
 800b492:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	4a1c      	ldr	r2, [pc, #112]	@ (800b508 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d806      	bhi.n	800b4aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	4a1b      	ldr	r2, [pc, #108]	@ (800b50c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d902      	bls.n	800b4aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4b18      	ldr	r3, [pc, #96]	@ (800b510 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b4ae:	4413      	add	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b4bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f003 031f 	and.w	r3, r3, #31
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	409a      	lsls	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b4cc:	bf00      	nop
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	58025408 	.word	0x58025408
 800b4dc:	5802541c 	.word	0x5802541c
 800b4e0:	58025430 	.word	0x58025430
 800b4e4:	58025444 	.word	0x58025444
 800b4e8:	58025458 	.word	0x58025458
 800b4ec:	5802546c 	.word	0x5802546c
 800b4f0:	58025480 	.word	0x58025480
 800b4f4:	58025494 	.word	0x58025494
 800b4f8:	cccccccd 	.word	0xcccccccd
 800b4fc:	16009600 	.word	0x16009600
 800b500:	58025880 	.word	0x58025880
 800b504:	aaaaaaab 	.word	0xaaaaaaab
 800b508:	400204b8 	.word	0x400204b8
 800b50c:	4002040f 	.word	0x4002040f
 800b510:	10008200 	.word	0x10008200
 800b514:	40020880 	.word	0x40020880

0800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d04a      	beq.n	800b5c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b08      	cmp	r3, #8
 800b532:	d847      	bhi.n	800b5c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a25      	ldr	r2, [pc, #148]	@ (800b5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d022      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a24      	ldr	r2, [pc, #144]	@ (800b5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d01d      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a22      	ldr	r2, [pc, #136]	@ (800b5d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d018      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a21      	ldr	r2, [pc, #132]	@ (800b5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a1f      	ldr	r2, [pc, #124]	@ (800b5e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d00e      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d009      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d004      	beq.n	800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d101      	bne.n	800b588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b584:	2301      	movs	r3, #1
 800b586:	e000      	b.n	800b58a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b588:	2300      	movs	r3, #0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4b17      	ldr	r3, [pc, #92]	@ (800b5f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a15      	ldr	r2, [pc, #84]	@ (800b5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b5a0:	671a      	str	r2, [r3, #112]	@ 0x70
 800b5a2:	e009      	b.n	800b5b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4b14      	ldr	r3, [pc, #80]	@ (800b5f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a11      	ldr	r2, [pc, #68]	@ (800b5fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b5b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	2201      	movs	r2, #1
 800b5be:	409a      	lsls	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	58025408 	.word	0x58025408
 800b5d4:	5802541c 	.word	0x5802541c
 800b5d8:	58025430 	.word	0x58025430
 800b5dc:	58025444 	.word	0x58025444
 800b5e0:	58025458 	.word	0x58025458
 800b5e4:	5802546c 	.word	0x5802546c
 800b5e8:	58025480 	.word	0x58025480
 800b5ec:	58025494 	.word	0x58025494
 800b5f0:	1600963f 	.word	0x1600963f
 800b5f4:	58025940 	.word	0x58025940
 800b5f8:	1000823f 	.word	0x1000823f
 800b5fc:	40020940 	.word	0x40020940

0800b600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b600:	b480      	push	{r7}
 800b602:	b089      	sub	sp, #36	@ 0x24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b60e:	4b86      	ldr	r3, [pc, #536]	@ (800b828 <HAL_GPIO_Init+0x228>)
 800b610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b612:	e18c      	b.n	800b92e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	2101      	movs	r1, #1
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	fa01 f303 	lsl.w	r3, r1, r3
 800b620:	4013      	ands	r3, r2
 800b622:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 817e 	beq.w	800b928 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	2b01      	cmp	r3, #1
 800b636:	d005      	beq.n	800b644 <HAL_GPIO_Init+0x44>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d130      	bne.n	800b6a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	2203      	movs	r2, #3
 800b650:	fa02 f303 	lsl.w	r3, r2, r3
 800b654:	43db      	mvns	r3, r3
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	4013      	ands	r3, r2
 800b65a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	fa02 f303 	lsl.w	r3, r2, r3
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	69ba      	ldr	r2, [r7, #24]
 800b672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b67a:	2201      	movs	r2, #1
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	fa02 f303 	lsl.w	r3, r2, r3
 800b682:	43db      	mvns	r3, r3
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	4013      	ands	r3, r2
 800b688:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	091b      	lsrs	r3, r3, #4
 800b690:	f003 0201 	and.w	r2, r3, #1
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	fa02 f303 	lsl.w	r3, r2, r3
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d017      	beq.n	800b6e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	2203      	movs	r2, #3
 800b6be:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c2:	43db      	mvns	r3, r3
 800b6c4:	69ba      	ldr	r2, [r7, #24]
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f003 0303 	and.w	r3, r3, #3
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d123      	bne.n	800b736 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	08da      	lsrs	r2, r3, #3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3208      	adds	r2, #8
 800b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	220f      	movs	r2, #15
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	43db      	mvns	r3, r3
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	4013      	ands	r3, r2
 800b710:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	691a      	ldr	r2, [r3, #16]
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	fa02 f303 	lsl.w	r3, r2, r3
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	4313      	orrs	r3, r2
 800b726:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	08da      	lsrs	r2, r3, #3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3208      	adds	r2, #8
 800b730:	69b9      	ldr	r1, [r7, #24]
 800b732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	2203      	movs	r2, #3
 800b742:	fa02 f303 	lsl.w	r3, r2, r3
 800b746:	43db      	mvns	r3, r3
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	4013      	ands	r3, r2
 800b74c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f003 0203 	and.w	r2, r3, #3
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	4313      	orrs	r3, r2
 800b762:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 80d8 	beq.w	800b928 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b778:	4b2c      	ldr	r3, [pc, #176]	@ (800b82c <HAL_GPIO_Init+0x22c>)
 800b77a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b77e:	4a2b      	ldr	r2, [pc, #172]	@ (800b82c <HAL_GPIO_Init+0x22c>)
 800b780:	f043 0302 	orr.w	r3, r3, #2
 800b784:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b788:	4b28      	ldr	r3, [pc, #160]	@ (800b82c <HAL_GPIO_Init+0x22c>)
 800b78a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b796:	4a26      	ldr	r2, [pc, #152]	@ (800b830 <HAL_GPIO_Init+0x230>)
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	089b      	lsrs	r3, r3, #2
 800b79c:	3302      	adds	r3, #2
 800b79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	220f      	movs	r2, #15
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	43db      	mvns	r3, r3
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b834 <HAL_GPIO_Init+0x234>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d04a      	beq.n	800b858 <HAL_GPIO_Init+0x258>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b838 <HAL_GPIO_Init+0x238>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d02b      	beq.n	800b822 <HAL_GPIO_Init+0x222>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1b      	ldr	r2, [pc, #108]	@ (800b83c <HAL_GPIO_Init+0x23c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d025      	beq.n	800b81e <HAL_GPIO_Init+0x21e>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b840 <HAL_GPIO_Init+0x240>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d01f      	beq.n	800b81a <HAL_GPIO_Init+0x21a>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a19      	ldr	r2, [pc, #100]	@ (800b844 <HAL_GPIO_Init+0x244>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d019      	beq.n	800b816 <HAL_GPIO_Init+0x216>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a18      	ldr	r2, [pc, #96]	@ (800b848 <HAL_GPIO_Init+0x248>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d013      	beq.n	800b812 <HAL_GPIO_Init+0x212>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a17      	ldr	r2, [pc, #92]	@ (800b84c <HAL_GPIO_Init+0x24c>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00d      	beq.n	800b80e <HAL_GPIO_Init+0x20e>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a16      	ldr	r2, [pc, #88]	@ (800b850 <HAL_GPIO_Init+0x250>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d007      	beq.n	800b80a <HAL_GPIO_Init+0x20a>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a15      	ldr	r2, [pc, #84]	@ (800b854 <HAL_GPIO_Init+0x254>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d101      	bne.n	800b806 <HAL_GPIO_Init+0x206>
 800b802:	2309      	movs	r3, #9
 800b804:	e029      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b806:	230a      	movs	r3, #10
 800b808:	e027      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b80a:	2307      	movs	r3, #7
 800b80c:	e025      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b80e:	2306      	movs	r3, #6
 800b810:	e023      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b812:	2305      	movs	r3, #5
 800b814:	e021      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b816:	2304      	movs	r3, #4
 800b818:	e01f      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b81a:	2303      	movs	r3, #3
 800b81c:	e01d      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b81e:	2302      	movs	r3, #2
 800b820:	e01b      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b822:	2301      	movs	r3, #1
 800b824:	e019      	b.n	800b85a <HAL_GPIO_Init+0x25a>
 800b826:	bf00      	nop
 800b828:	58000080 	.word	0x58000080
 800b82c:	58024400 	.word	0x58024400
 800b830:	58000400 	.word	0x58000400
 800b834:	58020000 	.word	0x58020000
 800b838:	58020400 	.word	0x58020400
 800b83c:	58020800 	.word	0x58020800
 800b840:	58020c00 	.word	0x58020c00
 800b844:	58021000 	.word	0x58021000
 800b848:	58021400 	.word	0x58021400
 800b84c:	58021800 	.word	0x58021800
 800b850:	58021c00 	.word	0x58021c00
 800b854:	58022400 	.word	0x58022400
 800b858:	2300      	movs	r3, #0
 800b85a:	69fa      	ldr	r2, [r7, #28]
 800b85c:	f002 0203 	and.w	r2, r2, #3
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	4093      	lsls	r3, r2
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	4313      	orrs	r3, r2
 800b868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b86a:	4938      	ldr	r1, [pc, #224]	@ (800b94c <HAL_GPIO_Init+0x34c>)
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	089b      	lsrs	r3, r3, #2
 800b870:	3302      	adds	r3, #2
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	43db      	mvns	r3, r3
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	4013      	ands	r3, r2
 800b888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b89e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b8a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	43db      	mvns	r3, r3
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b8cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	43db      	mvns	r3, r3
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	4013      	ands	r3, r2
 800b90c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	4313      	orrs	r3, r2
 800b920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	3301      	adds	r3, #1
 800b92c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f47f ae6b 	bne.w	800b614 <HAL_GPIO_Init+0x14>
  }
}
 800b93e:	bf00      	nop
 800b940:	bf00      	nop
 800b942:	3724      	adds	r7, #36	@ 0x24
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	58000400 	.word	0x58000400

0800b950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	460b      	mov	r3, r1
 800b95a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691a      	ldr	r2, [r3, #16]
 800b960:	887b      	ldrh	r3, [r7, #2]
 800b962:	4013      	ands	r3, r2
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b968:	2301      	movs	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
 800b96c:	e001      	b.n	800b972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b96e:	2300      	movs	r3, #0
 800b970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b972:	7bfb      	ldrb	r3, [r7, #15]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	807b      	strh	r3, [r7, #2]
 800b98c:	4613      	mov	r3, r2
 800b98e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b990:	787b      	ldrb	r3, [r7, #1]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b996:	887a      	ldrh	r2, [r7, #2]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b99c:	e003      	b.n	800b9a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b99e:	887b      	ldrh	r3, [r7, #2]
 800b9a0:	041a      	lsls	r2, r3, #16
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	619a      	str	r2, [r3, #24]
}
 800b9a6:	bf00      	nop
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b9bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d008      	beq.n	800b9de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b9cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9d0:	88fb      	ldrh	r3, [r7, #6]
 800b9d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b9d6:	88fb      	ldrh	r3, [r7, #6]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7f5 fc87 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b9de:	bf00      	nop
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e08b      	b.n	800bb12 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7f6 fdd0 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2224      	movs	r2, #36	@ 0x24
 800ba18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ba38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d107      	bne.n	800ba62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba5e:	609a      	str	r2, [r3, #8]
 800ba60:	e006      	b.n	800ba70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ba6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d108      	bne.n	800ba8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba86:	605a      	str	r2, [r3, #4]
 800ba88:	e007      	b.n	800ba9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6859      	ldr	r1, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb1c <HAL_I2C_Init+0x134>)
 800baa6:	430b      	orrs	r3, r1
 800baa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	691a      	ldr	r2, [r3, #16]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	69d9      	ldr	r1, [r3, #28]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0201 	orr.w	r2, r2, #1
 800baf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2220      	movs	r2, #32
 800bafe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	02008000 	.word	0x02008000

0800bb20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	d138      	bne.n	800bba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d101      	bne.n	800bb44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb40:	2302      	movs	r3, #2
 800bb42:	e032      	b.n	800bbaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2224      	movs	r2, #36	@ 0x24
 800bb50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0201 	bic.w	r2, r2, #1
 800bb62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6819      	ldr	r1, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	430a      	orrs	r2, r1
 800bb82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0201 	orr.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e000      	b.n	800bbaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bba8:	2302      	movs	r3, #2
  }
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	d139      	bne.n	800bc40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d101      	bne.n	800bbda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e033      	b.n	800bc42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2224      	movs	r2, #36	@ 0x24
 800bbe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f022 0201 	bic.w	r2, r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0201 	orr.w	r2, r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e000      	b.n	800bc42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc40:	2302      	movs	r3, #2
  }
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b086      	sub	sp, #24
 800bc52:	af02      	add	r7, sp, #8
 800bc54:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0fe      	b.n	800be5e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f00c fb5f 	bl	8018338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2203      	movs	r2, #3
 800bc7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f008 ff1b 	bl	8014ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7c1a      	ldrb	r2, [r3, #16]
 800bc94:	f88d 2000 	strb.w	r2, [sp]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc9c:	f008 fdec 	bl	8014878 <USB_CoreInit>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d005      	beq.n	800bcb2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2202      	movs	r2, #2
 800bcaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e0d5      	b.n	800be5e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f008 ff13 	bl	8014ae4 <USB_SetCurrentMode>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d005      	beq.n	800bcd0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e0c6      	b.n	800be5e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
 800bcd4:	e04a      	b.n	800bd6c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bcd6:	7bfa      	ldrb	r2, [r7, #15]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	3315      	adds	r3, #21
 800bce6:	2201      	movs	r2, #1
 800bce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bcea:	7bfa      	ldrb	r2, [r7, #15]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bcfe:	7bfa      	ldrb	r2, [r7, #15]
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
 800bd02:	b298      	uxth	r0, r3
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	4613      	mov	r3, r2
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	440b      	add	r3, r1
 800bd10:	332e      	adds	r3, #46	@ 0x2e
 800bd12:	4602      	mov	r2, r0
 800bd14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd16:	7bfa      	ldrb	r2, [r7, #15]
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	440b      	add	r3, r1
 800bd24:	3318      	adds	r3, #24
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	331c      	adds	r3, #28
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bd3e:	7bfa      	ldrb	r2, [r7, #15]
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	00db      	lsls	r3, r3, #3
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3320      	adds	r3, #32
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd52:	7bfa      	ldrb	r2, [r7, #15]
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	440b      	add	r3, r1
 800bd60:	3324      	adds	r3, #36	@ 0x24
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	73fb      	strb	r3, [r7, #15]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	791b      	ldrb	r3, [r3, #4]
 800bd70:	7bfa      	ldrb	r2, [r7, #15]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d3af      	bcc.n	800bcd6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]
 800bd7a:	e044      	b.n	800be06 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bd7c:	7bfa      	ldrb	r2, [r7, #15]
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	4613      	mov	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	440b      	add	r3, r1
 800bd8a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bd8e:	2200      	movs	r2, #0
 800bd90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd92:	7bfa      	ldrb	r2, [r7, #15]
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	00db      	lsls	r3, r3, #3
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	440b      	add	r3, r1
 800bda0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bda4:	7bfa      	ldrb	r2, [r7, #15]
 800bda6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bda8:	7bfa      	ldrb	r2, [r7, #15]
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	4613      	mov	r3, r2
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bdbe:	7bfa      	ldrb	r2, [r7, #15]
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	440b      	add	r3, r1
 800bdcc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bdd4:	7bfa      	ldrb	r2, [r7, #15]
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	440b      	add	r3, r1
 800bde2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bdea:	7bfa      	ldrb	r2, [r7, #15]
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	4413      	add	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	440b      	add	r3, r1
 800bdf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	3301      	adds	r3, #1
 800be04:	73fb      	strb	r3, [r7, #15]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	791b      	ldrb	r3, [r3, #4]
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d3b5      	bcc.n	800bd7c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7c1a      	ldrb	r2, [r3, #16]
 800be18:	f88d 2000 	strb.w	r2, [sp]
 800be1c:	3304      	adds	r3, #4
 800be1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be20:	f008 feac 	bl	8014b7c <USB_DevInit>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e013      	b.n	800be5e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7b1b      	ldrb	r3, [r3, #12]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d102      	bne.n	800be52 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f001 f96d 	bl	800d12c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f009 feeb 	bl	8015c32 <USB_DevDisconnect>

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d101      	bne.n	800be82 <HAL_PCD_Start+0x1c>
 800be7e:	2302      	movs	r3, #2
 800be80:	e022      	b.n	800bec8 <HAL_PCD_Start+0x62>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d105      	bne.n	800beaa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f008 fdf6 	bl	8014aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4618      	mov	r0, r3
 800beba:	f009 fe99 	bl	8015bf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b08d      	sub	sp, #52	@ 0x34
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f009 ff57 	bl	8015d9a <USB_GetMode>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 84b9 	bne.w	800c866 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4618      	mov	r0, r3
 800befa:	f009 febb 	bl	8015c74 <USB_ReadInterrupts>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 84af 	beq.w	800c864 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	0a1b      	lsrs	r3, r3, #8
 800bf10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f009 fea8 	bl	8015c74 <USB_ReadInterrupts>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f003 0302 	and.w	r3, r3, #2
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d107      	bne.n	800bf3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	695a      	ldr	r2, [r3, #20]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f002 0202 	and.w	r2, r2, #2
 800bf3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f009 fe96 	bl	8015c74 <USB_ReadInterrupts>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f003 0310 	and.w	r3, r3, #16
 800bf4e:	2b10      	cmp	r3, #16
 800bf50:	d161      	bne.n	800c016 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	699a      	ldr	r2, [r3, #24]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f022 0210 	bic.w	r2, r2, #16
 800bf60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f003 020f 	and.w	r2, r3, #15
 800bf6e:	4613      	mov	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	3304      	adds	r3, #4
 800bf80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	0c5b      	lsrs	r3, r3, #17
 800bf86:	f003 030f 	and.w	r3, r3, #15
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d124      	bne.n	800bfd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bf94:	4013      	ands	r3, r2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d035      	beq.n	800c006 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	091b      	lsrs	r3, r3, #4
 800bfa2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bfa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	461a      	mov	r2, r3
 800bfac:	6a38      	ldr	r0, [r7, #32]
 800bfae:	f009 fccd 	bl	801594c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	68da      	ldr	r2, [r3, #12]
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	091b      	lsrs	r3, r3, #4
 800bfba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfbe:	441a      	add	r2, r3
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	695a      	ldr	r2, [r3, #20]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	091b      	lsrs	r3, r3, #4
 800bfcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfd0:	441a      	add	r2, r3
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	615a      	str	r2, [r3, #20]
 800bfd6:	e016      	b.n	800c006 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	0c5b      	lsrs	r3, r3, #17
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	2b06      	cmp	r3, #6
 800bfe2:	d110      	bne.n	800c006 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfea:	2208      	movs	r2, #8
 800bfec:	4619      	mov	r1, r3
 800bfee:	6a38      	ldr	r0, [r7, #32]
 800bff0:	f009 fcac 	bl	801594c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	695a      	ldr	r2, [r3, #20]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	091b      	lsrs	r3, r3, #4
 800bffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c000:	441a      	add	r2, r3
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f042 0210 	orr.w	r2, r2, #16
 800c014:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f009 fe2a 	bl	8015c74 <USB_ReadInterrupts>
 800c020:	4603      	mov	r3, r0
 800c022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c026:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c02a:	f040 80a7 	bne.w	800c17c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f009 fe2f 	bl	8015c9a <USB_ReadDevAllOutEpInterrupt>
 800c03c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c03e:	e099      	b.n	800c174 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 808e 	beq.w	800c168 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c052:	b2d2      	uxtb	r2, r2
 800c054:	4611      	mov	r1, r2
 800c056:	4618      	mov	r0, r3
 800c058:	f009 fe53 	bl	8015d02 <USB_ReadDevOutEPInterrupt>
 800c05c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c074:	461a      	mov	r2, r3
 800c076:	2301      	movs	r3, #1
 800c078:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c07a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fecf 	bl	800ce20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f003 0308 	and.w	r3, r3, #8
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c098:	461a      	mov	r2, r3
 800c09a:	2308      	movs	r3, #8
 800c09c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c09e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 ffa5 	bl	800cff0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f003 0310 	and.w	r3, r3, #16
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d008      	beq.n	800c0c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2310      	movs	r3, #16
 800c0c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d030      	beq.n	800c12e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d4:	2b80      	cmp	r3, #128	@ 0x80
 800c0d6:	d109      	bne.n	800c0ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	69fa      	ldr	r2, [r7, #28]
 800c0e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c0ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c0ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	3304      	adds	r3, #4
 800c100:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	78db      	ldrb	r3, [r3, #3]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d108      	bne.n	800c11c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2200      	movs	r2, #0
 800c10e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	b2db      	uxtb	r3, r3
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f00c fa06 	bl	8018528 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c128:	461a      	mov	r2, r3
 800c12a:	2302      	movs	r3, #2
 800c12c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f003 0320 	and.w	r3, r3, #32
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c144:	461a      	mov	r2, r3
 800c146:	2320      	movs	r3, #32
 800c148:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d009      	beq.n	800c168 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c160:	461a      	mov	r2, r3
 800c162:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c166:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	3301      	adds	r3, #1
 800c16c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c170:	085b      	lsrs	r3, r3, #1
 800c172:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	2b00      	cmp	r3, #0
 800c178:	f47f af62 	bne.w	800c040 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f009 fd77 	bl	8015c74 <USB_ReadInterrupts>
 800c186:	4603      	mov	r3, r0
 800c188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c18c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c190:	f040 80db 	bne.w	800c34a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	f009 fd98 	bl	8015cce <USB_ReadDevAllInEpInterrupt>
 800c19e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c1a4:	e0cd      	b.n	800c342 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 80c2 	beq.w	800c336 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b8:	b2d2      	uxtb	r2, r2
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f009 fdbe 	bl	8015d3e <USB_ReadDevInEPInterrupt>
 800c1c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d057      	beq.n	800c27e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	f003 030f 	and.w	r3, r3, #15
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	43db      	mvns	r3, r3
 800c1e8:	69f9      	ldr	r1, [r7, #28]
 800c1ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fe:	461a      	mov	r2, r3
 800c200:	2301      	movs	r3, #1
 800c202:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	799b      	ldrb	r3, [r3, #6]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d132      	bne.n	800c272 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c210:	4613      	mov	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	440b      	add	r3, r1
 800c21a:	3320      	adds	r3, #32
 800c21c:	6819      	ldr	r1, [r3, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c222:	4613      	mov	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	4413      	add	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4403      	add	r3, r0
 800c22c:	331c      	adds	r3, #28
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4419      	add	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4403      	add	r3, r0
 800c240:	3320      	adds	r3, #32
 800c242:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	d113      	bne.n	800c272 <HAL_PCD_IRQHandler+0x3a2>
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c24e:	4613      	mov	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	440b      	add	r3, r1
 800c258:	3324      	adds	r3, #36	@ 0x24
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d108      	bne.n	800c272 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c26a:	461a      	mov	r2, r3
 800c26c:	2101      	movs	r1, #1
 800c26e:	f009 fdc7 	bl	8015e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	b2db      	uxtb	r3, r3
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f00c f8d0 	bl	801841e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c294:	461a      	mov	r2, r3
 800c296:	2308      	movs	r3, #8
 800c298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d008      	beq.n	800c2b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	015a      	lsls	r2, r3, #5
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	2310      	movs	r3, #16
 800c2b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d008      	beq.n	800c2d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d023      	beq.n	800c324 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c2dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2de:	6a38      	ldr	r0, [r7, #32]
 800c2e0:	f008 fdaa 	bl	8014e38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c2e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	3310      	adds	r3, #16
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	78db      	ldrb	r3, [r3, #3]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d108      	bne.n	800c312 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2200      	movs	r2, #0
 800c304:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f00c f91d 	bl	801854c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c31e:	461a      	mov	r2, r3
 800c320:	2302      	movs	r3, #2
 800c322:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c32e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fce8 	bl	800cd06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c338:	3301      	adds	r3, #1
 800c33a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33e:	085b      	lsrs	r3, r3, #1
 800c340:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c344:	2b00      	cmp	r3, #0
 800c346:	f47f af2e 	bne.w	800c1a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4618      	mov	r0, r3
 800c350:	f009 fc90 	bl	8015c74 <USB_ReadInterrupts>
 800c354:	4603      	mov	r3, r0
 800c356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c35a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c35e:	d122      	bne.n	800c3a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	69fa      	ldr	r2, [r7, #28]
 800c36a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d108      	bne.n	800c390 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c386:	2100      	movs	r1, #0
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fef3 	bl	800d174 <HAL_PCDEx_LPM_Callback>
 800c38e:	e002      	b.n	800c396 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f00c f8bb 	bl	801850c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	695a      	ldr	r2, [r3, #20]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c3a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f009 fc62 	bl	8015c74 <USB_ReadInterrupts>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3ba:	d112      	bne.n	800c3e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d102      	bne.n	800c3d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f00c f877 	bl	80184c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	695a      	ldr	r2, [r3, #20]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c3e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f009 fc44 	bl	8015c74 <USB_ReadInterrupts>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3f6:	d121      	bne.n	800c43c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	695a      	ldr	r2, [r3, #20]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c406:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d111      	bne.n	800c436 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c420:	089b      	lsrs	r3, r3, #2
 800c422:	f003 020f 	and.w	r2, r3, #15
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c42c:	2101      	movs	r1, #1
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fea0 	bl	800d174 <HAL_PCDEx_LPM_Callback>
 800c434:	e002      	b.n	800c43c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f00c f842 	bl	80184c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4618      	mov	r0, r3
 800c442:	f009 fc17 	bl	8015c74 <USB_ReadInterrupts>
 800c446:	4603      	mov	r3, r0
 800c448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c44c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c450:	f040 80b7 	bne.w	800c5c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c462:	f023 0301 	bic.w	r3, r3, #1
 800c466:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2110      	movs	r1, #16
 800c46e:	4618      	mov	r0, r3
 800c470:	f008 fce2 	bl	8014e38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c474:	2300      	movs	r3, #0
 800c476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c478:	e046      	b.n	800c508 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47c:	015a      	lsls	r2, r3, #5
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	4413      	add	r3, r2
 800c482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c486:	461a      	mov	r2, r3
 800c488:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c48c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c49e:	0151      	lsls	r1, r2, #5
 800c4a0:	69fa      	ldr	r2, [r7, #28]
 800c4a2:	440a      	add	r2, r1
 800c4a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c4c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4f2:	0151      	lsls	r1, r2, #5
 800c4f4:	69fa      	ldr	r2, [r7, #28]
 800c4f6:	440a      	add	r2, r1
 800c4f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c500:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	3301      	adds	r3, #1
 800c506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	791b      	ldrb	r3, [r3, #4]
 800c50c:	461a      	mov	r2, r3
 800c50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c510:	4293      	cmp	r3, r2
 800c512:	d3b2      	bcc.n	800c47a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c522:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c526:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7bdb      	ldrb	r3, [r3, #15]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d016      	beq.n	800c55e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c53a:	69fa      	ldr	r2, [r7, #28]
 800c53c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c540:	f043 030b 	orr.w	r3, r3, #11
 800c544:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c556:	f043 030b 	orr.w	r3, r3, #11
 800c55a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c55c:	e015      	b.n	800c58a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c564:	695a      	ldr	r2, [r3, #20]
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c56c:	4619      	mov	r1, r3
 800c56e:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c572:	4313      	orrs	r3, r2
 800c574:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c584:	f043 030b 	orr.w	r3, r3, #11
 800c588:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69fa      	ldr	r2, [r7, #28]
 800c594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c598:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c59c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	f009 fc27 	bl	8015e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695a      	ldr	r2, [r3, #20]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c5c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f009 fb54 	bl	8015c74 <USB_ReadInterrupts>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5d6:	d123      	bne.n	800c620 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f009 fbeb 	bl	8015db8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f008 fc9f 	bl	8014f2a <USB_GetDevSpeed>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681c      	ldr	r4, [r3, #0]
 800c5f8:	f001 fd1c 	bl	800e034 <HAL_RCC_GetHCLKFreq>
 800c5fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c602:	461a      	mov	r2, r3
 800c604:	4620      	mov	r0, r4
 800c606:	f008 f9a9 	bl	801495c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f00b ff2f 	bl	801846e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	695a      	ldr	r2, [r3, #20]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c61e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f009 fb25 	bl	8015c74 <USB_ReadInterrupts>
 800c62a:	4603      	mov	r3, r0
 800c62c:	f003 0308 	and.w	r3, r3, #8
 800c630:	2b08      	cmp	r3, #8
 800c632:	d10a      	bne.n	800c64a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f00b ff0c 	bl	8018452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	695a      	ldr	r2, [r3, #20]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f002 0208 	and.w	r2, r2, #8
 800c648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f009 fb10 	bl	8015c74 <USB_ReadInterrupts>
 800c654:	4603      	mov	r3, r0
 800c656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c65a:	2b80      	cmp	r3, #128	@ 0x80
 800c65c:	d123      	bne.n	800c6a6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c66a:	2301      	movs	r3, #1
 800c66c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c66e:	e014      	b.n	800c69a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c674:	4613      	mov	r3, r2
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	4413      	add	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	440b      	add	r3, r1
 800c67e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d105      	bne.n	800c694 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fb08 	bl	800cca4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	3301      	adds	r3, #1
 800c698:	627b      	str	r3, [r7, #36]	@ 0x24
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	791b      	ldrb	r3, [r3, #4]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d3e4      	bcc.n	800c670 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f009 fae2 	bl	8015c74 <USB_ReadInterrupts>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c6b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6ba:	d13c      	bne.n	800c736 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6bc:	2301      	movs	r3, #1
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6c0:	e02b      	b.n	800c71a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6d2:	6879      	ldr	r1, [r7, #4]
 800c6d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	440b      	add	r3, r1
 800c6e0:	3318      	adds	r3, #24
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d115      	bne.n	800c714 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c6e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da12      	bge.n	800c714 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	4413      	add	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3317      	adds	r3, #23
 800c6fe:	2201      	movs	r2, #1
 800c700:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	b2db      	uxtb	r3, r3
 800c706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fac8 	bl	800cca4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	3301      	adds	r3, #1
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	791b      	ldrb	r3, [r3, #4]
 800c71e:	461a      	mov	r2, r3
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	4293      	cmp	r3, r2
 800c724:	d3cd      	bcc.n	800c6c2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	695a      	ldr	r2, [r3, #20]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f009 fa9a 	bl	8015c74 <USB_ReadInterrupts>
 800c740:	4603      	mov	r3, r0
 800c742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c74a:	d156      	bne.n	800c7fa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c74c:	2301      	movs	r3, #1
 800c74e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c750:	e045      	b.n	800c7de <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c762:	6879      	ldr	r1, [r7, #4]
 800c764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c766:	4613      	mov	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	440b      	add	r3, r1
 800c770:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d12e      	bne.n	800c7d8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c77a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da2b      	bge.n	800c7d8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c78c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c790:	429a      	cmp	r2, r3
 800c792:	d121      	bne.n	800c7d8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c798:	4613      	mov	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	440b      	add	r3, r1
 800c7a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	69fa      	ldr	r2, [r7, #28]
 800c7cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c7d4:	6053      	str	r3, [r2, #4]
            break;
 800c7d6:	e008      	b.n	800c7ea <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	3301      	adds	r3, #1
 800c7dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	791b      	ldrb	r3, [r3, #4]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d3b3      	bcc.n	800c752 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	695a      	ldr	r2, [r3, #20]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c7f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f009 fa38 	bl	8015c74 <USB_ReadInterrupts>
 800c804:	4603      	mov	r3, r0
 800c806:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80e:	d10a      	bne.n	800c826 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f00b fead 	bl	8018570 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	695a      	ldr	r2, [r3, #20]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f009 fa22 	bl	8015c74 <USB_ReadInterrupts>
 800c830:	4603      	mov	r3, r0
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	2b04      	cmp	r3, #4
 800c838:	d115      	bne.n	800c866 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f00b fe9d 	bl	801858c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6859      	ldr	r1, [r3, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	69ba      	ldr	r2, [r7, #24]
 800c85e:	430a      	orrs	r2, r1
 800c860:	605a      	str	r2, [r3, #4]
 800c862:	e000      	b.n	800c866 <HAL_PCD_IRQHandler+0x996>
      return;
 800c864:	bf00      	nop
    }
  }
}
 800c866:	3734      	adds	r7, #52	@ 0x34
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd90      	pop	{r4, r7, pc}

0800c86c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_PCD_SetAddress+0x1a>
 800c882:	2302      	movs	r3, #2
 800c884:	e012      	b.n	800c8ac <HAL_PCD_SetAddress+0x40>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	78fa      	ldrb	r2, [r7, #3]
 800c892:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	4611      	mov	r1, r2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f009 f981 	bl	8015ba4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	4608      	mov	r0, r1
 800c8be:	4611      	mov	r1, r2
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	70fb      	strb	r3, [r7, #3]
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	803b      	strh	r3, [r7, #0]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	da0f      	bge.n	800c8fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	f003 020f 	and.w	r2, r3, #15
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	4413      	add	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	3310      	adds	r3, #16
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	705a      	strb	r2, [r3, #1]
 800c8f8:	e00f      	b.n	800c91a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8fa:	78fb      	ldrb	r3, [r7, #3]
 800c8fc:	f003 020f 	and.w	r2, r3, #15
 800c900:	4613      	mov	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	4413      	add	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4413      	add	r3, r2
 800c910:	3304      	adds	r3, #4
 800c912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	f003 030f 	and.w	r3, r3, #15
 800c920:	b2da      	uxtb	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c926:	883a      	ldrh	r2, [r7, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	78ba      	ldrb	r2, [r7, #2]
 800c930:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	785b      	ldrb	r3, [r3, #1]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d004      	beq.n	800c944 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c944:	78bb      	ldrb	r3, [r7, #2]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d102      	bne.n	800c950 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c956:	2b01      	cmp	r3, #1
 800c958:	d101      	bne.n	800c95e <HAL_PCD_EP_Open+0xaa>
 800c95a:	2302      	movs	r3, #2
 800c95c:	e00e      	b.n	800c97c <HAL_PCD_EP_Open+0xc8>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68f9      	ldr	r1, [r7, #12]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f008 fb01 	bl	8014f74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c97a:	7afb      	ldrb	r3, [r7, #11]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da0f      	bge.n	800c9b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	f003 020f 	and.w	r2, r3, #15
 800c99e:	4613      	mov	r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	4413      	add	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	3310      	adds	r3, #16
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	705a      	strb	r2, [r3, #1]
 800c9b6:	e00f      	b.n	800c9d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9b8:	78fb      	ldrb	r3, [r7, #3]
 800c9ba:	f003 020f 	and.w	r2, r3, #15
 800c9be:	4613      	mov	r3, r2
 800c9c0:	00db      	lsls	r3, r3, #3
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9d8:	78fb      	ldrb	r3, [r7, #3]
 800c9da:	f003 030f 	and.w	r3, r3, #15
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d101      	bne.n	800c9f2 <HAL_PCD_EP_Close+0x6e>
 800c9ee:	2302      	movs	r3, #2
 800c9f0:	e00e      	b.n	800ca10 <HAL_PCD_EP_Close+0x8c>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f008 fb3f 	bl	8015084 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	607a      	str	r2, [r7, #4]
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	460b      	mov	r3, r1
 800ca26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	f003 020f 	and.w	r2, r3, #15
 800ca2e:	4613      	mov	r3, r2
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	3304      	adds	r3, #4
 800ca40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2200      	movs	r2, #0
 800ca52:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2200      	movs	r2, #0
 800ca58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	799b      	ldrb	r3, [r3, #6]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d102      	bne.n	800ca74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	799b      	ldrb	r3, [r3, #6]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6979      	ldr	r1, [r7, #20]
 800ca80:	f008 fbdc 	bl	801523c <USB_EPStartXfer>

  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b083      	sub	sp, #12
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	460b      	mov	r3, r1
 800ca98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca9a:	78fb      	ldrb	r3, [r7, #3]
 800ca9c:	f003 020f 	and.w	r2, r3, #15
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4613      	mov	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	440b      	add	r3, r1
 800caac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800cab0:	681b      	ldr	r3, [r3, #0]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b086      	sub	sp, #24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
 800caca:	460b      	mov	r3, r1
 800cacc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cace:	7afb      	ldrb	r3, [r7, #11]
 800cad0:	f003 020f 	and.w	r2, r3, #15
 800cad4:	4613      	mov	r3, r2
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	3310      	adds	r3, #16
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	4413      	add	r3, r2
 800cae2:	3304      	adds	r3, #4
 800cae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2200      	movs	r2, #0
 800caf6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2201      	movs	r2, #1
 800cafc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	799b      	ldrb	r3, [r3, #6]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d102      	bne.n	800cb18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	799b      	ldrb	r3, [r3, #6]
 800cb20:	461a      	mov	r2, r3
 800cb22:	6979      	ldr	r1, [r7, #20]
 800cb24:	f008 fb8a 	bl	801523c <USB_EPStartXfer>

  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	f003 030f 	and.w	r3, r3, #15
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	7912      	ldrb	r2, [r2, #4]
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d901      	bls.n	800cb50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e04f      	b.n	800cbf0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	da0f      	bge.n	800cb78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	f003 020f 	and.w	r2, r3, #15
 800cb5e:	4613      	mov	r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	4413      	add	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	3310      	adds	r3, #16
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2201      	movs	r2, #1
 800cb74:	705a      	strb	r2, [r3, #1]
 800cb76:	e00d      	b.n	800cb94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cb78:	78fa      	ldrb	r2, [r7, #3]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	f003 030f 	and.w	r3, r3, #15
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <HAL_PCD_EP_SetStall+0x82>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e01d      	b.n	800cbf0 <HAL_PCD_EP_SetStall+0xbe>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68f9      	ldr	r1, [r7, #12]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f008 ff1a 	bl	80159fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	f003 030f 	and.w	r3, r3, #15
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d109      	bne.n	800cbe6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6818      	ldr	r0, [r3, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	7999      	ldrb	r1, [r3, #6]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f009 f90d 	bl	8015e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cc04:	78fb      	ldrb	r3, [r7, #3]
 800cc06:	f003 030f 	and.w	r3, r3, #15
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	7912      	ldrb	r2, [r2, #4]
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d901      	bls.n	800cc16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e042      	b.n	800cc9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cc16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da0f      	bge.n	800cc3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc1e:	78fb      	ldrb	r3, [r7, #3]
 800cc20:	f003 020f 	and.w	r2, r3, #15
 800cc24:	4613      	mov	r3, r2
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	3310      	adds	r3, #16
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	3304      	adds	r3, #4
 800cc34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	705a      	strb	r2, [r3, #1]
 800cc3c:	e00f      	b.n	800cc5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc3e:	78fb      	ldrb	r3, [r7, #3]
 800cc40:	f003 020f 	and.w	r2, r3, #15
 800cc44:	4613      	mov	r3, r2
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	4413      	add	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	3304      	adds	r3, #4
 800cc56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d101      	bne.n	800cc7e <HAL_PCD_EP_ClrStall+0x86>
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	e00e      	b.n	800cc9c <HAL_PCD_EP_ClrStall+0xa4>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f008 ff23 	bl	8015ad8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ccb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	da0c      	bge.n	800ccd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	f003 020f 	and.w	r2, r3, #15
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	4413      	add	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	3310      	adds	r3, #16
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4413      	add	r3, r2
 800cccc:	3304      	adds	r3, #4
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e00c      	b.n	800ccec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccd2:	78fb      	ldrb	r3, [r7, #3]
 800ccd4:	f003 020f 	and.w	r2, r3, #15
 800ccd8:	4613      	mov	r3, r2
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	4413      	add	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	4413      	add	r3, r2
 800cce8:	3304      	adds	r3, #4
 800ccea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68f9      	ldr	r1, [r7, #12]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f008 fd42 	bl	801577c <USB_EPStopXfer>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ccfc:	7afb      	ldrb	r3, [r7, #11]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b08a      	sub	sp, #40	@ 0x28
 800cd0a:	af02      	add	r7, sp, #8
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	4413      	add	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	3310      	adds	r3, #16
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	4413      	add	r3, r2
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	695a      	ldr	r2, [r3, #20]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d901      	bls.n	800cd3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e06b      	b.n	800ce16 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	691a      	ldr	r2, [r3, #16]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	69fa      	ldr	r2, [r7, #28]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d902      	bls.n	800cd5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	3303      	adds	r3, #3
 800cd5e:	089b      	lsrs	r3, r3, #2
 800cd60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd62:	e02a      	b.n	800cdba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	691a      	ldr	r2, [r3, #16]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d902      	bls.n	800cd80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	3303      	adds	r3, #3
 800cd84:	089b      	lsrs	r3, r3, #2
 800cd86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	68d9      	ldr	r1, [r3, #12]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	6978      	ldr	r0, [r7, #20]
 800cd9e:	f008 fd97 	bl	80158d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	441a      	add	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	695a      	ldr	r2, [r3, #20]
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cdca:	69ba      	ldr	r2, [r7, #24]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d809      	bhi.n	800cde4 <PCD_WriteEmptyTxFifo+0xde>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	695a      	ldr	r2, [r3, #20]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d203      	bcs.n	800cde4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1bf      	bne.n	800cd64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	691a      	ldr	r2, [r3, #16]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d811      	bhi.n	800ce14 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	43db      	mvns	r3, r3
 800ce0a:	6939      	ldr	r1, [r7, #16]
 800ce0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce10:	4013      	ands	r3, r2
 800ce12:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	333c      	adds	r3, #60	@ 0x3c
 800ce38:	3304      	adds	r3, #4
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	015a      	lsls	r2, r3, #5
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	4413      	add	r3, r2
 800ce46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	799b      	ldrb	r3, [r3, #6]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d17b      	bne.n	800cf4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d015      	beq.n	800ce8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4a61      	ldr	r2, [pc, #388]	@ (800cfe8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	f240 80b9 	bls.w	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80b3 	beq.w	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	015a      	lsls	r2, r3, #5
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce82:	461a      	mov	r2, r3
 800ce84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce88:	6093      	str	r3, [r2, #8]
 800ce8a:	e0a7      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d009      	beq.n	800ceaa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cea2:	461a      	mov	r2, r3
 800cea4:	2320      	movs	r3, #32
 800cea6:	6093      	str	r3, [r2, #8]
 800cea8:	e098      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8093 	bne.w	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	4a4b      	ldr	r2, [pc, #300]	@ (800cfe8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d90f      	bls.n	800cede <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ced4:	461a      	mov	r2, r3
 800ced6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ceda:	6093      	str	r3, [r2, #8]
 800cedc:	e07e      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4613      	mov	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	4413      	add	r3, r2
 800cef0:	3304      	adds	r3, #4
 800cef2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6a1a      	ldr	r2, [r3, #32]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	0159      	lsls	r1, r3, #5
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	440b      	add	r3, r1
 800cf00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d114      	bne.n	800cf40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d109      	bne.n	800cf32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf28:	461a      	mov	r2, r3
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	f008 ff68 	bl	8015e00 <USB_EP0_OutStart>
 800cf30:	e006      	b.n	800cf40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	441a      	add	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f00b fa4e 	bl	80183e8 <HAL_PCD_DataOutStageCallback>
 800cf4c:	e046      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	4a26      	ldr	r2, [pc, #152]	@ (800cfec <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d124      	bne.n	800cfa0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf72:	6093      	str	r3, [r2, #8]
 800cf74:	e032      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d008      	beq.n	800cf92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	015a      	lsls	r2, r3, #5
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	4413      	add	r3, r2
 800cf88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	2320      	movs	r3, #32
 800cf90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f00b fa25 	bl	80183e8 <HAL_PCD_DataOutStageCallback>
 800cf9e:	e01d      	b.n	800cfdc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d114      	bne.n	800cfd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cfa6:	6879      	ldr	r1, [r7, #4]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	440b      	add	r3, r1
 800cfb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d108      	bne.n	800cfd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfc8:	461a      	mov	r2, r3
 800cfca:	2100      	movs	r1, #0
 800cfcc:	f008 ff18 	bl	8015e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f00b fa06 	bl	80183e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	4f54300a 	.word	0x4f54300a
 800cfec:	4f54310a 	.word	0x4f54310a

0800cff0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	333c      	adds	r3, #60	@ 0x3c
 800d008:	3304      	adds	r3, #4
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	015a      	lsls	r2, r3, #5
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	4413      	add	r3, r2
 800d016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	4a15      	ldr	r2, [pc, #84]	@ (800d078 <PCD_EP_OutSetupPacket_int+0x88>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d90e      	bls.n	800d044 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d009      	beq.n	800d044 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d03c:	461a      	mov	r2, r3
 800d03e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d042:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f00b f9bd 	bl	80183c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4a0a      	ldr	r2, [pc, #40]	@ (800d078 <PCD_EP_OutSetupPacket_int+0x88>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d90c      	bls.n	800d06c <PCD_EP_OutSetupPacket_int+0x7c>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	799b      	ldrb	r3, [r3, #6]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d108      	bne.n	800d06c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d064:	461a      	mov	r2, r3
 800d066:	2101      	movs	r1, #1
 800d068:	f008 feca 	bl	8015e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	4f54300a 	.word	0x4f54300a

0800d07c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
 800d088:	4613      	mov	r3, r2
 800d08a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d094:	78fb      	ldrb	r3, [r7, #3]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d107      	bne.n	800d0aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d09a:	883b      	ldrh	r3, [r7, #0]
 800d09c:	0419      	lsls	r1, r3, #16
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d0a8:	e028      	b.n	800d0fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b0:	0c1b      	lsrs	r3, r3, #16
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
 800d0bc:	e00d      	b.n	800d0da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	3340      	adds	r3, #64	@ 0x40
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	0c1b      	lsrs	r3, r3, #16
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	73fb      	strb	r3, [r7, #15]
 800d0da:	7bfa      	ldrb	r2, [r7, #15]
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d3ec      	bcc.n	800d0be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d0e4:	883b      	ldrh	r3, [r7, #0]
 800d0e6:	0418      	lsls	r0, r3, #16
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6819      	ldr	r1, [r3, #0]
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	4302      	orrs	r2, r0
 800d0f4:	3340      	adds	r3, #64	@ 0x40
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	440b      	add	r3, r1
 800d0fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	887a      	ldrh	r2, [r7, #2]
 800d11c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d15a:	4b05      	ldr	r3, [pc, #20]	@ (800d170 <HAL_PCDEx_ActivateLPM+0x44>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3714      	adds	r7, #20
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	10000003 	.word	0x10000003

0800d174 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d194:	4b19      	ldr	r3, [pc, #100]	@ (800d1fc <HAL_PWREx_ConfigSupply+0x70>)
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	d00a      	beq.n	800d1b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d1a0:	4b16      	ldr	r3, [pc, #88]	@ (800d1fc <HAL_PWREx_ConfigSupply+0x70>)
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	f003 0307 	and.w	r3, r3, #7
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d001      	beq.n	800d1b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e01f      	b.n	800d1f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e01d      	b.n	800d1f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d1b6:	4b11      	ldr	r3, [pc, #68]	@ (800d1fc <HAL_PWREx_ConfigSupply+0x70>)
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f023 0207 	bic.w	r2, r3, #7
 800d1be:	490f      	ldr	r1, [pc, #60]	@ (800d1fc <HAL_PWREx_ConfigSupply+0x70>)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d1c6:	f7fa f963 	bl	8007490 <HAL_GetTick>
 800d1ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1cc:	e009      	b.n	800d1e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d1ce:	f7fa f95f 	bl	8007490 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d1dc:	d901      	bls.n	800d1e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e007      	b.n	800d1f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1e2:	4b06      	ldr	r3, [pc, #24]	@ (800d1fc <HAL_PWREx_ConfigSupply+0x70>)
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1ee:	d1ee      	bne.n	800d1ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	58024800 	.word	0x58024800

0800d200 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d200:	b480      	push	{r7}
 800d202:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d204:	4b05      	ldr	r3, [pc, #20]	@ (800d21c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4a04      	ldr	r2, [pc, #16]	@ (800d21c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d20a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d20e:	60d3      	str	r3, [r2, #12]
}
 800d210:	bf00      	nop
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	58024800 	.word	0x58024800

0800d220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	@ 0x30
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e3c8      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 8087 	beq.w	800d34e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d240:	4b88      	ldr	r3, [pc, #544]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d24a:	4b86      	ldr	r3, [pc, #536]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	2b10      	cmp	r3, #16
 800d254:	d007      	beq.n	800d266 <HAL_RCC_OscConfig+0x46>
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	2b18      	cmp	r3, #24
 800d25a:	d110      	bne.n	800d27e <HAL_RCC_OscConfig+0x5e>
 800d25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	2b02      	cmp	r3, #2
 800d264:	d10b      	bne.n	800d27e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d266:	4b7f      	ldr	r3, [pc, #508]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d06c      	beq.n	800d34c <HAL_RCC_OscConfig+0x12c>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d168      	bne.n	800d34c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	e3a2      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d286:	d106      	bne.n	800d296 <HAL_RCC_OscConfig+0x76>
 800d288:	4b76      	ldr	r3, [pc, #472]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a75      	ldr	r2, [pc, #468]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d28e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	e02e      	b.n	800d2f4 <HAL_RCC_OscConfig+0xd4>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10c      	bne.n	800d2b8 <HAL_RCC_OscConfig+0x98>
 800d29e:	4b71      	ldr	r3, [pc, #452]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a70      	ldr	r2, [pc, #448]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	4b6e      	ldr	r3, [pc, #440]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a6d      	ldr	r2, [pc, #436]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	e01d      	b.n	800d2f4 <HAL_RCC_OscConfig+0xd4>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d2c0:	d10c      	bne.n	800d2dc <HAL_RCC_OscConfig+0xbc>
 800d2c2:	4b68      	ldr	r3, [pc, #416]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a67      	ldr	r2, [pc, #412]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2cc:	6013      	str	r3, [r2, #0]
 800d2ce:	4b65      	ldr	r3, [pc, #404]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a64      	ldr	r2, [pc, #400]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	e00b      	b.n	800d2f4 <HAL_RCC_OscConfig+0xd4>
 800d2dc:	4b61      	ldr	r3, [pc, #388]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a60      	ldr	r2, [pc, #384]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	4b5e      	ldr	r3, [pc, #376]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a5d      	ldr	r2, [pc, #372]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d2ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d013      	beq.n	800d324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2fc:	f7fa f8c8 	bl	8007490 <HAL_GetTick>
 800d300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d302:	e008      	b.n	800d316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d304:	f7fa f8c4 	bl	8007490 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b64      	cmp	r3, #100	@ 0x64
 800d310:	d901      	bls.n	800d316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e356      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d316:	4b53      	ldr	r3, [pc, #332]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d0f0      	beq.n	800d304 <HAL_RCC_OscConfig+0xe4>
 800d322:	e014      	b.n	800d34e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d324:	f7fa f8b4 	bl	8007490 <HAL_GetTick>
 800d328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d32a:	e008      	b.n	800d33e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d32c:	f7fa f8b0 	bl	8007490 <HAL_GetTick>
 800d330:	4602      	mov	r2, r0
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	2b64      	cmp	r3, #100	@ 0x64
 800d338:	d901      	bls.n	800d33e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e342      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d33e:	4b49      	ldr	r3, [pc, #292]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1f0      	bne.n	800d32c <HAL_RCC_OscConfig+0x10c>
 800d34a:	e000      	b.n	800d34e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d34c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 808c 	beq.w	800d474 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d35c:	4b41      	ldr	r3, [pc, #260]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d364:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d366:	4b3f      	ldr	r3, [pc, #252]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d007      	beq.n	800d382 <HAL_RCC_OscConfig+0x162>
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	2b18      	cmp	r3, #24
 800d376:	d137      	bne.n	800d3e8 <HAL_RCC_OscConfig+0x1c8>
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d132      	bne.n	800d3e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d382:	4b38      	ldr	r3, [pc, #224]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 0304 	and.w	r3, r3, #4
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d005      	beq.n	800d39a <HAL_RCC_OscConfig+0x17a>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e314      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d39a:	4b32      	ldr	r3, [pc, #200]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f023 0219 	bic.w	r2, r3, #25
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	492f      	ldr	r1, [pc, #188]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3ac:	f7fa f870 	bl	8007490 <HAL_GetTick>
 800d3b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3b2:	e008      	b.n	800d3c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3b4:	f7fa f86c 	bl	8007490 <HAL_GetTick>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d901      	bls.n	800d3c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	e2fe      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3c6:	4b27      	ldr	r3, [pc, #156]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f003 0304 	and.w	r3, r3, #4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0f0      	beq.n	800d3b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3d2:	4b24      	ldr	r3, [pc, #144]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	061b      	lsls	r3, r3, #24
 800d3e0:	4920      	ldr	r1, [pc, #128]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3e6:	e045      	b.n	800d474 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d026      	beq.n	800d43e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3f0:	4b1c      	ldr	r3, [pc, #112]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f023 0219 	bic.w	r2, r3, #25
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	4919      	ldr	r1, [pc, #100]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d3fe:	4313      	orrs	r3, r2
 800d400:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d402:	f7fa f845 	bl	8007490 <HAL_GetTick>
 800d406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d408:	e008      	b.n	800d41c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d40a:	f7fa f841 	bl	8007490 <HAL_GetTick>
 800d40e:	4602      	mov	r2, r0
 800d410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	2b02      	cmp	r3, #2
 800d416:	d901      	bls.n	800d41c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	e2d3      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d41c:	4b11      	ldr	r3, [pc, #68]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d0f0      	beq.n	800d40a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d428:	4b0e      	ldr	r3, [pc, #56]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	061b      	lsls	r3, r3, #24
 800d436:	490b      	ldr	r1, [pc, #44]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d438:	4313      	orrs	r3, r2
 800d43a:	604b      	str	r3, [r1, #4]
 800d43c:	e01a      	b.n	800d474 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d43e:	4b09      	ldr	r3, [pc, #36]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a08      	ldr	r2, [pc, #32]	@ (800d464 <HAL_RCC_OscConfig+0x244>)
 800d444:	f023 0301 	bic.w	r3, r3, #1
 800d448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d44a:	f7fa f821 	bl	8007490 <HAL_GetTick>
 800d44e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d450:	e00a      	b.n	800d468 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d452:	f7fa f81d 	bl	8007490 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d903      	bls.n	800d468 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e2af      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
 800d464:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d468:	4b96      	ldr	r3, [pc, #600]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0304 	and.w	r3, r3, #4
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1ee      	bne.n	800d452 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0310 	and.w	r3, r3, #16
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d06a      	beq.n	800d556 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d480:	4b90      	ldr	r3, [pc, #576]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d488:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d48a:	4b8e      	ldr	r3, [pc, #568]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	2b08      	cmp	r3, #8
 800d494:	d007      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x286>
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	2b18      	cmp	r3, #24
 800d49a:	d11b      	bne.n	800d4d4 <HAL_RCC_OscConfig+0x2b4>
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f003 0303 	and.w	r3, r3, #3
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d116      	bne.n	800d4d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4a6:	4b87      	ldr	r3, [pc, #540]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d005      	beq.n	800d4be <HAL_RCC_OscConfig+0x29e>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	2b80      	cmp	r3, #128	@ 0x80
 800d4b8:	d001      	beq.n	800d4be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e282      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4be:	4b81      	ldr	r3, [pc, #516]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	061b      	lsls	r3, r3, #24
 800d4cc:	497d      	ldr	r1, [pc, #500]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4d2:	e040      	b.n	800d556 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d023      	beq.n	800d524 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d4dc:	4b79      	ldr	r3, [pc, #484]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a78      	ldr	r2, [pc, #480]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4e8:	f7f9 ffd2 	bl	8007490 <HAL_GetTick>
 800d4ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d4ee:	e008      	b.n	800d502 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d4f0:	f7f9 ffce 	bl	8007490 <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d901      	bls.n	800d502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d4fe:	2303      	movs	r3, #3
 800d500:	e260      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d502:	4b70      	ldr	r3, [pc, #448]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0f0      	beq.n	800d4f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d50e:	4b6d      	ldr	r3, [pc, #436]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	061b      	lsls	r3, r3, #24
 800d51c:	4969      	ldr	r1, [pc, #420]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	60cb      	str	r3, [r1, #12]
 800d522:	e018      	b.n	800d556 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d524:	4b67      	ldr	r3, [pc, #412]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a66      	ldr	r2, [pc, #408]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d52e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d530:	f7f9 ffae 	bl	8007490 <HAL_GetTick>
 800d534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d536:	e008      	b.n	800d54a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d538:	f7f9 ffaa 	bl	8007490 <HAL_GetTick>
 800d53c:	4602      	mov	r2, r0
 800d53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	2b02      	cmp	r3, #2
 800d544:	d901      	bls.n	800d54a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e23c      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d54a:	4b5e      	ldr	r3, [pc, #376]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1f0      	bne.n	800d538 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 0308 	and.w	r3, r3, #8
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d036      	beq.n	800d5d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d019      	beq.n	800d59e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d56a:	4b56      	ldr	r3, [pc, #344]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d56e:	4a55      	ldr	r2, [pc, #340]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d570:	f043 0301 	orr.w	r3, r3, #1
 800d574:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d576:	f7f9 ff8b 	bl	8007490 <HAL_GetTick>
 800d57a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d57c:	e008      	b.n	800d590 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d57e:	f7f9 ff87 	bl	8007490 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d901      	bls.n	800d590 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e219      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d590:	4b4c      	ldr	r3, [pc, #304]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0f0      	beq.n	800d57e <HAL_RCC_OscConfig+0x35e>
 800d59c:	e018      	b.n	800d5d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d59e:	4b49      	ldr	r3, [pc, #292]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d5a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5a2:	4a48      	ldr	r2, [pc, #288]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d5a4:	f023 0301 	bic.w	r3, r3, #1
 800d5a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5aa:	f7f9 ff71 	bl	8007490 <HAL_GetTick>
 800d5ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5b0:	e008      	b.n	800d5c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5b2:	f7f9 ff6d 	bl	8007490 <HAL_GetTick>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d901      	bls.n	800d5c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	e1ff      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5c4:	4b3f      	ldr	r3, [pc, #252]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d5c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1f0      	bne.n	800d5b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d036      	beq.n	800d64a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d019      	beq.n	800d618 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d5e4:	4b37      	ldr	r3, [pc, #220]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a36      	ldr	r2, [pc, #216]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d5ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d5ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d5f0:	f7f9 ff4e 	bl	8007490 <HAL_GetTick>
 800d5f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5f6:	e008      	b.n	800d60a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d5f8:	f7f9 ff4a 	bl	8007490 <HAL_GetTick>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	2b02      	cmp	r3, #2
 800d604:	d901      	bls.n	800d60a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d606:	2303      	movs	r3, #3
 800d608:	e1dc      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d60a:	4b2e      	ldr	r3, [pc, #184]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d0f0      	beq.n	800d5f8 <HAL_RCC_OscConfig+0x3d8>
 800d616:	e018      	b.n	800d64a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d618:	4b2a      	ldr	r3, [pc, #168]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a29      	ldr	r2, [pc, #164]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d61e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d622:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d624:	f7f9 ff34 	bl	8007490 <HAL_GetTick>
 800d628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d62a:	e008      	b.n	800d63e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d62c:	f7f9 ff30 	bl	8007490 <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	2b02      	cmp	r3, #2
 800d638:	d901      	bls.n	800d63e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e1c2      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d63e:	4b21      	ldr	r3, [pc, #132]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1f0      	bne.n	800d62c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 0304 	and.w	r3, r3, #4
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 8086 	beq.w	800d764 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d658:	4b1b      	ldr	r3, [pc, #108]	@ (800d6c8 <HAL_RCC_OscConfig+0x4a8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a1a      	ldr	r2, [pc, #104]	@ (800d6c8 <HAL_RCC_OscConfig+0x4a8>)
 800d65e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d664:	f7f9 ff14 	bl	8007490 <HAL_GetTick>
 800d668:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d66a:	e008      	b.n	800d67e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d66c:	f7f9 ff10 	bl	8007490 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b64      	cmp	r3, #100	@ 0x64
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e1a2      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d67e:	4b12      	ldr	r3, [pc, #72]	@ (800d6c8 <HAL_RCC_OscConfig+0x4a8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0f0      	beq.n	800d66c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d106      	bne.n	800d6a0 <HAL_RCC_OscConfig+0x480>
 800d692:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d696:	4a0b      	ldr	r2, [pc, #44]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d698:	f043 0301 	orr.w	r3, r3, #1
 800d69c:	6713      	str	r3, [r2, #112]	@ 0x70
 800d69e:	e032      	b.n	800d706 <HAL_RCC_OscConfig+0x4e6>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d111      	bne.n	800d6cc <HAL_RCC_OscConfig+0x4ac>
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ac:	4a05      	ldr	r2, [pc, #20]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d6ae:	f023 0301 	bic.w	r3, r3, #1
 800d6b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6b8:	4a02      	ldr	r2, [pc, #8]	@ (800d6c4 <HAL_RCC_OscConfig+0x4a4>)
 800d6ba:	f023 0304 	bic.w	r3, r3, #4
 800d6be:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6c0:	e021      	b.n	800d706 <HAL_RCC_OscConfig+0x4e6>
 800d6c2:	bf00      	nop
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	58024800 	.word	0x58024800
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	2b05      	cmp	r3, #5
 800d6d2:	d10c      	bne.n	800d6ee <HAL_RCC_OscConfig+0x4ce>
 800d6d4:	4b83      	ldr	r3, [pc, #524]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6d8:	4a82      	ldr	r2, [pc, #520]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6da:	f043 0304 	orr.w	r3, r3, #4
 800d6de:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6e0:	4b80      	ldr	r3, [pc, #512]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6e4:	4a7f      	ldr	r2, [pc, #508]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6e6:	f043 0301 	orr.w	r3, r3, #1
 800d6ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6ec:	e00b      	b.n	800d706 <HAL_RCC_OscConfig+0x4e6>
 800d6ee:	4b7d      	ldr	r3, [pc, #500]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6f2:	4a7c      	ldr	r2, [pc, #496]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6f4:	f023 0301 	bic.w	r3, r3, #1
 800d6f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6fa:	4b7a      	ldr	r3, [pc, #488]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6fe:	4a79      	ldr	r2, [pc, #484]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d700:	f023 0304 	bic.w	r3, r3, #4
 800d704:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d015      	beq.n	800d73a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d70e:	f7f9 febf 	bl	8007490 <HAL_GetTick>
 800d712:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d714:	e00a      	b.n	800d72c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d716:	f7f9 febb 	bl	8007490 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d724:	4293      	cmp	r3, r2
 800d726:	d901      	bls.n	800d72c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d728:	2303      	movs	r3, #3
 800d72a:	e14b      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d72c:	4b6d      	ldr	r3, [pc, #436]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d72e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d730:	f003 0302 	and.w	r3, r3, #2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0ee      	beq.n	800d716 <HAL_RCC_OscConfig+0x4f6>
 800d738:	e014      	b.n	800d764 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d73a:	f7f9 fea9 	bl	8007490 <HAL_GetTick>
 800d73e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d740:	e00a      	b.n	800d758 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d742:	f7f9 fea5 	bl	8007490 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d750:	4293      	cmp	r3, r2
 800d752:	d901      	bls.n	800d758 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	e135      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d758:	4b62      	ldr	r3, [pc, #392]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d75c:	f003 0302 	and.w	r3, r3, #2
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1ee      	bne.n	800d742 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 812a 	beq.w	800d9c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d76e:	4b5d      	ldr	r3, [pc, #372]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d776:	2b18      	cmp	r3, #24
 800d778:	f000 80ba 	beq.w	800d8f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d780:	2b02      	cmp	r3, #2
 800d782:	f040 8095 	bne.w	800d8b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d786:	4b57      	ldr	r3, [pc, #348]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a56      	ldr	r2, [pc, #344]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d78c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d792:	f7f9 fe7d 	bl	8007490 <HAL_GetTick>
 800d796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d798:	e008      	b.n	800d7ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d79a:	f7f9 fe79 	bl	8007490 <HAL_GetTick>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d901      	bls.n	800d7ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e10b      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1f0      	bne.n	800d79a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7b8:	4b4a      	ldr	r3, [pc, #296]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d7ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7bc:	4b4a      	ldr	r3, [pc, #296]	@ (800d8e8 <HAL_RCC_OscConfig+0x6c8>)
 800d7be:	4013      	ands	r3, r2
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7c8:	0112      	lsls	r2, r2, #4
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	4945      	ldr	r1, [pc, #276]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	628b      	str	r3, [r1, #40]	@ 0x28
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	025b      	lsls	r3, r3, #9
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	041b      	lsls	r3, r3, #16
 800d7f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d7f4:	431a      	orrs	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	061b      	lsls	r3, r3, #24
 800d7fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d802:	4938      	ldr	r1, [pc, #224]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d804:	4313      	orrs	r3, r2
 800d806:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d808:	4b36      	ldr	r3, [pc, #216]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80c:	4a35      	ldr	r2, [pc, #212]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d80e:	f023 0301 	bic.w	r3, r3, #1
 800d812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d814:	4b33      	ldr	r3, [pc, #204]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d818:	4b34      	ldr	r3, [pc, #208]	@ (800d8ec <HAL_RCC_OscConfig+0x6cc>)
 800d81a:	4013      	ands	r3, r2
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d820:	00d2      	lsls	r2, r2, #3
 800d822:	4930      	ldr	r1, [pc, #192]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d824:	4313      	orrs	r3, r2
 800d826:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d828:	4b2e      	ldr	r3, [pc, #184]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	f023 020c 	bic.w	r2, r3, #12
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d834:	492b      	ldr	r1, [pc, #172]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d836:	4313      	orrs	r3, r2
 800d838:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d83a:	4b2a      	ldr	r3, [pc, #168]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83e:	f023 0202 	bic.w	r2, r3, #2
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d846:	4927      	ldr	r1, [pc, #156]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d84c:	4b25      	ldr	r3, [pc, #148]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d850:	4a24      	ldr	r2, [pc, #144]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d858:	4b22      	ldr	r3, [pc, #136]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85c:	4a21      	ldr	r2, [pc, #132]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d85e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d864:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d868:	4a1e      	ldr	r2, [pc, #120]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d86a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d86e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d870:	4b1c      	ldr	r3, [pc, #112]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d874:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d876:	f043 0301 	orr.w	r3, r3, #1
 800d87a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d87c:	4b19      	ldr	r3, [pc, #100]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a18      	ldr	r2, [pc, #96]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d888:	f7f9 fe02 	bl	8007490 <HAL_GetTick>
 800d88c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d88e:	e008      	b.n	800d8a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d890:	f7f9 fdfe 	bl	8007490 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d901      	bls.n	800d8a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	e090      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8a2:	4b10      	ldr	r3, [pc, #64]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0f0      	beq.n	800d890 <HAL_RCC_OscConfig+0x670>
 800d8ae:	e088      	b.n	800d9c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a0b      	ldr	r2, [pc, #44]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d8b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d8ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8bc:	f7f9 fde8 	bl	8007490 <HAL_GetTick>
 800d8c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8c2:	e008      	b.n	800d8d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8c4:	f7f9 fde4 	bl	8007490 <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d901      	bls.n	800d8d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e076      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8d6:	4b03      	ldr	r3, [pc, #12]	@ (800d8e4 <HAL_RCC_OscConfig+0x6c4>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1f0      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x6a4>
 800d8e2:	e06e      	b.n	800d9c2 <HAL_RCC_OscConfig+0x7a2>
 800d8e4:	58024400 	.word	0x58024400
 800d8e8:	fffffc0c 	.word	0xfffffc0c
 800d8ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d8f0:	4b36      	ldr	r3, [pc, #216]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d8f6:	4b35      	ldr	r3, [pc, #212]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d900:	2b01      	cmp	r3, #1
 800d902:	d031      	beq.n	800d968 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	f003 0203 	and.w	r2, r3, #3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d90e:	429a      	cmp	r2, r3
 800d910:	d12a      	bne.n	800d968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	091b      	lsrs	r3, r3, #4
 800d916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d122      	bne.n	800d968 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d92e:	429a      	cmp	r2, r3
 800d930:	d11a      	bne.n	800d968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	0a5b      	lsrs	r3, r3, #9
 800d936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d93e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d940:	429a      	cmp	r2, r3
 800d942:	d111      	bne.n	800d968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	0c1b      	lsrs	r3, r3, #16
 800d948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d950:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d952:	429a      	cmp	r2, r3
 800d954:	d108      	bne.n	800d968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	0e1b      	lsrs	r3, r3, #24
 800d95a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d962:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d964:	429a      	cmp	r2, r3
 800d966:	d001      	beq.n	800d96c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e02b      	b.n	800d9c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d96c:	4b17      	ldr	r3, [pc, #92]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d970:	08db      	lsrs	r3, r3, #3
 800d972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d976:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d01f      	beq.n	800d9c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d982:	4b12      	ldr	r3, [pc, #72]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d986:	4a11      	ldr	r2, [pc, #68]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d988:	f023 0301 	bic.w	r3, r3, #1
 800d98c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d98e:	f7f9 fd7f 	bl	8007490 <HAL_GetTick>
 800d992:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d994:	bf00      	nop
 800d996:	f7f9 fd7b 	bl	8007490 <HAL_GetTick>
 800d99a:	4602      	mov	r2, r0
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d0f9      	beq.n	800d996 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d9a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <HAL_RCC_OscConfig+0x7b0>)
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d9ae:	00d2      	lsls	r2, r2, #3
 800d9b0:	4906      	ldr	r1, [pc, #24]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d9b6:	4b05      	ldr	r3, [pc, #20]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ba:	4a04      	ldr	r2, [pc, #16]	@ (800d9cc <HAL_RCC_OscConfig+0x7ac>)
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3730      	adds	r7, #48	@ 0x30
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	58024400 	.word	0x58024400
 800d9d0:	ffff0007 	.word	0xffff0007

0800d9d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e19c      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d9e8:	4b8a      	ldr	r3, [pc, #552]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 030f 	and.w	r3, r3, #15
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d910      	bls.n	800da18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9f6:	4b87      	ldr	r3, [pc, #540]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f023 020f 	bic.w	r2, r3, #15
 800d9fe:	4985      	ldr	r1, [pc, #532]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	4313      	orrs	r3, r2
 800da04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da06:	4b83      	ldr	r3, [pc, #524]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 030f 	and.w	r3, r3, #15
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d001      	beq.n	800da18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e184      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d010      	beq.n	800da46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691a      	ldr	r2, [r3, #16]
 800da28:	4b7b      	ldr	r3, [pc, #492]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da30:	429a      	cmp	r2, r3
 800da32:	d908      	bls.n	800da46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da34:	4b78      	ldr	r3, [pc, #480]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	4975      	ldr	r1, [pc, #468]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da42:	4313      	orrs	r3, r2
 800da44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0308 	and.w	r3, r3, #8
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d010      	beq.n	800da74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	695a      	ldr	r2, [r3, #20]
 800da56:	4b70      	ldr	r3, [pc, #448]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da5e:	429a      	cmp	r2, r3
 800da60:	d908      	bls.n	800da74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da62:	4b6d      	ldr	r3, [pc, #436]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	496a      	ldr	r1, [pc, #424]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da70:	4313      	orrs	r3, r2
 800da72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f003 0310 	and.w	r3, r3, #16
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d010      	beq.n	800daa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	699a      	ldr	r2, [r3, #24]
 800da84:	4b64      	ldr	r3, [pc, #400]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d908      	bls.n	800daa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da90:	4b61      	ldr	r3, [pc, #388]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da92:	69db      	ldr	r3, [r3, #28]
 800da94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	495e      	ldr	r1, [pc, #376]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f003 0320 	and.w	r3, r3, #32
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	69da      	ldr	r2, [r3, #28]
 800dab2:	4b59      	ldr	r3, [pc, #356]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800daba:	429a      	cmp	r2, r3
 800dabc:	d908      	bls.n	800dad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dabe:	4b56      	ldr	r3, [pc, #344]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dac0:	6a1b      	ldr	r3, [r3, #32]
 800dac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	4953      	ldr	r1, [pc, #332]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f003 0302 	and.w	r3, r3, #2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d010      	beq.n	800dafe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	4b4d      	ldr	r3, [pc, #308]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	f003 030f 	and.w	r3, r3, #15
 800dae8:	429a      	cmp	r2, r3
 800daea:	d908      	bls.n	800dafe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800daec:	4b4a      	ldr	r3, [pc, #296]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	f023 020f 	bic.w	r2, r3, #15
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	4947      	ldr	r1, [pc, #284]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dafa:	4313      	orrs	r3, r2
 800dafc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	2b00      	cmp	r3, #0
 800db08:	d055      	beq.n	800dbb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800db0a:	4b43      	ldr	r3, [pc, #268]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	4940      	ldr	r1, [pc, #256]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	2b02      	cmp	r3, #2
 800db22:	d107      	bne.n	800db34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db24:	4b3c      	ldr	r3, [pc, #240]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d121      	bne.n	800db74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	e0f6      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d107      	bne.n	800db4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db3c:	4b36      	ldr	r3, [pc, #216]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db44:	2b00      	cmp	r3, #0
 800db46:	d115      	bne.n	800db74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	e0ea      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d107      	bne.n	800db64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db54:	4b30      	ldr	r3, [pc, #192]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d109      	bne.n	800db74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e0de      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db64:	4b2c      	ldr	r3, [pc, #176]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	e0d6      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800db74:	4b28      	ldr	r3, [pc, #160]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	f023 0207 	bic.w	r2, r3, #7
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	4925      	ldr	r1, [pc, #148]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800db82:	4313      	orrs	r3, r2
 800db84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db86:	f7f9 fc83 	bl	8007490 <HAL_GetTick>
 800db8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db8c:	e00a      	b.n	800dba4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db8e:	f7f9 fc7f 	bl	8007490 <HAL_GetTick>
 800db92:	4602      	mov	r2, r0
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d901      	bls.n	800dba4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800dba0:	2303      	movs	r3, #3
 800dba2:	e0be      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dba4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d1eb      	bne.n	800db8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d010      	beq.n	800dbe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	4b14      	ldr	r3, [pc, #80]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	f003 030f 	and.w	r3, r3, #15
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d208      	bcs.n	800dbe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbd2:	4b11      	ldr	r3, [pc, #68]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	f023 020f 	bic.w	r2, r3, #15
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	490e      	ldr	r1, [pc, #56]	@ (800dc18 <HAL_RCC_ClockConfig+0x244>)
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f003 030f 	and.w	r3, r3, #15
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d214      	bcs.n	800dc1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbf2:	4b08      	ldr	r3, [pc, #32]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f023 020f 	bic.w	r2, r3, #15
 800dbfa:	4906      	ldr	r1, [pc, #24]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc02:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <HAL_RCC_ClockConfig+0x240>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 030f 	and.w	r3, r3, #15
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d005      	beq.n	800dc1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e086      	b.n	800dd22 <HAL_RCC_ClockConfig+0x34e>
 800dc14:	52002000 	.word	0x52002000
 800dc18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d010      	beq.n	800dc4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	691a      	ldr	r2, [r3, #16]
 800dc2c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d208      	bcs.n	800dc4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dc38:	4b3c      	ldr	r3, [pc, #240]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	4939      	ldr	r1, [pc, #228]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc46:	4313      	orrs	r3, r2
 800dc48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 0308 	and.w	r3, r3, #8
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d010      	beq.n	800dc78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	695a      	ldr	r2, [r3, #20]
 800dc5a:	4b34      	ldr	r3, [pc, #208]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc5c:	69db      	ldr	r3, [r3, #28]
 800dc5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d208      	bcs.n	800dc78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dc66:	4b31      	ldr	r3, [pc, #196]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	492e      	ldr	r1, [pc, #184]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc74:	4313      	orrs	r3, r2
 800dc76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f003 0310 	and.w	r3, r3, #16
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d010      	beq.n	800dca6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699a      	ldr	r2, [r3, #24]
 800dc88:	4b28      	ldr	r3, [pc, #160]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d208      	bcs.n	800dca6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dc94:	4b25      	ldr	r3, [pc, #148]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	4922      	ldr	r1, [pc, #136]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dca2:	4313      	orrs	r3, r2
 800dca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f003 0320 	and.w	r3, r3, #32
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d010      	beq.n	800dcd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	69da      	ldr	r2, [r3, #28]
 800dcb6:	4b1d      	ldr	r3, [pc, #116]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d208      	bcs.n	800dcd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dcc2:	4b1a      	ldr	r3, [pc, #104]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	4917      	ldr	r1, [pc, #92]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dcd4:	f000 f834 	bl	800dd40 <HAL_RCC_GetSysClockFreq>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	4b14      	ldr	r3, [pc, #80]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	0a1b      	lsrs	r3, r3, #8
 800dce0:	f003 030f 	and.w	r3, r3, #15
 800dce4:	4912      	ldr	r1, [pc, #72]	@ (800dd30 <HAL_RCC_ClockConfig+0x35c>)
 800dce6:	5ccb      	ldrb	r3, [r1, r3]
 800dce8:	f003 031f 	and.w	r3, r3, #31
 800dcec:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd2c <HAL_RCC_ClockConfig+0x358>)
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	f003 030f 	and.w	r3, r3, #15
 800dcfa:	4a0d      	ldr	r2, [pc, #52]	@ (800dd30 <HAL_RCC_ClockConfig+0x35c>)
 800dcfc:	5cd3      	ldrb	r3, [r2, r3]
 800dcfe:	f003 031f 	and.w	r3, r3, #31
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	fa22 f303 	lsr.w	r3, r2, r3
 800dd08:	4a0a      	ldr	r2, [pc, #40]	@ (800dd34 <HAL_RCC_ClockConfig+0x360>)
 800dd0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd38 <HAL_RCC_ClockConfig+0x364>)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd12:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <HAL_RCC_ClockConfig+0x368>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f9 fb70 	bl	80073fc <HAL_InitTick>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	58024400 	.word	0x58024400
 800dd30:	0801da14 	.word	0x0801da14
 800dd34:	24000004 	.word	0x24000004
 800dd38:	24000000 	.word	0x24000000
 800dd3c:	24000038 	.word	0x24000038

0800dd40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b089      	sub	sp, #36	@ 0x24
 800dd44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd46:	4bb3      	ldr	r3, [pc, #716]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd4e:	2b18      	cmp	r3, #24
 800dd50:	f200 8155 	bhi.w	800dffe <HAL_RCC_GetSysClockFreq+0x2be>
 800dd54:	a201      	add	r2, pc, #4	@ (adr r2, 800dd5c <HAL_RCC_GetSysClockFreq+0x1c>)
 800dd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5a:	bf00      	nop
 800dd5c:	0800ddc1 	.word	0x0800ddc1
 800dd60:	0800dfff 	.word	0x0800dfff
 800dd64:	0800dfff 	.word	0x0800dfff
 800dd68:	0800dfff 	.word	0x0800dfff
 800dd6c:	0800dfff 	.word	0x0800dfff
 800dd70:	0800dfff 	.word	0x0800dfff
 800dd74:	0800dfff 	.word	0x0800dfff
 800dd78:	0800dfff 	.word	0x0800dfff
 800dd7c:	0800dde7 	.word	0x0800dde7
 800dd80:	0800dfff 	.word	0x0800dfff
 800dd84:	0800dfff 	.word	0x0800dfff
 800dd88:	0800dfff 	.word	0x0800dfff
 800dd8c:	0800dfff 	.word	0x0800dfff
 800dd90:	0800dfff 	.word	0x0800dfff
 800dd94:	0800dfff 	.word	0x0800dfff
 800dd98:	0800dfff 	.word	0x0800dfff
 800dd9c:	0800dded 	.word	0x0800dded
 800dda0:	0800dfff 	.word	0x0800dfff
 800dda4:	0800dfff 	.word	0x0800dfff
 800dda8:	0800dfff 	.word	0x0800dfff
 800ddac:	0800dfff 	.word	0x0800dfff
 800ddb0:	0800dfff 	.word	0x0800dfff
 800ddb4:	0800dfff 	.word	0x0800dfff
 800ddb8:	0800dfff 	.word	0x0800dfff
 800ddbc:	0800ddf3 	.word	0x0800ddf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddc0:	4b94      	ldr	r3, [pc, #592]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 0320 	and.w	r3, r3, #32
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d009      	beq.n	800dde0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddcc:	4b91      	ldr	r3, [pc, #580]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	08db      	lsrs	r3, r3, #3
 800ddd2:	f003 0303 	and.w	r3, r3, #3
 800ddd6:	4a90      	ldr	r2, [pc, #576]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddd8:	fa22 f303 	lsr.w	r3, r2, r3
 800dddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ddde:	e111      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dde0:	4b8d      	ldr	r3, [pc, #564]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dde2:	61bb      	str	r3, [r7, #24]
      break;
 800dde4:	e10e      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800dde6:	4b8d      	ldr	r3, [pc, #564]	@ (800e01c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dde8:	61bb      	str	r3, [r7, #24]
      break;
 800ddea:	e10b      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ddec:	4b8c      	ldr	r3, [pc, #560]	@ (800e020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ddee:	61bb      	str	r3, [r7, #24]
      break;
 800ddf0:	e108      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddf2:	4b88      	ldr	r3, [pc, #544]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf6:	f003 0303 	and.w	r3, r3, #3
 800ddfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ddfc:	4b85      	ldr	r3, [pc, #532]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de00:	091b      	lsrs	r3, r3, #4
 800de02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de08:	4b82      	ldr	r3, [pc, #520]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de12:	4b80      	ldr	r3, [pc, #512]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de16:	08db      	lsrs	r3, r3, #3
 800de18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	fb02 f303 	mul.w	r3, r2, r3
 800de22:	ee07 3a90 	vmov	s15, r3
 800de26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 80e1 	beq.w	800dff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	f000 8083 	beq.w	800df44 <HAL_RCC_GetSysClockFreq+0x204>
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b02      	cmp	r3, #2
 800de42:	f200 80a1 	bhi.w	800df88 <HAL_RCC_GetSysClockFreq+0x248>
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d003      	beq.n	800de54 <HAL_RCC_GetSysClockFreq+0x114>
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d056      	beq.n	800df00 <HAL_RCC_GetSysClockFreq+0x1c0>
 800de52:	e099      	b.n	800df88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de54:	4b6f      	ldr	r3, [pc, #444]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d02d      	beq.n	800debc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de60:	4b6c      	ldr	r3, [pc, #432]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	08db      	lsrs	r3, r3, #3
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	4a6b      	ldr	r2, [pc, #428]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de6c:	fa22 f303 	lsr.w	r3, r2, r3
 800de70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	ee07 3a90 	vmov	s15, r3
 800de78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	ee07 3a90 	vmov	s15, r3
 800de82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de8a:	4b62      	ldr	r3, [pc, #392]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de92:	ee07 3a90 	vmov	s15, r3
 800de96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800de9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800deae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800deba:	e087      	b.n	800dfcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	ee07 3a90 	vmov	s15, r3
 800dec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e028 <HAL_RCC_GetSysClockFreq+0x2e8>
 800deca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dece:	4b51      	ldr	r3, [pc, #324]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ded0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ded2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded6:	ee07 3a90 	vmov	s15, r3
 800deda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dede:	ed97 6a02 	vldr	s12, [r7, #8]
 800dee2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800def2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800def6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800defa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800defe:	e065      	b.n	800dfcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	ee07 3a90 	vmov	s15, r3
 800df06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e02c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df12:	4b40      	ldr	r3, [pc, #256]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df1a:	ee07 3a90 	vmov	s15, r3
 800df1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df22:	ed97 6a02 	vldr	s12, [r7, #8]
 800df26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df42:	e043      	b.n	800dfcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	ee07 3a90 	vmov	s15, r3
 800df4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e030 <HAL_RCC_GetSysClockFreq+0x2f0>
 800df52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df56:	4b2f      	ldr	r3, [pc, #188]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df5e:	ee07 3a90 	vmov	s15, r3
 800df62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df66:	ed97 6a02 	vldr	s12, [r7, #8]
 800df6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df86:	e021      	b.n	800dfcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	ee07 3a90 	vmov	s15, r3
 800df8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e02c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df9a:	4b1e      	ldr	r3, [pc, #120]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfa2:	ee07 3a90 	vmov	s15, r3
 800dfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dfcc:	4b11      	ldr	r3, [pc, #68]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd0:	0a5b      	lsrs	r3, r3, #9
 800dfd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	ee07 3a90 	vmov	s15, r3
 800dfe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dfe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dff0:	ee17 3a90 	vmov	r3, s15
 800dff4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dff6:	e005      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	61bb      	str	r3, [r7, #24]
      break;
 800dffc:	e002      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dffe:	4b07      	ldr	r3, [pc, #28]	@ (800e01c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e000:	61bb      	str	r3, [r7, #24]
      break;
 800e002:	bf00      	nop
  }

  return sysclockfreq;
 800e004:	69bb      	ldr	r3, [r7, #24]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3724      	adds	r7, #36	@ 0x24
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	58024400 	.word	0x58024400
 800e018:	03d09000 	.word	0x03d09000
 800e01c:	003d0900 	.word	0x003d0900
 800e020:	016e3600 	.word	0x016e3600
 800e024:	46000000 	.word	0x46000000
 800e028:	4c742400 	.word	0x4c742400
 800e02c:	4a742400 	.word	0x4a742400
 800e030:	4bb71b00 	.word	0x4bb71b00

0800e034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e03a:	f7ff fe81 	bl	800dd40 <HAL_RCC_GetSysClockFreq>
 800e03e:	4602      	mov	r2, r0
 800e040:	4b10      	ldr	r3, [pc, #64]	@ (800e084 <HAL_RCC_GetHCLKFreq+0x50>)
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	0a1b      	lsrs	r3, r3, #8
 800e046:	f003 030f 	and.w	r3, r3, #15
 800e04a:	490f      	ldr	r1, [pc, #60]	@ (800e088 <HAL_RCC_GetHCLKFreq+0x54>)
 800e04c:	5ccb      	ldrb	r3, [r1, r3]
 800e04e:	f003 031f 	and.w	r3, r3, #31
 800e052:	fa22 f303 	lsr.w	r3, r2, r3
 800e056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e058:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <HAL_RCC_GetHCLKFreq+0x50>)
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	4a09      	ldr	r2, [pc, #36]	@ (800e088 <HAL_RCC_GetHCLKFreq+0x54>)
 800e062:	5cd3      	ldrb	r3, [r2, r3]
 800e064:	f003 031f 	and.w	r3, r3, #31
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	fa22 f303 	lsr.w	r3, r2, r3
 800e06e:	4a07      	ldr	r2, [pc, #28]	@ (800e08c <HAL_RCC_GetHCLKFreq+0x58>)
 800e070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e072:	4a07      	ldr	r2, [pc, #28]	@ (800e090 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e078:	4b04      	ldr	r3, [pc, #16]	@ (800e08c <HAL_RCC_GetHCLKFreq+0x58>)
 800e07a:	681b      	ldr	r3, [r3, #0]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	58024400 	.word	0x58024400
 800e088:	0801da14 	.word	0x0801da14
 800e08c:	24000004 	.word	0x24000004
 800e090:	24000000 	.word	0x24000000

0800e094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e098:	f7ff ffcc 	bl	800e034 <HAL_RCC_GetHCLKFreq>
 800e09c:	4602      	mov	r2, r0
 800e09e:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0a0:	69db      	ldr	r3, [r3, #28]
 800e0a2:	091b      	lsrs	r3, r3, #4
 800e0a4:	f003 0307 	and.w	r3, r3, #7
 800e0a8:	4904      	ldr	r1, [pc, #16]	@ (800e0bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800e0aa:	5ccb      	ldrb	r3, [r1, r3]
 800e0ac:	f003 031f 	and.w	r3, r3, #31
 800e0b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	58024400 	.word	0x58024400
 800e0bc:	0801da14 	.word	0x0801da14

0800e0c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e0c4:	f7ff ffb6 	bl	800e034 <HAL_RCC_GetHCLKFreq>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	4b06      	ldr	r3, [pc, #24]	@ (800e0e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0cc:	69db      	ldr	r3, [r3, #28]
 800e0ce:	0a1b      	lsrs	r3, r3, #8
 800e0d0:	f003 0307 	and.w	r3, r3, #7
 800e0d4:	4904      	ldr	r1, [pc, #16]	@ (800e0e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e0d6:	5ccb      	ldrb	r3, [r1, r3]
 800e0d8:	f003 031f 	and.w	r3, r3, #31
 800e0dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	58024400 	.word	0x58024400
 800e0e8:	0801da14 	.word	0x0801da14

0800e0ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0f0:	b0c6      	sub	sp, #280	@ 0x118
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0fe:	2300      	movs	r3, #0
 800e100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e110:	2500      	movs	r5, #0
 800e112:	ea54 0305 	orrs.w	r3, r4, r5
 800e116:	d049      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e11e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e122:	d02f      	beq.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e128:	d828      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e12a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e12e:	d01a      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e134:	d822      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e13e:	d007      	beq.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e140:	e01c      	b.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e142:	4bab      	ldr	r3, [pc, #684]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e146:	4aaa      	ldr	r2, [pc, #680]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e14c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e14e:	e01a      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e154:	3308      	adds	r3, #8
 800e156:	2102      	movs	r1, #2
 800e158:	4618      	mov	r0, r3
 800e15a:	f002 fa49 	bl	80105f0 <RCCEx_PLL2_Config>
 800e15e:	4603      	mov	r3, r0
 800e160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e164:	e00f      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e16a:	3328      	adds	r3, #40	@ 0x28
 800e16c:	2102      	movs	r1, #2
 800e16e:	4618      	mov	r0, r3
 800e170:	f002 faf0 	bl	8010754 <RCCEx_PLL3_Config>
 800e174:	4603      	mov	r3, r0
 800e176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e17a:	e004      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e182:	e000      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10a      	bne.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e18e:	4b98      	ldr	r3, [pc, #608]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e19c:	4a94      	ldr	r2, [pc, #592]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e19e:	430b      	orrs	r3, r1
 800e1a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800e1a2:	e003      	b.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e1b8:	f04f 0900 	mov.w	r9, #0
 800e1bc:	ea58 0309 	orrs.w	r3, r8, r9
 800e1c0:	d047      	beq.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	d82a      	bhi.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d2:	bf00      	nop
 800e1d4:	0800e1e9 	.word	0x0800e1e9
 800e1d8:	0800e1f7 	.word	0x0800e1f7
 800e1dc:	0800e20d 	.word	0x0800e20d
 800e1e0:	0800e22b 	.word	0x0800e22b
 800e1e4:	0800e22b 	.word	0x0800e22b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e8:	4b81      	ldr	r3, [pc, #516]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ec:	4a80      	ldr	r2, [pc, #512]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1f4:	e01a      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f002 f9f6 	bl	80105f0 <RCCEx_PLL2_Config>
 800e204:	4603      	mov	r3, r0
 800e206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e20a:	e00f      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e210:	3328      	adds	r3, #40	@ 0x28
 800e212:	2100      	movs	r1, #0
 800e214:	4618      	mov	r0, r3
 800e216:	f002 fa9d 	bl	8010754 <RCCEx_PLL3_Config>
 800e21a:	4603      	mov	r3, r0
 800e21c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e220:	e004      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e228:	e000      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e22a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e22c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e234:	4b6e      	ldr	r3, [pc, #440]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e238:	f023 0107 	bic.w	r1, r3, #7
 800e23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e242:	4a6b      	ldr	r2, [pc, #428]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e244:	430b      	orrs	r3, r1
 800e246:	6513      	str	r3, [r2, #80]	@ 0x50
 800e248:	e003      	b.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e24a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e24e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800e25e:	f04f 0b00 	mov.w	fp, #0
 800e262:	ea5a 030b 	orrs.w	r3, sl, fp
 800e266:	d05b      	beq.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e26c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e270:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e274:	d03b      	beq.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e276:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e27a:	d834      	bhi.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e27c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e280:	d037      	beq.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e286:	d82e      	bhi.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e288:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e28c:	d033      	beq.n	800e2f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e28e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e292:	d828      	bhi.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e298:	d01a      	beq.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800e29a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e29e:	d822      	bhi.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800e2a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2a8:	d007      	beq.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800e2aa:	e01c      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2ac:	4b50      	ldr	r3, [pc, #320]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b0:	4a4f      	ldr	r2, [pc, #316]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2b8:	e01e      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2be:	3308      	adds	r3, #8
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f002 f994 	bl	80105f0 <RCCEx_PLL2_Config>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e2ce:	e013      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2d4:	3328      	adds	r3, #40	@ 0x28
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f002 fa3b 	bl	8010754 <RCCEx_PLL3_Config>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2e4:	e008      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e2ec:	e004      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2ee:	bf00      	nop
 800e2f0:	e002      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2f2:	bf00      	nop
 800e2f4:	e000      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10b      	bne.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e300:	4b3b      	ldr	r3, [pc, #236]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e304:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e30c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e310:	4a37      	ldr	r2, [pc, #220]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e312:	430b      	orrs	r3, r1
 800e314:	6593      	str	r3, [r2, #88]	@ 0x58
 800e316:	e003      	b.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e31c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e32c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e330:	2300      	movs	r3, #0
 800e332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e336:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e33a:	460b      	mov	r3, r1
 800e33c:	4313      	orrs	r3, r2
 800e33e:	d05d      	beq.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e348:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e34c:	d03b      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e34e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e352:	d834      	bhi.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e358:	d037      	beq.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e35a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e35e:	d82e      	bhi.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e360:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e364:	d033      	beq.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e366:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e36a:	d828      	bhi.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e36c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e370:	d01a      	beq.n	800e3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e376:	d822      	bhi.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e37c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e380:	d007      	beq.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e382:	e01c      	b.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e384:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e388:	4a19      	ldr	r2, [pc, #100]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e38a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e38e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e390:	e01e      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e396:	3308      	adds	r3, #8
 800e398:	2100      	movs	r1, #0
 800e39a:	4618      	mov	r0, r3
 800e39c:	f002 f928 	bl	80105f0 <RCCEx_PLL2_Config>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e3a6:	e013      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ac:	3328      	adds	r3, #40	@ 0x28
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f002 f9cf 	bl	8010754 <RCCEx_PLL3_Config>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3bc:	e008      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3c4:	e004      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3c6:	bf00      	nop
 800e3c8:	e002      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3ca:	bf00      	nop
 800e3cc:	e000      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d10d      	bne.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e3d8:	4b05      	ldr	r3, [pc, #20]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3e8:	4a01      	ldr	r2, [pc, #4]	@ (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3ea:	430b      	orrs	r3, r1
 800e3ec:	6593      	str	r3, [r2, #88]	@ 0x58
 800e3ee:	e005      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e3f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e404:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e408:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e40c:	2300      	movs	r3, #0
 800e40e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e412:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e416:	460b      	mov	r3, r1
 800e418:	4313      	orrs	r3, r2
 800e41a:	d03a      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e422:	2b30      	cmp	r3, #48	@ 0x30
 800e424:	d01f      	beq.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e426:	2b30      	cmp	r3, #48	@ 0x30
 800e428:	d819      	bhi.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e42a:	2b20      	cmp	r3, #32
 800e42c:	d00c      	beq.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e42e:	2b20      	cmp	r3, #32
 800e430:	d815      	bhi.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d019      	beq.n	800e46a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e436:	2b10      	cmp	r3, #16
 800e438:	d111      	bne.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e43a:	4baa      	ldr	r3, [pc, #680]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43e:	4aa9      	ldr	r2, [pc, #676]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e446:	e011      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e44c:	3308      	adds	r3, #8
 800e44e:	2102      	movs	r1, #2
 800e450:	4618      	mov	r0, r3
 800e452:	f002 f8cd 	bl	80105f0 <RCCEx_PLL2_Config>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e45c:	e006      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e464:	e002      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e466:	bf00      	nop
 800e468:	e000      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e46a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e46c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10a      	bne.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e474:	4b9b      	ldr	r3, [pc, #620]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e478:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e482:	4a98      	ldr	r2, [pc, #608]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e484:	430b      	orrs	r3, r1
 800e486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e488:	e003      	b.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e48a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e48e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e49e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e4a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	d051      	beq.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4bc:	d035      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e4be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4c2:	d82e      	bhi.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4c8:	d031      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e4ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4ce:	d828      	bhi.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4d4:	d01a      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e4d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4da:	d822      	bhi.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d003      	beq.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e4e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4e4:	d007      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e4e6:	e01c      	b.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4e8:	4b7e      	ldr	r3, [pc, #504]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ec:	4a7d      	ldr	r2, [pc, #500]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e4f4:	e01c      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f002 f876 	bl	80105f0 <RCCEx_PLL2_Config>
 800e504:	4603      	mov	r3, r0
 800e506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e50a:	e011      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e510:	3328      	adds	r3, #40	@ 0x28
 800e512:	2100      	movs	r1, #0
 800e514:	4618      	mov	r0, r3
 800e516:	f002 f91d 	bl	8010754 <RCCEx_PLL3_Config>
 800e51a:	4603      	mov	r3, r0
 800e51c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e520:	e006      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e528:	e002      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e52a:	bf00      	nop
 800e52c:	e000      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10a      	bne.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e538:	4b6a      	ldr	r3, [pc, #424]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e53c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e546:	4a67      	ldr	r2, [pc, #412]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e548:	430b      	orrs	r3, r1
 800e54a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e54c:	e003      	b.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e54e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e552:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e566:	2300      	movs	r3, #0
 800e568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e56c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e570:	460b      	mov	r3, r1
 800e572:	4313      	orrs	r3, r2
 800e574:	d053      	beq.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e57a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e57c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e580:	d033      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e582:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e586:	d82c      	bhi.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e58c:	d02f      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e58e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e592:	d826      	bhi.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e598:	d02b      	beq.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e59a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e59e:	d820      	bhi.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5a4:	d012      	beq.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e5a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5aa:	d81a      	bhi.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d022      	beq.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5b4:	d115      	bne.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	2101      	movs	r1, #1
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f002 f816 	bl	80105f0 <RCCEx_PLL2_Config>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e5ca:	e015      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d0:	3328      	adds	r3, #40	@ 0x28
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f002 f8bd 	bl	8010754 <RCCEx_PLL3_Config>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e5e0:	e00a      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e5e8:	e006      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5ea:	bf00      	nop
 800e5ec:	e004      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5ee:	bf00      	nop
 800e5f0:	e002      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5f2:	bf00      	nop
 800e5f4:	e000      	b.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10a      	bne.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e600:	4b38      	ldr	r3, [pc, #224]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e604:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e60c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e60e:	4a35      	ldr	r2, [pc, #212]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e610:	430b      	orrs	r3, r1
 800e612:	6513      	str	r3, [r2, #80]	@ 0x50
 800e614:	e003      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e61a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e62a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e62e:	2300      	movs	r3, #0
 800e630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e634:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e638:	460b      	mov	r3, r1
 800e63a:	4313      	orrs	r3, r2
 800e63c:	d058      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e64a:	d033      	beq.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e64c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e650:	d82c      	bhi.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e656:	d02f      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e65c:	d826      	bhi.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e65e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e662:	d02b      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e668:	d820      	bhi.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e66a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e66e:	d012      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e674:	d81a      	bhi.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e676:	2b00      	cmp	r3, #0
 800e678:	d022      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e67a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e67e:	d115      	bne.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e684:	3308      	adds	r3, #8
 800e686:	2101      	movs	r1, #1
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 ffb1 	bl	80105f0 <RCCEx_PLL2_Config>
 800e68e:	4603      	mov	r3, r0
 800e690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e694:	e015      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e69a:	3328      	adds	r3, #40	@ 0x28
 800e69c:	2101      	movs	r1, #1
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f002 f858 	bl	8010754 <RCCEx_PLL3_Config>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e6aa:	e00a      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6b2:	e006      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6b4:	bf00      	nop
 800e6b6:	e004      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6b8:	bf00      	nop
 800e6ba:	e002      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6bc:	bf00      	nop
 800e6be:	e000      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10e      	bne.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e6ca:	4b06      	ldr	r3, [pc, #24]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e6cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e6da:	4a02      	ldr	r2, [pc, #8]	@ (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e6dc:	430b      	orrs	r3, r1
 800e6de:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6e0:	e006      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e6e2:	bf00      	nop
 800e6e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e6fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e700:	2300      	movs	r3, #0
 800e702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4313      	orrs	r3, r2
 800e70e:	d037      	beq.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e71a:	d00e      	beq.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e720:	d816      	bhi.n	800e750 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d018      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e72a:	d111      	bne.n	800e750 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e72c:	4bc4      	ldr	r3, [pc, #784]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e730:	4ac3      	ldr	r2, [pc, #780]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e738:	e00f      	b.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e73e:	3308      	adds	r3, #8
 800e740:	2101      	movs	r1, #1
 800e742:	4618      	mov	r0, r3
 800e744:	f001 ff54 	bl	80105f0 <RCCEx_PLL2_Config>
 800e748:	4603      	mov	r3, r0
 800e74a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e74e:	e004      	b.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e756:	e000      	b.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e75a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e762:	4bb7      	ldr	r3, [pc, #732]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e766:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e770:	4ab3      	ldr	r2, [pc, #716]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e772:	430b      	orrs	r3, r1
 800e774:	6513      	str	r3, [r2, #80]	@ 0x50
 800e776:	e003      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e77c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e78c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e790:	2300      	movs	r3, #0
 800e792:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e796:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e79a:	460b      	mov	r3, r1
 800e79c:	4313      	orrs	r3, r2
 800e79e:	d039      	beq.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d81c      	bhi.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b0:	0800e7ed 	.word	0x0800e7ed
 800e7b4:	0800e7c1 	.word	0x0800e7c1
 800e7b8:	0800e7cf 	.word	0x0800e7cf
 800e7bc:	0800e7ed 	.word	0x0800e7ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7c0:	4b9f      	ldr	r3, [pc, #636]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c4:	4a9e      	ldr	r2, [pc, #632]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e7cc:	e00f      	b.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	2102      	movs	r1, #2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f001 ff0a 	bl	80105f0 <RCCEx_PLL2_Config>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e7e2:	e004      	b.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7ea:	e000      	b.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10a      	bne.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e7f6:	4b92      	ldr	r3, [pc, #584]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7fa:	f023 0103 	bic.w	r1, r3, #3
 800e7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e804:	4a8e      	ldr	r2, [pc, #568]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e806:	430b      	orrs	r3, r1
 800e808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e80a:	e003      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e80c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e820:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e824:	2300      	movs	r3, #0
 800e826:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e82a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e82e:	460b      	mov	r3, r1
 800e830:	4313      	orrs	r3, r2
 800e832:	f000 8099 	beq.w	800e968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e836:	4b83      	ldr	r3, [pc, #524]	@ (800ea44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a82      	ldr	r2, [pc, #520]	@ (800ea44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e83c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e842:	f7f8 fe25 	bl	8007490 <HAL_GetTick>
 800e846:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e84a:	e00b      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e84c:	f7f8 fe20 	bl	8007490 <HAL_GetTick>
 800e850:	4602      	mov	r2, r0
 800e852:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	2b64      	cmp	r3, #100	@ 0x64
 800e85a:	d903      	bls.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e85c:	2303      	movs	r3, #3
 800e85e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e862:	e005      	b.n	800e870 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e864:	4b77      	ldr	r3, [pc, #476]	@ (800ea44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d0ed      	beq.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e874:	2b00      	cmp	r3, #0
 800e876:	d173      	bne.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e878:	4b71      	ldr	r3, [pc, #452]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e87a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e884:	4053      	eors	r3, r2
 800e886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d015      	beq.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e88e:	4b6c      	ldr	r3, [pc, #432]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e896:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e89a:	4b69      	ldr	r3, [pc, #420]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e89e:	4a68      	ldr	r2, [pc, #416]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e8a6:	4b66      	ldr	r3, [pc, #408]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8aa:	4a65      	ldr	r2, [pc, #404]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e8b2:	4a63      	ldr	r2, [pc, #396]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e8c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8c6:	d118      	bne.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8c8:	f7f8 fde2 	bl	8007490 <HAL_GetTick>
 800e8cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e8d0:	e00d      	b.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e8d2:	f7f8 fddd 	bl	8007490 <HAL_GetTick>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e8dc:	1ad2      	subs	r2, r2, r3
 800e8de:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d903      	bls.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e8ec:	e005      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e8ee:	4b54      	ldr	r3, [pc, #336]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8f2:	f003 0302 	and.w	r3, r3, #2
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d0eb      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d129      	bne.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e90a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e90e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e912:	d10e      	bne.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e914:	4b4a      	ldr	r3, [pc, #296]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e924:	091a      	lsrs	r2, r3, #4
 800e926:	4b48      	ldr	r3, [pc, #288]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e928:	4013      	ands	r3, r2
 800e92a:	4a45      	ldr	r2, [pc, #276]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e92c:	430b      	orrs	r3, r1
 800e92e:	6113      	str	r3, [r2, #16]
 800e930:	e005      	b.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e932:	4b43      	ldr	r3, [pc, #268]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	4a42      	ldr	r2, [pc, #264]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e93c:	6113      	str	r3, [r2, #16]
 800e93e:	4b40      	ldr	r3, [pc, #256]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e940:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e94a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e94e:	4a3c      	ldr	r2, [pc, #240]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e950:	430b      	orrs	r3, r1
 800e952:	6713      	str	r3, [r2, #112]	@ 0x70
 800e954:	e008      	b.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e95a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e95e:	e003      	b.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e970:	f002 0301 	and.w	r3, r2, #1
 800e974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e978:	2300      	movs	r3, #0
 800e97a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e97e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e982:	460b      	mov	r3, r1
 800e984:	4313      	orrs	r3, r2
 800e986:	f000 808f 	beq.w	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e990:	2b28      	cmp	r3, #40	@ 0x28
 800e992:	d871      	bhi.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e994:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99a:	bf00      	nop
 800e99c:	0800ea81 	.word	0x0800ea81
 800e9a0:	0800ea79 	.word	0x0800ea79
 800e9a4:	0800ea79 	.word	0x0800ea79
 800e9a8:	0800ea79 	.word	0x0800ea79
 800e9ac:	0800ea79 	.word	0x0800ea79
 800e9b0:	0800ea79 	.word	0x0800ea79
 800e9b4:	0800ea79 	.word	0x0800ea79
 800e9b8:	0800ea79 	.word	0x0800ea79
 800e9bc:	0800ea4d 	.word	0x0800ea4d
 800e9c0:	0800ea79 	.word	0x0800ea79
 800e9c4:	0800ea79 	.word	0x0800ea79
 800e9c8:	0800ea79 	.word	0x0800ea79
 800e9cc:	0800ea79 	.word	0x0800ea79
 800e9d0:	0800ea79 	.word	0x0800ea79
 800e9d4:	0800ea79 	.word	0x0800ea79
 800e9d8:	0800ea79 	.word	0x0800ea79
 800e9dc:	0800ea63 	.word	0x0800ea63
 800e9e0:	0800ea79 	.word	0x0800ea79
 800e9e4:	0800ea79 	.word	0x0800ea79
 800e9e8:	0800ea79 	.word	0x0800ea79
 800e9ec:	0800ea79 	.word	0x0800ea79
 800e9f0:	0800ea79 	.word	0x0800ea79
 800e9f4:	0800ea79 	.word	0x0800ea79
 800e9f8:	0800ea79 	.word	0x0800ea79
 800e9fc:	0800ea81 	.word	0x0800ea81
 800ea00:	0800ea79 	.word	0x0800ea79
 800ea04:	0800ea79 	.word	0x0800ea79
 800ea08:	0800ea79 	.word	0x0800ea79
 800ea0c:	0800ea79 	.word	0x0800ea79
 800ea10:	0800ea79 	.word	0x0800ea79
 800ea14:	0800ea79 	.word	0x0800ea79
 800ea18:	0800ea79 	.word	0x0800ea79
 800ea1c:	0800ea81 	.word	0x0800ea81
 800ea20:	0800ea79 	.word	0x0800ea79
 800ea24:	0800ea79 	.word	0x0800ea79
 800ea28:	0800ea79 	.word	0x0800ea79
 800ea2c:	0800ea79 	.word	0x0800ea79
 800ea30:	0800ea79 	.word	0x0800ea79
 800ea34:	0800ea79 	.word	0x0800ea79
 800ea38:	0800ea79 	.word	0x0800ea79
 800ea3c:	0800ea81 	.word	0x0800ea81
 800ea40:	58024400 	.word	0x58024400
 800ea44:	58024800 	.word	0x58024800
 800ea48:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea50:	3308      	adds	r3, #8
 800ea52:	2101      	movs	r1, #1
 800ea54:	4618      	mov	r0, r3
 800ea56:	f001 fdcb 	bl	80105f0 <RCCEx_PLL2_Config>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ea60:	e00f      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea66:	3328      	adds	r3, #40	@ 0x28
 800ea68:	2101      	movs	r1, #1
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f001 fe72 	bl	8010754 <RCCEx_PLL3_Config>
 800ea70:	4603      	mov	r3, r0
 800ea72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ea76:	e004      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea7e:	e000      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ea80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ea8a:	4bbf      	ldr	r3, [pc, #764]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ea92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea98:	4abb      	ldr	r2, [pc, #748]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea9a:	430b      	orrs	r3, r1
 800ea9c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea9e:	e003      	b.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eaa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab0:	f002 0302 	and.w	r3, r2, #2
 800eab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eab8:	2300      	movs	r3, #0
 800eaba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eabe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4313      	orrs	r3, r2
 800eac6:	d041      	beq.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eacc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eace:	2b05      	cmp	r3, #5
 800ead0:	d824      	bhi.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ead2:	a201      	add	r2, pc, #4	@ (adr r2, 800ead8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead8:	0800eb25 	.word	0x0800eb25
 800eadc:	0800eaf1 	.word	0x0800eaf1
 800eae0:	0800eb07 	.word	0x0800eb07
 800eae4:	0800eb25 	.word	0x0800eb25
 800eae8:	0800eb25 	.word	0x0800eb25
 800eaec:	0800eb25 	.word	0x0800eb25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f001 fd79 	bl	80105f0 <RCCEx_PLL2_Config>
 800eafe:	4603      	mov	r3, r0
 800eb00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb04:	e00f      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb0a:	3328      	adds	r3, #40	@ 0x28
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 fe20 	bl	8010754 <RCCEx_PLL3_Config>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb1a:	e004      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb22:	e000      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800eb24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10a      	bne.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eb2e:	4b96      	ldr	r3, [pc, #600]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb32:	f023 0107 	bic.w	r1, r3, #7
 800eb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb3c:	4a92      	ldr	r2, [pc, #584]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb3e:	430b      	orrs	r3, r1
 800eb40:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb42:	e003      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb54:	f002 0304 	and.w	r3, r2, #4
 800eb58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eb66:	460b      	mov	r3, r1
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	d044      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800eb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb74:	2b05      	cmp	r3, #5
 800eb76:	d825      	bhi.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800eb78:	a201      	add	r2, pc, #4	@ (adr r2, 800eb80 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800eb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7e:	bf00      	nop
 800eb80:	0800ebcd 	.word	0x0800ebcd
 800eb84:	0800eb99 	.word	0x0800eb99
 800eb88:	0800ebaf 	.word	0x0800ebaf
 800eb8c:	0800ebcd 	.word	0x0800ebcd
 800eb90:	0800ebcd 	.word	0x0800ebcd
 800eb94:	0800ebcd 	.word	0x0800ebcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb9c:	3308      	adds	r3, #8
 800eb9e:	2101      	movs	r1, #1
 800eba0:	4618      	mov	r0, r3
 800eba2:	f001 fd25 	bl	80105f0 <RCCEx_PLL2_Config>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ebac:	e00f      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb2:	3328      	adds	r3, #40	@ 0x28
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f001 fdcc 	bl	8010754 <RCCEx_PLL3_Config>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ebc2:	e004      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ebca:	e000      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ebcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10b      	bne.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ebd6:	4b6c      	ldr	r3, [pc, #432]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebda:	f023 0107 	bic.w	r1, r3, #7
 800ebde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe6:	4a68      	ldr	r2, [pc, #416]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebec:	e003      	b.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ebf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	f002 0320 	and.w	r3, r2, #32
 800ec02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4313      	orrs	r3, r2
 800ec14:	d055      	beq.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ec16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec22:	d033      	beq.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ec24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec28:	d82c      	bhi.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec2e:	d02f      	beq.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ec30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec34:	d826      	bhi.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec3a:	d02b      	beq.n	800ec94 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ec3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec40:	d820      	bhi.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec46:	d012      	beq.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ec48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec4c:	d81a      	bhi.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d022      	beq.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ec52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec56:	d115      	bne.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	2100      	movs	r1, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f001 fcc5 	bl	80105f0 <RCCEx_PLL2_Config>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ec6c:	e015      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec72:	3328      	adds	r3, #40	@ 0x28
 800ec74:	2102      	movs	r1, #2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 fd6c 	bl	8010754 <RCCEx_PLL3_Config>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ec82:	e00a      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec8a:	e006      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec8c:	bf00      	nop
 800ec8e:	e004      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec90:	bf00      	nop
 800ec92:	e002      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec94:	bf00      	nop
 800ec96:	e000      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10b      	bne.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eca2:	4b39      	ldr	r3, [pc, #228]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eca6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ecaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecb2:	4a35      	ldr	r2, [pc, #212]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ecb4:	430b      	orrs	r3, r1
 800ecb6:	6553      	str	r3, [r2, #84]	@ 0x54
 800ecb8:	e003      	b.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ecc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ecce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecd8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4313      	orrs	r3, r2
 800ece0:	d058      	beq.n	800ed94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ece2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ecea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ecee:	d033      	beq.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ecf0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ecf4:	d82c      	bhi.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ecf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecfa:	d02f      	beq.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ecfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed00:	d826      	bhi.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed06:	d02b      	beq.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ed08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed0c:	d820      	bhi.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed12:	d012      	beq.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ed14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed18:	d81a      	bhi.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d022      	beq.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ed1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed22:	d115      	bne.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed28:	3308      	adds	r3, #8
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f001 fc5f 	bl	80105f0 <RCCEx_PLL2_Config>
 800ed32:	4603      	mov	r3, r0
 800ed34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed38:	e015      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed3e:	3328      	adds	r3, #40	@ 0x28
 800ed40:	2102      	movs	r1, #2
 800ed42:	4618      	mov	r0, r3
 800ed44:	f001 fd06 	bl	8010754 <RCCEx_PLL3_Config>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed4e:	e00a      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed56:	e006      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed58:	bf00      	nop
 800ed5a:	e004      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed5c:	bf00      	nop
 800ed5e:	e002      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed60:	bf00      	nop
 800ed62:	e000      	b.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10e      	bne.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ed6e:	4b06      	ldr	r3, [pc, #24]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ed70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ed76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ed7e:	4a02      	ldr	r2, [pc, #8]	@ (800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ed80:	430b      	orrs	r3, r1
 800ed82:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed84:	e006      	b.n	800ed94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ed86:	bf00      	nop
 800ed88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ed94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800eda0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eda4:	2300      	movs	r3, #0
 800eda6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800edaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800edae:	460b      	mov	r3, r1
 800edb0:	4313      	orrs	r3, r2
 800edb2:	d055      	beq.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800edb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800edbc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edc0:	d033      	beq.n	800ee2a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800edc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edc6:	d82c      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edcc:	d02f      	beq.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800edce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edd2:	d826      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edd4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800edd8:	d02b      	beq.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800edda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800edde:	d820      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ede0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ede4:	d012      	beq.n	800ee0c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ede6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800edea:	d81a      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edec:	2b00      	cmp	r3, #0
 800edee:	d022      	beq.n	800ee36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800edf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edf4:	d115      	bne.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edfa:	3308      	adds	r3, #8
 800edfc:	2100      	movs	r1, #0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f001 fbf6 	bl	80105f0 <RCCEx_PLL2_Config>
 800ee04:	4603      	mov	r3, r0
 800ee06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee0a:	e015      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee10:	3328      	adds	r3, #40	@ 0x28
 800ee12:	2102      	movs	r1, #2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f001 fc9d 	bl	8010754 <RCCEx_PLL3_Config>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee20:	e00a      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee28:	e006      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee2a:	bf00      	nop
 800ee2c:	e004      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee2e:	bf00      	nop
 800ee30:	e002      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee32:	bf00      	nop
 800ee34:	e000      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10b      	bne.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ee40:	4ba0      	ldr	r3, [pc, #640]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ee48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee50:	4a9c      	ldr	r2, [pc, #624]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee52:	430b      	orrs	r3, r1
 800ee54:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee56:	e003      	b.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ee60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	f002 0308 	and.w	r3, r2, #8
 800ee6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee70:	2300      	movs	r3, #0
 800ee72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	d01e      	beq.n	800eebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ee80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee8c:	d10c      	bne.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ee8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee92:	3328      	adds	r3, #40	@ 0x28
 800ee94:	2102      	movs	r1, #2
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 fc5c 	bl	8010754 <RCCEx_PLL3_Config>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800eea8:	4b86      	ldr	r3, [pc, #536]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eeac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb8:	4a82      	ldr	r2, [pc, #520]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeba:	430b      	orrs	r3, r1
 800eebc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800eebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f002 0310 	and.w	r3, r2, #16
 800eeca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eece:	2300      	movs	r3, #0
 800eed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eed4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800eed8:	460b      	mov	r3, r1
 800eeda:	4313      	orrs	r3, r2
 800eedc:	d01e      	beq.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800eede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeea:	d10c      	bne.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eeec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef0:	3328      	adds	r3, #40	@ 0x28
 800eef2:	2102      	movs	r1, #2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f001 fc2d 	bl	8010754 <RCCEx_PLL3_Config>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d002      	beq.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ef06:	4b6f      	ldr	r3, [pc, #444]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ef0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef16:	4a6b      	ldr	r2, [pc, #428]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef18:	430b      	orrs	r3, r1
 800ef1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ef1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ef28:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef2e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ef32:	460b      	mov	r3, r1
 800ef34:	4313      	orrs	r3, r2
 800ef36:	d03e      	beq.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ef38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef44:	d022      	beq.n	800ef8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ef46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef4a:	d81b      	bhi.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d003      	beq.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ef50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef54:	d00b      	beq.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ef56:	e015      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	2100      	movs	r1, #0
 800ef60:	4618      	mov	r0, r3
 800ef62:	f001 fb45 	bl	80105f0 <RCCEx_PLL2_Config>
 800ef66:	4603      	mov	r3, r0
 800ef68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ef6c:	e00f      	b.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef72:	3328      	adds	r3, #40	@ 0x28
 800ef74:	2102      	movs	r1, #2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f001 fbec 	bl	8010754 <RCCEx_PLL3_Config>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ef82:	e004      	b.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ef8a:	e000      	b.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ef8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d10b      	bne.n	800efae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ef96:	4b4b      	ldr	r3, [pc, #300]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ef9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efa6:	4a47      	ldr	r2, [pc, #284]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800efa8:	430b      	orrs	r3, r1
 800efaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800efac:	e003      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800efb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800efc2:	673b      	str	r3, [r7, #112]	@ 0x70
 800efc4:	2300      	movs	r3, #0
 800efc6:	677b      	str	r3, [r7, #116]	@ 0x74
 800efc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800efcc:	460b      	mov	r3, r1
 800efce:	4313      	orrs	r3, r2
 800efd0:	d03b      	beq.n	800f04a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800efd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800efde:	d01f      	beq.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800efe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800efe4:	d818      	bhi.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800efe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efea:	d003      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800efec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eff0:	d007      	beq.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800eff2:	e011      	b.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eff4:	4b33      	ldr	r3, [pc, #204]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff8:	4a32      	ldr	r2, [pc, #200]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800effa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800effe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f000:	e00f      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f006:	3328      	adds	r3, #40	@ 0x28
 800f008:	2101      	movs	r1, #1
 800f00a:	4618      	mov	r0, r3
 800f00c:	f001 fba2 	bl	8010754 <RCCEx_PLL3_Config>
 800f010:	4603      	mov	r3, r0
 800f012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f016:	e004      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f01e:	e000      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10b      	bne.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f02a:	4b26      	ldr	r3, [pc, #152]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f02e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f03a:	4a22      	ldr	r2, [pc, #136]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f03c:	430b      	orrs	r3, r1
 800f03e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f040:	e003      	b.n	800f04a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f056:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f058:	2300      	movs	r3, #0
 800f05a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f05c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f060:	460b      	mov	r3, r1
 800f062:	4313      	orrs	r3, r2
 800f064:	d034      	beq.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f074:	d007      	beq.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f076:	e011      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f078:	4b12      	ldr	r3, [pc, #72]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f07c:	4a11      	ldr	r2, [pc, #68]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f07e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f084:	e00e      	b.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f08a:	3308      	adds	r3, #8
 800f08c:	2102      	movs	r1, #2
 800f08e:	4618      	mov	r0, r3
 800f090:	f001 faae 	bl	80105f0 <RCCEx_PLL2_Config>
 800f094:	4603      	mov	r3, r0
 800f096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f09a:	e003      	b.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800f09c:	2301      	movs	r3, #1
 800f09e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f0a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10d      	bne.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f0ac:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0ba:	4a02      	ldr	r2, [pc, #8]	@ (800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0bc:	430b      	orrs	r3, r1
 800f0be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0c0:	e006      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800f0c2:	bf00      	nop
 800f0c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f0dc:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0de:	2300      	movs	r3, #0
 800f0e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800f0e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	d00c      	beq.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0f0:	3328      	adds	r3, #40	@ 0x28
 800f0f2:	2102      	movs	r1, #2
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f001 fb2d 	bl	8010754 <RCCEx_PLL3_Config>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800f100:	2301      	movs	r3, #1
 800f102:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f112:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f114:	2300      	movs	r3, #0
 800f116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f118:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f11c:	460b      	mov	r3, r1
 800f11e:	4313      	orrs	r3, r2
 800f120:	d036      	beq.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f12c:	d018      	beq.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800f12e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f132:	d811      	bhi.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f138:	d014      	beq.n	800f164 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800f13a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f13e:	d80b      	bhi.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f140:	2b00      	cmp	r3, #0
 800f142:	d011      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800f144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f148:	d106      	bne.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f14a:	4bb7      	ldr	r3, [pc, #732]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f14e:	4ab6      	ldr	r2, [pc, #728]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f156:	e008      	b.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f15e:	e004      	b.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f160:	bf00      	nop
 800f162:	e002      	b.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f16a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10a      	bne.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f172:	4bad      	ldr	r3, [pc, #692]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f176:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f17e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f180:	4aa9      	ldr	r2, [pc, #676]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f182:	430b      	orrs	r3, r1
 800f184:	6553      	str	r3, [r2, #84]	@ 0x54
 800f186:	e003      	b.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f18c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f198:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f19c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f19e:	2300      	movs	r3, #0
 800f1a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f1a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	d009      	beq.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f1ac:	4b9e      	ldr	r3, [pc, #632]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ba:	4a9b      	ldr	r2, [pc, #620]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1bc:	430b      	orrs	r3, r1
 800f1be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	d009      	beq.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1dc:	4b92      	ldr	r3, [pc, #584]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1ea:	4a8f      	ldr	r2, [pc, #572]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1ec:	430b      	orrs	r3, r1
 800f1ee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f1fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1fe:	2300      	movs	r3, #0
 800f200:	647b      	str	r3, [r7, #68]	@ 0x44
 800f202:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f206:	460b      	mov	r3, r1
 800f208:	4313      	orrs	r3, r2
 800f20a:	d00e      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f20c:	4b86      	ldr	r3, [pc, #536]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	4a85      	ldr	r2, [pc, #532]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f216:	6113      	str	r3, [r2, #16]
 800f218:	4b83      	ldr	r3, [pc, #524]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f21a:	6919      	ldr	r1, [r3, #16]
 800f21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f224:	4a80      	ldr	r2, [pc, #512]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f226:	430b      	orrs	r3, r1
 800f228:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f236:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f238:	2300      	movs	r3, #0
 800f23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f23c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f240:	460b      	mov	r3, r1
 800f242:	4313      	orrs	r3, r2
 800f244:	d009      	beq.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f246:	4b78      	ldr	r3, [pc, #480]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f24a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f254:	4a74      	ldr	r2, [pc, #464]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f256:	430b      	orrs	r3, r1
 800f258:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f266:	633b      	str	r3, [r7, #48]	@ 0x30
 800f268:	2300      	movs	r3, #0
 800f26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f26c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f270:	460b      	mov	r3, r1
 800f272:	4313      	orrs	r3, r2
 800f274:	d00a      	beq.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f276:	4b6c      	ldr	r3, [pc, #432]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f27a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f286:	4a68      	ldr	r2, [pc, #416]	@ (800f428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f288:	430b      	orrs	r3, r1
 800f28a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	2100      	movs	r1, #0
 800f296:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f298:	f003 0301 	and.w	r3, r3, #1
 800f29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f29e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	d011      	beq.n	800f2cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2ac:	3308      	adds	r3, #8
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f001 f99d 	bl	80105f0 <RCCEx_PLL2_Config>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f2bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	6239      	str	r1, [r7, #32]
 800f2d8:	f003 0302 	and.w	r3, r3, #2
 800f2dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	d011      	beq.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f001 f97d 	bl	80105f0 <RCCEx_PLL2_Config>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f2fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f300:	2b00      	cmp	r3, #0
 800f302:	d003      	beq.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	2100      	movs	r1, #0
 800f316:	61b9      	str	r1, [r7, #24]
 800f318:	f003 0304 	and.w	r3, r3, #4
 800f31c:	61fb      	str	r3, [r7, #28]
 800f31e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f322:	460b      	mov	r3, r1
 800f324:	4313      	orrs	r3, r2
 800f326:	d011      	beq.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f32c:	3308      	adds	r3, #8
 800f32e:	2102      	movs	r1, #2
 800f330:	4618      	mov	r0, r3
 800f332:	f001 f95d 	bl	80105f0 <RCCEx_PLL2_Config>
 800f336:	4603      	mov	r3, r0
 800f338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f33c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f340:	2b00      	cmp	r3, #0
 800f342:	d003      	beq.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	2100      	movs	r1, #0
 800f356:	6139      	str	r1, [r7, #16]
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	617b      	str	r3, [r7, #20]
 800f35e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f362:	460b      	mov	r3, r1
 800f364:	4313      	orrs	r3, r2
 800f366:	d011      	beq.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f36c:	3328      	adds	r3, #40	@ 0x28
 800f36e:	2100      	movs	r1, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f001 f9ef 	bl	8010754 <RCCEx_PLL3_Config>
 800f376:	4603      	mov	r3, r0
 800f378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f37c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f380:	2b00      	cmp	r3, #0
 800f382:	d003      	beq.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f394:	2100      	movs	r1, #0
 800f396:	60b9      	str	r1, [r7, #8]
 800f398:	f003 0310 	and.w	r3, r3, #16
 800f39c:	60fb      	str	r3, [r7, #12]
 800f39e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	d011      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3ac:	3328      	adds	r3, #40	@ 0x28
 800f3ae:	2101      	movs	r1, #1
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f001 f9cf 	bl	8010754 <RCCEx_PLL3_Config>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d003      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	6039      	str	r1, [r7, #0]
 800f3d8:	f003 0320 	and.w	r3, r3, #32
 800f3dc:	607b      	str	r3, [r7, #4]
 800f3de:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	d011      	beq.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3ec:	3328      	adds	r3, #40	@ 0x28
 800f3ee:	2102      	movs	r1, #2
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f001 f9af 	bl	8010754 <RCCEx_PLL3_Config>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f3fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f400:	2b00      	cmp	r3, #0
 800f402:	d003      	beq.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f40c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	e000      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f418:	2301      	movs	r3, #1
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f420:	46bd      	mov	sp, r7
 800f422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f426:	bf00      	nop
 800f428:	58024400 	.word	0x58024400

0800f42c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b090      	sub	sp, #64	@ 0x40
 800f430:	af00      	add	r7, sp, #0
 800f432:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f43a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f43e:	430b      	orrs	r3, r1
 800f440:	f040 8094 	bne.w	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f444:	4b9b      	ldr	r3, [pc, #620]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f448:	f003 0307 	and.w	r3, r3, #7
 800f44c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f450:	2b04      	cmp	r3, #4
 800f452:	f200 8087 	bhi.w	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f456:	a201      	add	r2, pc, #4	@ (adr r2, 800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f471 	.word	0x0800f471
 800f460:	0800f499 	.word	0x0800f499
 800f464:	0800f4c1 	.word	0x0800f4c1
 800f468:	0800f55d 	.word	0x0800f55d
 800f46c:	0800f4e9 	.word	0x0800f4e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f470:	4b90      	ldr	r3, [pc, #576]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f47c:	d108      	bne.n	800f490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f47e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f482:	4618      	mov	r0, r3
 800f484:	f000 ff62 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f48c:	f000 bc93 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f494:	f000 bc8f 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f498:	4b86      	ldr	r3, [pc, #536]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4a4:	d108      	bne.n	800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4a6:	f107 0318 	add.w	r3, r7, #24
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 fca6 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4b4:	f000 bc7f 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4bc:	f000 bc7b 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4c0:	4b7c      	ldr	r3, [pc, #496]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4cc:	d108      	bne.n	800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4ce:	f107 030c 	add.w	r3, r7, #12
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 fde6 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4dc:	f000 bc6b 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4e4:	f000 bc67 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4e8:	4b72      	ldr	r3, [pc, #456]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f4f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4f2:	4b70      	ldr	r3, [pc, #448]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	d10c      	bne.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f500:	2b00      	cmp	r3, #0
 800f502:	d109      	bne.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f504:	4b6b      	ldr	r3, [pc, #428]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	08db      	lsrs	r3, r3, #3
 800f50a:	f003 0303 	and.w	r3, r3, #3
 800f50e:	4a6a      	ldr	r2, [pc, #424]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f510:	fa22 f303 	lsr.w	r3, r2, r3
 800f514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f516:	e01f      	b.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f518:	4b66      	ldr	r3, [pc, #408]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f524:	d106      	bne.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f52c:	d102      	bne.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f52e:	4b63      	ldr	r3, [pc, #396]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f532:	e011      	b.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f534:	4b5f      	ldr	r3, [pc, #380]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f53c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f540:	d106      	bne.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f548:	d102      	bne.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f54a:	4b5d      	ldr	r3, [pc, #372]	@ (800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f54e:	e003      	b.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f554:	f000 bc2f 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f558:	f000 bc2d 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f55c:	4b59      	ldr	r3, [pc, #356]	@ (800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f560:	f000 bc29 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f564:	2300      	movs	r3, #0
 800f566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f568:	f000 bc25 	b.w	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f570:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f574:	430b      	orrs	r3, r1
 800f576:	f040 80a7 	bne.w	800f6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f57a:	4b4e      	ldr	r3, [pc, #312]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f57e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f582:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f58a:	d054      	beq.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f592:	f200 808b 	bhi.w	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f598:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f59c:	f000 8083 	beq.w	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f5a6:	f200 8081 	bhi.w	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5b0:	d02f      	beq.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5b8:	d878      	bhi.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d004      	beq.n	800f5ca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5c6:	d012      	beq.n	800f5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f5c8:	e070      	b.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5ca:	4b3a      	ldr	r3, [pc, #232]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5d6:	d107      	bne.n	800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 feb5 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5e6:	e3e6      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ec:	e3e3      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5ee:	4b31      	ldr	r3, [pc, #196]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5fa:	d107      	bne.n	800f60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5fc:	f107 0318 	add.w	r3, r7, #24
 800f600:	4618      	mov	r0, r3
 800f602:	f000 fbfb 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f60a:	e3d4      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f610:	e3d1      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f612:	4b28      	ldr	r3, [pc, #160]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f61a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f61e:	d107      	bne.n	800f630 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f620:	f107 030c 	add.w	r3, r7, #12
 800f624:	4618      	mov	r0, r3
 800f626:	f000 fd3d 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f62e:	e3c2      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f634:	e3bf      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f636:	4b1f      	ldr	r3, [pc, #124]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f63a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f63e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f640:	4b1c      	ldr	r3, [pc, #112]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b04      	cmp	r3, #4
 800f64a:	d10c      	bne.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d109      	bne.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f652:	4b18      	ldr	r3, [pc, #96]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	08db      	lsrs	r3, r3, #3
 800f658:	f003 0303 	and.w	r3, r3, #3
 800f65c:	4a16      	ldr	r2, [pc, #88]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f65e:	fa22 f303 	lsr.w	r3, r2, r3
 800f662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f664:	e01e      	b.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f666:	4b13      	ldr	r3, [pc, #76]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f672:	d106      	bne.n	800f682 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f67a:	d102      	bne.n	800f682 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f67c:	4b0f      	ldr	r3, [pc, #60]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f680:	e010      	b.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f682:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f68a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f68e:	d106      	bne.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f696:	d102      	bne.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f698:	4b09      	ldr	r3, [pc, #36]	@ (800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f69c:	e002      	b.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f6a2:	e388      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6a4:	e387      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f6a6:	4b07      	ldr	r3, [pc, #28]	@ (800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6aa:	e384      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b0:	e381      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6b2:	bf00      	nop
 800f6b4:	58024400 	.word	0x58024400
 800f6b8:	03d09000 	.word	0x03d09000
 800f6bc:	003d0900 	.word	0x003d0900
 800f6c0:	016e3600 	.word	0x016e3600
 800f6c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6cc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f6d0:	430b      	orrs	r3, r1
 800f6d2:	f040 809c 	bne.w	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f6d6:	4b9e      	ldr	r3, [pc, #632]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6da:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f6de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6e6:	d054      	beq.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6ee:	f200 808b 	bhi.w	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f6f8:	f000 8083 	beq.w	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f702:	f200 8081 	bhi.w	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f70c:	d02f      	beq.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f714:	d878      	bhi.n	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f71e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f722:	d012      	beq.n	800f74a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f724:	e070      	b.n	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f726:	4b8a      	ldr	r3, [pc, #552]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f72e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f732:	d107      	bne.n	800f744 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fe07 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f742:	e338      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f748:	e335      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f74a:	4b81      	ldr	r3, [pc, #516]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f756:	d107      	bne.n	800f768 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f758:	f107 0318 	add.w	r3, r7, #24
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 fb4d 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f766:	e326      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f768:	2300      	movs	r3, #0
 800f76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f76c:	e323      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f76e:	4b78      	ldr	r3, [pc, #480]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f77a:	d107      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f77c:	f107 030c 	add.w	r3, r7, #12
 800f780:	4618      	mov	r0, r3
 800f782:	f000 fc8f 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f78a:	e314      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f790:	e311      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f792:	4b6f      	ldr	r3, [pc, #444]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f79a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f79c:	4b6c      	ldr	r3, [pc, #432]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f003 0304 	and.w	r3, r3, #4
 800f7a4:	2b04      	cmp	r3, #4
 800f7a6:	d10c      	bne.n	800f7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d109      	bne.n	800f7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7ae:	4b68      	ldr	r3, [pc, #416]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	08db      	lsrs	r3, r3, #3
 800f7b4:	f003 0303 	and.w	r3, r3, #3
 800f7b8:	4a66      	ldr	r2, [pc, #408]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7c0:	e01e      	b.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f7c2:	4b63      	ldr	r3, [pc, #396]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7ce:	d106      	bne.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7d6:	d102      	bne.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f7d8:	4b5f      	ldr	r3, [pc, #380]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7dc:	e010      	b.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7de:	4b5c      	ldr	r3, [pc, #368]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7ea:	d106      	bne.n	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7f2:	d102      	bne.n	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f7f4:	4b59      	ldr	r3, [pc, #356]	@ (800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7f8:	e002      	b.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f7fe:	e2da      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f800:	e2d9      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f802:	4b57      	ldr	r3, [pc, #348]	@ (800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f806:	e2d6      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f80c:	e2d3      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f812:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f816:	430b      	orrs	r3, r1
 800f818:	f040 80a7 	bne.w	800f96a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f81c:	4b4c      	ldr	r3, [pc, #304]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f81e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f820:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f824:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f82c:	d055      	beq.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f834:	f200 8096 	bhi.w	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f83e:	f000 8084 	beq.w	800f94a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f848:	f200 808c 	bhi.w	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f852:	d030      	beq.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f85a:	f200 8083 	bhi.w	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f860:	2b00      	cmp	r3, #0
 800f862:	d004      	beq.n	800f86e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f86a:	d012      	beq.n	800f892 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f86c:	e07a      	b.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f86e:	4b38      	ldr	r3, [pc, #224]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f87a:	d107      	bne.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f87c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f880:	4618      	mov	r0, r3
 800f882:	f000 fd63 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f88a:	e294      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f890:	e291      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f892:	4b2f      	ldr	r3, [pc, #188]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f89a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f89e:	d107      	bne.n	800f8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8a0:	f107 0318 	add.w	r3, r7, #24
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 faa9 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8ae:	e282      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b4:	e27f      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8b6:	4b26      	ldr	r3, [pc, #152]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8c2:	d107      	bne.n	800f8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8c4:	f107 030c 	add.w	r3, r7, #12
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f000 fbeb 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d2:	e270      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d8:	e26d      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8da:	4b1d      	ldr	r3, [pc, #116]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f8e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f003 0304 	and.w	r3, r3, #4
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d10c      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8f6:	4b16      	ldr	r3, [pc, #88]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	08db      	lsrs	r3, r3, #3
 800f8fc:	f003 0303 	and.w	r3, r3, #3
 800f900:	4a14      	ldr	r2, [pc, #80]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f902:	fa22 f303 	lsr.w	r3, r2, r3
 800f906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f908:	e01e      	b.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f90a:	4b11      	ldr	r3, [pc, #68]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f916:	d106      	bne.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f91a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f91e:	d102      	bne.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f920:	4b0d      	ldr	r3, [pc, #52]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f924:	e010      	b.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f926:	4b0a      	ldr	r3, [pc, #40]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f92e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f932:	d106      	bne.n	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f93a:	d102      	bne.n	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f93c:	4b07      	ldr	r3, [pc, #28]	@ (800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f940:	e002      	b.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f946:	e236      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f948:	e235      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f94a:	4b05      	ldr	r3, [pc, #20]	@ (800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f94e:	e232      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f950:	58024400 	.word	0x58024400
 800f954:	03d09000 	.word	0x03d09000
 800f958:	003d0900 	.word	0x003d0900
 800f95c:	016e3600 	.word	0x016e3600
 800f960:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f968:	e225      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f96e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f972:	430b      	orrs	r3, r1
 800f974:	f040 8085 	bne.w	800fa82 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f978:	4b9c      	ldr	r3, [pc, #624]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f97c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f980:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f988:	d06b      	beq.n	800fa62 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f990:	d874      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f998:	d056      	beq.n	800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f9a0:	d86c      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9a8:	d03b      	beq.n	800fa22 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9b0:	d864      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9b8:	d021      	beq.n	800f9fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9c0:	d85c      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9ce:	d004      	beq.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f9d0:	e054      	b.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f9d2:	f7fe fb5f 	bl	800e094 <HAL_RCC_GetPCLK1Freq>
 800f9d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9d8:	e1ed      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9da:	4b84      	ldr	r3, [pc, #528]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9e6:	d107      	bne.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9e8:	f107 0318 	add.w	r3, r7, #24
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 fa05 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9f6:	e1de      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9fc:	e1db      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fa06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa0a:	d107      	bne.n	800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa0c:	f107 030c 	add.w	r3, r7, #12
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 fb47 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa1a:	e1cc      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa20:	e1c9      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa22:	4b72      	ldr	r3, [pc, #456]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f003 0304 	and.w	r3, r3, #4
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	d109      	bne.n	800fa42 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa2e:	4b6f      	ldr	r3, [pc, #444]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	08db      	lsrs	r3, r3, #3
 800fa34:	f003 0303 	and.w	r3, r3, #3
 800fa38:	4a6d      	ldr	r2, [pc, #436]	@ (800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fa3a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa40:	e1b9      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa46:	e1b6      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fa48:	4b68      	ldr	r3, [pc, #416]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa54:	d102      	bne.n	800fa5c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800fa56:	4b67      	ldr	r3, [pc, #412]	@ (800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa5a:	e1ac      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa60:	e1a9      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa62:	4b62      	ldr	r3, [pc, #392]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa6e:	d102      	bne.n	800fa76 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800fa70:	4b61      	ldr	r3, [pc, #388]	@ (800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa74:	e19f      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa7a:	e19c      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa80:	e199      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fa82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa86:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800fa8a:	430b      	orrs	r3, r1
 800fa8c:	d173      	bne.n	800fb76 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fa8e:	4b57      	ldr	r3, [pc, #348]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fa96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa9e:	d02f      	beq.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800faa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800faa6:	d863      	bhi.n	800fb70 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800faa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d004      	beq.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fab4:	d012      	beq.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800fab6:	e05b      	b.n	800fb70 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fab8:	4b4c      	ldr	r3, [pc, #304]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fac4:	d107      	bne.n	800fad6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fac6:	f107 0318 	add.w	r3, r7, #24
 800faca:	4618      	mov	r0, r3
 800facc:	f000 f996 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fad4:	e16f      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fada:	e16c      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fadc:	4b43      	ldr	r3, [pc, #268]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fae8:	d107      	bne.n	800fafa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800faea:	f107 030c 	add.w	r3, r7, #12
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 fad8 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faf8:	e15d      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fafe:	e15a      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb00:	4b3a      	ldr	r3, [pc, #232]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb08:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb0a:	4b38      	ldr	r3, [pc, #224]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f003 0304 	and.w	r3, r3, #4
 800fb12:	2b04      	cmp	r3, #4
 800fb14:	d10c      	bne.n	800fb30 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800fb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d109      	bne.n	800fb30 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb1c:	4b33      	ldr	r3, [pc, #204]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	08db      	lsrs	r3, r3, #3
 800fb22:	f003 0303 	and.w	r3, r3, #3
 800fb26:	4a32      	ldr	r2, [pc, #200]	@ (800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fb28:	fa22 f303 	lsr.w	r3, r2, r3
 800fb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb2e:	e01e      	b.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb30:	4b2e      	ldr	r3, [pc, #184]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb3c:	d106      	bne.n	800fb4c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800fb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb44:	d102      	bne.n	800fb4c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb46:	4b2b      	ldr	r3, [pc, #172]	@ (800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb4a:	e010      	b.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb4c:	4b27      	ldr	r3, [pc, #156]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb58:	d106      	bne.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800fb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb60:	d102      	bne.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb62:	4b25      	ldr	r3, [pc, #148]	@ (800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb66:	e002      	b.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fb6c:	e123      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fb6e:	e122      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb74:	e11f      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fb76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb7a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800fb7e:	430b      	orrs	r3, r1
 800fb80:	d13c      	bne.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fb82:	4b1a      	ldr	r3, [pc, #104]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fb8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800fb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb98:	d012      	beq.n	800fbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800fb9a:	e023      	b.n	800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb9c:	4b13      	ldr	r3, [pc, #76]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fba8:	d107      	bne.n	800fbba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f000 fbcc 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbb8:	e0fd      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbbe:	e0fa      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbcc:	d107      	bne.n	800fbde <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbce:	f107 0318 	add.w	r3, r7, #24
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f912 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fbd8:	6a3b      	ldr	r3, [r7, #32]
 800fbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbdc:	e0eb      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe2:	e0e8      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe8:	e0e5      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fbea:	bf00      	nop
 800fbec:	58024400 	.word	0x58024400
 800fbf0:	03d09000 	.word	0x03d09000
 800fbf4:	003d0900 	.word	0x003d0900
 800fbf8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800fc04:	430b      	orrs	r3, r1
 800fc06:	f040 8085 	bne.w	800fd14 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc0a:	4b6d      	ldr	r3, [pc, #436]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800fc12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc1a:	d06b      	beq.n	800fcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc22:	d874      	bhi.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc2a:	d056      	beq.n	800fcda <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc32:	d86c      	bhi.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc3a:	d03b      	beq.n	800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc42:	d864      	bhi.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc4a:	d021      	beq.n	800fc90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc52:	d85c      	bhi.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d004      	beq.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800fc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc60:	d004      	beq.n	800fc6c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800fc62:	e054      	b.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fc64:	f000 f8b4 	bl	800fdd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc6a:	e0a4      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc6c:	4b54      	ldr	r3, [pc, #336]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc78:	d107      	bne.n	800fc8a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc7a:	f107 0318 	add.w	r3, r7, #24
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f8bc 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc88:	e095      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc8e:	e092      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc90:	4b4b      	ldr	r3, [pc, #300]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc9c:	d107      	bne.n	800fcae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc9e:	f107 030c 	add.w	r3, r7, #12
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 f9fe 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcac:	e083      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcb2:	e080      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fcb4:	4b42      	ldr	r3, [pc, #264]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f003 0304 	and.w	r3, r3, #4
 800fcbc:	2b04      	cmp	r3, #4
 800fcbe:	d109      	bne.n	800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fcc0:	4b3f      	ldr	r3, [pc, #252]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	08db      	lsrs	r3, r3, #3
 800fcc6:	f003 0303 	and.w	r3, r3, #3
 800fcca:	4a3e      	ldr	r2, [pc, #248]	@ (800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800fccc:	fa22 f303 	lsr.w	r3, r2, r3
 800fcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcd2:	e070      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcd8:	e06d      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fcda:	4b39      	ldr	r3, [pc, #228]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fce6:	d102      	bne.n	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800fce8:	4b37      	ldr	r3, [pc, #220]	@ (800fdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800fcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcec:	e063      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcf2:	e060      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fcf4:	4b32      	ldr	r3, [pc, #200]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fcfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd00:	d102      	bne.n	800fd08 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800fd02:	4b32      	ldr	r3, [pc, #200]	@ (800fdcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fd04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd06:	e056      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd0c:	e053      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd12:	e050      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fd14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd18:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800fd1c:	430b      	orrs	r3, r1
 800fd1e:	d148      	bne.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fd20:	4b27      	ldr	r3, [pc, #156]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fd28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd30:	d02a      	beq.n	800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800fd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd38:	d838      	bhi.n	800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800fd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d004      	beq.n	800fd4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800fd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd46:	d00d      	beq.n	800fd64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800fd48:	e030      	b.n	800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd4a:	4b1d      	ldr	r3, [pc, #116]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd56:	d102      	bne.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800fd58:	4b1c      	ldr	r3, [pc, #112]	@ (800fdcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd5c:	e02b      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd62:	e028      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd64:	4b16      	ldr	r3, [pc, #88]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd70:	d107      	bne.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fae8 	bl	801034c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd80:	e019      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd86:	e016      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd88:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd94:	d107      	bne.n	800fda6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd96:	f107 0318 	add.w	r3, r7, #24
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f000 f82e 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fda4:	e007      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdaa:	e004      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdb0:	e001      	b.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3740      	adds	r7, #64	@ 0x40
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	58024400 	.word	0x58024400
 800fdc4:	03d09000 	.word	0x03d09000
 800fdc8:	003d0900 	.word	0x003d0900
 800fdcc:	016e3600 	.word	0x016e3600

0800fdd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fdd4:	f7fe f92e 	bl	800e034 <HAL_RCC_GetHCLKFreq>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	4b06      	ldr	r3, [pc, #24]	@ (800fdf4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fddc:	6a1b      	ldr	r3, [r3, #32]
 800fdde:	091b      	lsrs	r3, r3, #4
 800fde0:	f003 0307 	and.w	r3, r3, #7
 800fde4:	4904      	ldr	r1, [pc, #16]	@ (800fdf8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fde6:	5ccb      	ldrb	r3, [r1, r3]
 800fde8:	f003 031f 	and.w	r3, r3, #31
 800fdec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	58024400 	.word	0x58024400
 800fdf8:	0801da14 	.word	0x0801da14

0800fdfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b089      	sub	sp, #36	@ 0x24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe04:	4ba1      	ldr	r3, [pc, #644]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe08:	f003 0303 	and.w	r3, r3, #3
 800fe0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe0e:	4b9f      	ldr	r3, [pc, #636]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe12:	0b1b      	lsrs	r3, r3, #12
 800fe14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe1a:	4b9c      	ldr	r3, [pc, #624]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1e:	091b      	lsrs	r3, r3, #4
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fe26:	4b99      	ldr	r3, [pc, #612]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe2a:	08db      	lsrs	r3, r3, #3
 800fe2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe30:	693a      	ldr	r2, [r7, #16]
 800fe32:	fb02 f303 	mul.w	r3, r2, r3
 800fe36:	ee07 3a90 	vmov	s15, r3
 800fe3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f000 8111 	beq.w	801006c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	f000 8083 	beq.w	800ff58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	f200 80a1 	bhi.w	800ff9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d003      	beq.n	800fe68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d056      	beq.n	800ff14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe66:	e099      	b.n	800ff9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe68:	4b88      	ldr	r3, [pc, #544]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f003 0320 	and.w	r3, r3, #32
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d02d      	beq.n	800fed0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe74:	4b85      	ldr	r3, [pc, #532]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	08db      	lsrs	r3, r3, #3
 800fe7a:	f003 0303 	and.w	r3, r3, #3
 800fe7e:	4a84      	ldr	r2, [pc, #528]	@ (8010090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fe80:	fa22 f303 	lsr.w	r3, r2, r3
 800fe84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	ee07 3a90 	vmov	s15, r3
 800fe8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	ee07 3a90 	vmov	s15, r3
 800fe96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe9e:	4b7b      	ldr	r3, [pc, #492]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fea6:	ee07 3a90 	vmov	s15, r3
 800feaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feae:	ed97 6a03 	vldr	s12, [r7, #12]
 800feb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800feb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800febe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fece:	e087      	b.n	800ffe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	ee07 3a90 	vmov	s15, r3
 800fed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010098 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fee2:	4b6a      	ldr	r3, [pc, #424]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feea:	ee07 3a90 	vmov	s15, r3
 800feee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fef6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff12:	e065      	b.n	800ffe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	ee07 3a90 	vmov	s15, r3
 800ff1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801009c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff26:	4b59      	ldr	r3, [pc, #356]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff2e:	ee07 3a90 	vmov	s15, r3
 800ff32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff56:	e043      	b.n	800ffe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	ee07 3a90 	vmov	s15, r3
 800ff5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80100a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff6a:	4b48      	ldr	r3, [pc, #288]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff72:	ee07 3a90 	vmov	s15, r3
 800ff76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff9a:	e021      	b.n	800ffe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	ee07 3a90 	vmov	s15, r3
 800ffa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801009c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ffaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffae:	4b37      	ldr	r3, [pc, #220]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffb6:	ee07 3a90 	vmov	s15, r3
 800ffba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ffe0:	4b2a      	ldr	r3, [pc, #168]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe4:	0a5b      	lsrs	r3, r3, #9
 800ffe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffea:	ee07 3a90 	vmov	s15, r3
 800ffee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fffa:	edd7 6a07 	vldr	s13, [r7, #28]
 800fffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010006:	ee17 2a90 	vmov	r2, s15
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801000e:	4b1f      	ldr	r3, [pc, #124]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010012:	0c1b      	lsrs	r3, r3, #16
 8010014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010018:	ee07 3a90 	vmov	s15, r3
 801001c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010028:	edd7 6a07 	vldr	s13, [r7, #28]
 801002c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010034:	ee17 2a90 	vmov	r2, s15
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801003c:	4b13      	ldr	r3, [pc, #76]	@ (801008c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801003e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010040:	0e1b      	lsrs	r3, r3, #24
 8010042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010046:	ee07 3a90 	vmov	s15, r3
 801004a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801004e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010056:	edd7 6a07 	vldr	s13, [r7, #28]
 801005a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801005e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010062:	ee17 2a90 	vmov	r2, s15
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801006a:	e008      	b.n	801007e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	609a      	str	r2, [r3, #8]
}
 801007e:	bf00      	nop
 8010080:	3724      	adds	r7, #36	@ 0x24
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	58024400 	.word	0x58024400
 8010090:	03d09000 	.word	0x03d09000
 8010094:	46000000 	.word	0x46000000
 8010098:	4c742400 	.word	0x4c742400
 801009c:	4a742400 	.word	0x4a742400
 80100a0:	4bb71b00 	.word	0x4bb71b00

080100a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b089      	sub	sp, #36	@ 0x24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100ac:	4ba1      	ldr	r3, [pc, #644]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100b0:	f003 0303 	and.w	r3, r3, #3
 80100b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80100b6:	4b9f      	ldr	r3, [pc, #636]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ba:	0d1b      	lsrs	r3, r3, #20
 80100bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80100c2:	4b9c      	ldr	r3, [pc, #624]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c6:	0a1b      	lsrs	r3, r3, #8
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80100ce:	4b99      	ldr	r3, [pc, #612]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100d2:	08db      	lsrs	r3, r3, #3
 80100d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	fb02 f303 	mul.w	r3, r2, r3
 80100de:	ee07 3a90 	vmov	s15, r3
 80100e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 8111 	beq.w	8010314 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	f000 8083 	beq.w	8010200 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	f200 80a1 	bhi.w	8010244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d003      	beq.n	8010110 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	2b01      	cmp	r3, #1
 801010c:	d056      	beq.n	80101bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801010e:	e099      	b.n	8010244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010110:	4b88      	ldr	r3, [pc, #544]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f003 0320 	and.w	r3, r3, #32
 8010118:	2b00      	cmp	r3, #0
 801011a:	d02d      	beq.n	8010178 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801011c:	4b85      	ldr	r3, [pc, #532]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	08db      	lsrs	r3, r3, #3
 8010122:	f003 0303 	and.w	r3, r3, #3
 8010126:	4a84      	ldr	r2, [pc, #528]	@ (8010338 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010128:	fa22 f303 	lsr.w	r3, r2, r3
 801012c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	ee07 3a90 	vmov	s15, r3
 8010134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	ee07 3a90 	vmov	s15, r3
 801013e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010146:	4b7b      	ldr	r3, [pc, #492]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801014a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801014e:	ee07 3a90 	vmov	s15, r3
 8010152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010156:	ed97 6a03 	vldr	s12, [r7, #12]
 801015a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801015e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801016a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801016e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010172:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010176:	e087      	b.n	8010288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	ee07 3a90 	vmov	s15, r3
 801017e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010182:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010340 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801018a:	4b6a      	ldr	r3, [pc, #424]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801018c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801018e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010192:	ee07 3a90 	vmov	s15, r3
 8010196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801019a:	ed97 6a03 	vldr	s12, [r7, #12]
 801019e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101ba:	e065      	b.n	8010288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	ee07 3a90 	vmov	s15, r3
 80101c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ce:	4b59      	ldr	r3, [pc, #356]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d6:	ee07 3a90 	vmov	s15, r3
 80101da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101de:	ed97 6a03 	vldr	s12, [r7, #12]
 80101e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101fe:	e043      	b.n	8010288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	ee07 3a90 	vmov	s15, r3
 8010206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801020a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801020e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010212:	4b48      	ldr	r3, [pc, #288]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801021a:	ee07 3a90 	vmov	s15, r3
 801021e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010222:	ed97 6a03 	vldr	s12, [r7, #12]
 8010226:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801022a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801022e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801023a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801023e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010242:	e021      	b.n	8010288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	ee07 3a90 	vmov	s15, r3
 801024a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801024e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010256:	4b37      	ldr	r3, [pc, #220]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801025a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025e:	ee07 3a90 	vmov	s15, r3
 8010262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010266:	ed97 6a03 	vldr	s12, [r7, #12]
 801026a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801026e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801027a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801027e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010286:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010288:	4b2a      	ldr	r3, [pc, #168]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801028a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801028c:	0a5b      	lsrs	r3, r3, #9
 801028e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010292:	ee07 3a90 	vmov	s15, r3
 8010296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801029a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801029e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80102a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102ae:	ee17 2a90 	vmov	r2, s15
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80102b6:	4b1f      	ldr	r3, [pc, #124]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ba:	0c1b      	lsrs	r3, r3, #16
 80102bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102c0:	ee07 3a90 	vmov	s15, r3
 80102c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80102d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102dc:	ee17 2a90 	vmov	r2, s15
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80102e4:	4b13      	ldr	r3, [pc, #76]	@ (8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102e8:	0e1b      	lsrs	r3, r3, #24
 80102ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102ee:	ee07 3a90 	vmov	s15, r3
 80102f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801030a:	ee17 2a90 	vmov	r2, s15
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010312:	e008      	b.n	8010326 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	609a      	str	r2, [r3, #8]
}
 8010326:	bf00      	nop
 8010328:	3724      	adds	r7, #36	@ 0x24
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	58024400 	.word	0x58024400
 8010338:	03d09000 	.word	0x03d09000
 801033c:	46000000 	.word	0x46000000
 8010340:	4c742400 	.word	0x4c742400
 8010344:	4a742400 	.word	0x4a742400
 8010348:	4bb71b00 	.word	0x4bb71b00

0801034c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801034c:	b480      	push	{r7}
 801034e:	b089      	sub	sp, #36	@ 0x24
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010354:	4ba0      	ldr	r3, [pc, #640]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010358:	f003 0303 	and.w	r3, r3, #3
 801035c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801035e:	4b9e      	ldr	r3, [pc, #632]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010362:	091b      	lsrs	r3, r3, #4
 8010364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010368:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801036a:	4b9b      	ldr	r3, [pc, #620]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036e:	f003 0301 	and.w	r3, r3, #1
 8010372:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010374:	4b98      	ldr	r3, [pc, #608]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010378:	08db      	lsrs	r3, r3, #3
 801037a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	fb02 f303 	mul.w	r3, r2, r3
 8010384:	ee07 3a90 	vmov	s15, r3
 8010388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801038c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 8111 	beq.w	80105ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	2b02      	cmp	r3, #2
 801039c:	f000 8083 	beq.w	80104a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	f200 80a1 	bhi.w	80104ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d056      	beq.n	8010462 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80103b4:	e099      	b.n	80104ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103b6:	4b88      	ldr	r3, [pc, #544]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f003 0320 	and.w	r3, r3, #32
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d02d      	beq.n	801041e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103c2:	4b85      	ldr	r3, [pc, #532]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	08db      	lsrs	r3, r3, #3
 80103c8:	f003 0303 	and.w	r3, r3, #3
 80103cc:	4a83      	ldr	r2, [pc, #524]	@ (80105dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80103ce:	fa22 f303 	lsr.w	r3, r2, r3
 80103d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	ee07 3a90 	vmov	s15, r3
 80103da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	ee07 3a90 	vmov	s15, r3
 80103e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103ec:	4b7a      	ldr	r3, [pc, #488]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103f4:	ee07 3a90 	vmov	s15, r3
 80103f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8010400:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801040c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010418:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801041c:	e087      	b.n	801052e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	ee07 3a90 	vmov	s15, r3
 8010424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010428:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80105e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801042c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010430:	4b69      	ldr	r3, [pc, #420]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010438:	ee07 3a90 	vmov	s15, r3
 801043c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010440:	ed97 6a03 	vldr	s12, [r7, #12]
 8010444:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801044c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010458:	ee67 7a27 	vmul.f32	s15, s14, s15
 801045c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010460:	e065      	b.n	801052e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	ee07 3a90 	vmov	s15, r3
 8010468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801046c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80105e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010474:	4b58      	ldr	r3, [pc, #352]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801047c:	ee07 3a90 	vmov	s15, r3
 8010480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010484:	ed97 6a03 	vldr	s12, [r7, #12]
 8010488:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801048c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801049c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104a4:	e043      	b.n	801052e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	ee07 3a90 	vmov	s15, r3
 80104ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80105ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80104b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104b8:	4b47      	ldr	r3, [pc, #284]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c0:	ee07 3a90 	vmov	s15, r3
 80104c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80104cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104e8:	e021      	b.n	801052e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	ee07 3a90 	vmov	s15, r3
 80104f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80105e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80104f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104fc:	4b36      	ldr	r3, [pc, #216]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010504:	ee07 3a90 	vmov	s15, r3
 8010508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801050c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010510:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801051c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010528:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801052c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801052e:	4b2a      	ldr	r3, [pc, #168]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010532:	0a5b      	lsrs	r3, r3, #9
 8010534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010538:	ee07 3a90 	vmov	s15, r3
 801053c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010540:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010548:	edd7 6a07 	vldr	s13, [r7, #28]
 801054c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010554:	ee17 2a90 	vmov	r2, s15
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801055c:	4b1e      	ldr	r3, [pc, #120]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010560:	0c1b      	lsrs	r3, r3, #16
 8010562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010566:	ee07 3a90 	vmov	s15, r3
 801056a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801056e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010576:	edd7 6a07 	vldr	s13, [r7, #28]
 801057a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801057e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010582:	ee17 2a90 	vmov	r2, s15
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801058a:	4b13      	ldr	r3, [pc, #76]	@ (80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801058e:	0e1b      	lsrs	r3, r3, #24
 8010590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010594:	ee07 3a90 	vmov	s15, r3
 8010598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801059c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80105a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105b0:	ee17 2a90 	vmov	r2, s15
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80105b8:	e008      	b.n	80105cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	609a      	str	r2, [r3, #8]
}
 80105cc:	bf00      	nop
 80105ce:	3724      	adds	r7, #36	@ 0x24
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	58024400 	.word	0x58024400
 80105dc:	03d09000 	.word	0x03d09000
 80105e0:	46000000 	.word	0x46000000
 80105e4:	4c742400 	.word	0x4c742400
 80105e8:	4a742400 	.word	0x4a742400
 80105ec:	4bb71b00 	.word	0x4bb71b00

080105f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80105fe:	4b53      	ldr	r3, [pc, #332]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	2b03      	cmp	r3, #3
 8010608:	d101      	bne.n	801060e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	e099      	b.n	8010742 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801060e:	4b4f      	ldr	r3, [pc, #316]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a4e      	ldr	r2, [pc, #312]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010614:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801061a:	f7f6 ff39 	bl	8007490 <HAL_GetTick>
 801061e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010620:	e008      	b.n	8010634 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010622:	f7f6 ff35 	bl	8007490 <HAL_GetTick>
 8010626:	4602      	mov	r2, r0
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	2b02      	cmp	r3, #2
 801062e:	d901      	bls.n	8010634 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010630:	2303      	movs	r3, #3
 8010632:	e086      	b.n	8010742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010634:	4b45      	ldr	r3, [pc, #276]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1f0      	bne.n	8010622 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010640:	4b42      	ldr	r3, [pc, #264]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010644:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	031b      	lsls	r3, r3, #12
 801064e:	493f      	ldr	r1, [pc, #252]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010650:	4313      	orrs	r3, r2
 8010652:	628b      	str	r3, [r1, #40]	@ 0x28
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	3b01      	subs	r3, #1
 801065a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	3b01      	subs	r3, #1
 8010664:	025b      	lsls	r3, r3, #9
 8010666:	b29b      	uxth	r3, r3
 8010668:	431a      	orrs	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	3b01      	subs	r3, #1
 8010670:	041b      	lsls	r3, r3, #16
 8010672:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010676:	431a      	orrs	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	691b      	ldr	r3, [r3, #16]
 801067c:	3b01      	subs	r3, #1
 801067e:	061b      	lsls	r3, r3, #24
 8010680:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010684:	4931      	ldr	r1, [pc, #196]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010686:	4313      	orrs	r3, r2
 8010688:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801068a:	4b30      	ldr	r3, [pc, #192]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 801068c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801068e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	492d      	ldr	r1, [pc, #180]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010698:	4313      	orrs	r3, r2
 801069a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801069c:	4b2b      	ldr	r3, [pc, #172]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 801069e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a0:	f023 0220 	bic.w	r2, r3, #32
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	4928      	ldr	r1, [pc, #160]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106aa:	4313      	orrs	r3, r2
 80106ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80106ae:	4b27      	ldr	r3, [pc, #156]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b2:	4a26      	ldr	r2, [pc, #152]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106b4:	f023 0310 	bic.w	r3, r3, #16
 80106b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80106ba:	4b24      	ldr	r3, [pc, #144]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106be:	4b24      	ldr	r3, [pc, #144]	@ (8010750 <RCCEx_PLL2_Config+0x160>)
 80106c0:	4013      	ands	r3, r2
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	69d2      	ldr	r2, [r2, #28]
 80106c6:	00d2      	lsls	r2, r2, #3
 80106c8:	4920      	ldr	r1, [pc, #128]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106ca:	4313      	orrs	r3, r2
 80106cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80106ce:	4b1f      	ldr	r3, [pc, #124]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d2:	4a1e      	ldr	r2, [pc, #120]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106d4:	f043 0310 	orr.w	r3, r3, #16
 80106d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d106      	bne.n	80106ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80106e0:	4b1a      	ldr	r3, [pc, #104]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106e4:	4a19      	ldr	r2, [pc, #100]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80106ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80106ec:	e00f      	b.n	801070e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d106      	bne.n	8010702 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80106f4:	4b15      	ldr	r3, [pc, #84]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106f8:	4a14      	ldr	r2, [pc, #80]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 80106fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010700:	e005      	b.n	801070e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010702:	4b12      	ldr	r3, [pc, #72]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010706:	4a11      	ldr	r2, [pc, #68]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010708:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801070c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801070e:	4b0f      	ldr	r3, [pc, #60]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a0e      	ldr	r2, [pc, #56]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801071a:	f7f6 feb9 	bl	8007490 <HAL_GetTick>
 801071e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010720:	e008      	b.n	8010734 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010722:	f7f6 feb5 	bl	8007490 <HAL_GetTick>
 8010726:	4602      	mov	r2, r0
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	2b02      	cmp	r3, #2
 801072e:	d901      	bls.n	8010734 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010730:	2303      	movs	r3, #3
 8010732:	e006      	b.n	8010742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010734:	4b05      	ldr	r3, [pc, #20]	@ (801074c <RCCEx_PLL2_Config+0x15c>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801073c:	2b00      	cmp	r3, #0
 801073e:	d0f0      	beq.n	8010722 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010740:	7bfb      	ldrb	r3, [r7, #15]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	58024400 	.word	0x58024400
 8010750:	ffff0007 	.word	0xffff0007

08010754 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010762:	4b53      	ldr	r3, [pc, #332]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010766:	f003 0303 	and.w	r3, r3, #3
 801076a:	2b03      	cmp	r3, #3
 801076c:	d101      	bne.n	8010772 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	e099      	b.n	80108a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010772:	4b4f      	ldr	r3, [pc, #316]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a4e      	ldr	r2, [pc, #312]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801077c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801077e:	f7f6 fe87 	bl	8007490 <HAL_GetTick>
 8010782:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010784:	e008      	b.n	8010798 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010786:	f7f6 fe83 	bl	8007490 <HAL_GetTick>
 801078a:	4602      	mov	r2, r0
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	2b02      	cmp	r3, #2
 8010792:	d901      	bls.n	8010798 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	e086      	b.n	80108a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010798:	4b45      	ldr	r3, [pc, #276]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1f0      	bne.n	8010786 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80107a4:	4b42      	ldr	r3, [pc, #264]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 80107a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	051b      	lsls	r3, r3, #20
 80107b2:	493f      	ldr	r1, [pc, #252]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 80107b4:	4313      	orrs	r3, r2
 80107b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	3b01      	subs	r3, #1
 80107be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	025b      	lsls	r3, r3, #9
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	431a      	orrs	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	3b01      	subs	r3, #1
 80107d4:	041b      	lsls	r3, r3, #16
 80107d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80107da:	431a      	orrs	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	3b01      	subs	r3, #1
 80107e2:	061b      	lsls	r3, r3, #24
 80107e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80107e8:	4931      	ldr	r1, [pc, #196]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 80107ea:	4313      	orrs	r3, r2
 80107ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80107ee:	4b30      	ldr	r3, [pc, #192]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 80107f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	492d      	ldr	r1, [pc, #180]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 80107fc:	4313      	orrs	r3, r2
 80107fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010800:	4b2b      	ldr	r3, [pc, #172]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010804:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	699b      	ldr	r3, [r3, #24]
 801080c:	4928      	ldr	r1, [pc, #160]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801080e:	4313      	orrs	r3, r2
 8010810:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010812:	4b27      	ldr	r3, [pc, #156]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010816:	4a26      	ldr	r2, [pc, #152]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801081c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801081e:	4b24      	ldr	r3, [pc, #144]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010822:	4b24      	ldr	r3, [pc, #144]	@ (80108b4 <RCCEx_PLL3_Config+0x160>)
 8010824:	4013      	ands	r3, r2
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	69d2      	ldr	r2, [r2, #28]
 801082a:	00d2      	lsls	r2, r2, #3
 801082c:	4920      	ldr	r1, [pc, #128]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801082e:	4313      	orrs	r3, r2
 8010830:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010832:	4b1f      	ldr	r3, [pc, #124]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010836:	4a1e      	ldr	r2, [pc, #120]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801083c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d106      	bne.n	8010852 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010844:	4b1a      	ldr	r3, [pc, #104]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010848:	4a19      	ldr	r2, [pc, #100]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801084a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801084e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010850:	e00f      	b.n	8010872 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d106      	bne.n	8010866 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010858:	4b15      	ldr	r3, [pc, #84]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801085a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085c:	4a14      	ldr	r2, [pc, #80]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801085e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010864:	e005      	b.n	8010872 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010866:	4b12      	ldr	r3, [pc, #72]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801086a:	4a11      	ldr	r2, [pc, #68]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801086c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010872:	4b0f      	ldr	r3, [pc, #60]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a0e      	ldr	r2, [pc, #56]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 8010878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801087c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801087e:	f7f6 fe07 	bl	8007490 <HAL_GetTick>
 8010882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010884:	e008      	b.n	8010898 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010886:	f7f6 fe03 	bl	8007490 <HAL_GetTick>
 801088a:	4602      	mov	r2, r0
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	2b02      	cmp	r3, #2
 8010892:	d901      	bls.n	8010898 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010894:	2303      	movs	r3, #3
 8010896:	e006      	b.n	80108a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010898:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <RCCEx_PLL3_Config+0x15c>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d0f0      	beq.n	8010886 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	58024400 	.word	0x58024400
 80108b4:	ffff0007 	.word	0xffff0007

080108b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d101      	bne.n	80108ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	e10f      	b.n	8010aea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a87      	ldr	r2, [pc, #540]	@ (8010af4 <HAL_SPI_Init+0x23c>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d00f      	beq.n	80108fa <HAL_SPI_Init+0x42>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4a86      	ldr	r2, [pc, #536]	@ (8010af8 <HAL_SPI_Init+0x240>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d00a      	beq.n	80108fa <HAL_SPI_Init+0x42>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a84      	ldr	r2, [pc, #528]	@ (8010afc <HAL_SPI_Init+0x244>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d005      	beq.n	80108fa <HAL_SPI_Init+0x42>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	2b0f      	cmp	r3, #15
 80108f4:	d901      	bls.n	80108fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80108f6:	2301      	movs	r3, #1
 80108f8:	e0f7      	b.n	8010aea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 fef6 	bl	80116ec <SPI_GetPacketSize>
 8010900:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a7b      	ldr	r2, [pc, #492]	@ (8010af4 <HAL_SPI_Init+0x23c>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d00c      	beq.n	8010926 <HAL_SPI_Init+0x6e>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a79      	ldr	r2, [pc, #484]	@ (8010af8 <HAL_SPI_Init+0x240>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d007      	beq.n	8010926 <HAL_SPI_Init+0x6e>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a78      	ldr	r2, [pc, #480]	@ (8010afc <HAL_SPI_Init+0x244>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d002      	beq.n	8010926 <HAL_SPI_Init+0x6e>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2b08      	cmp	r3, #8
 8010924:	d811      	bhi.n	801094a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801092a:	4a72      	ldr	r2, [pc, #456]	@ (8010af4 <HAL_SPI_Init+0x23c>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d009      	beq.n	8010944 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a70      	ldr	r2, [pc, #448]	@ (8010af8 <HAL_SPI_Init+0x240>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d004      	beq.n	8010944 <HAL_SPI_Init+0x8c>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4a6f      	ldr	r2, [pc, #444]	@ (8010afc <HAL_SPI_Init+0x244>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d104      	bne.n	801094e <HAL_SPI_Init+0x96>
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b10      	cmp	r3, #16
 8010948:	d901      	bls.n	801094e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	e0cd      	b.n	8010aea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7f1 fe90 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2202      	movs	r2, #2
 801096c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f022 0201 	bic.w	r2, r2, #1
 801097e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801098a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010994:	d119      	bne.n	80109ca <HAL_SPI_Init+0x112>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801099e:	d103      	bne.n	80109a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d008      	beq.n	80109ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10c      	bne.n	80109ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109b8:	d107      	bne.n	80109ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80109c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d00f      	beq.n	80109f6 <HAL_SPI_Init+0x13e>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	2b06      	cmp	r3, #6
 80109dc:	d90b      	bls.n	80109f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	430a      	orrs	r2, r1
 80109f2:	601a      	str	r2, [r3, #0]
 80109f4:	e007      	b.n	8010a06 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010a04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	69da      	ldr	r2, [r3, #28]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	431a      	orrs	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a18:	ea42 0103 	orr.w	r1, r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	68da      	ldr	r2, [r3, #12]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	430a      	orrs	r2, r1
 8010a26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a30:	431a      	orrs	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a36:	431a      	orrs	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	431a      	orrs	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	431a      	orrs	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	695b      	ldr	r3, [r3, #20]
 8010a48:	431a      	orrs	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	431a      	orrs	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	431a      	orrs	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	431a      	orrs	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a66:	ea42 0103 	orr.w	r1, r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	430a      	orrs	r2, r1
 8010a74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d113      	bne.n	8010aa6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010a90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010aa4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f022 0201 	bic.w	r2, r2, #1
 8010ab4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00a      	beq.n	8010ad8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	430a      	orrs	r2, r1
 8010ad6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	40013000 	.word	0x40013000
 8010af8:	40003800 	.word	0x40003800
 8010afc:	40003c00 	.word	0x40003c00

08010b00 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b088      	sub	sp, #32
 8010b04:	af02      	add	r7, sp, #8
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	603b      	str	r3, [r7, #0]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	3320      	adds	r3, #32
 8010b16:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b18:	f7f6 fcba 	bl	8007490 <HAL_GetTick>
 8010b1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d001      	beq.n	8010b2e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	e1d1      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <HAL_SPI_Transmit+0x3a>
 8010b34:	88fb      	ldrh	r3, [r7, #6]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e1c9      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d101      	bne.n	8010b4c <HAL_SPI_Transmit+0x4c>
 8010b48:	2302      	movs	r3, #2
 8010b4a:	e1c2      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2203      	movs	r2, #3
 8010b58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	68ba      	ldr	r2, [r7, #8]
 8010b68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	88fa      	ldrh	r2, [r7, #6]
 8010b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	88fa      	ldrh	r2, [r7, #6]
 8010b76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2200      	movs	r2, #0
 8010b94:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010ba4:	d108      	bne.n	8010bb8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	e009      	b.n	8010bcc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010bca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	685a      	ldr	r2, [r3, #4]
 8010bd2:	4b96      	ldr	r3, [pc, #600]	@ (8010e2c <HAL_SPI_Transmit+0x32c>)
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	88f9      	ldrh	r1, [r7, #6]
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	6812      	ldr	r2, [r2, #0]
 8010bdc:	430b      	orrs	r3, r1
 8010bde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f042 0201 	orr.w	r2, r2, #1
 8010bee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bf8:	d107      	bne.n	8010c0a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	2b0f      	cmp	r3, #15
 8010c10:	d947      	bls.n	8010ca2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010c12:	e03f      	b.n	8010c94 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	f003 0302 	and.w	r3, r3, #2
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d114      	bne.n	8010c4c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	6812      	ldr	r2, [r2, #0]
 8010c2c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	3b01      	subs	r3, #1
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c4a:	e023      	b.n	8010c94 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c4c:	f7f6 fc20 	bl	8007490 <HAL_GetTick>
 8010c50:	4602      	mov	r2, r0
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	683a      	ldr	r2, [r7, #0]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d803      	bhi.n	8010c64 <HAL_SPI_Transmit+0x164>
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c62:	d102      	bne.n	8010c6a <HAL_SPI_Transmit+0x16a>
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d114      	bne.n	8010c94 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 fc70 	bl	8011550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010c90:	2303      	movs	r3, #3
 8010c92:	e11e      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1b9      	bne.n	8010c14 <HAL_SPI_Transmit+0x114>
 8010ca0:	e0f1      	b.n	8010e86 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	2b07      	cmp	r3, #7
 8010ca8:	f240 80e6 	bls.w	8010e78 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010cac:	e05d      	b.n	8010d6a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	695b      	ldr	r3, [r3, #20]
 8010cb4:	f003 0302 	and.w	r3, r3, #2
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d132      	bne.n	8010d22 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d918      	bls.n	8010cfa <HAL_SPI_Transmit+0x1fa>
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d014      	beq.n	8010cfa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	6812      	ldr	r2, [r2, #0]
 8010cda:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ce0:	1d1a      	adds	r2, r3, #4
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	3b02      	subs	r3, #2
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010cf8:	e037      	b.n	8010d6a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cfe:	881a      	ldrh	r2, [r3, #0]
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d08:	1c9a      	adds	r2, r3, #2
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	3b01      	subs	r3, #1
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010d20:	e023      	b.n	8010d6a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d22:	f7f6 fbb5 	bl	8007490 <HAL_GetTick>
 8010d26:	4602      	mov	r2, r0
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	683a      	ldr	r2, [r7, #0]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d803      	bhi.n	8010d3a <HAL_SPI_Transmit+0x23a>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d102      	bne.n	8010d40 <HAL_SPI_Transmit+0x240>
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d114      	bne.n	8010d6a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f000 fc05 	bl	8011550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2201      	movs	r2, #1
 8010d5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2200      	movs	r2, #0
 8010d62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010d66:	2303      	movs	r3, #3
 8010d68:	e0b3      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d19b      	bne.n	8010cae <HAL_SPI_Transmit+0x1ae>
 8010d76:	e086      	b.n	8010e86 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	695b      	ldr	r3, [r3, #20]
 8010d7e:	f003 0302 	and.w	r3, r3, #2
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d154      	bne.n	8010e30 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d918      	bls.n	8010dc4 <HAL_SPI_Transmit+0x2c4>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d96:	2b40      	cmp	r3, #64	@ 0x40
 8010d98:	d914      	bls.n	8010dc4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	6812      	ldr	r2, [r2, #0]
 8010da4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010daa:	1d1a      	adds	r2, r3, #4
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	3b04      	subs	r3, #4
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010dc2:	e059      	b.n	8010e78 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d917      	bls.n	8010e00 <HAL_SPI_Transmit+0x300>
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d013      	beq.n	8010e00 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ddc:	881a      	ldrh	r2, [r3, #0]
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010de6:	1c9a      	adds	r2, r3, #2
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	3b02      	subs	r3, #2
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010dfe:	e03b      	b.n	8010e78 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	3320      	adds	r3, #32
 8010e0a:	7812      	ldrb	r2, [r2, #0]
 8010e0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	3b01      	subs	r3, #1
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010e2a:	e025      	b.n	8010e78 <HAL_SPI_Transmit+0x378>
 8010e2c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e30:	f7f6 fb2e 	bl	8007490 <HAL_GetTick>
 8010e34:	4602      	mov	r2, r0
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	683a      	ldr	r2, [r7, #0]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d803      	bhi.n	8010e48 <HAL_SPI_Transmit+0x348>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e46:	d102      	bne.n	8010e4e <HAL_SPI_Transmit+0x34e>
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d114      	bne.n	8010e78 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f000 fb7e 	bl	8011550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2201      	movs	r2, #1
 8010e68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010e74:	2303      	movs	r3, #3
 8010e76:	e02c      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f47f af79 	bne.w	8010d78 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	2108      	movs	r1, #8
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f000 fbfd 	bl	8011690 <SPI_WaitOnFlagUntilTimeout>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d007      	beq.n	8010eac <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ea2:	f043 0220 	orr.w	r2, r3, #32
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f000 fb4f 	bl	8011550 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d001      	beq.n	8010ed0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e000      	b.n	8010ed2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010ed0:	2300      	movs	r3, #0
  }
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop

08010edc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b08e      	sub	sp, #56	@ 0x38
 8010ee0:	af02      	add	r7, sp, #8
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3320      	adds	r3, #32
 8010ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3330      	adds	r3, #48	@ 0x30
 8010ef8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010efe:	095b      	lsrs	r3, r3, #5
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	3301      	adds	r3, #1
 8010f04:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f06:	f7f6 fac3 	bl	8007490 <HAL_GetTick>
 8010f0a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010f0c:	887b      	ldrh	r3, [r7, #2]
 8010f0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8010f10:	887b      	ldrh	r3, [r7, #2]
 8010f12:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d001      	beq.n	8010f24 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8010f20:	2302      	movs	r3, #2
 8010f22:	e310      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d005      	beq.n	8010f36 <HAL_SPI_TransmitReceive+0x5a>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <HAL_SPI_TransmitReceive+0x5a>
 8010f30:	887b      	ldrh	r3, [r7, #2]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	e305      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d101      	bne.n	8010f48 <HAL_SPI_TransmitReceive+0x6c>
 8010f44:	2302      	movs	r3, #2
 8010f46:	e2fe      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2205      	movs	r2, #5
 8010f54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	887a      	ldrh	r2, [r7, #2]
 8010f6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	887a      	ldrh	r2, [r7, #2]
 8010f72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	887a      	ldrh	r2, [r7, #2]
 8010f80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	887a      	ldrh	r2, [r7, #2]
 8010f88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68da      	ldr	r2, [r3, #12]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010fa6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4a70      	ldr	r2, [pc, #448]	@ (8011170 <HAL_SPI_TransmitReceive+0x294>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d009      	beq.n	8010fc6 <HAL_SPI_TransmitReceive+0xea>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	4a6f      	ldr	r2, [pc, #444]	@ (8011174 <HAL_SPI_TransmitReceive+0x298>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d004      	beq.n	8010fc6 <HAL_SPI_TransmitReceive+0xea>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a6d      	ldr	r2, [pc, #436]	@ (8011178 <HAL_SPI_TransmitReceive+0x29c>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d102      	bne.n	8010fcc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010fc6:	2310      	movs	r3, #16
 8010fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fca:	e001      	b.n	8010fd0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010fcc:	2308      	movs	r3, #8
 8010fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	685a      	ldr	r2, [r3, #4]
 8010fd6:	4b69      	ldr	r3, [pc, #420]	@ (801117c <HAL_SPI_TransmitReceive+0x2a0>)
 8010fd8:	4013      	ands	r3, r2
 8010fda:	8879      	ldrh	r1, [r7, #2]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	6812      	ldr	r2, [r2, #0]
 8010fe0:	430b      	orrs	r3, r1
 8010fe2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f042 0201 	orr.w	r2, r2, #1
 8010ff2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	685b      	ldr	r3, [r3, #4]
 8010ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ffc:	d107      	bne.n	801100e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801100c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	2b0f      	cmp	r3, #15
 8011014:	f240 80a2 	bls.w	801115c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8011018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801101a:	089b      	lsrs	r3, r3, #2
 801101c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801101e:	e094      	b.n	801114a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	695b      	ldr	r3, [r3, #20]
 8011026:	f003 0302 	and.w	r3, r3, #2
 801102a:	2b02      	cmp	r3, #2
 801102c:	d120      	bne.n	8011070 <HAL_SPI_TransmitReceive+0x194>
 801102e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011030:	2b00      	cmp	r3, #0
 8011032:	d01d      	beq.n	8011070 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011034:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011036:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801103a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801103c:	429a      	cmp	r2, r3
 801103e:	d217      	bcs.n	8011070 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	6812      	ldr	r2, [r2, #0]
 801104a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011050:	1d1a      	adds	r2, r3, #4
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801105c:	b29b      	uxth	r3, r3
 801105e:	3b01      	subs	r3, #1
 8011060:	b29a      	uxth	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801106e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	695b      	ldr	r3, [r3, #20]
 8011076:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011078:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801107a:	2b00      	cmp	r3, #0
 801107c:	d065      	beq.n	801114a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	f003 0301 	and.w	r3, r3, #1
 8011088:	2b01      	cmp	r3, #1
 801108a:	d118      	bne.n	80110be <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011094:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011096:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	3b01      	subs	r3, #1
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110bc:	e045      	b.n	801114a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80110be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80110c0:	8bfb      	ldrh	r3, [r7, #30]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d21d      	bcs.n	8011102 <HAL_SPI_TransmitReceive+0x226>
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d018      	beq.n	8011102 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80110da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110e0:	1d1a      	adds	r2, r3, #4
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	3b01      	subs	r3, #1
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011100:	e023      	b.n	801114a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011102:	f7f6 f9c5 	bl	8007490 <HAL_GetTick>
 8011106:	4602      	mov	r2, r0
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801110e:	429a      	cmp	r2, r3
 8011110:	d803      	bhi.n	801111a <HAL_SPI_TransmitReceive+0x23e>
 8011112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011118:	d102      	bne.n	8011120 <HAL_SPI_TransmitReceive+0x244>
 801111a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111c:	2b00      	cmp	r3, #0
 801111e:	d114      	bne.n	801114a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 fa15 	bl	8011550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801112c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2201      	movs	r2, #1
 801113a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011146:	2303      	movs	r3, #3
 8011148:	e1fd      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801114a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801114c:	2b00      	cmp	r3, #0
 801114e:	f47f af67 	bne.w	8011020 <HAL_SPI_TransmitReceive+0x144>
 8011152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011154:	2b00      	cmp	r3, #0
 8011156:	f47f af63 	bne.w	8011020 <HAL_SPI_TransmitReceive+0x144>
 801115a:	e1ce      	b.n	80114fa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	2b07      	cmp	r3, #7
 8011162:	f240 81c2 	bls.w	80114ea <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8011166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011168:	085b      	lsrs	r3, r3, #1
 801116a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801116c:	e0c9      	b.n	8011302 <HAL_SPI_TransmitReceive+0x426>
 801116e:	bf00      	nop
 8011170:	40013000 	.word	0x40013000
 8011174:	40003800 	.word	0x40003800
 8011178:	40003c00 	.word	0x40003c00
 801117c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	695b      	ldr	r3, [r3, #20]
 8011186:	f003 0302 	and.w	r3, r3, #2
 801118a:	2b02      	cmp	r3, #2
 801118c:	d11f      	bne.n	80111ce <HAL_SPI_TransmitReceive+0x2f2>
 801118e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011190:	2b00      	cmp	r3, #0
 8011192:	d01c      	beq.n	80111ce <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011194:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011196:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801119c:	429a      	cmp	r2, r3
 801119e:	d216      	bcs.n	80111ce <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111a4:	881a      	ldrh	r2, [r3, #0]
 80111a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111ae:	1c9a      	adds	r2, r3, #2
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	3b01      	subs	r3, #1
 80111be:	b29a      	uxth	r2, r3
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80111d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f000 8092 	beq.w	8011302 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	f003 0301 	and.w	r3, r3, #1
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d118      	bne.n	801121e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111f0:	6a3a      	ldr	r2, [r7, #32]
 80111f2:	8812      	ldrh	r2, [r2, #0]
 80111f4:	b292      	uxth	r2, r2
 80111f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111fc:	1c9a      	adds	r2, r3, #2
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011208:	b29b      	uxth	r3, r3
 801120a:	3b01      	subs	r3, #1
 801120c:	b29a      	uxth	r2, r3
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801121a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801121c:	e071      	b.n	8011302 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801121e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011220:	8bfb      	ldrh	r3, [r7, #30]
 8011222:	429a      	cmp	r2, r3
 8011224:	d228      	bcs.n	8011278 <HAL_SPI_TransmitReceive+0x39c>
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801122c:	2b00      	cmp	r3, #0
 801122e:	d023      	beq.n	8011278 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011234:	6a3a      	ldr	r2, [r7, #32]
 8011236:	8812      	ldrh	r2, [r2, #0]
 8011238:	b292      	uxth	r2, r2
 801123a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011240:	1c9a      	adds	r2, r3, #2
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801124a:	6a3a      	ldr	r2, [r7, #32]
 801124c:	8812      	ldrh	r2, [r2, #0]
 801124e:	b292      	uxth	r2, r2
 8011250:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011256:	1c9a      	adds	r2, r3, #2
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011262:	b29b      	uxth	r3, r3
 8011264:	3b02      	subs	r3, #2
 8011266:	b29a      	uxth	r2, r3
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011274:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011276:	e044      	b.n	8011302 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801127a:	2b01      	cmp	r3, #1
 801127c:	d11d      	bne.n	80112ba <HAL_SPI_TransmitReceive+0x3de>
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011284:	2b00      	cmp	r3, #0
 8011286:	d018      	beq.n	80112ba <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801128c:	6a3a      	ldr	r2, [r7, #32]
 801128e:	8812      	ldrh	r2, [r2, #0]
 8011290:	b292      	uxth	r2, r2
 8011292:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011298:	1c9a      	adds	r2, r3, #2
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	3b01      	subs	r3, #1
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112b8:	e023      	b.n	8011302 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112ba:	f7f6 f8e9 	bl	8007490 <HAL_GetTick>
 80112be:	4602      	mov	r2, r0
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d803      	bhi.n	80112d2 <HAL_SPI_TransmitReceive+0x3f6>
 80112ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d0:	d102      	bne.n	80112d8 <HAL_SPI_TransmitReceive+0x3fc>
 80112d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d114      	bne.n	8011302 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f000 f939 	bl	8011550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80112e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2201      	movs	r2, #1
 80112f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e121      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011302:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011304:	2b00      	cmp	r3, #0
 8011306:	f47f af3b 	bne.w	8011180 <HAL_SPI_TransmitReceive+0x2a4>
 801130a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801130c:	2b00      	cmp	r3, #0
 801130e:	f47f af37 	bne.w	8011180 <HAL_SPI_TransmitReceive+0x2a4>
 8011312:	e0f2      	b.n	80114fa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	695b      	ldr	r3, [r3, #20]
 801131a:	f003 0302 	and.w	r3, r3, #2
 801131e:	2b02      	cmp	r3, #2
 8011320:	d121      	bne.n	8011366 <HAL_SPI_TransmitReceive+0x48a>
 8011322:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011324:	2b00      	cmp	r3, #0
 8011326:	d01e      	beq.n	8011366 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011328:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801132a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011330:	429a      	cmp	r2, r3
 8011332:	d218      	bcs.n	8011366 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	3320      	adds	r3, #32
 801133e:	7812      	ldrb	r2, [r2, #0]
 8011340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011352:	b29b      	uxth	r3, r3
 8011354:	3b01      	subs	r3, #1
 8011356:	b29a      	uxth	r2, r3
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011364:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	695b      	ldr	r3, [r3, #20]
 801136c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801136e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011370:	2b00      	cmp	r3, #0
 8011372:	f000 80ba 	beq.w	80114ea <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b01      	cmp	r3, #1
 8011382:	d11b      	bne.n	80113bc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011390:	7812      	ldrb	r2, [r2, #0]
 8011392:	b2d2      	uxtb	r2, r2
 8011394:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801139a:	1c5a      	adds	r2, r3, #1
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	3b01      	subs	r3, #1
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113b8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80113ba:	e096      	b.n	80114ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80113bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80113be:	8bfb      	ldrh	r3, [r7, #30]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d24a      	bcs.n	801145a <HAL_SPI_TransmitReceive+0x57e>
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d045      	beq.n	801145a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113da:	7812      	ldrb	r2, [r2, #0]
 80113dc:	b2d2      	uxtb	r2, r2
 80113de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113e4:	1c5a      	adds	r2, r3, #1
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113f6:	7812      	ldrb	r2, [r2, #0]
 80113f8:	b2d2      	uxtb	r2, r2
 80113fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011412:	7812      	ldrb	r2, [r2, #0]
 8011414:	b2d2      	uxtb	r2, r2
 8011416:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801141c:	1c5a      	adds	r2, r3, #1
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801142e:	7812      	ldrb	r2, [r2, #0]
 8011430:	b2d2      	uxtb	r2, r2
 8011432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011444:	b29b      	uxth	r3, r3
 8011446:	3b04      	subs	r3, #4
 8011448:	b29a      	uxth	r2, r3
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011456:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011458:	e047      	b.n	80114ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801145a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801145c:	2b03      	cmp	r3, #3
 801145e:	d820      	bhi.n	80114a2 <HAL_SPI_TransmitReceive+0x5c6>
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8011466:	2b00      	cmp	r3, #0
 8011468:	d01b      	beq.n	80114a2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011476:	7812      	ldrb	r2, [r2, #0]
 8011478:	b2d2      	uxtb	r2, r2
 801147a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011480:	1c5a      	adds	r2, r3, #1
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801148c:	b29b      	uxth	r3, r3
 801148e:	3b01      	subs	r3, #1
 8011490:	b29a      	uxth	r2, r3
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801149e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80114a0:	e023      	b.n	80114ea <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114a2:	f7f5 fff5 	bl	8007490 <HAL_GetTick>
 80114a6:	4602      	mov	r2, r0
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d803      	bhi.n	80114ba <HAL_SPI_TransmitReceive+0x5de>
 80114b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b8:	d102      	bne.n	80114c0 <HAL_SPI_TransmitReceive+0x5e4>
 80114ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d114      	bne.n	80114ea <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f000 f845 	bl	8011550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2201      	movs	r2, #1
 80114da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80114e6:	2303      	movs	r3, #3
 80114e8:	e02d      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80114ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f47f af11 	bne.w	8011314 <HAL_SPI_TransmitReceive+0x438>
 80114f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f47f af0d 	bne.w	8011314 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011500:	2200      	movs	r2, #0
 8011502:	2108      	movs	r1, #8
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f000 f8c3 	bl	8011690 <SPI_WaitOnFlagUntilTimeout>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d007      	beq.n	8011520 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011516:	f043 0220 	orr.w	r2, r3, #32
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f000 f815 	bl	8011550 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2201      	movs	r2, #1
 801152a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011544:	2300      	movs	r3, #0
  }
}
 8011546:	4618      	mov	r0, r3
 8011548:	3730      	adds	r7, #48	@ 0x30
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop

08011550 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011550:	b480      	push	{r7}
 8011552:	b085      	sub	sp, #20
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	695b      	ldr	r3, [r3, #20]
 801155e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	699a      	ldr	r2, [r3, #24]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f042 0208 	orr.w	r2, r2, #8
 801156e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	699a      	ldr	r2, [r3, #24]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f042 0210 	orr.w	r2, r2, #16
 801157e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f022 0201 	bic.w	r2, r2, #1
 801158e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6919      	ldr	r1, [r3, #16]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	4b3c      	ldr	r3, [pc, #240]	@ (801168c <SPI_CloseTransfer+0x13c>)
 801159c:	400b      	ands	r3, r1
 801159e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	689a      	ldr	r2, [r3, #8]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80115ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b04      	cmp	r3, #4
 80115ba:	d014      	beq.n	80115e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f003 0320 	and.w	r3, r3, #32
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00f      	beq.n	80115e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	699a      	ldr	r2, [r3, #24]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f042 0220 	orr.w	r2, r2, #32
 80115e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	2b03      	cmp	r3, #3
 80115f0:	d014      	beq.n	801161c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00f      	beq.n	801161c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011602:	f043 0204 	orr.w	r2, r3, #4
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	699a      	ldr	r2, [r3, #24]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801161a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011622:	2b00      	cmp	r3, #0
 8011624:	d00f      	beq.n	8011646 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801162c:	f043 0201 	orr.w	r2, r3, #1
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	699a      	ldr	r2, [r3, #24]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011644:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00f      	beq.n	8011670 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011656:	f043 0208 	orr.w	r2, r3, #8
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	699a      	ldr	r2, [r3, #24]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801166e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011680:	bf00      	nop
 8011682:	3714      	adds	r7, #20
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr
 801168c:	fffffc90 	.word	0xfffffc90

08011690 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	603b      	str	r3, [r7, #0]
 801169c:	4613      	mov	r3, r2
 801169e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80116a0:	e010      	b.n	80116c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116a2:	f7f5 fef5 	bl	8007490 <HAL_GetTick>
 80116a6:	4602      	mov	r2, r0
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	1ad3      	subs	r3, r2, r3
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d803      	bhi.n	80116ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116b8:	d102      	bne.n	80116c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d101      	bne.n	80116c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80116c0:	2303      	movs	r3, #3
 80116c2:	e00f      	b.n	80116e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	695a      	ldr	r2, [r3, #20]
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	4013      	ands	r3, r2
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	bf0c      	ite	eq
 80116d4:	2301      	moveq	r3, #1
 80116d6:	2300      	movne	r3, #0
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	461a      	mov	r2, r3
 80116dc:	79fb      	ldrb	r3, [r7, #7]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d0df      	beq.n	80116a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3710      	adds	r7, #16
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f8:	095b      	lsrs	r3, r3, #5
 80116fa:	3301      	adds	r3, #1
 80116fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	3301      	adds	r3, #1
 8011704:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	3307      	adds	r3, #7
 801170a:	08db      	lsrs	r3, r3, #3
 801170c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	fb02 f303 	mul.w	r3, r2, r3
}
 8011716:	4618      	mov	r0, r3
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b082      	sub	sp, #8
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d101      	bne.n	8011734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	e049      	b.n	80117c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	d106      	bne.n	801174e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7f1 f8a5 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2202      	movs	r2, #2
 8011752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	3304      	adds	r3, #4
 801175e:	4619      	mov	r1, r3
 8011760:	4610      	mov	r0, r2
 8011762:	f001 f9a3 	bl	8012aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2201      	movs	r2, #1
 801176a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2201      	movs	r2, #1
 801177a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2201      	movs	r2, #1
 801178a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2201      	movs	r2, #1
 801179a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2201      	movs	r2, #1
 80117b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2201      	movs	r2, #1
 80117c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80117c6:	2300      	movs	r3, #0
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d001      	beq.n	80117e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	e056      	b.n	8011896 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2202      	movs	r2, #2
 80117ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4a2b      	ldr	r2, [pc, #172]	@ (80118a4 <HAL_TIM_Base_Start+0xd4>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d02c      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011802:	d027      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a27      	ldr	r2, [pc, #156]	@ (80118a8 <HAL_TIM_Base_Start+0xd8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d022      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	4a26      	ldr	r2, [pc, #152]	@ (80118ac <HAL_TIM_Base_Start+0xdc>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d01d      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4a24      	ldr	r2, [pc, #144]	@ (80118b0 <HAL_TIM_Base_Start+0xe0>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d018      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4a23      	ldr	r2, [pc, #140]	@ (80118b4 <HAL_TIM_Base_Start+0xe4>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d013      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a21      	ldr	r2, [pc, #132]	@ (80118b8 <HAL_TIM_Base_Start+0xe8>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d00e      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a20      	ldr	r2, [pc, #128]	@ (80118bc <HAL_TIM_Base_Start+0xec>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d009      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a1e      	ldr	r2, [pc, #120]	@ (80118c0 <HAL_TIM_Base_Start+0xf0>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d004      	beq.n	8011854 <HAL_TIM_Base_Start+0x84>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4a1d      	ldr	r2, [pc, #116]	@ (80118c4 <HAL_TIM_Base_Start+0xf4>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d115      	bne.n	8011880 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	689a      	ldr	r2, [r3, #8]
 801185a:	4b1b      	ldr	r3, [pc, #108]	@ (80118c8 <HAL_TIM_Base_Start+0xf8>)
 801185c:	4013      	ands	r3, r2
 801185e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b06      	cmp	r3, #6
 8011864:	d015      	beq.n	8011892 <HAL_TIM_Base_Start+0xc2>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801186c:	d011      	beq.n	8011892 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	f042 0201 	orr.w	r2, r2, #1
 801187c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801187e:	e008      	b.n	8011892 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f042 0201 	orr.w	r2, r2, #1
 801188e:	601a      	str	r2, [r3, #0]
 8011890:	e000      	b.n	8011894 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3714      	adds	r7, #20
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	40010000 	.word	0x40010000
 80118a8:	40000400 	.word	0x40000400
 80118ac:	40000800 	.word	0x40000800
 80118b0:	40000c00 	.word	0x40000c00
 80118b4:	40010400 	.word	0x40010400
 80118b8:	40001800 	.word	0x40001800
 80118bc:	40014000 	.word	0x40014000
 80118c0:	4000e000 	.word	0x4000e000
 80118c4:	4000e400 	.word	0x4000e400
 80118c8:	00010007 	.word	0x00010007

080118cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d001      	beq.n	80118e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	e05e      	b.n	80119a2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2202      	movs	r2, #2
 80118e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	68da      	ldr	r2, [r3, #12]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f042 0201 	orr.w	r2, r2, #1
 80118fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	4a2b      	ldr	r2, [pc, #172]	@ (80119b0 <HAL_TIM_Base_Start_IT+0xe4>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d02c      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801190e:	d027      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a27      	ldr	r2, [pc, #156]	@ (80119b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d022      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	4a26      	ldr	r2, [pc, #152]	@ (80119b8 <HAL_TIM_Base_Start_IT+0xec>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d01d      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a24      	ldr	r2, [pc, #144]	@ (80119bc <HAL_TIM_Base_Start_IT+0xf0>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d018      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a23      	ldr	r2, [pc, #140]	@ (80119c0 <HAL_TIM_Base_Start_IT+0xf4>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d013      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a21      	ldr	r2, [pc, #132]	@ (80119c4 <HAL_TIM_Base_Start_IT+0xf8>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d00e      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a20      	ldr	r2, [pc, #128]	@ (80119c8 <HAL_TIM_Base_Start_IT+0xfc>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d009      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a1e      	ldr	r2, [pc, #120]	@ (80119cc <HAL_TIM_Base_Start_IT+0x100>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d004      	beq.n	8011960 <HAL_TIM_Base_Start_IT+0x94>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a1d      	ldr	r2, [pc, #116]	@ (80119d0 <HAL_TIM_Base_Start_IT+0x104>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d115      	bne.n	801198c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	689a      	ldr	r2, [r3, #8]
 8011966:	4b1b      	ldr	r3, [pc, #108]	@ (80119d4 <HAL_TIM_Base_Start_IT+0x108>)
 8011968:	4013      	ands	r3, r2
 801196a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b06      	cmp	r3, #6
 8011970:	d015      	beq.n	801199e <HAL_TIM_Base_Start_IT+0xd2>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011978:	d011      	beq.n	801199e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f042 0201 	orr.w	r2, r2, #1
 8011988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801198a:	e008      	b.n	801199e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f042 0201 	orr.w	r2, r2, #1
 801199a:	601a      	str	r2, [r3, #0]
 801199c:	e000      	b.n	80119a0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801199e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80119a0:	2300      	movs	r3, #0
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3714      	adds	r7, #20
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	40010000 	.word	0x40010000
 80119b4:	40000400 	.word	0x40000400
 80119b8:	40000800 	.word	0x40000800
 80119bc:	40000c00 	.word	0x40000c00
 80119c0:	40010400 	.word	0x40010400
 80119c4:	40001800 	.word	0x40001800
 80119c8:	40014000 	.word	0x40014000
 80119cc:	4000e000 	.word	0x4000e000
 80119d0:	4000e400 	.word	0x4000e400
 80119d4:	00010007 	.word	0x00010007

080119d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d101      	bne.n	80119ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80119e6:	2301      	movs	r3, #1
 80119e8:	e049      	b.n	8011a7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d106      	bne.n	8011a04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f841 	bl	8011a86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2202      	movs	r2, #2
 8011a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3304      	adds	r3, #4
 8011a14:	4619      	mov	r1, r3
 8011a16:	4610      	mov	r0, r2
 8011a18:	f001 f848 	bl	8012aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2201      	movs	r2, #1
 8011a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2201      	movs	r2, #1
 8011a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011a7c:	2300      	movs	r3, #0
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011a86:	b480      	push	{r7}
 8011a88:	b083      	sub	sp, #12
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011a8e:	bf00      	nop
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
	...

08011a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d109      	bne.n	8011ac0 <HAL_TIM_PWM_Start+0x24>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	bf14      	ite	ne
 8011ab8:	2301      	movne	r3, #1
 8011aba:	2300      	moveq	r3, #0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	e03c      	b.n	8011b3a <HAL_TIM_PWM_Start+0x9e>
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	d109      	bne.n	8011ada <HAL_TIM_PWM_Start+0x3e>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	bf14      	ite	ne
 8011ad2:	2301      	movne	r3, #1
 8011ad4:	2300      	moveq	r3, #0
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	e02f      	b.n	8011b3a <HAL_TIM_PWM_Start+0x9e>
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	2b08      	cmp	r3, #8
 8011ade:	d109      	bne.n	8011af4 <HAL_TIM_PWM_Start+0x58>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	bf14      	ite	ne
 8011aec:	2301      	movne	r3, #1
 8011aee:	2300      	moveq	r3, #0
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	e022      	b.n	8011b3a <HAL_TIM_PWM_Start+0x9e>
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2b0c      	cmp	r3, #12
 8011af8:	d109      	bne.n	8011b0e <HAL_TIM_PWM_Start+0x72>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	bf14      	ite	ne
 8011b06:	2301      	movne	r3, #1
 8011b08:	2300      	moveq	r3, #0
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	e015      	b.n	8011b3a <HAL_TIM_PWM_Start+0x9e>
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	2b10      	cmp	r3, #16
 8011b12:	d109      	bne.n	8011b28 <HAL_TIM_PWM_Start+0x8c>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	bf14      	ite	ne
 8011b20:	2301      	movne	r3, #1
 8011b22:	2300      	moveq	r3, #0
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	e008      	b.n	8011b3a <HAL_TIM_PWM_Start+0x9e>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	bf14      	ite	ne
 8011b34:	2301      	movne	r3, #1
 8011b36:	2300      	moveq	r3, #0
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d001      	beq.n	8011b42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011b3e:	2301      	movs	r3, #1
 8011b40:	e0ab      	b.n	8011c9a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d104      	bne.n	8011b52 <HAL_TIM_PWM_Start+0xb6>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011b50:	e023      	b.n	8011b9a <HAL_TIM_PWM_Start+0xfe>
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	2b04      	cmp	r3, #4
 8011b56:	d104      	bne.n	8011b62 <HAL_TIM_PWM_Start+0xc6>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011b60:	e01b      	b.n	8011b9a <HAL_TIM_PWM_Start+0xfe>
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	2b08      	cmp	r3, #8
 8011b66:	d104      	bne.n	8011b72 <HAL_TIM_PWM_Start+0xd6>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011b70:	e013      	b.n	8011b9a <HAL_TIM_PWM_Start+0xfe>
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	2b0c      	cmp	r3, #12
 8011b76:	d104      	bne.n	8011b82 <HAL_TIM_PWM_Start+0xe6>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2202      	movs	r2, #2
 8011b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011b80:	e00b      	b.n	8011b9a <HAL_TIM_PWM_Start+0xfe>
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	2b10      	cmp	r3, #16
 8011b86:	d104      	bne.n	8011b92 <HAL_TIM_PWM_Start+0xf6>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011b90:	e003      	b.n	8011b9a <HAL_TIM_PWM_Start+0xfe>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2202      	movs	r2, #2
 8011b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f001 fba8 	bl	80132f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a3d      	ldr	r2, [pc, #244]	@ (8011ca4 <HAL_TIM_PWM_Start+0x208>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d013      	beq.n	8011bda <HAL_TIM_PWM_Start+0x13e>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8011ca8 <HAL_TIM_PWM_Start+0x20c>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d00e      	beq.n	8011bda <HAL_TIM_PWM_Start+0x13e>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8011cac <HAL_TIM_PWM_Start+0x210>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d009      	beq.n	8011bda <HAL_TIM_PWM_Start+0x13e>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a39      	ldr	r2, [pc, #228]	@ (8011cb0 <HAL_TIM_PWM_Start+0x214>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d004      	beq.n	8011bda <HAL_TIM_PWM_Start+0x13e>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a37      	ldr	r2, [pc, #220]	@ (8011cb4 <HAL_TIM_PWM_Start+0x218>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d101      	bne.n	8011bde <HAL_TIM_PWM_Start+0x142>
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e000      	b.n	8011be0 <HAL_TIM_PWM_Start+0x144>
 8011bde:	2300      	movs	r3, #0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d007      	beq.n	8011bf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8011ca4 <HAL_TIM_PWM_Start+0x208>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d02c      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c06:	d027      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8011cb8 <HAL_TIM_PWM_Start+0x21c>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d022      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4a29      	ldr	r2, [pc, #164]	@ (8011cbc <HAL_TIM_PWM_Start+0x220>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d01d      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4a27      	ldr	r2, [pc, #156]	@ (8011cc0 <HAL_TIM_PWM_Start+0x224>)
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d018      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8011ca8 <HAL_TIM_PWM_Start+0x20c>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d013      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4a23      	ldr	r2, [pc, #140]	@ (8011cc4 <HAL_TIM_PWM_Start+0x228>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d00e      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8011cac <HAL_TIM_PWM_Start+0x210>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d009      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4a1f      	ldr	r2, [pc, #124]	@ (8011cc8 <HAL_TIM_PWM_Start+0x22c>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d004      	beq.n	8011c58 <HAL_TIM_PWM_Start+0x1bc>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4a1e      	ldr	r2, [pc, #120]	@ (8011ccc <HAL_TIM_PWM_Start+0x230>)
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d115      	bne.n	8011c84 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	689a      	ldr	r2, [r3, #8]
 8011c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8011cd0 <HAL_TIM_PWM_Start+0x234>)
 8011c60:	4013      	ands	r3, r2
 8011c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b06      	cmp	r3, #6
 8011c68:	d015      	beq.n	8011c96 <HAL_TIM_PWM_Start+0x1fa>
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c70:	d011      	beq.n	8011c96 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f042 0201 	orr.w	r2, r2, #1
 8011c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c82:	e008      	b.n	8011c96 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f042 0201 	orr.w	r2, r2, #1
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	e000      	b.n	8011c98 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	40010000 	.word	0x40010000
 8011ca8:	40010400 	.word	0x40010400
 8011cac:	40014000 	.word	0x40014000
 8011cb0:	40014400 	.word	0x40014400
 8011cb4:	40014800 	.word	0x40014800
 8011cb8:	40000400 	.word	0x40000400
 8011cbc:	40000800 	.word	0x40000800
 8011cc0:	40000c00 	.word	0x40000c00
 8011cc4:	40001800 	.word	0x40001800
 8011cc8:	4000e000 	.word	0x4000e000
 8011ccc:	4000e400 	.word	0x4000e400
 8011cd0:	00010007 	.word	0x00010007

08011cd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f001 fb06 	bl	80132f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8011dec <HAL_TIM_PWM_Stop+0x118>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d013      	beq.n	8011d1e <HAL_TIM_PWM_Stop+0x4a>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8011df0 <HAL_TIM_PWM_Stop+0x11c>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d00e      	beq.n	8011d1e <HAL_TIM_PWM_Stop+0x4a>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a3b      	ldr	r2, [pc, #236]	@ (8011df4 <HAL_TIM_PWM_Stop+0x120>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d009      	beq.n	8011d1e <HAL_TIM_PWM_Stop+0x4a>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8011df8 <HAL_TIM_PWM_Stop+0x124>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d004      	beq.n	8011d1e <HAL_TIM_PWM_Stop+0x4a>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4a38      	ldr	r2, [pc, #224]	@ (8011dfc <HAL_TIM_PWM_Stop+0x128>)
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	d101      	bne.n	8011d22 <HAL_TIM_PWM_Stop+0x4e>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e000      	b.n	8011d24 <HAL_TIM_PWM_Stop+0x50>
 8011d22:	2300      	movs	r3, #0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d017      	beq.n	8011d58 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6a1a      	ldr	r2, [r3, #32]
 8011d2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d32:	4013      	ands	r3, r2
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10f      	bne.n	8011d58 <HAL_TIM_PWM_Stop+0x84>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	6a1a      	ldr	r2, [r3, #32]
 8011d3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d42:	4013      	ands	r3, r2
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d107      	bne.n	8011d58 <HAL_TIM_PWM_Stop+0x84>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011d56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	6a1a      	ldr	r2, [r3, #32]
 8011d5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d62:	4013      	ands	r3, r2
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10f      	bne.n	8011d88 <HAL_TIM_PWM_Stop+0xb4>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	6a1a      	ldr	r2, [r3, #32]
 8011d6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d72:	4013      	ands	r3, r2
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d107      	bne.n	8011d88 <HAL_TIM_PWM_Stop+0xb4>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f022 0201 	bic.w	r2, r2, #1
 8011d86:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d104      	bne.n	8011d98 <HAL_TIM_PWM_Stop+0xc4>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011d96:	e023      	b.n	8011de0 <HAL_TIM_PWM_Stop+0x10c>
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	2b04      	cmp	r3, #4
 8011d9c:	d104      	bne.n	8011da8 <HAL_TIM_PWM_Stop+0xd4>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2201      	movs	r2, #1
 8011da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011da6:	e01b      	b.n	8011de0 <HAL_TIM_PWM_Stop+0x10c>
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2b08      	cmp	r3, #8
 8011dac:	d104      	bne.n	8011db8 <HAL_TIM_PWM_Stop+0xe4>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011db6:	e013      	b.n	8011de0 <HAL_TIM_PWM_Stop+0x10c>
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	2b0c      	cmp	r3, #12
 8011dbc:	d104      	bne.n	8011dc8 <HAL_TIM_PWM_Stop+0xf4>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011dc6:	e00b      	b.n	8011de0 <HAL_TIM_PWM_Stop+0x10c>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	2b10      	cmp	r3, #16
 8011dcc:	d104      	bne.n	8011dd8 <HAL_TIM_PWM_Stop+0x104>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011dd6:	e003      	b.n	8011de0 <HAL_TIM_PWM_Stop+0x10c>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	40010000 	.word	0x40010000
 8011df0:	40010400 	.word	0x40010400
 8011df4:	40014000 	.word	0x40014000
 8011df8:	40014400 	.word	0x40014400
 8011dfc:	40014800 	.word	0x40014800

08011e00 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b086      	sub	sp, #24
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d109      	bne.n	8011e2c <HAL_TIM_PWM_Start_DMA+0x2c>
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	bf0c      	ite	eq
 8011e24:	2301      	moveq	r3, #1
 8011e26:	2300      	movne	r3, #0
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	e03c      	b.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2b04      	cmp	r3, #4
 8011e30:	d109      	bne.n	8011e46 <HAL_TIM_PWM_Start_DMA+0x46>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	bf0c      	ite	eq
 8011e3e:	2301      	moveq	r3, #1
 8011e40:	2300      	movne	r3, #0
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	e02f      	b.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	2b08      	cmp	r3, #8
 8011e4a:	d109      	bne.n	8011e60 <HAL_TIM_PWM_Start_DMA+0x60>
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	bf0c      	ite	eq
 8011e58:	2301      	moveq	r3, #1
 8011e5a:	2300      	movne	r3, #0
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	e022      	b.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2b0c      	cmp	r3, #12
 8011e64:	d109      	bne.n	8011e7a <HAL_TIM_PWM_Start_DMA+0x7a>
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	bf0c      	ite	eq
 8011e72:	2301      	moveq	r3, #1
 8011e74:	2300      	movne	r3, #0
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	e015      	b.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	2b10      	cmp	r3, #16
 8011e7e:	d109      	bne.n	8011e94 <HAL_TIM_PWM_Start_DMA+0x94>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	bf0c      	ite	eq
 8011e8c:	2301      	moveq	r3, #1
 8011e8e:	2300      	movne	r3, #0
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	e008      	b.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	2b02      	cmp	r3, #2
 8011e9e:	bf0c      	ite	eq
 8011ea0:	2301      	moveq	r3, #1
 8011ea2:	2300      	movne	r3, #0
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8011eaa:	2302      	movs	r3, #2
 8011eac:	e1ba      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d109      	bne.n	8011ec8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	bf0c      	ite	eq
 8011ec0:	2301      	moveq	r3, #1
 8011ec2:	2300      	movne	r3, #0
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	e03c      	b.n	8011f42 <HAL_TIM_PWM_Start_DMA+0x142>
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d109      	bne.n	8011ee2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	bf0c      	ite	eq
 8011eda:	2301      	moveq	r3, #1
 8011edc:	2300      	movne	r3, #0
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	e02f      	b.n	8011f42 <HAL_TIM_PWM_Start_DMA+0x142>
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	d109      	bne.n	8011efc <HAL_TIM_PWM_Start_DMA+0xfc>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	bf0c      	ite	eq
 8011ef4:	2301      	moveq	r3, #1
 8011ef6:	2300      	movne	r3, #0
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	e022      	b.n	8011f42 <HAL_TIM_PWM_Start_DMA+0x142>
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	2b0c      	cmp	r3, #12
 8011f00:	d109      	bne.n	8011f16 <HAL_TIM_PWM_Start_DMA+0x116>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	bf0c      	ite	eq
 8011f0e:	2301      	moveq	r3, #1
 8011f10:	2300      	movne	r3, #0
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	e015      	b.n	8011f42 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2b10      	cmp	r3, #16
 8011f1a:	d109      	bne.n	8011f30 <HAL_TIM_PWM_Start_DMA+0x130>
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	bf0c      	ite	eq
 8011f28:	2301      	moveq	r3, #1
 8011f2a:	2300      	movne	r3, #0
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	e008      	b.n	8011f42 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	bf0c      	ite	eq
 8011f3c:	2301      	moveq	r3, #1
 8011f3e:	2300      	movne	r3, #0
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d034      	beq.n	8011fb0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <HAL_TIM_PWM_Start_DMA+0x152>
 8011f4c:	887b      	ldrh	r3, [r7, #2]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d101      	bne.n	8011f56 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011f52:	2301      	movs	r3, #1
 8011f54:	e166      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d104      	bne.n	8011f66 <HAL_TIM_PWM_Start_DMA+0x166>
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2202      	movs	r2, #2
 8011f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011f64:	e026      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	2b04      	cmp	r3, #4
 8011f6a:	d104      	bne.n	8011f76 <HAL_TIM_PWM_Start_DMA+0x176>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2202      	movs	r2, #2
 8011f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011f74:	e01e      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	2b08      	cmp	r3, #8
 8011f7a:	d104      	bne.n	8011f86 <HAL_TIM_PWM_Start_DMA+0x186>
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011f84:	e016      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2b0c      	cmp	r3, #12
 8011f8a:	d104      	bne.n	8011f96 <HAL_TIM_PWM_Start_DMA+0x196>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2202      	movs	r2, #2
 8011f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011f94:	e00e      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	2b10      	cmp	r3, #16
 8011f9a:	d104      	bne.n	8011fa6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011fa4:	e006      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2202      	movs	r2, #2
 8011faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011fae:	e001      	b.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e137      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b0c      	cmp	r3, #12
 8011fb8:	f200 80ae 	bhi.w	8012118 <HAL_TIM_PWM_Start_DMA+0x318>
 8011fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8011fc4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc2:	bf00      	nop
 8011fc4:	08011ff9 	.word	0x08011ff9
 8011fc8:	08012119 	.word	0x08012119
 8011fcc:	08012119 	.word	0x08012119
 8011fd0:	08012119 	.word	0x08012119
 8011fd4:	08012041 	.word	0x08012041
 8011fd8:	08012119 	.word	0x08012119
 8011fdc:	08012119 	.word	0x08012119
 8011fe0:	08012119 	.word	0x08012119
 8011fe4:	08012089 	.word	0x08012089
 8011fe8:	08012119 	.word	0x08012119
 8011fec:	08012119 	.word	0x08012119
 8011ff0:	08012119 	.word	0x08012119
 8011ff4:	080120d1 	.word	0x080120d1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ffc:	4a8b      	ldr	r2, [pc, #556]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012004:	4a8a      	ldr	r2, [pc, #552]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200c:	4a89      	ldr	r2, [pc, #548]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x434>)
 801200e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	3334      	adds	r3, #52	@ 0x34
 801201c:	461a      	mov	r2, r3
 801201e:	887b      	ldrh	r3, [r7, #2]
 8012020:	f7f7 fd72 	bl	8009b08 <HAL_DMA_Start_IT>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d001      	beq.n	801202e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801202a:	2301      	movs	r3, #1
 801202c:	e0fa      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	68da      	ldr	r2, [r3, #12]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801203c:	60da      	str	r2, [r3, #12]
      break;
 801203e:	e06e      	b.n	801211e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012044:	4a79      	ldr	r2, [pc, #484]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012046:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801204c:	4a78      	ldr	r2, [pc, #480]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x430>)
 801204e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012054:	4a77      	ldr	r2, [pc, #476]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012056:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801205c:	6879      	ldr	r1, [r7, #4]
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	3338      	adds	r3, #56	@ 0x38
 8012064:	461a      	mov	r2, r3
 8012066:	887b      	ldrh	r3, [r7, #2]
 8012068:	f7f7 fd4e 	bl	8009b08 <HAL_DMA_Start_IT>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012072:	2301      	movs	r3, #1
 8012074:	e0d6      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	68da      	ldr	r2, [r3, #12]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012084:	60da      	str	r2, [r3, #12]
      break;
 8012086:	e04a      	b.n	801211e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801208c:	4a67      	ldr	r2, [pc, #412]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x42c>)
 801208e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012094:	4a66      	ldr	r2, [pc, #408]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012096:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801209c:	4a65      	ldr	r2, [pc, #404]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x434>)
 801209e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	333c      	adds	r3, #60	@ 0x3c
 80120ac:	461a      	mov	r2, r3
 80120ae:	887b      	ldrh	r3, [r7, #2]
 80120b0:	f7f7 fd2a 	bl	8009b08 <HAL_DMA_Start_IT>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d001      	beq.n	80120be <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80120ba:	2301      	movs	r3, #1
 80120bc:	e0b2      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	68da      	ldr	r2, [r3, #12]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80120cc:	60da      	str	r2, [r3, #12]
      break;
 80120ce:	e026      	b.n	801211e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120d4:	4a55      	ldr	r2, [pc, #340]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80120d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120dc:	4a54      	ldr	r2, [pc, #336]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x430>)
 80120de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120e4:	4a53      	ldr	r2, [pc, #332]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x434>)
 80120e6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80120ec:	6879      	ldr	r1, [r7, #4]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3340      	adds	r3, #64	@ 0x40
 80120f4:	461a      	mov	r2, r3
 80120f6:	887b      	ldrh	r3, [r7, #2]
 80120f8:	f7f7 fd06 	bl	8009b08 <HAL_DMA_Start_IT>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d001      	beq.n	8012106 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012102:	2301      	movs	r3, #1
 8012104:	e08e      	b.n	8012224 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	68da      	ldr	r2, [r3, #12]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012114:	60da      	str	r2, [r3, #12]
      break;
 8012116:	e002      	b.n	801211e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012118:	2301      	movs	r3, #1
 801211a:	75fb      	strb	r3, [r7, #23]
      break;
 801211c:	bf00      	nop
  }

  if (status == HAL_OK)
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d17e      	bne.n	8012222 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2201      	movs	r2, #1
 801212a:	68b9      	ldr	r1, [r7, #8]
 801212c:	4618      	mov	r0, r3
 801212e:	f001 f8e3 	bl	80132f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	4a40      	ldr	r2, [pc, #256]	@ (8012238 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d013      	beq.n	8012164 <HAL_TIM_PWM_Start_DMA+0x364>
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a3e      	ldr	r2, [pc, #248]	@ (801223c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012142:	4293      	cmp	r3, r2
 8012144:	d00e      	beq.n	8012164 <HAL_TIM_PWM_Start_DMA+0x364>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4a3d      	ldr	r2, [pc, #244]	@ (8012240 <HAL_TIM_PWM_Start_DMA+0x440>)
 801214c:	4293      	cmp	r3, r2
 801214e:	d009      	beq.n	8012164 <HAL_TIM_PWM_Start_DMA+0x364>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a3b      	ldr	r2, [pc, #236]	@ (8012244 <HAL_TIM_PWM_Start_DMA+0x444>)
 8012156:	4293      	cmp	r3, r2
 8012158:	d004      	beq.n	8012164 <HAL_TIM_PWM_Start_DMA+0x364>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4a3a      	ldr	r2, [pc, #232]	@ (8012248 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d101      	bne.n	8012168 <HAL_TIM_PWM_Start_DMA+0x368>
 8012164:	2301      	movs	r3, #1
 8012166:	e000      	b.n	801216a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012168:	2300      	movs	r3, #0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d007      	beq.n	801217e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801217c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4a2d      	ldr	r2, [pc, #180]	@ (8012238 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d02c      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012190:	d027      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4a2d      	ldr	r2, [pc, #180]	@ (801224c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012198:	4293      	cmp	r3, r2
 801219a:	d022      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a2b      	ldr	r2, [pc, #172]	@ (8012250 <HAL_TIM_PWM_Start_DMA+0x450>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d01d      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4a2a      	ldr	r2, [pc, #168]	@ (8012254 <HAL_TIM_PWM_Start_DMA+0x454>)
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d018      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4a21      	ldr	r2, [pc, #132]	@ (801223c <HAL_TIM_PWM_Start_DMA+0x43c>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d013      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4a26      	ldr	r2, [pc, #152]	@ (8012258 <HAL_TIM_PWM_Start_DMA+0x458>)
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d00e      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012240 <HAL_TIM_PWM_Start_DMA+0x440>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d009      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	4a22      	ldr	r2, [pc, #136]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x45c>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d004      	beq.n	80121e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4a20      	ldr	r2, [pc, #128]	@ (8012260 <HAL_TIM_PWM_Start_DMA+0x460>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d115      	bne.n	801220e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	689a      	ldr	r2, [r3, #8]
 80121e8:	4b1e      	ldr	r3, [pc, #120]	@ (8012264 <HAL_TIM_PWM_Start_DMA+0x464>)
 80121ea:	4013      	ands	r3, r2
 80121ec:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	2b06      	cmp	r3, #6
 80121f2:	d015      	beq.n	8012220 <HAL_TIM_PWM_Start_DMA+0x420>
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121fa:	d011      	beq.n	8012220 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f042 0201 	orr.w	r2, r2, #1
 801220a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801220c:	e008      	b.n	8012220 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f042 0201 	orr.w	r2, r2, #1
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	e000      	b.n	8012222 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012220:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012222:	7dfb      	ldrb	r3, [r7, #23]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	0801299b 	.word	0x0801299b
 8012230:	08012a43 	.word	0x08012a43
 8012234:	08012909 	.word	0x08012909
 8012238:	40010000 	.word	0x40010000
 801223c:	40010400 	.word	0x40010400
 8012240:	40014000 	.word	0x40014000
 8012244:	40014400 	.word	0x40014400
 8012248:	40014800 	.word	0x40014800
 801224c:	40000400 	.word	0x40000400
 8012250:	40000800 	.word	0x40000800
 8012254:	40000c00 	.word	0x40000c00
 8012258:	40001800 	.word	0x40001800
 801225c:	4000e000 	.word	0x4000e000
 8012260:	4000e400 	.word	0x4000e400
 8012264:	00010007 	.word	0x00010007

08012268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	f003 0302 	and.w	r3, r3, #2
 8012286:	2b00      	cmp	r3, #0
 8012288:	d020      	beq.n	80122cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f003 0302 	and.w	r3, r3, #2
 8012290:	2b00      	cmp	r3, #0
 8012292:	d01b      	beq.n	80122cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f06f 0202 	mvn.w	r2, #2
 801229c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2201      	movs	r2, #1
 80122a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	699b      	ldr	r3, [r3, #24]
 80122aa:	f003 0303 	and.w	r3, r3, #3
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d003      	beq.n	80122ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 faf6 	bl	80128a4 <HAL_TIM_IC_CaptureCallback>
 80122b8:	e005      	b.n	80122c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fae8 	bl	8012890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 faf9 	bl	80128b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2200      	movs	r2, #0
 80122ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	f003 0304 	and.w	r3, r3, #4
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d020      	beq.n	8012318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f003 0304 	and.w	r3, r3, #4
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d01b      	beq.n	8012318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f06f 0204 	mvn.w	r2, #4
 80122e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2202      	movs	r2, #2
 80122ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	699b      	ldr	r3, [r3, #24]
 80122f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d003      	beq.n	8012306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fad0 	bl	80128a4 <HAL_TIM_IC_CaptureCallback>
 8012304:	e005      	b.n	8012312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f000 fac2 	bl	8012890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fad3 	bl	80128b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	f003 0308 	and.w	r3, r3, #8
 801231e:	2b00      	cmp	r3, #0
 8012320:	d020      	beq.n	8012364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f003 0308 	and.w	r3, r3, #8
 8012328:	2b00      	cmp	r3, #0
 801232a:	d01b      	beq.n	8012364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f06f 0208 	mvn.w	r2, #8
 8012334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2204      	movs	r2, #4
 801233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	69db      	ldr	r3, [r3, #28]
 8012342:	f003 0303 	and.w	r3, r3, #3
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 faaa 	bl	80128a4 <HAL_TIM_IC_CaptureCallback>
 8012350:	e005      	b.n	801235e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 fa9c 	bl	8012890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f000 faad 	bl	80128b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2200      	movs	r2, #0
 8012362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	f003 0310 	and.w	r3, r3, #16
 801236a:	2b00      	cmp	r3, #0
 801236c:	d020      	beq.n	80123b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	f003 0310 	and.w	r3, r3, #16
 8012374:	2b00      	cmp	r3, #0
 8012376:	d01b      	beq.n	80123b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f06f 0210 	mvn.w	r2, #16
 8012380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2208      	movs	r2, #8
 8012386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	69db      	ldr	r3, [r3, #28]
 801238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012392:	2b00      	cmp	r3, #0
 8012394:	d003      	beq.n	801239e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 fa84 	bl	80128a4 <HAL_TIM_IC_CaptureCallback>
 801239c:	e005      	b.n	80123aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 fa76 	bl	8012890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fa87 	bl	80128b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2200      	movs	r2, #0
 80123ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00c      	beq.n	80123d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d007      	beq.n	80123d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f06f 0201 	mvn.w	r2, #1
 80123cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ee ff62 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d104      	bne.n	80123e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00c      	beq.n	8012402 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d007      	beq.n	8012402 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80123fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f001 f847 	bl	8013490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012408:	2b00      	cmp	r3, #0
 801240a:	d00c      	beq.n	8012426 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012412:	2b00      	cmp	r3, #0
 8012414:	d007      	beq.n	8012426 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801241e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f001 f83f 	bl	80134a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00c      	beq.n	801244a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012436:	2b00      	cmp	r3, #0
 8012438:	d007      	beq.n	801244a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 fa4b 	bl	80128e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	f003 0320 	and.w	r3, r3, #32
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00c      	beq.n	801246e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f003 0320 	and.w	r3, r3, #32
 801245a:	2b00      	cmp	r3, #0
 801245c:	d007      	beq.n	801246e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f06f 0220 	mvn.w	r2, #32
 8012466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f001 f807 	bl	801347c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801246e:	bf00      	nop
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
	...

08012478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801248e:	2b01      	cmp	r3, #1
 8012490:	d101      	bne.n	8012496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012492:	2302      	movs	r3, #2
 8012494:	e0ff      	b.n	8012696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2201      	movs	r2, #1
 801249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b14      	cmp	r3, #20
 80124a2:	f200 80f0 	bhi.w	8012686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80124a6:	a201      	add	r2, pc, #4	@ (adr r2, 80124ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80124a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ac:	08012501 	.word	0x08012501
 80124b0:	08012687 	.word	0x08012687
 80124b4:	08012687 	.word	0x08012687
 80124b8:	08012687 	.word	0x08012687
 80124bc:	08012541 	.word	0x08012541
 80124c0:	08012687 	.word	0x08012687
 80124c4:	08012687 	.word	0x08012687
 80124c8:	08012687 	.word	0x08012687
 80124cc:	08012583 	.word	0x08012583
 80124d0:	08012687 	.word	0x08012687
 80124d4:	08012687 	.word	0x08012687
 80124d8:	08012687 	.word	0x08012687
 80124dc:	080125c3 	.word	0x080125c3
 80124e0:	08012687 	.word	0x08012687
 80124e4:	08012687 	.word	0x08012687
 80124e8:	08012687 	.word	0x08012687
 80124ec:	08012605 	.word	0x08012605
 80124f0:	08012687 	.word	0x08012687
 80124f4:	08012687 	.word	0x08012687
 80124f8:	08012687 	.word	0x08012687
 80124fc:	08012645 	.word	0x08012645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	68b9      	ldr	r1, [r7, #8]
 8012506:	4618      	mov	r0, r3
 8012508:	f000 fb82 	bl	8012c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	699a      	ldr	r2, [r3, #24]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f042 0208 	orr.w	r2, r2, #8
 801251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	699a      	ldr	r2, [r3, #24]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f022 0204 	bic.w	r2, r2, #4
 801252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6999      	ldr	r1, [r3, #24]
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	691a      	ldr	r2, [r3, #16]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	430a      	orrs	r2, r1
 801253c:	619a      	str	r2, [r3, #24]
      break;
 801253e:	e0a5      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	4618      	mov	r0, r3
 8012548:	f000 fbf2 	bl	8012d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	699a      	ldr	r2, [r3, #24]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	699a      	ldr	r2, [r3, #24]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6999      	ldr	r1, [r3, #24]
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	691b      	ldr	r3, [r3, #16]
 8012576:	021a      	lsls	r2, r3, #8
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	430a      	orrs	r2, r1
 801257e:	619a      	str	r2, [r3, #24]
      break;
 8012580:	e084      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	68b9      	ldr	r1, [r7, #8]
 8012588:	4618      	mov	r0, r3
 801258a:	f000 fc5b 	bl	8012e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	69da      	ldr	r2, [r3, #28]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f042 0208 	orr.w	r2, r2, #8
 801259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	69da      	ldr	r2, [r3, #28]
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f022 0204 	bic.w	r2, r2, #4
 80125ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	69d9      	ldr	r1, [r3, #28]
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	691a      	ldr	r2, [r3, #16]
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	430a      	orrs	r2, r1
 80125be:	61da      	str	r2, [r3, #28]
      break;
 80125c0:	e064      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	68b9      	ldr	r1, [r7, #8]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f000 fcc3 	bl	8012f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	69da      	ldr	r2, [r3, #28]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80125dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	69da      	ldr	r2, [r3, #28]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80125ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	69d9      	ldr	r1, [r3, #28]
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	021a      	lsls	r2, r3, #8
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	430a      	orrs	r2, r1
 8012600:	61da      	str	r2, [r3, #28]
      break;
 8012602:	e043      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	68b9      	ldr	r1, [r7, #8]
 801260a:	4618      	mov	r0, r3
 801260c:	f000 fd0c 	bl	8013028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f042 0208 	orr.w	r2, r2, #8
 801261e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f022 0204 	bic.w	r2, r2, #4
 801262e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	691a      	ldr	r2, [r3, #16]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	430a      	orrs	r2, r1
 8012640:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012642:	e023      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68b9      	ldr	r1, [r7, #8]
 801264a:	4618      	mov	r0, r3
 801264c:	f000 fd50 	bl	80130f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801265e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801266e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	691b      	ldr	r3, [r3, #16]
 801267a:	021a      	lsls	r2, r3, #8
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	430a      	orrs	r2, r1
 8012682:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012684:	e002      	b.n	801268c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012686:	2301      	movs	r3, #1
 8012688:	75fb      	strb	r3, [r7, #23]
      break;
 801268a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012694:	7dfb      	ldrb	r3, [r7, #23]
}
 8012696:	4618      	mov	r0, r3
 8012698:	3718      	adds	r7, #24
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop

080126a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d101      	bne.n	80126bc <HAL_TIM_ConfigClockSource+0x1c>
 80126b8:	2302      	movs	r3, #2
 80126ba:	e0dc      	b.n	8012876 <HAL_TIM_ConfigClockSource+0x1d6>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2201      	movs	r2, #1
 80126c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2202      	movs	r2, #2
 80126c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80126d4:	68ba      	ldr	r2, [r7, #8]
 80126d6:	4b6a      	ldr	r3, [pc, #424]	@ (8012880 <HAL_TIM_ConfigClockSource+0x1e0>)
 80126d8:	4013      	ands	r3, r2
 80126da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80126e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	4a64      	ldr	r2, [pc, #400]	@ (8012884 <HAL_TIM_ConfigClockSource+0x1e4>)
 80126f2:	4293      	cmp	r3, r2
 80126f4:	f000 80a9 	beq.w	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 80126f8:	4a62      	ldr	r2, [pc, #392]	@ (8012884 <HAL_TIM_ConfigClockSource+0x1e4>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	f200 80ae 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012700:	4a61      	ldr	r2, [pc, #388]	@ (8012888 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012702:	4293      	cmp	r3, r2
 8012704:	f000 80a1 	beq.w	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012708:	4a5f      	ldr	r2, [pc, #380]	@ (8012888 <HAL_TIM_ConfigClockSource+0x1e8>)
 801270a:	4293      	cmp	r3, r2
 801270c:	f200 80a6 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012710:	4a5e      	ldr	r2, [pc, #376]	@ (801288c <HAL_TIM_ConfigClockSource+0x1ec>)
 8012712:	4293      	cmp	r3, r2
 8012714:	f000 8099 	beq.w	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012718:	4a5c      	ldr	r2, [pc, #368]	@ (801288c <HAL_TIM_ConfigClockSource+0x1ec>)
 801271a:	4293      	cmp	r3, r2
 801271c:	f200 809e 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012724:	f000 8091 	beq.w	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012728:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801272c:	f200 8096 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012734:	f000 8089 	beq.w	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801273c:	f200 808e 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012744:	d03e      	beq.n	80127c4 <HAL_TIM_ConfigClockSource+0x124>
 8012746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801274a:	f200 8087 	bhi.w	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 801274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012752:	f000 8086 	beq.w	8012862 <HAL_TIM_ConfigClockSource+0x1c2>
 8012756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801275a:	d87f      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 801275c:	2b70      	cmp	r3, #112	@ 0x70
 801275e:	d01a      	beq.n	8012796 <HAL_TIM_ConfigClockSource+0xf6>
 8012760:	2b70      	cmp	r3, #112	@ 0x70
 8012762:	d87b      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012764:	2b60      	cmp	r3, #96	@ 0x60
 8012766:	d050      	beq.n	801280a <HAL_TIM_ConfigClockSource+0x16a>
 8012768:	2b60      	cmp	r3, #96	@ 0x60
 801276a:	d877      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 801276c:	2b50      	cmp	r3, #80	@ 0x50
 801276e:	d03c      	beq.n	80127ea <HAL_TIM_ConfigClockSource+0x14a>
 8012770:	2b50      	cmp	r3, #80	@ 0x50
 8012772:	d873      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012774:	2b40      	cmp	r3, #64	@ 0x40
 8012776:	d058      	beq.n	801282a <HAL_TIM_ConfigClockSource+0x18a>
 8012778:	2b40      	cmp	r3, #64	@ 0x40
 801277a:	d86f      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 801277c:	2b30      	cmp	r3, #48	@ 0x30
 801277e:	d064      	beq.n	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012780:	2b30      	cmp	r3, #48	@ 0x30
 8012782:	d86b      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 8012784:	2b20      	cmp	r3, #32
 8012786:	d060      	beq.n	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012788:	2b20      	cmp	r3, #32
 801278a:	d867      	bhi.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
 801278c:	2b00      	cmp	r3, #0
 801278e:	d05c      	beq.n	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012790:	2b10      	cmp	r3, #16
 8012792:	d05a      	beq.n	801284a <HAL_TIM_ConfigClockSource+0x1aa>
 8012794:	e062      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80127a6:	f000 fd87 	bl	80132b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80127b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	68ba      	ldr	r2, [r7, #8]
 80127c0:	609a      	str	r2, [r3, #8]
      break;
 80127c2:	e04f      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80127d4:	f000 fd70 	bl	80132b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	689a      	ldr	r2, [r3, #8]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80127e6:	609a      	str	r2, [r3, #8]
      break;
 80127e8:	e03c      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127f6:	461a      	mov	r2, r3
 80127f8:	f000 fce0 	bl	80131bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2150      	movs	r1, #80	@ 0x50
 8012802:	4618      	mov	r0, r3
 8012804:	f000 fd3a 	bl	801327c <TIM_ITRx_SetConfig>
      break;
 8012808:	e02c      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012816:	461a      	mov	r2, r3
 8012818:	f000 fcff 	bl	801321a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2160      	movs	r1, #96	@ 0x60
 8012822:	4618      	mov	r0, r3
 8012824:	f000 fd2a 	bl	801327c <TIM_ITRx_SetConfig>
      break;
 8012828:	e01c      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012836:	461a      	mov	r2, r3
 8012838:	f000 fcc0 	bl	80131bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2140      	movs	r1, #64	@ 0x40
 8012842:	4618      	mov	r0, r3
 8012844:	f000 fd1a 	bl	801327c <TIM_ITRx_SetConfig>
      break;
 8012848:	e00c      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4619      	mov	r1, r3
 8012854:	4610      	mov	r0, r2
 8012856:	f000 fd11 	bl	801327c <TIM_ITRx_SetConfig>
      break;
 801285a:	e003      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	73fb      	strb	r3, [r7, #15]
      break;
 8012860:	e000      	b.n	8012864 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2201      	movs	r2, #1
 8012868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012874:	7bfb      	ldrb	r3, [r7, #15]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	ffceff88 	.word	0xffceff88
 8012884:	00100040 	.word	0x00100040
 8012888:	00100030 	.word	0x00100030
 801288c:	00100020 	.word	0x00100020

08012890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012898:	bf00      	nop
 801289a:	370c      	adds	r7, #12
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80128ac:	bf00      	nop
 80128ae:	370c      	adds	r7, #12
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80128c0:	bf00      	nop
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80128d4:	bf00      	nop
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80128e8:	bf00      	nop
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012914:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	429a      	cmp	r2, r3
 801291e:	d107      	bne.n	8012930 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2201      	movs	r2, #1
 8012924:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2201      	movs	r2, #1
 801292a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801292e:	e02a      	b.n	8012986 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	429a      	cmp	r2, r3
 8012938:	d107      	bne.n	801294a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2202      	movs	r2, #2
 801293e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2201      	movs	r2, #1
 8012944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012948:	e01d      	b.n	8012986 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	429a      	cmp	r2, r3
 8012952:	d107      	bne.n	8012964 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2204      	movs	r2, #4
 8012958:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2201      	movs	r2, #1
 801295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012962:	e010      	b.n	8012986 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	429a      	cmp	r2, r3
 801296c:	d107      	bne.n	801297e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2208      	movs	r2, #8
 8012972:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2201      	movs	r2, #1
 8012978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801297c:	e003      	b.n	8012986 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2201      	movs	r2, #1
 8012982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f7ff ffb4 	bl	80128f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2200      	movs	r2, #0
 8012990:	771a      	strb	r2, [r3, #28]
}
 8012992:	bf00      	nop
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b084      	sub	sp, #16
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d10b      	bne.n	80129ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2201      	movs	r2, #1
 80129b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	69db      	ldr	r3, [r3, #28]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d136      	bne.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80129c8:	e031      	b.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d10b      	bne.n	80129ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2202      	movs	r2, #2
 80129d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	69db      	ldr	r3, [r3, #28]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d125      	bne.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2201      	movs	r2, #1
 80129e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80129ea:	e020      	b.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d10b      	bne.n	8012a0e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2204      	movs	r2, #4
 80129fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	69db      	ldr	r3, [r3, #28]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d114      	bne.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2201      	movs	r2, #1
 8012a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a0c:	e00f      	b.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d10a      	bne.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2208      	movs	r2, #8
 8012a1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	69db      	ldr	r3, [r3, #28]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d103      	bne.n	8012a2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a2e:	68f8      	ldr	r0, [r7, #12]
 8012a30:	f7ff ff42 	bl	80128b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2200      	movs	r2, #0
 8012a38:	771a      	strb	r2, [r3, #28]
}
 8012a3a:	bf00      	nop
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b084      	sub	sp, #16
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d103      	bne.n	8012a62 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	771a      	strb	r2, [r3, #28]
 8012a60:	e019      	b.n	8012a96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d103      	bne.n	8012a74 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2202      	movs	r2, #2
 8012a70:	771a      	strb	r2, [r3, #28]
 8012a72:	e010      	b.n	8012a96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d103      	bne.n	8012a86 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2204      	movs	r2, #4
 8012a82:	771a      	strb	r2, [r3, #28]
 8012a84:	e007      	b.n	8012a96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d102      	bne.n	8012a96 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2208      	movs	r2, #8
 8012a94:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f7ff ff18 	bl	80128cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	771a      	strb	r2, [r3, #28]
}
 8012aa2:	bf00      	nop
 8012aa4:	3710      	adds	r7, #16
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
	...

08012aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b085      	sub	sp, #20
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	4a4a      	ldr	r2, [pc, #296]	@ (8012be8 <TIM_Base_SetConfig+0x13c>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d013      	beq.n	8012aec <TIM_Base_SetConfig+0x40>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012aca:	d00f      	beq.n	8012aec <TIM_Base_SetConfig+0x40>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4a47      	ldr	r2, [pc, #284]	@ (8012bec <TIM_Base_SetConfig+0x140>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d00b      	beq.n	8012aec <TIM_Base_SetConfig+0x40>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a46      	ldr	r2, [pc, #280]	@ (8012bf0 <TIM_Base_SetConfig+0x144>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d007      	beq.n	8012aec <TIM_Base_SetConfig+0x40>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4a45      	ldr	r2, [pc, #276]	@ (8012bf4 <TIM_Base_SetConfig+0x148>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d003      	beq.n	8012aec <TIM_Base_SetConfig+0x40>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4a44      	ldr	r2, [pc, #272]	@ (8012bf8 <TIM_Base_SetConfig+0x14c>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d108      	bne.n	8012afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	4313      	orrs	r3, r2
 8012afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4a39      	ldr	r2, [pc, #228]	@ (8012be8 <TIM_Base_SetConfig+0x13c>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d027      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b0c:	d023      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4a36      	ldr	r2, [pc, #216]	@ (8012bec <TIM_Base_SetConfig+0x140>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d01f      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a35      	ldr	r2, [pc, #212]	@ (8012bf0 <TIM_Base_SetConfig+0x144>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d01b      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4a34      	ldr	r2, [pc, #208]	@ (8012bf4 <TIM_Base_SetConfig+0x148>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d017      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a33      	ldr	r2, [pc, #204]	@ (8012bf8 <TIM_Base_SetConfig+0x14c>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d013      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a32      	ldr	r2, [pc, #200]	@ (8012bfc <TIM_Base_SetConfig+0x150>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d00f      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a31      	ldr	r2, [pc, #196]	@ (8012c00 <TIM_Base_SetConfig+0x154>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d00b      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a30      	ldr	r2, [pc, #192]	@ (8012c04 <TIM_Base_SetConfig+0x158>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d007      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a2f      	ldr	r2, [pc, #188]	@ (8012c08 <TIM_Base_SetConfig+0x15c>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d003      	beq.n	8012b56 <TIM_Base_SetConfig+0xaa>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a2e      	ldr	r2, [pc, #184]	@ (8012c0c <TIM_Base_SetConfig+0x160>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d108      	bne.n	8012b68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	4313      	orrs	r3, r2
 8012b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	695b      	ldr	r3, [r3, #20]
 8012b72:	4313      	orrs	r3, r2
 8012b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	689a      	ldr	r2, [r3, #8]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4a16      	ldr	r2, [pc, #88]	@ (8012be8 <TIM_Base_SetConfig+0x13c>)
 8012b90:	4293      	cmp	r3, r2
 8012b92:	d00f      	beq.n	8012bb4 <TIM_Base_SetConfig+0x108>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	4a18      	ldr	r2, [pc, #96]	@ (8012bf8 <TIM_Base_SetConfig+0x14c>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d00b      	beq.n	8012bb4 <TIM_Base_SetConfig+0x108>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4a17      	ldr	r2, [pc, #92]	@ (8012bfc <TIM_Base_SetConfig+0x150>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d007      	beq.n	8012bb4 <TIM_Base_SetConfig+0x108>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	4a16      	ldr	r2, [pc, #88]	@ (8012c00 <TIM_Base_SetConfig+0x154>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d003      	beq.n	8012bb4 <TIM_Base_SetConfig+0x108>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4a15      	ldr	r2, [pc, #84]	@ (8012c04 <TIM_Base_SetConfig+0x158>)
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	d103      	bne.n	8012bbc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	691a      	ldr	r2, [r3, #16]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	691b      	ldr	r3, [r3, #16]
 8012bc6:	f003 0301 	and.w	r3, r3, #1
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d105      	bne.n	8012bda <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	691b      	ldr	r3, [r3, #16]
 8012bd2:	f023 0201 	bic.w	r2, r3, #1
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	611a      	str	r2, [r3, #16]
  }
}
 8012bda:	bf00      	nop
 8012bdc:	3714      	adds	r7, #20
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop
 8012be8:	40010000 	.word	0x40010000
 8012bec:	40000400 	.word	0x40000400
 8012bf0:	40000800 	.word	0x40000800
 8012bf4:	40000c00 	.word	0x40000c00
 8012bf8:	40010400 	.word	0x40010400
 8012bfc:	40014000 	.word	0x40014000
 8012c00:	40014400 	.word	0x40014400
 8012c04:	40014800 	.word	0x40014800
 8012c08:	4000e000 	.word	0x4000e000
 8012c0c:	4000e400 	.word	0x4000e400

08012c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a1b      	ldr	r3, [r3, #32]
 8012c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a1b      	ldr	r3, [r3, #32]
 8012c24:	f023 0201 	bic.w	r2, r3, #1
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	699b      	ldr	r3, [r3, #24]
 8012c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012c38:	68fa      	ldr	r2, [r7, #12]
 8012c3a:	4b37      	ldr	r3, [pc, #220]	@ (8012d18 <TIM_OC1_SetConfig+0x108>)
 8012c3c:	4013      	ands	r3, r2
 8012c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f023 0303 	bic.w	r3, r3, #3
 8012c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	4313      	orrs	r3, r2
 8012c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	f023 0302 	bic.w	r3, r3, #2
 8012c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	697a      	ldr	r2, [r7, #20]
 8012c60:	4313      	orrs	r3, r2
 8012c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4a2d      	ldr	r2, [pc, #180]	@ (8012d1c <TIM_OC1_SetConfig+0x10c>)
 8012c68:	4293      	cmp	r3, r2
 8012c6a:	d00f      	beq.n	8012c8c <TIM_OC1_SetConfig+0x7c>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8012d20 <TIM_OC1_SetConfig+0x110>)
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d00b      	beq.n	8012c8c <TIM_OC1_SetConfig+0x7c>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	4a2b      	ldr	r2, [pc, #172]	@ (8012d24 <TIM_OC1_SetConfig+0x114>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d007      	beq.n	8012c8c <TIM_OC1_SetConfig+0x7c>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8012d28 <TIM_OC1_SetConfig+0x118>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d003      	beq.n	8012c8c <TIM_OC1_SetConfig+0x7c>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4a29      	ldr	r2, [pc, #164]	@ (8012d2c <TIM_OC1_SetConfig+0x11c>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d10c      	bne.n	8012ca6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	f023 0308 	bic.w	r3, r3, #8
 8012c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	f023 0304 	bic.w	r3, r3, #4
 8012ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8012d1c <TIM_OC1_SetConfig+0x10c>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d00f      	beq.n	8012cce <TIM_OC1_SetConfig+0xbe>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8012d20 <TIM_OC1_SetConfig+0x110>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d00b      	beq.n	8012cce <TIM_OC1_SetConfig+0xbe>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8012d24 <TIM_OC1_SetConfig+0x114>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d007      	beq.n	8012cce <TIM_OC1_SetConfig+0xbe>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4a19      	ldr	r2, [pc, #100]	@ (8012d28 <TIM_OC1_SetConfig+0x118>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d003      	beq.n	8012cce <TIM_OC1_SetConfig+0xbe>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4a18      	ldr	r2, [pc, #96]	@ (8012d2c <TIM_OC1_SetConfig+0x11c>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d111      	bne.n	8012cf2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	695b      	ldr	r3, [r3, #20]
 8012ce2:	693a      	ldr	r2, [r7, #16]
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	699b      	ldr	r3, [r3, #24]
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	693a      	ldr	r2, [r7, #16]
 8012cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	685a      	ldr	r2, [r3, #4]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	621a      	str	r2, [r3, #32]
}
 8012d0c:	bf00      	nop
 8012d0e:	371c      	adds	r7, #28
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr
 8012d18:	fffeff8f 	.word	0xfffeff8f
 8012d1c:	40010000 	.word	0x40010000
 8012d20:	40010400 	.word	0x40010400
 8012d24:	40014000 	.word	0x40014000
 8012d28:	40014400 	.word	0x40014400
 8012d2c:	40014800 	.word	0x40014800

08012d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b087      	sub	sp, #28
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6a1b      	ldr	r3, [r3, #32]
 8012d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6a1b      	ldr	r3, [r3, #32]
 8012d44:	f023 0210 	bic.w	r2, r3, #16
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	699b      	ldr	r3, [r3, #24]
 8012d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	4b34      	ldr	r3, [pc, #208]	@ (8012e2c <TIM_OC2_SetConfig+0xfc>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	021b      	lsls	r3, r3, #8
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	4313      	orrs	r3, r2
 8012d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	f023 0320 	bic.w	r3, r3, #32
 8012d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	011b      	lsls	r3, r3, #4
 8012d82:	697a      	ldr	r2, [r7, #20]
 8012d84:	4313      	orrs	r3, r2
 8012d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a29      	ldr	r2, [pc, #164]	@ (8012e30 <TIM_OC2_SetConfig+0x100>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d003      	beq.n	8012d98 <TIM_OC2_SetConfig+0x68>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a28      	ldr	r2, [pc, #160]	@ (8012e34 <TIM_OC2_SetConfig+0x104>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d10d      	bne.n	8012db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	011b      	lsls	r3, r3, #4
 8012da6:	697a      	ldr	r2, [r7, #20]
 8012da8:	4313      	orrs	r3, r2
 8012daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	4a1e      	ldr	r2, [pc, #120]	@ (8012e30 <TIM_OC2_SetConfig+0x100>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d00f      	beq.n	8012ddc <TIM_OC2_SetConfig+0xac>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8012e34 <TIM_OC2_SetConfig+0x104>)
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d00b      	beq.n	8012ddc <TIM_OC2_SetConfig+0xac>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8012e38 <TIM_OC2_SetConfig+0x108>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d007      	beq.n	8012ddc <TIM_OC2_SetConfig+0xac>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4a1b      	ldr	r2, [pc, #108]	@ (8012e3c <TIM_OC2_SetConfig+0x10c>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d003      	beq.n	8012ddc <TIM_OC2_SetConfig+0xac>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8012e40 <TIM_OC2_SetConfig+0x110>)
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	d113      	bne.n	8012e04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	695b      	ldr	r3, [r3, #20]
 8012df0:	009b      	lsls	r3, r3, #2
 8012df2:	693a      	ldr	r2, [r7, #16]
 8012df4:	4313      	orrs	r3, r2
 8012df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	699b      	ldr	r3, [r3, #24]
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	693a      	ldr	r2, [r7, #16]
 8012e00:	4313      	orrs	r3, r2
 8012e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	693a      	ldr	r2, [r7, #16]
 8012e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	685a      	ldr	r2, [r3, #4]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	697a      	ldr	r2, [r7, #20]
 8012e1c:	621a      	str	r2, [r3, #32]
}
 8012e1e:	bf00      	nop
 8012e20:	371c      	adds	r7, #28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	feff8fff 	.word	0xfeff8fff
 8012e30:	40010000 	.word	0x40010000
 8012e34:	40010400 	.word	0x40010400
 8012e38:	40014000 	.word	0x40014000
 8012e3c:	40014400 	.word	0x40014400
 8012e40:	40014800 	.word	0x40014800

08012e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b087      	sub	sp, #28
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a1b      	ldr	r3, [r3, #32]
 8012e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6a1b      	ldr	r3, [r3, #32]
 8012e58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	69db      	ldr	r3, [r3, #28]
 8012e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	4b33      	ldr	r3, [pc, #204]	@ (8012f3c <TIM_OC3_SetConfig+0xf8>)
 8012e70:	4013      	ands	r3, r2
 8012e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f023 0303 	bic.w	r3, r3, #3
 8012e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	68fa      	ldr	r2, [r7, #12]
 8012e82:	4313      	orrs	r3, r2
 8012e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	021b      	lsls	r3, r3, #8
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	4313      	orrs	r3, r2
 8012e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4a28      	ldr	r2, [pc, #160]	@ (8012f40 <TIM_OC3_SetConfig+0xfc>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d003      	beq.n	8012eaa <TIM_OC3_SetConfig+0x66>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4a27      	ldr	r2, [pc, #156]	@ (8012f44 <TIM_OC3_SetConfig+0x100>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d10d      	bne.n	8012ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	68db      	ldr	r3, [r3, #12]
 8012eb6:	021b      	lsls	r3, r3, #8
 8012eb8:	697a      	ldr	r2, [r7, #20]
 8012eba:	4313      	orrs	r3, r2
 8012ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8012f40 <TIM_OC3_SetConfig+0xfc>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d00f      	beq.n	8012eee <TIM_OC3_SetConfig+0xaa>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8012f44 <TIM_OC3_SetConfig+0x100>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d00b      	beq.n	8012eee <TIM_OC3_SetConfig+0xaa>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8012f48 <TIM_OC3_SetConfig+0x104>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d007      	beq.n	8012eee <TIM_OC3_SetConfig+0xaa>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8012f4c <TIM_OC3_SetConfig+0x108>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d003      	beq.n	8012eee <TIM_OC3_SetConfig+0xaa>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4a19      	ldr	r2, [pc, #100]	@ (8012f50 <TIM_OC3_SetConfig+0x10c>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d113      	bne.n	8012f16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	011b      	lsls	r3, r3, #4
 8012f04:	693a      	ldr	r2, [r7, #16]
 8012f06:	4313      	orrs	r3, r2
 8012f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	699b      	ldr	r3, [r3, #24]
 8012f0e:	011b      	lsls	r3, r3, #4
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	4313      	orrs	r3, r2
 8012f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	693a      	ldr	r2, [r7, #16]
 8012f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	68fa      	ldr	r2, [r7, #12]
 8012f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	685a      	ldr	r2, [r3, #4]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	697a      	ldr	r2, [r7, #20]
 8012f2e:	621a      	str	r2, [r3, #32]
}
 8012f30:	bf00      	nop
 8012f32:	371c      	adds	r7, #28
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	fffeff8f 	.word	0xfffeff8f
 8012f40:	40010000 	.word	0x40010000
 8012f44:	40010400 	.word	0x40010400
 8012f48:	40014000 	.word	0x40014000
 8012f4c:	40014400 	.word	0x40014400
 8012f50:	40014800 	.word	0x40014800

08012f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f54:	b480      	push	{r7}
 8012f56:	b087      	sub	sp, #28
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6a1b      	ldr	r3, [r3, #32]
 8012f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	69db      	ldr	r3, [r3, #28]
 8012f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012f7c:	68fa      	ldr	r2, [r7, #12]
 8012f7e:	4b24      	ldr	r3, [pc, #144]	@ (8013010 <TIM_OC4_SetConfig+0xbc>)
 8012f80:	4013      	ands	r3, r2
 8012f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	021b      	lsls	r3, r3, #8
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	4313      	orrs	r3, r2
 8012f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	031b      	lsls	r3, r3, #12
 8012fa6:	693a      	ldr	r2, [r7, #16]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	4a19      	ldr	r2, [pc, #100]	@ (8013014 <TIM_OC4_SetConfig+0xc0>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d00f      	beq.n	8012fd4 <TIM_OC4_SetConfig+0x80>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	4a18      	ldr	r2, [pc, #96]	@ (8013018 <TIM_OC4_SetConfig+0xc4>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d00b      	beq.n	8012fd4 <TIM_OC4_SetConfig+0x80>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4a17      	ldr	r2, [pc, #92]	@ (801301c <TIM_OC4_SetConfig+0xc8>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d007      	beq.n	8012fd4 <TIM_OC4_SetConfig+0x80>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	4a16      	ldr	r2, [pc, #88]	@ (8013020 <TIM_OC4_SetConfig+0xcc>)
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d003      	beq.n	8012fd4 <TIM_OC4_SetConfig+0x80>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	4a15      	ldr	r2, [pc, #84]	@ (8013024 <TIM_OC4_SetConfig+0xd0>)
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	d109      	bne.n	8012fe8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	695b      	ldr	r3, [r3, #20]
 8012fe0:	019b      	lsls	r3, r3, #6
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	697a      	ldr	r2, [r7, #20]
 8012fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	685a      	ldr	r2, [r3, #4]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	693a      	ldr	r2, [r7, #16]
 8013000:	621a      	str	r2, [r3, #32]
}
 8013002:	bf00      	nop
 8013004:	371c      	adds	r7, #28
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	feff8fff 	.word	0xfeff8fff
 8013014:	40010000 	.word	0x40010000
 8013018:	40010400 	.word	0x40010400
 801301c:	40014000 	.word	0x40014000
 8013020:	40014400 	.word	0x40014400
 8013024:	40014800 	.word	0x40014800

08013028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013028:	b480      	push	{r7}
 801302a:	b087      	sub	sp, #28
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6a1b      	ldr	r3, [r3, #32]
 8013036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a1b      	ldr	r3, [r3, #32]
 801303c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	4b21      	ldr	r3, [pc, #132]	@ (80130d8 <TIM_OC5_SetConfig+0xb0>)
 8013054:	4013      	ands	r3, r2
 8013056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	68fa      	ldr	r2, [r7, #12]
 801305e:	4313      	orrs	r3, r2
 8013060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	041b      	lsls	r3, r3, #16
 8013070:	693a      	ldr	r2, [r7, #16]
 8013072:	4313      	orrs	r3, r2
 8013074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	4a18      	ldr	r2, [pc, #96]	@ (80130dc <TIM_OC5_SetConfig+0xb4>)
 801307a:	4293      	cmp	r3, r2
 801307c:	d00f      	beq.n	801309e <TIM_OC5_SetConfig+0x76>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4a17      	ldr	r2, [pc, #92]	@ (80130e0 <TIM_OC5_SetConfig+0xb8>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d00b      	beq.n	801309e <TIM_OC5_SetConfig+0x76>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	4a16      	ldr	r2, [pc, #88]	@ (80130e4 <TIM_OC5_SetConfig+0xbc>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d007      	beq.n	801309e <TIM_OC5_SetConfig+0x76>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4a15      	ldr	r2, [pc, #84]	@ (80130e8 <TIM_OC5_SetConfig+0xc0>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d003      	beq.n	801309e <TIM_OC5_SetConfig+0x76>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	4a14      	ldr	r2, [pc, #80]	@ (80130ec <TIM_OC5_SetConfig+0xc4>)
 801309a:	4293      	cmp	r3, r2
 801309c:	d109      	bne.n	80130b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80130a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	695b      	ldr	r3, [r3, #20]
 80130aa:	021b      	lsls	r3, r3, #8
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	4313      	orrs	r3, r2
 80130b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	697a      	ldr	r2, [r7, #20]
 80130b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	68fa      	ldr	r2, [r7, #12]
 80130bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	685a      	ldr	r2, [r3, #4]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	693a      	ldr	r2, [r7, #16]
 80130ca:	621a      	str	r2, [r3, #32]
}
 80130cc:	bf00      	nop
 80130ce:	371c      	adds	r7, #28
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr
 80130d8:	fffeff8f 	.word	0xfffeff8f
 80130dc:	40010000 	.word	0x40010000
 80130e0:	40010400 	.word	0x40010400
 80130e4:	40014000 	.word	0x40014000
 80130e8:	40014400 	.word	0x40014400
 80130ec:	40014800 	.word	0x40014800

080130f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b087      	sub	sp, #28
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6a1b      	ldr	r3, [r3, #32]
 80130fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6a1b      	ldr	r3, [r3, #32]
 8013104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	4b22      	ldr	r3, [pc, #136]	@ (80131a4 <TIM_OC6_SetConfig+0xb4>)
 801311c:	4013      	ands	r3, r2
 801311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	021b      	lsls	r3, r3, #8
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	4313      	orrs	r3, r2
 801312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	051b      	lsls	r3, r3, #20
 801313a:	693a      	ldr	r2, [r7, #16]
 801313c:	4313      	orrs	r3, r2
 801313e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4a19      	ldr	r2, [pc, #100]	@ (80131a8 <TIM_OC6_SetConfig+0xb8>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d00f      	beq.n	8013168 <TIM_OC6_SetConfig+0x78>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	4a18      	ldr	r2, [pc, #96]	@ (80131ac <TIM_OC6_SetConfig+0xbc>)
 801314c:	4293      	cmp	r3, r2
 801314e:	d00b      	beq.n	8013168 <TIM_OC6_SetConfig+0x78>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4a17      	ldr	r2, [pc, #92]	@ (80131b0 <TIM_OC6_SetConfig+0xc0>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d007      	beq.n	8013168 <TIM_OC6_SetConfig+0x78>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4a16      	ldr	r2, [pc, #88]	@ (80131b4 <TIM_OC6_SetConfig+0xc4>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d003      	beq.n	8013168 <TIM_OC6_SetConfig+0x78>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4a15      	ldr	r2, [pc, #84]	@ (80131b8 <TIM_OC6_SetConfig+0xc8>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d109      	bne.n	801317c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801316e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	029b      	lsls	r3, r3, #10
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	4313      	orrs	r3, r2
 801317a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	697a      	ldr	r2, [r7, #20]
 8013180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	685a      	ldr	r2, [r3, #4]
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	693a      	ldr	r2, [r7, #16]
 8013194:	621a      	str	r2, [r3, #32]
}
 8013196:	bf00      	nop
 8013198:	371c      	adds	r7, #28
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr
 80131a2:	bf00      	nop
 80131a4:	feff8fff 	.word	0xfeff8fff
 80131a8:	40010000 	.word	0x40010000
 80131ac:	40010400 	.word	0x40010400
 80131b0:	40014000 	.word	0x40014000
 80131b4:	40014400 	.word	0x40014400
 80131b8:	40014800 	.word	0x40014800

080131bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80131bc:	b480      	push	{r7}
 80131be:	b087      	sub	sp, #28
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	6a1b      	ldr	r3, [r3, #32]
 80131cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6a1b      	ldr	r3, [r3, #32]
 80131d2:	f023 0201 	bic.w	r2, r3, #1
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	699b      	ldr	r3, [r3, #24]
 80131de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80131e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	011b      	lsls	r3, r3, #4
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	4313      	orrs	r3, r2
 80131f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	f023 030a 	bic.w	r3, r3, #10
 80131f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80131fa:	697a      	ldr	r2, [r7, #20]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	4313      	orrs	r3, r2
 8013200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	697a      	ldr	r2, [r7, #20]
 801320c:	621a      	str	r2, [r3, #32]
}
 801320e:	bf00      	nop
 8013210:	371c      	adds	r7, #28
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801321a:	b480      	push	{r7}
 801321c:	b087      	sub	sp, #28
 801321e:	af00      	add	r7, sp, #0
 8013220:	60f8      	str	r0, [r7, #12]
 8013222:	60b9      	str	r1, [r7, #8]
 8013224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6a1b      	ldr	r3, [r3, #32]
 801322a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	6a1b      	ldr	r3, [r3, #32]
 8013230:	f023 0210 	bic.w	r2, r3, #16
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	699b      	ldr	r3, [r3, #24]
 801323c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	031b      	lsls	r3, r3, #12
 801324a:	693a      	ldr	r2, [r7, #16]
 801324c:	4313      	orrs	r3, r2
 801324e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	011b      	lsls	r3, r3, #4
 801325c:	697a      	ldr	r2, [r7, #20]
 801325e:	4313      	orrs	r3, r2
 8013260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	693a      	ldr	r2, [r7, #16]
 8013266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	697a      	ldr	r2, [r7, #20]
 801326c:	621a      	str	r2, [r3, #32]
}
 801326e:	bf00      	nop
 8013270:	371c      	adds	r7, #28
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
	...

0801327c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	4b09      	ldr	r3, [pc, #36]	@ (80132b4 <TIM_ITRx_SetConfig+0x38>)
 8013290:	4013      	ands	r3, r2
 8013292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013294:	683a      	ldr	r2, [r7, #0]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	4313      	orrs	r3, r2
 801329a:	f043 0307 	orr.w	r3, r3, #7
 801329e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	609a      	str	r2, [r3, #8]
}
 80132a6:	bf00      	nop
 80132a8:	3714      	adds	r7, #20
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	ffcfff8f 	.word	0xffcfff8f

080132b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b087      	sub	sp, #28
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
 80132c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80132d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	021a      	lsls	r2, r3, #8
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	431a      	orrs	r2, r3
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	4313      	orrs	r3, r2
 80132e0:	697a      	ldr	r2, [r7, #20]
 80132e2:	4313      	orrs	r3, r2
 80132e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	697a      	ldr	r2, [r7, #20]
 80132ea:	609a      	str	r2, [r3, #8]
}
 80132ec:	bf00      	nop
 80132ee:	371c      	adds	r7, #28
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b087      	sub	sp, #28
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	f003 031f 	and.w	r3, r3, #31
 801330a:	2201      	movs	r2, #1
 801330c:	fa02 f303 	lsl.w	r3, r2, r3
 8013310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	6a1a      	ldr	r2, [r3, #32]
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	43db      	mvns	r3, r3
 801331a:	401a      	ands	r2, r3
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	6a1a      	ldr	r2, [r3, #32]
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	f003 031f 	and.w	r3, r3, #31
 801332a:	6879      	ldr	r1, [r7, #4]
 801332c:	fa01 f303 	lsl.w	r3, r1, r3
 8013330:	431a      	orrs	r2, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	621a      	str	r2, [r3, #32]
}
 8013336:	bf00      	nop
 8013338:	371c      	adds	r7, #28
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr
	...

08013344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013354:	2b01      	cmp	r3, #1
 8013356:	d101      	bne.n	801335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013358:	2302      	movs	r3, #2
 801335a:	e077      	b.n	801344c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2201      	movs	r2, #1
 8013360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2202      	movs	r2, #2
 8013368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4a35      	ldr	r2, [pc, #212]	@ (8013458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013382:	4293      	cmp	r3, r2
 8013384:	d004      	beq.n	8013390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4a34      	ldr	r2, [pc, #208]	@ (801345c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d108      	bne.n	80133a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	68fa      	ldr	r2, [r7, #12]
 801339e:	4313      	orrs	r3, r2
 80133a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	68fa      	ldr	r2, [r7, #12]
 80133b0:	4313      	orrs	r3, r2
 80133b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	4a25      	ldr	r2, [pc, #148]	@ (8013458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80133c2:	4293      	cmp	r3, r2
 80133c4:	d02c      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133ce:	d027      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	4a22      	ldr	r2, [pc, #136]	@ (8013460 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d022      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	4a21      	ldr	r2, [pc, #132]	@ (8013464 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d01d      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	4a1f      	ldr	r2, [pc, #124]	@ (8013468 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80133ea:	4293      	cmp	r3, r2
 80133ec:	d018      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	4a1a      	ldr	r2, [pc, #104]	@ (801345c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d013      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	4a1b      	ldr	r2, [pc, #108]	@ (801346c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80133fe:	4293      	cmp	r3, r2
 8013400:	d00e      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	4a1a      	ldr	r2, [pc, #104]	@ (8013470 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013408:	4293      	cmp	r3, r2
 801340a:	d009      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4a18      	ldr	r2, [pc, #96]	@ (8013474 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d004      	beq.n	8013420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4a17      	ldr	r2, [pc, #92]	@ (8013478 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801341c:	4293      	cmp	r3, r2
 801341e:	d10c      	bne.n	801343a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013426:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	689b      	ldr	r3, [r3, #8]
 801342c:	68ba      	ldr	r2, [r7, #8]
 801342e:	4313      	orrs	r3, r2
 8013430:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	68ba      	ldr	r2, [r7, #8]
 8013438:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2201      	movs	r2, #1
 801343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801344a:	2300      	movs	r3, #0
}
 801344c:	4618      	mov	r0, r3
 801344e:	3714      	adds	r7, #20
 8013450:	46bd      	mov	sp, r7
 8013452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013456:	4770      	bx	lr
 8013458:	40010000 	.word	0x40010000
 801345c:	40010400 	.word	0x40010400
 8013460:	40000400 	.word	0x40000400
 8013464:	40000800 	.word	0x40000800
 8013468:	40000c00 	.word	0x40000c00
 801346c:	40001800 	.word	0x40001800
 8013470:	40014000 	.word	0x40014000
 8013474:	4000e000 	.word	0x4000e000
 8013478:	4000e400 	.word	0x4000e400

0801347c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013484:	bf00      	nop
 8013486:	370c      	adds	r7, #12
 8013488:	46bd      	mov	sp, r7
 801348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348e:	4770      	bx	lr

08013490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013498:	bf00      	nop
 801349a:	370c      	adds	r7, #12
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr

080134a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80134ac:	bf00      	nop
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d101      	bne.n	80134ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	e042      	b.n	8013550 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d106      	bne.n	80134e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7ef fadf 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2224      	movs	r2, #36	@ 0x24
 80134e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f022 0201 	bic.w	r2, r2, #1
 80134f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d002      	beq.n	8013508 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 fe94 	bl	8014230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f000 f825 	bl	8013558 <UART_SetConfig>
 801350e:	4603      	mov	r3, r0
 8013510:	2b01      	cmp	r3, #1
 8013512:	d101      	bne.n	8013518 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013514:	2301      	movs	r3, #1
 8013516:	e01b      	b.n	8013550 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	685a      	ldr	r2, [r3, #4]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	689a      	ldr	r2, [r3, #8]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f042 0201 	orr.w	r2, r2, #1
 8013546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 ff13 	bl	8014374 <UART_CheckIdleState>
 801354e:	4603      	mov	r3, r0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801355c:	b092      	sub	sp, #72	@ 0x48
 801355e:	af00      	add	r7, sp, #0
 8013560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013562:	2300      	movs	r3, #0
 8013564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	689a      	ldr	r2, [r3, #8]
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	691b      	ldr	r3, [r3, #16]
 8013570:	431a      	orrs	r2, r3
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	695b      	ldr	r3, [r3, #20]
 8013576:	431a      	orrs	r2, r3
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	69db      	ldr	r3, [r3, #28]
 801357c:	4313      	orrs	r3, r2
 801357e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	4bbe      	ldr	r3, [pc, #760]	@ (8013880 <UART_SetConfig+0x328>)
 8013588:	4013      	ands	r3, r2
 801358a:	697a      	ldr	r2, [r7, #20]
 801358c:	6812      	ldr	r2, [r2, #0]
 801358e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013590:	430b      	orrs	r3, r1
 8013592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	68da      	ldr	r2, [r3, #12]
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	430a      	orrs	r2, r1
 80135a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	699b      	ldr	r3, [r3, #24]
 80135ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4ab3      	ldr	r2, [pc, #716]	@ (8013884 <UART_SetConfig+0x32c>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d004      	beq.n	80135c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	6a1b      	ldr	r3, [r3, #32]
 80135be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80135c0:	4313      	orrs	r3, r2
 80135c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	689a      	ldr	r2, [r3, #8]
 80135ca:	4baf      	ldr	r3, [pc, #700]	@ (8013888 <UART_SetConfig+0x330>)
 80135cc:	4013      	ands	r3, r2
 80135ce:	697a      	ldr	r2, [r7, #20]
 80135d0:	6812      	ldr	r2, [r2, #0]
 80135d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80135d4:	430b      	orrs	r3, r1
 80135d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135de:	f023 010f 	bic.w	r1, r3, #15
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	430a      	orrs	r2, r1
 80135ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	4aa6      	ldr	r2, [pc, #664]	@ (801388c <UART_SetConfig+0x334>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d177      	bne.n	80136e8 <UART_SetConfig+0x190>
 80135f8:	4ba5      	ldr	r3, [pc, #660]	@ (8013890 <UART_SetConfig+0x338>)
 80135fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013600:	2b28      	cmp	r3, #40	@ 0x28
 8013602:	d86d      	bhi.n	80136e0 <UART_SetConfig+0x188>
 8013604:	a201      	add	r2, pc, #4	@ (adr r2, 801360c <UART_SetConfig+0xb4>)
 8013606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801360a:	bf00      	nop
 801360c:	080136b1 	.word	0x080136b1
 8013610:	080136e1 	.word	0x080136e1
 8013614:	080136e1 	.word	0x080136e1
 8013618:	080136e1 	.word	0x080136e1
 801361c:	080136e1 	.word	0x080136e1
 8013620:	080136e1 	.word	0x080136e1
 8013624:	080136e1 	.word	0x080136e1
 8013628:	080136e1 	.word	0x080136e1
 801362c:	080136b9 	.word	0x080136b9
 8013630:	080136e1 	.word	0x080136e1
 8013634:	080136e1 	.word	0x080136e1
 8013638:	080136e1 	.word	0x080136e1
 801363c:	080136e1 	.word	0x080136e1
 8013640:	080136e1 	.word	0x080136e1
 8013644:	080136e1 	.word	0x080136e1
 8013648:	080136e1 	.word	0x080136e1
 801364c:	080136c1 	.word	0x080136c1
 8013650:	080136e1 	.word	0x080136e1
 8013654:	080136e1 	.word	0x080136e1
 8013658:	080136e1 	.word	0x080136e1
 801365c:	080136e1 	.word	0x080136e1
 8013660:	080136e1 	.word	0x080136e1
 8013664:	080136e1 	.word	0x080136e1
 8013668:	080136e1 	.word	0x080136e1
 801366c:	080136c9 	.word	0x080136c9
 8013670:	080136e1 	.word	0x080136e1
 8013674:	080136e1 	.word	0x080136e1
 8013678:	080136e1 	.word	0x080136e1
 801367c:	080136e1 	.word	0x080136e1
 8013680:	080136e1 	.word	0x080136e1
 8013684:	080136e1 	.word	0x080136e1
 8013688:	080136e1 	.word	0x080136e1
 801368c:	080136d1 	.word	0x080136d1
 8013690:	080136e1 	.word	0x080136e1
 8013694:	080136e1 	.word	0x080136e1
 8013698:	080136e1 	.word	0x080136e1
 801369c:	080136e1 	.word	0x080136e1
 80136a0:	080136e1 	.word	0x080136e1
 80136a4:	080136e1 	.word	0x080136e1
 80136a8:	080136e1 	.word	0x080136e1
 80136ac:	080136d9 	.word	0x080136d9
 80136b0:	2301      	movs	r3, #1
 80136b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136b6:	e326      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136b8:	2304      	movs	r3, #4
 80136ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136be:	e322      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136c0:	2308      	movs	r3, #8
 80136c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136c6:	e31e      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136c8:	2310      	movs	r3, #16
 80136ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136ce:	e31a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136d0:	2320      	movs	r3, #32
 80136d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136d6:	e316      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136d8:	2340      	movs	r3, #64	@ 0x40
 80136da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136de:	e312      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136e0:	2380      	movs	r3, #128	@ 0x80
 80136e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136e6:	e30e      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4a69      	ldr	r2, [pc, #420]	@ (8013894 <UART_SetConfig+0x33c>)
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d130      	bne.n	8013754 <UART_SetConfig+0x1fc>
 80136f2:	4b67      	ldr	r3, [pc, #412]	@ (8013890 <UART_SetConfig+0x338>)
 80136f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136f6:	f003 0307 	and.w	r3, r3, #7
 80136fa:	2b05      	cmp	r3, #5
 80136fc:	d826      	bhi.n	801374c <UART_SetConfig+0x1f4>
 80136fe:	a201      	add	r2, pc, #4	@ (adr r2, 8013704 <UART_SetConfig+0x1ac>)
 8013700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013704:	0801371d 	.word	0x0801371d
 8013708:	08013725 	.word	0x08013725
 801370c:	0801372d 	.word	0x0801372d
 8013710:	08013735 	.word	0x08013735
 8013714:	0801373d 	.word	0x0801373d
 8013718:	08013745 	.word	0x08013745
 801371c:	2300      	movs	r3, #0
 801371e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013722:	e2f0      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013724:	2304      	movs	r3, #4
 8013726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801372a:	e2ec      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801372c:	2308      	movs	r3, #8
 801372e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013732:	e2e8      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013734:	2310      	movs	r3, #16
 8013736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801373a:	e2e4      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801373c:	2320      	movs	r3, #32
 801373e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013742:	e2e0      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013744:	2340      	movs	r3, #64	@ 0x40
 8013746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801374a:	e2dc      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801374c:	2380      	movs	r3, #128	@ 0x80
 801374e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013752:	e2d8      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4a4f      	ldr	r2, [pc, #316]	@ (8013898 <UART_SetConfig+0x340>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d130      	bne.n	80137c0 <UART_SetConfig+0x268>
 801375e:	4b4c      	ldr	r3, [pc, #304]	@ (8013890 <UART_SetConfig+0x338>)
 8013760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013762:	f003 0307 	and.w	r3, r3, #7
 8013766:	2b05      	cmp	r3, #5
 8013768:	d826      	bhi.n	80137b8 <UART_SetConfig+0x260>
 801376a:	a201      	add	r2, pc, #4	@ (adr r2, 8013770 <UART_SetConfig+0x218>)
 801376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013770:	08013789 	.word	0x08013789
 8013774:	08013791 	.word	0x08013791
 8013778:	08013799 	.word	0x08013799
 801377c:	080137a1 	.word	0x080137a1
 8013780:	080137a9 	.word	0x080137a9
 8013784:	080137b1 	.word	0x080137b1
 8013788:	2300      	movs	r3, #0
 801378a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801378e:	e2ba      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013790:	2304      	movs	r3, #4
 8013792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013796:	e2b6      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013798:	2308      	movs	r3, #8
 801379a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801379e:	e2b2      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137a0:	2310      	movs	r3, #16
 80137a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137a6:	e2ae      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137a8:	2320      	movs	r3, #32
 80137aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137ae:	e2aa      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137b0:	2340      	movs	r3, #64	@ 0x40
 80137b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137b6:	e2a6      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137b8:	2380      	movs	r3, #128	@ 0x80
 80137ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137be:	e2a2      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	4a35      	ldr	r2, [pc, #212]	@ (801389c <UART_SetConfig+0x344>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d130      	bne.n	801382c <UART_SetConfig+0x2d4>
 80137ca:	4b31      	ldr	r3, [pc, #196]	@ (8013890 <UART_SetConfig+0x338>)
 80137cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137ce:	f003 0307 	and.w	r3, r3, #7
 80137d2:	2b05      	cmp	r3, #5
 80137d4:	d826      	bhi.n	8013824 <UART_SetConfig+0x2cc>
 80137d6:	a201      	add	r2, pc, #4	@ (adr r2, 80137dc <UART_SetConfig+0x284>)
 80137d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137dc:	080137f5 	.word	0x080137f5
 80137e0:	080137fd 	.word	0x080137fd
 80137e4:	08013805 	.word	0x08013805
 80137e8:	0801380d 	.word	0x0801380d
 80137ec:	08013815 	.word	0x08013815
 80137f0:	0801381d 	.word	0x0801381d
 80137f4:	2300      	movs	r3, #0
 80137f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137fa:	e284      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80137fc:	2304      	movs	r3, #4
 80137fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013802:	e280      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013804:	2308      	movs	r3, #8
 8013806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801380a:	e27c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801380c:	2310      	movs	r3, #16
 801380e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013812:	e278      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013814:	2320      	movs	r3, #32
 8013816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801381a:	e274      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801381c:	2340      	movs	r3, #64	@ 0x40
 801381e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013822:	e270      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013824:	2380      	movs	r3, #128	@ 0x80
 8013826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801382a:	e26c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4a1b      	ldr	r2, [pc, #108]	@ (80138a0 <UART_SetConfig+0x348>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d142      	bne.n	80138bc <UART_SetConfig+0x364>
 8013836:	4b16      	ldr	r3, [pc, #88]	@ (8013890 <UART_SetConfig+0x338>)
 8013838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801383a:	f003 0307 	and.w	r3, r3, #7
 801383e:	2b05      	cmp	r3, #5
 8013840:	d838      	bhi.n	80138b4 <UART_SetConfig+0x35c>
 8013842:	a201      	add	r2, pc, #4	@ (adr r2, 8013848 <UART_SetConfig+0x2f0>)
 8013844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013848:	08013861 	.word	0x08013861
 801384c:	08013869 	.word	0x08013869
 8013850:	08013871 	.word	0x08013871
 8013854:	08013879 	.word	0x08013879
 8013858:	080138a5 	.word	0x080138a5
 801385c:	080138ad 	.word	0x080138ad
 8013860:	2300      	movs	r3, #0
 8013862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013866:	e24e      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013868:	2304      	movs	r3, #4
 801386a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801386e:	e24a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013870:	2308      	movs	r3, #8
 8013872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013876:	e246      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013878:	2310      	movs	r3, #16
 801387a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801387e:	e242      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013880:	cfff69f3 	.word	0xcfff69f3
 8013884:	58000c00 	.word	0x58000c00
 8013888:	11fff4ff 	.word	0x11fff4ff
 801388c:	40011000 	.word	0x40011000
 8013890:	58024400 	.word	0x58024400
 8013894:	40004400 	.word	0x40004400
 8013898:	40004800 	.word	0x40004800
 801389c:	40004c00 	.word	0x40004c00
 80138a0:	40005000 	.word	0x40005000
 80138a4:	2320      	movs	r3, #32
 80138a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138aa:	e22c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80138ac:	2340      	movs	r3, #64	@ 0x40
 80138ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138b2:	e228      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80138b4:	2380      	movs	r3, #128	@ 0x80
 80138b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138ba:	e224      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	4ab1      	ldr	r2, [pc, #708]	@ (8013b88 <UART_SetConfig+0x630>)
 80138c2:	4293      	cmp	r3, r2
 80138c4:	d176      	bne.n	80139b4 <UART_SetConfig+0x45c>
 80138c6:	4bb1      	ldr	r3, [pc, #708]	@ (8013b8c <UART_SetConfig+0x634>)
 80138c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138ce:	2b28      	cmp	r3, #40	@ 0x28
 80138d0:	d86c      	bhi.n	80139ac <UART_SetConfig+0x454>
 80138d2:	a201      	add	r2, pc, #4	@ (adr r2, 80138d8 <UART_SetConfig+0x380>)
 80138d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138d8:	0801397d 	.word	0x0801397d
 80138dc:	080139ad 	.word	0x080139ad
 80138e0:	080139ad 	.word	0x080139ad
 80138e4:	080139ad 	.word	0x080139ad
 80138e8:	080139ad 	.word	0x080139ad
 80138ec:	080139ad 	.word	0x080139ad
 80138f0:	080139ad 	.word	0x080139ad
 80138f4:	080139ad 	.word	0x080139ad
 80138f8:	08013985 	.word	0x08013985
 80138fc:	080139ad 	.word	0x080139ad
 8013900:	080139ad 	.word	0x080139ad
 8013904:	080139ad 	.word	0x080139ad
 8013908:	080139ad 	.word	0x080139ad
 801390c:	080139ad 	.word	0x080139ad
 8013910:	080139ad 	.word	0x080139ad
 8013914:	080139ad 	.word	0x080139ad
 8013918:	0801398d 	.word	0x0801398d
 801391c:	080139ad 	.word	0x080139ad
 8013920:	080139ad 	.word	0x080139ad
 8013924:	080139ad 	.word	0x080139ad
 8013928:	080139ad 	.word	0x080139ad
 801392c:	080139ad 	.word	0x080139ad
 8013930:	080139ad 	.word	0x080139ad
 8013934:	080139ad 	.word	0x080139ad
 8013938:	08013995 	.word	0x08013995
 801393c:	080139ad 	.word	0x080139ad
 8013940:	080139ad 	.word	0x080139ad
 8013944:	080139ad 	.word	0x080139ad
 8013948:	080139ad 	.word	0x080139ad
 801394c:	080139ad 	.word	0x080139ad
 8013950:	080139ad 	.word	0x080139ad
 8013954:	080139ad 	.word	0x080139ad
 8013958:	0801399d 	.word	0x0801399d
 801395c:	080139ad 	.word	0x080139ad
 8013960:	080139ad 	.word	0x080139ad
 8013964:	080139ad 	.word	0x080139ad
 8013968:	080139ad 	.word	0x080139ad
 801396c:	080139ad 	.word	0x080139ad
 8013970:	080139ad 	.word	0x080139ad
 8013974:	080139ad 	.word	0x080139ad
 8013978:	080139a5 	.word	0x080139a5
 801397c:	2301      	movs	r3, #1
 801397e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013982:	e1c0      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013984:	2304      	movs	r3, #4
 8013986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801398a:	e1bc      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801398c:	2308      	movs	r3, #8
 801398e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013992:	e1b8      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013994:	2310      	movs	r3, #16
 8013996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801399a:	e1b4      	b.n	8013d06 <UART_SetConfig+0x7ae>
 801399c:	2320      	movs	r3, #32
 801399e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139a2:	e1b0      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80139a4:	2340      	movs	r3, #64	@ 0x40
 80139a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139aa:	e1ac      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80139ac:	2380      	movs	r3, #128	@ 0x80
 80139ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139b2:	e1a8      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	4a75      	ldr	r2, [pc, #468]	@ (8013b90 <UART_SetConfig+0x638>)
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d130      	bne.n	8013a20 <UART_SetConfig+0x4c8>
 80139be:	4b73      	ldr	r3, [pc, #460]	@ (8013b8c <UART_SetConfig+0x634>)
 80139c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139c2:	f003 0307 	and.w	r3, r3, #7
 80139c6:	2b05      	cmp	r3, #5
 80139c8:	d826      	bhi.n	8013a18 <UART_SetConfig+0x4c0>
 80139ca:	a201      	add	r2, pc, #4	@ (adr r2, 80139d0 <UART_SetConfig+0x478>)
 80139cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d0:	080139e9 	.word	0x080139e9
 80139d4:	080139f1 	.word	0x080139f1
 80139d8:	080139f9 	.word	0x080139f9
 80139dc:	08013a01 	.word	0x08013a01
 80139e0:	08013a09 	.word	0x08013a09
 80139e4:	08013a11 	.word	0x08013a11
 80139e8:	2300      	movs	r3, #0
 80139ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ee:	e18a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80139f0:	2304      	movs	r3, #4
 80139f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139f6:	e186      	b.n	8013d06 <UART_SetConfig+0x7ae>
 80139f8:	2308      	movs	r3, #8
 80139fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139fe:	e182      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a00:	2310      	movs	r3, #16
 8013a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a06:	e17e      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a08:	2320      	movs	r3, #32
 8013a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a0e:	e17a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a10:	2340      	movs	r3, #64	@ 0x40
 8013a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a16:	e176      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a18:	2380      	movs	r3, #128	@ 0x80
 8013a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a1e:	e172      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	4a5b      	ldr	r2, [pc, #364]	@ (8013b94 <UART_SetConfig+0x63c>)
 8013a26:	4293      	cmp	r3, r2
 8013a28:	d130      	bne.n	8013a8c <UART_SetConfig+0x534>
 8013a2a:	4b58      	ldr	r3, [pc, #352]	@ (8013b8c <UART_SetConfig+0x634>)
 8013a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a2e:	f003 0307 	and.w	r3, r3, #7
 8013a32:	2b05      	cmp	r3, #5
 8013a34:	d826      	bhi.n	8013a84 <UART_SetConfig+0x52c>
 8013a36:	a201      	add	r2, pc, #4	@ (adr r2, 8013a3c <UART_SetConfig+0x4e4>)
 8013a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a3c:	08013a55 	.word	0x08013a55
 8013a40:	08013a5d 	.word	0x08013a5d
 8013a44:	08013a65 	.word	0x08013a65
 8013a48:	08013a6d 	.word	0x08013a6d
 8013a4c:	08013a75 	.word	0x08013a75
 8013a50:	08013a7d 	.word	0x08013a7d
 8013a54:	2300      	movs	r3, #0
 8013a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a5a:	e154      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a5c:	2304      	movs	r3, #4
 8013a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a62:	e150      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a64:	2308      	movs	r3, #8
 8013a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a6a:	e14c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a6c:	2310      	movs	r3, #16
 8013a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a72:	e148      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a74:	2320      	movs	r3, #32
 8013a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a7a:	e144      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a7c:	2340      	movs	r3, #64	@ 0x40
 8013a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a82:	e140      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a84:	2380      	movs	r3, #128	@ 0x80
 8013a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a8a:	e13c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a41      	ldr	r2, [pc, #260]	@ (8013b98 <UART_SetConfig+0x640>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	f040 8082 	bne.w	8013b9c <UART_SetConfig+0x644>
 8013a98:	4b3c      	ldr	r3, [pc, #240]	@ (8013b8c <UART_SetConfig+0x634>)
 8013a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013aa0:	2b28      	cmp	r3, #40	@ 0x28
 8013aa2:	d86d      	bhi.n	8013b80 <UART_SetConfig+0x628>
 8013aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8013aac <UART_SetConfig+0x554>)
 8013aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aaa:	bf00      	nop
 8013aac:	08013b51 	.word	0x08013b51
 8013ab0:	08013b81 	.word	0x08013b81
 8013ab4:	08013b81 	.word	0x08013b81
 8013ab8:	08013b81 	.word	0x08013b81
 8013abc:	08013b81 	.word	0x08013b81
 8013ac0:	08013b81 	.word	0x08013b81
 8013ac4:	08013b81 	.word	0x08013b81
 8013ac8:	08013b81 	.word	0x08013b81
 8013acc:	08013b59 	.word	0x08013b59
 8013ad0:	08013b81 	.word	0x08013b81
 8013ad4:	08013b81 	.word	0x08013b81
 8013ad8:	08013b81 	.word	0x08013b81
 8013adc:	08013b81 	.word	0x08013b81
 8013ae0:	08013b81 	.word	0x08013b81
 8013ae4:	08013b81 	.word	0x08013b81
 8013ae8:	08013b81 	.word	0x08013b81
 8013aec:	08013b61 	.word	0x08013b61
 8013af0:	08013b81 	.word	0x08013b81
 8013af4:	08013b81 	.word	0x08013b81
 8013af8:	08013b81 	.word	0x08013b81
 8013afc:	08013b81 	.word	0x08013b81
 8013b00:	08013b81 	.word	0x08013b81
 8013b04:	08013b81 	.word	0x08013b81
 8013b08:	08013b81 	.word	0x08013b81
 8013b0c:	08013b69 	.word	0x08013b69
 8013b10:	08013b81 	.word	0x08013b81
 8013b14:	08013b81 	.word	0x08013b81
 8013b18:	08013b81 	.word	0x08013b81
 8013b1c:	08013b81 	.word	0x08013b81
 8013b20:	08013b81 	.word	0x08013b81
 8013b24:	08013b81 	.word	0x08013b81
 8013b28:	08013b81 	.word	0x08013b81
 8013b2c:	08013b71 	.word	0x08013b71
 8013b30:	08013b81 	.word	0x08013b81
 8013b34:	08013b81 	.word	0x08013b81
 8013b38:	08013b81 	.word	0x08013b81
 8013b3c:	08013b81 	.word	0x08013b81
 8013b40:	08013b81 	.word	0x08013b81
 8013b44:	08013b81 	.word	0x08013b81
 8013b48:	08013b81 	.word	0x08013b81
 8013b4c:	08013b79 	.word	0x08013b79
 8013b50:	2301      	movs	r3, #1
 8013b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b56:	e0d6      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b58:	2304      	movs	r3, #4
 8013b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b5e:	e0d2      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b60:	2308      	movs	r3, #8
 8013b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b66:	e0ce      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b68:	2310      	movs	r3, #16
 8013b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b6e:	e0ca      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b70:	2320      	movs	r3, #32
 8013b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b76:	e0c6      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b78:	2340      	movs	r3, #64	@ 0x40
 8013b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b7e:	e0c2      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b80:	2380      	movs	r3, #128	@ 0x80
 8013b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b86:	e0be      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013b88:	40011400 	.word	0x40011400
 8013b8c:	58024400 	.word	0x58024400
 8013b90:	40007800 	.word	0x40007800
 8013b94:	40007c00 	.word	0x40007c00
 8013b98:	40011800 	.word	0x40011800
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4aad      	ldr	r2, [pc, #692]	@ (8013e58 <UART_SetConfig+0x900>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d176      	bne.n	8013c94 <UART_SetConfig+0x73c>
 8013ba6:	4bad      	ldr	r3, [pc, #692]	@ (8013e5c <UART_SetConfig+0x904>)
 8013ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013bae:	2b28      	cmp	r3, #40	@ 0x28
 8013bb0:	d86c      	bhi.n	8013c8c <UART_SetConfig+0x734>
 8013bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8013bb8 <UART_SetConfig+0x660>)
 8013bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bb8:	08013c5d 	.word	0x08013c5d
 8013bbc:	08013c8d 	.word	0x08013c8d
 8013bc0:	08013c8d 	.word	0x08013c8d
 8013bc4:	08013c8d 	.word	0x08013c8d
 8013bc8:	08013c8d 	.word	0x08013c8d
 8013bcc:	08013c8d 	.word	0x08013c8d
 8013bd0:	08013c8d 	.word	0x08013c8d
 8013bd4:	08013c8d 	.word	0x08013c8d
 8013bd8:	08013c65 	.word	0x08013c65
 8013bdc:	08013c8d 	.word	0x08013c8d
 8013be0:	08013c8d 	.word	0x08013c8d
 8013be4:	08013c8d 	.word	0x08013c8d
 8013be8:	08013c8d 	.word	0x08013c8d
 8013bec:	08013c8d 	.word	0x08013c8d
 8013bf0:	08013c8d 	.word	0x08013c8d
 8013bf4:	08013c8d 	.word	0x08013c8d
 8013bf8:	08013c6d 	.word	0x08013c6d
 8013bfc:	08013c8d 	.word	0x08013c8d
 8013c00:	08013c8d 	.word	0x08013c8d
 8013c04:	08013c8d 	.word	0x08013c8d
 8013c08:	08013c8d 	.word	0x08013c8d
 8013c0c:	08013c8d 	.word	0x08013c8d
 8013c10:	08013c8d 	.word	0x08013c8d
 8013c14:	08013c8d 	.word	0x08013c8d
 8013c18:	08013c75 	.word	0x08013c75
 8013c1c:	08013c8d 	.word	0x08013c8d
 8013c20:	08013c8d 	.word	0x08013c8d
 8013c24:	08013c8d 	.word	0x08013c8d
 8013c28:	08013c8d 	.word	0x08013c8d
 8013c2c:	08013c8d 	.word	0x08013c8d
 8013c30:	08013c8d 	.word	0x08013c8d
 8013c34:	08013c8d 	.word	0x08013c8d
 8013c38:	08013c7d 	.word	0x08013c7d
 8013c3c:	08013c8d 	.word	0x08013c8d
 8013c40:	08013c8d 	.word	0x08013c8d
 8013c44:	08013c8d 	.word	0x08013c8d
 8013c48:	08013c8d 	.word	0x08013c8d
 8013c4c:	08013c8d 	.word	0x08013c8d
 8013c50:	08013c8d 	.word	0x08013c8d
 8013c54:	08013c8d 	.word	0x08013c8d
 8013c58:	08013c85 	.word	0x08013c85
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c62:	e050      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c64:	2304      	movs	r3, #4
 8013c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c6a:	e04c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c6c:	2308      	movs	r3, #8
 8013c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c72:	e048      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c74:	2310      	movs	r3, #16
 8013c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c7a:	e044      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c7c:	2320      	movs	r3, #32
 8013c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c82:	e040      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c84:	2340      	movs	r3, #64	@ 0x40
 8013c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c8a:	e03c      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c8c:	2380      	movs	r3, #128	@ 0x80
 8013c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c92:	e038      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4a71      	ldr	r2, [pc, #452]	@ (8013e60 <UART_SetConfig+0x908>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d130      	bne.n	8013d00 <UART_SetConfig+0x7a8>
 8013c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8013e5c <UART_SetConfig+0x904>)
 8013ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ca2:	f003 0307 	and.w	r3, r3, #7
 8013ca6:	2b05      	cmp	r3, #5
 8013ca8:	d826      	bhi.n	8013cf8 <UART_SetConfig+0x7a0>
 8013caa:	a201      	add	r2, pc, #4	@ (adr r2, 8013cb0 <UART_SetConfig+0x758>)
 8013cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cb0:	08013cc9 	.word	0x08013cc9
 8013cb4:	08013cd1 	.word	0x08013cd1
 8013cb8:	08013cd9 	.word	0x08013cd9
 8013cbc:	08013ce1 	.word	0x08013ce1
 8013cc0:	08013ce9 	.word	0x08013ce9
 8013cc4:	08013cf1 	.word	0x08013cf1
 8013cc8:	2302      	movs	r3, #2
 8013cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cce:	e01a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013cd0:	2304      	movs	r3, #4
 8013cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cd6:	e016      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013cd8:	2308      	movs	r3, #8
 8013cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cde:	e012      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013ce0:	2310      	movs	r3, #16
 8013ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ce6:	e00e      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013ce8:	2320      	movs	r3, #32
 8013cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cee:	e00a      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013cf0:	2340      	movs	r3, #64	@ 0x40
 8013cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cf6:	e006      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013cf8:	2380      	movs	r3, #128	@ 0x80
 8013cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cfe:	e002      	b.n	8013d06 <UART_SetConfig+0x7ae>
 8013d00:	2380      	movs	r3, #128	@ 0x80
 8013d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	4a55      	ldr	r2, [pc, #340]	@ (8013e60 <UART_SetConfig+0x908>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	f040 80f8 	bne.w	8013f02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013d12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d16:	2b20      	cmp	r3, #32
 8013d18:	dc46      	bgt.n	8013da8 <UART_SetConfig+0x850>
 8013d1a:	2b02      	cmp	r3, #2
 8013d1c:	db75      	blt.n	8013e0a <UART_SetConfig+0x8b2>
 8013d1e:	3b02      	subs	r3, #2
 8013d20:	2b1e      	cmp	r3, #30
 8013d22:	d872      	bhi.n	8013e0a <UART_SetConfig+0x8b2>
 8013d24:	a201      	add	r2, pc, #4	@ (adr r2, 8013d2c <UART_SetConfig+0x7d4>)
 8013d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d2a:	bf00      	nop
 8013d2c:	08013daf 	.word	0x08013daf
 8013d30:	08013e0b 	.word	0x08013e0b
 8013d34:	08013db7 	.word	0x08013db7
 8013d38:	08013e0b 	.word	0x08013e0b
 8013d3c:	08013e0b 	.word	0x08013e0b
 8013d40:	08013e0b 	.word	0x08013e0b
 8013d44:	08013dc7 	.word	0x08013dc7
 8013d48:	08013e0b 	.word	0x08013e0b
 8013d4c:	08013e0b 	.word	0x08013e0b
 8013d50:	08013e0b 	.word	0x08013e0b
 8013d54:	08013e0b 	.word	0x08013e0b
 8013d58:	08013e0b 	.word	0x08013e0b
 8013d5c:	08013e0b 	.word	0x08013e0b
 8013d60:	08013e0b 	.word	0x08013e0b
 8013d64:	08013dd7 	.word	0x08013dd7
 8013d68:	08013e0b 	.word	0x08013e0b
 8013d6c:	08013e0b 	.word	0x08013e0b
 8013d70:	08013e0b 	.word	0x08013e0b
 8013d74:	08013e0b 	.word	0x08013e0b
 8013d78:	08013e0b 	.word	0x08013e0b
 8013d7c:	08013e0b 	.word	0x08013e0b
 8013d80:	08013e0b 	.word	0x08013e0b
 8013d84:	08013e0b 	.word	0x08013e0b
 8013d88:	08013e0b 	.word	0x08013e0b
 8013d8c:	08013e0b 	.word	0x08013e0b
 8013d90:	08013e0b 	.word	0x08013e0b
 8013d94:	08013e0b 	.word	0x08013e0b
 8013d98:	08013e0b 	.word	0x08013e0b
 8013d9c:	08013e0b 	.word	0x08013e0b
 8013da0:	08013e0b 	.word	0x08013e0b
 8013da4:	08013dfd 	.word	0x08013dfd
 8013da8:	2b40      	cmp	r3, #64	@ 0x40
 8013daa:	d02a      	beq.n	8013e02 <UART_SetConfig+0x8aa>
 8013dac:	e02d      	b.n	8013e0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013dae:	f7fc f80f 	bl	800fdd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8013db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013db4:	e02f      	b.n	8013e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7fc f81e 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dc4:	e027      	b.n	8013e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013dc6:	f107 0318 	add.w	r3, r7, #24
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fc f96a 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dd4:	e01f      	b.n	8013e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013dd6:	4b21      	ldr	r3, [pc, #132]	@ (8013e5c <UART_SetConfig+0x904>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f003 0320 	and.w	r3, r3, #32
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d009      	beq.n	8013df6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013de2:	4b1e      	ldr	r3, [pc, #120]	@ (8013e5c <UART_SetConfig+0x904>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	08db      	lsrs	r3, r3, #3
 8013de8:	f003 0303 	and.w	r3, r3, #3
 8013dec:	4a1d      	ldr	r2, [pc, #116]	@ (8013e64 <UART_SetConfig+0x90c>)
 8013dee:	fa22 f303 	lsr.w	r3, r2, r3
 8013df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013df4:	e00f      	b.n	8013e16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013df6:	4b1b      	ldr	r3, [pc, #108]	@ (8013e64 <UART_SetConfig+0x90c>)
 8013df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dfa:	e00c      	b.n	8013e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8013e68 <UART_SetConfig+0x910>)
 8013dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e00:	e009      	b.n	8013e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e08:	e005      	b.n	8013e16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f000 81ee 	beq.w	80141fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e22:	4a12      	ldr	r2, [pc, #72]	@ (8013e6c <UART_SetConfig+0x914>)
 8013e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e28:	461a      	mov	r2, r3
 8013e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	685a      	ldr	r2, [r3, #4]
 8013e36:	4613      	mov	r3, r2
 8013e38:	005b      	lsls	r3, r3, #1
 8013e3a:	4413      	add	r3, r2
 8013e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d305      	bcc.n	8013e4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d910      	bls.n	8013e70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013e54:	e1d1      	b.n	80141fa <UART_SetConfig+0xca2>
 8013e56:	bf00      	nop
 8013e58:	40011c00 	.word	0x40011c00
 8013e5c:	58024400 	.word	0x58024400
 8013e60:	58000c00 	.word	0x58000c00
 8013e64:	03d09000 	.word	0x03d09000
 8013e68:	003d0900 	.word	0x003d0900
 8013e6c:	0801e314 	.word	0x0801e314
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e72:	2200      	movs	r2, #0
 8013e74:	60bb      	str	r3, [r7, #8]
 8013e76:	60fa      	str	r2, [r7, #12]
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e7c:	4ac0      	ldr	r2, [pc, #768]	@ (8014180 <UART_SetConfig+0xc28>)
 8013e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	2200      	movs	r2, #0
 8013e86:	603b      	str	r3, [r7, #0]
 8013e88:	607a      	str	r2, [r7, #4]
 8013e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013e92:	f7ec fc61 	bl	8000758 <__aeabi_uldivmod>
 8013e96:	4602      	mov	r2, r0
 8013e98:	460b      	mov	r3, r1
 8013e9a:	4610      	mov	r0, r2
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	f04f 0200 	mov.w	r2, #0
 8013ea2:	f04f 0300 	mov.w	r3, #0
 8013ea6:	020b      	lsls	r3, r1, #8
 8013ea8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013eac:	0202      	lsls	r2, r0, #8
 8013eae:	6979      	ldr	r1, [r7, #20]
 8013eb0:	6849      	ldr	r1, [r1, #4]
 8013eb2:	0849      	lsrs	r1, r1, #1
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	460c      	mov	r4, r1
 8013eb8:	4605      	mov	r5, r0
 8013eba:	eb12 0804 	adds.w	r8, r2, r4
 8013ebe:	eb43 0905 	adc.w	r9, r3, r5
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	469a      	mov	sl, r3
 8013eca:	4693      	mov	fp, r2
 8013ecc:	4652      	mov	r2, sl
 8013ece:	465b      	mov	r3, fp
 8013ed0:	4640      	mov	r0, r8
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	f7ec fc40 	bl	8000758 <__aeabi_uldivmod>
 8013ed8:	4602      	mov	r2, r0
 8013eda:	460b      	mov	r3, r1
 8013edc:	4613      	mov	r3, r2
 8013ede:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013ee6:	d308      	bcc.n	8013efa <UART_SetConfig+0x9a2>
 8013ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013eee:	d204      	bcs.n	8013efa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ef6:	60da      	str	r2, [r3, #12]
 8013ef8:	e17f      	b.n	80141fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013efa:	2301      	movs	r3, #1
 8013efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013f00:	e17b      	b.n	80141fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	69db      	ldr	r3, [r3, #28]
 8013f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f0a:	f040 80bd 	bne.w	8014088 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013f0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013f12:	2b20      	cmp	r3, #32
 8013f14:	dc48      	bgt.n	8013fa8 <UART_SetConfig+0xa50>
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	db7b      	blt.n	8014012 <UART_SetConfig+0xaba>
 8013f1a:	2b20      	cmp	r3, #32
 8013f1c:	d879      	bhi.n	8014012 <UART_SetConfig+0xaba>
 8013f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8013f24 <UART_SetConfig+0x9cc>)
 8013f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f24:	08013faf 	.word	0x08013faf
 8013f28:	08013fb7 	.word	0x08013fb7
 8013f2c:	08014013 	.word	0x08014013
 8013f30:	08014013 	.word	0x08014013
 8013f34:	08013fbf 	.word	0x08013fbf
 8013f38:	08014013 	.word	0x08014013
 8013f3c:	08014013 	.word	0x08014013
 8013f40:	08014013 	.word	0x08014013
 8013f44:	08013fcf 	.word	0x08013fcf
 8013f48:	08014013 	.word	0x08014013
 8013f4c:	08014013 	.word	0x08014013
 8013f50:	08014013 	.word	0x08014013
 8013f54:	08014013 	.word	0x08014013
 8013f58:	08014013 	.word	0x08014013
 8013f5c:	08014013 	.word	0x08014013
 8013f60:	08014013 	.word	0x08014013
 8013f64:	08013fdf 	.word	0x08013fdf
 8013f68:	08014013 	.word	0x08014013
 8013f6c:	08014013 	.word	0x08014013
 8013f70:	08014013 	.word	0x08014013
 8013f74:	08014013 	.word	0x08014013
 8013f78:	08014013 	.word	0x08014013
 8013f7c:	08014013 	.word	0x08014013
 8013f80:	08014013 	.word	0x08014013
 8013f84:	08014013 	.word	0x08014013
 8013f88:	08014013 	.word	0x08014013
 8013f8c:	08014013 	.word	0x08014013
 8013f90:	08014013 	.word	0x08014013
 8013f94:	08014013 	.word	0x08014013
 8013f98:	08014013 	.word	0x08014013
 8013f9c:	08014013 	.word	0x08014013
 8013fa0:	08014013 	.word	0x08014013
 8013fa4:	08014005 	.word	0x08014005
 8013fa8:	2b40      	cmp	r3, #64	@ 0x40
 8013faa:	d02e      	beq.n	801400a <UART_SetConfig+0xab2>
 8013fac:	e031      	b.n	8014012 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013fae:	f7fa f871 	bl	800e094 <HAL_RCC_GetPCLK1Freq>
 8013fb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fb4:	e033      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013fb6:	f7fa f883 	bl	800e0c0 <HAL_RCC_GetPCLK2Freq>
 8013fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fbc:	e02f      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7fb ff1a 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fcc:	e027      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013fce:	f107 0318 	add.w	r3, r7, #24
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fc f866 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fdc:	e01f      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013fde:	4b69      	ldr	r3, [pc, #420]	@ (8014184 <UART_SetConfig+0xc2c>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f003 0320 	and.w	r3, r3, #32
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d009      	beq.n	8013ffe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013fea:	4b66      	ldr	r3, [pc, #408]	@ (8014184 <UART_SetConfig+0xc2c>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	08db      	lsrs	r3, r3, #3
 8013ff0:	f003 0303 	and.w	r3, r3, #3
 8013ff4:	4a64      	ldr	r2, [pc, #400]	@ (8014188 <UART_SetConfig+0xc30>)
 8013ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8013ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013ffc:	e00f      	b.n	801401e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013ffe:	4b62      	ldr	r3, [pc, #392]	@ (8014188 <UART_SetConfig+0xc30>)
 8014000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014002:	e00c      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014004:	4b61      	ldr	r3, [pc, #388]	@ (801418c <UART_SetConfig+0xc34>)
 8014006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014008:	e009      	b.n	801401e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801400a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014010:	e005      	b.n	801401e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8014012:	2300      	movs	r3, #0
 8014014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014016:	2301      	movs	r3, #1
 8014018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801401c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801401e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014020:	2b00      	cmp	r3, #0
 8014022:	f000 80ea 	beq.w	80141fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801402a:	4a55      	ldr	r2, [pc, #340]	@ (8014180 <UART_SetConfig+0xc28>)
 801402c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014030:	461a      	mov	r2, r3
 8014032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014034:	fbb3 f3f2 	udiv	r3, r3, r2
 8014038:	005a      	lsls	r2, r3, #1
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	085b      	lsrs	r3, r3, #1
 8014040:	441a      	add	r2, r3
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	fbb2 f3f3 	udiv	r3, r2, r3
 801404a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801404c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801404e:	2b0f      	cmp	r3, #15
 8014050:	d916      	bls.n	8014080 <UART_SetConfig+0xb28>
 8014052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014058:	d212      	bcs.n	8014080 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801405c:	b29b      	uxth	r3, r3
 801405e:	f023 030f 	bic.w	r3, r3, #15
 8014062:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014066:	085b      	lsrs	r3, r3, #1
 8014068:	b29b      	uxth	r3, r3
 801406a:	f003 0307 	and.w	r3, r3, #7
 801406e:	b29a      	uxth	r2, r3
 8014070:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014072:	4313      	orrs	r3, r2
 8014074:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801407c:	60da      	str	r2, [r3, #12]
 801407e:	e0bc      	b.n	80141fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014080:	2301      	movs	r3, #1
 8014082:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014086:	e0b8      	b.n	80141fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014088:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801408c:	2b20      	cmp	r3, #32
 801408e:	dc4b      	bgt.n	8014128 <UART_SetConfig+0xbd0>
 8014090:	2b00      	cmp	r3, #0
 8014092:	f2c0 8087 	blt.w	80141a4 <UART_SetConfig+0xc4c>
 8014096:	2b20      	cmp	r3, #32
 8014098:	f200 8084 	bhi.w	80141a4 <UART_SetConfig+0xc4c>
 801409c:	a201      	add	r2, pc, #4	@ (adr r2, 80140a4 <UART_SetConfig+0xb4c>)
 801409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140a2:	bf00      	nop
 80140a4:	0801412f 	.word	0x0801412f
 80140a8:	08014137 	.word	0x08014137
 80140ac:	080141a5 	.word	0x080141a5
 80140b0:	080141a5 	.word	0x080141a5
 80140b4:	0801413f 	.word	0x0801413f
 80140b8:	080141a5 	.word	0x080141a5
 80140bc:	080141a5 	.word	0x080141a5
 80140c0:	080141a5 	.word	0x080141a5
 80140c4:	0801414f 	.word	0x0801414f
 80140c8:	080141a5 	.word	0x080141a5
 80140cc:	080141a5 	.word	0x080141a5
 80140d0:	080141a5 	.word	0x080141a5
 80140d4:	080141a5 	.word	0x080141a5
 80140d8:	080141a5 	.word	0x080141a5
 80140dc:	080141a5 	.word	0x080141a5
 80140e0:	080141a5 	.word	0x080141a5
 80140e4:	0801415f 	.word	0x0801415f
 80140e8:	080141a5 	.word	0x080141a5
 80140ec:	080141a5 	.word	0x080141a5
 80140f0:	080141a5 	.word	0x080141a5
 80140f4:	080141a5 	.word	0x080141a5
 80140f8:	080141a5 	.word	0x080141a5
 80140fc:	080141a5 	.word	0x080141a5
 8014100:	080141a5 	.word	0x080141a5
 8014104:	080141a5 	.word	0x080141a5
 8014108:	080141a5 	.word	0x080141a5
 801410c:	080141a5 	.word	0x080141a5
 8014110:	080141a5 	.word	0x080141a5
 8014114:	080141a5 	.word	0x080141a5
 8014118:	080141a5 	.word	0x080141a5
 801411c:	080141a5 	.word	0x080141a5
 8014120:	080141a5 	.word	0x080141a5
 8014124:	08014197 	.word	0x08014197
 8014128:	2b40      	cmp	r3, #64	@ 0x40
 801412a:	d037      	beq.n	801419c <UART_SetConfig+0xc44>
 801412c:	e03a      	b.n	80141a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801412e:	f7f9 ffb1 	bl	800e094 <HAL_RCC_GetPCLK1Freq>
 8014132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014134:	e03c      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014136:	f7f9 ffc3 	bl	800e0c0 <HAL_RCC_GetPCLK2Freq>
 801413a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801413c:	e038      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801413e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014142:	4618      	mov	r0, r3
 8014144:	f7fb fe5a 	bl	800fdfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801414c:	e030      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801414e:	f107 0318 	add.w	r3, r7, #24
 8014152:	4618      	mov	r0, r3
 8014154:	f7fb ffa6 	bl	80100a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801415c:	e028      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801415e:	4b09      	ldr	r3, [pc, #36]	@ (8014184 <UART_SetConfig+0xc2c>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	f003 0320 	and.w	r3, r3, #32
 8014166:	2b00      	cmp	r3, #0
 8014168:	d012      	beq.n	8014190 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801416a:	4b06      	ldr	r3, [pc, #24]	@ (8014184 <UART_SetConfig+0xc2c>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	08db      	lsrs	r3, r3, #3
 8014170:	f003 0303 	and.w	r3, r3, #3
 8014174:	4a04      	ldr	r2, [pc, #16]	@ (8014188 <UART_SetConfig+0xc30>)
 8014176:	fa22 f303 	lsr.w	r3, r2, r3
 801417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801417c:	e018      	b.n	80141b0 <UART_SetConfig+0xc58>
 801417e:	bf00      	nop
 8014180:	0801e314 	.word	0x0801e314
 8014184:	58024400 	.word	0x58024400
 8014188:	03d09000 	.word	0x03d09000
 801418c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014190:	4b24      	ldr	r3, [pc, #144]	@ (8014224 <UART_SetConfig+0xccc>)
 8014192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014194:	e00c      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014196:	4b24      	ldr	r3, [pc, #144]	@ (8014228 <UART_SetConfig+0xcd0>)
 8014198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801419a:	e009      	b.n	80141b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801419c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80141a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141a2:	e005      	b.n	80141b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80141a4:	2300      	movs	r3, #0
 80141a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80141a8:	2301      	movs	r3, #1
 80141aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80141ae:	bf00      	nop
    }

    if (pclk != 0U)
 80141b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d021      	beq.n	80141fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ba:	4a1c      	ldr	r2, [pc, #112]	@ (801422c <UART_SetConfig+0xcd4>)
 80141bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141c0:	461a      	mov	r2, r3
 80141c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	085b      	lsrs	r3, r3, #1
 80141ce:	441a      	add	r2, r3
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80141d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80141da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141dc:	2b0f      	cmp	r3, #15
 80141de:	d909      	bls.n	80141f4 <UART_SetConfig+0xc9c>
 80141e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80141e6:	d205      	bcs.n	80141f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80141e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	60da      	str	r2, [r3, #12]
 80141f2:	e002      	b.n	80141fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80141f4:	2301      	movs	r3, #1
 80141f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	2201      	movs	r2, #1
 80141fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	2201      	movs	r2, #1
 8014206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	2200      	movs	r2, #0
 801420e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	2200      	movs	r2, #0
 8014214:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014216:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801421a:	4618      	mov	r0, r3
 801421c:	3748      	adds	r7, #72	@ 0x48
 801421e:	46bd      	mov	sp, r7
 8014220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014224:	03d09000 	.word	0x03d09000
 8014228:	003d0900 	.word	0x003d0900
 801422c:	0801e314 	.word	0x0801e314

08014230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801423c:	f003 0308 	and.w	r3, r3, #8
 8014240:	2b00      	cmp	r3, #0
 8014242:	d00a      	beq.n	801425a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	430a      	orrs	r2, r1
 8014258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801425e:	f003 0301 	and.w	r3, r3, #1
 8014262:	2b00      	cmp	r3, #0
 8014264:	d00a      	beq.n	801427c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	430a      	orrs	r2, r1
 801427a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014280:	f003 0302 	and.w	r3, r3, #2
 8014284:	2b00      	cmp	r3, #0
 8014286:	d00a      	beq.n	801429e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	430a      	orrs	r2, r1
 801429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142a2:	f003 0304 	and.w	r3, r3, #4
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d00a      	beq.n	80142c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	685b      	ldr	r3, [r3, #4]
 80142b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	430a      	orrs	r2, r1
 80142be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142c4:	f003 0310 	and.w	r3, r3, #16
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d00a      	beq.n	80142e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	689b      	ldr	r3, [r3, #8]
 80142d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	430a      	orrs	r2, r1
 80142e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142e6:	f003 0320 	and.w	r3, r3, #32
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d00a      	beq.n	8014304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	689b      	ldr	r3, [r3, #8]
 80142f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	430a      	orrs	r2, r1
 8014302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801430c:	2b00      	cmp	r3, #0
 801430e:	d01a      	beq.n	8014346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	430a      	orrs	r2, r1
 8014324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801432a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801432e:	d10a      	bne.n	8014346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	430a      	orrs	r2, r1
 8014344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801434e:	2b00      	cmp	r3, #0
 8014350:	d00a      	beq.n	8014368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	430a      	orrs	r2, r1
 8014366:	605a      	str	r2, [r3, #4]
  }
}
 8014368:	bf00      	nop
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b098      	sub	sp, #96	@ 0x60
 8014378:	af02      	add	r7, sp, #8
 801437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2200      	movs	r2, #0
 8014380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014384:	f7f3 f884 	bl	8007490 <HAL_GetTick>
 8014388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f003 0308 	and.w	r3, r3, #8
 8014394:	2b08      	cmp	r3, #8
 8014396:	d12f      	bne.n	80143f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143a0:	2200      	movs	r2, #0
 80143a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f88e 	bl	80144c8 <UART_WaitOnFlagUntilTimeout>
 80143ac:	4603      	mov	r3, r0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d022      	beq.n	80143f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ba:	e853 3f00 	ldrex	r3, [r3]
 80143be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80143c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80143c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	461a      	mov	r2, r3
 80143ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80143d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80143d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143d8:	e841 2300 	strex	r3, r2, [r1]
 80143dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80143de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1e6      	bne.n	80143b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2220      	movs	r2, #32
 80143e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2200      	movs	r2, #0
 80143f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80143f4:	2303      	movs	r3, #3
 80143f6:	e063      	b.n	80144c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f003 0304 	and.w	r3, r3, #4
 8014402:	2b04      	cmp	r3, #4
 8014404:	d149      	bne.n	801449a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014406:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440e:	2200      	movs	r2, #0
 8014410:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f000 f857 	bl	80144c8 <UART_WaitOnFlagUntilTimeout>
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d03c      	beq.n	801449a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014428:	e853 3f00 	ldrex	r3, [r3]
 801442c:	623b      	str	r3, [r7, #32]
   return(result);
 801442e:	6a3b      	ldr	r3, [r7, #32]
 8014430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801443e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014440:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014446:	e841 2300 	strex	r3, r2, [r1]
 801444a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801444e:	2b00      	cmp	r3, #0
 8014450:	d1e6      	bne.n	8014420 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	3308      	adds	r3, #8
 8014458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	e853 3f00 	ldrex	r3, [r3]
 8014460:	60fb      	str	r3, [r7, #12]
   return(result);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f023 0301 	bic.w	r3, r3, #1
 8014468:	64bb      	str	r3, [r7, #72]	@ 0x48
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	3308      	adds	r3, #8
 8014470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014472:	61fa      	str	r2, [r7, #28]
 8014474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014476:	69b9      	ldr	r1, [r7, #24]
 8014478:	69fa      	ldr	r2, [r7, #28]
 801447a:	e841 2300 	strex	r3, r2, [r1]
 801447e:	617b      	str	r3, [r7, #20]
   return(result);
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1e5      	bne.n	8014452 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2220      	movs	r2, #32
 801448a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2200      	movs	r2, #0
 8014492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014496:	2303      	movs	r3, #3
 8014498:	e012      	b.n	80144c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2220      	movs	r2, #32
 801449e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2220      	movs	r2, #32
 80144a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80144be:	2300      	movs	r3, #0
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3758      	adds	r7, #88	@ 0x58
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	603b      	str	r3, [r7, #0]
 80144d4:	4613      	mov	r3, r2
 80144d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80144d8:	e04f      	b.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144e0:	d04b      	beq.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80144e2:	f7f2 ffd5 	bl	8007490 <HAL_GetTick>
 80144e6:	4602      	mov	r2, r0
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	1ad3      	subs	r3, r2, r3
 80144ec:	69ba      	ldr	r2, [r7, #24]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d302      	bcc.n	80144f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d101      	bne.n	80144fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80144f8:	2303      	movs	r3, #3
 80144fa:	e04e      	b.n	801459a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f003 0304 	and.w	r3, r3, #4
 8014506:	2b00      	cmp	r3, #0
 8014508:	d037      	beq.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	2b80      	cmp	r3, #128	@ 0x80
 801450e:	d034      	beq.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	2b40      	cmp	r3, #64	@ 0x40
 8014514:	d031      	beq.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	69db      	ldr	r3, [r3, #28]
 801451c:	f003 0308 	and.w	r3, r3, #8
 8014520:	2b08      	cmp	r3, #8
 8014522:	d110      	bne.n	8014546 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2208      	movs	r2, #8
 801452a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801452c:	68f8      	ldr	r0, [r7, #12]
 801452e:	f000 f839 	bl	80145a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2208      	movs	r2, #8
 8014536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8014542:	2301      	movs	r3, #1
 8014544:	e029      	b.n	801459a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	69db      	ldr	r3, [r3, #28]
 801454c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014554:	d111      	bne.n	801457a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801455e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f000 f81f 	bl	80145a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2220      	movs	r2, #32
 801456a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014576:	2303      	movs	r3, #3
 8014578:	e00f      	b.n	801459a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	69da      	ldr	r2, [r3, #28]
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	4013      	ands	r3, r2
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	429a      	cmp	r2, r3
 8014588:	bf0c      	ite	eq
 801458a:	2301      	moveq	r3, #1
 801458c:	2300      	movne	r3, #0
 801458e:	b2db      	uxtb	r3, r3
 8014590:	461a      	mov	r2, r3
 8014592:	79fb      	ldrb	r3, [r7, #7]
 8014594:	429a      	cmp	r2, r3
 8014596:	d0a0      	beq.n	80144da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014598:	2300      	movs	r3, #0
}
 801459a:	4618      	mov	r0, r3
 801459c:	3710      	adds	r7, #16
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
	...

080145a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b095      	sub	sp, #84	@ 0x54
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145b4:	e853 3f00 	ldrex	r3, [r3]
 80145b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80145ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80145c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	461a      	mov	r2, r3
 80145c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80145cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80145d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80145d2:	e841 2300 	strex	r3, r2, [r1]
 80145d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80145d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d1e6      	bne.n	80145ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	3308      	adds	r3, #8
 80145e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e6:	6a3b      	ldr	r3, [r7, #32]
 80145e8:	e853 3f00 	ldrex	r3, [r3]
 80145ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80145ee:	69fa      	ldr	r2, [r7, #28]
 80145f0:	4b1e      	ldr	r3, [pc, #120]	@ (801466c <UART_EndRxTransfer+0xc8>)
 80145f2:	4013      	ands	r3, r2
 80145f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	3308      	adds	r3, #8
 80145fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80145fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014600:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014606:	e841 2300 	strex	r3, r2, [r1]
 801460a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801460e:	2b00      	cmp	r3, #0
 8014610:	d1e5      	bne.n	80145de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014616:	2b01      	cmp	r3, #1
 8014618:	d118      	bne.n	801464c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	e853 3f00 	ldrex	r3, [r3]
 8014626:	60bb      	str	r3, [r7, #8]
   return(result);
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	f023 0310 	bic.w	r3, r3, #16
 801462e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	461a      	mov	r2, r3
 8014636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014638:	61bb      	str	r3, [r7, #24]
 801463a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801463c:	6979      	ldr	r1, [r7, #20]
 801463e:	69ba      	ldr	r2, [r7, #24]
 8014640:	e841 2300 	strex	r3, r2, [r1]
 8014644:	613b      	str	r3, [r7, #16]
   return(result);
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1e6      	bne.n	801461a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2220      	movs	r2, #32
 8014650:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2200      	movs	r2, #0
 8014658:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2200      	movs	r2, #0
 801465e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8014660:	bf00      	nop
 8014662:	3754      	adds	r7, #84	@ 0x54
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	effffffe 	.word	0xeffffffe

08014670 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014670:	b480      	push	{r7}
 8014672:	b085      	sub	sp, #20
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801467e:	2b01      	cmp	r3, #1
 8014680:	d101      	bne.n	8014686 <HAL_UARTEx_DisableFifoMode+0x16>
 8014682:	2302      	movs	r3, #2
 8014684:	e027      	b.n	80146d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2201      	movs	r2, #1
 801468a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2224      	movs	r2, #36	@ 0x24
 8014692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f022 0201 	bic.w	r2, r2, #1
 80146ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80146b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2200      	movs	r2, #0
 80146ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68fa      	ldr	r2, [r7, #12]
 80146c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2220      	movs	r2, #32
 80146c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2200      	movs	r2, #0
 80146d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3714      	adds	r7, #20
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr

080146e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b084      	sub	sp, #16
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
 80146ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d101      	bne.n	80146fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80146f6:	2302      	movs	r3, #2
 80146f8:	e02d      	b.n	8014756 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2201      	movs	r2, #1
 80146fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2224      	movs	r2, #36	@ 0x24
 8014706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f022 0201 	bic.w	r2, r2, #1
 8014720:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	430a      	orrs	r2, r1
 8014734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f850 	bl	80147dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2220      	movs	r2, #32
 8014748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2200      	movs	r2, #0
 8014750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014754:	2300      	movs	r3, #0
}
 8014756:	4618      	mov	r0, r3
 8014758:	3710      	adds	r7, #16
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801475e:	b580      	push	{r7, lr}
 8014760:	b084      	sub	sp, #16
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
 8014766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801476e:	2b01      	cmp	r3, #1
 8014770:	d101      	bne.n	8014776 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014772:	2302      	movs	r3, #2
 8014774:	e02d      	b.n	80147d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2201      	movs	r2, #1
 801477a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2224      	movs	r2, #36	@ 0x24
 8014782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f022 0201 	bic.w	r2, r2, #1
 801479c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	683a      	ldr	r2, [r7, #0]
 80147ae:	430a      	orrs	r2, r1
 80147b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f812 	bl	80147dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2220      	movs	r2, #32
 80147c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2200      	movs	r2, #0
 80147cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80147d0:	2300      	movs	r3, #0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
	...

080147dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d108      	bne.n	80147fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2201      	movs	r2, #1
 80147f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2201      	movs	r2, #1
 80147f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80147fc:	e031      	b.n	8014862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80147fe:	2310      	movs	r3, #16
 8014800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014802:	2310      	movs	r3, #16
 8014804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	0e5b      	lsrs	r3, r3, #25
 801480e:	b2db      	uxtb	r3, r3
 8014810:	f003 0307 	and.w	r3, r3, #7
 8014814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	0f5b      	lsrs	r3, r3, #29
 801481e:	b2db      	uxtb	r3, r3
 8014820:	f003 0307 	and.w	r3, r3, #7
 8014824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014826:	7bbb      	ldrb	r3, [r7, #14]
 8014828:	7b3a      	ldrb	r2, [r7, #12]
 801482a:	4911      	ldr	r1, [pc, #68]	@ (8014870 <UARTEx_SetNbDataToProcess+0x94>)
 801482c:	5c8a      	ldrb	r2, [r1, r2]
 801482e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014832:	7b3a      	ldrb	r2, [r7, #12]
 8014834:	490f      	ldr	r1, [pc, #60]	@ (8014874 <UARTEx_SetNbDataToProcess+0x98>)
 8014836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014838:	fb93 f3f2 	sdiv	r3, r3, r2
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014844:	7bfb      	ldrb	r3, [r7, #15]
 8014846:	7b7a      	ldrb	r2, [r7, #13]
 8014848:	4909      	ldr	r1, [pc, #36]	@ (8014870 <UARTEx_SetNbDataToProcess+0x94>)
 801484a:	5c8a      	ldrb	r2, [r1, r2]
 801484c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014850:	7b7a      	ldrb	r2, [r7, #13]
 8014852:	4908      	ldr	r1, [pc, #32]	@ (8014874 <UARTEx_SetNbDataToProcess+0x98>)
 8014854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014856:	fb93 f3f2 	sdiv	r3, r3, r2
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014862:	bf00      	nop
 8014864:	3714      	adds	r7, #20
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	0801e32c 	.word	0x0801e32c
 8014874:	0801e334 	.word	0x0801e334

08014878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014878:	b084      	sub	sp, #16
 801487a:	b580      	push	{r7, lr}
 801487c:	b084      	sub	sp, #16
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	f107 001c 	add.w	r0, r7, #28
 8014886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801488a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801488e:	2b01      	cmp	r3, #1
 8014890:	d121      	bne.n	80148d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014896:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	68da      	ldr	r2, [r3, #12]
 80148a2:	4b2c      	ldr	r3, [pc, #176]	@ (8014954 <USB_CoreInit+0xdc>)
 80148a4:	4013      	ands	r3, r2
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80148b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d105      	bne.n	80148ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f001 faf6 	bl	8015ebc <USB_CoreReset>
 80148d0:	4603      	mov	r3, r0
 80148d2:	73fb      	strb	r3, [r7, #15]
 80148d4:	e01b      	b.n	801490e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	68db      	ldr	r3, [r3, #12]
 80148da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f001 faea 	bl	8015ebc <USB_CoreReset>
 80148e8:	4603      	mov	r3, r0
 80148ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80148ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d106      	bne.n	8014902 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8014900:	e005      	b.n	801490e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014906:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801490e:	7fbb      	ldrb	r3, [r7, #30]
 8014910:	2b01      	cmp	r3, #1
 8014912:	d116      	bne.n	8014942 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014918:	b29a      	uxth	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014922:	4b0d      	ldr	r3, [pc, #52]	@ (8014958 <USB_CoreInit+0xe0>)
 8014924:	4313      	orrs	r3, r2
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	f043 0206 	orr.w	r2, r3, #6
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	f043 0220 	orr.w	r2, r3, #32
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014942:	7bfb      	ldrb	r3, [r7, #15]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801494e:	b004      	add	sp, #16
 8014950:	4770      	bx	lr
 8014952:	bf00      	nop
 8014954:	ffbdffbf 	.word	0xffbdffbf
 8014958:	03ee0000 	.word	0x03ee0000

0801495c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801495c:	b480      	push	{r7}
 801495e:	b087      	sub	sp, #28
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	4613      	mov	r3, r2
 8014968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801496a:	79fb      	ldrb	r3, [r7, #7]
 801496c:	2b02      	cmp	r3, #2
 801496e:	d165      	bne.n	8014a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	4a41      	ldr	r2, [pc, #260]	@ (8014a78 <USB_SetTurnaroundTime+0x11c>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d906      	bls.n	8014986 <USB_SetTurnaroundTime+0x2a>
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	4a40      	ldr	r2, [pc, #256]	@ (8014a7c <USB_SetTurnaroundTime+0x120>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d202      	bcs.n	8014986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014980:	230f      	movs	r3, #15
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	e062      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	4a3c      	ldr	r2, [pc, #240]	@ (8014a7c <USB_SetTurnaroundTime+0x120>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d306      	bcc.n	801499c <USB_SetTurnaroundTime+0x40>
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	4a3b      	ldr	r2, [pc, #236]	@ (8014a80 <USB_SetTurnaroundTime+0x124>)
 8014992:	4293      	cmp	r3, r2
 8014994:	d202      	bcs.n	801499c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014996:	230e      	movs	r3, #14
 8014998:	617b      	str	r3, [r7, #20]
 801499a:	e057      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	4a38      	ldr	r2, [pc, #224]	@ (8014a80 <USB_SetTurnaroundTime+0x124>)
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d306      	bcc.n	80149b2 <USB_SetTurnaroundTime+0x56>
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	4a37      	ldr	r2, [pc, #220]	@ (8014a84 <USB_SetTurnaroundTime+0x128>)
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d202      	bcs.n	80149b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80149ac:	230d      	movs	r3, #13
 80149ae:	617b      	str	r3, [r7, #20]
 80149b0:	e04c      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	4a33      	ldr	r2, [pc, #204]	@ (8014a84 <USB_SetTurnaroundTime+0x128>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d306      	bcc.n	80149c8 <USB_SetTurnaroundTime+0x6c>
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	4a32      	ldr	r2, [pc, #200]	@ (8014a88 <USB_SetTurnaroundTime+0x12c>)
 80149be:	4293      	cmp	r3, r2
 80149c0:	d802      	bhi.n	80149c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80149c2:	230c      	movs	r3, #12
 80149c4:	617b      	str	r3, [r7, #20]
 80149c6:	e041      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	4a2f      	ldr	r2, [pc, #188]	@ (8014a88 <USB_SetTurnaroundTime+0x12c>)
 80149cc:	4293      	cmp	r3, r2
 80149ce:	d906      	bls.n	80149de <USB_SetTurnaroundTime+0x82>
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	4a2e      	ldr	r2, [pc, #184]	@ (8014a8c <USB_SetTurnaroundTime+0x130>)
 80149d4:	4293      	cmp	r3, r2
 80149d6:	d802      	bhi.n	80149de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80149d8:	230b      	movs	r3, #11
 80149da:	617b      	str	r3, [r7, #20]
 80149dc:	e036      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	4a2a      	ldr	r2, [pc, #168]	@ (8014a8c <USB_SetTurnaroundTime+0x130>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d906      	bls.n	80149f4 <USB_SetTurnaroundTime+0x98>
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	4a29      	ldr	r2, [pc, #164]	@ (8014a90 <USB_SetTurnaroundTime+0x134>)
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d802      	bhi.n	80149f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80149ee:	230a      	movs	r3, #10
 80149f0:	617b      	str	r3, [r7, #20]
 80149f2:	e02b      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	4a26      	ldr	r2, [pc, #152]	@ (8014a90 <USB_SetTurnaroundTime+0x134>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d906      	bls.n	8014a0a <USB_SetTurnaroundTime+0xae>
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	4a25      	ldr	r2, [pc, #148]	@ (8014a94 <USB_SetTurnaroundTime+0x138>)
 8014a00:	4293      	cmp	r3, r2
 8014a02:	d202      	bcs.n	8014a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014a04:	2309      	movs	r3, #9
 8014a06:	617b      	str	r3, [r7, #20]
 8014a08:	e020      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	4a21      	ldr	r2, [pc, #132]	@ (8014a94 <USB_SetTurnaroundTime+0x138>)
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d306      	bcc.n	8014a20 <USB_SetTurnaroundTime+0xc4>
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	4a20      	ldr	r2, [pc, #128]	@ (8014a98 <USB_SetTurnaroundTime+0x13c>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	d802      	bhi.n	8014a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014a1a:	2308      	movs	r3, #8
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	e015      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	4a1d      	ldr	r2, [pc, #116]	@ (8014a98 <USB_SetTurnaroundTime+0x13c>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d906      	bls.n	8014a36 <USB_SetTurnaroundTime+0xda>
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8014a9c <USB_SetTurnaroundTime+0x140>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d202      	bcs.n	8014a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014a30:	2307      	movs	r3, #7
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	e00a      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014a36:	2306      	movs	r3, #6
 8014a38:	617b      	str	r3, [r7, #20]
 8014a3a:	e007      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014a3c:	79fb      	ldrb	r3, [r7, #7]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d102      	bne.n	8014a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014a42:	2309      	movs	r3, #9
 8014a44:	617b      	str	r3, [r7, #20]
 8014a46:	e001      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014a48:	2309      	movs	r3, #9
 8014a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68da      	ldr	r2, [r3, #12]
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	029b      	lsls	r3, r3, #10
 8014a60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014a64:	431a      	orrs	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014a6a:	2300      	movs	r3, #0
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	371c      	adds	r7, #28
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr
 8014a78:	00d8acbf 	.word	0x00d8acbf
 8014a7c:	00e4e1c0 	.word	0x00e4e1c0
 8014a80:	00f42400 	.word	0x00f42400
 8014a84:	01067380 	.word	0x01067380
 8014a88:	011a499f 	.word	0x011a499f
 8014a8c:	01312cff 	.word	0x01312cff
 8014a90:	014ca43f 	.word	0x014ca43f
 8014a94:	016e3600 	.word	0x016e3600
 8014a98:	01a6ab1f 	.word	0x01a6ab1f
 8014a9c:	01e84800 	.word	0x01e84800

08014aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b083      	sub	sp, #12
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	f043 0201 	orr.w	r2, r3, #1
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ab4:	2300      	movs	r3, #0
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	370c      	adds	r7, #12
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr

08014ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ac2:	b480      	push	{r7}
 8014ac4:	b083      	sub	sp, #12
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	f023 0201 	bic.w	r2, r3, #1
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ad6:	2300      	movs	r3, #0
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	370c      	adds	r7, #12
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014af0:	2300      	movs	r3, #0
 8014af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014b00:	78fb      	ldrb	r3, [r7, #3]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d115      	bne.n	8014b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b12:	200a      	movs	r0, #10
 8014b14:	f7f2 fcc8 	bl	80074a8 <HAL_Delay>
      ms += 10U;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	330a      	adds	r3, #10
 8014b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f001 f93b 	bl	8015d9a <USB_GetMode>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d01e      	beq.n	8014b68 <USB_SetCurrentMode+0x84>
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b2e:	d9f0      	bls.n	8014b12 <USB_SetCurrentMode+0x2e>
 8014b30:	e01a      	b.n	8014b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014b32:	78fb      	ldrb	r3, [r7, #3]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d115      	bne.n	8014b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b44:	200a      	movs	r0, #10
 8014b46:	f7f2 fcaf 	bl	80074a8 <HAL_Delay>
      ms += 10U;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	330a      	adds	r3, #10
 8014b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f001 f922 	bl	8015d9a <USB_GetMode>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d005      	beq.n	8014b68 <USB_SetCurrentMode+0x84>
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b60:	d9f0      	bls.n	8014b44 <USB_SetCurrentMode+0x60>
 8014b62:	e001      	b.n	8014b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014b64:	2301      	movs	r3, #1
 8014b66:	e005      	b.n	8014b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8014b6c:	d101      	bne.n	8014b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e000      	b.n	8014b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014b72:	2300      	movs	r3, #0
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	3710      	adds	r7, #16
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014b7c:	b084      	sub	sp, #16
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b086      	sub	sp, #24
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014b96:	2300      	movs	r3, #0
 8014b98:	613b      	str	r3, [r7, #16]
 8014b9a:	e009      	b.n	8014bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	3340      	adds	r3, #64	@ 0x40
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	4413      	add	r3, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	3301      	adds	r3, #1
 8014bae:	613b      	str	r3, [r7, #16]
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	2b0e      	cmp	r3, #14
 8014bb4:	d9f2      	bls.n	8014b9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d11c      	bne.n	8014bf8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014bcc:	f043 0302 	orr.w	r3, r3, #2
 8014bd0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bd6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	601a      	str	r2, [r3, #0]
 8014bf6:	e005      	b.n	8014c04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bfc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d10d      	bne.n	8014c34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d104      	bne.n	8014c2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014c20:	2100      	movs	r1, #0
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 f968 	bl	8014ef8 <USB_SetDevSpeed>
 8014c28:	e008      	b.n	8014c3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f000 f963 	bl	8014ef8 <USB_SetDevSpeed>
 8014c32:	e003      	b.n	8014c3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014c34:	2103      	movs	r1, #3
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f95e 	bl	8014ef8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014c3c:	2110      	movs	r1, #16
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 f8fa 	bl	8014e38 <USB_FlushTxFifo>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d001      	beq.n	8014c4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 f924 	bl	8014e9c <USB_FlushRxFifo>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d001      	beq.n	8014c5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c64:	461a      	mov	r2, r3
 8014c66:	2300      	movs	r3, #0
 8014c68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c70:	461a      	mov	r2, r3
 8014c72:	2300      	movs	r3, #0
 8014c74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	2300      	movs	r3, #0
 8014c80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014c82:	2300      	movs	r3, #0
 8014c84:	613b      	str	r3, [r7, #16]
 8014c86:	e043      	b.n	8014d10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	015a      	lsls	r2, r3, #5
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	4413      	add	r3, r2
 8014c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014c9e:	d118      	bne.n	8014cd2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10a      	bne.n	8014cbc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	015a      	lsls	r2, r3, #5
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4413      	add	r3, r2
 8014cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014cb8:	6013      	str	r3, [r2, #0]
 8014cba:	e013      	b.n	8014ce4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	015a      	lsls	r2, r3, #5
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	4413      	add	r3, r2
 8014cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc8:	461a      	mov	r2, r3
 8014cca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	e008      	b.n	8014ce4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	015a      	lsls	r2, r3, #5
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cde:	461a      	mov	r2, r3
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	015a      	lsls	r2, r3, #5
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	4413      	add	r3, r2
 8014cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	015a      	lsls	r2, r3, #5
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	4413      	add	r3, r2
 8014cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d02:	461a      	mov	r2, r3
 8014d04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014d08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	613b      	str	r3, [r7, #16]
 8014d10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014d14:	461a      	mov	r2, r3
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d3b5      	bcc.n	8014c88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	613b      	str	r3, [r7, #16]
 8014d20:	e043      	b.n	8014daa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	015a      	lsls	r2, r3, #5
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	4413      	add	r3, r2
 8014d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d38:	d118      	bne.n	8014d6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d10a      	bne.n	8014d56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	015a      	lsls	r2, r3, #5
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	4413      	add	r3, r2
 8014d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014d52:	6013      	str	r3, [r2, #0]
 8014d54:	e013      	b.n	8014d7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	015a      	lsls	r2, r3, #5
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d62:	461a      	mov	r2, r3
 8014d64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014d68:	6013      	str	r3, [r2, #0]
 8014d6a:	e008      	b.n	8014d7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	015a      	lsls	r2, r3, #5
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	4413      	add	r3, r2
 8014d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d78:	461a      	mov	r2, r3
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	015a      	lsls	r2, r3, #5
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	4413      	add	r3, r2
 8014d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	015a      	lsls	r2, r3, #5
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	4413      	add	r3, r2
 8014d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014da2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	3301      	adds	r3, #1
 8014da8:	613b      	str	r3, [r7, #16]
 8014daa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014dae:	461a      	mov	r2, r3
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d3b5      	bcc.n	8014d22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014dbc:	691b      	ldr	r3, [r3, #16]
 8014dbe:	68fa      	ldr	r2, [r7, #12]
 8014dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014dc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014dd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d105      	bne.n	8014dec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	699b      	ldr	r3, [r3, #24]
 8014de4:	f043 0210 	orr.w	r2, r3, #16
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	699a      	ldr	r2, [r3, #24]
 8014df0:	4b0f      	ldr	r3, [pc, #60]	@ (8014e30 <USB_DevInit+0x2b4>)
 8014df2:	4313      	orrs	r3, r2
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014df8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d005      	beq.n	8014e0c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	699b      	ldr	r3, [r3, #24]
 8014e04:	f043 0208 	orr.w	r2, r3, #8
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014e0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014e10:	2b01      	cmp	r3, #1
 8014e12:	d105      	bne.n	8014e20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	699a      	ldr	r2, [r3, #24]
 8014e18:	4b06      	ldr	r3, [pc, #24]	@ (8014e34 <USB_DevInit+0x2b8>)
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	687a      	ldr	r2, [r7, #4]
 8014e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3718      	adds	r7, #24
 8014e26:	46bd      	mov	sp, r7
 8014e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e2c:	b004      	add	sp, #16
 8014e2e:	4770      	bx	lr
 8014e30:	803c3800 	.word	0x803c3800
 8014e34:	40000004 	.word	0x40000004

08014e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b085      	sub	sp, #20
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e42:	2300      	movs	r3, #0
 8014e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014e52:	d901      	bls.n	8014e58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014e54:	2303      	movs	r3, #3
 8014e56:	e01b      	b.n	8014e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	691b      	ldr	r3, [r3, #16]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	daf2      	bge.n	8014e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014e60:	2300      	movs	r3, #0
 8014e62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	019b      	lsls	r3, r3, #6
 8014e68:	f043 0220 	orr.w	r2, r3, #32
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	3301      	adds	r3, #1
 8014e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014e7c:	d901      	bls.n	8014e82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014e7e:	2303      	movs	r3, #3
 8014e80:	e006      	b.n	8014e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	691b      	ldr	r3, [r3, #16]
 8014e86:	f003 0320 	and.w	r3, r3, #32
 8014e8a:	2b20      	cmp	r3, #32
 8014e8c:	d0f0      	beq.n	8014e70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014e8e:	2300      	movs	r3, #0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3714      	adds	r7, #20
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014eb4:	d901      	bls.n	8014eba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	e018      	b.n	8014eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	691b      	ldr	r3, [r3, #16]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	daf2      	bge.n	8014ea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2210      	movs	r2, #16
 8014eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	3301      	adds	r3, #1
 8014ed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014ed8:	d901      	bls.n	8014ede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014eda:	2303      	movs	r3, #3
 8014edc:	e006      	b.n	8014eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	f003 0310 	and.w	r3, r3, #16
 8014ee6:	2b10      	cmp	r3, #16
 8014ee8:	d0f0      	beq.n	8014ecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014eea:	2300      	movs	r3, #0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3714      	adds	r7, #20
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b085      	sub	sp, #20
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	460b      	mov	r3, r1
 8014f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	78fb      	ldrb	r3, [r7, #3]
 8014f12:	68f9      	ldr	r1, [r7, #12]
 8014f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014f1c:	2300      	movs	r3, #0
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3714      	adds	r7, #20
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr

08014f2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014f2a:	b480      	push	{r7}
 8014f2c:	b087      	sub	sp, #28
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f3c:	689b      	ldr	r3, [r3, #8]
 8014f3e:	f003 0306 	and.w	r3, r3, #6
 8014f42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d102      	bne.n	8014f50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	75fb      	strb	r3, [r7, #23]
 8014f4e:	e00a      	b.n	8014f66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b02      	cmp	r3, #2
 8014f54:	d002      	beq.n	8014f5c <USB_GetDevSpeed+0x32>
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b06      	cmp	r3, #6
 8014f5a:	d102      	bne.n	8014f62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014f5c:	2302      	movs	r3, #2
 8014f5e:	75fb      	strb	r3, [r7, #23]
 8014f60:	e001      	b.n	8014f66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014f62:	230f      	movs	r3, #15
 8014f64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	371c      	adds	r7, #28
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b085      	sub	sp, #20
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	785b      	ldrb	r3, [r3, #1]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d139      	bne.n	8015004 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f96:	69da      	ldr	r2, [r3, #28]
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	f003 030f 	and.w	r3, r3, #15
 8014fa0:	2101      	movs	r1, #1
 8014fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	68f9      	ldr	r1, [r7, #12]
 8014faa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014fae:	4313      	orrs	r3, r2
 8014fb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	015a      	lsls	r2, r3, #5
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	4413      	add	r3, r2
 8014fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d153      	bne.n	8015070 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	015a      	lsls	r2, r3, #5
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	4413      	add	r3, r2
 8014fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	689b      	ldr	r3, [r3, #8]
 8014fda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	791b      	ldrb	r3, [r3, #4]
 8014fe2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fe4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	059b      	lsls	r3, r3, #22
 8014fea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fec:	431a      	orrs	r2, r3
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	0159      	lsls	r1, r3, #5
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	440b      	add	r3, r1
 8014ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4b20      	ldr	r3, [pc, #128]	@ (8015080 <USB_ActivateEndpoint+0x10c>)
 8014ffe:	4313      	orrs	r3, r2
 8015000:	600b      	str	r3, [r1, #0]
 8015002:	e035      	b.n	8015070 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801500a:	69da      	ldr	r2, [r3, #28]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	f003 030f 	and.w	r3, r3, #15
 8015014:	2101      	movs	r1, #1
 8015016:	fa01 f303 	lsl.w	r3, r1, r3
 801501a:	041b      	lsls	r3, r3, #16
 801501c:	68f9      	ldr	r1, [r7, #12]
 801501e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015022:	4313      	orrs	r3, r2
 8015024:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	015a      	lsls	r2, r3, #5
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	4413      	add	r3, r2
 801502e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015038:	2b00      	cmp	r3, #0
 801503a:	d119      	bne.n	8015070 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	015a      	lsls	r2, r3, #5
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4413      	add	r3, r2
 8015044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	689b      	ldr	r3, [r3, #8]
 801504e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	791b      	ldrb	r3, [r3, #4]
 8015056:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015058:	430b      	orrs	r3, r1
 801505a:	431a      	orrs	r2, r3
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	0159      	lsls	r1, r3, #5
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	440b      	add	r3, r1
 8015064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015068:	4619      	mov	r1, r3
 801506a:	4b05      	ldr	r3, [pc, #20]	@ (8015080 <USB_ActivateEndpoint+0x10c>)
 801506c:	4313      	orrs	r3, r2
 801506e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015070:	2300      	movs	r3, #0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3714      	adds	r7, #20
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	10008000 	.word	0x10008000

08015084 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015084:	b480      	push	{r7}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	785b      	ldrb	r3, [r3, #1]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d161      	bne.n	8015164 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	015a      	lsls	r2, r3, #5
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	4413      	add	r3, r2
 80150a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150b6:	d11f      	bne.n	80150f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	015a      	lsls	r2, r3, #5
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	4413      	add	r3, r2
 80150c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	0151      	lsls	r1, r2, #5
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	440a      	add	r2, r1
 80150ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80150d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	015a      	lsls	r2, r3, #5
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	0151      	lsls	r1, r2, #5
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	440a      	add	r2, r1
 80150ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80150f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	f003 030f 	and.w	r3, r3, #15
 8015108:	2101      	movs	r1, #1
 801510a:	fa01 f303 	lsl.w	r3, r1, r3
 801510e:	b29b      	uxth	r3, r3
 8015110:	43db      	mvns	r3, r3
 8015112:	68f9      	ldr	r1, [r7, #12]
 8015114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015118:	4013      	ands	r3, r2
 801511a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015122:	69da      	ldr	r2, [r3, #28]
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	f003 030f 	and.w	r3, r3, #15
 801512c:	2101      	movs	r1, #1
 801512e:	fa01 f303 	lsl.w	r3, r1, r3
 8015132:	b29b      	uxth	r3, r3
 8015134:	43db      	mvns	r3, r3
 8015136:	68f9      	ldr	r1, [r7, #12]
 8015138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801513c:	4013      	ands	r3, r2
 801513e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	015a      	lsls	r2, r3, #5
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	4413      	add	r3, r2
 8015148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	0159      	lsls	r1, r3, #5
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	440b      	add	r3, r1
 8015156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801515a:	4619      	mov	r1, r3
 801515c:	4b35      	ldr	r3, [pc, #212]	@ (8015234 <USB_DeactivateEndpoint+0x1b0>)
 801515e:	4013      	ands	r3, r2
 8015160:	600b      	str	r3, [r1, #0]
 8015162:	e060      	b.n	8015226 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	015a      	lsls	r2, r3, #5
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	4413      	add	r3, r2
 801516c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801517a:	d11f      	bne.n	80151bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	015a      	lsls	r2, r3, #5
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	4413      	add	r3, r2
 8015184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	68ba      	ldr	r2, [r7, #8]
 801518c:	0151      	lsls	r1, r2, #5
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	440a      	add	r2, r1
 8015192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015196:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801519a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	015a      	lsls	r2, r3, #5
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	0151      	lsls	r1, r2, #5
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	440a      	add	r2, r1
 80151b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80151ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	f003 030f 	and.w	r3, r3, #15
 80151cc:	2101      	movs	r1, #1
 80151ce:	fa01 f303 	lsl.w	r3, r1, r3
 80151d2:	041b      	lsls	r3, r3, #16
 80151d4:	43db      	mvns	r3, r3
 80151d6:	68f9      	ldr	r1, [r7, #12]
 80151d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80151dc:	4013      	ands	r3, r2
 80151de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151e6:	69da      	ldr	r2, [r3, #28]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	f003 030f 	and.w	r3, r3, #15
 80151f0:	2101      	movs	r1, #1
 80151f2:	fa01 f303 	lsl.w	r3, r1, r3
 80151f6:	041b      	lsls	r3, r3, #16
 80151f8:	43db      	mvns	r3, r3
 80151fa:	68f9      	ldr	r1, [r7, #12]
 80151fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015200:	4013      	ands	r3, r2
 8015202:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	015a      	lsls	r2, r3, #5
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	4413      	add	r3, r2
 801520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	0159      	lsls	r1, r3, #5
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	440b      	add	r3, r1
 801521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801521e:	4619      	mov	r1, r3
 8015220:	4b05      	ldr	r3, [pc, #20]	@ (8015238 <USB_DeactivateEndpoint+0x1b4>)
 8015222:	4013      	ands	r3, r2
 8015224:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015226:	2300      	movs	r3, #0
}
 8015228:	4618      	mov	r0, r3
 801522a:	3714      	adds	r7, #20
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr
 8015234:	ec337800 	.word	0xec337800
 8015238:	eff37800 	.word	0xeff37800

0801523c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b08a      	sub	sp, #40	@ 0x28
 8015240:	af02      	add	r7, sp, #8
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	60b9      	str	r1, [r7, #8]
 8015246:	4613      	mov	r3, r2
 8015248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	785b      	ldrb	r3, [r3, #1]
 8015258:	2b01      	cmp	r3, #1
 801525a:	f040 8181 	bne.w	8015560 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d132      	bne.n	80152cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	015a      	lsls	r2, r3, #5
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	4413      	add	r3, r2
 801526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015272:	691a      	ldr	r2, [r3, #16]
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	0159      	lsls	r1, r3, #5
 8015278:	69fb      	ldr	r3, [r7, #28]
 801527a:	440b      	add	r3, r1
 801527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015280:	4619      	mov	r1, r3
 8015282:	4ba5      	ldr	r3, [pc, #660]	@ (8015518 <USB_EPStartXfer+0x2dc>)
 8015284:	4013      	ands	r3, r2
 8015286:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015288:	69bb      	ldr	r3, [r7, #24]
 801528a:	015a      	lsls	r2, r3, #5
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	4413      	add	r3, r2
 8015290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015294:	691b      	ldr	r3, [r3, #16]
 8015296:	69ba      	ldr	r2, [r7, #24]
 8015298:	0151      	lsls	r1, r2, #5
 801529a:	69fa      	ldr	r2, [r7, #28]
 801529c:	440a      	add	r2, r1
 801529e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80152a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	015a      	lsls	r2, r3, #5
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	4413      	add	r3, r2
 80152b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152b4:	691a      	ldr	r2, [r3, #16]
 80152b6:	69bb      	ldr	r3, [r7, #24]
 80152b8:	0159      	lsls	r1, r3, #5
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	440b      	add	r3, r1
 80152be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152c2:	4619      	mov	r1, r3
 80152c4:	4b95      	ldr	r3, [pc, #596]	@ (801551c <USB_EPStartXfer+0x2e0>)
 80152c6:	4013      	ands	r3, r2
 80152c8:	610b      	str	r3, [r1, #16]
 80152ca:	e092      	b.n	80153f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	015a      	lsls	r2, r3, #5
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	4413      	add	r3, r2
 80152d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152d8:	691a      	ldr	r2, [r3, #16]
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	0159      	lsls	r1, r3, #5
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	440b      	add	r3, r1
 80152e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152e6:	4619      	mov	r1, r3
 80152e8:	4b8c      	ldr	r3, [pc, #560]	@ (801551c <USB_EPStartXfer+0x2e0>)
 80152ea:	4013      	ands	r3, r2
 80152ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	015a      	lsls	r2, r3, #5
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	4413      	add	r3, r2
 80152f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152fa:	691a      	ldr	r2, [r3, #16]
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	0159      	lsls	r1, r3, #5
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	440b      	add	r3, r1
 8015304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015308:	4619      	mov	r1, r3
 801530a:	4b83      	ldr	r3, [pc, #524]	@ (8015518 <USB_EPStartXfer+0x2dc>)
 801530c:	4013      	ands	r3, r2
 801530e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d11a      	bne.n	801534c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	691a      	ldr	r2, [r3, #16]
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	689b      	ldr	r3, [r3, #8]
 801531e:	429a      	cmp	r2, r3
 8015320:	d903      	bls.n	801532a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	689a      	ldr	r2, [r3, #8]
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	015a      	lsls	r2, r3, #5
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	4413      	add	r3, r2
 8015332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	69ba      	ldr	r2, [r7, #24]
 801533a:	0151      	lsls	r1, r2, #5
 801533c:	69fa      	ldr	r2, [r7, #28]
 801533e:	440a      	add	r2, r1
 8015340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015348:	6113      	str	r3, [r2, #16]
 801534a:	e01b      	b.n	8015384 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	015a      	lsls	r2, r3, #5
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	4413      	add	r3, r2
 8015354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015358:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	6919      	ldr	r1, [r3, #16]
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	689b      	ldr	r3, [r3, #8]
 8015362:	440b      	add	r3, r1
 8015364:	1e59      	subs	r1, r3, #1
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	689b      	ldr	r3, [r3, #8]
 801536a:	fbb1 f3f3 	udiv	r3, r1, r3
 801536e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015370:	4b6b      	ldr	r3, [pc, #428]	@ (8015520 <USB_EPStartXfer+0x2e4>)
 8015372:	400b      	ands	r3, r1
 8015374:	69b9      	ldr	r1, [r7, #24]
 8015376:	0148      	lsls	r0, r1, #5
 8015378:	69f9      	ldr	r1, [r7, #28]
 801537a:	4401      	add	r1, r0
 801537c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015380:	4313      	orrs	r3, r2
 8015382:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	015a      	lsls	r2, r3, #5
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	4413      	add	r3, r2
 801538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015390:	691a      	ldr	r2, [r3, #16]
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	691b      	ldr	r3, [r3, #16]
 8015396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801539a:	69b9      	ldr	r1, [r7, #24]
 801539c:	0148      	lsls	r0, r1, #5
 801539e:	69f9      	ldr	r1, [r7, #28]
 80153a0:	4401      	add	r1, r0
 80153a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80153a6:	4313      	orrs	r3, r2
 80153a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	791b      	ldrb	r3, [r3, #4]
 80153ae:	2b01      	cmp	r3, #1
 80153b0:	d11f      	bne.n	80153f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	015a      	lsls	r2, r3, #5
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	4413      	add	r3, r2
 80153ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153be:	691b      	ldr	r3, [r3, #16]
 80153c0:	69ba      	ldr	r2, [r7, #24]
 80153c2:	0151      	lsls	r1, r2, #5
 80153c4:	69fa      	ldr	r2, [r7, #28]
 80153c6:	440a      	add	r2, r1
 80153c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80153d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80153d2:	69bb      	ldr	r3, [r7, #24]
 80153d4:	015a      	lsls	r2, r3, #5
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	4413      	add	r3, r2
 80153da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153de:	691b      	ldr	r3, [r3, #16]
 80153e0:	69ba      	ldr	r2, [r7, #24]
 80153e2:	0151      	lsls	r1, r2, #5
 80153e4:	69fa      	ldr	r2, [r7, #28]
 80153e6:	440a      	add	r2, r1
 80153e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80153f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80153f2:	79fb      	ldrb	r3, [r7, #7]
 80153f4:	2b01      	cmp	r3, #1
 80153f6:	d14b      	bne.n	8015490 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	69db      	ldr	r3, [r3, #28]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d009      	beq.n	8015414 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	015a      	lsls	r2, r3, #5
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	4413      	add	r3, r2
 8015408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801540c:	461a      	mov	r2, r3
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	69db      	ldr	r3, [r3, #28]
 8015412:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	791b      	ldrb	r3, [r3, #4]
 8015418:	2b01      	cmp	r3, #1
 801541a:	d128      	bne.n	801546e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015422:	689b      	ldr	r3, [r3, #8]
 8015424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015428:	2b00      	cmp	r3, #0
 801542a:	d110      	bne.n	801544e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	015a      	lsls	r2, r3, #5
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	4413      	add	r3, r2
 8015434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	69ba      	ldr	r2, [r7, #24]
 801543c:	0151      	lsls	r1, r2, #5
 801543e:	69fa      	ldr	r2, [r7, #28]
 8015440:	440a      	add	r2, r1
 8015442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015446:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801544a:	6013      	str	r3, [r2, #0]
 801544c:	e00f      	b.n	801546e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801544e:	69bb      	ldr	r3, [r7, #24]
 8015450:	015a      	lsls	r2, r3, #5
 8015452:	69fb      	ldr	r3, [r7, #28]
 8015454:	4413      	add	r3, r2
 8015456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	69ba      	ldr	r2, [r7, #24]
 801545e:	0151      	lsls	r1, r2, #5
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	440a      	add	r2, r1
 8015464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801546c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	015a      	lsls	r2, r3, #5
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	4413      	add	r3, r2
 8015476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	69ba      	ldr	r2, [r7, #24]
 801547e:	0151      	lsls	r1, r2, #5
 8015480:	69fa      	ldr	r2, [r7, #28]
 8015482:	440a      	add	r2, r1
 8015484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015488:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801548c:	6013      	str	r3, [r2, #0]
 801548e:	e16a      	b.n	8015766 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	015a      	lsls	r2, r3, #5
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	4413      	add	r3, r2
 8015498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	69ba      	ldr	r2, [r7, #24]
 80154a0:	0151      	lsls	r1, r2, #5
 80154a2:	69fa      	ldr	r2, [r7, #28]
 80154a4:	440a      	add	r2, r1
 80154a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80154ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	791b      	ldrb	r3, [r3, #4]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d015      	beq.n	80154e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	691b      	ldr	r3, [r3, #16]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f000 8152 	beq.w	8015766 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	f003 030f 	and.w	r3, r3, #15
 80154d2:	2101      	movs	r1, #1
 80154d4:	fa01 f303 	lsl.w	r3, r1, r3
 80154d8:	69f9      	ldr	r1, [r7, #28]
 80154da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80154de:	4313      	orrs	r3, r2
 80154e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80154e2:	e140      	b.n	8015766 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154ea:	689b      	ldr	r3, [r3, #8]
 80154ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d117      	bne.n	8015524 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	015a      	lsls	r2, r3, #5
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	4413      	add	r3, r2
 80154fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	69ba      	ldr	r2, [r7, #24]
 8015504:	0151      	lsls	r1, r2, #5
 8015506:	69fa      	ldr	r2, [r7, #28]
 8015508:	440a      	add	r2, r1
 801550a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801550e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015512:	6013      	str	r3, [r2, #0]
 8015514:	e016      	b.n	8015544 <USB_EPStartXfer+0x308>
 8015516:	bf00      	nop
 8015518:	e007ffff 	.word	0xe007ffff
 801551c:	fff80000 	.word	0xfff80000
 8015520:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	015a      	lsls	r2, r3, #5
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	4413      	add	r3, r2
 801552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	69ba      	ldr	r2, [r7, #24]
 8015534:	0151      	lsls	r1, r2, #5
 8015536:	69fa      	ldr	r2, [r7, #28]
 8015538:	440a      	add	r2, r1
 801553a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015542:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	68d9      	ldr	r1, [r3, #12]
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	781a      	ldrb	r2, [r3, #0]
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	691b      	ldr	r3, [r3, #16]
 8015550:	b298      	uxth	r0, r3
 8015552:	79fb      	ldrb	r3, [r7, #7]
 8015554:	9300      	str	r3, [sp, #0]
 8015556:	4603      	mov	r3, r0
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f000 f9b9 	bl	80158d0 <USB_WritePacket>
 801555e:	e102      	b.n	8015766 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015560:	69bb      	ldr	r3, [r7, #24]
 8015562:	015a      	lsls	r2, r3, #5
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	4413      	add	r3, r2
 8015568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801556c:	691a      	ldr	r2, [r3, #16]
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	0159      	lsls	r1, r3, #5
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	440b      	add	r3, r1
 8015576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801557a:	4619      	mov	r1, r3
 801557c:	4b7c      	ldr	r3, [pc, #496]	@ (8015770 <USB_EPStartXfer+0x534>)
 801557e:	4013      	ands	r3, r2
 8015580:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	015a      	lsls	r2, r3, #5
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	4413      	add	r3, r2
 801558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801558e:	691a      	ldr	r2, [r3, #16]
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	0159      	lsls	r1, r3, #5
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	440b      	add	r3, r1
 8015598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801559c:	4619      	mov	r1, r3
 801559e:	4b75      	ldr	r3, [pc, #468]	@ (8015774 <USB_EPStartXfer+0x538>)
 80155a0:	4013      	ands	r3, r2
 80155a2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d12f      	bne.n	801560a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	691b      	ldr	r3, [r3, #16]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d003      	beq.n	80155ba <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	689a      	ldr	r2, [r3, #8]
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	689a      	ldr	r2, [r3, #8]
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	015a      	lsls	r2, r3, #5
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	4413      	add	r3, r2
 80155ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155ce:	691a      	ldr	r2, [r3, #16]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	6a1b      	ldr	r3, [r3, #32]
 80155d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80155d8:	69b9      	ldr	r1, [r7, #24]
 80155da:	0148      	lsls	r0, r1, #5
 80155dc:	69f9      	ldr	r1, [r7, #28]
 80155de:	4401      	add	r1, r0
 80155e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80155e4:	4313      	orrs	r3, r2
 80155e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	015a      	lsls	r2, r3, #5
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	4413      	add	r3, r2
 80155f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155f4:	691b      	ldr	r3, [r3, #16]
 80155f6:	69ba      	ldr	r2, [r7, #24]
 80155f8:	0151      	lsls	r1, r2, #5
 80155fa:	69fa      	ldr	r2, [r7, #28]
 80155fc:	440a      	add	r2, r1
 80155fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015606:	6113      	str	r3, [r2, #16]
 8015608:	e05f      	b.n	80156ca <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	691b      	ldr	r3, [r3, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d123      	bne.n	801565a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	015a      	lsls	r2, r3, #5
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	4413      	add	r3, r2
 801561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801561e:	691a      	ldr	r2, [r3, #16]
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015628:	69b9      	ldr	r1, [r7, #24]
 801562a:	0148      	lsls	r0, r1, #5
 801562c:	69f9      	ldr	r1, [r7, #28]
 801562e:	4401      	add	r1, r0
 8015630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015634:	4313      	orrs	r3, r2
 8015636:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	015a      	lsls	r2, r3, #5
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	4413      	add	r3, r2
 8015640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015644:	691b      	ldr	r3, [r3, #16]
 8015646:	69ba      	ldr	r2, [r7, #24]
 8015648:	0151      	lsls	r1, r2, #5
 801564a:	69fa      	ldr	r2, [r7, #28]
 801564c:	440a      	add	r2, r1
 801564e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015656:	6113      	str	r3, [r2, #16]
 8015658:	e037      	b.n	80156ca <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	691a      	ldr	r2, [r3, #16]
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	689b      	ldr	r3, [r3, #8]
 8015662:	4413      	add	r3, r2
 8015664:	1e5a      	subs	r2, r3, #1
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	689b      	ldr	r3, [r3, #8]
 801566a:	fbb2 f3f3 	udiv	r3, r2, r3
 801566e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	689b      	ldr	r3, [r3, #8]
 8015674:	8afa      	ldrh	r2, [r7, #22]
 8015676:	fb03 f202 	mul.w	r2, r3, r2
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	015a      	lsls	r2, r3, #5
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	4413      	add	r3, r2
 8015686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801568a:	691a      	ldr	r2, [r3, #16]
 801568c:	8afb      	ldrh	r3, [r7, #22]
 801568e:	04d9      	lsls	r1, r3, #19
 8015690:	4b39      	ldr	r3, [pc, #228]	@ (8015778 <USB_EPStartXfer+0x53c>)
 8015692:	400b      	ands	r3, r1
 8015694:	69b9      	ldr	r1, [r7, #24]
 8015696:	0148      	lsls	r0, r1, #5
 8015698:	69f9      	ldr	r1, [r7, #28]
 801569a:	4401      	add	r1, r0
 801569c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80156a0:	4313      	orrs	r3, r2
 80156a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	015a      	lsls	r2, r3, #5
 80156a8:	69fb      	ldr	r3, [r7, #28]
 80156aa:	4413      	add	r3, r2
 80156ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156b0:	691a      	ldr	r2, [r3, #16]
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	6a1b      	ldr	r3, [r3, #32]
 80156b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80156ba:	69b9      	ldr	r1, [r7, #24]
 80156bc:	0148      	lsls	r0, r1, #5
 80156be:	69f9      	ldr	r1, [r7, #28]
 80156c0:	4401      	add	r1, r0
 80156c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80156c6:	4313      	orrs	r3, r2
 80156c8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80156ca:	79fb      	ldrb	r3, [r7, #7]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d10d      	bne.n	80156ec <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d009      	beq.n	80156ec <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	68d9      	ldr	r1, [r3, #12]
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	015a      	lsls	r2, r3, #5
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	4413      	add	r3, r2
 80156e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156e8:	460a      	mov	r2, r1
 80156ea:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	791b      	ldrb	r3, [r3, #4]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d128      	bne.n	8015746 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015700:	2b00      	cmp	r3, #0
 8015702:	d110      	bne.n	8015726 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015704:	69bb      	ldr	r3, [r7, #24]
 8015706:	015a      	lsls	r2, r3, #5
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	4413      	add	r3, r2
 801570c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	69ba      	ldr	r2, [r7, #24]
 8015714:	0151      	lsls	r1, r2, #5
 8015716:	69fa      	ldr	r2, [r7, #28]
 8015718:	440a      	add	r2, r1
 801571a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801571e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015722:	6013      	str	r3, [r2, #0]
 8015724:	e00f      	b.n	8015746 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015726:	69bb      	ldr	r3, [r7, #24]
 8015728:	015a      	lsls	r2, r3, #5
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	4413      	add	r3, r2
 801572e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	69ba      	ldr	r2, [r7, #24]
 8015736:	0151      	lsls	r1, r2, #5
 8015738:	69fa      	ldr	r2, [r7, #28]
 801573a:	440a      	add	r2, r1
 801573c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015744:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	015a      	lsls	r2, r3, #5
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	4413      	add	r3, r2
 801574e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	69ba      	ldr	r2, [r7, #24]
 8015756:	0151      	lsls	r1, r2, #5
 8015758:	69fa      	ldr	r2, [r7, #28]
 801575a:	440a      	add	r2, r1
 801575c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015760:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015764:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015766:	2300      	movs	r3, #0
}
 8015768:	4618      	mov	r0, r3
 801576a:	3720      	adds	r7, #32
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	fff80000 	.word	0xfff80000
 8015774:	e007ffff 	.word	0xe007ffff
 8015778:	1ff80000 	.word	0x1ff80000

0801577c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801577c:	b480      	push	{r7}
 801577e:	b087      	sub	sp, #28
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015786:	2300      	movs	r3, #0
 8015788:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801578a:	2300      	movs	r3, #0
 801578c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	785b      	ldrb	r3, [r3, #1]
 8015796:	2b01      	cmp	r3, #1
 8015798:	d14a      	bne.n	8015830 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	015a      	lsls	r2, r3, #5
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	4413      	add	r3, r2
 80157a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80157ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80157b2:	f040 8086 	bne.w	80158c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	015a      	lsls	r2, r3, #5
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	4413      	add	r3, r2
 80157c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	683a      	ldr	r2, [r7, #0]
 80157c8:	7812      	ldrb	r2, [r2, #0]
 80157ca:	0151      	lsls	r1, r2, #5
 80157cc:	693a      	ldr	r2, [r7, #16]
 80157ce:	440a      	add	r2, r1
 80157d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80157d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	015a      	lsls	r2, r3, #5
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	4413      	add	r3, r2
 80157e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	683a      	ldr	r2, [r7, #0]
 80157ec:	7812      	ldrb	r2, [r2, #0]
 80157ee:	0151      	lsls	r1, r2, #5
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	440a      	add	r2, r1
 80157f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80157fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	3301      	adds	r3, #1
 8015802:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	f242 7210 	movw	r2, #10000	@ 0x2710
 801580a:	4293      	cmp	r3, r2
 801580c:	d902      	bls.n	8015814 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801580e:	2301      	movs	r3, #1
 8015810:	75fb      	strb	r3, [r7, #23]
          break;
 8015812:	e056      	b.n	80158c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	015a      	lsls	r2, r3, #5
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	4413      	add	r3, r2
 801581e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801582c:	d0e7      	beq.n	80157fe <USB_EPStopXfer+0x82>
 801582e:	e048      	b.n	80158c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	015a      	lsls	r2, r3, #5
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	4413      	add	r3, r2
 801583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015848:	d13b      	bne.n	80158c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	015a      	lsls	r2, r3, #5
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	4413      	add	r3, r2
 8015854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	683a      	ldr	r2, [r7, #0]
 801585c:	7812      	ldrb	r2, [r2, #0]
 801585e:	0151      	lsls	r1, r2, #5
 8015860:	693a      	ldr	r2, [r7, #16]
 8015862:	440a      	add	r2, r1
 8015864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015868:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801586c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	015a      	lsls	r2, r3, #5
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	4413      	add	r3, r2
 8015878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	7812      	ldrb	r2, [r2, #0]
 8015882:	0151      	lsls	r1, r2, #5
 8015884:	693a      	ldr	r2, [r7, #16]
 8015886:	440a      	add	r2, r1
 8015888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801588c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	3301      	adds	r3, #1
 8015896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801589e:	4293      	cmp	r3, r2
 80158a0:	d902      	bls.n	80158a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80158a2:	2301      	movs	r3, #1
 80158a4:	75fb      	strb	r3, [r7, #23]
          break;
 80158a6:	e00c      	b.n	80158c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	015a      	lsls	r2, r3, #5
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	4413      	add	r3, r2
 80158b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80158bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80158c0:	d0e7      	beq.n	8015892 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	371c      	adds	r7, #28
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b089      	sub	sp, #36	@ 0x24
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	4611      	mov	r1, r2
 80158dc:	461a      	mov	r2, r3
 80158de:	460b      	mov	r3, r1
 80158e0:	71fb      	strb	r3, [r7, #7]
 80158e2:	4613      	mov	r3, r2
 80158e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80158ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d123      	bne.n	801593e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80158f6:	88bb      	ldrh	r3, [r7, #4]
 80158f8:	3303      	adds	r3, #3
 80158fa:	089b      	lsrs	r3, r3, #2
 80158fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80158fe:	2300      	movs	r3, #0
 8015900:	61bb      	str	r3, [r7, #24]
 8015902:	e018      	b.n	8015936 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015904:	79fb      	ldrb	r3, [r7, #7]
 8015906:	031a      	lsls	r2, r3, #12
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	4413      	add	r3, r2
 801590c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015910:	461a      	mov	r2, r3
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	3301      	adds	r3, #1
 801591c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	3301      	adds	r3, #1
 8015922:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015924:	69fb      	ldr	r3, [r7, #28]
 8015926:	3301      	adds	r3, #1
 8015928:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	3301      	adds	r3, #1
 801592e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	3301      	adds	r3, #1
 8015934:	61bb      	str	r3, [r7, #24]
 8015936:	69ba      	ldr	r2, [r7, #24]
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	429a      	cmp	r2, r3
 801593c:	d3e2      	bcc.n	8015904 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801593e:	2300      	movs	r3, #0
}
 8015940:	4618      	mov	r0, r3
 8015942:	3724      	adds	r7, #36	@ 0x24
 8015944:	46bd      	mov	sp, r7
 8015946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594a:	4770      	bx	lr

0801594c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801594c:	b480      	push	{r7}
 801594e:	b08b      	sub	sp, #44	@ 0x2c
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	4613      	mov	r3, r2
 8015958:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015962:	88fb      	ldrh	r3, [r7, #6]
 8015964:	089b      	lsrs	r3, r3, #2
 8015966:	b29b      	uxth	r3, r3
 8015968:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801596a:	88fb      	ldrh	r3, [r7, #6]
 801596c:	f003 0303 	and.w	r3, r3, #3
 8015970:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015972:	2300      	movs	r3, #0
 8015974:	623b      	str	r3, [r7, #32]
 8015976:	e014      	b.n	80159a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015978:	69bb      	ldr	r3, [r7, #24]
 801597a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015982:	601a      	str	r2, [r3, #0]
    pDest++;
 8015984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015986:	3301      	adds	r3, #1
 8015988:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598c:	3301      	adds	r3, #1
 801598e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015992:	3301      	adds	r3, #1
 8015994:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015998:	3301      	adds	r3, #1
 801599a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801599c:	6a3b      	ldr	r3, [r7, #32]
 801599e:	3301      	adds	r3, #1
 80159a0:	623b      	str	r3, [r7, #32]
 80159a2:	6a3a      	ldr	r2, [r7, #32]
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d3e6      	bcc.n	8015978 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80159aa:	8bfb      	ldrh	r3, [r7, #30]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d01e      	beq.n	80159ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80159b0:	2300      	movs	r3, #0
 80159b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159ba:	461a      	mov	r2, r3
 80159bc:	f107 0310 	add.w	r3, r7, #16
 80159c0:	6812      	ldr	r2, [r2, #0]
 80159c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80159c4:	693a      	ldr	r2, [r7, #16]
 80159c6:	6a3b      	ldr	r3, [r7, #32]
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	fa22 f303 	lsr.w	r3, r2, r3
 80159d0:	b2da      	uxtb	r2, r3
 80159d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d4:	701a      	strb	r2, [r3, #0]
      i++;
 80159d6:	6a3b      	ldr	r3, [r7, #32]
 80159d8:	3301      	adds	r3, #1
 80159da:	623b      	str	r3, [r7, #32]
      pDest++;
 80159dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159de:	3301      	adds	r3, #1
 80159e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80159e2:	8bfb      	ldrh	r3, [r7, #30]
 80159e4:	3b01      	subs	r3, #1
 80159e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80159e8:	8bfb      	ldrh	r3, [r7, #30]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d1ea      	bne.n	80159c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80159ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	372c      	adds	r7, #44	@ 0x2c
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b085      	sub	sp, #20
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	785b      	ldrb	r3, [r3, #1]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d12c      	bne.n	8015a72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	015a      	lsls	r2, r3, #5
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	4413      	add	r3, r2
 8015a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	db12      	blt.n	8015a50 <USB_EPSetStall+0x54>
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d00f      	beq.n	8015a50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	015a      	lsls	r2, r3, #5
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	4413      	add	r3, r2
 8015a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	0151      	lsls	r1, r2, #5
 8015a42:	68fa      	ldr	r2, [r7, #12]
 8015a44:	440a      	add	r2, r1
 8015a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015a4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	015a      	lsls	r2, r3, #5
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	4413      	add	r3, r2
 8015a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	68ba      	ldr	r2, [r7, #8]
 8015a60:	0151      	lsls	r1, r2, #5
 8015a62:	68fa      	ldr	r2, [r7, #12]
 8015a64:	440a      	add	r2, r1
 8015a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015a6e:	6013      	str	r3, [r2, #0]
 8015a70:	e02b      	b.n	8015aca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	015a      	lsls	r2, r3, #5
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	4413      	add	r3, r2
 8015a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	db12      	blt.n	8015aaa <USB_EPSetStall+0xae>
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d00f      	beq.n	8015aaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	015a      	lsls	r2, r3, #5
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	4413      	add	r3, r2
 8015a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	0151      	lsls	r1, r2, #5
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	440a      	add	r2, r1
 8015aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015aa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015aa8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	015a      	lsls	r2, r3, #5
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	68ba      	ldr	r2, [r7, #8]
 8015aba:	0151      	lsls	r1, r2, #5
 8015abc:	68fa      	ldr	r2, [r7, #12]
 8015abe:	440a      	add	r2, r1
 8015ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ac4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015ac8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015aca:	2300      	movs	r3, #0
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3714      	adds	r7, #20
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr

08015ad8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015ad8:	b480      	push	{r7}
 8015ada:	b085      	sub	sp, #20
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	785b      	ldrb	r3, [r3, #1]
 8015af0:	2b01      	cmp	r3, #1
 8015af2:	d128      	bne.n	8015b46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	015a      	lsls	r2, r3, #5
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	4413      	add	r3, r2
 8015afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	68ba      	ldr	r2, [r7, #8]
 8015b04:	0151      	lsls	r1, r2, #5
 8015b06:	68fa      	ldr	r2, [r7, #12]
 8015b08:	440a      	add	r2, r1
 8015b0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	791b      	ldrb	r3, [r3, #4]
 8015b18:	2b03      	cmp	r3, #3
 8015b1a:	d003      	beq.n	8015b24 <USB_EPClearStall+0x4c>
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	791b      	ldrb	r3, [r3, #4]
 8015b20:	2b02      	cmp	r3, #2
 8015b22:	d138      	bne.n	8015b96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	015a      	lsls	r2, r3, #5
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	68ba      	ldr	r2, [r7, #8]
 8015b34:	0151      	lsls	r1, r2, #5
 8015b36:	68fa      	ldr	r2, [r7, #12]
 8015b38:	440a      	add	r2, r1
 8015b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b42:	6013      	str	r3, [r2, #0]
 8015b44:	e027      	b.n	8015b96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	015a      	lsls	r2, r3, #5
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	68ba      	ldr	r2, [r7, #8]
 8015b56:	0151      	lsls	r1, r2, #5
 8015b58:	68fa      	ldr	r2, [r7, #12]
 8015b5a:	440a      	add	r2, r1
 8015b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	791b      	ldrb	r3, [r3, #4]
 8015b6a:	2b03      	cmp	r3, #3
 8015b6c:	d003      	beq.n	8015b76 <USB_EPClearStall+0x9e>
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	791b      	ldrb	r3, [r3, #4]
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d10f      	bne.n	8015b96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	015a      	lsls	r2, r3, #5
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68ba      	ldr	r2, [r7, #8]
 8015b86:	0151      	lsls	r1, r2, #5
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	440a      	add	r2, r1
 8015b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015b96:	2300      	movs	r3, #0
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3714      	adds	r7, #20
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b085      	sub	sp, #20
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	460b      	mov	r3, r1
 8015bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	68fa      	ldr	r2, [r7, #12]
 8015bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015bc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015bc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	78fb      	ldrb	r3, [r7, #3]
 8015bd2:	011b      	lsls	r3, r3, #4
 8015bd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015bd8:	68f9      	ldr	r1, [r7, #12]
 8015bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015bde:	4313      	orrs	r3, r2
 8015be0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015be2:	2300      	movs	r3, #0
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3714      	adds	r7, #20
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b085      	sub	sp, #20
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c0a:	f023 0303 	bic.w	r3, r3, #3
 8015c0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c1e:	f023 0302 	bic.w	r3, r3, #2
 8015c22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c24:	2300      	movs	r3, #0
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3714      	adds	r7, #20
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr

08015c32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c32:	b480      	push	{r7}
 8015c34:	b085      	sub	sp, #20
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	68fa      	ldr	r2, [r7, #12]
 8015c48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c4c:	f023 0303 	bic.w	r3, r3, #3
 8015c50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	68fa      	ldr	r2, [r7, #12]
 8015c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c60:	f043 0302 	orr.w	r3, r3, #2
 8015c64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c66:	2300      	movs	r3, #0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3714      	adds	r7, #20
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr

08015c74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015c74:	b480      	push	{r7}
 8015c76:	b085      	sub	sp, #20
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	695b      	ldr	r3, [r3, #20]
 8015c80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	699b      	ldr	r3, [r3, #24]
 8015c86:	68fa      	ldr	r2, [r7, #12]
 8015c88:	4013      	ands	r3, r2
 8015c8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3714      	adds	r7, #20
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr

08015c9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c9a:	b480      	push	{r7}
 8015c9c:	b085      	sub	sp, #20
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cac:	699b      	ldr	r3, [r3, #24]
 8015cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cb6:	69db      	ldr	r3, [r3, #28]
 8015cb8:	68ba      	ldr	r2, [r7, #8]
 8015cba:	4013      	ands	r3, r2
 8015cbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	0c1b      	lsrs	r3, r3, #16
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3714      	adds	r7, #20
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr

08015cce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015cce:	b480      	push	{r7}
 8015cd0:	b085      	sub	sp, #20
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ce0:	699b      	ldr	r3, [r3, #24]
 8015ce2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cea:	69db      	ldr	r3, [r3, #28]
 8015cec:	68ba      	ldr	r2, [r7, #8]
 8015cee:	4013      	ands	r3, r2
 8015cf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	b29b      	uxth	r3, r3
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3714      	adds	r7, #20
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d00:	4770      	bx	lr

08015d02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d02:	b480      	push	{r7}
 8015d04:	b085      	sub	sp, #20
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	6078      	str	r0, [r7, #4]
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015d12:	78fb      	ldrb	r3, [r7, #3]
 8015d14:	015a      	lsls	r2, r3, #5
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	4413      	add	r3, r2
 8015d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d28:	695b      	ldr	r3, [r3, #20]
 8015d2a:	68ba      	ldr	r2, [r7, #8]
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d30:	68bb      	ldr	r3, [r7, #8]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3714      	adds	r7, #20
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr

08015d3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d3e:	b480      	push	{r7}
 8015d40:	b087      	sub	sp, #28
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
 8015d46:	460b      	mov	r3, r1
 8015d48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d54:	691b      	ldr	r3, [r3, #16]
 8015d56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015d62:	78fb      	ldrb	r3, [r7, #3]
 8015d64:	f003 030f 	and.w	r3, r3, #15
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8015d6e:	01db      	lsls	r3, r3, #7
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	693a      	ldr	r2, [r7, #16]
 8015d74:	4313      	orrs	r3, r2
 8015d76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015d78:	78fb      	ldrb	r3, [r7, #3]
 8015d7a:	015a      	lsls	r2, r3, #5
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	4413      	add	r3, r2
 8015d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d84:	689b      	ldr	r3, [r3, #8]
 8015d86:	693a      	ldr	r2, [r7, #16]
 8015d88:	4013      	ands	r3, r2
 8015d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d8c:	68bb      	ldr	r3, [r7, #8]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	371c      	adds	r7, #28
 8015d92:	46bd      	mov	sp, r7
 8015d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d98:	4770      	bx	lr

08015d9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015d9a:	b480      	push	{r7}
 8015d9c:	b083      	sub	sp, #12
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	695b      	ldr	r3, [r3, #20]
 8015da6:	f003 0301 	and.w	r3, r3, #1
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	370c      	adds	r7, #12
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr
	...

08015db8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015db8:	b480      	push	{r7}
 8015dba:	b085      	sub	sp, #20
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	4b09      	ldr	r3, [pc, #36]	@ (8015dfc <USB_ActivateSetup+0x44>)
 8015dd6:	4013      	ands	r3, r2
 8015dd8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	68fa      	ldr	r2, [r7, #12]
 8015de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015dec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015dee:	2300      	movs	r3, #0
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3714      	adds	r7, #20
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr
 8015dfc:	fffff800 	.word	0xfffff800

08015e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015e00:	b480      	push	{r7}
 8015e02:	b087      	sub	sp, #28
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	460b      	mov	r3, r1
 8015e0a:	607a      	str	r2, [r7, #4]
 8015e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	333c      	adds	r3, #60	@ 0x3c
 8015e16:	3304      	adds	r3, #4
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	4a26      	ldr	r2, [pc, #152]	@ (8015eb8 <USB_EP0_OutStart+0xb8>)
 8015e20:	4293      	cmp	r3, r2
 8015e22:	d90a      	bls.n	8015e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015e34:	d101      	bne.n	8015e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e037      	b.n	8015eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e40:	461a      	mov	r2, r3
 8015e42:	2300      	movs	r3, #0
 8015e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e4c:	691b      	ldr	r3, [r3, #16]
 8015e4e:	697a      	ldr	r2, [r7, #20]
 8015e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e60:	691b      	ldr	r3, [r3, #16]
 8015e62:	697a      	ldr	r2, [r7, #20]
 8015e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e68:	f043 0318 	orr.w	r3, r3, #24
 8015e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e74:	691b      	ldr	r3, [r3, #16]
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015e82:	7afb      	ldrb	r3, [r7, #11]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	d10f      	bne.n	8015ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e8e:	461a      	mov	r2, r3
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	697a      	ldr	r2, [r7, #20]
 8015e9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ea2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	371c      	adds	r7, #28
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb4:	4770      	bx	lr
 8015eb6:	bf00      	nop
 8015eb8:	4f54300a 	.word	0x4f54300a

08015ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b085      	sub	sp, #20
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	3301      	adds	r3, #1
 8015ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015ed4:	d901      	bls.n	8015eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	e01b      	b.n	8015f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	691b      	ldr	r3, [r3, #16]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	daf2      	bge.n	8015ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	691b      	ldr	r3, [r3, #16]
 8015eea:	f043 0201 	orr.w	r2, r3, #1
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015efe:	d901      	bls.n	8015f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015f00:	2303      	movs	r3, #3
 8015f02:	e006      	b.n	8015f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	691b      	ldr	r3, [r3, #16]
 8015f08:	f003 0301 	and.w	r3, r3, #1
 8015f0c:	2b01      	cmp	r3, #1
 8015f0e:	d0f0      	beq.n	8015ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8015f10:	2300      	movs	r3, #0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3714      	adds	r7, #20
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr
	...

08015f20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	460b      	mov	r3, r1
 8015f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015f2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015f30:	f002 fcca 	bl	80188c8 <USBD_static_malloc>
 8015f34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d109      	bne.n	8015f50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	32b0      	adds	r2, #176	@ 0xb0
 8015f46:	2100      	movs	r1, #0
 8015f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015f4c:	2302      	movs	r3, #2
 8015f4e:	e0d4      	b.n	80160fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015f50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015f54:	2100      	movs	r1, #0
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	f004 f89f 	bl	801a09a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	32b0      	adds	r2, #176	@ 0xb0
 8015f66:	68f9      	ldr	r1, [r7, #12]
 8015f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	32b0      	adds	r2, #176	@ 0xb0
 8015f76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	7c1b      	ldrb	r3, [r3, #16]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d138      	bne.n	8015ffa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015f88:	4b5e      	ldr	r3, [pc, #376]	@ (8016104 <USBD_CDC_Init+0x1e4>)
 8015f8a:	7819      	ldrb	r1, [r3, #0]
 8015f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f90:	2202      	movs	r2, #2
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f002 fb75 	bl	8018682 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015f98:	4b5a      	ldr	r3, [pc, #360]	@ (8016104 <USBD_CDC_Init+0x1e4>)
 8015f9a:	781b      	ldrb	r3, [r3, #0]
 8015f9c:	f003 020f 	and.w	r2, r3, #15
 8015fa0:	6879      	ldr	r1, [r7, #4]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	009b      	lsls	r3, r3, #2
 8015fa6:	4413      	add	r3, r2
 8015fa8:	009b      	lsls	r3, r3, #2
 8015faa:	440b      	add	r3, r1
 8015fac:	3324      	adds	r3, #36	@ 0x24
 8015fae:	2201      	movs	r2, #1
 8015fb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015fb2:	4b55      	ldr	r3, [pc, #340]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 8015fb4:	7819      	ldrb	r1, [r3, #0]
 8015fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fba:	2202      	movs	r2, #2
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f002 fb60 	bl	8018682 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015fc2:	4b51      	ldr	r3, [pc, #324]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	f003 020f 	and.w	r2, r3, #15
 8015fca:	6879      	ldr	r1, [r7, #4]
 8015fcc:	4613      	mov	r3, r2
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	4413      	add	r3, r2
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	440b      	add	r3, r1
 8015fd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015fda:	2201      	movs	r2, #1
 8015fdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015fde:	4b4b      	ldr	r3, [pc, #300]	@ (801610c <USBD_CDC_Init+0x1ec>)
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	f003 020f 	and.w	r2, r3, #15
 8015fe6:	6879      	ldr	r1, [r7, #4]
 8015fe8:	4613      	mov	r3, r2
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	4413      	add	r3, r2
 8015fee:	009b      	lsls	r3, r3, #2
 8015ff0:	440b      	add	r3, r1
 8015ff2:	3326      	adds	r3, #38	@ 0x26
 8015ff4:	2210      	movs	r2, #16
 8015ff6:	801a      	strh	r2, [r3, #0]
 8015ff8:	e035      	b.n	8016066 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015ffa:	4b42      	ldr	r3, [pc, #264]	@ (8016104 <USBD_CDC_Init+0x1e4>)
 8015ffc:	7819      	ldrb	r1, [r3, #0]
 8015ffe:	2340      	movs	r3, #64	@ 0x40
 8016000:	2202      	movs	r2, #2
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f002 fb3d 	bl	8018682 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016008:	4b3e      	ldr	r3, [pc, #248]	@ (8016104 <USBD_CDC_Init+0x1e4>)
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	f003 020f 	and.w	r2, r3, #15
 8016010:	6879      	ldr	r1, [r7, #4]
 8016012:	4613      	mov	r3, r2
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	4413      	add	r3, r2
 8016018:	009b      	lsls	r3, r3, #2
 801601a:	440b      	add	r3, r1
 801601c:	3324      	adds	r3, #36	@ 0x24
 801601e:	2201      	movs	r2, #1
 8016020:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016022:	4b39      	ldr	r3, [pc, #228]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 8016024:	7819      	ldrb	r1, [r3, #0]
 8016026:	2340      	movs	r3, #64	@ 0x40
 8016028:	2202      	movs	r2, #2
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f002 fb29 	bl	8018682 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016030:	4b35      	ldr	r3, [pc, #212]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	f003 020f 	and.w	r2, r3, #15
 8016038:	6879      	ldr	r1, [r7, #4]
 801603a:	4613      	mov	r3, r2
 801603c:	009b      	lsls	r3, r3, #2
 801603e:	4413      	add	r3, r2
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	440b      	add	r3, r1
 8016044:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016048:	2201      	movs	r2, #1
 801604a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801604c:	4b2f      	ldr	r3, [pc, #188]	@ (801610c <USBD_CDC_Init+0x1ec>)
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	f003 020f 	and.w	r2, r3, #15
 8016054:	6879      	ldr	r1, [r7, #4]
 8016056:	4613      	mov	r3, r2
 8016058:	009b      	lsls	r3, r3, #2
 801605a:	4413      	add	r3, r2
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	440b      	add	r3, r1
 8016060:	3326      	adds	r3, #38	@ 0x26
 8016062:	2210      	movs	r2, #16
 8016064:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016066:	4b29      	ldr	r3, [pc, #164]	@ (801610c <USBD_CDC_Init+0x1ec>)
 8016068:	7819      	ldrb	r1, [r3, #0]
 801606a:	2308      	movs	r3, #8
 801606c:	2203      	movs	r2, #3
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f002 fb07 	bl	8018682 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8016074:	4b25      	ldr	r3, [pc, #148]	@ (801610c <USBD_CDC_Init+0x1ec>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	f003 020f 	and.w	r2, r3, #15
 801607c:	6879      	ldr	r1, [r7, #4]
 801607e:	4613      	mov	r3, r2
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	4413      	add	r3, r2
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	440b      	add	r3, r1
 8016088:	3324      	adds	r3, #36	@ 0x24
 801608a:	2201      	movs	r2, #1
 801608c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2200      	movs	r2, #0
 8016092:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	33b0      	adds	r3, #176	@ 0xb0
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	4413      	add	r3, r2
 80160a4:	685b      	ldr	r3, [r3, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2200      	movs	r2, #0
 80160b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d101      	bne.n	80160c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80160c4:	2302      	movs	r3, #2
 80160c6:	e018      	b.n	80160fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	7c1b      	ldrb	r3, [r3, #16]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d10a      	bne.n	80160e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160d0:	4b0d      	ldr	r3, [pc, #52]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 80160d2:	7819      	ldrb	r1, [r3, #0]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80160da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	f002 fbbe 	bl	8018860 <USBD_LL_PrepareReceive>
 80160e4:	e008      	b.n	80160f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160e6:	4b08      	ldr	r3, [pc, #32]	@ (8016108 <USBD_CDC_Init+0x1e8>)
 80160e8:	7819      	ldrb	r1, [r3, #0]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80160f0:	2340      	movs	r3, #64	@ 0x40
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f002 fbb4 	bl	8018860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80160f8:	2300      	movs	r3, #0
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3710      	adds	r7, #16
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	240000c7 	.word	0x240000c7
 8016108:	240000c8 	.word	0x240000c8
 801610c:	240000c9 	.word	0x240000c9

08016110 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	460b      	mov	r3, r1
 801611a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801611c:	4b3a      	ldr	r3, [pc, #232]	@ (8016208 <USBD_CDC_DeInit+0xf8>)
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	4619      	mov	r1, r3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f002 fad3 	bl	80186ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016128:	4b37      	ldr	r3, [pc, #220]	@ (8016208 <USBD_CDC_DeInit+0xf8>)
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	f003 020f 	and.w	r2, r3, #15
 8016130:	6879      	ldr	r1, [r7, #4]
 8016132:	4613      	mov	r3, r2
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	4413      	add	r3, r2
 8016138:	009b      	lsls	r3, r3, #2
 801613a:	440b      	add	r3, r1
 801613c:	3324      	adds	r3, #36	@ 0x24
 801613e:	2200      	movs	r2, #0
 8016140:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8016142:	4b32      	ldr	r3, [pc, #200]	@ (801620c <USBD_CDC_DeInit+0xfc>)
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	4619      	mov	r1, r3
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f002 fac0 	bl	80186ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801614e:	4b2f      	ldr	r3, [pc, #188]	@ (801620c <USBD_CDC_DeInit+0xfc>)
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	f003 020f 	and.w	r2, r3, #15
 8016156:	6879      	ldr	r1, [r7, #4]
 8016158:	4613      	mov	r3, r2
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	4413      	add	r3, r2
 801615e:	009b      	lsls	r3, r3, #2
 8016160:	440b      	add	r3, r1
 8016162:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016166:	2200      	movs	r2, #0
 8016168:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801616a:	4b29      	ldr	r3, [pc, #164]	@ (8016210 <USBD_CDC_DeInit+0x100>)
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	4619      	mov	r1, r3
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f002 faac 	bl	80186ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8016176:	4b26      	ldr	r3, [pc, #152]	@ (8016210 <USBD_CDC_DeInit+0x100>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	f003 020f 	and.w	r2, r3, #15
 801617e:	6879      	ldr	r1, [r7, #4]
 8016180:	4613      	mov	r3, r2
 8016182:	009b      	lsls	r3, r3, #2
 8016184:	4413      	add	r3, r2
 8016186:	009b      	lsls	r3, r3, #2
 8016188:	440b      	add	r3, r1
 801618a:	3324      	adds	r3, #36	@ 0x24
 801618c:	2200      	movs	r2, #0
 801618e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8016190:	4b1f      	ldr	r3, [pc, #124]	@ (8016210 <USBD_CDC_DeInit+0x100>)
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	f003 020f 	and.w	r2, r3, #15
 8016198:	6879      	ldr	r1, [r7, #4]
 801619a:	4613      	mov	r3, r2
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	4413      	add	r3, r2
 80161a0:	009b      	lsls	r3, r3, #2
 80161a2:	440b      	add	r3, r1
 80161a4:	3326      	adds	r3, #38	@ 0x26
 80161a6:	2200      	movs	r2, #0
 80161a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	32b0      	adds	r2, #176	@ 0xb0
 80161b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d01f      	beq.n	80161fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	33b0      	adds	r3, #176	@ 0xb0
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	4413      	add	r3, r2
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	32b0      	adds	r2, #176	@ 0xb0
 80161da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161de:	4618      	mov	r0, r3
 80161e0:	f002 fb80 	bl	80188e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	32b0      	adds	r2, #176	@ 0xb0
 80161ee:	2100      	movs	r1, #0
 80161f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80161fc:	2300      	movs	r3, #0
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3708      	adds	r7, #8
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}
 8016206:	bf00      	nop
 8016208:	240000c7 	.word	0x240000c7
 801620c:	240000c8 	.word	0x240000c8
 8016210:	240000c9 	.word	0x240000c9

08016214 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	32b0      	adds	r2, #176	@ 0xb0
 8016228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801622c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801622e:	2300      	movs	r3, #0
 8016230:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016232:	2300      	movs	r3, #0
 8016234:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016236:	2300      	movs	r3, #0
 8016238:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d101      	bne.n	8016244 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016240:	2303      	movs	r3, #3
 8016242:	e0bf      	b.n	80163c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801624c:	2b00      	cmp	r3, #0
 801624e:	d050      	beq.n	80162f2 <USBD_CDC_Setup+0xde>
 8016250:	2b20      	cmp	r3, #32
 8016252:	f040 80af 	bne.w	80163b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	88db      	ldrh	r3, [r3, #6]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d03a      	beq.n	80162d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	b25b      	sxtb	r3, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	da1b      	bge.n	80162a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	33b0      	adds	r3, #176	@ 0xb0
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	4413      	add	r3, r2
 8016276:	685b      	ldr	r3, [r3, #4]
 8016278:	689b      	ldr	r3, [r3, #8]
 801627a:	683a      	ldr	r2, [r7, #0]
 801627c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801627e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	88d2      	ldrh	r2, [r2, #6]
 8016284:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	88db      	ldrh	r3, [r3, #6]
 801628a:	2b07      	cmp	r3, #7
 801628c:	bf28      	it	cs
 801628e:	2307      	movcs	r3, #7
 8016290:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	89fa      	ldrh	r2, [r7, #14]
 8016296:	4619      	mov	r1, r3
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f001 fdbd 	bl	8017e18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801629e:	e090      	b.n	80163c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	785a      	ldrb	r2, [r3, #1]
 80162a4:	693b      	ldr	r3, [r7, #16]
 80162a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	88db      	ldrh	r3, [r3, #6]
 80162ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80162b0:	d803      	bhi.n	80162ba <USBD_CDC_Setup+0xa6>
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	88db      	ldrh	r3, [r3, #6]
 80162b6:	b2da      	uxtb	r2, r3
 80162b8:	e000      	b.n	80162bc <USBD_CDC_Setup+0xa8>
 80162ba:	2240      	movs	r2, #64	@ 0x40
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80162c2:	6939      	ldr	r1, [r7, #16]
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80162ca:	461a      	mov	r2, r3
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f001 fdcf 	bl	8017e70 <USBD_CtlPrepareRx>
      break;
 80162d2:	e076      	b.n	80163c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	33b0      	adds	r3, #176	@ 0xb0
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	4413      	add	r3, r2
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	689b      	ldr	r3, [r3, #8]
 80162e6:	683a      	ldr	r2, [r7, #0]
 80162e8:	7850      	ldrb	r0, [r2, #1]
 80162ea:	2200      	movs	r2, #0
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	4798      	blx	r3
      break;
 80162f0:	e067      	b.n	80163c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	785b      	ldrb	r3, [r3, #1]
 80162f6:	2b0b      	cmp	r3, #11
 80162f8:	d851      	bhi.n	801639e <USBD_CDC_Setup+0x18a>
 80162fa:	a201      	add	r2, pc, #4	@ (adr r2, 8016300 <USBD_CDC_Setup+0xec>)
 80162fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016300:	08016331 	.word	0x08016331
 8016304:	080163ad 	.word	0x080163ad
 8016308:	0801639f 	.word	0x0801639f
 801630c:	0801639f 	.word	0x0801639f
 8016310:	0801639f 	.word	0x0801639f
 8016314:	0801639f 	.word	0x0801639f
 8016318:	0801639f 	.word	0x0801639f
 801631c:	0801639f 	.word	0x0801639f
 8016320:	0801639f 	.word	0x0801639f
 8016324:	0801639f 	.word	0x0801639f
 8016328:	0801635b 	.word	0x0801635b
 801632c:	08016385 	.word	0x08016385
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016336:	b2db      	uxtb	r3, r3
 8016338:	2b03      	cmp	r3, #3
 801633a:	d107      	bne.n	801634c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801633c:	f107 030a 	add.w	r3, r7, #10
 8016340:	2202      	movs	r2, #2
 8016342:	4619      	mov	r1, r3
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f001 fd67 	bl	8017e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801634a:	e032      	b.n	80163b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801634c:	6839      	ldr	r1, [r7, #0]
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f001 fce5 	bl	8017d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8016354:	2303      	movs	r3, #3
 8016356:	75fb      	strb	r3, [r7, #23]
          break;
 8016358:	e02b      	b.n	80163b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b03      	cmp	r3, #3
 8016364:	d107      	bne.n	8016376 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016366:	f107 030d 	add.w	r3, r7, #13
 801636a:	2201      	movs	r2, #1
 801636c:	4619      	mov	r1, r3
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f001 fd52 	bl	8017e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016374:	e01d      	b.n	80163b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016376:	6839      	ldr	r1, [r7, #0]
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f001 fcd0 	bl	8017d1e <USBD_CtlError>
            ret = USBD_FAIL;
 801637e:	2303      	movs	r3, #3
 8016380:	75fb      	strb	r3, [r7, #23]
          break;
 8016382:	e016      	b.n	80163b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801638a:	b2db      	uxtb	r3, r3
 801638c:	2b03      	cmp	r3, #3
 801638e:	d00f      	beq.n	80163b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016390:	6839      	ldr	r1, [r7, #0]
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f001 fcc3 	bl	8017d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8016398:	2303      	movs	r3, #3
 801639a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801639c:	e008      	b.n	80163b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f001 fcbc 	bl	8017d1e <USBD_CtlError>
          ret = USBD_FAIL;
 80163a6:	2303      	movs	r3, #3
 80163a8:	75fb      	strb	r3, [r7, #23]
          break;
 80163aa:	e002      	b.n	80163b2 <USBD_CDC_Setup+0x19e>
          break;
 80163ac:	bf00      	nop
 80163ae:	e008      	b.n	80163c2 <USBD_CDC_Setup+0x1ae>
          break;
 80163b0:	bf00      	nop
      }
      break;
 80163b2:	e006      	b.n	80163c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80163b4:	6839      	ldr	r1, [r7, #0]
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f001 fcb1 	bl	8017d1e <USBD_CtlError>
      ret = USBD_FAIL;
 80163bc:	2303      	movs	r3, #3
 80163be:	75fb      	strb	r3, [r7, #23]
      break;
 80163c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80163c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3718      	adds	r7, #24
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	460b      	mov	r3, r1
 80163d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80163de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	32b0      	adds	r2, #176	@ 0xb0
 80163ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d101      	bne.n	80163f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80163f2:	2303      	movs	r3, #3
 80163f4:	e065      	b.n	80164c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	32b0      	adds	r2, #176	@ 0xb0
 8016400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016404:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016406:	78fb      	ldrb	r3, [r7, #3]
 8016408:	f003 020f 	and.w	r2, r3, #15
 801640c:	6879      	ldr	r1, [r7, #4]
 801640e:	4613      	mov	r3, r2
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	4413      	add	r3, r2
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	440b      	add	r3, r1
 8016418:	3318      	adds	r3, #24
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d02f      	beq.n	8016480 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016420:	78fb      	ldrb	r3, [r7, #3]
 8016422:	f003 020f 	and.w	r2, r3, #15
 8016426:	6879      	ldr	r1, [r7, #4]
 8016428:	4613      	mov	r3, r2
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	4413      	add	r3, r2
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	440b      	add	r3, r1
 8016432:	3318      	adds	r3, #24
 8016434:	681a      	ldr	r2, [r3, #0]
 8016436:	78fb      	ldrb	r3, [r7, #3]
 8016438:	f003 010f 	and.w	r1, r3, #15
 801643c:	68f8      	ldr	r0, [r7, #12]
 801643e:	460b      	mov	r3, r1
 8016440:	00db      	lsls	r3, r3, #3
 8016442:	440b      	add	r3, r1
 8016444:	009b      	lsls	r3, r3, #2
 8016446:	4403      	add	r3, r0
 8016448:	331c      	adds	r3, #28
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016450:	fb01 f303 	mul.w	r3, r1, r3
 8016454:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016456:	2b00      	cmp	r3, #0
 8016458:	d112      	bne.n	8016480 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801645a:	78fb      	ldrb	r3, [r7, #3]
 801645c:	f003 020f 	and.w	r2, r3, #15
 8016460:	6879      	ldr	r1, [r7, #4]
 8016462:	4613      	mov	r3, r2
 8016464:	009b      	lsls	r3, r3, #2
 8016466:	4413      	add	r3, r2
 8016468:	009b      	lsls	r3, r3, #2
 801646a:	440b      	add	r3, r1
 801646c:	3318      	adds	r3, #24
 801646e:	2200      	movs	r2, #0
 8016470:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016472:	78f9      	ldrb	r1, [r7, #3]
 8016474:	2300      	movs	r3, #0
 8016476:	2200      	movs	r2, #0
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f002 f9d0 	bl	801881e <USBD_LL_Transmit>
 801647e:	e01f      	b.n	80164c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	2200      	movs	r2, #0
 8016484:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	33b0      	adds	r3, #176	@ 0xb0
 8016492:	009b      	lsls	r3, r3, #2
 8016494:	4413      	add	r3, r2
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	691b      	ldr	r3, [r3, #16]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d010      	beq.n	80164c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80164a4:	687a      	ldr	r2, [r7, #4]
 80164a6:	33b0      	adds	r3, #176	@ 0xb0
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	4413      	add	r3, r2
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	691b      	ldr	r3, [r3, #16]
 80164b0:	68ba      	ldr	r2, [r7, #8]
 80164b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80164bc:	78fa      	ldrb	r2, [r7, #3]
 80164be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3710      	adds	r7, #16
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}

080164ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b084      	sub	sp, #16
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	6078      	str	r0, [r7, #4]
 80164d2:	460b      	mov	r3, r1
 80164d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	32b0      	adds	r2, #176	@ 0xb0
 80164e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	32b0      	adds	r2, #176	@ 0xb0
 80164f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d101      	bne.n	80164fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80164f8:	2303      	movs	r3, #3
 80164fa:	e01a      	b.n	8016532 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80164fc:	78fb      	ldrb	r3, [r7, #3]
 80164fe:	4619      	mov	r1, r3
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f002 f9ce 	bl	80188a2 <USBD_LL_GetRxDataSize>
 8016506:	4602      	mov	r2, r0
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	33b0      	adds	r3, #176	@ 0xb0
 8016518:	009b      	lsls	r3, r3, #2
 801651a:	4413      	add	r3, r2
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	68fa      	ldr	r2, [r7, #12]
 8016522:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016526:	68fa      	ldr	r2, [r7, #12]
 8016528:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801652c:	4611      	mov	r1, r2
 801652e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016530:	2300      	movs	r3, #0
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}

0801653a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801653a:	b580      	push	{r7, lr}
 801653c:	b084      	sub	sp, #16
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	32b0      	adds	r2, #176	@ 0xb0
 801654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016550:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d101      	bne.n	801655c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016558:	2303      	movs	r3, #3
 801655a:	e024      	b.n	80165a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	33b0      	adds	r3, #176	@ 0xb0
 8016566:	009b      	lsls	r3, r3, #2
 8016568:	4413      	add	r3, r2
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d019      	beq.n	80165a4 <USBD_CDC_EP0_RxReady+0x6a>
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016576:	2bff      	cmp	r3, #255	@ 0xff
 8016578:	d014      	beq.n	80165a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	33b0      	adds	r3, #176	@ 0xb0
 8016584:	009b      	lsls	r3, r3, #2
 8016586:	4413      	add	r3, r2
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	68fa      	ldr	r2, [r7, #12]
 801658e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016592:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016594:	68fa      	ldr	r2, [r7, #12]
 8016596:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801659a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	22ff      	movs	r2, #255	@ 0xff
 80165a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
	...

080165b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b086      	sub	sp, #24
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80165b8:	2182      	movs	r1, #130	@ 0x82
 80165ba:	4818      	ldr	r0, [pc, #96]	@ (801661c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165bc:	f000 fd4f 	bl	801705e <USBD_GetEpDesc>
 80165c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80165c2:	2101      	movs	r1, #1
 80165c4:	4815      	ldr	r0, [pc, #84]	@ (801661c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165c6:	f000 fd4a 	bl	801705e <USBD_GetEpDesc>
 80165ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80165cc:	2181      	movs	r1, #129	@ 0x81
 80165ce:	4813      	ldr	r0, [pc, #76]	@ (801661c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165d0:	f000 fd45 	bl	801705e <USBD_GetEpDesc>
 80165d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d002      	beq.n	80165e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	2210      	movs	r2, #16
 80165e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d006      	beq.n	80165f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	2200      	movs	r2, #0
 80165ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80165f0:	711a      	strb	r2, [r3, #4]
 80165f2:	2200      	movs	r2, #0
 80165f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d006      	beq.n	801660a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2200      	movs	r2, #0
 8016600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016604:	711a      	strb	r2, [r3, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2243      	movs	r2, #67	@ 0x43
 801660e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016610:	4b02      	ldr	r3, [pc, #8]	@ (801661c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016612:	4618      	mov	r0, r3
 8016614:	3718      	adds	r7, #24
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	24000084 	.word	0x24000084

08016620 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b086      	sub	sp, #24
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016628:	2182      	movs	r1, #130	@ 0x82
 801662a:	4818      	ldr	r0, [pc, #96]	@ (801668c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801662c:	f000 fd17 	bl	801705e <USBD_GetEpDesc>
 8016630:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016632:	2101      	movs	r1, #1
 8016634:	4815      	ldr	r0, [pc, #84]	@ (801668c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016636:	f000 fd12 	bl	801705e <USBD_GetEpDesc>
 801663a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801663c:	2181      	movs	r1, #129	@ 0x81
 801663e:	4813      	ldr	r0, [pc, #76]	@ (801668c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016640:	f000 fd0d 	bl	801705e <USBD_GetEpDesc>
 8016644:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d002      	beq.n	8016652 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	2210      	movs	r2, #16
 8016650:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d006      	beq.n	8016666 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	2200      	movs	r2, #0
 801665c:	711a      	strb	r2, [r3, #4]
 801665e:	2200      	movs	r2, #0
 8016660:	f042 0202 	orr.w	r2, r2, #2
 8016664:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d006      	beq.n	801667a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	2200      	movs	r2, #0
 8016670:	711a      	strb	r2, [r3, #4]
 8016672:	2200      	movs	r2, #0
 8016674:	f042 0202 	orr.w	r2, r2, #2
 8016678:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2243      	movs	r2, #67	@ 0x43
 801667e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016680:	4b02      	ldr	r3, [pc, #8]	@ (801668c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016682:	4618      	mov	r0, r3
 8016684:	3718      	adds	r7, #24
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	bf00      	nop
 801668c:	24000084 	.word	0x24000084

08016690 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b086      	sub	sp, #24
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016698:	2182      	movs	r1, #130	@ 0x82
 801669a:	4818      	ldr	r0, [pc, #96]	@ (80166fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801669c:	f000 fcdf 	bl	801705e <USBD_GetEpDesc>
 80166a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80166a2:	2101      	movs	r1, #1
 80166a4:	4815      	ldr	r0, [pc, #84]	@ (80166fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166a6:	f000 fcda 	bl	801705e <USBD_GetEpDesc>
 80166aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80166ac:	2181      	movs	r1, #129	@ 0x81
 80166ae:	4813      	ldr	r0, [pc, #76]	@ (80166fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166b0:	f000 fcd5 	bl	801705e <USBD_GetEpDesc>
 80166b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	2210      	movs	r2, #16
 80166c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d006      	beq.n	80166d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80166d0:	711a      	strb	r2, [r3, #4]
 80166d2:	2200      	movs	r2, #0
 80166d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d006      	beq.n	80166ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2200      	movs	r2, #0
 80166e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80166e4:	711a      	strb	r2, [r3, #4]
 80166e6:	2200      	movs	r2, #0
 80166e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2243      	movs	r2, #67	@ 0x43
 80166ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80166f0:	4b02      	ldr	r3, [pc, #8]	@ (80166fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3718      	adds	r7, #24
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	24000084 	.word	0x24000084

08016700 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016700:	b480      	push	{r7}
 8016702:	b083      	sub	sp, #12
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	220a      	movs	r2, #10
 801670c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801670e:	4b03      	ldr	r3, [pc, #12]	@ (801671c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016710:	4618      	mov	r0, r3
 8016712:	370c      	adds	r7, #12
 8016714:	46bd      	mov	sp, r7
 8016716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671a:	4770      	bx	lr
 801671c:	24000040 	.word	0x24000040

08016720 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016720:	b480      	push	{r7}
 8016722:	b083      	sub	sp, #12
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d101      	bne.n	8016734 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016730:	2303      	movs	r3, #3
 8016732:	e009      	b.n	8016748 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	33b0      	adds	r3, #176	@ 0xb0
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	4413      	add	r3, r2
 8016742:	683a      	ldr	r2, [r7, #0]
 8016744:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016746:	2300      	movs	r3, #0
}
 8016748:	4618      	mov	r0, r3
 801674a:	370c      	adds	r7, #12
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr

08016754 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016754:	b480      	push	{r7}
 8016756:	b087      	sub	sp, #28
 8016758:	af00      	add	r7, sp, #0
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	32b0      	adds	r2, #176	@ 0xb0
 801676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801676e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d101      	bne.n	801677a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016776:	2303      	movs	r3, #3
 8016778:	e008      	b.n	801678c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	68ba      	ldr	r2, [r7, #8]
 801677e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801678a:	2300      	movs	r3, #0
}
 801678c:	4618      	mov	r0, r3
 801678e:	371c      	adds	r7, #28
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr

08016798 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016798:	b480      	push	{r7}
 801679a:	b085      	sub	sp, #20
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	32b0      	adds	r2, #176	@ 0xb0
 80167ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d101      	bne.n	80167bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80167b8:	2303      	movs	r3, #3
 80167ba:	e004      	b.n	80167c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	683a      	ldr	r2, [r7, #0]
 80167c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80167c4:	2300      	movs	r3, #0
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
	...

080167d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	32b0      	adds	r2, #176	@ 0xb0
 80167e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80167ec:	2301      	movs	r3, #1
 80167ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d101      	bne.n	80167fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80167f6:	2303      	movs	r3, #3
 80167f8:	e025      	b.n	8016846 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016800:	2b00      	cmp	r3, #0
 8016802:	d11f      	bne.n	8016844 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	2201      	movs	r2, #1
 8016808:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801680c:	4b10      	ldr	r3, [pc, #64]	@ (8016850 <USBD_CDC_TransmitPacket+0x7c>)
 801680e:	781b      	ldrb	r3, [r3, #0]
 8016810:	f003 020f 	and.w	r2, r3, #15
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	4613      	mov	r3, r2
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	4413      	add	r3, r2
 8016822:	009b      	lsls	r3, r3, #2
 8016824:	4403      	add	r3, r0
 8016826:	3318      	adds	r3, #24
 8016828:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801682a:	4b09      	ldr	r3, [pc, #36]	@ (8016850 <USBD_CDC_TransmitPacket+0x7c>)
 801682c:	7819      	ldrb	r1, [r3, #0]
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f001 ffef 	bl	801881e <USBD_LL_Transmit>

    ret = USBD_OK;
 8016840:	2300      	movs	r3, #0
 8016842:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016844:	7bfb      	ldrb	r3, [r7, #15]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3710      	adds	r7, #16
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	240000c7 	.word	0x240000c7

08016854 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	32b0      	adds	r2, #176	@ 0xb0
 8016866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801686a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	32b0      	adds	r2, #176	@ 0xb0
 8016876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d101      	bne.n	8016882 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801687e:	2303      	movs	r3, #3
 8016880:	e018      	b.n	80168b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	7c1b      	ldrb	r3, [r3, #16]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d10a      	bne.n	80168a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801688a:	4b0c      	ldr	r3, [pc, #48]	@ (80168bc <USBD_CDC_ReceivePacket+0x68>)
 801688c:	7819      	ldrb	r1, [r3, #0]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f001 ffe1 	bl	8018860 <USBD_LL_PrepareReceive>
 801689e:	e008      	b.n	80168b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168a0:	4b06      	ldr	r3, [pc, #24]	@ (80168bc <USBD_CDC_ReceivePacket+0x68>)
 80168a2:	7819      	ldrb	r1, [r3, #0]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168aa:	2340      	movs	r3, #64	@ 0x40
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f001 ffd7 	bl	8018860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3710      	adds	r7, #16
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	240000c8 	.word	0x240000c8

080168c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b086      	sub	sp, #24
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	4613      	mov	r3, r2
 80168cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d101      	bne.n	80168d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80168d4:	2303      	movs	r3, #3
 80168d6:	e01f      	b.n	8016918 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2200      	movs	r2, #0
 80168dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2200      	movs	r2, #0
 80168e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2200      	movs	r2, #0
 80168ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d003      	beq.n	80168fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2201      	movs	r2, #1
 8016902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	79fa      	ldrb	r2, [r7, #7]
 801690a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	f001 fe4b 	bl	80185a8 <USBD_LL_Init>
 8016912:	4603      	mov	r3, r0
 8016914:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016916:	7dfb      	ldrb	r3, [r7, #23]
}
 8016918:	4618      	mov	r0, r3
 801691a:	3718      	adds	r7, #24
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801692a:	2300      	movs	r3, #0
 801692c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d101      	bne.n	8016938 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016934:	2303      	movs	r3, #3
 8016936:	e025      	b.n	8016984 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	32ae      	adds	r2, #174	@ 0xae
 801694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016950:	2b00      	cmp	r3, #0
 8016952:	d00f      	beq.n	8016974 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	32ae      	adds	r2, #174	@ 0xae
 801695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016964:	f107 020e 	add.w	r2, r7, #14
 8016968:	4610      	mov	r0, r2
 801696a:	4798      	blx	r3
 801696c:	4602      	mov	r2, r0
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801697a:	1c5a      	adds	r2, r3, #1
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016982:	2300      	movs	r3, #0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3710      	adds	r7, #16
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f001 fe59 	bl	801864c <USBD_LL_Start>
 801699a:	4603      	mov	r3, r0
}
 801699c:	4618      	mov	r0, r3
 801699e:	3708      	adds	r7, #8
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80169a4:	b480      	push	{r7}
 80169a6:	b083      	sub	sp, #12
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	370c      	adds	r7, #12
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr

080169ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b084      	sub	sp, #16
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
 80169c2:	460b      	mov	r3, r1
 80169c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80169c6:	2300      	movs	r3, #0
 80169c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d009      	beq.n	80169e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	78fa      	ldrb	r2, [r7, #3]
 80169de:	4611      	mov	r1, r2
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	4798      	blx	r3
 80169e4:	4603      	mov	r3, r0
 80169e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80169e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b084      	sub	sp, #16
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
 80169fa:	460b      	mov	r3, r1
 80169fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80169fe:	2300      	movs	r3, #0
 8016a00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	78fa      	ldrb	r2, [r7, #3]
 8016a0c:	4611      	mov	r1, r2
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	4798      	blx	r3
 8016a12:	4603      	mov	r3, r0
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d001      	beq.n	8016a1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016a18:	2303      	movs	r3, #3
 8016a1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}

08016a26 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a36:	6839      	ldr	r1, [r7, #0]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f001 f936 	bl	8017caa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016a5a:	f003 031f 	and.w	r3, r3, #31
 8016a5e:	2b02      	cmp	r3, #2
 8016a60:	d01a      	beq.n	8016a98 <USBD_LL_SetupStage+0x72>
 8016a62:	2b02      	cmp	r3, #2
 8016a64:	d822      	bhi.n	8016aac <USBD_LL_SetupStage+0x86>
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d002      	beq.n	8016a70 <USBD_LL_SetupStage+0x4a>
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d00a      	beq.n	8016a84 <USBD_LL_SetupStage+0x5e>
 8016a6e:	e01d      	b.n	8016aac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a76:	4619      	mov	r1, r3
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f000 fb63 	bl	8017144 <USBD_StdDevReq>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	73fb      	strb	r3, [r7, #15]
      break;
 8016a82:	e020      	b.n	8016ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 fbcb 	bl	8017228 <USBD_StdItfReq>
 8016a92:	4603      	mov	r3, r0
 8016a94:	73fb      	strb	r3, [r7, #15]
      break;
 8016a96:	e016      	b.n	8016ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fc2d 	bl	8017300 <USBD_StdEPReq>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8016aaa:	e00c      	b.n	8016ac6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016ab2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016ab6:	b2db      	uxtb	r3, r3
 8016ab8:	4619      	mov	r1, r3
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f001 fe26 	bl	801870c <USBD_LL_StallEP>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8016ac4:	bf00      	nop
  }

  return ret;
 8016ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3710      	adds	r7, #16
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b086      	sub	sp, #24
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	60f8      	str	r0, [r7, #12]
 8016ad8:	460b      	mov	r3, r1
 8016ada:	607a      	str	r2, [r7, #4]
 8016adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016ae2:	7afb      	ldrb	r3, [r7, #11]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d16e      	bne.n	8016bc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016aee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016af6:	2b03      	cmp	r3, #3
 8016af8:	f040 8098 	bne.w	8016c2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	689a      	ldr	r2, [r3, #8]
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	68db      	ldr	r3, [r3, #12]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d913      	bls.n	8016b30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	689a      	ldr	r2, [r3, #8]
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	1ad2      	subs	r2, r2, r3
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	68da      	ldr	r2, [r3, #12]
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	bf28      	it	cs
 8016b22:	4613      	movcs	r3, r2
 8016b24:	461a      	mov	r2, r3
 8016b26:	6879      	ldr	r1, [r7, #4]
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f001 f9be 	bl	8017eaa <USBD_CtlContinueRx>
 8016b2e:	e07d      	b.n	8016c2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016b36:	f003 031f 	and.w	r3, r3, #31
 8016b3a:	2b02      	cmp	r3, #2
 8016b3c:	d014      	beq.n	8016b68 <USBD_LL_DataOutStage+0x98>
 8016b3e:	2b02      	cmp	r3, #2
 8016b40:	d81d      	bhi.n	8016b7e <USBD_LL_DataOutStage+0xae>
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d002      	beq.n	8016b4c <USBD_LL_DataOutStage+0x7c>
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d003      	beq.n	8016b52 <USBD_LL_DataOutStage+0x82>
 8016b4a:	e018      	b.n	8016b7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8016b50:	e018      	b.n	8016b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b58:	b2db      	uxtb	r3, r3
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f000 fa64 	bl	801702a <USBD_CoreFindIF>
 8016b62:	4603      	mov	r3, r0
 8016b64:	75bb      	strb	r3, [r7, #22]
            break;
 8016b66:	e00d      	b.n	8016b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b6e:	b2db      	uxtb	r3, r3
 8016b70:	4619      	mov	r1, r3
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	f000 fa66 	bl	8017044 <USBD_CoreFindEP>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8016b7c:	e002      	b.n	8016b84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	75bb      	strb	r3, [r7, #22]
            break;
 8016b82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016b84:	7dbb      	ldrb	r3, [r7, #22]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d119      	bne.n	8016bbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	2b03      	cmp	r3, #3
 8016b94:	d113      	bne.n	8016bbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016b96:	7dba      	ldrb	r2, [r7, #22]
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	32ae      	adds	r2, #174	@ 0xae
 8016b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ba0:	691b      	ldr	r3, [r3, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d00b      	beq.n	8016bbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016ba6:	7dba      	ldrb	r2, [r7, #22]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016bae:	7dba      	ldrb	r2, [r7, #22]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	32ae      	adds	r2, #174	@ 0xae
 8016bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb8:	691b      	ldr	r3, [r3, #16]
 8016bba:	68f8      	ldr	r0, [r7, #12]
 8016bbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f001 f984 	bl	8017ecc <USBD_CtlSendStatus>
 8016bc4:	e032      	b.n	8016c2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016bc6:	7afb      	ldrb	r3, [r7, #11]
 8016bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	4619      	mov	r1, r3
 8016bd0:	68f8      	ldr	r0, [r7, #12]
 8016bd2:	f000 fa37 	bl	8017044 <USBD_CoreFindEP>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016bda:	7dbb      	ldrb	r3, [r7, #22]
 8016bdc:	2bff      	cmp	r3, #255	@ 0xff
 8016bde:	d025      	beq.n	8016c2c <USBD_LL_DataOutStage+0x15c>
 8016be0:	7dbb      	ldrb	r3, [r7, #22]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d122      	bne.n	8016c2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	2b03      	cmp	r3, #3
 8016bf0:	d117      	bne.n	8016c22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016bf2:	7dba      	ldrb	r2, [r7, #22]
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	32ae      	adds	r2, #174	@ 0xae
 8016bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bfc:	699b      	ldr	r3, [r3, #24]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d00f      	beq.n	8016c22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016c02:	7dba      	ldrb	r2, [r7, #22]
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016c0a:	7dba      	ldrb	r2, [r7, #22]
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	32ae      	adds	r2, #174	@ 0xae
 8016c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c14:	699b      	ldr	r3, [r3, #24]
 8016c16:	7afa      	ldrb	r2, [r7, #11]
 8016c18:	4611      	mov	r1, r2
 8016c1a:	68f8      	ldr	r0, [r7, #12]
 8016c1c:	4798      	blx	r3
 8016c1e:	4603      	mov	r3, r0
 8016c20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016c22:	7dfb      	ldrb	r3, [r7, #23]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d001      	beq.n	8016c2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016c28:	7dfb      	ldrb	r3, [r7, #23]
 8016c2a:	e000      	b.n	8016c2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016c2c:	2300      	movs	r3, #0
}
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3718      	adds	r7, #24
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016c36:	b580      	push	{r7, lr}
 8016c38:	b086      	sub	sp, #24
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	60f8      	str	r0, [r7, #12]
 8016c3e:	460b      	mov	r3, r1
 8016c40:	607a      	str	r2, [r7, #4]
 8016c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016c44:	7afb      	ldrb	r3, [r7, #11]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d16f      	bne.n	8016d2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	3314      	adds	r3, #20
 8016c4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016c56:	2b02      	cmp	r3, #2
 8016c58:	d15a      	bne.n	8016d10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	689a      	ldr	r2, [r3, #8]
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d914      	bls.n	8016c90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	689a      	ldr	r2, [r3, #8]
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	68db      	ldr	r3, [r3, #12]
 8016c6e:	1ad2      	subs	r2, r2, r3
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	689b      	ldr	r3, [r3, #8]
 8016c78:	461a      	mov	r2, r3
 8016c7a:	6879      	ldr	r1, [r7, #4]
 8016c7c:	68f8      	ldr	r0, [r7, #12]
 8016c7e:	f001 f8e6 	bl	8017e4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c82:	2300      	movs	r3, #0
 8016c84:	2200      	movs	r2, #0
 8016c86:	2100      	movs	r1, #0
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	f001 fde9 	bl	8018860 <USBD_LL_PrepareReceive>
 8016c8e:	e03f      	b.n	8016d10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	68da      	ldr	r2, [r3, #12]
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	689b      	ldr	r3, [r3, #8]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d11c      	bne.n	8016cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	685a      	ldr	r2, [r3, #4]
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d316      	bcc.n	8016cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	685a      	ldr	r2, [r3, #4]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d20f      	bcs.n	8016cd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	2100      	movs	r1, #0
 8016cba:	68f8      	ldr	r0, [r7, #12]
 8016cbc:	f001 f8c7 	bl	8017e4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cc8:	2300      	movs	r3, #0
 8016cca:	2200      	movs	r2, #0
 8016ccc:	2100      	movs	r1, #0
 8016cce:	68f8      	ldr	r0, [r7, #12]
 8016cd0:	f001 fdc6 	bl	8018860 <USBD_LL_PrepareReceive>
 8016cd4:	e01c      	b.n	8016d10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	2b03      	cmp	r3, #3
 8016ce0:	d10f      	bne.n	8016d02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d009      	beq.n	8016d02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016cfc:	68db      	ldr	r3, [r3, #12]
 8016cfe:	68f8      	ldr	r0, [r7, #12]
 8016d00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d02:	2180      	movs	r1, #128	@ 0x80
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	f001 fd01 	bl	801870c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016d0a:	68f8      	ldr	r0, [r7, #12]
 8016d0c:	f001 f8f1 	bl	8017ef2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d03a      	beq.n	8016d90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016d1a:	68f8      	ldr	r0, [r7, #12]
 8016d1c:	f7ff fe42 	bl	80169a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2200      	movs	r2, #0
 8016d24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016d28:	e032      	b.n	8016d90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016d2a:	7afb      	ldrb	r3, [r7, #11]
 8016d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	4619      	mov	r1, r3
 8016d34:	68f8      	ldr	r0, [r7, #12]
 8016d36:	f000 f985 	bl	8017044 <USBD_CoreFindEP>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d3e:	7dfb      	ldrb	r3, [r7, #23]
 8016d40:	2bff      	cmp	r3, #255	@ 0xff
 8016d42:	d025      	beq.n	8016d90 <USBD_LL_DataInStage+0x15a>
 8016d44:	7dfb      	ldrb	r3, [r7, #23]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d122      	bne.n	8016d90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	2b03      	cmp	r3, #3
 8016d54:	d11c      	bne.n	8016d90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016d56:	7dfa      	ldrb	r2, [r7, #23]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	32ae      	adds	r2, #174	@ 0xae
 8016d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d60:	695b      	ldr	r3, [r3, #20]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d014      	beq.n	8016d90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016d66:	7dfa      	ldrb	r2, [r7, #23]
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016d6e:	7dfa      	ldrb	r2, [r7, #23]
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	32ae      	adds	r2, #174	@ 0xae
 8016d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d78:	695b      	ldr	r3, [r3, #20]
 8016d7a:	7afa      	ldrb	r2, [r7, #11]
 8016d7c:	4611      	mov	r1, r2
 8016d7e:	68f8      	ldr	r0, [r7, #12]
 8016d80:	4798      	blx	r3
 8016d82:	4603      	mov	r3, r0
 8016d84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016d86:	7dbb      	ldrb	r3, [r7, #22]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016d8c:	7dbb      	ldrb	r3, [r7, #22]
 8016d8e:	e000      	b.n	8016d92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016d90:	2300      	movs	r3, #0
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	3718      	adds	r7, #24
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b084      	sub	sp, #16
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016da2:	2300      	movs	r3, #0
 8016da4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2201      	movs	r2, #1
 8016daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2200      	movs	r2, #0
 8016db2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2200      	movs	r2, #0
 8016dba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d014      	beq.n	8016e00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d00e      	beq.n	8016e00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	6852      	ldr	r2, [r2, #4]
 8016dee:	b2d2      	uxtb	r2, r2
 8016df0:	4611      	mov	r1, r2
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	4798      	blx	r3
 8016df6:	4603      	mov	r3, r0
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d001      	beq.n	8016e00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016dfc:	2303      	movs	r3, #3
 8016dfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016e00:	2340      	movs	r3, #64	@ 0x40
 8016e02:	2200      	movs	r2, #0
 8016e04:	2100      	movs	r1, #0
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f001 fc3b 	bl	8018682 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2201      	movs	r2, #1
 8016e10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2240      	movs	r2, #64	@ 0x40
 8016e18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016e1c:	2340      	movs	r3, #64	@ 0x40
 8016e1e:	2200      	movs	r2, #0
 8016e20:	2180      	movs	r1, #128	@ 0x80
 8016e22:	6878      	ldr	r0, [r7, #4]
 8016e24:	f001 fc2d 	bl	8018682 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2201      	movs	r2, #1
 8016e2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	2240      	movs	r2, #64	@ 0x40
 8016e32:	621a      	str	r2, [r3, #32]

  return ret;
 8016e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016e3e:	b480      	push	{r7}
 8016e40:	b083      	sub	sp, #12
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
 8016e46:	460b      	mov	r3, r1
 8016e48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	78fa      	ldrb	r2, [r7, #3]
 8016e4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016e50:	2300      	movs	r3, #0
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	370c      	adds	r7, #12
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr

08016e5e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016e5e:	b480      	push	{r7}
 8016e60:	b083      	sub	sp, #12
 8016e62:	af00      	add	r7, sp, #0
 8016e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e6c:	b2db      	uxtb	r3, r3
 8016e6e:	2b04      	cmp	r3, #4
 8016e70:	d006      	beq.n	8016e80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e78:	b2da      	uxtb	r2, r3
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2204      	movs	r2, #4
 8016e84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016e88:	2300      	movs	r3, #0
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	370c      	adds	r7, #12
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e94:	4770      	bx	lr

08016e96 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016e96:	b480      	push	{r7}
 8016e98:	b083      	sub	sp, #12
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	2b04      	cmp	r3, #4
 8016ea8:	d106      	bne.n	8016eb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016eb8:	2300      	movs	r3, #0
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	370c      	adds	r7, #12
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec4:	4770      	bx	lr

08016ec6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016ec6:	b580      	push	{r7, lr}
 8016ec8:	b082      	sub	sp, #8
 8016eca:	af00      	add	r7, sp, #0
 8016ecc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2b03      	cmp	r3, #3
 8016ed8:	d110      	bne.n	8016efc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d00b      	beq.n	8016efc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016eea:	69db      	ldr	r3, [r3, #28]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d005      	beq.n	8016efc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ef6:	69db      	ldr	r3, [r3, #28]
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016efc:	2300      	movs	r3, #0
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3708      	adds	r7, #8
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}

08016f06 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016f06:	b580      	push	{r7, lr}
 8016f08:	b082      	sub	sp, #8
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
 8016f0e:	460b      	mov	r3, r1
 8016f10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	32ae      	adds	r2, #174	@ 0xae
 8016f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d101      	bne.n	8016f28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016f24:	2303      	movs	r3, #3
 8016f26:	e01c      	b.n	8016f62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f2e:	b2db      	uxtb	r3, r3
 8016f30:	2b03      	cmp	r3, #3
 8016f32:	d115      	bne.n	8016f60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	32ae      	adds	r2, #174	@ 0xae
 8016f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f42:	6a1b      	ldr	r3, [r3, #32]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00b      	beq.n	8016f60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	32ae      	adds	r2, #174	@ 0xae
 8016f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f56:	6a1b      	ldr	r3, [r3, #32]
 8016f58:	78fa      	ldrb	r2, [r7, #3]
 8016f5a:	4611      	mov	r1, r2
 8016f5c:	6878      	ldr	r0, [r7, #4]
 8016f5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f60:	2300      	movs	r3, #0
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3708      	adds	r7, #8
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b082      	sub	sp, #8
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	6078      	str	r0, [r7, #4]
 8016f72:	460b      	mov	r3, r1
 8016f74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	32ae      	adds	r2, #174	@ 0xae
 8016f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d101      	bne.n	8016f8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016f88:	2303      	movs	r3, #3
 8016f8a:	e01c      	b.n	8016fc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	2b03      	cmp	r3, #3
 8016f96:	d115      	bne.n	8016fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	32ae      	adds	r2, #174	@ 0xae
 8016fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d00b      	beq.n	8016fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	32ae      	adds	r2, #174	@ 0xae
 8016fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fbc:	78fa      	ldrb	r2, [r7, #3]
 8016fbe:	4611      	mov	r1, r2
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016fc4:	2300      	movs	r3, #0
}
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	3708      	adds	r7, #8
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd80      	pop	{r7, pc}

08016fce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016fce:	b480      	push	{r7}
 8016fd0:	b083      	sub	sp, #12
 8016fd2:	af00      	add	r7, sp, #0
 8016fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016fd6:	2300      	movs	r3, #0
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	370c      	adds	r7, #12
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b084      	sub	sp, #16
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016fec:	2300      	movs	r3, #0
 8016fee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d00e      	beq.n	8017020 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	6852      	ldr	r2, [r2, #4]
 801700e:	b2d2      	uxtb	r2, r2
 8017010:	4611      	mov	r1, r2
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	4798      	blx	r3
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d001      	beq.n	8017020 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801701c:	2303      	movs	r3, #3
 801701e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017020:	7bfb      	ldrb	r3, [r7, #15]
}
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801702a:	b480      	push	{r7}
 801702c:	b083      	sub	sp, #12
 801702e:	af00      	add	r7, sp, #0
 8017030:	6078      	str	r0, [r7, #4]
 8017032:	460b      	mov	r3, r1
 8017034:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017036:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017038:	4618      	mov	r0, r3
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr

08017044 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017044:	b480      	push	{r7}
 8017046:	b083      	sub	sp, #12
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	460b      	mov	r3, r1
 801704e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017050:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017052:	4618      	mov	r0, r3
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705c:	4770      	bx	lr

0801705e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801705e:	b580      	push	{r7, lr}
 8017060:	b086      	sub	sp, #24
 8017062:	af00      	add	r7, sp, #0
 8017064:	6078      	str	r0, [r7, #4]
 8017066:	460b      	mov	r3, r1
 8017068:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8017072:	2300      	movs	r3, #0
 8017074:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	885b      	ldrh	r3, [r3, #2]
 801707a:	b29b      	uxth	r3, r3
 801707c:	68fa      	ldr	r2, [r7, #12]
 801707e:	7812      	ldrb	r2, [r2, #0]
 8017080:	4293      	cmp	r3, r2
 8017082:	d91f      	bls.n	80170c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	781b      	ldrb	r3, [r3, #0]
 8017088:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801708a:	e013      	b.n	80170b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801708c:	f107 030a 	add.w	r3, r7, #10
 8017090:	4619      	mov	r1, r3
 8017092:	6978      	ldr	r0, [r7, #20]
 8017094:	f000 f81b 	bl	80170ce <USBD_GetNextDesc>
 8017098:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	785b      	ldrb	r3, [r3, #1]
 801709e:	2b05      	cmp	r3, #5
 80170a0:	d108      	bne.n	80170b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80170a6:	693b      	ldr	r3, [r7, #16]
 80170a8:	789b      	ldrb	r3, [r3, #2]
 80170aa:	78fa      	ldrb	r2, [r7, #3]
 80170ac:	429a      	cmp	r2, r3
 80170ae:	d008      	beq.n	80170c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80170b0:	2300      	movs	r3, #0
 80170b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	885b      	ldrh	r3, [r3, #2]
 80170b8:	b29a      	uxth	r2, r3
 80170ba:	897b      	ldrh	r3, [r7, #10]
 80170bc:	429a      	cmp	r2, r3
 80170be:	d8e5      	bhi.n	801708c <USBD_GetEpDesc+0x2e>
 80170c0:	e000      	b.n	80170c4 <USBD_GetEpDesc+0x66>
          break;
 80170c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80170c4:	693b      	ldr	r3, [r7, #16]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3718      	adds	r7, #24
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}

080170ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80170ce:	b480      	push	{r7}
 80170d0:	b085      	sub	sp, #20
 80170d2:	af00      	add	r7, sp, #0
 80170d4:	6078      	str	r0, [r7, #4]
 80170d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	68fa      	ldr	r2, [r7, #12]
 80170e2:	7812      	ldrb	r2, [r2, #0]
 80170e4:	4413      	add	r3, r2
 80170e6:	b29a      	uxth	r2, r3
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	461a      	mov	r2, r3
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4413      	add	r3, r2
 80170f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80170f8:	68fb      	ldr	r3, [r7, #12]
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr

08017106 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017106:	b480      	push	{r7}
 8017108:	b087      	sub	sp, #28
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	3301      	adds	r3, #1
 801711c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017124:	8a3b      	ldrh	r3, [r7, #16]
 8017126:	021b      	lsls	r3, r3, #8
 8017128:	b21a      	sxth	r2, r3
 801712a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801712e:	4313      	orrs	r3, r2
 8017130:	b21b      	sxth	r3, r3
 8017132:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017134:	89fb      	ldrh	r3, [r7, #14]
}
 8017136:	4618      	mov	r0, r3
 8017138:	371c      	adds	r7, #28
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	4770      	bx	lr
	...

08017144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b084      	sub	sp, #16
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801714e:	2300      	movs	r3, #0
 8017150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801715a:	2b40      	cmp	r3, #64	@ 0x40
 801715c:	d005      	beq.n	801716a <USBD_StdDevReq+0x26>
 801715e:	2b40      	cmp	r3, #64	@ 0x40
 8017160:	d857      	bhi.n	8017212 <USBD_StdDevReq+0xce>
 8017162:	2b00      	cmp	r3, #0
 8017164:	d00f      	beq.n	8017186 <USBD_StdDevReq+0x42>
 8017166:	2b20      	cmp	r3, #32
 8017168:	d153      	bne.n	8017212 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	32ae      	adds	r2, #174	@ 0xae
 8017174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017178:	689b      	ldr	r3, [r3, #8]
 801717a:	6839      	ldr	r1, [r7, #0]
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	4798      	blx	r3
 8017180:	4603      	mov	r3, r0
 8017182:	73fb      	strb	r3, [r7, #15]
      break;
 8017184:	e04a      	b.n	801721c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	785b      	ldrb	r3, [r3, #1]
 801718a:	2b09      	cmp	r3, #9
 801718c:	d83b      	bhi.n	8017206 <USBD_StdDevReq+0xc2>
 801718e:	a201      	add	r2, pc, #4	@ (adr r2, 8017194 <USBD_StdDevReq+0x50>)
 8017190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017194:	080171e9 	.word	0x080171e9
 8017198:	080171fd 	.word	0x080171fd
 801719c:	08017207 	.word	0x08017207
 80171a0:	080171f3 	.word	0x080171f3
 80171a4:	08017207 	.word	0x08017207
 80171a8:	080171c7 	.word	0x080171c7
 80171ac:	080171bd 	.word	0x080171bd
 80171b0:	08017207 	.word	0x08017207
 80171b4:	080171df 	.word	0x080171df
 80171b8:	080171d1 	.word	0x080171d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80171bc:	6839      	ldr	r1, [r7, #0]
 80171be:	6878      	ldr	r0, [r7, #4]
 80171c0:	f000 fa3c 	bl	801763c <USBD_GetDescriptor>
          break;
 80171c4:	e024      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80171c6:	6839      	ldr	r1, [r7, #0]
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f000 fbcb 	bl	8017964 <USBD_SetAddress>
          break;
 80171ce:	e01f      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80171d0:	6839      	ldr	r1, [r7, #0]
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 fc0a 	bl	80179ec <USBD_SetConfig>
 80171d8:	4603      	mov	r3, r0
 80171da:	73fb      	strb	r3, [r7, #15]
          break;
 80171dc:	e018      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80171de:	6839      	ldr	r1, [r7, #0]
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f000 fcad 	bl	8017b40 <USBD_GetConfig>
          break;
 80171e6:	e013      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80171e8:	6839      	ldr	r1, [r7, #0]
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f000 fcde 	bl	8017bac <USBD_GetStatus>
          break;
 80171f0:	e00e      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80171f2:	6839      	ldr	r1, [r7, #0]
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f000 fd0d 	bl	8017c14 <USBD_SetFeature>
          break;
 80171fa:	e009      	b.n	8017210 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80171fc:	6839      	ldr	r1, [r7, #0]
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f000 fd31 	bl	8017c66 <USBD_ClrFeature>
          break;
 8017204:	e004      	b.n	8017210 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8017206:	6839      	ldr	r1, [r7, #0]
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f000 fd88 	bl	8017d1e <USBD_CtlError>
          break;
 801720e:	bf00      	nop
      }
      break;
 8017210:	e004      	b.n	801721c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017212:	6839      	ldr	r1, [r7, #0]
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f000 fd82 	bl	8017d1e <USBD_CtlError>
      break;
 801721a:	bf00      	nop
  }

  return ret;
 801721c:	7bfb      	ldrb	r3, [r7, #15]
}
 801721e:	4618      	mov	r0, r3
 8017220:	3710      	adds	r7, #16
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop

08017228 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b084      	sub	sp, #16
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017232:	2300      	movs	r3, #0
 8017234:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801723e:	2b40      	cmp	r3, #64	@ 0x40
 8017240:	d005      	beq.n	801724e <USBD_StdItfReq+0x26>
 8017242:	2b40      	cmp	r3, #64	@ 0x40
 8017244:	d852      	bhi.n	80172ec <USBD_StdItfReq+0xc4>
 8017246:	2b00      	cmp	r3, #0
 8017248:	d001      	beq.n	801724e <USBD_StdItfReq+0x26>
 801724a:	2b20      	cmp	r3, #32
 801724c:	d14e      	bne.n	80172ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017254:	b2db      	uxtb	r3, r3
 8017256:	3b01      	subs	r3, #1
 8017258:	2b02      	cmp	r3, #2
 801725a:	d840      	bhi.n	80172de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	889b      	ldrh	r3, [r3, #4]
 8017260:	b2db      	uxtb	r3, r3
 8017262:	2b01      	cmp	r3, #1
 8017264:	d836      	bhi.n	80172d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	889b      	ldrh	r3, [r3, #4]
 801726a:	b2db      	uxtb	r3, r3
 801726c:	4619      	mov	r1, r3
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f7ff fedb 	bl	801702a <USBD_CoreFindIF>
 8017274:	4603      	mov	r3, r0
 8017276:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017278:	7bbb      	ldrb	r3, [r7, #14]
 801727a:	2bff      	cmp	r3, #255	@ 0xff
 801727c:	d01d      	beq.n	80172ba <USBD_StdItfReq+0x92>
 801727e:	7bbb      	ldrb	r3, [r7, #14]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d11a      	bne.n	80172ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017284:	7bba      	ldrb	r2, [r7, #14]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	32ae      	adds	r2, #174	@ 0xae
 801728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801728e:	689b      	ldr	r3, [r3, #8]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d00f      	beq.n	80172b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017294:	7bba      	ldrb	r2, [r7, #14]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801729c:	7bba      	ldrb	r2, [r7, #14]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	32ae      	adds	r2, #174	@ 0xae
 80172a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172a6:	689b      	ldr	r3, [r3, #8]
 80172a8:	6839      	ldr	r1, [r7, #0]
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	4798      	blx	r3
 80172ae:	4603      	mov	r3, r0
 80172b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172b2:	e004      	b.n	80172be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80172b4:	2303      	movs	r3, #3
 80172b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172b8:	e001      	b.n	80172be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80172ba:	2303      	movs	r3, #3
 80172bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	88db      	ldrh	r3, [r3, #6]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d110      	bne.n	80172e8 <USBD_StdItfReq+0xc0>
 80172c6:	7bfb      	ldrb	r3, [r7, #15]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d10d      	bne.n	80172e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 fdfd 	bl	8017ecc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80172d2:	e009      	b.n	80172e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80172d4:	6839      	ldr	r1, [r7, #0]
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f000 fd21 	bl	8017d1e <USBD_CtlError>
          break;
 80172dc:	e004      	b.n	80172e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80172de:	6839      	ldr	r1, [r7, #0]
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f000 fd1c 	bl	8017d1e <USBD_CtlError>
          break;
 80172e6:	e000      	b.n	80172ea <USBD_StdItfReq+0xc2>
          break;
 80172e8:	bf00      	nop
      }
      break;
 80172ea:	e004      	b.n	80172f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f000 fd15 	bl	8017d1e <USBD_CtlError>
      break;
 80172f4:	bf00      	nop
  }

  return ret;
 80172f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3710      	adds	r7, #16
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801730a:	2300      	movs	r3, #0
 801730c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	889b      	ldrh	r3, [r3, #4]
 8017312:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801731c:	2b40      	cmp	r3, #64	@ 0x40
 801731e:	d007      	beq.n	8017330 <USBD_StdEPReq+0x30>
 8017320:	2b40      	cmp	r3, #64	@ 0x40
 8017322:	f200 817f 	bhi.w	8017624 <USBD_StdEPReq+0x324>
 8017326:	2b00      	cmp	r3, #0
 8017328:	d02a      	beq.n	8017380 <USBD_StdEPReq+0x80>
 801732a:	2b20      	cmp	r3, #32
 801732c:	f040 817a 	bne.w	8017624 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017330:	7bbb      	ldrb	r3, [r7, #14]
 8017332:	4619      	mov	r1, r3
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f7ff fe85 	bl	8017044 <USBD_CoreFindEP>
 801733a:	4603      	mov	r3, r0
 801733c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801733e:	7b7b      	ldrb	r3, [r7, #13]
 8017340:	2bff      	cmp	r3, #255	@ 0xff
 8017342:	f000 8174 	beq.w	801762e <USBD_StdEPReq+0x32e>
 8017346:	7b7b      	ldrb	r3, [r7, #13]
 8017348:	2b00      	cmp	r3, #0
 801734a:	f040 8170 	bne.w	801762e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801734e:	7b7a      	ldrb	r2, [r7, #13]
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017356:	7b7a      	ldrb	r2, [r7, #13]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	32ae      	adds	r2, #174	@ 0xae
 801735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	2b00      	cmp	r3, #0
 8017364:	f000 8163 	beq.w	801762e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017368:	7b7a      	ldrb	r2, [r7, #13]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	32ae      	adds	r2, #174	@ 0xae
 801736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	6839      	ldr	r1, [r7, #0]
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	4798      	blx	r3
 801737a:	4603      	mov	r3, r0
 801737c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801737e:	e156      	b.n	801762e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	785b      	ldrb	r3, [r3, #1]
 8017384:	2b03      	cmp	r3, #3
 8017386:	d008      	beq.n	801739a <USBD_StdEPReq+0x9a>
 8017388:	2b03      	cmp	r3, #3
 801738a:	f300 8145 	bgt.w	8017618 <USBD_StdEPReq+0x318>
 801738e:	2b00      	cmp	r3, #0
 8017390:	f000 809b 	beq.w	80174ca <USBD_StdEPReq+0x1ca>
 8017394:	2b01      	cmp	r3, #1
 8017396:	d03c      	beq.n	8017412 <USBD_StdEPReq+0x112>
 8017398:	e13e      	b.n	8017618 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d002      	beq.n	80173ac <USBD_StdEPReq+0xac>
 80173a6:	2b03      	cmp	r3, #3
 80173a8:	d016      	beq.n	80173d8 <USBD_StdEPReq+0xd8>
 80173aa:	e02c      	b.n	8017406 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80173ac:	7bbb      	ldrb	r3, [r7, #14]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d00d      	beq.n	80173ce <USBD_StdEPReq+0xce>
 80173b2:	7bbb      	ldrb	r3, [r7, #14]
 80173b4:	2b80      	cmp	r3, #128	@ 0x80
 80173b6:	d00a      	beq.n	80173ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80173b8:	7bbb      	ldrb	r3, [r7, #14]
 80173ba:	4619      	mov	r1, r3
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f001 f9a5 	bl	801870c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80173c2:	2180      	movs	r1, #128	@ 0x80
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f001 f9a1 	bl	801870c <USBD_LL_StallEP>
 80173ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80173cc:	e020      	b.n	8017410 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80173ce:	6839      	ldr	r1, [r7, #0]
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f000 fca4 	bl	8017d1e <USBD_CtlError>
              break;
 80173d6:	e01b      	b.n	8017410 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	885b      	ldrh	r3, [r3, #2]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d10e      	bne.n	80173fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80173e0:	7bbb      	ldrb	r3, [r7, #14]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d00b      	beq.n	80173fe <USBD_StdEPReq+0xfe>
 80173e6:	7bbb      	ldrb	r3, [r7, #14]
 80173e8:	2b80      	cmp	r3, #128	@ 0x80
 80173ea:	d008      	beq.n	80173fe <USBD_StdEPReq+0xfe>
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	88db      	ldrh	r3, [r3, #6]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d104      	bne.n	80173fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80173f4:	7bbb      	ldrb	r3, [r7, #14]
 80173f6:	4619      	mov	r1, r3
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f001 f987 	bl	801870c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f000 fd64 	bl	8017ecc <USBD_CtlSendStatus>

              break;
 8017404:	e004      	b.n	8017410 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017406:	6839      	ldr	r1, [r7, #0]
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f000 fc88 	bl	8017d1e <USBD_CtlError>
              break;
 801740e:	bf00      	nop
          }
          break;
 8017410:	e107      	b.n	8017622 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017418:	b2db      	uxtb	r3, r3
 801741a:	2b02      	cmp	r3, #2
 801741c:	d002      	beq.n	8017424 <USBD_StdEPReq+0x124>
 801741e:	2b03      	cmp	r3, #3
 8017420:	d016      	beq.n	8017450 <USBD_StdEPReq+0x150>
 8017422:	e04b      	b.n	80174bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017424:	7bbb      	ldrb	r3, [r7, #14]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d00d      	beq.n	8017446 <USBD_StdEPReq+0x146>
 801742a:	7bbb      	ldrb	r3, [r7, #14]
 801742c:	2b80      	cmp	r3, #128	@ 0x80
 801742e:	d00a      	beq.n	8017446 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017430:	7bbb      	ldrb	r3, [r7, #14]
 8017432:	4619      	mov	r1, r3
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f001 f969 	bl	801870c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801743a:	2180      	movs	r1, #128	@ 0x80
 801743c:	6878      	ldr	r0, [r7, #4]
 801743e:	f001 f965 	bl	801870c <USBD_LL_StallEP>
 8017442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017444:	e040      	b.n	80174c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f000 fc68 	bl	8017d1e <USBD_CtlError>
              break;
 801744e:	e03b      	b.n	80174c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	885b      	ldrh	r3, [r3, #2]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d136      	bne.n	80174c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017458:	7bbb      	ldrb	r3, [r7, #14]
 801745a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801745e:	2b00      	cmp	r3, #0
 8017460:	d004      	beq.n	801746c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017462:	7bbb      	ldrb	r3, [r7, #14]
 8017464:	4619      	mov	r1, r3
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f001 f96f 	bl	801874a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 fd2d 	bl	8017ecc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017472:	7bbb      	ldrb	r3, [r7, #14]
 8017474:	4619      	mov	r1, r3
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f7ff fde4 	bl	8017044 <USBD_CoreFindEP>
 801747c:	4603      	mov	r3, r0
 801747e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017480:	7b7b      	ldrb	r3, [r7, #13]
 8017482:	2bff      	cmp	r3, #255	@ 0xff
 8017484:	d01f      	beq.n	80174c6 <USBD_StdEPReq+0x1c6>
 8017486:	7b7b      	ldrb	r3, [r7, #13]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d11c      	bne.n	80174c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801748c:	7b7a      	ldrb	r2, [r7, #13]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017494:	7b7a      	ldrb	r2, [r7, #13]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	32ae      	adds	r2, #174	@ 0xae
 801749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801749e:	689b      	ldr	r3, [r3, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d010      	beq.n	80174c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80174a4:	7b7a      	ldrb	r2, [r7, #13]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	32ae      	adds	r2, #174	@ 0xae
 80174aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174ae:	689b      	ldr	r3, [r3, #8]
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	4798      	blx	r3
 80174b6:	4603      	mov	r3, r0
 80174b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80174ba:	e004      	b.n	80174c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80174bc:	6839      	ldr	r1, [r7, #0]
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f000 fc2d 	bl	8017d1e <USBD_CtlError>
              break;
 80174c4:	e000      	b.n	80174c8 <USBD_StdEPReq+0x1c8>
              break;
 80174c6:	bf00      	nop
          }
          break;
 80174c8:	e0ab      	b.n	8017622 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	d002      	beq.n	80174dc <USBD_StdEPReq+0x1dc>
 80174d6:	2b03      	cmp	r3, #3
 80174d8:	d032      	beq.n	8017540 <USBD_StdEPReq+0x240>
 80174da:	e097      	b.n	801760c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80174dc:	7bbb      	ldrb	r3, [r7, #14]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d007      	beq.n	80174f2 <USBD_StdEPReq+0x1f2>
 80174e2:	7bbb      	ldrb	r3, [r7, #14]
 80174e4:	2b80      	cmp	r3, #128	@ 0x80
 80174e6:	d004      	beq.n	80174f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80174e8:	6839      	ldr	r1, [r7, #0]
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 fc17 	bl	8017d1e <USBD_CtlError>
                break;
 80174f0:	e091      	b.n	8017616 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	da0b      	bge.n	8017512 <USBD_StdEPReq+0x212>
 80174fa:	7bbb      	ldrb	r3, [r7, #14]
 80174fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017500:	4613      	mov	r3, r2
 8017502:	009b      	lsls	r3, r3, #2
 8017504:	4413      	add	r3, r2
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	3310      	adds	r3, #16
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	4413      	add	r3, r2
 801750e:	3304      	adds	r3, #4
 8017510:	e00b      	b.n	801752a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017512:	7bbb      	ldrb	r3, [r7, #14]
 8017514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017518:	4613      	mov	r3, r2
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	4413      	add	r3, r2
 801751e:	009b      	lsls	r3, r3, #2
 8017520:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	4413      	add	r3, r2
 8017528:	3304      	adds	r3, #4
 801752a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	2200      	movs	r2, #0
 8017530:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	2202      	movs	r2, #2
 8017536:	4619      	mov	r1, r3
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f000 fc6d 	bl	8017e18 <USBD_CtlSendData>
              break;
 801753e:	e06a      	b.n	8017616 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017544:	2b00      	cmp	r3, #0
 8017546:	da11      	bge.n	801756c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017548:	7bbb      	ldrb	r3, [r7, #14]
 801754a:	f003 020f 	and.w	r2, r3, #15
 801754e:	6879      	ldr	r1, [r7, #4]
 8017550:	4613      	mov	r3, r2
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	4413      	add	r3, r2
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	440b      	add	r3, r1
 801755a:	3324      	adds	r3, #36	@ 0x24
 801755c:	881b      	ldrh	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d117      	bne.n	8017592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017562:	6839      	ldr	r1, [r7, #0]
 8017564:	6878      	ldr	r0, [r7, #4]
 8017566:	f000 fbda 	bl	8017d1e <USBD_CtlError>
                  break;
 801756a:	e054      	b.n	8017616 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801756c:	7bbb      	ldrb	r3, [r7, #14]
 801756e:	f003 020f 	and.w	r2, r3, #15
 8017572:	6879      	ldr	r1, [r7, #4]
 8017574:	4613      	mov	r3, r2
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	4413      	add	r3, r2
 801757a:	009b      	lsls	r3, r3, #2
 801757c:	440b      	add	r3, r1
 801757e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017582:	881b      	ldrh	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d104      	bne.n	8017592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017588:	6839      	ldr	r1, [r7, #0]
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f000 fbc7 	bl	8017d1e <USBD_CtlError>
                  break;
 8017590:	e041      	b.n	8017616 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017596:	2b00      	cmp	r3, #0
 8017598:	da0b      	bge.n	80175b2 <USBD_StdEPReq+0x2b2>
 801759a:	7bbb      	ldrb	r3, [r7, #14]
 801759c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175a0:	4613      	mov	r3, r2
 80175a2:	009b      	lsls	r3, r3, #2
 80175a4:	4413      	add	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	3310      	adds	r3, #16
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	4413      	add	r3, r2
 80175ae:	3304      	adds	r3, #4
 80175b0:	e00b      	b.n	80175ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80175b2:	7bbb      	ldrb	r3, [r7, #14]
 80175b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80175b8:	4613      	mov	r3, r2
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	4413      	add	r3, r2
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80175c4:	687a      	ldr	r2, [r7, #4]
 80175c6:	4413      	add	r3, r2
 80175c8:	3304      	adds	r3, #4
 80175ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80175cc:	7bbb      	ldrb	r3, [r7, #14]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d002      	beq.n	80175d8 <USBD_StdEPReq+0x2d8>
 80175d2:	7bbb      	ldrb	r3, [r7, #14]
 80175d4:	2b80      	cmp	r3, #128	@ 0x80
 80175d6:	d103      	bne.n	80175e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	2200      	movs	r2, #0
 80175dc:	601a      	str	r2, [r3, #0]
 80175de:	e00e      	b.n	80175fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80175e0:	7bbb      	ldrb	r3, [r7, #14]
 80175e2:	4619      	mov	r1, r3
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f001 f8cf 	bl	8018788 <USBD_LL_IsStallEP>
 80175ea:	4603      	mov	r3, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d003      	beq.n	80175f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	2201      	movs	r2, #1
 80175f4:	601a      	str	r2, [r3, #0]
 80175f6:	e002      	b.n	80175fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	2200      	movs	r2, #0
 80175fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	2202      	movs	r2, #2
 8017602:	4619      	mov	r1, r3
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f000 fc07 	bl	8017e18 <USBD_CtlSendData>
              break;
 801760a:	e004      	b.n	8017616 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801760c:	6839      	ldr	r1, [r7, #0]
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 fb85 	bl	8017d1e <USBD_CtlError>
              break;
 8017614:	bf00      	nop
          }
          break;
 8017616:	e004      	b.n	8017622 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017618:	6839      	ldr	r1, [r7, #0]
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f000 fb7f 	bl	8017d1e <USBD_CtlError>
          break;
 8017620:	bf00      	nop
      }
      break;
 8017622:	e005      	b.n	8017630 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017624:	6839      	ldr	r1, [r7, #0]
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 fb79 	bl	8017d1e <USBD_CtlError>
      break;
 801762c:	e000      	b.n	8017630 <USBD_StdEPReq+0x330>
      break;
 801762e:	bf00      	nop
  }

  return ret;
 8017630:	7bfb      	ldrb	r3, [r7, #15]
}
 8017632:	4618      	mov	r0, r3
 8017634:	3710      	adds	r7, #16
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b084      	sub	sp, #16
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017646:	2300      	movs	r3, #0
 8017648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801764a:	2300      	movs	r3, #0
 801764c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801764e:	2300      	movs	r3, #0
 8017650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	885b      	ldrh	r3, [r3, #2]
 8017656:	0a1b      	lsrs	r3, r3, #8
 8017658:	b29b      	uxth	r3, r3
 801765a:	3b01      	subs	r3, #1
 801765c:	2b0e      	cmp	r3, #14
 801765e:	f200 8152 	bhi.w	8017906 <USBD_GetDescriptor+0x2ca>
 8017662:	a201      	add	r2, pc, #4	@ (adr r2, 8017668 <USBD_GetDescriptor+0x2c>)
 8017664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017668:	080176d9 	.word	0x080176d9
 801766c:	080176f1 	.word	0x080176f1
 8017670:	08017731 	.word	0x08017731
 8017674:	08017907 	.word	0x08017907
 8017678:	08017907 	.word	0x08017907
 801767c:	080178a7 	.word	0x080178a7
 8017680:	080178d3 	.word	0x080178d3
 8017684:	08017907 	.word	0x08017907
 8017688:	08017907 	.word	0x08017907
 801768c:	08017907 	.word	0x08017907
 8017690:	08017907 	.word	0x08017907
 8017694:	08017907 	.word	0x08017907
 8017698:	08017907 	.word	0x08017907
 801769c:	08017907 	.word	0x08017907
 80176a0:	080176a5 	.word	0x080176a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176aa:	69db      	ldr	r3, [r3, #28]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d00b      	beq.n	80176c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176b6:	69db      	ldr	r3, [r3, #28]
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	7c12      	ldrb	r2, [r2, #16]
 80176bc:	f107 0108 	add.w	r1, r7, #8
 80176c0:	4610      	mov	r0, r2
 80176c2:	4798      	blx	r3
 80176c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176c6:	e126      	b.n	8017916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176c8:	6839      	ldr	r1, [r7, #0]
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f000 fb27 	bl	8017d1e <USBD_CtlError>
        err++;
 80176d0:	7afb      	ldrb	r3, [r7, #11]
 80176d2:	3301      	adds	r3, #1
 80176d4:	72fb      	strb	r3, [r7, #11]
      break;
 80176d6:	e11e      	b.n	8017916 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	7c12      	ldrb	r2, [r2, #16]
 80176e4:	f107 0108 	add.w	r1, r7, #8
 80176e8:	4610      	mov	r0, r2
 80176ea:	4798      	blx	r3
 80176ec:	60f8      	str	r0, [r7, #12]
      break;
 80176ee:	e112      	b.n	8017916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	7c1b      	ldrb	r3, [r3, #16]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d10d      	bne.n	8017714 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017700:	f107 0208 	add.w	r2, r7, #8
 8017704:	4610      	mov	r0, r2
 8017706:	4798      	blx	r3
 8017708:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	3301      	adds	r3, #1
 801770e:	2202      	movs	r2, #2
 8017710:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017712:	e100      	b.n	8017916 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801771c:	f107 0208 	add.w	r2, r7, #8
 8017720:	4610      	mov	r0, r2
 8017722:	4798      	blx	r3
 8017724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3301      	adds	r3, #1
 801772a:	2202      	movs	r2, #2
 801772c:	701a      	strb	r2, [r3, #0]
      break;
 801772e:	e0f2      	b.n	8017916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	885b      	ldrh	r3, [r3, #2]
 8017734:	b2db      	uxtb	r3, r3
 8017736:	2b05      	cmp	r3, #5
 8017738:	f200 80ac 	bhi.w	8017894 <USBD_GetDescriptor+0x258>
 801773c:	a201      	add	r2, pc, #4	@ (adr r2, 8017744 <USBD_GetDescriptor+0x108>)
 801773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017742:	bf00      	nop
 8017744:	0801775d 	.word	0x0801775d
 8017748:	08017791 	.word	0x08017791
 801774c:	080177c5 	.word	0x080177c5
 8017750:	080177f9 	.word	0x080177f9
 8017754:	0801782d 	.word	0x0801782d
 8017758:	08017861 	.word	0x08017861
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017762:	685b      	ldr	r3, [r3, #4]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00b      	beq.n	8017780 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	7c12      	ldrb	r2, [r2, #16]
 8017774:	f107 0108 	add.w	r1, r7, #8
 8017778:	4610      	mov	r0, r2
 801777a:	4798      	blx	r3
 801777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801777e:	e091      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017780:	6839      	ldr	r1, [r7, #0]
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f000 facb 	bl	8017d1e <USBD_CtlError>
            err++;
 8017788:	7afb      	ldrb	r3, [r7, #11]
 801778a:	3301      	adds	r3, #1
 801778c:	72fb      	strb	r3, [r7, #11]
          break;
 801778e:	e089      	b.n	80178a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017796:	689b      	ldr	r3, [r3, #8]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d00b      	beq.n	80177b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177a2:	689b      	ldr	r3, [r3, #8]
 80177a4:	687a      	ldr	r2, [r7, #4]
 80177a6:	7c12      	ldrb	r2, [r2, #16]
 80177a8:	f107 0108 	add.w	r1, r7, #8
 80177ac:	4610      	mov	r0, r2
 80177ae:	4798      	blx	r3
 80177b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177b2:	e077      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177b4:	6839      	ldr	r1, [r7, #0]
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f000 fab1 	bl	8017d1e <USBD_CtlError>
            err++;
 80177bc:	7afb      	ldrb	r3, [r7, #11]
 80177be:	3301      	adds	r3, #1
 80177c0:	72fb      	strb	r3, [r7, #11]
          break;
 80177c2:	e06f      	b.n	80178a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d00b      	beq.n	80177e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	687a      	ldr	r2, [r7, #4]
 80177da:	7c12      	ldrb	r2, [r2, #16]
 80177dc:	f107 0108 	add.w	r1, r7, #8
 80177e0:	4610      	mov	r0, r2
 80177e2:	4798      	blx	r3
 80177e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177e6:	e05d      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f000 fa97 	bl	8017d1e <USBD_CtlError>
            err++;
 80177f0:	7afb      	ldrb	r3, [r7, #11]
 80177f2:	3301      	adds	r3, #1
 80177f4:	72fb      	strb	r3, [r7, #11]
          break;
 80177f6:	e055      	b.n	80178a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177fe:	691b      	ldr	r3, [r3, #16]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d00b      	beq.n	801781c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801780a:	691b      	ldr	r3, [r3, #16]
 801780c:	687a      	ldr	r2, [r7, #4]
 801780e:	7c12      	ldrb	r2, [r2, #16]
 8017810:	f107 0108 	add.w	r1, r7, #8
 8017814:	4610      	mov	r0, r2
 8017816:	4798      	blx	r3
 8017818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801781a:	e043      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801781c:	6839      	ldr	r1, [r7, #0]
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f000 fa7d 	bl	8017d1e <USBD_CtlError>
            err++;
 8017824:	7afb      	ldrb	r3, [r7, #11]
 8017826:	3301      	adds	r3, #1
 8017828:	72fb      	strb	r3, [r7, #11]
          break;
 801782a:	e03b      	b.n	80178a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017832:	695b      	ldr	r3, [r3, #20]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d00b      	beq.n	8017850 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801783e:	695b      	ldr	r3, [r3, #20]
 8017840:	687a      	ldr	r2, [r7, #4]
 8017842:	7c12      	ldrb	r2, [r2, #16]
 8017844:	f107 0108 	add.w	r1, r7, #8
 8017848:	4610      	mov	r0, r2
 801784a:	4798      	blx	r3
 801784c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801784e:	e029      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017850:	6839      	ldr	r1, [r7, #0]
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f000 fa63 	bl	8017d1e <USBD_CtlError>
            err++;
 8017858:	7afb      	ldrb	r3, [r7, #11]
 801785a:	3301      	adds	r3, #1
 801785c:	72fb      	strb	r3, [r7, #11]
          break;
 801785e:	e021      	b.n	80178a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017866:	699b      	ldr	r3, [r3, #24]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d00b      	beq.n	8017884 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017872:	699b      	ldr	r3, [r3, #24]
 8017874:	687a      	ldr	r2, [r7, #4]
 8017876:	7c12      	ldrb	r2, [r2, #16]
 8017878:	f107 0108 	add.w	r1, r7, #8
 801787c:	4610      	mov	r0, r2
 801787e:	4798      	blx	r3
 8017880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017882:	e00f      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017884:	6839      	ldr	r1, [r7, #0]
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f000 fa49 	bl	8017d1e <USBD_CtlError>
            err++;
 801788c:	7afb      	ldrb	r3, [r7, #11]
 801788e:	3301      	adds	r3, #1
 8017890:	72fb      	strb	r3, [r7, #11]
          break;
 8017892:	e007      	b.n	80178a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f000 fa41 	bl	8017d1e <USBD_CtlError>
          err++;
 801789c:	7afb      	ldrb	r3, [r7, #11]
 801789e:	3301      	adds	r3, #1
 80178a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80178a2:	bf00      	nop
      }
      break;
 80178a4:	e037      	b.n	8017916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	7c1b      	ldrb	r3, [r3, #16]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d109      	bne.n	80178c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80178b6:	f107 0208 	add.w	r2, r7, #8
 80178ba:	4610      	mov	r0, r2
 80178bc:	4798      	blx	r3
 80178be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80178c0:	e029      	b.n	8017916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80178c2:	6839      	ldr	r1, [r7, #0]
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f000 fa2a 	bl	8017d1e <USBD_CtlError>
        err++;
 80178ca:	7afb      	ldrb	r3, [r7, #11]
 80178cc:	3301      	adds	r3, #1
 80178ce:	72fb      	strb	r3, [r7, #11]
      break;
 80178d0:	e021      	b.n	8017916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	7c1b      	ldrb	r3, [r3, #16]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d10d      	bne.n	80178f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80178e2:	f107 0208 	add.w	r2, r7, #8
 80178e6:	4610      	mov	r0, r2
 80178e8:	4798      	blx	r3
 80178ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	3301      	adds	r3, #1
 80178f0:	2207      	movs	r2, #7
 80178f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80178f4:	e00f      	b.n	8017916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80178f6:	6839      	ldr	r1, [r7, #0]
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f000 fa10 	bl	8017d1e <USBD_CtlError>
        err++;
 80178fe:	7afb      	ldrb	r3, [r7, #11]
 8017900:	3301      	adds	r3, #1
 8017902:	72fb      	strb	r3, [r7, #11]
      break;
 8017904:	e007      	b.n	8017916 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017906:	6839      	ldr	r1, [r7, #0]
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f000 fa08 	bl	8017d1e <USBD_CtlError>
      err++;
 801790e:	7afb      	ldrb	r3, [r7, #11]
 8017910:	3301      	adds	r3, #1
 8017912:	72fb      	strb	r3, [r7, #11]
      break;
 8017914:	bf00      	nop
  }

  if (err != 0U)
 8017916:	7afb      	ldrb	r3, [r7, #11]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d11e      	bne.n	801795a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	88db      	ldrh	r3, [r3, #6]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d016      	beq.n	8017952 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017924:	893b      	ldrh	r3, [r7, #8]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00e      	beq.n	8017948 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	88da      	ldrh	r2, [r3, #6]
 801792e:	893b      	ldrh	r3, [r7, #8]
 8017930:	4293      	cmp	r3, r2
 8017932:	bf28      	it	cs
 8017934:	4613      	movcs	r3, r2
 8017936:	b29b      	uxth	r3, r3
 8017938:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801793a:	893b      	ldrh	r3, [r7, #8]
 801793c:	461a      	mov	r2, r3
 801793e:	68f9      	ldr	r1, [r7, #12]
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f000 fa69 	bl	8017e18 <USBD_CtlSendData>
 8017946:	e009      	b.n	801795c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017948:	6839      	ldr	r1, [r7, #0]
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 f9e7 	bl	8017d1e <USBD_CtlError>
 8017950:	e004      	b.n	801795c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f000 faba 	bl	8017ecc <USBD_CtlSendStatus>
 8017958:	e000      	b.n	801795c <USBD_GetDescriptor+0x320>
    return;
 801795a:	bf00      	nop
  }
}
 801795c:	3710      	adds	r7, #16
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}
 8017962:	bf00      	nop

08017964 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b084      	sub	sp, #16
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
 801796c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	889b      	ldrh	r3, [r3, #4]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d131      	bne.n	80179da <USBD_SetAddress+0x76>
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	88db      	ldrh	r3, [r3, #6]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d12d      	bne.n	80179da <USBD_SetAddress+0x76>
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	885b      	ldrh	r3, [r3, #2]
 8017982:	2b7f      	cmp	r3, #127	@ 0x7f
 8017984:	d829      	bhi.n	80179da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	885b      	ldrh	r3, [r3, #2]
 801798a:	b2db      	uxtb	r3, r3
 801798c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017998:	b2db      	uxtb	r3, r3
 801799a:	2b03      	cmp	r3, #3
 801799c:	d104      	bne.n	80179a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801799e:	6839      	ldr	r1, [r7, #0]
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f000 f9bc 	bl	8017d1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179a6:	e01d      	b.n	80179e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	7bfa      	ldrb	r2, [r7, #15]
 80179ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80179b0:	7bfb      	ldrb	r3, [r7, #15]
 80179b2:	4619      	mov	r1, r3
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f000 ff13 	bl	80187e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	f000 fa86 	bl	8017ecc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80179c0:	7bfb      	ldrb	r3, [r7, #15]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d004      	beq.n	80179d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2202      	movs	r2, #2
 80179ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179ce:	e009      	b.n	80179e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2201      	movs	r2, #1
 80179d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179d8:	e004      	b.n	80179e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80179da:	6839      	ldr	r1, [r7, #0]
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f000 f99e 	bl	8017d1e <USBD_CtlError>
  }
}
 80179e2:	bf00      	nop
 80179e4:	bf00      	nop
 80179e6:	3710      	adds	r7, #16
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}

080179ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80179f6:	2300      	movs	r3, #0
 80179f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	885b      	ldrh	r3, [r3, #2]
 80179fe:	b2da      	uxtb	r2, r3
 8017a00:	4b4e      	ldr	r3, [pc, #312]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017a04:	4b4d      	ldr	r3, [pc, #308]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	2b01      	cmp	r3, #1
 8017a0a:	d905      	bls.n	8017a18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017a0c:	6839      	ldr	r1, [r7, #0]
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f000 f985 	bl	8017d1e <USBD_CtlError>
    return USBD_FAIL;
 8017a14:	2303      	movs	r3, #3
 8017a16:	e08c      	b.n	8017b32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	2b02      	cmp	r3, #2
 8017a22:	d002      	beq.n	8017a2a <USBD_SetConfig+0x3e>
 8017a24:	2b03      	cmp	r3, #3
 8017a26:	d029      	beq.n	8017a7c <USBD_SetConfig+0x90>
 8017a28:	e075      	b.n	8017b16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017a2a:	4b44      	ldr	r3, [pc, #272]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a2c:	781b      	ldrb	r3, [r3, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d020      	beq.n	8017a74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017a32:	4b42      	ldr	r3, [pc, #264]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a34:	781b      	ldrb	r3, [r3, #0]
 8017a36:	461a      	mov	r2, r3
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	4619      	mov	r1, r3
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f7fe ffb9 	bl	80169ba <USBD_SetClassConfig>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017a4c:	7bfb      	ldrb	r3, [r7, #15]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d008      	beq.n	8017a64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017a52:	6839      	ldr	r1, [r7, #0]
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f000 f962 	bl	8017d1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2202      	movs	r2, #2
 8017a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017a62:	e065      	b.n	8017b30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f000 fa31 	bl	8017ecc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2203      	movs	r2, #3
 8017a6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017a72:	e05d      	b.n	8017b30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	f000 fa29 	bl	8017ecc <USBD_CtlSendStatus>
      break;
 8017a7a:	e059      	b.n	8017b30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d112      	bne.n	8017aaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	2202      	movs	r2, #2
 8017a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	461a      	mov	r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017a96:	4b29      	ldr	r3, [pc, #164]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f7fe ffa8 	bl	80169f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f000 fa12 	bl	8017ecc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017aa8:	e042      	b.n	8017b30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017aaa:	4b24      	ldr	r3, [pc, #144]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017aac:	781b      	ldrb	r3, [r3, #0]
 8017aae:	461a      	mov	r2, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d02a      	beq.n	8017b0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	4619      	mov	r1, r3
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f7fe ff96 	bl	80169f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	461a      	mov	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	4619      	mov	r1, r3
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7fe ff6f 	bl	80169ba <USBD_SetClassConfig>
 8017adc:	4603      	mov	r3, r0
 8017ade:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017ae0:	7bfb      	ldrb	r3, [r7, #15]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d00f      	beq.n	8017b06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017ae6:	6839      	ldr	r1, [r7, #0]
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f000 f918 	bl	8017d1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	685b      	ldr	r3, [r3, #4]
 8017af2:	b2db      	uxtb	r3, r3
 8017af4:	4619      	mov	r1, r3
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f7fe ff7b 	bl	80169f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2202      	movs	r2, #2
 8017b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017b04:	e014      	b.n	8017b30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 f9e0 	bl	8017ecc <USBD_CtlSendStatus>
      break;
 8017b0c:	e010      	b.n	8017b30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f000 f9dc 	bl	8017ecc <USBD_CtlSendStatus>
      break;
 8017b14:	e00c      	b.n	8017b30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	6878      	ldr	r0, [r7, #4]
 8017b1a:	f000 f900 	bl	8017d1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017b1e:	4b07      	ldr	r3, [pc, #28]	@ (8017b3c <USBD_SetConfig+0x150>)
 8017b20:	781b      	ldrb	r3, [r3, #0]
 8017b22:	4619      	mov	r1, r3
 8017b24:	6878      	ldr	r0, [r7, #4]
 8017b26:	f7fe ff64 	bl	80169f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017b2a:	2303      	movs	r3, #3
 8017b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8017b2e:	bf00      	nop
  }

  return ret;
 8017b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3710      	adds	r7, #16
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bd80      	pop	{r7, pc}
 8017b3a:	bf00      	nop
 8017b3c:	24013914 	.word	0x24013914

08017b40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
 8017b48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	88db      	ldrh	r3, [r3, #6]
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d004      	beq.n	8017b5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017b52:	6839      	ldr	r1, [r7, #0]
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f000 f8e2 	bl	8017d1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017b5a:	e023      	b.n	8017ba4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b62:	b2db      	uxtb	r3, r3
 8017b64:	2b02      	cmp	r3, #2
 8017b66:	dc02      	bgt.n	8017b6e <USBD_GetConfig+0x2e>
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	dc03      	bgt.n	8017b74 <USBD_GetConfig+0x34>
 8017b6c:	e015      	b.n	8017b9a <USBD_GetConfig+0x5a>
 8017b6e:	2b03      	cmp	r3, #3
 8017b70:	d00b      	beq.n	8017b8a <USBD_GetConfig+0x4a>
 8017b72:	e012      	b.n	8017b9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2200      	movs	r2, #0
 8017b78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	3308      	adds	r3, #8
 8017b7e:	2201      	movs	r2, #1
 8017b80:	4619      	mov	r1, r3
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f000 f948 	bl	8017e18 <USBD_CtlSendData>
        break;
 8017b88:	e00c      	b.n	8017ba4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	3304      	adds	r3, #4
 8017b8e:	2201      	movs	r2, #1
 8017b90:	4619      	mov	r1, r3
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f000 f940 	bl	8017e18 <USBD_CtlSendData>
        break;
 8017b98:	e004      	b.n	8017ba4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017b9a:	6839      	ldr	r1, [r7, #0]
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f000 f8be 	bl	8017d1e <USBD_CtlError>
        break;
 8017ba2:	bf00      	nop
}
 8017ba4:	bf00      	nop
 8017ba6:	3708      	adds	r7, #8
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	3b01      	subs	r3, #1
 8017bc0:	2b02      	cmp	r3, #2
 8017bc2:	d81e      	bhi.n	8017c02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	88db      	ldrh	r3, [r3, #6]
 8017bc8:	2b02      	cmp	r3, #2
 8017bca:	d004      	beq.n	8017bd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017bcc:	6839      	ldr	r1, [r7, #0]
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	f000 f8a5 	bl	8017d1e <USBD_CtlError>
        break;
 8017bd4:	e01a      	b.n	8017c0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2201      	movs	r2, #1
 8017bda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d005      	beq.n	8017bf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	f043 0202 	orr.w	r2, r3, #2
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	330c      	adds	r3, #12
 8017bf6:	2202      	movs	r2, #2
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f000 f90c 	bl	8017e18 <USBD_CtlSendData>
      break;
 8017c00:	e004      	b.n	8017c0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017c02:	6839      	ldr	r1, [r7, #0]
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f000 f88a 	bl	8017d1e <USBD_CtlError>
      break;
 8017c0a:	bf00      	nop
  }
}
 8017c0c:	bf00      	nop
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	885b      	ldrh	r3, [r3, #2]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d107      	bne.n	8017c36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2201      	movs	r2, #1
 8017c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f000 f94c 	bl	8017ecc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017c34:	e013      	b.n	8017c5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	885b      	ldrh	r3, [r3, #2]
 8017c3a:	2b02      	cmp	r3, #2
 8017c3c:	d10b      	bne.n	8017c56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	889b      	ldrh	r3, [r3, #4]
 8017c42:	0a1b      	lsrs	r3, r3, #8
 8017c44:	b29b      	uxth	r3, r3
 8017c46:	b2da      	uxtb	r2, r3
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017c4e:	6878      	ldr	r0, [r7, #4]
 8017c50:	f000 f93c 	bl	8017ecc <USBD_CtlSendStatus>
}
 8017c54:	e003      	b.n	8017c5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017c56:	6839      	ldr	r1, [r7, #0]
 8017c58:	6878      	ldr	r0, [r7, #4]
 8017c5a:	f000 f860 	bl	8017d1e <USBD_CtlError>
}
 8017c5e:	bf00      	nop
 8017c60:	3708      	adds	r7, #8
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b082      	sub	sp, #8
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	6078      	str	r0, [r7, #4]
 8017c6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	3b01      	subs	r3, #1
 8017c7a:	2b02      	cmp	r3, #2
 8017c7c:	d80b      	bhi.n	8017c96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	885b      	ldrh	r3, [r3, #2]
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d10c      	bne.n	8017ca0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2200      	movs	r2, #0
 8017c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f000 f91c 	bl	8017ecc <USBD_CtlSendStatus>
      }
      break;
 8017c94:	e004      	b.n	8017ca0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017c96:	6839      	ldr	r1, [r7, #0]
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f000 f840 	bl	8017d1e <USBD_CtlError>
      break;
 8017c9e:	e000      	b.n	8017ca2 <USBD_ClrFeature+0x3c>
      break;
 8017ca0:	bf00      	nop
  }
}
 8017ca2:	bf00      	nop
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b084      	sub	sp, #16
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	781a      	ldrb	r2, [r3, #0]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	781a      	ldrb	r2, [r3, #0]
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017cd4:	68f8      	ldr	r0, [r7, #12]
 8017cd6:	f7ff fa16 	bl	8017106 <SWAPBYTE>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	461a      	mov	r2, r3
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	3301      	adds	r3, #1
 8017cec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017cee:	68f8      	ldr	r0, [r7, #12]
 8017cf0:	f7ff fa09 	bl	8017106 <SWAPBYTE>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	3301      	adds	r3, #1
 8017d00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	3301      	adds	r3, #1
 8017d06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017d08:	68f8      	ldr	r0, [r7, #12]
 8017d0a:	f7ff f9fc 	bl	8017106 <SWAPBYTE>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	461a      	mov	r2, r3
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	80da      	strh	r2, [r3, #6]
}
 8017d16:	bf00      	nop
 8017d18:	3710      	adds	r7, #16
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}

08017d1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b082      	sub	sp, #8
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
 8017d26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017d28:	2180      	movs	r1, #128	@ 0x80
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f000 fcee 	bl	801870c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017d30:	2100      	movs	r1, #0
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f000 fcea 	bl	801870c <USBD_LL_StallEP>
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b086      	sub	sp, #24
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d042      	beq.n	8017ddc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017d5a:	6938      	ldr	r0, [r7, #16]
 8017d5c:	f000 f842 	bl	8017de4 <USBD_GetLen>
 8017d60:	4603      	mov	r3, r0
 8017d62:	3301      	adds	r3, #1
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d6a:	d808      	bhi.n	8017d7e <USBD_GetString+0x3e>
 8017d6c:	6938      	ldr	r0, [r7, #16]
 8017d6e:	f000 f839 	bl	8017de4 <USBD_GetLen>
 8017d72:	4603      	mov	r3, r0
 8017d74:	3301      	adds	r3, #1
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	005b      	lsls	r3, r3, #1
 8017d7a:	b29a      	uxth	r2, r3
 8017d7c:	e001      	b.n	8017d82 <USBD_GetString+0x42>
 8017d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017d86:	7dfb      	ldrb	r3, [r7, #23]
 8017d88:	68ba      	ldr	r2, [r7, #8]
 8017d8a:	4413      	add	r3, r2
 8017d8c:	687a      	ldr	r2, [r7, #4]
 8017d8e:	7812      	ldrb	r2, [r2, #0]
 8017d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8017d92:	7dfb      	ldrb	r3, [r7, #23]
 8017d94:	3301      	adds	r3, #1
 8017d96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017d98:	7dfb      	ldrb	r3, [r7, #23]
 8017d9a:	68ba      	ldr	r2, [r7, #8]
 8017d9c:	4413      	add	r3, r2
 8017d9e:	2203      	movs	r2, #3
 8017da0:	701a      	strb	r2, [r3, #0]
  idx++;
 8017da2:	7dfb      	ldrb	r3, [r7, #23]
 8017da4:	3301      	adds	r3, #1
 8017da6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017da8:	e013      	b.n	8017dd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
 8017dac:	68ba      	ldr	r2, [r7, #8]
 8017dae:	4413      	add	r3, r2
 8017db0:	693a      	ldr	r2, [r7, #16]
 8017db2:	7812      	ldrb	r2, [r2, #0]
 8017db4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017db6:	693b      	ldr	r3, [r7, #16]
 8017db8:	3301      	adds	r3, #1
 8017dba:	613b      	str	r3, [r7, #16]
    idx++;
 8017dbc:	7dfb      	ldrb	r3, [r7, #23]
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017dc2:	7dfb      	ldrb	r3, [r7, #23]
 8017dc4:	68ba      	ldr	r2, [r7, #8]
 8017dc6:	4413      	add	r3, r2
 8017dc8:	2200      	movs	r2, #0
 8017dca:	701a      	strb	r2, [r3, #0]
    idx++;
 8017dcc:	7dfb      	ldrb	r3, [r7, #23]
 8017dce:	3301      	adds	r3, #1
 8017dd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d1e7      	bne.n	8017daa <USBD_GetString+0x6a>
 8017dda:	e000      	b.n	8017dde <USBD_GetString+0x9e>
    return;
 8017ddc:	bf00      	nop
  }
}
 8017dde:	3718      	adds	r7, #24
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017de4:	b480      	push	{r7}
 8017de6:	b085      	sub	sp, #20
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017dec:	2300      	movs	r3, #0
 8017dee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017df4:	e005      	b.n	8017e02 <USBD_GetLen+0x1e>
  {
    len++;
 8017df6:	7bfb      	ldrb	r3, [r7, #15]
 8017df8:	3301      	adds	r3, #1
 8017dfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d1f5      	bne.n	8017df6 <USBD_GetLen+0x12>
  }

  return len;
 8017e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3714      	adds	r7, #20
 8017e10:	46bd      	mov	sp, r7
 8017e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e16:	4770      	bx	lr

08017e18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	2202      	movs	r2, #2
 8017e28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	687a      	ldr	r2, [r7, #4]
 8017e30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	687a      	ldr	r2, [r7, #4]
 8017e36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	68ba      	ldr	r2, [r7, #8]
 8017e3c:	2100      	movs	r1, #0
 8017e3e:	68f8      	ldr	r0, [r7, #12]
 8017e40:	f000 fced 	bl	801881e <USBD_LL_Transmit>

  return USBD_OK;
 8017e44:	2300      	movs	r3, #0
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3710      	adds	r7, #16
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017e4e:	b580      	push	{r7, lr}
 8017e50:	b084      	sub	sp, #16
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	60f8      	str	r0, [r7, #12]
 8017e56:	60b9      	str	r1, [r7, #8]
 8017e58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	68ba      	ldr	r2, [r7, #8]
 8017e5e:	2100      	movs	r1, #0
 8017e60:	68f8      	ldr	r0, [r7, #12]
 8017e62:	f000 fcdc 	bl	801881e <USBD_LL_Transmit>

  return USBD_OK;
 8017e66:	2300      	movs	r3, #0
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3710      	adds	r7, #16
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}

08017e70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b084      	sub	sp, #16
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	60b9      	str	r1, [r7, #8]
 8017e7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2203      	movs	r2, #3
 8017e80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	687a      	ldr	r2, [r7, #4]
 8017e88:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	68ba      	ldr	r2, [r7, #8]
 8017e98:	2100      	movs	r1, #0
 8017e9a:	68f8      	ldr	r0, [r7, #12]
 8017e9c:	f000 fce0 	bl	8018860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ea0:	2300      	movs	r3, #0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}

08017eaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017eaa:	b580      	push	{r7, lr}
 8017eac:	b084      	sub	sp, #16
 8017eae:	af00      	add	r7, sp, #0
 8017eb0:	60f8      	str	r0, [r7, #12]
 8017eb2:	60b9      	str	r1, [r7, #8]
 8017eb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	68ba      	ldr	r2, [r7, #8]
 8017eba:	2100      	movs	r1, #0
 8017ebc:	68f8      	ldr	r0, [r7, #12]
 8017ebe:	f000 fccf 	bl	8018860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ec2:	2300      	movs	r3, #0
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2204      	movs	r2, #4
 8017ed8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017edc:	2300      	movs	r3, #0
 8017ede:	2200      	movs	r2, #0
 8017ee0:	2100      	movs	r1, #0
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f000 fc9b 	bl	801881e <USBD_LL_Transmit>

  return USBD_OK;
 8017ee8:	2300      	movs	r3, #0
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3708      	adds	r7, #8
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017ef2:	b580      	push	{r7, lr}
 8017ef4:	b082      	sub	sp, #8
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2205      	movs	r2, #5
 8017efe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f02:	2300      	movs	r3, #0
 8017f04:	2200      	movs	r2, #0
 8017f06:	2100      	movs	r1, #0
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f000 fca9 	bl	8018860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017f0e:	2300      	movs	r3, #0
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}

08017f18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	4913      	ldr	r1, [pc, #76]	@ (8017f6c <MX_USB_DEVICE_Init+0x54>)
 8017f20:	4813      	ldr	r0, [pc, #76]	@ (8017f70 <MX_USB_DEVICE_Init+0x58>)
 8017f22:	f7fe fccd 	bl	80168c0 <USBD_Init>
 8017f26:	4603      	mov	r3, r0
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d001      	beq.n	8017f30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017f2c:	f7ea f942 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017f30:	4910      	ldr	r1, [pc, #64]	@ (8017f74 <MX_USB_DEVICE_Init+0x5c>)
 8017f32:	480f      	ldr	r0, [pc, #60]	@ (8017f70 <MX_USB_DEVICE_Init+0x58>)
 8017f34:	f7fe fcf4 	bl	8016920 <USBD_RegisterClass>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d001      	beq.n	8017f42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017f3e:	f7ea f939 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017f42:	490d      	ldr	r1, [pc, #52]	@ (8017f78 <MX_USB_DEVICE_Init+0x60>)
 8017f44:	480a      	ldr	r0, [pc, #40]	@ (8017f70 <MX_USB_DEVICE_Init+0x58>)
 8017f46:	f7fe fbeb 	bl	8016720 <USBD_CDC_RegisterInterface>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d001      	beq.n	8017f54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017f50:	f7ea f930 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017f54:	4806      	ldr	r0, [pc, #24]	@ (8017f70 <MX_USB_DEVICE_Init+0x58>)
 8017f56:	f7fe fd19 	bl	801698c <USBD_Start>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017f60:	f7ea f928 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017f64:	f7f5 f94c 	bl	800d200 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017f68:	bf00      	nop
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	240000e0 	.word	0x240000e0
 8017f70:	24013918 	.word	0x24013918
 8017f74:	2400004c 	.word	0x2400004c
 8017f78:	240000cc 	.word	0x240000cc

08017f7c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017f80:	2200      	movs	r2, #0
 8017f82:	4905      	ldr	r1, [pc, #20]	@ (8017f98 <CDC_Init_HS+0x1c>)
 8017f84:	4805      	ldr	r0, [pc, #20]	@ (8017f9c <CDC_Init_HS+0x20>)
 8017f86:	f7fe fbe5 	bl	8016754 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017f8a:	4905      	ldr	r1, [pc, #20]	@ (8017fa0 <CDC_Init_HS+0x24>)
 8017f8c:	4803      	ldr	r0, [pc, #12]	@ (8017f9c <CDC_Init_HS+0x20>)
 8017f8e:	f7fe fc03 	bl	8016798 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f92:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	2401bbf4 	.word	0x2401bbf4
 8017f9c:	24013918 	.word	0x24013918
 8017fa0:	24013bf4 	.word	0x24013bf4

08017fa4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017fa8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	46bd      	mov	sp, r7
 8017fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb2:	4770      	bx	lr

08017fb4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017fb4:	b480      	push	{r7}
 8017fb6:	b083      	sub	sp, #12
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	4603      	mov	r3, r0
 8017fbc:	6039      	str	r1, [r7, #0]
 8017fbe:	71fb      	strb	r3, [r7, #7]
 8017fc0:	4613      	mov	r3, r2
 8017fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8017fc4:	79fb      	ldrb	r3, [r7, #7]
 8017fc6:	2b23      	cmp	r3, #35	@ 0x23
 8017fc8:	d84a      	bhi.n	8018060 <CDC_Control_HS+0xac>
 8017fca:	a201      	add	r2, pc, #4	@ (adr r2, 8017fd0 <CDC_Control_HS+0x1c>)
 8017fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fd0:	08018061 	.word	0x08018061
 8017fd4:	08018061 	.word	0x08018061
 8017fd8:	08018061 	.word	0x08018061
 8017fdc:	08018061 	.word	0x08018061
 8017fe0:	08018061 	.word	0x08018061
 8017fe4:	08018061 	.word	0x08018061
 8017fe8:	08018061 	.word	0x08018061
 8017fec:	08018061 	.word	0x08018061
 8017ff0:	08018061 	.word	0x08018061
 8017ff4:	08018061 	.word	0x08018061
 8017ff8:	08018061 	.word	0x08018061
 8017ffc:	08018061 	.word	0x08018061
 8018000:	08018061 	.word	0x08018061
 8018004:	08018061 	.word	0x08018061
 8018008:	08018061 	.word	0x08018061
 801800c:	08018061 	.word	0x08018061
 8018010:	08018061 	.word	0x08018061
 8018014:	08018061 	.word	0x08018061
 8018018:	08018061 	.word	0x08018061
 801801c:	08018061 	.word	0x08018061
 8018020:	08018061 	.word	0x08018061
 8018024:	08018061 	.word	0x08018061
 8018028:	08018061 	.word	0x08018061
 801802c:	08018061 	.word	0x08018061
 8018030:	08018061 	.word	0x08018061
 8018034:	08018061 	.word	0x08018061
 8018038:	08018061 	.word	0x08018061
 801803c:	08018061 	.word	0x08018061
 8018040:	08018061 	.word	0x08018061
 8018044:	08018061 	.word	0x08018061
 8018048:	08018061 	.word	0x08018061
 801804c:	08018061 	.word	0x08018061
 8018050:	08018061 	.word	0x08018061
 8018054:	08018061 	.word	0x08018061
 8018058:	08018061 	.word	0x08018061
 801805c:	08018061 	.word	0x08018061
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018060:	bf00      	nop
  }

  return (USBD_OK);
 8018062:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8018064:	4618      	mov	r0, r3
 8018066:	370c      	adds	r7, #12
 8018068:	46bd      	mov	sp, r7
 801806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806e:	4770      	bx	lr

08018070 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
 8018078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801807a:	6879      	ldr	r1, [r7, #4]
 801807c:	4808      	ldr	r0, [pc, #32]	@ (80180a0 <CDC_Receive_HS+0x30>)
 801807e:	f7fe fb8b 	bl	8016798 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8018082:	4807      	ldr	r0, [pc, #28]	@ (80180a0 <CDC_Receive_HS+0x30>)
 8018084:	f7fe fbe6 	bl	8016854 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	461a      	mov	r2, r3
 801808e:	6879      	ldr	r1, [r7, #4]
 8018090:	4804      	ldr	r0, [pc, #16]	@ (80180a4 <CDC_Receive_HS+0x34>)
 8018092:	f7ed fbf9 	bl	8005888 <VibeCheckShell_PutInput>

	return (USBD_OK);
 8018096:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8018098:	4618      	mov	r0, r3
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	24013918 	.word	0x24013918
 80180a4:	240009b8 	.word	0x240009b8

080180a8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b084      	sub	sp, #16
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	460b      	mov	r3, r1
 80180b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80180b4:	2300      	movs	r3, #0
 80180b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80180b8:	4b0d      	ldr	r3, [pc, #52]	@ (80180f0 <CDC_Transmit_HS+0x48>)
 80180ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80180be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d001      	beq.n	80180ce <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80180ca:	2301      	movs	r3, #1
 80180cc:	e00b      	b.n	80180e6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80180ce:	887b      	ldrh	r3, [r7, #2]
 80180d0:	461a      	mov	r2, r3
 80180d2:	6879      	ldr	r1, [r7, #4]
 80180d4:	4806      	ldr	r0, [pc, #24]	@ (80180f0 <CDC_Transmit_HS+0x48>)
 80180d6:	f7fe fb3d 	bl	8016754 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80180da:	4805      	ldr	r0, [pc, #20]	@ (80180f0 <CDC_Transmit_HS+0x48>)
 80180dc:	f7fe fb7a 	bl	80167d4 <USBD_CDC_TransmitPacket>
 80180e0:	4603      	mov	r3, r0
 80180e2:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 80180e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	24013918 	.word	0x24013918

080180f4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80180f4:	b480      	push	{r7}
 80180f6:	b087      	sub	sp, #28
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	60f8      	str	r0, [r7, #12]
 80180fc:	60b9      	str	r1, [r7, #8]
 80180fe:	4613      	mov	r3, r2
 8018100:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018102:	2300      	movs	r3, #0
 8018104:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801810a:	4618      	mov	r0, r3
 801810c:	371c      	adds	r7, #28
 801810e:	46bd      	mov	sp, r7
 8018110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018114:	4770      	bx	lr
	...

08018118 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018118:	b480      	push	{r7}
 801811a:	b083      	sub	sp, #12
 801811c:	af00      	add	r7, sp, #0
 801811e:	4603      	mov	r3, r0
 8018120:	6039      	str	r1, [r7, #0]
 8018122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	2212      	movs	r2, #18
 8018128:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801812a:	4b03      	ldr	r3, [pc, #12]	@ (8018138 <USBD_HS_DeviceDescriptor+0x20>)
}
 801812c:	4618      	mov	r0, r3
 801812e:	370c      	adds	r7, #12
 8018130:	46bd      	mov	sp, r7
 8018132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018136:	4770      	bx	lr
 8018138:	24000100 	.word	0x24000100

0801813c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801813c:	b480      	push	{r7}
 801813e:	b083      	sub	sp, #12
 8018140:	af00      	add	r7, sp, #0
 8018142:	4603      	mov	r3, r0
 8018144:	6039      	str	r1, [r7, #0]
 8018146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018148:	683b      	ldr	r3, [r7, #0]
 801814a:	2204      	movs	r2, #4
 801814c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801814e:	4b03      	ldr	r3, [pc, #12]	@ (801815c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018150:	4618      	mov	r0, r3
 8018152:	370c      	adds	r7, #12
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr
 801815c:	24000114 	.word	0x24000114

08018160 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	4603      	mov	r3, r0
 8018168:	6039      	str	r1, [r7, #0]
 801816a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801816c:	79fb      	ldrb	r3, [r7, #7]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d105      	bne.n	801817e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018172:	683a      	ldr	r2, [r7, #0]
 8018174:	4907      	ldr	r1, [pc, #28]	@ (8018194 <USBD_HS_ProductStrDescriptor+0x34>)
 8018176:	4808      	ldr	r0, [pc, #32]	@ (8018198 <USBD_HS_ProductStrDescriptor+0x38>)
 8018178:	f7ff fde2 	bl	8017d40 <USBD_GetString>
 801817c:	e004      	b.n	8018188 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801817e:	683a      	ldr	r2, [r7, #0]
 8018180:	4904      	ldr	r1, [pc, #16]	@ (8018194 <USBD_HS_ProductStrDescriptor+0x34>)
 8018182:	4805      	ldr	r0, [pc, #20]	@ (8018198 <USBD_HS_ProductStrDescriptor+0x38>)
 8018184:	f7ff fddc 	bl	8017d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018188:	4b02      	ldr	r3, [pc, #8]	@ (8018194 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801818a:	4618      	mov	r0, r3
 801818c:	3708      	adds	r7, #8
 801818e:	46bd      	mov	sp, r7
 8018190:	bd80      	pop	{r7, pc}
 8018192:	bf00      	nop
 8018194:	2401c3f4 	.word	0x2401c3f4
 8018198:	0801d9e0 	.word	0x0801d9e0

0801819c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b082      	sub	sp, #8
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	4603      	mov	r3, r0
 80181a4:	6039      	str	r1, [r7, #0]
 80181a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80181a8:	683a      	ldr	r2, [r7, #0]
 80181aa:	4904      	ldr	r1, [pc, #16]	@ (80181bc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80181ac:	4804      	ldr	r0, [pc, #16]	@ (80181c0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80181ae:	f7ff fdc7 	bl	8017d40 <USBD_GetString>
  return USBD_StrDesc;
 80181b2:	4b02      	ldr	r3, [pc, #8]	@ (80181bc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80181b4:	4618      	mov	r0, r3
 80181b6:	3708      	adds	r7, #8
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	2401c3f4 	.word	0x2401c3f4
 80181c0:	0801d9ec 	.word	0x0801d9ec

080181c4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	4603      	mov	r3, r0
 80181cc:	6039      	str	r1, [r7, #0]
 80181ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80181d0:	683b      	ldr	r3, [r7, #0]
 80181d2:	221a      	movs	r2, #26
 80181d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80181d6:	f000 f843 	bl	8018260 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80181da:	4b02      	ldr	r3, [pc, #8]	@ (80181e4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3708      	adds	r7, #8
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	24000118 	.word	0x24000118

080181e8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b082      	sub	sp, #8
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	4603      	mov	r3, r0
 80181f0:	6039      	str	r1, [r7, #0]
 80181f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80181f4:	79fb      	ldrb	r3, [r7, #7]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d105      	bne.n	8018206 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80181fa:	683a      	ldr	r2, [r7, #0]
 80181fc:	4907      	ldr	r1, [pc, #28]	@ (801821c <USBD_HS_ConfigStrDescriptor+0x34>)
 80181fe:	4808      	ldr	r0, [pc, #32]	@ (8018220 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018200:	f7ff fd9e 	bl	8017d40 <USBD_GetString>
 8018204:	e004      	b.n	8018210 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018206:	683a      	ldr	r2, [r7, #0]
 8018208:	4904      	ldr	r1, [pc, #16]	@ (801821c <USBD_HS_ConfigStrDescriptor+0x34>)
 801820a:	4805      	ldr	r0, [pc, #20]	@ (8018220 <USBD_HS_ConfigStrDescriptor+0x38>)
 801820c:	f7ff fd98 	bl	8017d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018210:	4b02      	ldr	r3, [pc, #8]	@ (801821c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018212:	4618      	mov	r0, r3
 8018214:	3708      	adds	r7, #8
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}
 801821a:	bf00      	nop
 801821c:	2401c3f4 	.word	0x2401c3f4
 8018220:	0801d9f8 	.word	0x0801d9f8

08018224 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b082      	sub	sp, #8
 8018228:	af00      	add	r7, sp, #0
 801822a:	4603      	mov	r3, r0
 801822c:	6039      	str	r1, [r7, #0]
 801822e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018230:	79fb      	ldrb	r3, [r7, #7]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d105      	bne.n	8018242 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018236:	683a      	ldr	r2, [r7, #0]
 8018238:	4907      	ldr	r1, [pc, #28]	@ (8018258 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801823a:	4808      	ldr	r0, [pc, #32]	@ (801825c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801823c:	f7ff fd80 	bl	8017d40 <USBD_GetString>
 8018240:	e004      	b.n	801824c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018242:	683a      	ldr	r2, [r7, #0]
 8018244:	4904      	ldr	r1, [pc, #16]	@ (8018258 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018246:	4805      	ldr	r0, [pc, #20]	@ (801825c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018248:	f7ff fd7a 	bl	8017d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 801824c:	4b02      	ldr	r3, [pc, #8]	@ (8018258 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801824e:	4618      	mov	r0, r3
 8018250:	3708      	adds	r7, #8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	2401c3f4 	.word	0x2401c3f4
 801825c:	0801da04 	.word	0x0801da04

08018260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b084      	sub	sp, #16
 8018264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018266:	4b0f      	ldr	r3, [pc, #60]	@ (80182a4 <Get_SerialNum+0x44>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801826c:	4b0e      	ldr	r3, [pc, #56]	@ (80182a8 <Get_SerialNum+0x48>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018272:	4b0e      	ldr	r3, [pc, #56]	@ (80182ac <Get_SerialNum+0x4c>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018278:	68fa      	ldr	r2, [r7, #12]
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	4413      	add	r3, r2
 801827e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d009      	beq.n	801829a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018286:	2208      	movs	r2, #8
 8018288:	4909      	ldr	r1, [pc, #36]	@ (80182b0 <Get_SerialNum+0x50>)
 801828a:	68f8      	ldr	r0, [r7, #12]
 801828c:	f000 f814 	bl	80182b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018290:	2204      	movs	r2, #4
 8018292:	4908      	ldr	r1, [pc, #32]	@ (80182b4 <Get_SerialNum+0x54>)
 8018294:	68b8      	ldr	r0, [r7, #8]
 8018296:	f000 f80f 	bl	80182b8 <IntToUnicode>
  }
}
 801829a:	bf00      	nop
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	1ff1e800 	.word	0x1ff1e800
 80182a8:	1ff1e804 	.word	0x1ff1e804
 80182ac:	1ff1e808 	.word	0x1ff1e808
 80182b0:	2400011a 	.word	0x2400011a
 80182b4:	2400012a 	.word	0x2400012a

080182b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80182b8:	b480      	push	{r7}
 80182ba:	b087      	sub	sp, #28
 80182bc:	af00      	add	r7, sp, #0
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	60b9      	str	r1, [r7, #8]
 80182c2:	4613      	mov	r3, r2
 80182c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80182ca:	2300      	movs	r3, #0
 80182cc:	75fb      	strb	r3, [r7, #23]
 80182ce:	e027      	b.n	8018320 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	0f1b      	lsrs	r3, r3, #28
 80182d4:	2b09      	cmp	r3, #9
 80182d6:	d80b      	bhi.n	80182f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	0f1b      	lsrs	r3, r3, #28
 80182dc:	b2da      	uxtb	r2, r3
 80182de:	7dfb      	ldrb	r3, [r7, #23]
 80182e0:	005b      	lsls	r3, r3, #1
 80182e2:	4619      	mov	r1, r3
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	440b      	add	r3, r1
 80182e8:	3230      	adds	r2, #48	@ 0x30
 80182ea:	b2d2      	uxtb	r2, r2
 80182ec:	701a      	strb	r2, [r3, #0]
 80182ee:	e00a      	b.n	8018306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	0f1b      	lsrs	r3, r3, #28
 80182f4:	b2da      	uxtb	r2, r3
 80182f6:	7dfb      	ldrb	r3, [r7, #23]
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	4619      	mov	r1, r3
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	440b      	add	r3, r1
 8018300:	3237      	adds	r2, #55	@ 0x37
 8018302:	b2d2      	uxtb	r2, r2
 8018304:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	011b      	lsls	r3, r3, #4
 801830a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801830c:	7dfb      	ldrb	r3, [r7, #23]
 801830e:	005b      	lsls	r3, r3, #1
 8018310:	3301      	adds	r3, #1
 8018312:	68ba      	ldr	r2, [r7, #8]
 8018314:	4413      	add	r3, r2
 8018316:	2200      	movs	r2, #0
 8018318:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801831a:	7dfb      	ldrb	r3, [r7, #23]
 801831c:	3301      	adds	r3, #1
 801831e:	75fb      	strb	r3, [r7, #23]
 8018320:	7dfa      	ldrb	r2, [r7, #23]
 8018322:	79fb      	ldrb	r3, [r7, #7]
 8018324:	429a      	cmp	r2, r3
 8018326:	d3d3      	bcc.n	80182d0 <IntToUnicode+0x18>
  }
}
 8018328:	bf00      	nop
 801832a:	bf00      	nop
 801832c:	371c      	adds	r7, #28
 801832e:	46bd      	mov	sp, r7
 8018330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018334:	4770      	bx	lr
	...

08018338 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b0b2      	sub	sp, #200	@ 0xc8
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018340:	f107 0310 	add.w	r3, r7, #16
 8018344:	22b8      	movs	r2, #184	@ 0xb8
 8018346:	2100      	movs	r1, #0
 8018348:	4618      	mov	r0, r3
 801834a:	f001 fea6 	bl	801a09a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	4a1a      	ldr	r2, [pc, #104]	@ (80183bc <HAL_PCD_MspInit+0x84>)
 8018354:	4293      	cmp	r3, r2
 8018356:	d12c      	bne.n	80183b2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018358:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801835c:	f04f 0300 	mov.w	r3, #0
 8018360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018364:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018368:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801836c:	f107 0310 	add.w	r3, r7, #16
 8018370:	4618      	mov	r0, r3
 8018372:	f7f5 febb 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8018376:	4603      	mov	r3, r0
 8018378:	2b00      	cmp	r3, #0
 801837a:	d001      	beq.n	8018380 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801837c:	f7e9 ff1a 	bl	80021b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018380:	f7f4 ff3e 	bl	800d200 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8018384:	4b0e      	ldr	r3, [pc, #56]	@ (80183c0 <HAL_PCD_MspInit+0x88>)
 8018386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801838a:	4a0d      	ldr	r2, [pc, #52]	@ (80183c0 <HAL_PCD_MspInit+0x88>)
 801838c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018390:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018394:	4b0a      	ldr	r3, [pc, #40]	@ (80183c0 <HAL_PCD_MspInit+0x88>)
 8018396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801839a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801839e:	60fb      	str	r3, [r7, #12]
 80183a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 80183a2:	2201      	movs	r2, #1
 80183a4:	2101      	movs	r1, #1
 80183a6:	204d      	movs	r0, #77	@ 0x4d
 80183a8:	f7f0 fcf1 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80183ac:	204d      	movs	r0, #77	@ 0x4d
 80183ae:	f7f0 fd08 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80183b2:	bf00      	nop
 80183b4:	37c8      	adds	r7, #200	@ 0xc8
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	40040000 	.word	0x40040000
 80183c0:	58024400 	.word	0x58024400

080183c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80183d8:	4619      	mov	r1, r3
 80183da:	4610      	mov	r0, r2
 80183dc:	f7fe fb23 	bl	8016a26 <USBD_LL_SetupStage>
}
 80183e0:	bf00      	nop
 80183e2:	3708      	adds	r7, #8
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b082      	sub	sp, #8
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	460b      	mov	r3, r1
 80183f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80183fa:	78fa      	ldrb	r2, [r7, #3]
 80183fc:	6879      	ldr	r1, [r7, #4]
 80183fe:	4613      	mov	r3, r2
 8018400:	00db      	lsls	r3, r3, #3
 8018402:	4413      	add	r3, r2
 8018404:	009b      	lsls	r3, r3, #2
 8018406:	440b      	add	r3, r1
 8018408:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801840c:	681a      	ldr	r2, [r3, #0]
 801840e:	78fb      	ldrb	r3, [r7, #3]
 8018410:	4619      	mov	r1, r3
 8018412:	f7fe fb5d 	bl	8016ad0 <USBD_LL_DataOutStage>
}
 8018416:	bf00      	nop
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}

0801841e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b082      	sub	sp, #8
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
 8018426:	460b      	mov	r3, r1
 8018428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018430:	78fa      	ldrb	r2, [r7, #3]
 8018432:	6879      	ldr	r1, [r7, #4]
 8018434:	4613      	mov	r3, r2
 8018436:	00db      	lsls	r3, r3, #3
 8018438:	4413      	add	r3, r2
 801843a:	009b      	lsls	r3, r3, #2
 801843c:	440b      	add	r3, r1
 801843e:	3320      	adds	r3, #32
 8018440:	681a      	ldr	r2, [r3, #0]
 8018442:	78fb      	ldrb	r3, [r7, #3]
 8018444:	4619      	mov	r1, r3
 8018446:	f7fe fbf6 	bl	8016c36 <USBD_LL_DataInStage>
}
 801844a:	bf00      	nop
 801844c:	3708      	adds	r7, #8
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}

08018452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018452:	b580      	push	{r7, lr}
 8018454:	b082      	sub	sp, #8
 8018456:	af00      	add	r7, sp, #0
 8018458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018460:	4618      	mov	r0, r3
 8018462:	f7fe fd30 	bl	8016ec6 <USBD_LL_SOF>
}
 8018466:	bf00      	nop
 8018468:	3708      	adds	r7, #8
 801846a:	46bd      	mov	sp, r7
 801846c:	bd80      	pop	{r7, pc}

0801846e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801846e:	b580      	push	{r7, lr}
 8018470:	b084      	sub	sp, #16
 8018472:	af00      	add	r7, sp, #0
 8018474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018476:	2301      	movs	r3, #1
 8018478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	79db      	ldrb	r3, [r3, #7]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d102      	bne.n	8018488 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018482:	2300      	movs	r3, #0
 8018484:	73fb      	strb	r3, [r7, #15]
 8018486:	e008      	b.n	801849a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	79db      	ldrb	r3, [r3, #7]
 801848c:	2b02      	cmp	r3, #2
 801848e:	d102      	bne.n	8018496 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018490:	2301      	movs	r3, #1
 8018492:	73fb      	strb	r3, [r7, #15]
 8018494:	e001      	b.n	801849a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018496:	f7e9 fe8d 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184a0:	7bfa      	ldrb	r2, [r7, #15]
 80184a2:	4611      	mov	r1, r2
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7fe fcca 	bl	8016e3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184b0:	4618      	mov	r0, r3
 80184b2:	f7fe fc72 	bl	8016d9a <USBD_LL_Reset>
}
 80184b6:	bf00      	nop
 80184b8:	3710      	adds	r7, #16
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
	...

080184c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b082      	sub	sp, #8
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7fe fcc5 	bl	8016e5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	687a      	ldr	r2, [r7, #4]
 80184e0:	6812      	ldr	r2, [r2, #0]
 80184e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80184e6:	f043 0301 	orr.w	r3, r3, #1
 80184ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	7adb      	ldrb	r3, [r3, #11]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d005      	beq.n	8018500 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80184f4:	4b04      	ldr	r3, [pc, #16]	@ (8018508 <HAL_PCD_SuspendCallback+0x48>)
 80184f6:	691b      	ldr	r3, [r3, #16]
 80184f8:	4a03      	ldr	r2, [pc, #12]	@ (8018508 <HAL_PCD_SuspendCallback+0x48>)
 80184fa:	f043 0306 	orr.w	r3, r3, #6
 80184fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018500:	bf00      	nop
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}
 8018508:	e000ed00 	.word	0xe000ed00

0801850c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801851a:	4618      	mov	r0, r3
 801851c:	f7fe fcbb 	bl	8016e96 <USBD_LL_Resume>
}
 8018520:	bf00      	nop
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	460b      	mov	r3, r1
 8018532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801853a:	78fa      	ldrb	r2, [r7, #3]
 801853c:	4611      	mov	r1, r2
 801853e:	4618      	mov	r0, r3
 8018540:	f7fe fd13 	bl	8016f6a <USBD_LL_IsoOUTIncomplete>
}
 8018544:	bf00      	nop
 8018546:	3708      	adds	r7, #8
 8018548:	46bd      	mov	sp, r7
 801854a:	bd80      	pop	{r7, pc}

0801854c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b082      	sub	sp, #8
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	460b      	mov	r3, r1
 8018556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801855e:	78fa      	ldrb	r2, [r7, #3]
 8018560:	4611      	mov	r1, r2
 8018562:	4618      	mov	r0, r3
 8018564:	f7fe fccf 	bl	8016f06 <USBD_LL_IsoINIncomplete>
}
 8018568:	bf00      	nop
 801856a:	3708      	adds	r7, #8
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801857e:	4618      	mov	r0, r3
 8018580:	f7fe fd25 	bl	8016fce <USBD_LL_DevConnected>
}
 8018584:	bf00      	nop
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801859a:	4618      	mov	r0, r3
 801859c:	f7fe fd22 	bl	8016fe4 <USBD_LL_DevDisconnected>
}
 80185a0:	bf00      	nop
 80185a2:	3708      	adds	r7, #8
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}

080185a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b082      	sub	sp, #8
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	2b01      	cmp	r3, #1
 80185b6:	d140      	bne.n	801863a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80185b8:	4a22      	ldr	r2, [pc, #136]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	4a20      	ldr	r2, [pc, #128]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80185c8:	4b1e      	ldr	r3, [pc, #120]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185ca:	4a1f      	ldr	r2, [pc, #124]	@ (8018648 <USBD_LL_Init+0xa0>)
 80185cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80185ce:	4b1d      	ldr	r3, [pc, #116]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185d0:	2209      	movs	r2, #9
 80185d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80185d4:	4b1b      	ldr	r3, [pc, #108]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185d6:	2202      	movs	r2, #2
 80185d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80185da:	4b1a      	ldr	r3, [pc, #104]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185dc:	2200      	movs	r2, #0
 80185de:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80185e0:	4b18      	ldr	r3, [pc, #96]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185e2:	2202      	movs	r2, #2
 80185e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80185e6:	4b17      	ldr	r3, [pc, #92]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185e8:	2200      	movs	r2, #0
 80185ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80185ec:	4b15      	ldr	r3, [pc, #84]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185ee:	2200      	movs	r2, #0
 80185f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80185f2:	4b14      	ldr	r3, [pc, #80]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185f4:	2200      	movs	r2, #0
 80185f6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80185f8:	4b12      	ldr	r3, [pc, #72]	@ (8018644 <USBD_LL_Init+0x9c>)
 80185fa:	2200      	movs	r2, #0
 80185fc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80185fe:	4b11      	ldr	r3, [pc, #68]	@ (8018644 <USBD_LL_Init+0x9c>)
 8018600:	2200      	movs	r2, #0
 8018602:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018604:	4b0f      	ldr	r3, [pc, #60]	@ (8018644 <USBD_LL_Init+0x9c>)
 8018606:	2200      	movs	r2, #0
 8018608:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801860a:	480e      	ldr	r0, [pc, #56]	@ (8018644 <USBD_LL_Init+0x9c>)
 801860c:	f7f3 fb1f 	bl	800bc4e <HAL_PCD_Init>
 8018610:	4603      	mov	r3, r0
 8018612:	2b00      	cmp	r3, #0
 8018614:	d001      	beq.n	801861a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018616:	f7e9 fdcd 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801861a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801861e:	4809      	ldr	r0, [pc, #36]	@ (8018644 <USBD_LL_Init+0x9c>)
 8018620:	f7f4 fd73 	bl	800d10a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8018624:	2280      	movs	r2, #128	@ 0x80
 8018626:	2100      	movs	r1, #0
 8018628:	4806      	ldr	r0, [pc, #24]	@ (8018644 <USBD_LL_Init+0x9c>)
 801862a:	f7f4 fd27 	bl	800d07c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801862e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8018632:	2101      	movs	r1, #1
 8018634:	4803      	ldr	r0, [pc, #12]	@ (8018644 <USBD_LL_Init+0x9c>)
 8018636:	f7f4 fd21 	bl	800d07c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3708      	adds	r7, #8
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	2401c5f4 	.word	0x2401c5f4
 8018648:	40040000 	.word	0x40040000

0801864c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018654:	2300      	movs	r3, #0
 8018656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018658:	2300      	movs	r3, #0
 801865a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018662:	4618      	mov	r0, r3
 8018664:	f7f3 fbff 	bl	800be66 <HAL_PCD_Start>
 8018668:	4603      	mov	r3, r0
 801866a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801866c:	7bfb      	ldrb	r3, [r7, #15]
 801866e:	4618      	mov	r0, r3
 8018670:	f000 f942 	bl	80188f8 <USBD_Get_USB_Status>
 8018674:	4603      	mov	r3, r0
 8018676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018678:	7bbb      	ldrb	r3, [r7, #14]
}
 801867a:	4618      	mov	r0, r3
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b084      	sub	sp, #16
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
 801868a:	4608      	mov	r0, r1
 801868c:	4611      	mov	r1, r2
 801868e:	461a      	mov	r2, r3
 8018690:	4603      	mov	r3, r0
 8018692:	70fb      	strb	r3, [r7, #3]
 8018694:	460b      	mov	r3, r1
 8018696:	70bb      	strb	r3, [r7, #2]
 8018698:	4613      	mov	r3, r2
 801869a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801869c:	2300      	movs	r3, #0
 801869e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186a0:	2300      	movs	r3, #0
 80186a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80186aa:	78bb      	ldrb	r3, [r7, #2]
 80186ac:	883a      	ldrh	r2, [r7, #0]
 80186ae:	78f9      	ldrb	r1, [r7, #3]
 80186b0:	f7f4 f900 	bl	800c8b4 <HAL_PCD_EP_Open>
 80186b4:	4603      	mov	r3, r0
 80186b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186b8:	7bfb      	ldrb	r3, [r7, #15]
 80186ba:	4618      	mov	r0, r3
 80186bc:	f000 f91c 	bl	80188f8 <USBD_Get_USB_Status>
 80186c0:	4603      	mov	r3, r0
 80186c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	3710      	adds	r7, #16
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}

080186ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186ce:	b580      	push	{r7, lr}
 80186d0:	b084      	sub	sp, #16
 80186d2:	af00      	add	r7, sp, #0
 80186d4:	6078      	str	r0, [r7, #4]
 80186d6:	460b      	mov	r3, r1
 80186d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186da:	2300      	movs	r3, #0
 80186dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186de:	2300      	movs	r3, #0
 80186e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80186e8:	78fa      	ldrb	r2, [r7, #3]
 80186ea:	4611      	mov	r1, r2
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7f4 f949 	bl	800c984 <HAL_PCD_EP_Close>
 80186f2:	4603      	mov	r3, r0
 80186f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186f6:	7bfb      	ldrb	r3, [r7, #15]
 80186f8:	4618      	mov	r0, r3
 80186fa:	f000 f8fd 	bl	80188f8 <USBD_Get_USB_Status>
 80186fe:	4603      	mov	r3, r0
 8018700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018702:	7bbb      	ldrb	r3, [r7, #14]
}
 8018704:	4618      	mov	r0, r3
 8018706:	3710      	adds	r7, #16
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	460b      	mov	r3, r1
 8018716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018718:	2300      	movs	r3, #0
 801871a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801871c:	2300      	movs	r3, #0
 801871e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018726:	78fa      	ldrb	r2, [r7, #3]
 8018728:	4611      	mov	r1, r2
 801872a:	4618      	mov	r0, r3
 801872c:	f7f4 fa01 	bl	800cb32 <HAL_PCD_EP_SetStall>
 8018730:	4603      	mov	r3, r0
 8018732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018734:	7bfb      	ldrb	r3, [r7, #15]
 8018736:	4618      	mov	r0, r3
 8018738:	f000 f8de 	bl	80188f8 <USBD_Get_USB_Status>
 801873c:	4603      	mov	r3, r0
 801873e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018740:	7bbb      	ldrb	r3, [r7, #14]
}
 8018742:	4618      	mov	r0, r3
 8018744:	3710      	adds	r7, #16
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}

0801874a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801874a:	b580      	push	{r7, lr}
 801874c:	b084      	sub	sp, #16
 801874e:	af00      	add	r7, sp, #0
 8018750:	6078      	str	r0, [r7, #4]
 8018752:	460b      	mov	r3, r1
 8018754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018756:	2300      	movs	r3, #0
 8018758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801875a:	2300      	movs	r3, #0
 801875c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018764:	78fa      	ldrb	r2, [r7, #3]
 8018766:	4611      	mov	r1, r2
 8018768:	4618      	mov	r0, r3
 801876a:	f7f4 fa45 	bl	800cbf8 <HAL_PCD_EP_ClrStall>
 801876e:	4603      	mov	r3, r0
 8018770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018772:	7bfb      	ldrb	r3, [r7, #15]
 8018774:	4618      	mov	r0, r3
 8018776:	f000 f8bf 	bl	80188f8 <USBD_Get_USB_Status>
 801877a:	4603      	mov	r3, r0
 801877c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801877e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018780:	4618      	mov	r0, r3
 8018782:	3710      	adds	r7, #16
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018788:	b480      	push	{r7}
 801878a:	b085      	sub	sp, #20
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
 8018790:	460b      	mov	r3, r1
 8018792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801879a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801879c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	da0b      	bge.n	80187bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80187a4:	78fb      	ldrb	r3, [r7, #3]
 80187a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187aa:	68f9      	ldr	r1, [r7, #12]
 80187ac:	4613      	mov	r3, r2
 80187ae:	00db      	lsls	r3, r3, #3
 80187b0:	4413      	add	r3, r2
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	440b      	add	r3, r1
 80187b6:	3316      	adds	r3, #22
 80187b8:	781b      	ldrb	r3, [r3, #0]
 80187ba:	e00b      	b.n	80187d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187bc:	78fb      	ldrb	r3, [r7, #3]
 80187be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187c2:	68f9      	ldr	r1, [r7, #12]
 80187c4:	4613      	mov	r3, r2
 80187c6:	00db      	lsls	r3, r3, #3
 80187c8:	4413      	add	r3, r2
 80187ca:	009b      	lsls	r3, r3, #2
 80187cc:	440b      	add	r3, r1
 80187ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80187d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3714      	adds	r7, #20
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b084      	sub	sp, #16
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	460b      	mov	r3, r1
 80187ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187ec:	2300      	movs	r3, #0
 80187ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187f0:	2300      	movs	r3, #0
 80187f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80187fa:	78fa      	ldrb	r2, [r7, #3]
 80187fc:	4611      	mov	r1, r2
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f4 f834 	bl	800c86c <HAL_PCD_SetAddress>
 8018804:	4603      	mov	r3, r0
 8018806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018808:	7bfb      	ldrb	r3, [r7, #15]
 801880a:	4618      	mov	r0, r3
 801880c:	f000 f874 	bl	80188f8 <USBD_Get_USB_Status>
 8018810:	4603      	mov	r3, r0
 8018812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018814:	7bbb      	ldrb	r3, [r7, #14]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3710      	adds	r7, #16
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}

0801881e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801881e:	b580      	push	{r7, lr}
 8018820:	b086      	sub	sp, #24
 8018822:	af00      	add	r7, sp, #0
 8018824:	60f8      	str	r0, [r7, #12]
 8018826:	607a      	str	r2, [r7, #4]
 8018828:	603b      	str	r3, [r7, #0]
 801882a:	460b      	mov	r3, r1
 801882c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801882e:	2300      	movs	r3, #0
 8018830:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018832:	2300      	movs	r3, #0
 8018834:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801883c:	7af9      	ldrb	r1, [r7, #11]
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	f7f4 f93c 	bl	800cabe <HAL_PCD_EP_Transmit>
 8018846:	4603      	mov	r3, r0
 8018848:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801884a:	7dfb      	ldrb	r3, [r7, #23]
 801884c:	4618      	mov	r0, r3
 801884e:	f000 f853 	bl	80188f8 <USBD_Get_USB_Status>
 8018852:	4603      	mov	r3, r0
 8018854:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018856:	7dbb      	ldrb	r3, [r7, #22]
}
 8018858:	4618      	mov	r0, r3
 801885a:	3718      	adds	r7, #24
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b086      	sub	sp, #24
 8018864:	af00      	add	r7, sp, #0
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	607a      	str	r2, [r7, #4]
 801886a:	603b      	str	r3, [r7, #0]
 801886c:	460b      	mov	r3, r1
 801886e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018870:	2300      	movs	r3, #0
 8018872:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018874:	2300      	movs	r3, #0
 8018876:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801887e:	7af9      	ldrb	r1, [r7, #11]
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	687a      	ldr	r2, [r7, #4]
 8018884:	f7f4 f8c8 	bl	800ca18 <HAL_PCD_EP_Receive>
 8018888:	4603      	mov	r3, r0
 801888a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801888c:	7dfb      	ldrb	r3, [r7, #23]
 801888e:	4618      	mov	r0, r3
 8018890:	f000 f832 	bl	80188f8 <USBD_Get_USB_Status>
 8018894:	4603      	mov	r3, r0
 8018896:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018898:	7dbb      	ldrb	r3, [r7, #22]
}
 801889a:	4618      	mov	r0, r3
 801889c:	3718      	adds	r7, #24
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}

080188a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188a2:	b580      	push	{r7, lr}
 80188a4:	b082      	sub	sp, #8
 80188a6:	af00      	add	r7, sp, #0
 80188a8:	6078      	str	r0, [r7, #4]
 80188aa:	460b      	mov	r3, r1
 80188ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80188b4:	78fa      	ldrb	r2, [r7, #3]
 80188b6:	4611      	mov	r1, r2
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7f4 f8e8 	bl	800ca8e <HAL_PCD_EP_GetRxCount>
 80188be:	4603      	mov	r3, r0
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3708      	adds	r7, #8
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}

080188c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80188c8:	b480      	push	{r7}
 80188ca:	b083      	sub	sp, #12
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80188d0:	4b03      	ldr	r3, [pc, #12]	@ (80188e0 <USBD_static_malloc+0x18>)
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	370c      	adds	r7, #12
 80188d6:	46bd      	mov	sp, r7
 80188d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188dc:	4770      	bx	lr
 80188de:	bf00      	nop
 80188e0:	2401cad8 	.word	0x2401cad8

080188e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80188e4:	b480      	push	{r7}
 80188e6:	b083      	sub	sp, #12
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80188ec:	bf00      	nop
 80188ee:	370c      	adds	r7, #12
 80188f0:	46bd      	mov	sp, r7
 80188f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f6:	4770      	bx	lr

080188f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b085      	sub	sp, #20
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	4603      	mov	r3, r0
 8018900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018902:	2300      	movs	r3, #0
 8018904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018906:	79fb      	ldrb	r3, [r7, #7]
 8018908:	2b03      	cmp	r3, #3
 801890a:	d817      	bhi.n	801893c <USBD_Get_USB_Status+0x44>
 801890c:	a201      	add	r2, pc, #4	@ (adr r2, 8018914 <USBD_Get_USB_Status+0x1c>)
 801890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018912:	bf00      	nop
 8018914:	08018925 	.word	0x08018925
 8018918:	0801892b 	.word	0x0801892b
 801891c:	08018931 	.word	0x08018931
 8018920:	08018937 	.word	0x08018937
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018924:	2300      	movs	r3, #0
 8018926:	73fb      	strb	r3, [r7, #15]
    break;
 8018928:	e00b      	b.n	8018942 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801892a:	2303      	movs	r3, #3
 801892c:	73fb      	strb	r3, [r7, #15]
    break;
 801892e:	e008      	b.n	8018942 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018930:	2301      	movs	r3, #1
 8018932:	73fb      	strb	r3, [r7, #15]
    break;
 8018934:	e005      	b.n	8018942 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018936:	2303      	movs	r3, #3
 8018938:	73fb      	strb	r3, [r7, #15]
    break;
 801893a:	e002      	b.n	8018942 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801893c:	2303      	movs	r3, #3
 801893e:	73fb      	strb	r3, [r7, #15]
    break;
 8018940:	bf00      	nop
  }
  return usb_status;
 8018942:	7bfb      	ldrb	r3, [r7, #15]
}
 8018944:	4618      	mov	r0, r3
 8018946:	3714      	adds	r7, #20
 8018948:	46bd      	mov	sp, r7
 801894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894e:	4770      	bx	lr

08018950 <atof>:
 8018950:	2100      	movs	r1, #0
 8018952:	f000 bdb7 	b.w	80194c4 <strtod>

08018956 <atoi>:
 8018956:	220a      	movs	r2, #10
 8018958:	2100      	movs	r1, #0
 801895a:	f000 be39 	b.w	80195d0 <strtol>

0801895e <sulp>:
 801895e:	b570      	push	{r4, r5, r6, lr}
 8018960:	4604      	mov	r4, r0
 8018962:	460d      	mov	r5, r1
 8018964:	4616      	mov	r6, r2
 8018966:	ec45 4b10 	vmov	d0, r4, r5
 801896a:	f003 f9eb 	bl	801bd44 <__ulp>
 801896e:	b17e      	cbz	r6, 8018990 <sulp+0x32>
 8018970:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018974:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018978:	2b00      	cmp	r3, #0
 801897a:	dd09      	ble.n	8018990 <sulp+0x32>
 801897c:	051b      	lsls	r3, r3, #20
 801897e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8018982:	2000      	movs	r0, #0
 8018984:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8018988:	ec41 0b17 	vmov	d7, r0, r1
 801898c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018990:	bd70      	pop	{r4, r5, r6, pc}
 8018992:	0000      	movs	r0, r0
 8018994:	0000      	movs	r0, r0
	...

08018998 <_strtod_l>:
 8018998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801899c:	ed2d 8b0a 	vpush	{d8-d12}
 80189a0:	b097      	sub	sp, #92	@ 0x5c
 80189a2:	4688      	mov	r8, r1
 80189a4:	920e      	str	r2, [sp, #56]	@ 0x38
 80189a6:	2200      	movs	r2, #0
 80189a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80189aa:	9005      	str	r0, [sp, #20]
 80189ac:	f04f 0a00 	mov.w	sl, #0
 80189b0:	f04f 0b00 	mov.w	fp, #0
 80189b4:	460a      	mov	r2, r1
 80189b6:	9211      	str	r2, [sp, #68]	@ 0x44
 80189b8:	7811      	ldrb	r1, [r2, #0]
 80189ba:	292b      	cmp	r1, #43	@ 0x2b
 80189bc:	d04c      	beq.n	8018a58 <_strtod_l+0xc0>
 80189be:	d839      	bhi.n	8018a34 <_strtod_l+0x9c>
 80189c0:	290d      	cmp	r1, #13
 80189c2:	d833      	bhi.n	8018a2c <_strtod_l+0x94>
 80189c4:	2908      	cmp	r1, #8
 80189c6:	d833      	bhi.n	8018a30 <_strtod_l+0x98>
 80189c8:	2900      	cmp	r1, #0
 80189ca:	d03c      	beq.n	8018a46 <_strtod_l+0xae>
 80189cc:	2200      	movs	r2, #0
 80189ce:	9208      	str	r2, [sp, #32]
 80189d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80189d2:	782a      	ldrb	r2, [r5, #0]
 80189d4:	2a30      	cmp	r2, #48	@ 0x30
 80189d6:	f040 80b5 	bne.w	8018b44 <_strtod_l+0x1ac>
 80189da:	786a      	ldrb	r2, [r5, #1]
 80189dc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80189e0:	2a58      	cmp	r2, #88	@ 0x58
 80189e2:	d170      	bne.n	8018ac6 <_strtod_l+0x12e>
 80189e4:	9302      	str	r3, [sp, #8]
 80189e6:	9b08      	ldr	r3, [sp, #32]
 80189e8:	9301      	str	r3, [sp, #4]
 80189ea:	ab12      	add	r3, sp, #72	@ 0x48
 80189ec:	9300      	str	r3, [sp, #0]
 80189ee:	4a8b      	ldr	r2, [pc, #556]	@ (8018c1c <_strtod_l+0x284>)
 80189f0:	9805      	ldr	r0, [sp, #20]
 80189f2:	ab13      	add	r3, sp, #76	@ 0x4c
 80189f4:	a911      	add	r1, sp, #68	@ 0x44
 80189f6:	f002 fa97 	bl	801af28 <__gethex>
 80189fa:	f010 060f 	ands.w	r6, r0, #15
 80189fe:	4604      	mov	r4, r0
 8018a00:	d005      	beq.n	8018a0e <_strtod_l+0x76>
 8018a02:	2e06      	cmp	r6, #6
 8018a04:	d12a      	bne.n	8018a5c <_strtod_l+0xc4>
 8018a06:	3501      	adds	r5, #1
 8018a08:	2300      	movs	r3, #0
 8018a0a:	9511      	str	r5, [sp, #68]	@ 0x44
 8018a0c:	9308      	str	r3, [sp, #32]
 8018a0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	f040 852f 	bne.w	8019474 <_strtod_l+0xadc>
 8018a16:	9b08      	ldr	r3, [sp, #32]
 8018a18:	ec4b ab10 	vmov	d0, sl, fp
 8018a1c:	b1cb      	cbz	r3, 8018a52 <_strtod_l+0xba>
 8018a1e:	eeb1 0b40 	vneg.f64	d0, d0
 8018a22:	b017      	add	sp, #92	@ 0x5c
 8018a24:	ecbd 8b0a 	vpop	{d8-d12}
 8018a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a2c:	2920      	cmp	r1, #32
 8018a2e:	d1cd      	bne.n	80189cc <_strtod_l+0x34>
 8018a30:	3201      	adds	r2, #1
 8018a32:	e7c0      	b.n	80189b6 <_strtod_l+0x1e>
 8018a34:	292d      	cmp	r1, #45	@ 0x2d
 8018a36:	d1c9      	bne.n	80189cc <_strtod_l+0x34>
 8018a38:	2101      	movs	r1, #1
 8018a3a:	9108      	str	r1, [sp, #32]
 8018a3c:	1c51      	adds	r1, r2, #1
 8018a3e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018a40:	7852      	ldrb	r2, [r2, #1]
 8018a42:	2a00      	cmp	r2, #0
 8018a44:	d1c4      	bne.n	80189d0 <_strtod_l+0x38>
 8018a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a48:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f040 850f 	bne.w	8019470 <_strtod_l+0xad8>
 8018a52:	ec4b ab10 	vmov	d0, sl, fp
 8018a56:	e7e4      	b.n	8018a22 <_strtod_l+0x8a>
 8018a58:	2100      	movs	r1, #0
 8018a5a:	e7ee      	b.n	8018a3a <_strtod_l+0xa2>
 8018a5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018a5e:	b13a      	cbz	r2, 8018a70 <_strtod_l+0xd8>
 8018a60:	2135      	movs	r1, #53	@ 0x35
 8018a62:	a814      	add	r0, sp, #80	@ 0x50
 8018a64:	f003 fa65 	bl	801bf32 <__copybits>
 8018a68:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a6a:	9805      	ldr	r0, [sp, #20]
 8018a6c:	f002 fe36 	bl	801b6dc <_Bfree>
 8018a70:	1e73      	subs	r3, r6, #1
 8018a72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018a74:	2b04      	cmp	r3, #4
 8018a76:	d806      	bhi.n	8018a86 <_strtod_l+0xee>
 8018a78:	e8df f003 	tbb	[pc, r3]
 8018a7c:	201d0314 	.word	0x201d0314
 8018a80:	14          	.byte	0x14
 8018a81:	00          	.byte	0x00
 8018a82:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8018a86:	05e3      	lsls	r3, r4, #23
 8018a88:	bf48      	it	mi
 8018a8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018a8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a92:	0d1b      	lsrs	r3, r3, #20
 8018a94:	051b      	lsls	r3, r3, #20
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d1b9      	bne.n	8018a0e <_strtod_l+0x76>
 8018a9a:	f001 fb6f 	bl	801a17c <__errno>
 8018a9e:	2322      	movs	r3, #34	@ 0x22
 8018aa0:	6003      	str	r3, [r0, #0]
 8018aa2:	e7b4      	b.n	8018a0e <_strtod_l+0x76>
 8018aa4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018aa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018aac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018ab0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018ab4:	e7e7      	b.n	8018a86 <_strtod_l+0xee>
 8018ab6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018c24 <_strtod_l+0x28c>
 8018aba:	e7e4      	b.n	8018a86 <_strtod_l+0xee>
 8018abc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018ac0:	f04f 3aff 	mov.w	sl, #4294967295
 8018ac4:	e7df      	b.n	8018a86 <_strtod_l+0xee>
 8018ac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ac8:	1c5a      	adds	r2, r3, #1
 8018aca:	9211      	str	r2, [sp, #68]	@ 0x44
 8018acc:	785b      	ldrb	r3, [r3, #1]
 8018ace:	2b30      	cmp	r3, #48	@ 0x30
 8018ad0:	d0f9      	beq.n	8018ac6 <_strtod_l+0x12e>
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d09b      	beq.n	8018a0e <_strtod_l+0x76>
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	2600      	movs	r6, #0
 8018ada:	9307      	str	r3, [sp, #28]
 8018adc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ae0:	46b1      	mov	r9, r6
 8018ae2:	4635      	mov	r5, r6
 8018ae4:	220a      	movs	r2, #10
 8018ae6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018ae8:	7804      	ldrb	r4, [r0, #0]
 8018aea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018aee:	b2d9      	uxtb	r1, r3
 8018af0:	2909      	cmp	r1, #9
 8018af2:	d929      	bls.n	8018b48 <_strtod_l+0x1b0>
 8018af4:	494a      	ldr	r1, [pc, #296]	@ (8018c20 <_strtod_l+0x288>)
 8018af6:	2201      	movs	r2, #1
 8018af8:	f001 fae4 	bl	801a0c4 <strncmp>
 8018afc:	b378      	cbz	r0, 8018b5e <_strtod_l+0x1c6>
 8018afe:	2000      	movs	r0, #0
 8018b00:	4622      	mov	r2, r4
 8018b02:	462b      	mov	r3, r5
 8018b04:	4607      	mov	r7, r0
 8018b06:	9006      	str	r0, [sp, #24]
 8018b08:	2a65      	cmp	r2, #101	@ 0x65
 8018b0a:	d001      	beq.n	8018b10 <_strtod_l+0x178>
 8018b0c:	2a45      	cmp	r2, #69	@ 0x45
 8018b0e:	d117      	bne.n	8018b40 <_strtod_l+0x1a8>
 8018b10:	b91b      	cbnz	r3, 8018b1a <_strtod_l+0x182>
 8018b12:	9b07      	ldr	r3, [sp, #28]
 8018b14:	4303      	orrs	r3, r0
 8018b16:	d096      	beq.n	8018a46 <_strtod_l+0xae>
 8018b18:	2300      	movs	r3, #0
 8018b1a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8018b1e:	f108 0201 	add.w	r2, r8, #1
 8018b22:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b24:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018b28:	2a2b      	cmp	r2, #43	@ 0x2b
 8018b2a:	d06b      	beq.n	8018c04 <_strtod_l+0x26c>
 8018b2c:	2a2d      	cmp	r2, #45	@ 0x2d
 8018b2e:	d071      	beq.n	8018c14 <_strtod_l+0x27c>
 8018b30:	f04f 0e00 	mov.w	lr, #0
 8018b34:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018b38:	2c09      	cmp	r4, #9
 8018b3a:	d979      	bls.n	8018c30 <_strtod_l+0x298>
 8018b3c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018b40:	2400      	movs	r4, #0
 8018b42:	e094      	b.n	8018c6e <_strtod_l+0x2d6>
 8018b44:	2300      	movs	r3, #0
 8018b46:	e7c7      	b.n	8018ad8 <_strtod_l+0x140>
 8018b48:	2d08      	cmp	r5, #8
 8018b4a:	f100 0001 	add.w	r0, r0, #1
 8018b4e:	bfd4      	ite	le
 8018b50:	fb02 3909 	mlale	r9, r2, r9, r3
 8018b54:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018b58:	3501      	adds	r5, #1
 8018b5a:	9011      	str	r0, [sp, #68]	@ 0x44
 8018b5c:	e7c3      	b.n	8018ae6 <_strtod_l+0x14e>
 8018b5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b60:	1c5a      	adds	r2, r3, #1
 8018b62:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b64:	785a      	ldrb	r2, [r3, #1]
 8018b66:	b375      	cbz	r5, 8018bc6 <_strtod_l+0x22e>
 8018b68:	4607      	mov	r7, r0
 8018b6a:	462b      	mov	r3, r5
 8018b6c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018b70:	2909      	cmp	r1, #9
 8018b72:	d913      	bls.n	8018b9c <_strtod_l+0x204>
 8018b74:	2101      	movs	r1, #1
 8018b76:	9106      	str	r1, [sp, #24]
 8018b78:	e7c6      	b.n	8018b08 <_strtod_l+0x170>
 8018b7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b7c:	1c5a      	adds	r2, r3, #1
 8018b7e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b80:	785a      	ldrb	r2, [r3, #1]
 8018b82:	3001      	adds	r0, #1
 8018b84:	2a30      	cmp	r2, #48	@ 0x30
 8018b86:	d0f8      	beq.n	8018b7a <_strtod_l+0x1e2>
 8018b88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018b8c:	2b08      	cmp	r3, #8
 8018b8e:	f200 8476 	bhi.w	801947e <_strtod_l+0xae6>
 8018b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b96:	4607      	mov	r7, r0
 8018b98:	2000      	movs	r0, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	3a30      	subs	r2, #48	@ 0x30
 8018b9e:	f100 0101 	add.w	r1, r0, #1
 8018ba2:	d023      	beq.n	8018bec <_strtod_l+0x254>
 8018ba4:	440f      	add	r7, r1
 8018ba6:	eb00 0c03 	add.w	ip, r0, r3
 8018baa:	4619      	mov	r1, r3
 8018bac:	240a      	movs	r4, #10
 8018bae:	4561      	cmp	r1, ip
 8018bb0:	d10b      	bne.n	8018bca <_strtod_l+0x232>
 8018bb2:	1c5c      	adds	r4, r3, #1
 8018bb4:	4403      	add	r3, r0
 8018bb6:	2b08      	cmp	r3, #8
 8018bb8:	4404      	add	r4, r0
 8018bba:	dc11      	bgt.n	8018be0 <_strtod_l+0x248>
 8018bbc:	230a      	movs	r3, #10
 8018bbe:	fb03 2909 	mla	r9, r3, r9, r2
 8018bc2:	2100      	movs	r1, #0
 8018bc4:	e013      	b.n	8018bee <_strtod_l+0x256>
 8018bc6:	4628      	mov	r0, r5
 8018bc8:	e7dc      	b.n	8018b84 <_strtod_l+0x1ec>
 8018bca:	2908      	cmp	r1, #8
 8018bcc:	f101 0101 	add.w	r1, r1, #1
 8018bd0:	dc02      	bgt.n	8018bd8 <_strtod_l+0x240>
 8018bd2:	fb04 f909 	mul.w	r9, r4, r9
 8018bd6:	e7ea      	b.n	8018bae <_strtod_l+0x216>
 8018bd8:	2910      	cmp	r1, #16
 8018bda:	bfd8      	it	le
 8018bdc:	4366      	mulle	r6, r4
 8018bde:	e7e6      	b.n	8018bae <_strtod_l+0x216>
 8018be0:	2b0f      	cmp	r3, #15
 8018be2:	dcee      	bgt.n	8018bc2 <_strtod_l+0x22a>
 8018be4:	230a      	movs	r3, #10
 8018be6:	fb03 2606 	mla	r6, r3, r6, r2
 8018bea:	e7ea      	b.n	8018bc2 <_strtod_l+0x22a>
 8018bec:	461c      	mov	r4, r3
 8018bee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018bf0:	1c5a      	adds	r2, r3, #1
 8018bf2:	9211      	str	r2, [sp, #68]	@ 0x44
 8018bf4:	785a      	ldrb	r2, [r3, #1]
 8018bf6:	4608      	mov	r0, r1
 8018bf8:	4623      	mov	r3, r4
 8018bfa:	e7b7      	b.n	8018b6c <_strtod_l+0x1d4>
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	2700      	movs	r7, #0
 8018c00:	9306      	str	r3, [sp, #24]
 8018c02:	e786      	b.n	8018b12 <_strtod_l+0x17a>
 8018c04:	f04f 0e00 	mov.w	lr, #0
 8018c08:	f108 0202 	add.w	r2, r8, #2
 8018c0c:	9211      	str	r2, [sp, #68]	@ 0x44
 8018c0e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018c12:	e78f      	b.n	8018b34 <_strtod_l+0x19c>
 8018c14:	f04f 0e01 	mov.w	lr, #1
 8018c18:	e7f6      	b.n	8018c08 <_strtod_l+0x270>
 8018c1a:	bf00      	nop
 8018c1c:	0801e354 	.word	0x0801e354
 8018c20:	0801e33c 	.word	0x0801e33c
 8018c24:	7ff00000 	.word	0x7ff00000
 8018c28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c2a:	1c54      	adds	r4, r2, #1
 8018c2c:	9411      	str	r4, [sp, #68]	@ 0x44
 8018c2e:	7852      	ldrb	r2, [r2, #1]
 8018c30:	2a30      	cmp	r2, #48	@ 0x30
 8018c32:	d0f9      	beq.n	8018c28 <_strtod_l+0x290>
 8018c34:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018c38:	2c08      	cmp	r4, #8
 8018c3a:	d881      	bhi.n	8018b40 <_strtod_l+0x1a8>
 8018c3c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018c40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c44:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c46:	1c51      	adds	r1, r2, #1
 8018c48:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c4a:	7852      	ldrb	r2, [r2, #1]
 8018c4c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018c50:	2c09      	cmp	r4, #9
 8018c52:	d938      	bls.n	8018cc6 <_strtod_l+0x32e>
 8018c54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c56:	1b0c      	subs	r4, r1, r4
 8018c58:	2c08      	cmp	r4, #8
 8018c5a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018c5e:	dc02      	bgt.n	8018c66 <_strtod_l+0x2ce>
 8018c60:	4564      	cmp	r4, ip
 8018c62:	bfa8      	it	ge
 8018c64:	4664      	movge	r4, ip
 8018c66:	f1be 0f00 	cmp.w	lr, #0
 8018c6a:	d000      	beq.n	8018c6e <_strtod_l+0x2d6>
 8018c6c:	4264      	negs	r4, r4
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d14e      	bne.n	8018d10 <_strtod_l+0x378>
 8018c72:	9b07      	ldr	r3, [sp, #28]
 8018c74:	4318      	orrs	r0, r3
 8018c76:	f47f aeca 	bne.w	8018a0e <_strtod_l+0x76>
 8018c7a:	9b06      	ldr	r3, [sp, #24]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	f47f aee2 	bne.w	8018a46 <_strtod_l+0xae>
 8018c82:	2a69      	cmp	r2, #105	@ 0x69
 8018c84:	d027      	beq.n	8018cd6 <_strtod_l+0x33e>
 8018c86:	dc24      	bgt.n	8018cd2 <_strtod_l+0x33a>
 8018c88:	2a49      	cmp	r2, #73	@ 0x49
 8018c8a:	d024      	beq.n	8018cd6 <_strtod_l+0x33e>
 8018c8c:	2a4e      	cmp	r2, #78	@ 0x4e
 8018c8e:	f47f aeda 	bne.w	8018a46 <_strtod_l+0xae>
 8018c92:	4997      	ldr	r1, [pc, #604]	@ (8018ef0 <_strtod_l+0x558>)
 8018c94:	a811      	add	r0, sp, #68	@ 0x44
 8018c96:	f002 fb69 	bl	801b36c <__match>
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	f43f aed3 	beq.w	8018a46 <_strtod_l+0xae>
 8018ca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	2b28      	cmp	r3, #40	@ 0x28
 8018ca6:	d12d      	bne.n	8018d04 <_strtod_l+0x36c>
 8018ca8:	4992      	ldr	r1, [pc, #584]	@ (8018ef4 <_strtod_l+0x55c>)
 8018caa:	aa14      	add	r2, sp, #80	@ 0x50
 8018cac:	a811      	add	r0, sp, #68	@ 0x44
 8018cae:	f002 fb71 	bl	801b394 <__hexnan>
 8018cb2:	2805      	cmp	r0, #5
 8018cb4:	d126      	bne.n	8018d04 <_strtod_l+0x36c>
 8018cb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cb8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018cbc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018cc0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018cc4:	e6a3      	b.n	8018a0e <_strtod_l+0x76>
 8018cc6:	240a      	movs	r4, #10
 8018cc8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018ccc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018cd0:	e7b8      	b.n	8018c44 <_strtod_l+0x2ac>
 8018cd2:	2a6e      	cmp	r2, #110	@ 0x6e
 8018cd4:	e7db      	b.n	8018c8e <_strtod_l+0x2f6>
 8018cd6:	4988      	ldr	r1, [pc, #544]	@ (8018ef8 <_strtod_l+0x560>)
 8018cd8:	a811      	add	r0, sp, #68	@ 0x44
 8018cda:	f002 fb47 	bl	801b36c <__match>
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	f43f aeb1 	beq.w	8018a46 <_strtod_l+0xae>
 8018ce4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ce6:	4985      	ldr	r1, [pc, #532]	@ (8018efc <_strtod_l+0x564>)
 8018ce8:	3b01      	subs	r3, #1
 8018cea:	a811      	add	r0, sp, #68	@ 0x44
 8018cec:	9311      	str	r3, [sp, #68]	@ 0x44
 8018cee:	f002 fb3d 	bl	801b36c <__match>
 8018cf2:	b910      	cbnz	r0, 8018cfa <_strtod_l+0x362>
 8018cf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	9311      	str	r3, [sp, #68]	@ 0x44
 8018cfa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018f10 <_strtod_l+0x578>
 8018cfe:	f04f 0a00 	mov.w	sl, #0
 8018d02:	e684      	b.n	8018a0e <_strtod_l+0x76>
 8018d04:	487e      	ldr	r0, [pc, #504]	@ (8018f00 <_strtod_l+0x568>)
 8018d06:	f001 fa77 	bl	801a1f8 <nan>
 8018d0a:	ec5b ab10 	vmov	sl, fp, d0
 8018d0e:	e67e      	b.n	8018a0e <_strtod_l+0x76>
 8018d10:	ee07 9a90 	vmov	s15, r9
 8018d14:	1be2      	subs	r2, r4, r7
 8018d16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018d1a:	2d00      	cmp	r5, #0
 8018d1c:	bf08      	it	eq
 8018d1e:	461d      	moveq	r5, r3
 8018d20:	2b10      	cmp	r3, #16
 8018d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d24:	461a      	mov	r2, r3
 8018d26:	bfa8      	it	ge
 8018d28:	2210      	movge	r2, #16
 8018d2a:	2b09      	cmp	r3, #9
 8018d2c:	ec5b ab17 	vmov	sl, fp, d7
 8018d30:	dc15      	bgt.n	8018d5e <_strtod_l+0x3c6>
 8018d32:	1be1      	subs	r1, r4, r7
 8018d34:	2900      	cmp	r1, #0
 8018d36:	f43f ae6a 	beq.w	8018a0e <_strtod_l+0x76>
 8018d3a:	eba4 0107 	sub.w	r1, r4, r7
 8018d3e:	dd72      	ble.n	8018e26 <_strtod_l+0x48e>
 8018d40:	2916      	cmp	r1, #22
 8018d42:	dc59      	bgt.n	8018df8 <_strtod_l+0x460>
 8018d44:	4b6f      	ldr	r3, [pc, #444]	@ (8018f04 <_strtod_l+0x56c>)
 8018d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d4c:	ed93 7b00 	vldr	d7, [r3]
 8018d50:	ec4b ab16 	vmov	d6, sl, fp
 8018d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d58:	ec5b ab17 	vmov	sl, fp, d7
 8018d5c:	e657      	b.n	8018a0e <_strtod_l+0x76>
 8018d5e:	4969      	ldr	r1, [pc, #420]	@ (8018f04 <_strtod_l+0x56c>)
 8018d60:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018d64:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018d68:	ee06 6a90 	vmov	s13, r6
 8018d6c:	2b0f      	cmp	r3, #15
 8018d6e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018d72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018d76:	ec5b ab16 	vmov	sl, fp, d6
 8018d7a:	ddda      	ble.n	8018d32 <_strtod_l+0x39a>
 8018d7c:	1a9a      	subs	r2, r3, r2
 8018d7e:	1be1      	subs	r1, r4, r7
 8018d80:	440a      	add	r2, r1
 8018d82:	2a00      	cmp	r2, #0
 8018d84:	f340 8094 	ble.w	8018eb0 <_strtod_l+0x518>
 8018d88:	f012 000f 	ands.w	r0, r2, #15
 8018d8c:	d00a      	beq.n	8018da4 <_strtod_l+0x40c>
 8018d8e:	495d      	ldr	r1, [pc, #372]	@ (8018f04 <_strtod_l+0x56c>)
 8018d90:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018d94:	ed91 7b00 	vldr	d7, [r1]
 8018d98:	ec4b ab16 	vmov	d6, sl, fp
 8018d9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018da0:	ec5b ab17 	vmov	sl, fp, d7
 8018da4:	f032 020f 	bics.w	r2, r2, #15
 8018da8:	d073      	beq.n	8018e92 <_strtod_l+0x4fa>
 8018daa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018dae:	dd47      	ble.n	8018e40 <_strtod_l+0x4a8>
 8018db0:	2400      	movs	r4, #0
 8018db2:	4625      	mov	r5, r4
 8018db4:	9407      	str	r4, [sp, #28]
 8018db6:	4626      	mov	r6, r4
 8018db8:	9a05      	ldr	r2, [sp, #20]
 8018dba:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018f10 <_strtod_l+0x578>
 8018dbe:	2322      	movs	r3, #34	@ 0x22
 8018dc0:	6013      	str	r3, [r2, #0]
 8018dc2:	f04f 0a00 	mov.w	sl, #0
 8018dc6:	9b07      	ldr	r3, [sp, #28]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	f43f ae20 	beq.w	8018a0e <_strtod_l+0x76>
 8018dce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018dd0:	9805      	ldr	r0, [sp, #20]
 8018dd2:	f002 fc83 	bl	801b6dc <_Bfree>
 8018dd6:	9805      	ldr	r0, [sp, #20]
 8018dd8:	4631      	mov	r1, r6
 8018dda:	f002 fc7f 	bl	801b6dc <_Bfree>
 8018dde:	9805      	ldr	r0, [sp, #20]
 8018de0:	4629      	mov	r1, r5
 8018de2:	f002 fc7b 	bl	801b6dc <_Bfree>
 8018de6:	9907      	ldr	r1, [sp, #28]
 8018de8:	9805      	ldr	r0, [sp, #20]
 8018dea:	f002 fc77 	bl	801b6dc <_Bfree>
 8018dee:	9805      	ldr	r0, [sp, #20]
 8018df0:	4621      	mov	r1, r4
 8018df2:	f002 fc73 	bl	801b6dc <_Bfree>
 8018df6:	e60a      	b.n	8018a0e <_strtod_l+0x76>
 8018df8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8018dfc:	1be0      	subs	r0, r4, r7
 8018dfe:	4281      	cmp	r1, r0
 8018e00:	dbbc      	blt.n	8018d7c <_strtod_l+0x3e4>
 8018e02:	4a40      	ldr	r2, [pc, #256]	@ (8018f04 <_strtod_l+0x56c>)
 8018e04:	f1c3 030f 	rsb	r3, r3, #15
 8018e08:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018e0c:	ed91 7b00 	vldr	d7, [r1]
 8018e10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e12:	ec4b ab16 	vmov	d6, sl, fp
 8018e16:	1acb      	subs	r3, r1, r3
 8018e18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e20:	ed92 6b00 	vldr	d6, [r2]
 8018e24:	e796      	b.n	8018d54 <_strtod_l+0x3bc>
 8018e26:	3116      	adds	r1, #22
 8018e28:	dba8      	blt.n	8018d7c <_strtod_l+0x3e4>
 8018e2a:	4b36      	ldr	r3, [pc, #216]	@ (8018f04 <_strtod_l+0x56c>)
 8018e2c:	1b3c      	subs	r4, r7, r4
 8018e2e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018e32:	ed94 7b00 	vldr	d7, [r4]
 8018e36:	ec4b ab16 	vmov	d6, sl, fp
 8018e3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018e3e:	e78b      	b.n	8018d58 <_strtod_l+0x3c0>
 8018e40:	2000      	movs	r0, #0
 8018e42:	ec4b ab17 	vmov	d7, sl, fp
 8018e46:	4e30      	ldr	r6, [pc, #192]	@ (8018f08 <_strtod_l+0x570>)
 8018e48:	1112      	asrs	r2, r2, #4
 8018e4a:	4601      	mov	r1, r0
 8018e4c:	2a01      	cmp	r2, #1
 8018e4e:	dc23      	bgt.n	8018e98 <_strtod_l+0x500>
 8018e50:	b108      	cbz	r0, 8018e56 <_strtod_l+0x4be>
 8018e52:	ec5b ab17 	vmov	sl, fp, d7
 8018e56:	4a2c      	ldr	r2, [pc, #176]	@ (8018f08 <_strtod_l+0x570>)
 8018e58:	482c      	ldr	r0, [pc, #176]	@ (8018f0c <_strtod_l+0x574>)
 8018e5a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018e5e:	ed92 7b00 	vldr	d7, [r2]
 8018e62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018e66:	ec4b ab16 	vmov	d6, sl, fp
 8018e6a:	4a29      	ldr	r2, [pc, #164]	@ (8018f10 <_strtod_l+0x578>)
 8018e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e70:	ee17 1a90 	vmov	r1, s15
 8018e74:	400a      	ands	r2, r1
 8018e76:	4282      	cmp	r2, r0
 8018e78:	ec5b ab17 	vmov	sl, fp, d7
 8018e7c:	d898      	bhi.n	8018db0 <_strtod_l+0x418>
 8018e7e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018e82:	4282      	cmp	r2, r0
 8018e84:	bf86      	itte	hi
 8018e86:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8018f14 <_strtod_l+0x57c>
 8018e8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8018e8e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018e92:	2200      	movs	r2, #0
 8018e94:	9206      	str	r2, [sp, #24]
 8018e96:	e076      	b.n	8018f86 <_strtod_l+0x5ee>
 8018e98:	f012 0f01 	tst.w	r2, #1
 8018e9c:	d004      	beq.n	8018ea8 <_strtod_l+0x510>
 8018e9e:	ed96 6b00 	vldr	d6, [r6]
 8018ea2:	2001      	movs	r0, #1
 8018ea4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ea8:	3101      	adds	r1, #1
 8018eaa:	1052      	asrs	r2, r2, #1
 8018eac:	3608      	adds	r6, #8
 8018eae:	e7cd      	b.n	8018e4c <_strtod_l+0x4b4>
 8018eb0:	d0ef      	beq.n	8018e92 <_strtod_l+0x4fa>
 8018eb2:	4252      	negs	r2, r2
 8018eb4:	f012 000f 	ands.w	r0, r2, #15
 8018eb8:	d00a      	beq.n	8018ed0 <_strtod_l+0x538>
 8018eba:	4912      	ldr	r1, [pc, #72]	@ (8018f04 <_strtod_l+0x56c>)
 8018ebc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018ec0:	ed91 7b00 	vldr	d7, [r1]
 8018ec4:	ec4b ab16 	vmov	d6, sl, fp
 8018ec8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018ecc:	ec5b ab17 	vmov	sl, fp, d7
 8018ed0:	1112      	asrs	r2, r2, #4
 8018ed2:	d0de      	beq.n	8018e92 <_strtod_l+0x4fa>
 8018ed4:	2a1f      	cmp	r2, #31
 8018ed6:	dd1f      	ble.n	8018f18 <_strtod_l+0x580>
 8018ed8:	2400      	movs	r4, #0
 8018eda:	4625      	mov	r5, r4
 8018edc:	9407      	str	r4, [sp, #28]
 8018ede:	4626      	mov	r6, r4
 8018ee0:	9a05      	ldr	r2, [sp, #20]
 8018ee2:	2322      	movs	r3, #34	@ 0x22
 8018ee4:	f04f 0a00 	mov.w	sl, #0
 8018ee8:	f04f 0b00 	mov.w	fp, #0
 8018eec:	6013      	str	r3, [r2, #0]
 8018eee:	e76a      	b.n	8018dc6 <_strtod_l+0x42e>
 8018ef0:	0801e49e 	.word	0x0801e49e
 8018ef4:	0801e340 	.word	0x0801e340
 8018ef8:	0801e496 	.word	0x0801e496
 8018efc:	0801e4d0 	.word	0x0801e4d0
 8018f00:	0801e75c 	.word	0x0801e75c
 8018f04:	0801e648 	.word	0x0801e648
 8018f08:	0801e620 	.word	0x0801e620
 8018f0c:	7ca00000 	.word	0x7ca00000
 8018f10:	7ff00000 	.word	0x7ff00000
 8018f14:	7fefffff 	.word	0x7fefffff
 8018f18:	f012 0110 	ands.w	r1, r2, #16
 8018f1c:	bf18      	it	ne
 8018f1e:	216a      	movne	r1, #106	@ 0x6a
 8018f20:	9106      	str	r1, [sp, #24]
 8018f22:	ec4b ab17 	vmov	d7, sl, fp
 8018f26:	49b0      	ldr	r1, [pc, #704]	@ (80191e8 <_strtod_l+0x850>)
 8018f28:	2000      	movs	r0, #0
 8018f2a:	07d6      	lsls	r6, r2, #31
 8018f2c:	d504      	bpl.n	8018f38 <_strtod_l+0x5a0>
 8018f2e:	ed91 6b00 	vldr	d6, [r1]
 8018f32:	2001      	movs	r0, #1
 8018f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f38:	1052      	asrs	r2, r2, #1
 8018f3a:	f101 0108 	add.w	r1, r1, #8
 8018f3e:	d1f4      	bne.n	8018f2a <_strtod_l+0x592>
 8018f40:	b108      	cbz	r0, 8018f46 <_strtod_l+0x5ae>
 8018f42:	ec5b ab17 	vmov	sl, fp, d7
 8018f46:	9a06      	ldr	r2, [sp, #24]
 8018f48:	b1b2      	cbz	r2, 8018f78 <_strtod_l+0x5e0>
 8018f4a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018f4e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018f52:	2a00      	cmp	r2, #0
 8018f54:	4658      	mov	r0, fp
 8018f56:	dd0f      	ble.n	8018f78 <_strtod_l+0x5e0>
 8018f58:	2a1f      	cmp	r2, #31
 8018f5a:	dd55      	ble.n	8019008 <_strtod_l+0x670>
 8018f5c:	2a34      	cmp	r2, #52	@ 0x34
 8018f5e:	bfde      	ittt	le
 8018f60:	f04f 32ff 	movle.w	r2, #4294967295
 8018f64:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018f68:	408a      	lslle	r2, r1
 8018f6a:	f04f 0a00 	mov.w	sl, #0
 8018f6e:	bfcc      	ite	gt
 8018f70:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018f74:	ea02 0b00 	andle.w	fp, r2, r0
 8018f78:	ec4b ab17 	vmov	d7, sl, fp
 8018f7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f84:	d0a8      	beq.n	8018ed8 <_strtod_l+0x540>
 8018f86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018f88:	9805      	ldr	r0, [sp, #20]
 8018f8a:	f8cd 9000 	str.w	r9, [sp]
 8018f8e:	462a      	mov	r2, r5
 8018f90:	f002 fc0c 	bl	801b7ac <__s2b>
 8018f94:	9007      	str	r0, [sp, #28]
 8018f96:	2800      	cmp	r0, #0
 8018f98:	f43f af0a 	beq.w	8018db0 <_strtod_l+0x418>
 8018f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f9e:	1b3f      	subs	r7, r7, r4
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	bfb4      	ite	lt
 8018fa4:	463b      	movlt	r3, r7
 8018fa6:	2300      	movge	r3, #0
 8018fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8018faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fac:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80191d8 <_strtod_l+0x840>
 8018fb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fb4:	2400      	movs	r4, #0
 8018fb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fb8:	4625      	mov	r5, r4
 8018fba:	9b07      	ldr	r3, [sp, #28]
 8018fbc:	9805      	ldr	r0, [sp, #20]
 8018fbe:	6859      	ldr	r1, [r3, #4]
 8018fc0:	f002 fb4c 	bl	801b65c <_Balloc>
 8018fc4:	4606      	mov	r6, r0
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	f43f aef6 	beq.w	8018db8 <_strtod_l+0x420>
 8018fcc:	9b07      	ldr	r3, [sp, #28]
 8018fce:	691a      	ldr	r2, [r3, #16]
 8018fd0:	ec4b ab19 	vmov	d9, sl, fp
 8018fd4:	3202      	adds	r2, #2
 8018fd6:	f103 010c 	add.w	r1, r3, #12
 8018fda:	0092      	lsls	r2, r2, #2
 8018fdc:	300c      	adds	r0, #12
 8018fde:	f001 f8fa 	bl	801a1d6 <memcpy>
 8018fe2:	eeb0 0b49 	vmov.f64	d0, d9
 8018fe6:	9805      	ldr	r0, [sp, #20]
 8018fe8:	aa14      	add	r2, sp, #80	@ 0x50
 8018fea:	a913      	add	r1, sp, #76	@ 0x4c
 8018fec:	f002 ff1a 	bl	801be24 <__d2b>
 8018ff0:	9012      	str	r0, [sp, #72]	@ 0x48
 8018ff2:	2800      	cmp	r0, #0
 8018ff4:	f43f aee0 	beq.w	8018db8 <_strtod_l+0x420>
 8018ff8:	9805      	ldr	r0, [sp, #20]
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	f002 fc6c 	bl	801b8d8 <__i2b>
 8019000:	4605      	mov	r5, r0
 8019002:	b940      	cbnz	r0, 8019016 <_strtod_l+0x67e>
 8019004:	2500      	movs	r5, #0
 8019006:	e6d7      	b.n	8018db8 <_strtod_l+0x420>
 8019008:	f04f 31ff 	mov.w	r1, #4294967295
 801900c:	fa01 f202 	lsl.w	r2, r1, r2
 8019010:	ea02 0a0a 	and.w	sl, r2, sl
 8019014:	e7b0      	b.n	8018f78 <_strtod_l+0x5e0>
 8019016:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019018:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801901a:	2f00      	cmp	r7, #0
 801901c:	bfab      	itete	ge
 801901e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019020:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8019022:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019026:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801902a:	bfac      	ite	ge
 801902c:	eb07 0903 	addge.w	r9, r7, r3
 8019030:	eba3 0807 	sublt.w	r8, r3, r7
 8019034:	9b06      	ldr	r3, [sp, #24]
 8019036:	1aff      	subs	r7, r7, r3
 8019038:	4417      	add	r7, r2
 801903a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801903e:	4a6b      	ldr	r2, [pc, #428]	@ (80191ec <_strtod_l+0x854>)
 8019040:	3f01      	subs	r7, #1
 8019042:	4297      	cmp	r7, r2
 8019044:	da51      	bge.n	80190ea <_strtod_l+0x752>
 8019046:	1bd1      	subs	r1, r2, r7
 8019048:	291f      	cmp	r1, #31
 801904a:	eba3 0301 	sub.w	r3, r3, r1
 801904e:	f04f 0201 	mov.w	r2, #1
 8019052:	dc3e      	bgt.n	80190d2 <_strtod_l+0x73a>
 8019054:	408a      	lsls	r2, r1
 8019056:	920c      	str	r2, [sp, #48]	@ 0x30
 8019058:	2200      	movs	r2, #0
 801905a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801905c:	eb09 0703 	add.w	r7, r9, r3
 8019060:	4498      	add	r8, r3
 8019062:	9b06      	ldr	r3, [sp, #24]
 8019064:	45b9      	cmp	r9, r7
 8019066:	4498      	add	r8, r3
 8019068:	464b      	mov	r3, r9
 801906a:	bfa8      	it	ge
 801906c:	463b      	movge	r3, r7
 801906e:	4543      	cmp	r3, r8
 8019070:	bfa8      	it	ge
 8019072:	4643      	movge	r3, r8
 8019074:	2b00      	cmp	r3, #0
 8019076:	bfc2      	ittt	gt
 8019078:	1aff      	subgt	r7, r7, r3
 801907a:	eba8 0803 	subgt.w	r8, r8, r3
 801907e:	eba9 0903 	subgt.w	r9, r9, r3
 8019082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019084:	2b00      	cmp	r3, #0
 8019086:	dd16      	ble.n	80190b6 <_strtod_l+0x71e>
 8019088:	4629      	mov	r1, r5
 801908a:	9805      	ldr	r0, [sp, #20]
 801908c:	461a      	mov	r2, r3
 801908e:	f002 fce3 	bl	801ba58 <__pow5mult>
 8019092:	4605      	mov	r5, r0
 8019094:	2800      	cmp	r0, #0
 8019096:	d0b5      	beq.n	8019004 <_strtod_l+0x66c>
 8019098:	4601      	mov	r1, r0
 801909a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801909c:	9805      	ldr	r0, [sp, #20]
 801909e:	f002 fc31 	bl	801b904 <__multiply>
 80190a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80190a4:	2800      	cmp	r0, #0
 80190a6:	f43f ae87 	beq.w	8018db8 <_strtod_l+0x420>
 80190aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80190ac:	9805      	ldr	r0, [sp, #20]
 80190ae:	f002 fb15 	bl	801b6dc <_Bfree>
 80190b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80190b6:	2f00      	cmp	r7, #0
 80190b8:	dc1b      	bgt.n	80190f2 <_strtod_l+0x75a>
 80190ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190bc:	2b00      	cmp	r3, #0
 80190be:	dd21      	ble.n	8019104 <_strtod_l+0x76c>
 80190c0:	4631      	mov	r1, r6
 80190c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190c4:	9805      	ldr	r0, [sp, #20]
 80190c6:	f002 fcc7 	bl	801ba58 <__pow5mult>
 80190ca:	4606      	mov	r6, r0
 80190cc:	b9d0      	cbnz	r0, 8019104 <_strtod_l+0x76c>
 80190ce:	2600      	movs	r6, #0
 80190d0:	e672      	b.n	8018db8 <_strtod_l+0x420>
 80190d2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80190d6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80190da:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80190de:	37e2      	adds	r7, #226	@ 0xe2
 80190e0:	fa02 f107 	lsl.w	r1, r2, r7
 80190e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80190e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80190e8:	e7b8      	b.n	801905c <_strtod_l+0x6c4>
 80190ea:	2200      	movs	r2, #0
 80190ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190ee:	2201      	movs	r2, #1
 80190f0:	e7f9      	b.n	80190e6 <_strtod_l+0x74e>
 80190f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80190f4:	9805      	ldr	r0, [sp, #20]
 80190f6:	463a      	mov	r2, r7
 80190f8:	f002 fd08 	bl	801bb0c <__lshift>
 80190fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80190fe:	2800      	cmp	r0, #0
 8019100:	d1db      	bne.n	80190ba <_strtod_l+0x722>
 8019102:	e659      	b.n	8018db8 <_strtod_l+0x420>
 8019104:	f1b8 0f00 	cmp.w	r8, #0
 8019108:	dd07      	ble.n	801911a <_strtod_l+0x782>
 801910a:	4631      	mov	r1, r6
 801910c:	9805      	ldr	r0, [sp, #20]
 801910e:	4642      	mov	r2, r8
 8019110:	f002 fcfc 	bl	801bb0c <__lshift>
 8019114:	4606      	mov	r6, r0
 8019116:	2800      	cmp	r0, #0
 8019118:	d0d9      	beq.n	80190ce <_strtod_l+0x736>
 801911a:	f1b9 0f00 	cmp.w	r9, #0
 801911e:	dd08      	ble.n	8019132 <_strtod_l+0x79a>
 8019120:	4629      	mov	r1, r5
 8019122:	9805      	ldr	r0, [sp, #20]
 8019124:	464a      	mov	r2, r9
 8019126:	f002 fcf1 	bl	801bb0c <__lshift>
 801912a:	4605      	mov	r5, r0
 801912c:	2800      	cmp	r0, #0
 801912e:	f43f ae43 	beq.w	8018db8 <_strtod_l+0x420>
 8019132:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019134:	9805      	ldr	r0, [sp, #20]
 8019136:	4632      	mov	r2, r6
 8019138:	f002 fd70 	bl	801bc1c <__mdiff>
 801913c:	4604      	mov	r4, r0
 801913e:	2800      	cmp	r0, #0
 8019140:	f43f ae3a 	beq.w	8018db8 <_strtod_l+0x420>
 8019144:	2300      	movs	r3, #0
 8019146:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801914a:	60c3      	str	r3, [r0, #12]
 801914c:	4629      	mov	r1, r5
 801914e:	f002 fd49 	bl	801bbe4 <__mcmp>
 8019152:	2800      	cmp	r0, #0
 8019154:	da4e      	bge.n	80191f4 <_strtod_l+0x85c>
 8019156:	ea58 080a 	orrs.w	r8, r8, sl
 801915a:	d174      	bne.n	8019246 <_strtod_l+0x8ae>
 801915c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019160:	2b00      	cmp	r3, #0
 8019162:	d170      	bne.n	8019246 <_strtod_l+0x8ae>
 8019164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019168:	0d1b      	lsrs	r3, r3, #20
 801916a:	051b      	lsls	r3, r3, #20
 801916c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019170:	d969      	bls.n	8019246 <_strtod_l+0x8ae>
 8019172:	6963      	ldr	r3, [r4, #20]
 8019174:	b913      	cbnz	r3, 801917c <_strtod_l+0x7e4>
 8019176:	6923      	ldr	r3, [r4, #16]
 8019178:	2b01      	cmp	r3, #1
 801917a:	dd64      	ble.n	8019246 <_strtod_l+0x8ae>
 801917c:	4621      	mov	r1, r4
 801917e:	2201      	movs	r2, #1
 8019180:	9805      	ldr	r0, [sp, #20]
 8019182:	f002 fcc3 	bl	801bb0c <__lshift>
 8019186:	4629      	mov	r1, r5
 8019188:	4604      	mov	r4, r0
 801918a:	f002 fd2b 	bl	801bbe4 <__mcmp>
 801918e:	2800      	cmp	r0, #0
 8019190:	dd59      	ble.n	8019246 <_strtod_l+0x8ae>
 8019192:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019196:	9a06      	ldr	r2, [sp, #24]
 8019198:	0d1b      	lsrs	r3, r3, #20
 801919a:	051b      	lsls	r3, r3, #20
 801919c:	2a00      	cmp	r2, #0
 801919e:	d070      	beq.n	8019282 <_strtod_l+0x8ea>
 80191a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80191a4:	d86d      	bhi.n	8019282 <_strtod_l+0x8ea>
 80191a6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80191aa:	f67f ae99 	bls.w	8018ee0 <_strtod_l+0x548>
 80191ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80191e0 <_strtod_l+0x848>
 80191b2:	ec4b ab16 	vmov	d6, sl, fp
 80191b6:	4b0e      	ldr	r3, [pc, #56]	@ (80191f0 <_strtod_l+0x858>)
 80191b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80191bc:	ee17 2a90 	vmov	r2, s15
 80191c0:	4013      	ands	r3, r2
 80191c2:	ec5b ab17 	vmov	sl, fp, d7
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	f47f ae01 	bne.w	8018dce <_strtod_l+0x436>
 80191cc:	9a05      	ldr	r2, [sp, #20]
 80191ce:	2322      	movs	r3, #34	@ 0x22
 80191d0:	6013      	str	r3, [r2, #0]
 80191d2:	e5fc      	b.n	8018dce <_strtod_l+0x436>
 80191d4:	f3af 8000 	nop.w
 80191d8:	ffc00000 	.word	0xffc00000
 80191dc:	41dfffff 	.word	0x41dfffff
 80191e0:	00000000 	.word	0x00000000
 80191e4:	39500000 	.word	0x39500000
 80191e8:	0801e368 	.word	0x0801e368
 80191ec:	fffffc02 	.word	0xfffffc02
 80191f0:	7ff00000 	.word	0x7ff00000
 80191f4:	46d9      	mov	r9, fp
 80191f6:	d15d      	bne.n	80192b4 <_strtod_l+0x91c>
 80191f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80191fc:	f1b8 0f00 	cmp.w	r8, #0
 8019200:	d02a      	beq.n	8019258 <_strtod_l+0x8c0>
 8019202:	4aab      	ldr	r2, [pc, #684]	@ (80194b0 <_strtod_l+0xb18>)
 8019204:	4293      	cmp	r3, r2
 8019206:	d12a      	bne.n	801925e <_strtod_l+0x8c6>
 8019208:	9b06      	ldr	r3, [sp, #24]
 801920a:	4652      	mov	r2, sl
 801920c:	b1fb      	cbz	r3, 801924e <_strtod_l+0x8b6>
 801920e:	4ba9      	ldr	r3, [pc, #676]	@ (80194b4 <_strtod_l+0xb1c>)
 8019210:	ea0b 0303 	and.w	r3, fp, r3
 8019214:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019218:	f04f 31ff 	mov.w	r1, #4294967295
 801921c:	d81a      	bhi.n	8019254 <_strtod_l+0x8bc>
 801921e:	0d1b      	lsrs	r3, r3, #20
 8019220:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019224:	fa01 f303 	lsl.w	r3, r1, r3
 8019228:	429a      	cmp	r2, r3
 801922a:	d118      	bne.n	801925e <_strtod_l+0x8c6>
 801922c:	4ba2      	ldr	r3, [pc, #648]	@ (80194b8 <_strtod_l+0xb20>)
 801922e:	4599      	cmp	r9, r3
 8019230:	d102      	bne.n	8019238 <_strtod_l+0x8a0>
 8019232:	3201      	adds	r2, #1
 8019234:	f43f adc0 	beq.w	8018db8 <_strtod_l+0x420>
 8019238:	4b9e      	ldr	r3, [pc, #632]	@ (80194b4 <_strtod_l+0xb1c>)
 801923a:	ea09 0303 	and.w	r3, r9, r3
 801923e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019242:	f04f 0a00 	mov.w	sl, #0
 8019246:	9b06      	ldr	r3, [sp, #24]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d1b0      	bne.n	80191ae <_strtod_l+0x816>
 801924c:	e5bf      	b.n	8018dce <_strtod_l+0x436>
 801924e:	f04f 33ff 	mov.w	r3, #4294967295
 8019252:	e7e9      	b.n	8019228 <_strtod_l+0x890>
 8019254:	460b      	mov	r3, r1
 8019256:	e7e7      	b.n	8019228 <_strtod_l+0x890>
 8019258:	ea53 030a 	orrs.w	r3, r3, sl
 801925c:	d099      	beq.n	8019192 <_strtod_l+0x7fa>
 801925e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019260:	b1c3      	cbz	r3, 8019294 <_strtod_l+0x8fc>
 8019262:	ea13 0f09 	tst.w	r3, r9
 8019266:	d0ee      	beq.n	8019246 <_strtod_l+0x8ae>
 8019268:	9a06      	ldr	r2, [sp, #24]
 801926a:	4650      	mov	r0, sl
 801926c:	4659      	mov	r1, fp
 801926e:	f1b8 0f00 	cmp.w	r8, #0
 8019272:	d013      	beq.n	801929c <_strtod_l+0x904>
 8019274:	f7ff fb73 	bl	801895e <sulp>
 8019278:	ee39 7b00 	vadd.f64	d7, d9, d0
 801927c:	ec5b ab17 	vmov	sl, fp, d7
 8019280:	e7e1      	b.n	8019246 <_strtod_l+0x8ae>
 8019282:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019286:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801928a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801928e:	f04f 3aff 	mov.w	sl, #4294967295
 8019292:	e7d8      	b.n	8019246 <_strtod_l+0x8ae>
 8019294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019296:	ea13 0f0a 	tst.w	r3, sl
 801929a:	e7e4      	b.n	8019266 <_strtod_l+0x8ce>
 801929c:	f7ff fb5f 	bl	801895e <sulp>
 80192a0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80192a4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80192a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ac:	ec5b ab10 	vmov	sl, fp, d0
 80192b0:	d1c9      	bne.n	8019246 <_strtod_l+0x8ae>
 80192b2:	e615      	b.n	8018ee0 <_strtod_l+0x548>
 80192b4:	4629      	mov	r1, r5
 80192b6:	4620      	mov	r0, r4
 80192b8:	f002 fe0c 	bl	801bed4 <__ratio>
 80192bc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80192c0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80192c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c8:	d85d      	bhi.n	8019386 <_strtod_l+0x9ee>
 80192ca:	f1b8 0f00 	cmp.w	r8, #0
 80192ce:	d164      	bne.n	801939a <_strtod_l+0xa02>
 80192d0:	f1ba 0f00 	cmp.w	sl, #0
 80192d4:	d14b      	bne.n	801936e <_strtod_l+0x9d6>
 80192d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80192da:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d160      	bne.n	80193a4 <_strtod_l+0xa0c>
 80192e2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80192e6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80192ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ee:	d401      	bmi.n	80192f4 <_strtod_l+0x95c>
 80192f0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80192f4:	eeb1 ab48 	vneg.f64	d10, d8
 80192f8:	486e      	ldr	r0, [pc, #440]	@ (80194b4 <_strtod_l+0xb1c>)
 80192fa:	4970      	ldr	r1, [pc, #448]	@ (80194bc <_strtod_l+0xb24>)
 80192fc:	ea09 0700 	and.w	r7, r9, r0
 8019300:	428f      	cmp	r7, r1
 8019302:	ec53 2b1a 	vmov	r2, r3, d10
 8019306:	d17d      	bne.n	8019404 <_strtod_l+0xa6c>
 8019308:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801930c:	ec4b ab1c 	vmov	d12, sl, fp
 8019310:	eeb0 0b4c 	vmov.f64	d0, d12
 8019314:	f002 fd16 	bl	801bd44 <__ulp>
 8019318:	4866      	ldr	r0, [pc, #408]	@ (80194b4 <_strtod_l+0xb1c>)
 801931a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801931e:	ee1c 3a90 	vmov	r3, s25
 8019322:	4a67      	ldr	r2, [pc, #412]	@ (80194c0 <_strtod_l+0xb28>)
 8019324:	ea03 0100 	and.w	r1, r3, r0
 8019328:	4291      	cmp	r1, r2
 801932a:	ec5b ab1c 	vmov	sl, fp, d12
 801932e:	d93c      	bls.n	80193aa <_strtod_l+0xa12>
 8019330:	ee19 2a90 	vmov	r2, s19
 8019334:	4b60      	ldr	r3, [pc, #384]	@ (80194b8 <_strtod_l+0xb20>)
 8019336:	429a      	cmp	r2, r3
 8019338:	d104      	bne.n	8019344 <_strtod_l+0x9ac>
 801933a:	ee19 3a10 	vmov	r3, s18
 801933e:	3301      	adds	r3, #1
 8019340:	f43f ad3a 	beq.w	8018db8 <_strtod_l+0x420>
 8019344:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80194b8 <_strtod_l+0xb20>
 8019348:	f04f 3aff 	mov.w	sl, #4294967295
 801934c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801934e:	9805      	ldr	r0, [sp, #20]
 8019350:	f002 f9c4 	bl	801b6dc <_Bfree>
 8019354:	9805      	ldr	r0, [sp, #20]
 8019356:	4631      	mov	r1, r6
 8019358:	f002 f9c0 	bl	801b6dc <_Bfree>
 801935c:	9805      	ldr	r0, [sp, #20]
 801935e:	4629      	mov	r1, r5
 8019360:	f002 f9bc 	bl	801b6dc <_Bfree>
 8019364:	9805      	ldr	r0, [sp, #20]
 8019366:	4621      	mov	r1, r4
 8019368:	f002 f9b8 	bl	801b6dc <_Bfree>
 801936c:	e625      	b.n	8018fba <_strtod_l+0x622>
 801936e:	f1ba 0f01 	cmp.w	sl, #1
 8019372:	d103      	bne.n	801937c <_strtod_l+0x9e4>
 8019374:	f1bb 0f00 	cmp.w	fp, #0
 8019378:	f43f adb2 	beq.w	8018ee0 <_strtod_l+0x548>
 801937c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019380:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019384:	e7b8      	b.n	80192f8 <_strtod_l+0x960>
 8019386:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801938a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801938e:	f1b8 0f00 	cmp.w	r8, #0
 8019392:	d0af      	beq.n	80192f4 <_strtod_l+0x95c>
 8019394:	eeb0 ab48 	vmov.f64	d10, d8
 8019398:	e7ae      	b.n	80192f8 <_strtod_l+0x960>
 801939a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801939e:	eeb0 8b4a 	vmov.f64	d8, d10
 80193a2:	e7a9      	b.n	80192f8 <_strtod_l+0x960>
 80193a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80193a8:	e7a6      	b.n	80192f8 <_strtod_l+0x960>
 80193aa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80193ae:	9b06      	ldr	r3, [sp, #24]
 80193b0:	46d9      	mov	r9, fp
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d1ca      	bne.n	801934c <_strtod_l+0x9b4>
 80193b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80193ba:	0d1b      	lsrs	r3, r3, #20
 80193bc:	051b      	lsls	r3, r3, #20
 80193be:	429f      	cmp	r7, r3
 80193c0:	d1c4      	bne.n	801934c <_strtod_l+0x9b4>
 80193c2:	ec51 0b18 	vmov	r0, r1, d8
 80193c6:	f7e7 f9df 	bl	8000788 <__aeabi_d2lz>
 80193ca:	f7e7 f997 	bl	80006fc <__aeabi_l2d>
 80193ce:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80193d2:	ec41 0b17 	vmov	d7, r0, r1
 80193d6:	ea49 090a 	orr.w	r9, r9, sl
 80193da:	ea59 0908 	orrs.w	r9, r9, r8
 80193de:	ee38 8b47 	vsub.f64	d8, d8, d7
 80193e2:	d03c      	beq.n	801945e <_strtod_l+0xac6>
 80193e4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019498 <_strtod_l+0xb00>
 80193e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80193ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f0:	f53f aced 	bmi.w	8018dce <_strtod_l+0x436>
 80193f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80194a0 <_strtod_l+0xb08>
 80193f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80193fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019400:	dda4      	ble.n	801934c <_strtod_l+0x9b4>
 8019402:	e4e4      	b.n	8018dce <_strtod_l+0x436>
 8019404:	9906      	ldr	r1, [sp, #24]
 8019406:	b1e1      	cbz	r1, 8019442 <_strtod_l+0xaaa>
 8019408:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801940c:	d819      	bhi.n	8019442 <_strtod_l+0xaaa>
 801940e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019416:	d811      	bhi.n	801943c <_strtod_l+0xaa4>
 8019418:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801941c:	ee18 3a10 	vmov	r3, s16
 8019420:	2b01      	cmp	r3, #1
 8019422:	bf38      	it	cc
 8019424:	2301      	movcc	r3, #1
 8019426:	ee08 3a10 	vmov	s16, r3
 801942a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801942e:	f1b8 0f00 	cmp.w	r8, #0
 8019432:	d111      	bne.n	8019458 <_strtod_l+0xac0>
 8019434:	eeb1 7b48 	vneg.f64	d7, d8
 8019438:	ec53 2b17 	vmov	r2, r3, d7
 801943c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019440:	1bcb      	subs	r3, r1, r7
 8019442:	eeb0 0b49 	vmov.f64	d0, d9
 8019446:	ec43 2b1a 	vmov	d10, r2, r3
 801944a:	f002 fc7b 	bl	801bd44 <__ulp>
 801944e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019452:	ec5b ab19 	vmov	sl, fp, d9
 8019456:	e7aa      	b.n	80193ae <_strtod_l+0xa16>
 8019458:	eeb0 7b48 	vmov.f64	d7, d8
 801945c:	e7ec      	b.n	8019438 <_strtod_l+0xaa0>
 801945e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80194a8 <_strtod_l+0xb10>
 8019462:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801946a:	f57f af6f 	bpl.w	801934c <_strtod_l+0x9b4>
 801946e:	e4ae      	b.n	8018dce <_strtod_l+0x436>
 8019470:	2300      	movs	r3, #0
 8019472:	9308      	str	r3, [sp, #32]
 8019474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019476:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019478:	6013      	str	r3, [r2, #0]
 801947a:	f7ff bacc 	b.w	8018a16 <_strtod_l+0x7e>
 801947e:	2a65      	cmp	r2, #101	@ 0x65
 8019480:	f43f abbc 	beq.w	8018bfc <_strtod_l+0x264>
 8019484:	2a45      	cmp	r2, #69	@ 0x45
 8019486:	f43f abb9 	beq.w	8018bfc <_strtod_l+0x264>
 801948a:	2301      	movs	r3, #1
 801948c:	9306      	str	r3, [sp, #24]
 801948e:	f7ff bbf0 	b.w	8018c72 <_strtod_l+0x2da>
 8019492:	bf00      	nop
 8019494:	f3af 8000 	nop.w
 8019498:	94a03595 	.word	0x94a03595
 801949c:	3fdfffff 	.word	0x3fdfffff
 80194a0:	35afe535 	.word	0x35afe535
 80194a4:	3fe00000 	.word	0x3fe00000
 80194a8:	94a03595 	.word	0x94a03595
 80194ac:	3fcfffff 	.word	0x3fcfffff
 80194b0:	000fffff 	.word	0x000fffff
 80194b4:	7ff00000 	.word	0x7ff00000
 80194b8:	7fefffff 	.word	0x7fefffff
 80194bc:	7fe00000 	.word	0x7fe00000
 80194c0:	7c9fffff 	.word	0x7c9fffff

080194c4 <strtod>:
 80194c4:	460a      	mov	r2, r1
 80194c6:	4601      	mov	r1, r0
 80194c8:	4802      	ldr	r0, [pc, #8]	@ (80194d4 <strtod+0x10>)
 80194ca:	4b03      	ldr	r3, [pc, #12]	@ (80194d8 <strtod+0x14>)
 80194cc:	6800      	ldr	r0, [r0, #0]
 80194ce:	f7ff ba63 	b.w	8018998 <_strtod_l>
 80194d2:	bf00      	nop
 80194d4:	240002ac 	.word	0x240002ac
 80194d8:	24000140 	.word	0x24000140

080194dc <_strtol_l.constprop.0>:
 80194dc:	2b24      	cmp	r3, #36	@ 0x24
 80194de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194e2:	4686      	mov	lr, r0
 80194e4:	4690      	mov	r8, r2
 80194e6:	d801      	bhi.n	80194ec <_strtol_l.constprop.0+0x10>
 80194e8:	2b01      	cmp	r3, #1
 80194ea:	d106      	bne.n	80194fa <_strtol_l.constprop.0+0x1e>
 80194ec:	f000 fe46 	bl	801a17c <__errno>
 80194f0:	2316      	movs	r3, #22
 80194f2:	6003      	str	r3, [r0, #0]
 80194f4:	2000      	movs	r0, #0
 80194f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194fa:	4834      	ldr	r0, [pc, #208]	@ (80195cc <_strtol_l.constprop.0+0xf0>)
 80194fc:	460d      	mov	r5, r1
 80194fe:	462a      	mov	r2, r5
 8019500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019504:	5d06      	ldrb	r6, [r0, r4]
 8019506:	f016 0608 	ands.w	r6, r6, #8
 801950a:	d1f8      	bne.n	80194fe <_strtol_l.constprop.0+0x22>
 801950c:	2c2d      	cmp	r4, #45	@ 0x2d
 801950e:	d12d      	bne.n	801956c <_strtol_l.constprop.0+0x90>
 8019510:	782c      	ldrb	r4, [r5, #0]
 8019512:	2601      	movs	r6, #1
 8019514:	1c95      	adds	r5, r2, #2
 8019516:	f033 0210 	bics.w	r2, r3, #16
 801951a:	d109      	bne.n	8019530 <_strtol_l.constprop.0+0x54>
 801951c:	2c30      	cmp	r4, #48	@ 0x30
 801951e:	d12a      	bne.n	8019576 <_strtol_l.constprop.0+0x9a>
 8019520:	782a      	ldrb	r2, [r5, #0]
 8019522:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019526:	2a58      	cmp	r2, #88	@ 0x58
 8019528:	d125      	bne.n	8019576 <_strtol_l.constprop.0+0x9a>
 801952a:	786c      	ldrb	r4, [r5, #1]
 801952c:	2310      	movs	r3, #16
 801952e:	3502      	adds	r5, #2
 8019530:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019534:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019538:	2200      	movs	r2, #0
 801953a:	fbbc f9f3 	udiv	r9, ip, r3
 801953e:	4610      	mov	r0, r2
 8019540:	fb03 ca19 	mls	sl, r3, r9, ip
 8019544:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019548:	2f09      	cmp	r7, #9
 801954a:	d81b      	bhi.n	8019584 <_strtol_l.constprop.0+0xa8>
 801954c:	463c      	mov	r4, r7
 801954e:	42a3      	cmp	r3, r4
 8019550:	dd27      	ble.n	80195a2 <_strtol_l.constprop.0+0xc6>
 8019552:	1c57      	adds	r7, r2, #1
 8019554:	d007      	beq.n	8019566 <_strtol_l.constprop.0+0x8a>
 8019556:	4581      	cmp	r9, r0
 8019558:	d320      	bcc.n	801959c <_strtol_l.constprop.0+0xc0>
 801955a:	d101      	bne.n	8019560 <_strtol_l.constprop.0+0x84>
 801955c:	45a2      	cmp	sl, r4
 801955e:	db1d      	blt.n	801959c <_strtol_l.constprop.0+0xc0>
 8019560:	fb00 4003 	mla	r0, r0, r3, r4
 8019564:	2201      	movs	r2, #1
 8019566:	f815 4b01 	ldrb.w	r4, [r5], #1
 801956a:	e7eb      	b.n	8019544 <_strtol_l.constprop.0+0x68>
 801956c:	2c2b      	cmp	r4, #43	@ 0x2b
 801956e:	bf04      	itt	eq
 8019570:	782c      	ldrbeq	r4, [r5, #0]
 8019572:	1c95      	addeq	r5, r2, #2
 8019574:	e7cf      	b.n	8019516 <_strtol_l.constprop.0+0x3a>
 8019576:	2b00      	cmp	r3, #0
 8019578:	d1da      	bne.n	8019530 <_strtol_l.constprop.0+0x54>
 801957a:	2c30      	cmp	r4, #48	@ 0x30
 801957c:	bf0c      	ite	eq
 801957e:	2308      	moveq	r3, #8
 8019580:	230a      	movne	r3, #10
 8019582:	e7d5      	b.n	8019530 <_strtol_l.constprop.0+0x54>
 8019584:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019588:	2f19      	cmp	r7, #25
 801958a:	d801      	bhi.n	8019590 <_strtol_l.constprop.0+0xb4>
 801958c:	3c37      	subs	r4, #55	@ 0x37
 801958e:	e7de      	b.n	801954e <_strtol_l.constprop.0+0x72>
 8019590:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019594:	2f19      	cmp	r7, #25
 8019596:	d804      	bhi.n	80195a2 <_strtol_l.constprop.0+0xc6>
 8019598:	3c57      	subs	r4, #87	@ 0x57
 801959a:	e7d8      	b.n	801954e <_strtol_l.constprop.0+0x72>
 801959c:	f04f 32ff 	mov.w	r2, #4294967295
 80195a0:	e7e1      	b.n	8019566 <_strtol_l.constprop.0+0x8a>
 80195a2:	1c53      	adds	r3, r2, #1
 80195a4:	d108      	bne.n	80195b8 <_strtol_l.constprop.0+0xdc>
 80195a6:	2322      	movs	r3, #34	@ 0x22
 80195a8:	f8ce 3000 	str.w	r3, [lr]
 80195ac:	4660      	mov	r0, ip
 80195ae:	f1b8 0f00 	cmp.w	r8, #0
 80195b2:	d0a0      	beq.n	80194f6 <_strtol_l.constprop.0+0x1a>
 80195b4:	1e69      	subs	r1, r5, #1
 80195b6:	e006      	b.n	80195c6 <_strtol_l.constprop.0+0xea>
 80195b8:	b106      	cbz	r6, 80195bc <_strtol_l.constprop.0+0xe0>
 80195ba:	4240      	negs	r0, r0
 80195bc:	f1b8 0f00 	cmp.w	r8, #0
 80195c0:	d099      	beq.n	80194f6 <_strtol_l.constprop.0+0x1a>
 80195c2:	2a00      	cmp	r2, #0
 80195c4:	d1f6      	bne.n	80195b4 <_strtol_l.constprop.0+0xd8>
 80195c6:	f8c8 1000 	str.w	r1, [r8]
 80195ca:	e794      	b.n	80194f6 <_strtol_l.constprop.0+0x1a>
 80195cc:	0801e391 	.word	0x0801e391

080195d0 <strtol>:
 80195d0:	4613      	mov	r3, r2
 80195d2:	460a      	mov	r2, r1
 80195d4:	4601      	mov	r1, r0
 80195d6:	4802      	ldr	r0, [pc, #8]	@ (80195e0 <strtol+0x10>)
 80195d8:	6800      	ldr	r0, [r0, #0]
 80195da:	f7ff bf7f 	b.w	80194dc <_strtol_l.constprop.0>
 80195de:	bf00      	nop
 80195e0:	240002ac 	.word	0x240002ac

080195e4 <__cvt>:
 80195e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195e6:	ed2d 8b02 	vpush	{d8}
 80195ea:	eeb0 8b40 	vmov.f64	d8, d0
 80195ee:	b085      	sub	sp, #20
 80195f0:	4617      	mov	r7, r2
 80195f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80195f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80195f6:	ee18 2a90 	vmov	r2, s17
 80195fa:	f025 0520 	bic.w	r5, r5, #32
 80195fe:	2a00      	cmp	r2, #0
 8019600:	bfb6      	itet	lt
 8019602:	222d      	movlt	r2, #45	@ 0x2d
 8019604:	2200      	movge	r2, #0
 8019606:	eeb1 8b40 	vneglt.f64	d8, d0
 801960a:	2d46      	cmp	r5, #70	@ 0x46
 801960c:	460c      	mov	r4, r1
 801960e:	701a      	strb	r2, [r3, #0]
 8019610:	d004      	beq.n	801961c <__cvt+0x38>
 8019612:	2d45      	cmp	r5, #69	@ 0x45
 8019614:	d100      	bne.n	8019618 <__cvt+0x34>
 8019616:	3401      	adds	r4, #1
 8019618:	2102      	movs	r1, #2
 801961a:	e000      	b.n	801961e <__cvt+0x3a>
 801961c:	2103      	movs	r1, #3
 801961e:	ab03      	add	r3, sp, #12
 8019620:	9301      	str	r3, [sp, #4]
 8019622:	ab02      	add	r3, sp, #8
 8019624:	9300      	str	r3, [sp, #0]
 8019626:	4622      	mov	r2, r4
 8019628:	4633      	mov	r3, r6
 801962a:	eeb0 0b48 	vmov.f64	d0, d8
 801962e:	f000 fe73 	bl	801a318 <_dtoa_r>
 8019632:	2d47      	cmp	r5, #71	@ 0x47
 8019634:	d114      	bne.n	8019660 <__cvt+0x7c>
 8019636:	07fb      	lsls	r3, r7, #31
 8019638:	d50a      	bpl.n	8019650 <__cvt+0x6c>
 801963a:	1902      	adds	r2, r0, r4
 801963c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019644:	bf08      	it	eq
 8019646:	9203      	streq	r2, [sp, #12]
 8019648:	2130      	movs	r1, #48	@ 0x30
 801964a:	9b03      	ldr	r3, [sp, #12]
 801964c:	4293      	cmp	r3, r2
 801964e:	d319      	bcc.n	8019684 <__cvt+0xa0>
 8019650:	9b03      	ldr	r3, [sp, #12]
 8019652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019654:	1a1b      	subs	r3, r3, r0
 8019656:	6013      	str	r3, [r2, #0]
 8019658:	b005      	add	sp, #20
 801965a:	ecbd 8b02 	vpop	{d8}
 801965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019660:	2d46      	cmp	r5, #70	@ 0x46
 8019662:	eb00 0204 	add.w	r2, r0, r4
 8019666:	d1e9      	bne.n	801963c <__cvt+0x58>
 8019668:	7803      	ldrb	r3, [r0, #0]
 801966a:	2b30      	cmp	r3, #48	@ 0x30
 801966c:	d107      	bne.n	801967e <__cvt+0x9a>
 801966e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019676:	bf1c      	itt	ne
 8019678:	f1c4 0401 	rsbne	r4, r4, #1
 801967c:	6034      	strne	r4, [r6, #0]
 801967e:	6833      	ldr	r3, [r6, #0]
 8019680:	441a      	add	r2, r3
 8019682:	e7db      	b.n	801963c <__cvt+0x58>
 8019684:	1c5c      	adds	r4, r3, #1
 8019686:	9403      	str	r4, [sp, #12]
 8019688:	7019      	strb	r1, [r3, #0]
 801968a:	e7de      	b.n	801964a <__cvt+0x66>

0801968c <__exponent>:
 801968c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801968e:	2900      	cmp	r1, #0
 8019690:	bfba      	itte	lt
 8019692:	4249      	neglt	r1, r1
 8019694:	232d      	movlt	r3, #45	@ 0x2d
 8019696:	232b      	movge	r3, #43	@ 0x2b
 8019698:	2909      	cmp	r1, #9
 801969a:	7002      	strb	r2, [r0, #0]
 801969c:	7043      	strb	r3, [r0, #1]
 801969e:	dd29      	ble.n	80196f4 <__exponent+0x68>
 80196a0:	f10d 0307 	add.w	r3, sp, #7
 80196a4:	461d      	mov	r5, r3
 80196a6:	270a      	movs	r7, #10
 80196a8:	461a      	mov	r2, r3
 80196aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80196ae:	fb07 1416 	mls	r4, r7, r6, r1
 80196b2:	3430      	adds	r4, #48	@ 0x30
 80196b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80196b8:	460c      	mov	r4, r1
 80196ba:	2c63      	cmp	r4, #99	@ 0x63
 80196bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80196c0:	4631      	mov	r1, r6
 80196c2:	dcf1      	bgt.n	80196a8 <__exponent+0x1c>
 80196c4:	3130      	adds	r1, #48	@ 0x30
 80196c6:	1e94      	subs	r4, r2, #2
 80196c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80196cc:	1c41      	adds	r1, r0, #1
 80196ce:	4623      	mov	r3, r4
 80196d0:	42ab      	cmp	r3, r5
 80196d2:	d30a      	bcc.n	80196ea <__exponent+0x5e>
 80196d4:	f10d 0309 	add.w	r3, sp, #9
 80196d8:	1a9b      	subs	r3, r3, r2
 80196da:	42ac      	cmp	r4, r5
 80196dc:	bf88      	it	hi
 80196de:	2300      	movhi	r3, #0
 80196e0:	3302      	adds	r3, #2
 80196e2:	4403      	add	r3, r0
 80196e4:	1a18      	subs	r0, r3, r0
 80196e6:	b003      	add	sp, #12
 80196e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80196ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80196f2:	e7ed      	b.n	80196d0 <__exponent+0x44>
 80196f4:	2330      	movs	r3, #48	@ 0x30
 80196f6:	3130      	adds	r1, #48	@ 0x30
 80196f8:	7083      	strb	r3, [r0, #2]
 80196fa:	70c1      	strb	r1, [r0, #3]
 80196fc:	1d03      	adds	r3, r0, #4
 80196fe:	e7f1      	b.n	80196e4 <__exponent+0x58>

08019700 <_printf_float>:
 8019700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019704:	b08d      	sub	sp, #52	@ 0x34
 8019706:	460c      	mov	r4, r1
 8019708:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801970c:	4616      	mov	r6, r2
 801970e:	461f      	mov	r7, r3
 8019710:	4605      	mov	r5, r0
 8019712:	f000 fce9 	bl	801a0e8 <_localeconv_r>
 8019716:	f8d0 b000 	ldr.w	fp, [r0]
 801971a:	4658      	mov	r0, fp
 801971c:	f7e6 fe58 	bl	80003d0 <strlen>
 8019720:	2300      	movs	r3, #0
 8019722:	930a      	str	r3, [sp, #40]	@ 0x28
 8019724:	f8d8 3000 	ldr.w	r3, [r8]
 8019728:	f894 9018 	ldrb.w	r9, [r4, #24]
 801972c:	6822      	ldr	r2, [r4, #0]
 801972e:	9005      	str	r0, [sp, #20]
 8019730:	3307      	adds	r3, #7
 8019732:	f023 0307 	bic.w	r3, r3, #7
 8019736:	f103 0108 	add.w	r1, r3, #8
 801973a:	f8c8 1000 	str.w	r1, [r8]
 801973e:	ed93 0b00 	vldr	d0, [r3]
 8019742:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80199a0 <_printf_float+0x2a0>
 8019746:	eeb0 7bc0 	vabs.f64	d7, d0
 801974a:	eeb4 7b46 	vcmp.f64	d7, d6
 801974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019752:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019756:	dd24      	ble.n	80197a2 <_printf_float+0xa2>
 8019758:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	d502      	bpl.n	8019768 <_printf_float+0x68>
 8019762:	232d      	movs	r3, #45	@ 0x2d
 8019764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019768:	498f      	ldr	r1, [pc, #572]	@ (80199a8 <_printf_float+0x2a8>)
 801976a:	4b90      	ldr	r3, [pc, #576]	@ (80199ac <_printf_float+0x2ac>)
 801976c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019770:	bf94      	ite	ls
 8019772:	4688      	movls	r8, r1
 8019774:	4698      	movhi	r8, r3
 8019776:	f022 0204 	bic.w	r2, r2, #4
 801977a:	2303      	movs	r3, #3
 801977c:	6123      	str	r3, [r4, #16]
 801977e:	6022      	str	r2, [r4, #0]
 8019780:	f04f 0a00 	mov.w	sl, #0
 8019784:	9700      	str	r7, [sp, #0]
 8019786:	4633      	mov	r3, r6
 8019788:	aa0b      	add	r2, sp, #44	@ 0x2c
 801978a:	4621      	mov	r1, r4
 801978c:	4628      	mov	r0, r5
 801978e:	f000 f9d1 	bl	8019b34 <_printf_common>
 8019792:	3001      	adds	r0, #1
 8019794:	f040 8089 	bne.w	80198aa <_printf_float+0x1aa>
 8019798:	f04f 30ff 	mov.w	r0, #4294967295
 801979c:	b00d      	add	sp, #52	@ 0x34
 801979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80197a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197aa:	d709      	bvc.n	80197c0 <_printf_float+0xc0>
 80197ac:	ee10 3a90 	vmov	r3, s1
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	bfbc      	itt	lt
 80197b4:	232d      	movlt	r3, #45	@ 0x2d
 80197b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80197ba:	497d      	ldr	r1, [pc, #500]	@ (80199b0 <_printf_float+0x2b0>)
 80197bc:	4b7d      	ldr	r3, [pc, #500]	@ (80199b4 <_printf_float+0x2b4>)
 80197be:	e7d5      	b.n	801976c <_printf_float+0x6c>
 80197c0:	6863      	ldr	r3, [r4, #4]
 80197c2:	1c59      	adds	r1, r3, #1
 80197c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80197c8:	d139      	bne.n	801983e <_printf_float+0x13e>
 80197ca:	2306      	movs	r3, #6
 80197cc:	6063      	str	r3, [r4, #4]
 80197ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80197d2:	2300      	movs	r3, #0
 80197d4:	6022      	str	r2, [r4, #0]
 80197d6:	9303      	str	r3, [sp, #12]
 80197d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80197da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80197de:	ab09      	add	r3, sp, #36	@ 0x24
 80197e0:	9300      	str	r3, [sp, #0]
 80197e2:	6861      	ldr	r1, [r4, #4]
 80197e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80197e8:	4628      	mov	r0, r5
 80197ea:	f7ff fefb 	bl	80195e4 <__cvt>
 80197ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80197f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197f4:	4680      	mov	r8, r0
 80197f6:	d129      	bne.n	801984c <_printf_float+0x14c>
 80197f8:	1cc8      	adds	r0, r1, #3
 80197fa:	db02      	blt.n	8019802 <_printf_float+0x102>
 80197fc:	6863      	ldr	r3, [r4, #4]
 80197fe:	4299      	cmp	r1, r3
 8019800:	dd41      	ble.n	8019886 <_printf_float+0x186>
 8019802:	f1a9 0902 	sub.w	r9, r9, #2
 8019806:	fa5f f989 	uxtb.w	r9, r9
 801980a:	3901      	subs	r1, #1
 801980c:	464a      	mov	r2, r9
 801980e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019812:	9109      	str	r1, [sp, #36]	@ 0x24
 8019814:	f7ff ff3a 	bl	801968c <__exponent>
 8019818:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801981a:	1813      	adds	r3, r2, r0
 801981c:	2a01      	cmp	r2, #1
 801981e:	4682      	mov	sl, r0
 8019820:	6123      	str	r3, [r4, #16]
 8019822:	dc02      	bgt.n	801982a <_printf_float+0x12a>
 8019824:	6822      	ldr	r2, [r4, #0]
 8019826:	07d2      	lsls	r2, r2, #31
 8019828:	d501      	bpl.n	801982e <_printf_float+0x12e>
 801982a:	3301      	adds	r3, #1
 801982c:	6123      	str	r3, [r4, #16]
 801982e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019832:	2b00      	cmp	r3, #0
 8019834:	d0a6      	beq.n	8019784 <_printf_float+0x84>
 8019836:	232d      	movs	r3, #45	@ 0x2d
 8019838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801983c:	e7a2      	b.n	8019784 <_printf_float+0x84>
 801983e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019842:	d1c4      	bne.n	80197ce <_printf_float+0xce>
 8019844:	2b00      	cmp	r3, #0
 8019846:	d1c2      	bne.n	80197ce <_printf_float+0xce>
 8019848:	2301      	movs	r3, #1
 801984a:	e7bf      	b.n	80197cc <_printf_float+0xcc>
 801984c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019850:	d9db      	bls.n	801980a <_printf_float+0x10a>
 8019852:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019856:	d118      	bne.n	801988a <_printf_float+0x18a>
 8019858:	2900      	cmp	r1, #0
 801985a:	6863      	ldr	r3, [r4, #4]
 801985c:	dd0b      	ble.n	8019876 <_printf_float+0x176>
 801985e:	6121      	str	r1, [r4, #16]
 8019860:	b913      	cbnz	r3, 8019868 <_printf_float+0x168>
 8019862:	6822      	ldr	r2, [r4, #0]
 8019864:	07d0      	lsls	r0, r2, #31
 8019866:	d502      	bpl.n	801986e <_printf_float+0x16e>
 8019868:	3301      	adds	r3, #1
 801986a:	440b      	add	r3, r1
 801986c:	6123      	str	r3, [r4, #16]
 801986e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019870:	f04f 0a00 	mov.w	sl, #0
 8019874:	e7db      	b.n	801982e <_printf_float+0x12e>
 8019876:	b913      	cbnz	r3, 801987e <_printf_float+0x17e>
 8019878:	6822      	ldr	r2, [r4, #0]
 801987a:	07d2      	lsls	r2, r2, #31
 801987c:	d501      	bpl.n	8019882 <_printf_float+0x182>
 801987e:	3302      	adds	r3, #2
 8019880:	e7f4      	b.n	801986c <_printf_float+0x16c>
 8019882:	2301      	movs	r3, #1
 8019884:	e7f2      	b.n	801986c <_printf_float+0x16c>
 8019886:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801988a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801988c:	4299      	cmp	r1, r3
 801988e:	db05      	blt.n	801989c <_printf_float+0x19c>
 8019890:	6823      	ldr	r3, [r4, #0]
 8019892:	6121      	str	r1, [r4, #16]
 8019894:	07d8      	lsls	r0, r3, #31
 8019896:	d5ea      	bpl.n	801986e <_printf_float+0x16e>
 8019898:	1c4b      	adds	r3, r1, #1
 801989a:	e7e7      	b.n	801986c <_printf_float+0x16c>
 801989c:	2900      	cmp	r1, #0
 801989e:	bfd4      	ite	le
 80198a0:	f1c1 0202 	rsble	r2, r1, #2
 80198a4:	2201      	movgt	r2, #1
 80198a6:	4413      	add	r3, r2
 80198a8:	e7e0      	b.n	801986c <_printf_float+0x16c>
 80198aa:	6823      	ldr	r3, [r4, #0]
 80198ac:	055a      	lsls	r2, r3, #21
 80198ae:	d407      	bmi.n	80198c0 <_printf_float+0x1c0>
 80198b0:	6923      	ldr	r3, [r4, #16]
 80198b2:	4642      	mov	r2, r8
 80198b4:	4631      	mov	r1, r6
 80198b6:	4628      	mov	r0, r5
 80198b8:	47b8      	blx	r7
 80198ba:	3001      	adds	r0, #1
 80198bc:	d12a      	bne.n	8019914 <_printf_float+0x214>
 80198be:	e76b      	b.n	8019798 <_printf_float+0x98>
 80198c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80198c4:	f240 80e0 	bls.w	8019a88 <_printf_float+0x388>
 80198c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80198cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80198d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d4:	d133      	bne.n	801993e <_printf_float+0x23e>
 80198d6:	4a38      	ldr	r2, [pc, #224]	@ (80199b8 <_printf_float+0x2b8>)
 80198d8:	2301      	movs	r3, #1
 80198da:	4631      	mov	r1, r6
 80198dc:	4628      	mov	r0, r5
 80198de:	47b8      	blx	r7
 80198e0:	3001      	adds	r0, #1
 80198e2:	f43f af59 	beq.w	8019798 <_printf_float+0x98>
 80198e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80198ea:	4543      	cmp	r3, r8
 80198ec:	db02      	blt.n	80198f4 <_printf_float+0x1f4>
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	07d8      	lsls	r0, r3, #31
 80198f2:	d50f      	bpl.n	8019914 <_printf_float+0x214>
 80198f4:	9b05      	ldr	r3, [sp, #20]
 80198f6:	465a      	mov	r2, fp
 80198f8:	4631      	mov	r1, r6
 80198fa:	4628      	mov	r0, r5
 80198fc:	47b8      	blx	r7
 80198fe:	3001      	adds	r0, #1
 8019900:	f43f af4a 	beq.w	8019798 <_printf_float+0x98>
 8019904:	f04f 0900 	mov.w	r9, #0
 8019908:	f108 38ff 	add.w	r8, r8, #4294967295
 801990c:	f104 0a1a 	add.w	sl, r4, #26
 8019910:	45c8      	cmp	r8, r9
 8019912:	dc09      	bgt.n	8019928 <_printf_float+0x228>
 8019914:	6823      	ldr	r3, [r4, #0]
 8019916:	079b      	lsls	r3, r3, #30
 8019918:	f100 8107 	bmi.w	8019b2a <_printf_float+0x42a>
 801991c:	68e0      	ldr	r0, [r4, #12]
 801991e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019920:	4298      	cmp	r0, r3
 8019922:	bfb8      	it	lt
 8019924:	4618      	movlt	r0, r3
 8019926:	e739      	b.n	801979c <_printf_float+0x9c>
 8019928:	2301      	movs	r3, #1
 801992a:	4652      	mov	r2, sl
 801992c:	4631      	mov	r1, r6
 801992e:	4628      	mov	r0, r5
 8019930:	47b8      	blx	r7
 8019932:	3001      	adds	r0, #1
 8019934:	f43f af30 	beq.w	8019798 <_printf_float+0x98>
 8019938:	f109 0901 	add.w	r9, r9, #1
 801993c:	e7e8      	b.n	8019910 <_printf_float+0x210>
 801993e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019940:	2b00      	cmp	r3, #0
 8019942:	dc3b      	bgt.n	80199bc <_printf_float+0x2bc>
 8019944:	4a1c      	ldr	r2, [pc, #112]	@ (80199b8 <_printf_float+0x2b8>)
 8019946:	2301      	movs	r3, #1
 8019948:	4631      	mov	r1, r6
 801994a:	4628      	mov	r0, r5
 801994c:	47b8      	blx	r7
 801994e:	3001      	adds	r0, #1
 8019950:	f43f af22 	beq.w	8019798 <_printf_float+0x98>
 8019954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019958:	ea59 0303 	orrs.w	r3, r9, r3
 801995c:	d102      	bne.n	8019964 <_printf_float+0x264>
 801995e:	6823      	ldr	r3, [r4, #0]
 8019960:	07d9      	lsls	r1, r3, #31
 8019962:	d5d7      	bpl.n	8019914 <_printf_float+0x214>
 8019964:	9b05      	ldr	r3, [sp, #20]
 8019966:	465a      	mov	r2, fp
 8019968:	4631      	mov	r1, r6
 801996a:	4628      	mov	r0, r5
 801996c:	47b8      	blx	r7
 801996e:	3001      	adds	r0, #1
 8019970:	f43f af12 	beq.w	8019798 <_printf_float+0x98>
 8019974:	f04f 0a00 	mov.w	sl, #0
 8019978:	f104 0b1a 	add.w	fp, r4, #26
 801997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801997e:	425b      	negs	r3, r3
 8019980:	4553      	cmp	r3, sl
 8019982:	dc01      	bgt.n	8019988 <_printf_float+0x288>
 8019984:	464b      	mov	r3, r9
 8019986:	e794      	b.n	80198b2 <_printf_float+0x1b2>
 8019988:	2301      	movs	r3, #1
 801998a:	465a      	mov	r2, fp
 801998c:	4631      	mov	r1, r6
 801998e:	4628      	mov	r0, r5
 8019990:	47b8      	blx	r7
 8019992:	3001      	adds	r0, #1
 8019994:	f43f af00 	beq.w	8019798 <_printf_float+0x98>
 8019998:	f10a 0a01 	add.w	sl, sl, #1
 801999c:	e7ee      	b.n	801997c <_printf_float+0x27c>
 801999e:	bf00      	nop
 80199a0:	ffffffff 	.word	0xffffffff
 80199a4:	7fefffff 	.word	0x7fefffff
 80199a8:	0801e491 	.word	0x0801e491
 80199ac:	0801e495 	.word	0x0801e495
 80199b0:	0801e499 	.word	0x0801e499
 80199b4:	0801e49d 	.word	0x0801e49d
 80199b8:	0801e4a1 	.word	0x0801e4a1
 80199bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199c2:	4553      	cmp	r3, sl
 80199c4:	bfa8      	it	ge
 80199c6:	4653      	movge	r3, sl
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	4699      	mov	r9, r3
 80199cc:	dc37      	bgt.n	8019a3e <_printf_float+0x33e>
 80199ce:	2300      	movs	r3, #0
 80199d0:	9307      	str	r3, [sp, #28]
 80199d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199d6:	f104 021a 	add.w	r2, r4, #26
 80199da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199dc:	9907      	ldr	r1, [sp, #28]
 80199de:	9306      	str	r3, [sp, #24]
 80199e0:	eba3 0309 	sub.w	r3, r3, r9
 80199e4:	428b      	cmp	r3, r1
 80199e6:	dc31      	bgt.n	8019a4c <_printf_float+0x34c>
 80199e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199ea:	459a      	cmp	sl, r3
 80199ec:	dc3b      	bgt.n	8019a66 <_printf_float+0x366>
 80199ee:	6823      	ldr	r3, [r4, #0]
 80199f0:	07da      	lsls	r2, r3, #31
 80199f2:	d438      	bmi.n	8019a66 <_printf_float+0x366>
 80199f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199f6:	ebaa 0903 	sub.w	r9, sl, r3
 80199fa:	9b06      	ldr	r3, [sp, #24]
 80199fc:	ebaa 0303 	sub.w	r3, sl, r3
 8019a00:	4599      	cmp	r9, r3
 8019a02:	bfa8      	it	ge
 8019a04:	4699      	movge	r9, r3
 8019a06:	f1b9 0f00 	cmp.w	r9, #0
 8019a0a:	dc34      	bgt.n	8019a76 <_printf_float+0x376>
 8019a0c:	f04f 0800 	mov.w	r8, #0
 8019a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a14:	f104 0b1a 	add.w	fp, r4, #26
 8019a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a1a:	ebaa 0303 	sub.w	r3, sl, r3
 8019a1e:	eba3 0309 	sub.w	r3, r3, r9
 8019a22:	4543      	cmp	r3, r8
 8019a24:	f77f af76 	ble.w	8019914 <_printf_float+0x214>
 8019a28:	2301      	movs	r3, #1
 8019a2a:	465a      	mov	r2, fp
 8019a2c:	4631      	mov	r1, r6
 8019a2e:	4628      	mov	r0, r5
 8019a30:	47b8      	blx	r7
 8019a32:	3001      	adds	r0, #1
 8019a34:	f43f aeb0 	beq.w	8019798 <_printf_float+0x98>
 8019a38:	f108 0801 	add.w	r8, r8, #1
 8019a3c:	e7ec      	b.n	8019a18 <_printf_float+0x318>
 8019a3e:	4642      	mov	r2, r8
 8019a40:	4631      	mov	r1, r6
 8019a42:	4628      	mov	r0, r5
 8019a44:	47b8      	blx	r7
 8019a46:	3001      	adds	r0, #1
 8019a48:	d1c1      	bne.n	80199ce <_printf_float+0x2ce>
 8019a4a:	e6a5      	b.n	8019798 <_printf_float+0x98>
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	4631      	mov	r1, r6
 8019a50:	4628      	mov	r0, r5
 8019a52:	9206      	str	r2, [sp, #24]
 8019a54:	47b8      	blx	r7
 8019a56:	3001      	adds	r0, #1
 8019a58:	f43f ae9e 	beq.w	8019798 <_printf_float+0x98>
 8019a5c:	9b07      	ldr	r3, [sp, #28]
 8019a5e:	9a06      	ldr	r2, [sp, #24]
 8019a60:	3301      	adds	r3, #1
 8019a62:	9307      	str	r3, [sp, #28]
 8019a64:	e7b9      	b.n	80199da <_printf_float+0x2da>
 8019a66:	9b05      	ldr	r3, [sp, #20]
 8019a68:	465a      	mov	r2, fp
 8019a6a:	4631      	mov	r1, r6
 8019a6c:	4628      	mov	r0, r5
 8019a6e:	47b8      	blx	r7
 8019a70:	3001      	adds	r0, #1
 8019a72:	d1bf      	bne.n	80199f4 <_printf_float+0x2f4>
 8019a74:	e690      	b.n	8019798 <_printf_float+0x98>
 8019a76:	9a06      	ldr	r2, [sp, #24]
 8019a78:	464b      	mov	r3, r9
 8019a7a:	4442      	add	r2, r8
 8019a7c:	4631      	mov	r1, r6
 8019a7e:	4628      	mov	r0, r5
 8019a80:	47b8      	blx	r7
 8019a82:	3001      	adds	r0, #1
 8019a84:	d1c2      	bne.n	8019a0c <_printf_float+0x30c>
 8019a86:	e687      	b.n	8019798 <_printf_float+0x98>
 8019a88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019a8c:	f1b9 0f01 	cmp.w	r9, #1
 8019a90:	dc01      	bgt.n	8019a96 <_printf_float+0x396>
 8019a92:	07db      	lsls	r3, r3, #31
 8019a94:	d536      	bpl.n	8019b04 <_printf_float+0x404>
 8019a96:	2301      	movs	r3, #1
 8019a98:	4642      	mov	r2, r8
 8019a9a:	4631      	mov	r1, r6
 8019a9c:	4628      	mov	r0, r5
 8019a9e:	47b8      	blx	r7
 8019aa0:	3001      	adds	r0, #1
 8019aa2:	f43f ae79 	beq.w	8019798 <_printf_float+0x98>
 8019aa6:	9b05      	ldr	r3, [sp, #20]
 8019aa8:	465a      	mov	r2, fp
 8019aaa:	4631      	mov	r1, r6
 8019aac:	4628      	mov	r0, r5
 8019aae:	47b8      	blx	r7
 8019ab0:	3001      	adds	r0, #1
 8019ab2:	f43f ae71 	beq.w	8019798 <_printf_float+0x98>
 8019ab6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019aba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ac2:	f109 39ff 	add.w	r9, r9, #4294967295
 8019ac6:	d018      	beq.n	8019afa <_printf_float+0x3fa>
 8019ac8:	464b      	mov	r3, r9
 8019aca:	f108 0201 	add.w	r2, r8, #1
 8019ace:	4631      	mov	r1, r6
 8019ad0:	4628      	mov	r0, r5
 8019ad2:	47b8      	blx	r7
 8019ad4:	3001      	adds	r0, #1
 8019ad6:	d10c      	bne.n	8019af2 <_printf_float+0x3f2>
 8019ad8:	e65e      	b.n	8019798 <_printf_float+0x98>
 8019ada:	2301      	movs	r3, #1
 8019adc:	465a      	mov	r2, fp
 8019ade:	4631      	mov	r1, r6
 8019ae0:	4628      	mov	r0, r5
 8019ae2:	47b8      	blx	r7
 8019ae4:	3001      	adds	r0, #1
 8019ae6:	f43f ae57 	beq.w	8019798 <_printf_float+0x98>
 8019aea:	f108 0801 	add.w	r8, r8, #1
 8019aee:	45c8      	cmp	r8, r9
 8019af0:	dbf3      	blt.n	8019ada <_printf_float+0x3da>
 8019af2:	4653      	mov	r3, sl
 8019af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019af8:	e6dc      	b.n	80198b4 <_printf_float+0x1b4>
 8019afa:	f04f 0800 	mov.w	r8, #0
 8019afe:	f104 0b1a 	add.w	fp, r4, #26
 8019b02:	e7f4      	b.n	8019aee <_printf_float+0x3ee>
 8019b04:	2301      	movs	r3, #1
 8019b06:	4642      	mov	r2, r8
 8019b08:	e7e1      	b.n	8019ace <_printf_float+0x3ce>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	464a      	mov	r2, r9
 8019b0e:	4631      	mov	r1, r6
 8019b10:	4628      	mov	r0, r5
 8019b12:	47b8      	blx	r7
 8019b14:	3001      	adds	r0, #1
 8019b16:	f43f ae3f 	beq.w	8019798 <_printf_float+0x98>
 8019b1a:	f108 0801 	add.w	r8, r8, #1
 8019b1e:	68e3      	ldr	r3, [r4, #12]
 8019b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019b22:	1a5b      	subs	r3, r3, r1
 8019b24:	4543      	cmp	r3, r8
 8019b26:	dcf0      	bgt.n	8019b0a <_printf_float+0x40a>
 8019b28:	e6f8      	b.n	801991c <_printf_float+0x21c>
 8019b2a:	f04f 0800 	mov.w	r8, #0
 8019b2e:	f104 0919 	add.w	r9, r4, #25
 8019b32:	e7f4      	b.n	8019b1e <_printf_float+0x41e>

08019b34 <_printf_common>:
 8019b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b38:	4616      	mov	r6, r2
 8019b3a:	4698      	mov	r8, r3
 8019b3c:	688a      	ldr	r2, [r1, #8]
 8019b3e:	690b      	ldr	r3, [r1, #16]
 8019b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019b44:	4293      	cmp	r3, r2
 8019b46:	bfb8      	it	lt
 8019b48:	4613      	movlt	r3, r2
 8019b4a:	6033      	str	r3, [r6, #0]
 8019b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b50:	4607      	mov	r7, r0
 8019b52:	460c      	mov	r4, r1
 8019b54:	b10a      	cbz	r2, 8019b5a <_printf_common+0x26>
 8019b56:	3301      	adds	r3, #1
 8019b58:	6033      	str	r3, [r6, #0]
 8019b5a:	6823      	ldr	r3, [r4, #0]
 8019b5c:	0699      	lsls	r1, r3, #26
 8019b5e:	bf42      	ittt	mi
 8019b60:	6833      	ldrmi	r3, [r6, #0]
 8019b62:	3302      	addmi	r3, #2
 8019b64:	6033      	strmi	r3, [r6, #0]
 8019b66:	6825      	ldr	r5, [r4, #0]
 8019b68:	f015 0506 	ands.w	r5, r5, #6
 8019b6c:	d106      	bne.n	8019b7c <_printf_common+0x48>
 8019b6e:	f104 0a19 	add.w	sl, r4, #25
 8019b72:	68e3      	ldr	r3, [r4, #12]
 8019b74:	6832      	ldr	r2, [r6, #0]
 8019b76:	1a9b      	subs	r3, r3, r2
 8019b78:	42ab      	cmp	r3, r5
 8019b7a:	dc26      	bgt.n	8019bca <_printf_common+0x96>
 8019b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019b80:	6822      	ldr	r2, [r4, #0]
 8019b82:	3b00      	subs	r3, #0
 8019b84:	bf18      	it	ne
 8019b86:	2301      	movne	r3, #1
 8019b88:	0692      	lsls	r2, r2, #26
 8019b8a:	d42b      	bmi.n	8019be4 <_printf_common+0xb0>
 8019b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019b90:	4641      	mov	r1, r8
 8019b92:	4638      	mov	r0, r7
 8019b94:	47c8      	blx	r9
 8019b96:	3001      	adds	r0, #1
 8019b98:	d01e      	beq.n	8019bd8 <_printf_common+0xa4>
 8019b9a:	6823      	ldr	r3, [r4, #0]
 8019b9c:	6922      	ldr	r2, [r4, #16]
 8019b9e:	f003 0306 	and.w	r3, r3, #6
 8019ba2:	2b04      	cmp	r3, #4
 8019ba4:	bf02      	ittt	eq
 8019ba6:	68e5      	ldreq	r5, [r4, #12]
 8019ba8:	6833      	ldreq	r3, [r6, #0]
 8019baa:	1aed      	subeq	r5, r5, r3
 8019bac:	68a3      	ldr	r3, [r4, #8]
 8019bae:	bf0c      	ite	eq
 8019bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019bb4:	2500      	movne	r5, #0
 8019bb6:	4293      	cmp	r3, r2
 8019bb8:	bfc4      	itt	gt
 8019bba:	1a9b      	subgt	r3, r3, r2
 8019bbc:	18ed      	addgt	r5, r5, r3
 8019bbe:	2600      	movs	r6, #0
 8019bc0:	341a      	adds	r4, #26
 8019bc2:	42b5      	cmp	r5, r6
 8019bc4:	d11a      	bne.n	8019bfc <_printf_common+0xc8>
 8019bc6:	2000      	movs	r0, #0
 8019bc8:	e008      	b.n	8019bdc <_printf_common+0xa8>
 8019bca:	2301      	movs	r3, #1
 8019bcc:	4652      	mov	r2, sl
 8019bce:	4641      	mov	r1, r8
 8019bd0:	4638      	mov	r0, r7
 8019bd2:	47c8      	blx	r9
 8019bd4:	3001      	adds	r0, #1
 8019bd6:	d103      	bne.n	8019be0 <_printf_common+0xac>
 8019bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019be0:	3501      	adds	r5, #1
 8019be2:	e7c6      	b.n	8019b72 <_printf_common+0x3e>
 8019be4:	18e1      	adds	r1, r4, r3
 8019be6:	1c5a      	adds	r2, r3, #1
 8019be8:	2030      	movs	r0, #48	@ 0x30
 8019bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019bee:	4422      	add	r2, r4
 8019bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019bf8:	3302      	adds	r3, #2
 8019bfa:	e7c7      	b.n	8019b8c <_printf_common+0x58>
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	4622      	mov	r2, r4
 8019c00:	4641      	mov	r1, r8
 8019c02:	4638      	mov	r0, r7
 8019c04:	47c8      	blx	r9
 8019c06:	3001      	adds	r0, #1
 8019c08:	d0e6      	beq.n	8019bd8 <_printf_common+0xa4>
 8019c0a:	3601      	adds	r6, #1
 8019c0c:	e7d9      	b.n	8019bc2 <_printf_common+0x8e>
	...

08019c10 <_printf_i>:
 8019c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	7e0f      	ldrb	r7, [r1, #24]
 8019c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019c18:	2f78      	cmp	r7, #120	@ 0x78
 8019c1a:	4691      	mov	r9, r2
 8019c1c:	4680      	mov	r8, r0
 8019c1e:	460c      	mov	r4, r1
 8019c20:	469a      	mov	sl, r3
 8019c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019c26:	d807      	bhi.n	8019c38 <_printf_i+0x28>
 8019c28:	2f62      	cmp	r7, #98	@ 0x62
 8019c2a:	d80a      	bhi.n	8019c42 <_printf_i+0x32>
 8019c2c:	2f00      	cmp	r7, #0
 8019c2e:	f000 80d2 	beq.w	8019dd6 <_printf_i+0x1c6>
 8019c32:	2f58      	cmp	r7, #88	@ 0x58
 8019c34:	f000 80b9 	beq.w	8019daa <_printf_i+0x19a>
 8019c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019c40:	e03a      	b.n	8019cb8 <_printf_i+0xa8>
 8019c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019c46:	2b15      	cmp	r3, #21
 8019c48:	d8f6      	bhi.n	8019c38 <_printf_i+0x28>
 8019c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8019c50 <_printf_i+0x40>)
 8019c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c50:	08019ca9 	.word	0x08019ca9
 8019c54:	08019cbd 	.word	0x08019cbd
 8019c58:	08019c39 	.word	0x08019c39
 8019c5c:	08019c39 	.word	0x08019c39
 8019c60:	08019c39 	.word	0x08019c39
 8019c64:	08019c39 	.word	0x08019c39
 8019c68:	08019cbd 	.word	0x08019cbd
 8019c6c:	08019c39 	.word	0x08019c39
 8019c70:	08019c39 	.word	0x08019c39
 8019c74:	08019c39 	.word	0x08019c39
 8019c78:	08019c39 	.word	0x08019c39
 8019c7c:	08019dbd 	.word	0x08019dbd
 8019c80:	08019ce7 	.word	0x08019ce7
 8019c84:	08019d77 	.word	0x08019d77
 8019c88:	08019c39 	.word	0x08019c39
 8019c8c:	08019c39 	.word	0x08019c39
 8019c90:	08019ddf 	.word	0x08019ddf
 8019c94:	08019c39 	.word	0x08019c39
 8019c98:	08019ce7 	.word	0x08019ce7
 8019c9c:	08019c39 	.word	0x08019c39
 8019ca0:	08019c39 	.word	0x08019c39
 8019ca4:	08019d7f 	.word	0x08019d7f
 8019ca8:	6833      	ldr	r3, [r6, #0]
 8019caa:	1d1a      	adds	r2, r3, #4
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	6032      	str	r2, [r6, #0]
 8019cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019cb8:	2301      	movs	r3, #1
 8019cba:	e09d      	b.n	8019df8 <_printf_i+0x1e8>
 8019cbc:	6833      	ldr	r3, [r6, #0]
 8019cbe:	6820      	ldr	r0, [r4, #0]
 8019cc0:	1d19      	adds	r1, r3, #4
 8019cc2:	6031      	str	r1, [r6, #0]
 8019cc4:	0606      	lsls	r6, r0, #24
 8019cc6:	d501      	bpl.n	8019ccc <_printf_i+0xbc>
 8019cc8:	681d      	ldr	r5, [r3, #0]
 8019cca:	e003      	b.n	8019cd4 <_printf_i+0xc4>
 8019ccc:	0645      	lsls	r5, r0, #25
 8019cce:	d5fb      	bpl.n	8019cc8 <_printf_i+0xb8>
 8019cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019cd4:	2d00      	cmp	r5, #0
 8019cd6:	da03      	bge.n	8019ce0 <_printf_i+0xd0>
 8019cd8:	232d      	movs	r3, #45	@ 0x2d
 8019cda:	426d      	negs	r5, r5
 8019cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ce0:	4859      	ldr	r0, [pc, #356]	@ (8019e48 <_printf_i+0x238>)
 8019ce2:	230a      	movs	r3, #10
 8019ce4:	e011      	b.n	8019d0a <_printf_i+0xfa>
 8019ce6:	6821      	ldr	r1, [r4, #0]
 8019ce8:	6833      	ldr	r3, [r6, #0]
 8019cea:	0608      	lsls	r0, r1, #24
 8019cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8019cf0:	d402      	bmi.n	8019cf8 <_printf_i+0xe8>
 8019cf2:	0649      	lsls	r1, r1, #25
 8019cf4:	bf48      	it	mi
 8019cf6:	b2ad      	uxthmi	r5, r5
 8019cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8019cfa:	4853      	ldr	r0, [pc, #332]	@ (8019e48 <_printf_i+0x238>)
 8019cfc:	6033      	str	r3, [r6, #0]
 8019cfe:	bf14      	ite	ne
 8019d00:	230a      	movne	r3, #10
 8019d02:	2308      	moveq	r3, #8
 8019d04:	2100      	movs	r1, #0
 8019d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019d0a:	6866      	ldr	r6, [r4, #4]
 8019d0c:	60a6      	str	r6, [r4, #8]
 8019d0e:	2e00      	cmp	r6, #0
 8019d10:	bfa2      	ittt	ge
 8019d12:	6821      	ldrge	r1, [r4, #0]
 8019d14:	f021 0104 	bicge.w	r1, r1, #4
 8019d18:	6021      	strge	r1, [r4, #0]
 8019d1a:	b90d      	cbnz	r5, 8019d20 <_printf_i+0x110>
 8019d1c:	2e00      	cmp	r6, #0
 8019d1e:	d04b      	beq.n	8019db8 <_printf_i+0x1a8>
 8019d20:	4616      	mov	r6, r2
 8019d22:	fbb5 f1f3 	udiv	r1, r5, r3
 8019d26:	fb03 5711 	mls	r7, r3, r1, r5
 8019d2a:	5dc7      	ldrb	r7, [r0, r7]
 8019d2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d30:	462f      	mov	r7, r5
 8019d32:	42bb      	cmp	r3, r7
 8019d34:	460d      	mov	r5, r1
 8019d36:	d9f4      	bls.n	8019d22 <_printf_i+0x112>
 8019d38:	2b08      	cmp	r3, #8
 8019d3a:	d10b      	bne.n	8019d54 <_printf_i+0x144>
 8019d3c:	6823      	ldr	r3, [r4, #0]
 8019d3e:	07df      	lsls	r7, r3, #31
 8019d40:	d508      	bpl.n	8019d54 <_printf_i+0x144>
 8019d42:	6923      	ldr	r3, [r4, #16]
 8019d44:	6861      	ldr	r1, [r4, #4]
 8019d46:	4299      	cmp	r1, r3
 8019d48:	bfde      	ittt	le
 8019d4a:	2330      	movle	r3, #48	@ 0x30
 8019d4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019d54:	1b92      	subs	r2, r2, r6
 8019d56:	6122      	str	r2, [r4, #16]
 8019d58:	f8cd a000 	str.w	sl, [sp]
 8019d5c:	464b      	mov	r3, r9
 8019d5e:	aa03      	add	r2, sp, #12
 8019d60:	4621      	mov	r1, r4
 8019d62:	4640      	mov	r0, r8
 8019d64:	f7ff fee6 	bl	8019b34 <_printf_common>
 8019d68:	3001      	adds	r0, #1
 8019d6a:	d14a      	bne.n	8019e02 <_printf_i+0x1f2>
 8019d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d70:	b004      	add	sp, #16
 8019d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d76:	6823      	ldr	r3, [r4, #0]
 8019d78:	f043 0320 	orr.w	r3, r3, #32
 8019d7c:	6023      	str	r3, [r4, #0]
 8019d7e:	4833      	ldr	r0, [pc, #204]	@ (8019e4c <_printf_i+0x23c>)
 8019d80:	2778      	movs	r7, #120	@ 0x78
 8019d82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019d86:	6823      	ldr	r3, [r4, #0]
 8019d88:	6831      	ldr	r1, [r6, #0]
 8019d8a:	061f      	lsls	r7, r3, #24
 8019d8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019d90:	d402      	bmi.n	8019d98 <_printf_i+0x188>
 8019d92:	065f      	lsls	r7, r3, #25
 8019d94:	bf48      	it	mi
 8019d96:	b2ad      	uxthmi	r5, r5
 8019d98:	6031      	str	r1, [r6, #0]
 8019d9a:	07d9      	lsls	r1, r3, #31
 8019d9c:	bf44      	itt	mi
 8019d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8019da2:	6023      	strmi	r3, [r4, #0]
 8019da4:	b11d      	cbz	r5, 8019dae <_printf_i+0x19e>
 8019da6:	2310      	movs	r3, #16
 8019da8:	e7ac      	b.n	8019d04 <_printf_i+0xf4>
 8019daa:	4827      	ldr	r0, [pc, #156]	@ (8019e48 <_printf_i+0x238>)
 8019dac:	e7e9      	b.n	8019d82 <_printf_i+0x172>
 8019dae:	6823      	ldr	r3, [r4, #0]
 8019db0:	f023 0320 	bic.w	r3, r3, #32
 8019db4:	6023      	str	r3, [r4, #0]
 8019db6:	e7f6      	b.n	8019da6 <_printf_i+0x196>
 8019db8:	4616      	mov	r6, r2
 8019dba:	e7bd      	b.n	8019d38 <_printf_i+0x128>
 8019dbc:	6833      	ldr	r3, [r6, #0]
 8019dbe:	6825      	ldr	r5, [r4, #0]
 8019dc0:	6961      	ldr	r1, [r4, #20]
 8019dc2:	1d18      	adds	r0, r3, #4
 8019dc4:	6030      	str	r0, [r6, #0]
 8019dc6:	062e      	lsls	r6, r5, #24
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	d501      	bpl.n	8019dd0 <_printf_i+0x1c0>
 8019dcc:	6019      	str	r1, [r3, #0]
 8019dce:	e002      	b.n	8019dd6 <_printf_i+0x1c6>
 8019dd0:	0668      	lsls	r0, r5, #25
 8019dd2:	d5fb      	bpl.n	8019dcc <_printf_i+0x1bc>
 8019dd4:	8019      	strh	r1, [r3, #0]
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	6123      	str	r3, [r4, #16]
 8019dda:	4616      	mov	r6, r2
 8019ddc:	e7bc      	b.n	8019d58 <_printf_i+0x148>
 8019dde:	6833      	ldr	r3, [r6, #0]
 8019de0:	1d1a      	adds	r2, r3, #4
 8019de2:	6032      	str	r2, [r6, #0]
 8019de4:	681e      	ldr	r6, [r3, #0]
 8019de6:	6862      	ldr	r2, [r4, #4]
 8019de8:	2100      	movs	r1, #0
 8019dea:	4630      	mov	r0, r6
 8019dec:	f7e6 faa0 	bl	8000330 <memchr>
 8019df0:	b108      	cbz	r0, 8019df6 <_printf_i+0x1e6>
 8019df2:	1b80      	subs	r0, r0, r6
 8019df4:	6060      	str	r0, [r4, #4]
 8019df6:	6863      	ldr	r3, [r4, #4]
 8019df8:	6123      	str	r3, [r4, #16]
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e00:	e7aa      	b.n	8019d58 <_printf_i+0x148>
 8019e02:	6923      	ldr	r3, [r4, #16]
 8019e04:	4632      	mov	r2, r6
 8019e06:	4649      	mov	r1, r9
 8019e08:	4640      	mov	r0, r8
 8019e0a:	47d0      	blx	sl
 8019e0c:	3001      	adds	r0, #1
 8019e0e:	d0ad      	beq.n	8019d6c <_printf_i+0x15c>
 8019e10:	6823      	ldr	r3, [r4, #0]
 8019e12:	079b      	lsls	r3, r3, #30
 8019e14:	d413      	bmi.n	8019e3e <_printf_i+0x22e>
 8019e16:	68e0      	ldr	r0, [r4, #12]
 8019e18:	9b03      	ldr	r3, [sp, #12]
 8019e1a:	4298      	cmp	r0, r3
 8019e1c:	bfb8      	it	lt
 8019e1e:	4618      	movlt	r0, r3
 8019e20:	e7a6      	b.n	8019d70 <_printf_i+0x160>
 8019e22:	2301      	movs	r3, #1
 8019e24:	4632      	mov	r2, r6
 8019e26:	4649      	mov	r1, r9
 8019e28:	4640      	mov	r0, r8
 8019e2a:	47d0      	blx	sl
 8019e2c:	3001      	adds	r0, #1
 8019e2e:	d09d      	beq.n	8019d6c <_printf_i+0x15c>
 8019e30:	3501      	adds	r5, #1
 8019e32:	68e3      	ldr	r3, [r4, #12]
 8019e34:	9903      	ldr	r1, [sp, #12]
 8019e36:	1a5b      	subs	r3, r3, r1
 8019e38:	42ab      	cmp	r3, r5
 8019e3a:	dcf2      	bgt.n	8019e22 <_printf_i+0x212>
 8019e3c:	e7eb      	b.n	8019e16 <_printf_i+0x206>
 8019e3e:	2500      	movs	r5, #0
 8019e40:	f104 0619 	add.w	r6, r4, #25
 8019e44:	e7f5      	b.n	8019e32 <_printf_i+0x222>
 8019e46:	bf00      	nop
 8019e48:	0801e4a3 	.word	0x0801e4a3
 8019e4c:	0801e4b4 	.word	0x0801e4b4

08019e50 <std>:
 8019e50:	2300      	movs	r3, #0
 8019e52:	b510      	push	{r4, lr}
 8019e54:	4604      	mov	r4, r0
 8019e56:	e9c0 3300 	strd	r3, r3, [r0]
 8019e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e5e:	6083      	str	r3, [r0, #8]
 8019e60:	8181      	strh	r1, [r0, #12]
 8019e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8019e64:	81c2      	strh	r2, [r0, #14]
 8019e66:	6183      	str	r3, [r0, #24]
 8019e68:	4619      	mov	r1, r3
 8019e6a:	2208      	movs	r2, #8
 8019e6c:	305c      	adds	r0, #92	@ 0x5c
 8019e6e:	f000 f914 	bl	801a09a <memset>
 8019e72:	4b0d      	ldr	r3, [pc, #52]	@ (8019ea8 <std+0x58>)
 8019e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8019e76:	4b0d      	ldr	r3, [pc, #52]	@ (8019eac <std+0x5c>)
 8019e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb0 <std+0x60>)
 8019e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb4 <std+0x64>)
 8019e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8019e82:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb8 <std+0x68>)
 8019e84:	6224      	str	r4, [r4, #32]
 8019e86:	429c      	cmp	r4, r3
 8019e88:	d006      	beq.n	8019e98 <std+0x48>
 8019e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019e8e:	4294      	cmp	r4, r2
 8019e90:	d002      	beq.n	8019e98 <std+0x48>
 8019e92:	33d0      	adds	r3, #208	@ 0xd0
 8019e94:	429c      	cmp	r4, r3
 8019e96:	d105      	bne.n	8019ea4 <std+0x54>
 8019e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ea0:	f000 b996 	b.w	801a1d0 <__retarget_lock_init_recursive>
 8019ea4:	bd10      	pop	{r4, pc}
 8019ea6:	bf00      	nop
 8019ea8:	0801a015 	.word	0x0801a015
 8019eac:	0801a037 	.word	0x0801a037
 8019eb0:	0801a06f 	.word	0x0801a06f
 8019eb4:	0801a093 	.word	0x0801a093
 8019eb8:	2401ccf8 	.word	0x2401ccf8

08019ebc <stdio_exit_handler>:
 8019ebc:	4a02      	ldr	r2, [pc, #8]	@ (8019ec8 <stdio_exit_handler+0xc>)
 8019ebe:	4903      	ldr	r1, [pc, #12]	@ (8019ecc <stdio_exit_handler+0x10>)
 8019ec0:	4803      	ldr	r0, [pc, #12]	@ (8019ed0 <stdio_exit_handler+0x14>)
 8019ec2:	f000 b869 	b.w	8019f98 <_fwalk_sglue>
 8019ec6:	bf00      	nop
 8019ec8:	24000134 	.word	0x24000134
 8019ecc:	0801c38d 	.word	0x0801c38d
 8019ed0:	240002b0 	.word	0x240002b0

08019ed4 <cleanup_stdio>:
 8019ed4:	6841      	ldr	r1, [r0, #4]
 8019ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8019f08 <cleanup_stdio+0x34>)
 8019ed8:	4299      	cmp	r1, r3
 8019eda:	b510      	push	{r4, lr}
 8019edc:	4604      	mov	r4, r0
 8019ede:	d001      	beq.n	8019ee4 <cleanup_stdio+0x10>
 8019ee0:	f002 fa54 	bl	801c38c <_fflush_r>
 8019ee4:	68a1      	ldr	r1, [r4, #8]
 8019ee6:	4b09      	ldr	r3, [pc, #36]	@ (8019f0c <cleanup_stdio+0x38>)
 8019ee8:	4299      	cmp	r1, r3
 8019eea:	d002      	beq.n	8019ef2 <cleanup_stdio+0x1e>
 8019eec:	4620      	mov	r0, r4
 8019eee:	f002 fa4d 	bl	801c38c <_fflush_r>
 8019ef2:	68e1      	ldr	r1, [r4, #12]
 8019ef4:	4b06      	ldr	r3, [pc, #24]	@ (8019f10 <cleanup_stdio+0x3c>)
 8019ef6:	4299      	cmp	r1, r3
 8019ef8:	d004      	beq.n	8019f04 <cleanup_stdio+0x30>
 8019efa:	4620      	mov	r0, r4
 8019efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f00:	f002 ba44 	b.w	801c38c <_fflush_r>
 8019f04:	bd10      	pop	{r4, pc}
 8019f06:	bf00      	nop
 8019f08:	2401ccf8 	.word	0x2401ccf8
 8019f0c:	2401cd60 	.word	0x2401cd60
 8019f10:	2401cdc8 	.word	0x2401cdc8

08019f14 <global_stdio_init.part.0>:
 8019f14:	b510      	push	{r4, lr}
 8019f16:	4b0b      	ldr	r3, [pc, #44]	@ (8019f44 <global_stdio_init.part.0+0x30>)
 8019f18:	4c0b      	ldr	r4, [pc, #44]	@ (8019f48 <global_stdio_init.part.0+0x34>)
 8019f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8019f4c <global_stdio_init.part.0+0x38>)
 8019f1c:	601a      	str	r2, [r3, #0]
 8019f1e:	4620      	mov	r0, r4
 8019f20:	2200      	movs	r2, #0
 8019f22:	2104      	movs	r1, #4
 8019f24:	f7ff ff94 	bl	8019e50 <std>
 8019f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019f2c:	2201      	movs	r2, #1
 8019f2e:	2109      	movs	r1, #9
 8019f30:	f7ff ff8e 	bl	8019e50 <std>
 8019f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019f38:	2202      	movs	r2, #2
 8019f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f3e:	2112      	movs	r1, #18
 8019f40:	f7ff bf86 	b.w	8019e50 <std>
 8019f44:	2401ce30 	.word	0x2401ce30
 8019f48:	2401ccf8 	.word	0x2401ccf8
 8019f4c:	08019ebd 	.word	0x08019ebd

08019f50 <__sfp_lock_acquire>:
 8019f50:	4801      	ldr	r0, [pc, #4]	@ (8019f58 <__sfp_lock_acquire+0x8>)
 8019f52:	f000 b93e 	b.w	801a1d2 <__retarget_lock_acquire_recursive>
 8019f56:	bf00      	nop
 8019f58:	2401ce39 	.word	0x2401ce39

08019f5c <__sfp_lock_release>:
 8019f5c:	4801      	ldr	r0, [pc, #4]	@ (8019f64 <__sfp_lock_release+0x8>)
 8019f5e:	f000 b939 	b.w	801a1d4 <__retarget_lock_release_recursive>
 8019f62:	bf00      	nop
 8019f64:	2401ce39 	.word	0x2401ce39

08019f68 <__sinit>:
 8019f68:	b510      	push	{r4, lr}
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	f7ff fff0 	bl	8019f50 <__sfp_lock_acquire>
 8019f70:	6a23      	ldr	r3, [r4, #32]
 8019f72:	b11b      	cbz	r3, 8019f7c <__sinit+0x14>
 8019f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f78:	f7ff bff0 	b.w	8019f5c <__sfp_lock_release>
 8019f7c:	4b04      	ldr	r3, [pc, #16]	@ (8019f90 <__sinit+0x28>)
 8019f7e:	6223      	str	r3, [r4, #32]
 8019f80:	4b04      	ldr	r3, [pc, #16]	@ (8019f94 <__sinit+0x2c>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d1f5      	bne.n	8019f74 <__sinit+0xc>
 8019f88:	f7ff ffc4 	bl	8019f14 <global_stdio_init.part.0>
 8019f8c:	e7f2      	b.n	8019f74 <__sinit+0xc>
 8019f8e:	bf00      	nop
 8019f90:	08019ed5 	.word	0x08019ed5
 8019f94:	2401ce30 	.word	0x2401ce30

08019f98 <_fwalk_sglue>:
 8019f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f9c:	4607      	mov	r7, r0
 8019f9e:	4688      	mov	r8, r1
 8019fa0:	4614      	mov	r4, r2
 8019fa2:	2600      	movs	r6, #0
 8019fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8019fac:	d505      	bpl.n	8019fba <_fwalk_sglue+0x22>
 8019fae:	6824      	ldr	r4, [r4, #0]
 8019fb0:	2c00      	cmp	r4, #0
 8019fb2:	d1f7      	bne.n	8019fa4 <_fwalk_sglue+0xc>
 8019fb4:	4630      	mov	r0, r6
 8019fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fba:	89ab      	ldrh	r3, [r5, #12]
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	d907      	bls.n	8019fd0 <_fwalk_sglue+0x38>
 8019fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	d003      	beq.n	8019fd0 <_fwalk_sglue+0x38>
 8019fc8:	4629      	mov	r1, r5
 8019fca:	4638      	mov	r0, r7
 8019fcc:	47c0      	blx	r8
 8019fce:	4306      	orrs	r6, r0
 8019fd0:	3568      	adds	r5, #104	@ 0x68
 8019fd2:	e7e9      	b.n	8019fa8 <_fwalk_sglue+0x10>

08019fd4 <siprintf>:
 8019fd4:	b40e      	push	{r1, r2, r3}
 8019fd6:	b500      	push	{lr}
 8019fd8:	b09c      	sub	sp, #112	@ 0x70
 8019fda:	ab1d      	add	r3, sp, #116	@ 0x74
 8019fdc:	9002      	str	r0, [sp, #8]
 8019fde:	9006      	str	r0, [sp, #24]
 8019fe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019fe4:	4809      	ldr	r0, [pc, #36]	@ (801a00c <siprintf+0x38>)
 8019fe6:	9107      	str	r1, [sp, #28]
 8019fe8:	9104      	str	r1, [sp, #16]
 8019fea:	4909      	ldr	r1, [pc, #36]	@ (801a010 <siprintf+0x3c>)
 8019fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ff0:	9105      	str	r1, [sp, #20]
 8019ff2:	6800      	ldr	r0, [r0, #0]
 8019ff4:	9301      	str	r3, [sp, #4]
 8019ff6:	a902      	add	r1, sp, #8
 8019ff8:	f002 f848 	bl	801c08c <_svfiprintf_r>
 8019ffc:	9b02      	ldr	r3, [sp, #8]
 8019ffe:	2200      	movs	r2, #0
 801a000:	701a      	strb	r2, [r3, #0]
 801a002:	b01c      	add	sp, #112	@ 0x70
 801a004:	f85d eb04 	ldr.w	lr, [sp], #4
 801a008:	b003      	add	sp, #12
 801a00a:	4770      	bx	lr
 801a00c:	240002ac 	.word	0x240002ac
 801a010:	ffff0208 	.word	0xffff0208

0801a014 <__sread>:
 801a014:	b510      	push	{r4, lr}
 801a016:	460c      	mov	r4, r1
 801a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a01c:	f000 f88a 	bl	801a134 <_read_r>
 801a020:	2800      	cmp	r0, #0
 801a022:	bfab      	itete	ge
 801a024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a026:	89a3      	ldrhlt	r3, [r4, #12]
 801a028:	181b      	addge	r3, r3, r0
 801a02a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a02e:	bfac      	ite	ge
 801a030:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a032:	81a3      	strhlt	r3, [r4, #12]
 801a034:	bd10      	pop	{r4, pc}

0801a036 <__swrite>:
 801a036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a03a:	461f      	mov	r7, r3
 801a03c:	898b      	ldrh	r3, [r1, #12]
 801a03e:	05db      	lsls	r3, r3, #23
 801a040:	4605      	mov	r5, r0
 801a042:	460c      	mov	r4, r1
 801a044:	4616      	mov	r6, r2
 801a046:	d505      	bpl.n	801a054 <__swrite+0x1e>
 801a048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a04c:	2302      	movs	r3, #2
 801a04e:	2200      	movs	r2, #0
 801a050:	f000 f85e 	bl	801a110 <_lseek_r>
 801a054:	89a3      	ldrh	r3, [r4, #12]
 801a056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a05e:	81a3      	strh	r3, [r4, #12]
 801a060:	4632      	mov	r2, r6
 801a062:	463b      	mov	r3, r7
 801a064:	4628      	mov	r0, r5
 801a066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a06a:	f000 b875 	b.w	801a158 <_write_r>

0801a06e <__sseek>:
 801a06e:	b510      	push	{r4, lr}
 801a070:	460c      	mov	r4, r1
 801a072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a076:	f000 f84b 	bl	801a110 <_lseek_r>
 801a07a:	1c43      	adds	r3, r0, #1
 801a07c:	89a3      	ldrh	r3, [r4, #12]
 801a07e:	bf15      	itete	ne
 801a080:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a08a:	81a3      	strheq	r3, [r4, #12]
 801a08c:	bf18      	it	ne
 801a08e:	81a3      	strhne	r3, [r4, #12]
 801a090:	bd10      	pop	{r4, pc}

0801a092 <__sclose>:
 801a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a096:	f000 b82b 	b.w	801a0f0 <_close_r>

0801a09a <memset>:
 801a09a:	4402      	add	r2, r0
 801a09c:	4603      	mov	r3, r0
 801a09e:	4293      	cmp	r3, r2
 801a0a0:	d100      	bne.n	801a0a4 <memset+0xa>
 801a0a2:	4770      	bx	lr
 801a0a4:	f803 1b01 	strb.w	r1, [r3], #1
 801a0a8:	e7f9      	b.n	801a09e <memset+0x4>

0801a0aa <strchr>:
 801a0aa:	b2c9      	uxtb	r1, r1
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0b4:	b112      	cbz	r2, 801a0bc <strchr+0x12>
 801a0b6:	428a      	cmp	r2, r1
 801a0b8:	d1f9      	bne.n	801a0ae <strchr+0x4>
 801a0ba:	4770      	bx	lr
 801a0bc:	2900      	cmp	r1, #0
 801a0be:	bf18      	it	ne
 801a0c0:	2000      	movne	r0, #0
 801a0c2:	4770      	bx	lr

0801a0c4 <strncmp>:
 801a0c4:	b510      	push	{r4, lr}
 801a0c6:	b16a      	cbz	r2, 801a0e4 <strncmp+0x20>
 801a0c8:	3901      	subs	r1, #1
 801a0ca:	1884      	adds	r4, r0, r2
 801a0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a0d4:	429a      	cmp	r2, r3
 801a0d6:	d103      	bne.n	801a0e0 <strncmp+0x1c>
 801a0d8:	42a0      	cmp	r0, r4
 801a0da:	d001      	beq.n	801a0e0 <strncmp+0x1c>
 801a0dc:	2a00      	cmp	r2, #0
 801a0de:	d1f5      	bne.n	801a0cc <strncmp+0x8>
 801a0e0:	1ad0      	subs	r0, r2, r3
 801a0e2:	bd10      	pop	{r4, pc}
 801a0e4:	4610      	mov	r0, r2
 801a0e6:	e7fc      	b.n	801a0e2 <strncmp+0x1e>

0801a0e8 <_localeconv_r>:
 801a0e8:	4800      	ldr	r0, [pc, #0]	@ (801a0ec <_localeconv_r+0x4>)
 801a0ea:	4770      	bx	lr
 801a0ec:	24000230 	.word	0x24000230

0801a0f0 <_close_r>:
 801a0f0:	b538      	push	{r3, r4, r5, lr}
 801a0f2:	4d06      	ldr	r5, [pc, #24]	@ (801a10c <_close_r+0x1c>)
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	4604      	mov	r4, r0
 801a0f8:	4608      	mov	r0, r1
 801a0fa:	602b      	str	r3, [r5, #0]
 801a0fc:	f7e8 fe70 	bl	8002de0 <_close>
 801a100:	1c43      	adds	r3, r0, #1
 801a102:	d102      	bne.n	801a10a <_close_r+0x1a>
 801a104:	682b      	ldr	r3, [r5, #0]
 801a106:	b103      	cbz	r3, 801a10a <_close_r+0x1a>
 801a108:	6023      	str	r3, [r4, #0]
 801a10a:	bd38      	pop	{r3, r4, r5, pc}
 801a10c:	2401ce34 	.word	0x2401ce34

0801a110 <_lseek_r>:
 801a110:	b538      	push	{r3, r4, r5, lr}
 801a112:	4d07      	ldr	r5, [pc, #28]	@ (801a130 <_lseek_r+0x20>)
 801a114:	4604      	mov	r4, r0
 801a116:	4608      	mov	r0, r1
 801a118:	4611      	mov	r1, r2
 801a11a:	2200      	movs	r2, #0
 801a11c:	602a      	str	r2, [r5, #0]
 801a11e:	461a      	mov	r2, r3
 801a120:	f7e8 fe85 	bl	8002e2e <_lseek>
 801a124:	1c43      	adds	r3, r0, #1
 801a126:	d102      	bne.n	801a12e <_lseek_r+0x1e>
 801a128:	682b      	ldr	r3, [r5, #0]
 801a12a:	b103      	cbz	r3, 801a12e <_lseek_r+0x1e>
 801a12c:	6023      	str	r3, [r4, #0]
 801a12e:	bd38      	pop	{r3, r4, r5, pc}
 801a130:	2401ce34 	.word	0x2401ce34

0801a134 <_read_r>:
 801a134:	b538      	push	{r3, r4, r5, lr}
 801a136:	4d07      	ldr	r5, [pc, #28]	@ (801a154 <_read_r+0x20>)
 801a138:	4604      	mov	r4, r0
 801a13a:	4608      	mov	r0, r1
 801a13c:	4611      	mov	r1, r2
 801a13e:	2200      	movs	r2, #0
 801a140:	602a      	str	r2, [r5, #0]
 801a142:	461a      	mov	r2, r3
 801a144:	f7e8 fe13 	bl	8002d6e <_read>
 801a148:	1c43      	adds	r3, r0, #1
 801a14a:	d102      	bne.n	801a152 <_read_r+0x1e>
 801a14c:	682b      	ldr	r3, [r5, #0]
 801a14e:	b103      	cbz	r3, 801a152 <_read_r+0x1e>
 801a150:	6023      	str	r3, [r4, #0]
 801a152:	bd38      	pop	{r3, r4, r5, pc}
 801a154:	2401ce34 	.word	0x2401ce34

0801a158 <_write_r>:
 801a158:	b538      	push	{r3, r4, r5, lr}
 801a15a:	4d07      	ldr	r5, [pc, #28]	@ (801a178 <_write_r+0x20>)
 801a15c:	4604      	mov	r4, r0
 801a15e:	4608      	mov	r0, r1
 801a160:	4611      	mov	r1, r2
 801a162:	2200      	movs	r2, #0
 801a164:	602a      	str	r2, [r5, #0]
 801a166:	461a      	mov	r2, r3
 801a168:	f7e8 fe1e 	bl	8002da8 <_write>
 801a16c:	1c43      	adds	r3, r0, #1
 801a16e:	d102      	bne.n	801a176 <_write_r+0x1e>
 801a170:	682b      	ldr	r3, [r5, #0]
 801a172:	b103      	cbz	r3, 801a176 <_write_r+0x1e>
 801a174:	6023      	str	r3, [r4, #0]
 801a176:	bd38      	pop	{r3, r4, r5, pc}
 801a178:	2401ce34 	.word	0x2401ce34

0801a17c <__errno>:
 801a17c:	4b01      	ldr	r3, [pc, #4]	@ (801a184 <__errno+0x8>)
 801a17e:	6818      	ldr	r0, [r3, #0]
 801a180:	4770      	bx	lr
 801a182:	bf00      	nop
 801a184:	240002ac 	.word	0x240002ac

0801a188 <__libc_init_array>:
 801a188:	b570      	push	{r4, r5, r6, lr}
 801a18a:	4d0d      	ldr	r5, [pc, #52]	@ (801a1c0 <__libc_init_array+0x38>)
 801a18c:	4c0d      	ldr	r4, [pc, #52]	@ (801a1c4 <__libc_init_array+0x3c>)
 801a18e:	1b64      	subs	r4, r4, r5
 801a190:	10a4      	asrs	r4, r4, #2
 801a192:	2600      	movs	r6, #0
 801a194:	42a6      	cmp	r6, r4
 801a196:	d109      	bne.n	801a1ac <__libc_init_array+0x24>
 801a198:	4d0b      	ldr	r5, [pc, #44]	@ (801a1c8 <__libc_init_array+0x40>)
 801a19a:	4c0c      	ldr	r4, [pc, #48]	@ (801a1cc <__libc_init_array+0x44>)
 801a19c:	f003 fb18 	bl	801d7d0 <_init>
 801a1a0:	1b64      	subs	r4, r4, r5
 801a1a2:	10a4      	asrs	r4, r4, #2
 801a1a4:	2600      	movs	r6, #0
 801a1a6:	42a6      	cmp	r6, r4
 801a1a8:	d105      	bne.n	801a1b6 <__libc_init_array+0x2e>
 801a1aa:	bd70      	pop	{r4, r5, r6, pc}
 801a1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1b0:	4798      	blx	r3
 801a1b2:	3601      	adds	r6, #1
 801a1b4:	e7ee      	b.n	801a194 <__libc_init_array+0xc>
 801a1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1ba:	4798      	blx	r3
 801a1bc:	3601      	adds	r6, #1
 801a1be:	e7f2      	b.n	801a1a6 <__libc_init_array+0x1e>
 801a1c0:	0801ea80 	.word	0x0801ea80
 801a1c4:	0801ea80 	.word	0x0801ea80
 801a1c8:	0801ea80 	.word	0x0801ea80
 801a1cc:	0801ea84 	.word	0x0801ea84

0801a1d0 <__retarget_lock_init_recursive>:
 801a1d0:	4770      	bx	lr

0801a1d2 <__retarget_lock_acquire_recursive>:
 801a1d2:	4770      	bx	lr

0801a1d4 <__retarget_lock_release_recursive>:
 801a1d4:	4770      	bx	lr

0801a1d6 <memcpy>:
 801a1d6:	440a      	add	r2, r1
 801a1d8:	4291      	cmp	r1, r2
 801a1da:	f100 33ff 	add.w	r3, r0, #4294967295
 801a1de:	d100      	bne.n	801a1e2 <memcpy+0xc>
 801a1e0:	4770      	bx	lr
 801a1e2:	b510      	push	{r4, lr}
 801a1e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a1e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a1ec:	4291      	cmp	r1, r2
 801a1ee:	d1f9      	bne.n	801a1e4 <memcpy+0xe>
 801a1f0:	bd10      	pop	{r4, pc}
 801a1f2:	0000      	movs	r0, r0
 801a1f4:	0000      	movs	r0, r0
	...

0801a1f8 <nan>:
 801a1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a200 <nan+0x8>
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop
 801a200:	00000000 	.word	0x00000000
 801a204:	7ff80000 	.word	0x7ff80000

0801a208 <quorem>:
 801a208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20c:	6903      	ldr	r3, [r0, #16]
 801a20e:	690c      	ldr	r4, [r1, #16]
 801a210:	42a3      	cmp	r3, r4
 801a212:	4607      	mov	r7, r0
 801a214:	db7e      	blt.n	801a314 <quorem+0x10c>
 801a216:	3c01      	subs	r4, #1
 801a218:	f101 0814 	add.w	r8, r1, #20
 801a21c:	00a3      	lsls	r3, r4, #2
 801a21e:	f100 0514 	add.w	r5, r0, #20
 801a222:	9300      	str	r3, [sp, #0]
 801a224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a228:	9301      	str	r3, [sp, #4]
 801a22a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a22e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a232:	3301      	adds	r3, #1
 801a234:	429a      	cmp	r2, r3
 801a236:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a23a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a23e:	d32e      	bcc.n	801a29e <quorem+0x96>
 801a240:	f04f 0a00 	mov.w	sl, #0
 801a244:	46c4      	mov	ip, r8
 801a246:	46ae      	mov	lr, r5
 801a248:	46d3      	mov	fp, sl
 801a24a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a24e:	b298      	uxth	r0, r3
 801a250:	fb06 a000 	mla	r0, r6, r0, sl
 801a254:	0c02      	lsrs	r2, r0, #16
 801a256:	0c1b      	lsrs	r3, r3, #16
 801a258:	fb06 2303 	mla	r3, r6, r3, r2
 801a25c:	f8de 2000 	ldr.w	r2, [lr]
 801a260:	b280      	uxth	r0, r0
 801a262:	b292      	uxth	r2, r2
 801a264:	1a12      	subs	r2, r2, r0
 801a266:	445a      	add	r2, fp
 801a268:	f8de 0000 	ldr.w	r0, [lr]
 801a26c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a270:	b29b      	uxth	r3, r3
 801a272:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a276:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a27a:	b292      	uxth	r2, r2
 801a27c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a280:	45e1      	cmp	r9, ip
 801a282:	f84e 2b04 	str.w	r2, [lr], #4
 801a286:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a28a:	d2de      	bcs.n	801a24a <quorem+0x42>
 801a28c:	9b00      	ldr	r3, [sp, #0]
 801a28e:	58eb      	ldr	r3, [r5, r3]
 801a290:	b92b      	cbnz	r3, 801a29e <quorem+0x96>
 801a292:	9b01      	ldr	r3, [sp, #4]
 801a294:	3b04      	subs	r3, #4
 801a296:	429d      	cmp	r5, r3
 801a298:	461a      	mov	r2, r3
 801a29a:	d32f      	bcc.n	801a2fc <quorem+0xf4>
 801a29c:	613c      	str	r4, [r7, #16]
 801a29e:	4638      	mov	r0, r7
 801a2a0:	f001 fca0 	bl	801bbe4 <__mcmp>
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	db25      	blt.n	801a2f4 <quorem+0xec>
 801a2a8:	4629      	mov	r1, r5
 801a2aa:	2000      	movs	r0, #0
 801a2ac:	f858 2b04 	ldr.w	r2, [r8], #4
 801a2b0:	f8d1 c000 	ldr.w	ip, [r1]
 801a2b4:	fa1f fe82 	uxth.w	lr, r2
 801a2b8:	fa1f f38c 	uxth.w	r3, ip
 801a2bc:	eba3 030e 	sub.w	r3, r3, lr
 801a2c0:	4403      	add	r3, r0
 801a2c2:	0c12      	lsrs	r2, r2, #16
 801a2c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a2c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2d2:	45c1      	cmp	r9, r8
 801a2d4:	f841 3b04 	str.w	r3, [r1], #4
 801a2d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a2dc:	d2e6      	bcs.n	801a2ac <quorem+0xa4>
 801a2de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a2e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a2e6:	b922      	cbnz	r2, 801a2f2 <quorem+0xea>
 801a2e8:	3b04      	subs	r3, #4
 801a2ea:	429d      	cmp	r5, r3
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	d30b      	bcc.n	801a308 <quorem+0x100>
 801a2f0:	613c      	str	r4, [r7, #16]
 801a2f2:	3601      	adds	r6, #1
 801a2f4:	4630      	mov	r0, r6
 801a2f6:	b003      	add	sp, #12
 801a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fc:	6812      	ldr	r2, [r2, #0]
 801a2fe:	3b04      	subs	r3, #4
 801a300:	2a00      	cmp	r2, #0
 801a302:	d1cb      	bne.n	801a29c <quorem+0x94>
 801a304:	3c01      	subs	r4, #1
 801a306:	e7c6      	b.n	801a296 <quorem+0x8e>
 801a308:	6812      	ldr	r2, [r2, #0]
 801a30a:	3b04      	subs	r3, #4
 801a30c:	2a00      	cmp	r2, #0
 801a30e:	d1ef      	bne.n	801a2f0 <quorem+0xe8>
 801a310:	3c01      	subs	r4, #1
 801a312:	e7ea      	b.n	801a2ea <quorem+0xe2>
 801a314:	2000      	movs	r0, #0
 801a316:	e7ee      	b.n	801a2f6 <quorem+0xee>

0801a318 <_dtoa_r>:
 801a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a31c:	ed2d 8b02 	vpush	{d8}
 801a320:	69c7      	ldr	r7, [r0, #28]
 801a322:	b091      	sub	sp, #68	@ 0x44
 801a324:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a328:	ec55 4b10 	vmov	r4, r5, d0
 801a32c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a32e:	9107      	str	r1, [sp, #28]
 801a330:	4681      	mov	r9, r0
 801a332:	9209      	str	r2, [sp, #36]	@ 0x24
 801a334:	930d      	str	r3, [sp, #52]	@ 0x34
 801a336:	b97f      	cbnz	r7, 801a358 <_dtoa_r+0x40>
 801a338:	2010      	movs	r0, #16
 801a33a:	f001 f8c7 	bl	801b4cc <malloc>
 801a33e:	4602      	mov	r2, r0
 801a340:	f8c9 001c 	str.w	r0, [r9, #28]
 801a344:	b920      	cbnz	r0, 801a350 <_dtoa_r+0x38>
 801a346:	4ba0      	ldr	r3, [pc, #640]	@ (801a5c8 <_dtoa_r+0x2b0>)
 801a348:	21ef      	movs	r1, #239	@ 0xef
 801a34a:	48a0      	ldr	r0, [pc, #640]	@ (801a5cc <_dtoa_r+0x2b4>)
 801a34c:	f002 f870 	bl	801c430 <__assert_func>
 801a350:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a354:	6007      	str	r7, [r0, #0]
 801a356:	60c7      	str	r7, [r0, #12]
 801a358:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a35c:	6819      	ldr	r1, [r3, #0]
 801a35e:	b159      	cbz	r1, 801a378 <_dtoa_r+0x60>
 801a360:	685a      	ldr	r2, [r3, #4]
 801a362:	604a      	str	r2, [r1, #4]
 801a364:	2301      	movs	r3, #1
 801a366:	4093      	lsls	r3, r2
 801a368:	608b      	str	r3, [r1, #8]
 801a36a:	4648      	mov	r0, r9
 801a36c:	f001 f9b6 	bl	801b6dc <_Bfree>
 801a370:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a374:	2200      	movs	r2, #0
 801a376:	601a      	str	r2, [r3, #0]
 801a378:	1e2b      	subs	r3, r5, #0
 801a37a:	bfbb      	ittet	lt
 801a37c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a380:	9303      	strlt	r3, [sp, #12]
 801a382:	2300      	movge	r3, #0
 801a384:	2201      	movlt	r2, #1
 801a386:	bfac      	ite	ge
 801a388:	6033      	strge	r3, [r6, #0]
 801a38a:	6032      	strlt	r2, [r6, #0]
 801a38c:	4b90      	ldr	r3, [pc, #576]	@ (801a5d0 <_dtoa_r+0x2b8>)
 801a38e:	9e03      	ldr	r6, [sp, #12]
 801a390:	43b3      	bics	r3, r6
 801a392:	d110      	bne.n	801a3b6 <_dtoa_r+0x9e>
 801a394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a396:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a39a:	6013      	str	r3, [r2, #0]
 801a39c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a3a0:	4323      	orrs	r3, r4
 801a3a2:	f000 84de 	beq.w	801ad62 <_dtoa_r+0xa4a>
 801a3a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3a8:	4f8a      	ldr	r7, [pc, #552]	@ (801a5d4 <_dtoa_r+0x2bc>)
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f000 84e0 	beq.w	801ad70 <_dtoa_r+0xa58>
 801a3b0:	1cfb      	adds	r3, r7, #3
 801a3b2:	f000 bcdb 	b.w	801ad6c <_dtoa_r+0xa54>
 801a3b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a3ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3c2:	d10a      	bne.n	801a3da <_dtoa_r+0xc2>
 801a3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3c6:	2301      	movs	r3, #1
 801a3c8:	6013      	str	r3, [r2, #0]
 801a3ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3cc:	b113      	cbz	r3, 801a3d4 <_dtoa_r+0xbc>
 801a3ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a3d0:	4b81      	ldr	r3, [pc, #516]	@ (801a5d8 <_dtoa_r+0x2c0>)
 801a3d2:	6013      	str	r3, [r2, #0]
 801a3d4:	4f81      	ldr	r7, [pc, #516]	@ (801a5dc <_dtoa_r+0x2c4>)
 801a3d6:	f000 bccb 	b.w	801ad70 <_dtoa_r+0xa58>
 801a3da:	aa0e      	add	r2, sp, #56	@ 0x38
 801a3dc:	a90f      	add	r1, sp, #60	@ 0x3c
 801a3de:	4648      	mov	r0, r9
 801a3e0:	eeb0 0b48 	vmov.f64	d0, d8
 801a3e4:	f001 fd1e 	bl	801be24 <__d2b>
 801a3e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a3ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a3ee:	9001      	str	r0, [sp, #4]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d045      	beq.n	801a480 <_dtoa_r+0x168>
 801a3f4:	eeb0 7b48 	vmov.f64	d7, d8
 801a3f8:	ee18 1a90 	vmov	r1, s17
 801a3fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a400:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a404:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a408:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a40c:	2500      	movs	r5, #0
 801a40e:	ee07 1a90 	vmov	s15, r1
 801a412:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a416:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5b0 <_dtoa_r+0x298>
 801a41a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a41e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a5b8 <_dtoa_r+0x2a0>
 801a422:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a426:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5c0 <_dtoa_r+0x2a8>
 801a42a:	ee07 3a90 	vmov	s15, r3
 801a42e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a432:	eeb0 7b46 	vmov.f64	d7, d6
 801a436:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a43a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a43e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a446:	ee16 8a90 	vmov	r8, s13
 801a44a:	d508      	bpl.n	801a45e <_dtoa_r+0x146>
 801a44c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a450:	eeb4 6b47 	vcmp.f64	d6, d7
 801a454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a458:	bf18      	it	ne
 801a45a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a45e:	f1b8 0f16 	cmp.w	r8, #22
 801a462:	d82b      	bhi.n	801a4bc <_dtoa_r+0x1a4>
 801a464:	495e      	ldr	r1, [pc, #376]	@ (801a5e0 <_dtoa_r+0x2c8>)
 801a466:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a46a:	ed91 7b00 	vldr	d7, [r1]
 801a46e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a476:	d501      	bpl.n	801a47c <_dtoa_r+0x164>
 801a478:	f108 38ff 	add.w	r8, r8, #4294967295
 801a47c:	2100      	movs	r1, #0
 801a47e:	e01e      	b.n	801a4be <_dtoa_r+0x1a6>
 801a480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a482:	4413      	add	r3, r2
 801a484:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a488:	2920      	cmp	r1, #32
 801a48a:	bfc1      	itttt	gt
 801a48c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a490:	408e      	lslgt	r6, r1
 801a492:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a496:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a49a:	bfd6      	itet	le
 801a49c:	f1c1 0120 	rsble	r1, r1, #32
 801a4a0:	4331      	orrgt	r1, r6
 801a4a2:	fa04 f101 	lslle.w	r1, r4, r1
 801a4a6:	ee07 1a90 	vmov	s15, r1
 801a4aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a4ae:	3b01      	subs	r3, #1
 801a4b0:	ee17 1a90 	vmov	r1, s15
 801a4b4:	2501      	movs	r5, #1
 801a4b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a4ba:	e7a8      	b.n	801a40e <_dtoa_r+0xf6>
 801a4bc:	2101      	movs	r1, #1
 801a4be:	1ad2      	subs	r2, r2, r3
 801a4c0:	1e53      	subs	r3, r2, #1
 801a4c2:	9306      	str	r3, [sp, #24]
 801a4c4:	bf45      	ittet	mi
 801a4c6:	f1c2 0301 	rsbmi	r3, r2, #1
 801a4ca:	9305      	strmi	r3, [sp, #20]
 801a4cc:	2300      	movpl	r3, #0
 801a4ce:	2300      	movmi	r3, #0
 801a4d0:	bf4c      	ite	mi
 801a4d2:	9306      	strmi	r3, [sp, #24]
 801a4d4:	9305      	strpl	r3, [sp, #20]
 801a4d6:	f1b8 0f00 	cmp.w	r8, #0
 801a4da:	910c      	str	r1, [sp, #48]	@ 0x30
 801a4dc:	db18      	blt.n	801a510 <_dtoa_r+0x1f8>
 801a4de:	9b06      	ldr	r3, [sp, #24]
 801a4e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a4e4:	4443      	add	r3, r8
 801a4e6:	9306      	str	r3, [sp, #24]
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	9a07      	ldr	r2, [sp, #28]
 801a4ec:	2a09      	cmp	r2, #9
 801a4ee:	d849      	bhi.n	801a584 <_dtoa_r+0x26c>
 801a4f0:	2a05      	cmp	r2, #5
 801a4f2:	bfc4      	itt	gt
 801a4f4:	3a04      	subgt	r2, #4
 801a4f6:	9207      	strgt	r2, [sp, #28]
 801a4f8:	9a07      	ldr	r2, [sp, #28]
 801a4fa:	f1a2 0202 	sub.w	r2, r2, #2
 801a4fe:	bfcc      	ite	gt
 801a500:	2400      	movgt	r4, #0
 801a502:	2401      	movle	r4, #1
 801a504:	2a03      	cmp	r2, #3
 801a506:	d848      	bhi.n	801a59a <_dtoa_r+0x282>
 801a508:	e8df f002 	tbb	[pc, r2]
 801a50c:	3a2c2e0b 	.word	0x3a2c2e0b
 801a510:	9b05      	ldr	r3, [sp, #20]
 801a512:	2200      	movs	r2, #0
 801a514:	eba3 0308 	sub.w	r3, r3, r8
 801a518:	9305      	str	r3, [sp, #20]
 801a51a:	920a      	str	r2, [sp, #40]	@ 0x28
 801a51c:	f1c8 0300 	rsb	r3, r8, #0
 801a520:	e7e3      	b.n	801a4ea <_dtoa_r+0x1d2>
 801a522:	2200      	movs	r2, #0
 801a524:	9208      	str	r2, [sp, #32]
 801a526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a528:	2a00      	cmp	r2, #0
 801a52a:	dc39      	bgt.n	801a5a0 <_dtoa_r+0x288>
 801a52c:	f04f 0b01 	mov.w	fp, #1
 801a530:	46da      	mov	sl, fp
 801a532:	465a      	mov	r2, fp
 801a534:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a538:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a53c:	2100      	movs	r1, #0
 801a53e:	2004      	movs	r0, #4
 801a540:	f100 0614 	add.w	r6, r0, #20
 801a544:	4296      	cmp	r6, r2
 801a546:	d930      	bls.n	801a5aa <_dtoa_r+0x292>
 801a548:	6079      	str	r1, [r7, #4]
 801a54a:	4648      	mov	r0, r9
 801a54c:	9304      	str	r3, [sp, #16]
 801a54e:	f001 f885 	bl	801b65c <_Balloc>
 801a552:	9b04      	ldr	r3, [sp, #16]
 801a554:	4607      	mov	r7, r0
 801a556:	2800      	cmp	r0, #0
 801a558:	d146      	bne.n	801a5e8 <_dtoa_r+0x2d0>
 801a55a:	4b22      	ldr	r3, [pc, #136]	@ (801a5e4 <_dtoa_r+0x2cc>)
 801a55c:	4602      	mov	r2, r0
 801a55e:	f240 11af 	movw	r1, #431	@ 0x1af
 801a562:	e6f2      	b.n	801a34a <_dtoa_r+0x32>
 801a564:	2201      	movs	r2, #1
 801a566:	e7dd      	b.n	801a524 <_dtoa_r+0x20c>
 801a568:	2200      	movs	r2, #0
 801a56a:	9208      	str	r2, [sp, #32]
 801a56c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a56e:	eb08 0b02 	add.w	fp, r8, r2
 801a572:	f10b 0a01 	add.w	sl, fp, #1
 801a576:	4652      	mov	r2, sl
 801a578:	2a01      	cmp	r2, #1
 801a57a:	bfb8      	it	lt
 801a57c:	2201      	movlt	r2, #1
 801a57e:	e7db      	b.n	801a538 <_dtoa_r+0x220>
 801a580:	2201      	movs	r2, #1
 801a582:	e7f2      	b.n	801a56a <_dtoa_r+0x252>
 801a584:	2401      	movs	r4, #1
 801a586:	2200      	movs	r2, #0
 801a588:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a58c:	f04f 3bff 	mov.w	fp, #4294967295
 801a590:	2100      	movs	r1, #0
 801a592:	46da      	mov	sl, fp
 801a594:	2212      	movs	r2, #18
 801a596:	9109      	str	r1, [sp, #36]	@ 0x24
 801a598:	e7ce      	b.n	801a538 <_dtoa_r+0x220>
 801a59a:	2201      	movs	r2, #1
 801a59c:	9208      	str	r2, [sp, #32]
 801a59e:	e7f5      	b.n	801a58c <_dtoa_r+0x274>
 801a5a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a5a4:	46da      	mov	sl, fp
 801a5a6:	465a      	mov	r2, fp
 801a5a8:	e7c6      	b.n	801a538 <_dtoa_r+0x220>
 801a5aa:	3101      	adds	r1, #1
 801a5ac:	0040      	lsls	r0, r0, #1
 801a5ae:	e7c7      	b.n	801a540 <_dtoa_r+0x228>
 801a5b0:	636f4361 	.word	0x636f4361
 801a5b4:	3fd287a7 	.word	0x3fd287a7
 801a5b8:	8b60c8b3 	.word	0x8b60c8b3
 801a5bc:	3fc68a28 	.word	0x3fc68a28
 801a5c0:	509f79fb 	.word	0x509f79fb
 801a5c4:	3fd34413 	.word	0x3fd34413
 801a5c8:	0801e4da 	.word	0x0801e4da
 801a5cc:	0801e4f1 	.word	0x0801e4f1
 801a5d0:	7ff00000 	.word	0x7ff00000
 801a5d4:	0801e4d6 	.word	0x0801e4d6
 801a5d8:	0801e4a2 	.word	0x0801e4a2
 801a5dc:	0801e4a1 	.word	0x0801e4a1
 801a5e0:	0801e648 	.word	0x0801e648
 801a5e4:	0801e549 	.word	0x0801e549
 801a5e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a5ec:	f1ba 0f0e 	cmp.w	sl, #14
 801a5f0:	6010      	str	r0, [r2, #0]
 801a5f2:	d86f      	bhi.n	801a6d4 <_dtoa_r+0x3bc>
 801a5f4:	2c00      	cmp	r4, #0
 801a5f6:	d06d      	beq.n	801a6d4 <_dtoa_r+0x3bc>
 801a5f8:	f1b8 0f00 	cmp.w	r8, #0
 801a5fc:	f340 80c2 	ble.w	801a784 <_dtoa_r+0x46c>
 801a600:	4aca      	ldr	r2, [pc, #808]	@ (801a92c <_dtoa_r+0x614>)
 801a602:	f008 010f 	and.w	r1, r8, #15
 801a606:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a60a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a60e:	ed92 7b00 	vldr	d7, [r2]
 801a612:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a616:	f000 80a9 	beq.w	801a76c <_dtoa_r+0x454>
 801a61a:	4ac5      	ldr	r2, [pc, #788]	@ (801a930 <_dtoa_r+0x618>)
 801a61c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a620:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a624:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a628:	f001 010f 	and.w	r1, r1, #15
 801a62c:	2203      	movs	r2, #3
 801a62e:	48c0      	ldr	r0, [pc, #768]	@ (801a930 <_dtoa_r+0x618>)
 801a630:	2900      	cmp	r1, #0
 801a632:	f040 809d 	bne.w	801a770 <_dtoa_r+0x458>
 801a636:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a63a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a63e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a642:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a644:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a648:	2900      	cmp	r1, #0
 801a64a:	f000 80c1 	beq.w	801a7d0 <_dtoa_r+0x4b8>
 801a64e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a652:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a65a:	f140 80b9 	bpl.w	801a7d0 <_dtoa_r+0x4b8>
 801a65e:	f1ba 0f00 	cmp.w	sl, #0
 801a662:	f000 80b5 	beq.w	801a7d0 <_dtoa_r+0x4b8>
 801a666:	f1bb 0f00 	cmp.w	fp, #0
 801a66a:	dd31      	ble.n	801a6d0 <_dtoa_r+0x3b8>
 801a66c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a670:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a674:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a678:	f108 31ff 	add.w	r1, r8, #4294967295
 801a67c:	9104      	str	r1, [sp, #16]
 801a67e:	3201      	adds	r2, #1
 801a680:	465c      	mov	r4, fp
 801a682:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a686:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a68a:	ee07 2a90 	vmov	s15, r2
 801a68e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a692:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a696:	ee15 2a90 	vmov	r2, s11
 801a69a:	ec51 0b15 	vmov	r0, r1, d5
 801a69e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a6a2:	2c00      	cmp	r4, #0
 801a6a4:	f040 8098 	bne.w	801a7d8 <_dtoa_r+0x4c0>
 801a6a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a6ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a6b0:	ec41 0b17 	vmov	d7, r0, r1
 801a6b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6bc:	f300 8261 	bgt.w	801ab82 <_dtoa_r+0x86a>
 801a6c0:	eeb1 7b47 	vneg.f64	d7, d7
 801a6c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6cc:	f100 80f5 	bmi.w	801a8ba <_dtoa_r+0x5a2>
 801a6d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a6d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a6d6:	2a00      	cmp	r2, #0
 801a6d8:	f2c0 812c 	blt.w	801a934 <_dtoa_r+0x61c>
 801a6dc:	f1b8 0f0e 	cmp.w	r8, #14
 801a6e0:	f300 8128 	bgt.w	801a934 <_dtoa_r+0x61c>
 801a6e4:	4b91      	ldr	r3, [pc, #580]	@ (801a92c <_dtoa_r+0x614>)
 801a6e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a6ea:	ed93 6b00 	vldr	d6, [r3]
 801a6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	da03      	bge.n	801a6fc <_dtoa_r+0x3e4>
 801a6f4:	f1ba 0f00 	cmp.w	sl, #0
 801a6f8:	f340 80d2 	ble.w	801a8a0 <_dtoa_r+0x588>
 801a6fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a700:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a704:	463e      	mov	r6, r7
 801a706:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a70a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a70e:	ee15 3a10 	vmov	r3, s10
 801a712:	3330      	adds	r3, #48	@ 0x30
 801a714:	f806 3b01 	strb.w	r3, [r6], #1
 801a718:	1bf3      	subs	r3, r6, r7
 801a71a:	459a      	cmp	sl, r3
 801a71c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a720:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a724:	f040 80f8 	bne.w	801a918 <_dtoa_r+0x600>
 801a728:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a72c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a734:	f300 80dd 	bgt.w	801a8f2 <_dtoa_r+0x5da>
 801a738:	eeb4 7b46 	vcmp.f64	d7, d6
 801a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a740:	d104      	bne.n	801a74c <_dtoa_r+0x434>
 801a742:	ee15 3a10 	vmov	r3, s10
 801a746:	07db      	lsls	r3, r3, #31
 801a748:	f100 80d3 	bmi.w	801a8f2 <_dtoa_r+0x5da>
 801a74c:	9901      	ldr	r1, [sp, #4]
 801a74e:	4648      	mov	r0, r9
 801a750:	f000 ffc4 	bl	801b6dc <_Bfree>
 801a754:	2300      	movs	r3, #0
 801a756:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a758:	7033      	strb	r3, [r6, #0]
 801a75a:	f108 0301 	add.w	r3, r8, #1
 801a75e:	6013      	str	r3, [r2, #0]
 801a760:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a762:	2b00      	cmp	r3, #0
 801a764:	f000 8304 	beq.w	801ad70 <_dtoa_r+0xa58>
 801a768:	601e      	str	r6, [r3, #0]
 801a76a:	e301      	b.n	801ad70 <_dtoa_r+0xa58>
 801a76c:	2202      	movs	r2, #2
 801a76e:	e75e      	b.n	801a62e <_dtoa_r+0x316>
 801a770:	07cc      	lsls	r4, r1, #31
 801a772:	d504      	bpl.n	801a77e <_dtoa_r+0x466>
 801a774:	ed90 6b00 	vldr	d6, [r0]
 801a778:	3201      	adds	r2, #1
 801a77a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a77e:	1049      	asrs	r1, r1, #1
 801a780:	3008      	adds	r0, #8
 801a782:	e755      	b.n	801a630 <_dtoa_r+0x318>
 801a784:	d022      	beq.n	801a7cc <_dtoa_r+0x4b4>
 801a786:	f1c8 0100 	rsb	r1, r8, #0
 801a78a:	4a68      	ldr	r2, [pc, #416]	@ (801a92c <_dtoa_r+0x614>)
 801a78c:	f001 000f 	and.w	r0, r1, #15
 801a790:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a794:	ed92 7b00 	vldr	d7, [r2]
 801a798:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a79c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7a0:	4863      	ldr	r0, [pc, #396]	@ (801a930 <_dtoa_r+0x618>)
 801a7a2:	1109      	asrs	r1, r1, #4
 801a7a4:	2400      	movs	r4, #0
 801a7a6:	2202      	movs	r2, #2
 801a7a8:	b929      	cbnz	r1, 801a7b6 <_dtoa_r+0x49e>
 801a7aa:	2c00      	cmp	r4, #0
 801a7ac:	f43f af49 	beq.w	801a642 <_dtoa_r+0x32a>
 801a7b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7b4:	e745      	b.n	801a642 <_dtoa_r+0x32a>
 801a7b6:	07ce      	lsls	r6, r1, #31
 801a7b8:	d505      	bpl.n	801a7c6 <_dtoa_r+0x4ae>
 801a7ba:	ed90 6b00 	vldr	d6, [r0]
 801a7be:	3201      	adds	r2, #1
 801a7c0:	2401      	movs	r4, #1
 801a7c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7c6:	1049      	asrs	r1, r1, #1
 801a7c8:	3008      	adds	r0, #8
 801a7ca:	e7ed      	b.n	801a7a8 <_dtoa_r+0x490>
 801a7cc:	2202      	movs	r2, #2
 801a7ce:	e738      	b.n	801a642 <_dtoa_r+0x32a>
 801a7d0:	f8cd 8010 	str.w	r8, [sp, #16]
 801a7d4:	4654      	mov	r4, sl
 801a7d6:	e754      	b.n	801a682 <_dtoa_r+0x36a>
 801a7d8:	4a54      	ldr	r2, [pc, #336]	@ (801a92c <_dtoa_r+0x614>)
 801a7da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a7de:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a7e2:	9a08      	ldr	r2, [sp, #32]
 801a7e4:	ec41 0b17 	vmov	d7, r0, r1
 801a7e8:	443c      	add	r4, r7
 801a7ea:	b34a      	cbz	r2, 801a840 <_dtoa_r+0x528>
 801a7ec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a7f0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a7f4:	463e      	mov	r6, r7
 801a7f6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a7fa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a7fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a802:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a806:	ee14 2a90 	vmov	r2, s9
 801a80a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a80e:	3230      	adds	r2, #48	@ 0x30
 801a810:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a81c:	f806 2b01 	strb.w	r2, [r6], #1
 801a820:	d438      	bmi.n	801a894 <_dtoa_r+0x57c>
 801a822:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a826:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a82e:	d462      	bmi.n	801a8f6 <_dtoa_r+0x5de>
 801a830:	42a6      	cmp	r6, r4
 801a832:	f43f af4d 	beq.w	801a6d0 <_dtoa_r+0x3b8>
 801a836:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a83a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a83e:	e7e0      	b.n	801a802 <_dtoa_r+0x4ea>
 801a840:	4621      	mov	r1, r4
 801a842:	463e      	mov	r6, r7
 801a844:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a848:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a84c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a850:	ee14 2a90 	vmov	r2, s9
 801a854:	3230      	adds	r2, #48	@ 0x30
 801a856:	f806 2b01 	strb.w	r2, [r6], #1
 801a85a:	42a6      	cmp	r6, r4
 801a85c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a860:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a864:	d119      	bne.n	801a89a <_dtoa_r+0x582>
 801a866:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a86a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a86e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a876:	dc3e      	bgt.n	801a8f6 <_dtoa_r+0x5de>
 801a878:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a87c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a884:	f57f af24 	bpl.w	801a6d0 <_dtoa_r+0x3b8>
 801a888:	460e      	mov	r6, r1
 801a88a:	3901      	subs	r1, #1
 801a88c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a890:	2b30      	cmp	r3, #48	@ 0x30
 801a892:	d0f9      	beq.n	801a888 <_dtoa_r+0x570>
 801a894:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a898:	e758      	b.n	801a74c <_dtoa_r+0x434>
 801a89a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a89e:	e7d5      	b.n	801a84c <_dtoa_r+0x534>
 801a8a0:	d10b      	bne.n	801a8ba <_dtoa_r+0x5a2>
 801a8a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a8a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a8aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b6:	f2c0 8161 	blt.w	801ab7c <_dtoa_r+0x864>
 801a8ba:	2400      	movs	r4, #0
 801a8bc:	4625      	mov	r5, r4
 801a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8c0:	43db      	mvns	r3, r3
 801a8c2:	9304      	str	r3, [sp, #16]
 801a8c4:	463e      	mov	r6, r7
 801a8c6:	f04f 0800 	mov.w	r8, #0
 801a8ca:	4621      	mov	r1, r4
 801a8cc:	4648      	mov	r0, r9
 801a8ce:	f000 ff05 	bl	801b6dc <_Bfree>
 801a8d2:	2d00      	cmp	r5, #0
 801a8d4:	d0de      	beq.n	801a894 <_dtoa_r+0x57c>
 801a8d6:	f1b8 0f00 	cmp.w	r8, #0
 801a8da:	d005      	beq.n	801a8e8 <_dtoa_r+0x5d0>
 801a8dc:	45a8      	cmp	r8, r5
 801a8de:	d003      	beq.n	801a8e8 <_dtoa_r+0x5d0>
 801a8e0:	4641      	mov	r1, r8
 801a8e2:	4648      	mov	r0, r9
 801a8e4:	f000 fefa 	bl	801b6dc <_Bfree>
 801a8e8:	4629      	mov	r1, r5
 801a8ea:	4648      	mov	r0, r9
 801a8ec:	f000 fef6 	bl	801b6dc <_Bfree>
 801a8f0:	e7d0      	b.n	801a894 <_dtoa_r+0x57c>
 801a8f2:	f8cd 8010 	str.w	r8, [sp, #16]
 801a8f6:	4633      	mov	r3, r6
 801a8f8:	461e      	mov	r6, r3
 801a8fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a8fe:	2a39      	cmp	r2, #57	@ 0x39
 801a900:	d106      	bne.n	801a910 <_dtoa_r+0x5f8>
 801a902:	429f      	cmp	r7, r3
 801a904:	d1f8      	bne.n	801a8f8 <_dtoa_r+0x5e0>
 801a906:	9a04      	ldr	r2, [sp, #16]
 801a908:	3201      	adds	r2, #1
 801a90a:	9204      	str	r2, [sp, #16]
 801a90c:	2230      	movs	r2, #48	@ 0x30
 801a90e:	703a      	strb	r2, [r7, #0]
 801a910:	781a      	ldrb	r2, [r3, #0]
 801a912:	3201      	adds	r2, #1
 801a914:	701a      	strb	r2, [r3, #0]
 801a916:	e7bd      	b.n	801a894 <_dtoa_r+0x57c>
 801a918:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a91c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a924:	f47f aeef 	bne.w	801a706 <_dtoa_r+0x3ee>
 801a928:	e710      	b.n	801a74c <_dtoa_r+0x434>
 801a92a:	bf00      	nop
 801a92c:	0801e648 	.word	0x0801e648
 801a930:	0801e620 	.word	0x0801e620
 801a934:	9908      	ldr	r1, [sp, #32]
 801a936:	2900      	cmp	r1, #0
 801a938:	f000 80e3 	beq.w	801ab02 <_dtoa_r+0x7ea>
 801a93c:	9907      	ldr	r1, [sp, #28]
 801a93e:	2901      	cmp	r1, #1
 801a940:	f300 80c8 	bgt.w	801aad4 <_dtoa_r+0x7bc>
 801a944:	2d00      	cmp	r5, #0
 801a946:	f000 80c1 	beq.w	801aacc <_dtoa_r+0x7b4>
 801a94a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a94e:	9e05      	ldr	r6, [sp, #20]
 801a950:	461c      	mov	r4, r3
 801a952:	9304      	str	r3, [sp, #16]
 801a954:	9b05      	ldr	r3, [sp, #20]
 801a956:	4413      	add	r3, r2
 801a958:	9305      	str	r3, [sp, #20]
 801a95a:	9b06      	ldr	r3, [sp, #24]
 801a95c:	2101      	movs	r1, #1
 801a95e:	4413      	add	r3, r2
 801a960:	4648      	mov	r0, r9
 801a962:	9306      	str	r3, [sp, #24]
 801a964:	f000 ffb8 	bl	801b8d8 <__i2b>
 801a968:	9b04      	ldr	r3, [sp, #16]
 801a96a:	4605      	mov	r5, r0
 801a96c:	b166      	cbz	r6, 801a988 <_dtoa_r+0x670>
 801a96e:	9a06      	ldr	r2, [sp, #24]
 801a970:	2a00      	cmp	r2, #0
 801a972:	dd09      	ble.n	801a988 <_dtoa_r+0x670>
 801a974:	42b2      	cmp	r2, r6
 801a976:	9905      	ldr	r1, [sp, #20]
 801a978:	bfa8      	it	ge
 801a97a:	4632      	movge	r2, r6
 801a97c:	1a89      	subs	r1, r1, r2
 801a97e:	9105      	str	r1, [sp, #20]
 801a980:	9906      	ldr	r1, [sp, #24]
 801a982:	1ab6      	subs	r6, r6, r2
 801a984:	1a8a      	subs	r2, r1, r2
 801a986:	9206      	str	r2, [sp, #24]
 801a988:	b1fb      	cbz	r3, 801a9ca <_dtoa_r+0x6b2>
 801a98a:	9a08      	ldr	r2, [sp, #32]
 801a98c:	2a00      	cmp	r2, #0
 801a98e:	f000 80bc 	beq.w	801ab0a <_dtoa_r+0x7f2>
 801a992:	b19c      	cbz	r4, 801a9bc <_dtoa_r+0x6a4>
 801a994:	4629      	mov	r1, r5
 801a996:	4622      	mov	r2, r4
 801a998:	4648      	mov	r0, r9
 801a99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a99c:	f001 f85c 	bl	801ba58 <__pow5mult>
 801a9a0:	9a01      	ldr	r2, [sp, #4]
 801a9a2:	4601      	mov	r1, r0
 801a9a4:	4605      	mov	r5, r0
 801a9a6:	4648      	mov	r0, r9
 801a9a8:	f000 ffac 	bl	801b904 <__multiply>
 801a9ac:	9901      	ldr	r1, [sp, #4]
 801a9ae:	9004      	str	r0, [sp, #16]
 801a9b0:	4648      	mov	r0, r9
 801a9b2:	f000 fe93 	bl	801b6dc <_Bfree>
 801a9b6:	9a04      	ldr	r2, [sp, #16]
 801a9b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9ba:	9201      	str	r2, [sp, #4]
 801a9bc:	1b1a      	subs	r2, r3, r4
 801a9be:	d004      	beq.n	801a9ca <_dtoa_r+0x6b2>
 801a9c0:	9901      	ldr	r1, [sp, #4]
 801a9c2:	4648      	mov	r0, r9
 801a9c4:	f001 f848 	bl	801ba58 <__pow5mult>
 801a9c8:	9001      	str	r0, [sp, #4]
 801a9ca:	2101      	movs	r1, #1
 801a9cc:	4648      	mov	r0, r9
 801a9ce:	f000 ff83 	bl	801b8d8 <__i2b>
 801a9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	f000 81d0 	beq.w	801ad7c <_dtoa_r+0xa64>
 801a9dc:	461a      	mov	r2, r3
 801a9de:	4601      	mov	r1, r0
 801a9e0:	4648      	mov	r0, r9
 801a9e2:	f001 f839 	bl	801ba58 <__pow5mult>
 801a9e6:	9b07      	ldr	r3, [sp, #28]
 801a9e8:	2b01      	cmp	r3, #1
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	f300 8095 	bgt.w	801ab1a <_dtoa_r+0x802>
 801a9f0:	9b02      	ldr	r3, [sp, #8]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	f040 808b 	bne.w	801ab0e <_dtoa_r+0x7f6>
 801a9f8:	9b03      	ldr	r3, [sp, #12]
 801a9fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a9fe:	2a00      	cmp	r2, #0
 801aa00:	f040 8087 	bne.w	801ab12 <_dtoa_r+0x7fa>
 801aa04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801aa08:	0d12      	lsrs	r2, r2, #20
 801aa0a:	0512      	lsls	r2, r2, #20
 801aa0c:	2a00      	cmp	r2, #0
 801aa0e:	f000 8082 	beq.w	801ab16 <_dtoa_r+0x7fe>
 801aa12:	9b05      	ldr	r3, [sp, #20]
 801aa14:	3301      	adds	r3, #1
 801aa16:	9305      	str	r3, [sp, #20]
 801aa18:	9b06      	ldr	r3, [sp, #24]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	9306      	str	r3, [sp, #24]
 801aa1e:	2301      	movs	r3, #1
 801aa20:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	f000 81af 	beq.w	801ad88 <_dtoa_r+0xa70>
 801aa2a:	6922      	ldr	r2, [r4, #16]
 801aa2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa30:	6910      	ldr	r0, [r2, #16]
 801aa32:	f000 ff05 	bl	801b840 <__hi0bits>
 801aa36:	f1c0 0020 	rsb	r0, r0, #32
 801aa3a:	9b06      	ldr	r3, [sp, #24]
 801aa3c:	4418      	add	r0, r3
 801aa3e:	f010 001f 	ands.w	r0, r0, #31
 801aa42:	d076      	beq.n	801ab32 <_dtoa_r+0x81a>
 801aa44:	f1c0 0220 	rsb	r2, r0, #32
 801aa48:	2a04      	cmp	r2, #4
 801aa4a:	dd69      	ble.n	801ab20 <_dtoa_r+0x808>
 801aa4c:	9b05      	ldr	r3, [sp, #20]
 801aa4e:	f1c0 001c 	rsb	r0, r0, #28
 801aa52:	4403      	add	r3, r0
 801aa54:	9305      	str	r3, [sp, #20]
 801aa56:	9b06      	ldr	r3, [sp, #24]
 801aa58:	4406      	add	r6, r0
 801aa5a:	4403      	add	r3, r0
 801aa5c:	9306      	str	r3, [sp, #24]
 801aa5e:	9b05      	ldr	r3, [sp, #20]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	dd05      	ble.n	801aa70 <_dtoa_r+0x758>
 801aa64:	9901      	ldr	r1, [sp, #4]
 801aa66:	461a      	mov	r2, r3
 801aa68:	4648      	mov	r0, r9
 801aa6a:	f001 f84f 	bl	801bb0c <__lshift>
 801aa6e:	9001      	str	r0, [sp, #4]
 801aa70:	9b06      	ldr	r3, [sp, #24]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	dd05      	ble.n	801aa82 <_dtoa_r+0x76a>
 801aa76:	4621      	mov	r1, r4
 801aa78:	461a      	mov	r2, r3
 801aa7a:	4648      	mov	r0, r9
 801aa7c:	f001 f846 	bl	801bb0c <__lshift>
 801aa80:	4604      	mov	r4, r0
 801aa82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d056      	beq.n	801ab36 <_dtoa_r+0x81e>
 801aa88:	9801      	ldr	r0, [sp, #4]
 801aa8a:	4621      	mov	r1, r4
 801aa8c:	f001 f8aa 	bl	801bbe4 <__mcmp>
 801aa90:	2800      	cmp	r0, #0
 801aa92:	da50      	bge.n	801ab36 <_dtoa_r+0x81e>
 801aa94:	f108 33ff 	add.w	r3, r8, #4294967295
 801aa98:	9304      	str	r3, [sp, #16]
 801aa9a:	9901      	ldr	r1, [sp, #4]
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	220a      	movs	r2, #10
 801aaa0:	4648      	mov	r0, r9
 801aaa2:	f000 fe3d 	bl	801b720 <__multadd>
 801aaa6:	9b08      	ldr	r3, [sp, #32]
 801aaa8:	9001      	str	r0, [sp, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	f000 816e 	beq.w	801ad8c <_dtoa_r+0xa74>
 801aab0:	4629      	mov	r1, r5
 801aab2:	2300      	movs	r3, #0
 801aab4:	220a      	movs	r2, #10
 801aab6:	4648      	mov	r0, r9
 801aab8:	f000 fe32 	bl	801b720 <__multadd>
 801aabc:	f1bb 0f00 	cmp.w	fp, #0
 801aac0:	4605      	mov	r5, r0
 801aac2:	dc64      	bgt.n	801ab8e <_dtoa_r+0x876>
 801aac4:	9b07      	ldr	r3, [sp, #28]
 801aac6:	2b02      	cmp	r3, #2
 801aac8:	dc3e      	bgt.n	801ab48 <_dtoa_r+0x830>
 801aaca:	e060      	b.n	801ab8e <_dtoa_r+0x876>
 801aacc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aace:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801aad2:	e73c      	b.n	801a94e <_dtoa_r+0x636>
 801aad4:	f10a 34ff 	add.w	r4, sl, #4294967295
 801aad8:	42a3      	cmp	r3, r4
 801aada:	bfbf      	itttt	lt
 801aadc:	1ae2      	sublt	r2, r4, r3
 801aade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801aae0:	189b      	addlt	r3, r3, r2
 801aae2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801aae4:	bfae      	itee	ge
 801aae6:	1b1c      	subge	r4, r3, r4
 801aae8:	4623      	movlt	r3, r4
 801aaea:	2400      	movlt	r4, #0
 801aaec:	f1ba 0f00 	cmp.w	sl, #0
 801aaf0:	bfb5      	itete	lt
 801aaf2:	9a05      	ldrlt	r2, [sp, #20]
 801aaf4:	9e05      	ldrge	r6, [sp, #20]
 801aaf6:	eba2 060a 	sublt.w	r6, r2, sl
 801aafa:	4652      	movge	r2, sl
 801aafc:	bfb8      	it	lt
 801aafe:	2200      	movlt	r2, #0
 801ab00:	e727      	b.n	801a952 <_dtoa_r+0x63a>
 801ab02:	9e05      	ldr	r6, [sp, #20]
 801ab04:	9d08      	ldr	r5, [sp, #32]
 801ab06:	461c      	mov	r4, r3
 801ab08:	e730      	b.n	801a96c <_dtoa_r+0x654>
 801ab0a:	461a      	mov	r2, r3
 801ab0c:	e758      	b.n	801a9c0 <_dtoa_r+0x6a8>
 801ab0e:	2300      	movs	r3, #0
 801ab10:	e786      	b.n	801aa20 <_dtoa_r+0x708>
 801ab12:	9b02      	ldr	r3, [sp, #8]
 801ab14:	e784      	b.n	801aa20 <_dtoa_r+0x708>
 801ab16:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ab18:	e783      	b.n	801aa22 <_dtoa_r+0x70a>
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ab1e:	e784      	b.n	801aa2a <_dtoa_r+0x712>
 801ab20:	d09d      	beq.n	801aa5e <_dtoa_r+0x746>
 801ab22:	9b05      	ldr	r3, [sp, #20]
 801ab24:	321c      	adds	r2, #28
 801ab26:	4413      	add	r3, r2
 801ab28:	9305      	str	r3, [sp, #20]
 801ab2a:	9b06      	ldr	r3, [sp, #24]
 801ab2c:	4416      	add	r6, r2
 801ab2e:	4413      	add	r3, r2
 801ab30:	e794      	b.n	801aa5c <_dtoa_r+0x744>
 801ab32:	4602      	mov	r2, r0
 801ab34:	e7f5      	b.n	801ab22 <_dtoa_r+0x80a>
 801ab36:	f1ba 0f00 	cmp.w	sl, #0
 801ab3a:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab3e:	46d3      	mov	fp, sl
 801ab40:	dc21      	bgt.n	801ab86 <_dtoa_r+0x86e>
 801ab42:	9b07      	ldr	r3, [sp, #28]
 801ab44:	2b02      	cmp	r3, #2
 801ab46:	dd1e      	ble.n	801ab86 <_dtoa_r+0x86e>
 801ab48:	f1bb 0f00 	cmp.w	fp, #0
 801ab4c:	f47f aeb7 	bne.w	801a8be <_dtoa_r+0x5a6>
 801ab50:	4621      	mov	r1, r4
 801ab52:	465b      	mov	r3, fp
 801ab54:	2205      	movs	r2, #5
 801ab56:	4648      	mov	r0, r9
 801ab58:	f000 fde2 	bl	801b720 <__multadd>
 801ab5c:	4601      	mov	r1, r0
 801ab5e:	4604      	mov	r4, r0
 801ab60:	9801      	ldr	r0, [sp, #4]
 801ab62:	f001 f83f 	bl	801bbe4 <__mcmp>
 801ab66:	2800      	cmp	r0, #0
 801ab68:	f77f aea9 	ble.w	801a8be <_dtoa_r+0x5a6>
 801ab6c:	463e      	mov	r6, r7
 801ab6e:	2331      	movs	r3, #49	@ 0x31
 801ab70:	f806 3b01 	strb.w	r3, [r6], #1
 801ab74:	9b04      	ldr	r3, [sp, #16]
 801ab76:	3301      	adds	r3, #1
 801ab78:	9304      	str	r3, [sp, #16]
 801ab7a:	e6a4      	b.n	801a8c6 <_dtoa_r+0x5ae>
 801ab7c:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab80:	4654      	mov	r4, sl
 801ab82:	4625      	mov	r5, r4
 801ab84:	e7f2      	b.n	801ab6c <_dtoa_r+0x854>
 801ab86:	9b08      	ldr	r3, [sp, #32]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	f000 8103 	beq.w	801ad94 <_dtoa_r+0xa7c>
 801ab8e:	2e00      	cmp	r6, #0
 801ab90:	dd05      	ble.n	801ab9e <_dtoa_r+0x886>
 801ab92:	4629      	mov	r1, r5
 801ab94:	4632      	mov	r2, r6
 801ab96:	4648      	mov	r0, r9
 801ab98:	f000 ffb8 	bl	801bb0c <__lshift>
 801ab9c:	4605      	mov	r5, r0
 801ab9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d058      	beq.n	801ac56 <_dtoa_r+0x93e>
 801aba4:	6869      	ldr	r1, [r5, #4]
 801aba6:	4648      	mov	r0, r9
 801aba8:	f000 fd58 	bl	801b65c <_Balloc>
 801abac:	4606      	mov	r6, r0
 801abae:	b928      	cbnz	r0, 801abbc <_dtoa_r+0x8a4>
 801abb0:	4b82      	ldr	r3, [pc, #520]	@ (801adbc <_dtoa_r+0xaa4>)
 801abb2:	4602      	mov	r2, r0
 801abb4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801abb8:	f7ff bbc7 	b.w	801a34a <_dtoa_r+0x32>
 801abbc:	692a      	ldr	r2, [r5, #16]
 801abbe:	3202      	adds	r2, #2
 801abc0:	0092      	lsls	r2, r2, #2
 801abc2:	f105 010c 	add.w	r1, r5, #12
 801abc6:	300c      	adds	r0, #12
 801abc8:	f7ff fb05 	bl	801a1d6 <memcpy>
 801abcc:	2201      	movs	r2, #1
 801abce:	4631      	mov	r1, r6
 801abd0:	4648      	mov	r0, r9
 801abd2:	f000 ff9b 	bl	801bb0c <__lshift>
 801abd6:	1c7b      	adds	r3, r7, #1
 801abd8:	9305      	str	r3, [sp, #20]
 801abda:	eb07 030b 	add.w	r3, r7, fp
 801abde:	9309      	str	r3, [sp, #36]	@ 0x24
 801abe0:	9b02      	ldr	r3, [sp, #8]
 801abe2:	f003 0301 	and.w	r3, r3, #1
 801abe6:	46a8      	mov	r8, r5
 801abe8:	9308      	str	r3, [sp, #32]
 801abea:	4605      	mov	r5, r0
 801abec:	9b05      	ldr	r3, [sp, #20]
 801abee:	9801      	ldr	r0, [sp, #4]
 801abf0:	4621      	mov	r1, r4
 801abf2:	f103 3bff 	add.w	fp, r3, #4294967295
 801abf6:	f7ff fb07 	bl	801a208 <quorem>
 801abfa:	4641      	mov	r1, r8
 801abfc:	9002      	str	r0, [sp, #8]
 801abfe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ac02:	9801      	ldr	r0, [sp, #4]
 801ac04:	f000 ffee 	bl	801bbe4 <__mcmp>
 801ac08:	462a      	mov	r2, r5
 801ac0a:	9006      	str	r0, [sp, #24]
 801ac0c:	4621      	mov	r1, r4
 801ac0e:	4648      	mov	r0, r9
 801ac10:	f001 f804 	bl	801bc1c <__mdiff>
 801ac14:	68c2      	ldr	r2, [r0, #12]
 801ac16:	4606      	mov	r6, r0
 801ac18:	b9fa      	cbnz	r2, 801ac5a <_dtoa_r+0x942>
 801ac1a:	4601      	mov	r1, r0
 801ac1c:	9801      	ldr	r0, [sp, #4]
 801ac1e:	f000 ffe1 	bl	801bbe4 <__mcmp>
 801ac22:	4602      	mov	r2, r0
 801ac24:	4631      	mov	r1, r6
 801ac26:	4648      	mov	r0, r9
 801ac28:	920a      	str	r2, [sp, #40]	@ 0x28
 801ac2a:	f000 fd57 	bl	801b6dc <_Bfree>
 801ac2e:	9b07      	ldr	r3, [sp, #28]
 801ac30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac32:	9e05      	ldr	r6, [sp, #20]
 801ac34:	ea43 0102 	orr.w	r1, r3, r2
 801ac38:	9b08      	ldr	r3, [sp, #32]
 801ac3a:	4319      	orrs	r1, r3
 801ac3c:	d10f      	bne.n	801ac5e <_dtoa_r+0x946>
 801ac3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ac42:	d028      	beq.n	801ac96 <_dtoa_r+0x97e>
 801ac44:	9b06      	ldr	r3, [sp, #24]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	dd02      	ble.n	801ac50 <_dtoa_r+0x938>
 801ac4a:	9b02      	ldr	r3, [sp, #8]
 801ac4c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801ac50:	f88b a000 	strb.w	sl, [fp]
 801ac54:	e639      	b.n	801a8ca <_dtoa_r+0x5b2>
 801ac56:	4628      	mov	r0, r5
 801ac58:	e7bd      	b.n	801abd6 <_dtoa_r+0x8be>
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	e7e2      	b.n	801ac24 <_dtoa_r+0x90c>
 801ac5e:	9b06      	ldr	r3, [sp, #24]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	db04      	blt.n	801ac6e <_dtoa_r+0x956>
 801ac64:	9907      	ldr	r1, [sp, #28]
 801ac66:	430b      	orrs	r3, r1
 801ac68:	9908      	ldr	r1, [sp, #32]
 801ac6a:	430b      	orrs	r3, r1
 801ac6c:	d120      	bne.n	801acb0 <_dtoa_r+0x998>
 801ac6e:	2a00      	cmp	r2, #0
 801ac70:	ddee      	ble.n	801ac50 <_dtoa_r+0x938>
 801ac72:	9901      	ldr	r1, [sp, #4]
 801ac74:	2201      	movs	r2, #1
 801ac76:	4648      	mov	r0, r9
 801ac78:	f000 ff48 	bl	801bb0c <__lshift>
 801ac7c:	4621      	mov	r1, r4
 801ac7e:	9001      	str	r0, [sp, #4]
 801ac80:	f000 ffb0 	bl	801bbe4 <__mcmp>
 801ac84:	2800      	cmp	r0, #0
 801ac86:	dc03      	bgt.n	801ac90 <_dtoa_r+0x978>
 801ac88:	d1e2      	bne.n	801ac50 <_dtoa_r+0x938>
 801ac8a:	f01a 0f01 	tst.w	sl, #1
 801ac8e:	d0df      	beq.n	801ac50 <_dtoa_r+0x938>
 801ac90:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ac94:	d1d9      	bne.n	801ac4a <_dtoa_r+0x932>
 801ac96:	2339      	movs	r3, #57	@ 0x39
 801ac98:	f88b 3000 	strb.w	r3, [fp]
 801ac9c:	4633      	mov	r3, r6
 801ac9e:	461e      	mov	r6, r3
 801aca0:	3b01      	subs	r3, #1
 801aca2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801aca6:	2a39      	cmp	r2, #57	@ 0x39
 801aca8:	d053      	beq.n	801ad52 <_dtoa_r+0xa3a>
 801acaa:	3201      	adds	r2, #1
 801acac:	701a      	strb	r2, [r3, #0]
 801acae:	e60c      	b.n	801a8ca <_dtoa_r+0x5b2>
 801acb0:	2a00      	cmp	r2, #0
 801acb2:	dd07      	ble.n	801acc4 <_dtoa_r+0x9ac>
 801acb4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801acb8:	d0ed      	beq.n	801ac96 <_dtoa_r+0x97e>
 801acba:	f10a 0301 	add.w	r3, sl, #1
 801acbe:	f88b 3000 	strb.w	r3, [fp]
 801acc2:	e602      	b.n	801a8ca <_dtoa_r+0x5b2>
 801acc4:	9b05      	ldr	r3, [sp, #20]
 801acc6:	9a05      	ldr	r2, [sp, #20]
 801acc8:	f803 ac01 	strb.w	sl, [r3, #-1]
 801accc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acce:	4293      	cmp	r3, r2
 801acd0:	d029      	beq.n	801ad26 <_dtoa_r+0xa0e>
 801acd2:	9901      	ldr	r1, [sp, #4]
 801acd4:	2300      	movs	r3, #0
 801acd6:	220a      	movs	r2, #10
 801acd8:	4648      	mov	r0, r9
 801acda:	f000 fd21 	bl	801b720 <__multadd>
 801acde:	45a8      	cmp	r8, r5
 801ace0:	9001      	str	r0, [sp, #4]
 801ace2:	f04f 0300 	mov.w	r3, #0
 801ace6:	f04f 020a 	mov.w	r2, #10
 801acea:	4641      	mov	r1, r8
 801acec:	4648      	mov	r0, r9
 801acee:	d107      	bne.n	801ad00 <_dtoa_r+0x9e8>
 801acf0:	f000 fd16 	bl	801b720 <__multadd>
 801acf4:	4680      	mov	r8, r0
 801acf6:	4605      	mov	r5, r0
 801acf8:	9b05      	ldr	r3, [sp, #20]
 801acfa:	3301      	adds	r3, #1
 801acfc:	9305      	str	r3, [sp, #20]
 801acfe:	e775      	b.n	801abec <_dtoa_r+0x8d4>
 801ad00:	f000 fd0e 	bl	801b720 <__multadd>
 801ad04:	4629      	mov	r1, r5
 801ad06:	4680      	mov	r8, r0
 801ad08:	2300      	movs	r3, #0
 801ad0a:	220a      	movs	r2, #10
 801ad0c:	4648      	mov	r0, r9
 801ad0e:	f000 fd07 	bl	801b720 <__multadd>
 801ad12:	4605      	mov	r5, r0
 801ad14:	e7f0      	b.n	801acf8 <_dtoa_r+0x9e0>
 801ad16:	f1bb 0f00 	cmp.w	fp, #0
 801ad1a:	bfcc      	ite	gt
 801ad1c:	465e      	movgt	r6, fp
 801ad1e:	2601      	movle	r6, #1
 801ad20:	443e      	add	r6, r7
 801ad22:	f04f 0800 	mov.w	r8, #0
 801ad26:	9901      	ldr	r1, [sp, #4]
 801ad28:	2201      	movs	r2, #1
 801ad2a:	4648      	mov	r0, r9
 801ad2c:	f000 feee 	bl	801bb0c <__lshift>
 801ad30:	4621      	mov	r1, r4
 801ad32:	9001      	str	r0, [sp, #4]
 801ad34:	f000 ff56 	bl	801bbe4 <__mcmp>
 801ad38:	2800      	cmp	r0, #0
 801ad3a:	dcaf      	bgt.n	801ac9c <_dtoa_r+0x984>
 801ad3c:	d102      	bne.n	801ad44 <_dtoa_r+0xa2c>
 801ad3e:	f01a 0f01 	tst.w	sl, #1
 801ad42:	d1ab      	bne.n	801ac9c <_dtoa_r+0x984>
 801ad44:	4633      	mov	r3, r6
 801ad46:	461e      	mov	r6, r3
 801ad48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad4c:	2a30      	cmp	r2, #48	@ 0x30
 801ad4e:	d0fa      	beq.n	801ad46 <_dtoa_r+0xa2e>
 801ad50:	e5bb      	b.n	801a8ca <_dtoa_r+0x5b2>
 801ad52:	429f      	cmp	r7, r3
 801ad54:	d1a3      	bne.n	801ac9e <_dtoa_r+0x986>
 801ad56:	9b04      	ldr	r3, [sp, #16]
 801ad58:	3301      	adds	r3, #1
 801ad5a:	9304      	str	r3, [sp, #16]
 801ad5c:	2331      	movs	r3, #49	@ 0x31
 801ad5e:	703b      	strb	r3, [r7, #0]
 801ad60:	e5b3      	b.n	801a8ca <_dtoa_r+0x5b2>
 801ad62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad64:	4f16      	ldr	r7, [pc, #88]	@ (801adc0 <_dtoa_r+0xaa8>)
 801ad66:	b11b      	cbz	r3, 801ad70 <_dtoa_r+0xa58>
 801ad68:	f107 0308 	add.w	r3, r7, #8
 801ad6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ad6e:	6013      	str	r3, [r2, #0]
 801ad70:	4638      	mov	r0, r7
 801ad72:	b011      	add	sp, #68	@ 0x44
 801ad74:	ecbd 8b02 	vpop	{d8}
 801ad78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad7c:	9b07      	ldr	r3, [sp, #28]
 801ad7e:	2b01      	cmp	r3, #1
 801ad80:	f77f ae36 	ble.w	801a9f0 <_dtoa_r+0x6d8>
 801ad84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad86:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad88:	2001      	movs	r0, #1
 801ad8a:	e656      	b.n	801aa3a <_dtoa_r+0x722>
 801ad8c:	f1bb 0f00 	cmp.w	fp, #0
 801ad90:	f77f aed7 	ble.w	801ab42 <_dtoa_r+0x82a>
 801ad94:	463e      	mov	r6, r7
 801ad96:	9801      	ldr	r0, [sp, #4]
 801ad98:	4621      	mov	r1, r4
 801ad9a:	f7ff fa35 	bl	801a208 <quorem>
 801ad9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ada2:	f806 ab01 	strb.w	sl, [r6], #1
 801ada6:	1bf2      	subs	r2, r6, r7
 801ada8:	4593      	cmp	fp, r2
 801adaa:	ddb4      	ble.n	801ad16 <_dtoa_r+0x9fe>
 801adac:	9901      	ldr	r1, [sp, #4]
 801adae:	2300      	movs	r3, #0
 801adb0:	220a      	movs	r2, #10
 801adb2:	4648      	mov	r0, r9
 801adb4:	f000 fcb4 	bl	801b720 <__multadd>
 801adb8:	9001      	str	r0, [sp, #4]
 801adba:	e7ec      	b.n	801ad96 <_dtoa_r+0xa7e>
 801adbc:	0801e549 	.word	0x0801e549
 801adc0:	0801e4cd 	.word	0x0801e4cd

0801adc4 <_free_r>:
 801adc4:	b538      	push	{r3, r4, r5, lr}
 801adc6:	4605      	mov	r5, r0
 801adc8:	2900      	cmp	r1, #0
 801adca:	d041      	beq.n	801ae50 <_free_r+0x8c>
 801adcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801add0:	1f0c      	subs	r4, r1, #4
 801add2:	2b00      	cmp	r3, #0
 801add4:	bfb8      	it	lt
 801add6:	18e4      	addlt	r4, r4, r3
 801add8:	f000 fc34 	bl	801b644 <__malloc_lock>
 801addc:	4a1d      	ldr	r2, [pc, #116]	@ (801ae54 <_free_r+0x90>)
 801adde:	6813      	ldr	r3, [r2, #0]
 801ade0:	b933      	cbnz	r3, 801adf0 <_free_r+0x2c>
 801ade2:	6063      	str	r3, [r4, #4]
 801ade4:	6014      	str	r4, [r2, #0]
 801ade6:	4628      	mov	r0, r5
 801ade8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801adec:	f000 bc30 	b.w	801b650 <__malloc_unlock>
 801adf0:	42a3      	cmp	r3, r4
 801adf2:	d908      	bls.n	801ae06 <_free_r+0x42>
 801adf4:	6820      	ldr	r0, [r4, #0]
 801adf6:	1821      	adds	r1, r4, r0
 801adf8:	428b      	cmp	r3, r1
 801adfa:	bf01      	itttt	eq
 801adfc:	6819      	ldreq	r1, [r3, #0]
 801adfe:	685b      	ldreq	r3, [r3, #4]
 801ae00:	1809      	addeq	r1, r1, r0
 801ae02:	6021      	streq	r1, [r4, #0]
 801ae04:	e7ed      	b.n	801ade2 <_free_r+0x1e>
 801ae06:	461a      	mov	r2, r3
 801ae08:	685b      	ldr	r3, [r3, #4]
 801ae0a:	b10b      	cbz	r3, 801ae10 <_free_r+0x4c>
 801ae0c:	42a3      	cmp	r3, r4
 801ae0e:	d9fa      	bls.n	801ae06 <_free_r+0x42>
 801ae10:	6811      	ldr	r1, [r2, #0]
 801ae12:	1850      	adds	r0, r2, r1
 801ae14:	42a0      	cmp	r0, r4
 801ae16:	d10b      	bne.n	801ae30 <_free_r+0x6c>
 801ae18:	6820      	ldr	r0, [r4, #0]
 801ae1a:	4401      	add	r1, r0
 801ae1c:	1850      	adds	r0, r2, r1
 801ae1e:	4283      	cmp	r3, r0
 801ae20:	6011      	str	r1, [r2, #0]
 801ae22:	d1e0      	bne.n	801ade6 <_free_r+0x22>
 801ae24:	6818      	ldr	r0, [r3, #0]
 801ae26:	685b      	ldr	r3, [r3, #4]
 801ae28:	6053      	str	r3, [r2, #4]
 801ae2a:	4408      	add	r0, r1
 801ae2c:	6010      	str	r0, [r2, #0]
 801ae2e:	e7da      	b.n	801ade6 <_free_r+0x22>
 801ae30:	d902      	bls.n	801ae38 <_free_r+0x74>
 801ae32:	230c      	movs	r3, #12
 801ae34:	602b      	str	r3, [r5, #0]
 801ae36:	e7d6      	b.n	801ade6 <_free_r+0x22>
 801ae38:	6820      	ldr	r0, [r4, #0]
 801ae3a:	1821      	adds	r1, r4, r0
 801ae3c:	428b      	cmp	r3, r1
 801ae3e:	bf04      	itt	eq
 801ae40:	6819      	ldreq	r1, [r3, #0]
 801ae42:	685b      	ldreq	r3, [r3, #4]
 801ae44:	6063      	str	r3, [r4, #4]
 801ae46:	bf04      	itt	eq
 801ae48:	1809      	addeq	r1, r1, r0
 801ae4a:	6021      	streq	r1, [r4, #0]
 801ae4c:	6054      	str	r4, [r2, #4]
 801ae4e:	e7ca      	b.n	801ade6 <_free_r+0x22>
 801ae50:	bd38      	pop	{r3, r4, r5, pc}
 801ae52:	bf00      	nop
 801ae54:	2401ce40 	.word	0x2401ce40

0801ae58 <rshift>:
 801ae58:	6903      	ldr	r3, [r0, #16]
 801ae5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ae5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae62:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ae66:	f100 0414 	add.w	r4, r0, #20
 801ae6a:	dd45      	ble.n	801aef8 <rshift+0xa0>
 801ae6c:	f011 011f 	ands.w	r1, r1, #31
 801ae70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ae74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ae78:	d10c      	bne.n	801ae94 <rshift+0x3c>
 801ae7a:	f100 0710 	add.w	r7, r0, #16
 801ae7e:	4629      	mov	r1, r5
 801ae80:	42b1      	cmp	r1, r6
 801ae82:	d334      	bcc.n	801aeee <rshift+0x96>
 801ae84:	1a9b      	subs	r3, r3, r2
 801ae86:	009b      	lsls	r3, r3, #2
 801ae88:	1eea      	subs	r2, r5, #3
 801ae8a:	4296      	cmp	r6, r2
 801ae8c:	bf38      	it	cc
 801ae8e:	2300      	movcc	r3, #0
 801ae90:	4423      	add	r3, r4
 801ae92:	e015      	b.n	801aec0 <rshift+0x68>
 801ae94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ae98:	f1c1 0820 	rsb	r8, r1, #32
 801ae9c:	40cf      	lsrs	r7, r1
 801ae9e:	f105 0e04 	add.w	lr, r5, #4
 801aea2:	46a1      	mov	r9, r4
 801aea4:	4576      	cmp	r6, lr
 801aea6:	46f4      	mov	ip, lr
 801aea8:	d815      	bhi.n	801aed6 <rshift+0x7e>
 801aeaa:	1a9a      	subs	r2, r3, r2
 801aeac:	0092      	lsls	r2, r2, #2
 801aeae:	3a04      	subs	r2, #4
 801aeb0:	3501      	adds	r5, #1
 801aeb2:	42ae      	cmp	r6, r5
 801aeb4:	bf38      	it	cc
 801aeb6:	2200      	movcc	r2, #0
 801aeb8:	18a3      	adds	r3, r4, r2
 801aeba:	50a7      	str	r7, [r4, r2]
 801aebc:	b107      	cbz	r7, 801aec0 <rshift+0x68>
 801aebe:	3304      	adds	r3, #4
 801aec0:	1b1a      	subs	r2, r3, r4
 801aec2:	42a3      	cmp	r3, r4
 801aec4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aec8:	bf08      	it	eq
 801aeca:	2300      	moveq	r3, #0
 801aecc:	6102      	str	r2, [r0, #16]
 801aece:	bf08      	it	eq
 801aed0:	6143      	streq	r3, [r0, #20]
 801aed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aed6:	f8dc c000 	ldr.w	ip, [ip]
 801aeda:	fa0c fc08 	lsl.w	ip, ip, r8
 801aede:	ea4c 0707 	orr.w	r7, ip, r7
 801aee2:	f849 7b04 	str.w	r7, [r9], #4
 801aee6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aeea:	40cf      	lsrs	r7, r1
 801aeec:	e7da      	b.n	801aea4 <rshift+0x4c>
 801aeee:	f851 cb04 	ldr.w	ip, [r1], #4
 801aef2:	f847 cf04 	str.w	ip, [r7, #4]!
 801aef6:	e7c3      	b.n	801ae80 <rshift+0x28>
 801aef8:	4623      	mov	r3, r4
 801aefa:	e7e1      	b.n	801aec0 <rshift+0x68>

0801aefc <__hexdig_fun>:
 801aefc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801af00:	2b09      	cmp	r3, #9
 801af02:	d802      	bhi.n	801af0a <__hexdig_fun+0xe>
 801af04:	3820      	subs	r0, #32
 801af06:	b2c0      	uxtb	r0, r0
 801af08:	4770      	bx	lr
 801af0a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801af0e:	2b05      	cmp	r3, #5
 801af10:	d801      	bhi.n	801af16 <__hexdig_fun+0x1a>
 801af12:	3847      	subs	r0, #71	@ 0x47
 801af14:	e7f7      	b.n	801af06 <__hexdig_fun+0xa>
 801af16:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801af1a:	2b05      	cmp	r3, #5
 801af1c:	d801      	bhi.n	801af22 <__hexdig_fun+0x26>
 801af1e:	3827      	subs	r0, #39	@ 0x27
 801af20:	e7f1      	b.n	801af06 <__hexdig_fun+0xa>
 801af22:	2000      	movs	r0, #0
 801af24:	4770      	bx	lr
	...

0801af28 <__gethex>:
 801af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af2c:	b085      	sub	sp, #20
 801af2e:	468a      	mov	sl, r1
 801af30:	9302      	str	r3, [sp, #8]
 801af32:	680b      	ldr	r3, [r1, #0]
 801af34:	9001      	str	r0, [sp, #4]
 801af36:	4690      	mov	r8, r2
 801af38:	1c9c      	adds	r4, r3, #2
 801af3a:	46a1      	mov	r9, r4
 801af3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 801af40:	2830      	cmp	r0, #48	@ 0x30
 801af42:	d0fa      	beq.n	801af3a <__gethex+0x12>
 801af44:	eba9 0303 	sub.w	r3, r9, r3
 801af48:	f1a3 0b02 	sub.w	fp, r3, #2
 801af4c:	f7ff ffd6 	bl	801aefc <__hexdig_fun>
 801af50:	4605      	mov	r5, r0
 801af52:	2800      	cmp	r0, #0
 801af54:	d168      	bne.n	801b028 <__gethex+0x100>
 801af56:	49a0      	ldr	r1, [pc, #640]	@ (801b1d8 <__gethex+0x2b0>)
 801af58:	2201      	movs	r2, #1
 801af5a:	4648      	mov	r0, r9
 801af5c:	f7ff f8b2 	bl	801a0c4 <strncmp>
 801af60:	4607      	mov	r7, r0
 801af62:	2800      	cmp	r0, #0
 801af64:	d167      	bne.n	801b036 <__gethex+0x10e>
 801af66:	f899 0001 	ldrb.w	r0, [r9, #1]
 801af6a:	4626      	mov	r6, r4
 801af6c:	f7ff ffc6 	bl	801aefc <__hexdig_fun>
 801af70:	2800      	cmp	r0, #0
 801af72:	d062      	beq.n	801b03a <__gethex+0x112>
 801af74:	4623      	mov	r3, r4
 801af76:	7818      	ldrb	r0, [r3, #0]
 801af78:	2830      	cmp	r0, #48	@ 0x30
 801af7a:	4699      	mov	r9, r3
 801af7c:	f103 0301 	add.w	r3, r3, #1
 801af80:	d0f9      	beq.n	801af76 <__gethex+0x4e>
 801af82:	f7ff ffbb 	bl	801aefc <__hexdig_fun>
 801af86:	fab0 f580 	clz	r5, r0
 801af8a:	096d      	lsrs	r5, r5, #5
 801af8c:	f04f 0b01 	mov.w	fp, #1
 801af90:	464a      	mov	r2, r9
 801af92:	4616      	mov	r6, r2
 801af94:	3201      	adds	r2, #1
 801af96:	7830      	ldrb	r0, [r6, #0]
 801af98:	f7ff ffb0 	bl	801aefc <__hexdig_fun>
 801af9c:	2800      	cmp	r0, #0
 801af9e:	d1f8      	bne.n	801af92 <__gethex+0x6a>
 801afa0:	498d      	ldr	r1, [pc, #564]	@ (801b1d8 <__gethex+0x2b0>)
 801afa2:	2201      	movs	r2, #1
 801afa4:	4630      	mov	r0, r6
 801afa6:	f7ff f88d 	bl	801a0c4 <strncmp>
 801afaa:	2800      	cmp	r0, #0
 801afac:	d13f      	bne.n	801b02e <__gethex+0x106>
 801afae:	b944      	cbnz	r4, 801afc2 <__gethex+0x9a>
 801afb0:	1c74      	adds	r4, r6, #1
 801afb2:	4622      	mov	r2, r4
 801afb4:	4616      	mov	r6, r2
 801afb6:	3201      	adds	r2, #1
 801afb8:	7830      	ldrb	r0, [r6, #0]
 801afba:	f7ff ff9f 	bl	801aefc <__hexdig_fun>
 801afbe:	2800      	cmp	r0, #0
 801afc0:	d1f8      	bne.n	801afb4 <__gethex+0x8c>
 801afc2:	1ba4      	subs	r4, r4, r6
 801afc4:	00a7      	lsls	r7, r4, #2
 801afc6:	7833      	ldrb	r3, [r6, #0]
 801afc8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801afcc:	2b50      	cmp	r3, #80	@ 0x50
 801afce:	d13e      	bne.n	801b04e <__gethex+0x126>
 801afd0:	7873      	ldrb	r3, [r6, #1]
 801afd2:	2b2b      	cmp	r3, #43	@ 0x2b
 801afd4:	d033      	beq.n	801b03e <__gethex+0x116>
 801afd6:	2b2d      	cmp	r3, #45	@ 0x2d
 801afd8:	d034      	beq.n	801b044 <__gethex+0x11c>
 801afda:	1c71      	adds	r1, r6, #1
 801afdc:	2400      	movs	r4, #0
 801afde:	7808      	ldrb	r0, [r1, #0]
 801afe0:	f7ff ff8c 	bl	801aefc <__hexdig_fun>
 801afe4:	1e43      	subs	r3, r0, #1
 801afe6:	b2db      	uxtb	r3, r3
 801afe8:	2b18      	cmp	r3, #24
 801afea:	d830      	bhi.n	801b04e <__gethex+0x126>
 801afec:	f1a0 0210 	sub.w	r2, r0, #16
 801aff0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aff4:	f7ff ff82 	bl	801aefc <__hexdig_fun>
 801aff8:	f100 3cff 	add.w	ip, r0, #4294967295
 801affc:	fa5f fc8c 	uxtb.w	ip, ip
 801b000:	f1bc 0f18 	cmp.w	ip, #24
 801b004:	f04f 030a 	mov.w	r3, #10
 801b008:	d91e      	bls.n	801b048 <__gethex+0x120>
 801b00a:	b104      	cbz	r4, 801b00e <__gethex+0xe6>
 801b00c:	4252      	negs	r2, r2
 801b00e:	4417      	add	r7, r2
 801b010:	f8ca 1000 	str.w	r1, [sl]
 801b014:	b1ed      	cbz	r5, 801b052 <__gethex+0x12a>
 801b016:	f1bb 0f00 	cmp.w	fp, #0
 801b01a:	bf0c      	ite	eq
 801b01c:	2506      	moveq	r5, #6
 801b01e:	2500      	movne	r5, #0
 801b020:	4628      	mov	r0, r5
 801b022:	b005      	add	sp, #20
 801b024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b028:	2500      	movs	r5, #0
 801b02a:	462c      	mov	r4, r5
 801b02c:	e7b0      	b.n	801af90 <__gethex+0x68>
 801b02e:	2c00      	cmp	r4, #0
 801b030:	d1c7      	bne.n	801afc2 <__gethex+0x9a>
 801b032:	4627      	mov	r7, r4
 801b034:	e7c7      	b.n	801afc6 <__gethex+0x9e>
 801b036:	464e      	mov	r6, r9
 801b038:	462f      	mov	r7, r5
 801b03a:	2501      	movs	r5, #1
 801b03c:	e7c3      	b.n	801afc6 <__gethex+0x9e>
 801b03e:	2400      	movs	r4, #0
 801b040:	1cb1      	adds	r1, r6, #2
 801b042:	e7cc      	b.n	801afde <__gethex+0xb6>
 801b044:	2401      	movs	r4, #1
 801b046:	e7fb      	b.n	801b040 <__gethex+0x118>
 801b048:	fb03 0002 	mla	r0, r3, r2, r0
 801b04c:	e7ce      	b.n	801afec <__gethex+0xc4>
 801b04e:	4631      	mov	r1, r6
 801b050:	e7de      	b.n	801b010 <__gethex+0xe8>
 801b052:	eba6 0309 	sub.w	r3, r6, r9
 801b056:	3b01      	subs	r3, #1
 801b058:	4629      	mov	r1, r5
 801b05a:	2b07      	cmp	r3, #7
 801b05c:	dc0a      	bgt.n	801b074 <__gethex+0x14c>
 801b05e:	9801      	ldr	r0, [sp, #4]
 801b060:	f000 fafc 	bl	801b65c <_Balloc>
 801b064:	4604      	mov	r4, r0
 801b066:	b940      	cbnz	r0, 801b07a <__gethex+0x152>
 801b068:	4b5c      	ldr	r3, [pc, #368]	@ (801b1dc <__gethex+0x2b4>)
 801b06a:	4602      	mov	r2, r0
 801b06c:	21e4      	movs	r1, #228	@ 0xe4
 801b06e:	485c      	ldr	r0, [pc, #368]	@ (801b1e0 <__gethex+0x2b8>)
 801b070:	f001 f9de 	bl	801c430 <__assert_func>
 801b074:	3101      	adds	r1, #1
 801b076:	105b      	asrs	r3, r3, #1
 801b078:	e7ef      	b.n	801b05a <__gethex+0x132>
 801b07a:	f100 0a14 	add.w	sl, r0, #20
 801b07e:	2300      	movs	r3, #0
 801b080:	4655      	mov	r5, sl
 801b082:	469b      	mov	fp, r3
 801b084:	45b1      	cmp	r9, r6
 801b086:	d337      	bcc.n	801b0f8 <__gethex+0x1d0>
 801b088:	f845 bb04 	str.w	fp, [r5], #4
 801b08c:	eba5 050a 	sub.w	r5, r5, sl
 801b090:	10ad      	asrs	r5, r5, #2
 801b092:	6125      	str	r5, [r4, #16]
 801b094:	4658      	mov	r0, fp
 801b096:	f000 fbd3 	bl	801b840 <__hi0bits>
 801b09a:	016d      	lsls	r5, r5, #5
 801b09c:	f8d8 6000 	ldr.w	r6, [r8]
 801b0a0:	1a2d      	subs	r5, r5, r0
 801b0a2:	42b5      	cmp	r5, r6
 801b0a4:	dd54      	ble.n	801b150 <__gethex+0x228>
 801b0a6:	1bad      	subs	r5, r5, r6
 801b0a8:	4629      	mov	r1, r5
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	f000 ff64 	bl	801bf78 <__any_on>
 801b0b0:	4681      	mov	r9, r0
 801b0b2:	b178      	cbz	r0, 801b0d4 <__gethex+0x1ac>
 801b0b4:	1e6b      	subs	r3, r5, #1
 801b0b6:	1159      	asrs	r1, r3, #5
 801b0b8:	f003 021f 	and.w	r2, r3, #31
 801b0bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b0c0:	f04f 0901 	mov.w	r9, #1
 801b0c4:	fa09 f202 	lsl.w	r2, r9, r2
 801b0c8:	420a      	tst	r2, r1
 801b0ca:	d003      	beq.n	801b0d4 <__gethex+0x1ac>
 801b0cc:	454b      	cmp	r3, r9
 801b0ce:	dc36      	bgt.n	801b13e <__gethex+0x216>
 801b0d0:	f04f 0902 	mov.w	r9, #2
 801b0d4:	4629      	mov	r1, r5
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	f7ff febe 	bl	801ae58 <rshift>
 801b0dc:	442f      	add	r7, r5
 801b0de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b0e2:	42bb      	cmp	r3, r7
 801b0e4:	da42      	bge.n	801b16c <__gethex+0x244>
 801b0e6:	9801      	ldr	r0, [sp, #4]
 801b0e8:	4621      	mov	r1, r4
 801b0ea:	f000 faf7 	bl	801b6dc <_Bfree>
 801b0ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	6013      	str	r3, [r2, #0]
 801b0f4:	25a3      	movs	r5, #163	@ 0xa3
 801b0f6:	e793      	b.n	801b020 <__gethex+0xf8>
 801b0f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b0fc:	2a2e      	cmp	r2, #46	@ 0x2e
 801b0fe:	d012      	beq.n	801b126 <__gethex+0x1fe>
 801b100:	2b20      	cmp	r3, #32
 801b102:	d104      	bne.n	801b10e <__gethex+0x1e6>
 801b104:	f845 bb04 	str.w	fp, [r5], #4
 801b108:	f04f 0b00 	mov.w	fp, #0
 801b10c:	465b      	mov	r3, fp
 801b10e:	7830      	ldrb	r0, [r6, #0]
 801b110:	9303      	str	r3, [sp, #12]
 801b112:	f7ff fef3 	bl	801aefc <__hexdig_fun>
 801b116:	9b03      	ldr	r3, [sp, #12]
 801b118:	f000 000f 	and.w	r0, r0, #15
 801b11c:	4098      	lsls	r0, r3
 801b11e:	ea4b 0b00 	orr.w	fp, fp, r0
 801b122:	3304      	adds	r3, #4
 801b124:	e7ae      	b.n	801b084 <__gethex+0x15c>
 801b126:	45b1      	cmp	r9, r6
 801b128:	d8ea      	bhi.n	801b100 <__gethex+0x1d8>
 801b12a:	492b      	ldr	r1, [pc, #172]	@ (801b1d8 <__gethex+0x2b0>)
 801b12c:	9303      	str	r3, [sp, #12]
 801b12e:	2201      	movs	r2, #1
 801b130:	4630      	mov	r0, r6
 801b132:	f7fe ffc7 	bl	801a0c4 <strncmp>
 801b136:	9b03      	ldr	r3, [sp, #12]
 801b138:	2800      	cmp	r0, #0
 801b13a:	d1e1      	bne.n	801b100 <__gethex+0x1d8>
 801b13c:	e7a2      	b.n	801b084 <__gethex+0x15c>
 801b13e:	1ea9      	subs	r1, r5, #2
 801b140:	4620      	mov	r0, r4
 801b142:	f000 ff19 	bl	801bf78 <__any_on>
 801b146:	2800      	cmp	r0, #0
 801b148:	d0c2      	beq.n	801b0d0 <__gethex+0x1a8>
 801b14a:	f04f 0903 	mov.w	r9, #3
 801b14e:	e7c1      	b.n	801b0d4 <__gethex+0x1ac>
 801b150:	da09      	bge.n	801b166 <__gethex+0x23e>
 801b152:	1b75      	subs	r5, r6, r5
 801b154:	4621      	mov	r1, r4
 801b156:	9801      	ldr	r0, [sp, #4]
 801b158:	462a      	mov	r2, r5
 801b15a:	f000 fcd7 	bl	801bb0c <__lshift>
 801b15e:	1b7f      	subs	r7, r7, r5
 801b160:	4604      	mov	r4, r0
 801b162:	f100 0a14 	add.w	sl, r0, #20
 801b166:	f04f 0900 	mov.w	r9, #0
 801b16a:	e7b8      	b.n	801b0de <__gethex+0x1b6>
 801b16c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b170:	42bd      	cmp	r5, r7
 801b172:	dd6f      	ble.n	801b254 <__gethex+0x32c>
 801b174:	1bed      	subs	r5, r5, r7
 801b176:	42ae      	cmp	r6, r5
 801b178:	dc34      	bgt.n	801b1e4 <__gethex+0x2bc>
 801b17a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b17e:	2b02      	cmp	r3, #2
 801b180:	d022      	beq.n	801b1c8 <__gethex+0x2a0>
 801b182:	2b03      	cmp	r3, #3
 801b184:	d024      	beq.n	801b1d0 <__gethex+0x2a8>
 801b186:	2b01      	cmp	r3, #1
 801b188:	d115      	bne.n	801b1b6 <__gethex+0x28e>
 801b18a:	42ae      	cmp	r6, r5
 801b18c:	d113      	bne.n	801b1b6 <__gethex+0x28e>
 801b18e:	2e01      	cmp	r6, #1
 801b190:	d10b      	bne.n	801b1aa <__gethex+0x282>
 801b192:	9a02      	ldr	r2, [sp, #8]
 801b194:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b198:	6013      	str	r3, [r2, #0]
 801b19a:	2301      	movs	r3, #1
 801b19c:	6123      	str	r3, [r4, #16]
 801b19e:	f8ca 3000 	str.w	r3, [sl]
 801b1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b1a4:	2562      	movs	r5, #98	@ 0x62
 801b1a6:	601c      	str	r4, [r3, #0]
 801b1a8:	e73a      	b.n	801b020 <__gethex+0xf8>
 801b1aa:	1e71      	subs	r1, r6, #1
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	f000 fee3 	bl	801bf78 <__any_on>
 801b1b2:	2800      	cmp	r0, #0
 801b1b4:	d1ed      	bne.n	801b192 <__gethex+0x26a>
 801b1b6:	9801      	ldr	r0, [sp, #4]
 801b1b8:	4621      	mov	r1, r4
 801b1ba:	f000 fa8f 	bl	801b6dc <_Bfree>
 801b1be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	6013      	str	r3, [r2, #0]
 801b1c4:	2550      	movs	r5, #80	@ 0x50
 801b1c6:	e72b      	b.n	801b020 <__gethex+0xf8>
 801b1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d1f3      	bne.n	801b1b6 <__gethex+0x28e>
 801b1ce:	e7e0      	b.n	801b192 <__gethex+0x26a>
 801b1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d1dd      	bne.n	801b192 <__gethex+0x26a>
 801b1d6:	e7ee      	b.n	801b1b6 <__gethex+0x28e>
 801b1d8:	0801e33c 	.word	0x0801e33c
 801b1dc:	0801e549 	.word	0x0801e549
 801b1e0:	0801e55a 	.word	0x0801e55a
 801b1e4:	1e6f      	subs	r7, r5, #1
 801b1e6:	f1b9 0f00 	cmp.w	r9, #0
 801b1ea:	d130      	bne.n	801b24e <__gethex+0x326>
 801b1ec:	b127      	cbz	r7, 801b1f8 <__gethex+0x2d0>
 801b1ee:	4639      	mov	r1, r7
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	f000 fec1 	bl	801bf78 <__any_on>
 801b1f6:	4681      	mov	r9, r0
 801b1f8:	117a      	asrs	r2, r7, #5
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b200:	f007 071f 	and.w	r7, r7, #31
 801b204:	40bb      	lsls	r3, r7
 801b206:	4213      	tst	r3, r2
 801b208:	4629      	mov	r1, r5
 801b20a:	4620      	mov	r0, r4
 801b20c:	bf18      	it	ne
 801b20e:	f049 0902 	orrne.w	r9, r9, #2
 801b212:	f7ff fe21 	bl	801ae58 <rshift>
 801b216:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b21a:	1b76      	subs	r6, r6, r5
 801b21c:	2502      	movs	r5, #2
 801b21e:	f1b9 0f00 	cmp.w	r9, #0
 801b222:	d047      	beq.n	801b2b4 <__gethex+0x38c>
 801b224:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b228:	2b02      	cmp	r3, #2
 801b22a:	d015      	beq.n	801b258 <__gethex+0x330>
 801b22c:	2b03      	cmp	r3, #3
 801b22e:	d017      	beq.n	801b260 <__gethex+0x338>
 801b230:	2b01      	cmp	r3, #1
 801b232:	d109      	bne.n	801b248 <__gethex+0x320>
 801b234:	f019 0f02 	tst.w	r9, #2
 801b238:	d006      	beq.n	801b248 <__gethex+0x320>
 801b23a:	f8da 3000 	ldr.w	r3, [sl]
 801b23e:	ea49 0903 	orr.w	r9, r9, r3
 801b242:	f019 0f01 	tst.w	r9, #1
 801b246:	d10e      	bne.n	801b266 <__gethex+0x33e>
 801b248:	f045 0510 	orr.w	r5, r5, #16
 801b24c:	e032      	b.n	801b2b4 <__gethex+0x38c>
 801b24e:	f04f 0901 	mov.w	r9, #1
 801b252:	e7d1      	b.n	801b1f8 <__gethex+0x2d0>
 801b254:	2501      	movs	r5, #1
 801b256:	e7e2      	b.n	801b21e <__gethex+0x2f6>
 801b258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b25a:	f1c3 0301 	rsb	r3, r3, #1
 801b25e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b262:	2b00      	cmp	r3, #0
 801b264:	d0f0      	beq.n	801b248 <__gethex+0x320>
 801b266:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b26a:	f104 0314 	add.w	r3, r4, #20
 801b26e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b272:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b276:	f04f 0c00 	mov.w	ip, #0
 801b27a:	4618      	mov	r0, r3
 801b27c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b280:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b284:	d01b      	beq.n	801b2be <__gethex+0x396>
 801b286:	3201      	adds	r2, #1
 801b288:	6002      	str	r2, [r0, #0]
 801b28a:	2d02      	cmp	r5, #2
 801b28c:	f104 0314 	add.w	r3, r4, #20
 801b290:	d13c      	bne.n	801b30c <__gethex+0x3e4>
 801b292:	f8d8 2000 	ldr.w	r2, [r8]
 801b296:	3a01      	subs	r2, #1
 801b298:	42b2      	cmp	r2, r6
 801b29a:	d109      	bne.n	801b2b0 <__gethex+0x388>
 801b29c:	1171      	asrs	r1, r6, #5
 801b29e:	2201      	movs	r2, #1
 801b2a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b2a4:	f006 061f 	and.w	r6, r6, #31
 801b2a8:	fa02 f606 	lsl.w	r6, r2, r6
 801b2ac:	421e      	tst	r6, r3
 801b2ae:	d13a      	bne.n	801b326 <__gethex+0x3fe>
 801b2b0:	f045 0520 	orr.w	r5, r5, #32
 801b2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2b6:	601c      	str	r4, [r3, #0]
 801b2b8:	9b02      	ldr	r3, [sp, #8]
 801b2ba:	601f      	str	r7, [r3, #0]
 801b2bc:	e6b0      	b.n	801b020 <__gethex+0xf8>
 801b2be:	4299      	cmp	r1, r3
 801b2c0:	f843 cc04 	str.w	ip, [r3, #-4]
 801b2c4:	d8d9      	bhi.n	801b27a <__gethex+0x352>
 801b2c6:	68a3      	ldr	r3, [r4, #8]
 801b2c8:	459b      	cmp	fp, r3
 801b2ca:	db17      	blt.n	801b2fc <__gethex+0x3d4>
 801b2cc:	6861      	ldr	r1, [r4, #4]
 801b2ce:	9801      	ldr	r0, [sp, #4]
 801b2d0:	3101      	adds	r1, #1
 801b2d2:	f000 f9c3 	bl	801b65c <_Balloc>
 801b2d6:	4681      	mov	r9, r0
 801b2d8:	b918      	cbnz	r0, 801b2e2 <__gethex+0x3ba>
 801b2da:	4b1a      	ldr	r3, [pc, #104]	@ (801b344 <__gethex+0x41c>)
 801b2dc:	4602      	mov	r2, r0
 801b2de:	2184      	movs	r1, #132	@ 0x84
 801b2e0:	e6c5      	b.n	801b06e <__gethex+0x146>
 801b2e2:	6922      	ldr	r2, [r4, #16]
 801b2e4:	3202      	adds	r2, #2
 801b2e6:	f104 010c 	add.w	r1, r4, #12
 801b2ea:	0092      	lsls	r2, r2, #2
 801b2ec:	300c      	adds	r0, #12
 801b2ee:	f7fe ff72 	bl	801a1d6 <memcpy>
 801b2f2:	4621      	mov	r1, r4
 801b2f4:	9801      	ldr	r0, [sp, #4]
 801b2f6:	f000 f9f1 	bl	801b6dc <_Bfree>
 801b2fa:	464c      	mov	r4, r9
 801b2fc:	6923      	ldr	r3, [r4, #16]
 801b2fe:	1c5a      	adds	r2, r3, #1
 801b300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b304:	6122      	str	r2, [r4, #16]
 801b306:	2201      	movs	r2, #1
 801b308:	615a      	str	r2, [r3, #20]
 801b30a:	e7be      	b.n	801b28a <__gethex+0x362>
 801b30c:	6922      	ldr	r2, [r4, #16]
 801b30e:	455a      	cmp	r2, fp
 801b310:	dd0b      	ble.n	801b32a <__gethex+0x402>
 801b312:	2101      	movs	r1, #1
 801b314:	4620      	mov	r0, r4
 801b316:	f7ff fd9f 	bl	801ae58 <rshift>
 801b31a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b31e:	3701      	adds	r7, #1
 801b320:	42bb      	cmp	r3, r7
 801b322:	f6ff aee0 	blt.w	801b0e6 <__gethex+0x1be>
 801b326:	2501      	movs	r5, #1
 801b328:	e7c2      	b.n	801b2b0 <__gethex+0x388>
 801b32a:	f016 061f 	ands.w	r6, r6, #31
 801b32e:	d0fa      	beq.n	801b326 <__gethex+0x3fe>
 801b330:	4453      	add	r3, sl
 801b332:	f1c6 0620 	rsb	r6, r6, #32
 801b336:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b33a:	f000 fa81 	bl	801b840 <__hi0bits>
 801b33e:	42b0      	cmp	r0, r6
 801b340:	dbe7      	blt.n	801b312 <__gethex+0x3ea>
 801b342:	e7f0      	b.n	801b326 <__gethex+0x3fe>
 801b344:	0801e549 	.word	0x0801e549

0801b348 <L_shift>:
 801b348:	f1c2 0208 	rsb	r2, r2, #8
 801b34c:	0092      	lsls	r2, r2, #2
 801b34e:	b570      	push	{r4, r5, r6, lr}
 801b350:	f1c2 0620 	rsb	r6, r2, #32
 801b354:	6843      	ldr	r3, [r0, #4]
 801b356:	6804      	ldr	r4, [r0, #0]
 801b358:	fa03 f506 	lsl.w	r5, r3, r6
 801b35c:	432c      	orrs	r4, r5
 801b35e:	40d3      	lsrs	r3, r2
 801b360:	6004      	str	r4, [r0, #0]
 801b362:	f840 3f04 	str.w	r3, [r0, #4]!
 801b366:	4288      	cmp	r0, r1
 801b368:	d3f4      	bcc.n	801b354 <L_shift+0xc>
 801b36a:	bd70      	pop	{r4, r5, r6, pc}

0801b36c <__match>:
 801b36c:	b530      	push	{r4, r5, lr}
 801b36e:	6803      	ldr	r3, [r0, #0]
 801b370:	3301      	adds	r3, #1
 801b372:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b376:	b914      	cbnz	r4, 801b37e <__match+0x12>
 801b378:	6003      	str	r3, [r0, #0]
 801b37a:	2001      	movs	r0, #1
 801b37c:	bd30      	pop	{r4, r5, pc}
 801b37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b382:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b386:	2d19      	cmp	r5, #25
 801b388:	bf98      	it	ls
 801b38a:	3220      	addls	r2, #32
 801b38c:	42a2      	cmp	r2, r4
 801b38e:	d0f0      	beq.n	801b372 <__match+0x6>
 801b390:	2000      	movs	r0, #0
 801b392:	e7f3      	b.n	801b37c <__match+0x10>

0801b394 <__hexnan>:
 801b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b398:	680b      	ldr	r3, [r1, #0]
 801b39a:	6801      	ldr	r1, [r0, #0]
 801b39c:	115e      	asrs	r6, r3, #5
 801b39e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b3a2:	f013 031f 	ands.w	r3, r3, #31
 801b3a6:	b087      	sub	sp, #28
 801b3a8:	bf18      	it	ne
 801b3aa:	3604      	addne	r6, #4
 801b3ac:	2500      	movs	r5, #0
 801b3ae:	1f37      	subs	r7, r6, #4
 801b3b0:	4682      	mov	sl, r0
 801b3b2:	4690      	mov	r8, r2
 801b3b4:	9301      	str	r3, [sp, #4]
 801b3b6:	f846 5c04 	str.w	r5, [r6, #-4]
 801b3ba:	46b9      	mov	r9, r7
 801b3bc:	463c      	mov	r4, r7
 801b3be:	9502      	str	r5, [sp, #8]
 801b3c0:	46ab      	mov	fp, r5
 801b3c2:	784a      	ldrb	r2, [r1, #1]
 801b3c4:	1c4b      	adds	r3, r1, #1
 801b3c6:	9303      	str	r3, [sp, #12]
 801b3c8:	b342      	cbz	r2, 801b41c <__hexnan+0x88>
 801b3ca:	4610      	mov	r0, r2
 801b3cc:	9105      	str	r1, [sp, #20]
 801b3ce:	9204      	str	r2, [sp, #16]
 801b3d0:	f7ff fd94 	bl	801aefc <__hexdig_fun>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d151      	bne.n	801b47c <__hexnan+0xe8>
 801b3d8:	9a04      	ldr	r2, [sp, #16]
 801b3da:	9905      	ldr	r1, [sp, #20]
 801b3dc:	2a20      	cmp	r2, #32
 801b3de:	d818      	bhi.n	801b412 <__hexnan+0x7e>
 801b3e0:	9b02      	ldr	r3, [sp, #8]
 801b3e2:	459b      	cmp	fp, r3
 801b3e4:	dd13      	ble.n	801b40e <__hexnan+0x7a>
 801b3e6:	454c      	cmp	r4, r9
 801b3e8:	d206      	bcs.n	801b3f8 <__hexnan+0x64>
 801b3ea:	2d07      	cmp	r5, #7
 801b3ec:	dc04      	bgt.n	801b3f8 <__hexnan+0x64>
 801b3ee:	462a      	mov	r2, r5
 801b3f0:	4649      	mov	r1, r9
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	f7ff ffa8 	bl	801b348 <L_shift>
 801b3f8:	4544      	cmp	r4, r8
 801b3fa:	d952      	bls.n	801b4a2 <__hexnan+0x10e>
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	f1a4 0904 	sub.w	r9, r4, #4
 801b402:	f844 3c04 	str.w	r3, [r4, #-4]
 801b406:	f8cd b008 	str.w	fp, [sp, #8]
 801b40a:	464c      	mov	r4, r9
 801b40c:	461d      	mov	r5, r3
 801b40e:	9903      	ldr	r1, [sp, #12]
 801b410:	e7d7      	b.n	801b3c2 <__hexnan+0x2e>
 801b412:	2a29      	cmp	r2, #41	@ 0x29
 801b414:	d157      	bne.n	801b4c6 <__hexnan+0x132>
 801b416:	3102      	adds	r1, #2
 801b418:	f8ca 1000 	str.w	r1, [sl]
 801b41c:	f1bb 0f00 	cmp.w	fp, #0
 801b420:	d051      	beq.n	801b4c6 <__hexnan+0x132>
 801b422:	454c      	cmp	r4, r9
 801b424:	d206      	bcs.n	801b434 <__hexnan+0xa0>
 801b426:	2d07      	cmp	r5, #7
 801b428:	dc04      	bgt.n	801b434 <__hexnan+0xa0>
 801b42a:	462a      	mov	r2, r5
 801b42c:	4649      	mov	r1, r9
 801b42e:	4620      	mov	r0, r4
 801b430:	f7ff ff8a 	bl	801b348 <L_shift>
 801b434:	4544      	cmp	r4, r8
 801b436:	d936      	bls.n	801b4a6 <__hexnan+0x112>
 801b438:	f1a8 0204 	sub.w	r2, r8, #4
 801b43c:	4623      	mov	r3, r4
 801b43e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b442:	f842 1f04 	str.w	r1, [r2, #4]!
 801b446:	429f      	cmp	r7, r3
 801b448:	d2f9      	bcs.n	801b43e <__hexnan+0xaa>
 801b44a:	1b3b      	subs	r3, r7, r4
 801b44c:	f023 0303 	bic.w	r3, r3, #3
 801b450:	3304      	adds	r3, #4
 801b452:	3401      	adds	r4, #1
 801b454:	3e03      	subs	r6, #3
 801b456:	42b4      	cmp	r4, r6
 801b458:	bf88      	it	hi
 801b45a:	2304      	movhi	r3, #4
 801b45c:	4443      	add	r3, r8
 801b45e:	2200      	movs	r2, #0
 801b460:	f843 2b04 	str.w	r2, [r3], #4
 801b464:	429f      	cmp	r7, r3
 801b466:	d2fb      	bcs.n	801b460 <__hexnan+0xcc>
 801b468:	683b      	ldr	r3, [r7, #0]
 801b46a:	b91b      	cbnz	r3, 801b474 <__hexnan+0xe0>
 801b46c:	4547      	cmp	r7, r8
 801b46e:	d128      	bne.n	801b4c2 <__hexnan+0x12e>
 801b470:	2301      	movs	r3, #1
 801b472:	603b      	str	r3, [r7, #0]
 801b474:	2005      	movs	r0, #5
 801b476:	b007      	add	sp, #28
 801b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b47c:	3501      	adds	r5, #1
 801b47e:	2d08      	cmp	r5, #8
 801b480:	f10b 0b01 	add.w	fp, fp, #1
 801b484:	dd06      	ble.n	801b494 <__hexnan+0x100>
 801b486:	4544      	cmp	r4, r8
 801b488:	d9c1      	bls.n	801b40e <__hexnan+0x7a>
 801b48a:	2300      	movs	r3, #0
 801b48c:	f844 3c04 	str.w	r3, [r4, #-4]
 801b490:	2501      	movs	r5, #1
 801b492:	3c04      	subs	r4, #4
 801b494:	6822      	ldr	r2, [r4, #0]
 801b496:	f000 000f 	and.w	r0, r0, #15
 801b49a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b49e:	6020      	str	r0, [r4, #0]
 801b4a0:	e7b5      	b.n	801b40e <__hexnan+0x7a>
 801b4a2:	2508      	movs	r5, #8
 801b4a4:	e7b3      	b.n	801b40e <__hexnan+0x7a>
 801b4a6:	9b01      	ldr	r3, [sp, #4]
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d0dd      	beq.n	801b468 <__hexnan+0xd4>
 801b4ac:	f1c3 0320 	rsb	r3, r3, #32
 801b4b0:	f04f 32ff 	mov.w	r2, #4294967295
 801b4b4:	40da      	lsrs	r2, r3
 801b4b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b4ba:	4013      	ands	r3, r2
 801b4bc:	f846 3c04 	str.w	r3, [r6, #-4]
 801b4c0:	e7d2      	b.n	801b468 <__hexnan+0xd4>
 801b4c2:	3f04      	subs	r7, #4
 801b4c4:	e7d0      	b.n	801b468 <__hexnan+0xd4>
 801b4c6:	2004      	movs	r0, #4
 801b4c8:	e7d5      	b.n	801b476 <__hexnan+0xe2>
	...

0801b4cc <malloc>:
 801b4cc:	4b02      	ldr	r3, [pc, #8]	@ (801b4d8 <malloc+0xc>)
 801b4ce:	4601      	mov	r1, r0
 801b4d0:	6818      	ldr	r0, [r3, #0]
 801b4d2:	f000 b825 	b.w	801b520 <_malloc_r>
 801b4d6:	bf00      	nop
 801b4d8:	240002ac 	.word	0x240002ac

0801b4dc <sbrk_aligned>:
 801b4dc:	b570      	push	{r4, r5, r6, lr}
 801b4de:	4e0f      	ldr	r6, [pc, #60]	@ (801b51c <sbrk_aligned+0x40>)
 801b4e0:	460c      	mov	r4, r1
 801b4e2:	6831      	ldr	r1, [r6, #0]
 801b4e4:	4605      	mov	r5, r0
 801b4e6:	b911      	cbnz	r1, 801b4ee <sbrk_aligned+0x12>
 801b4e8:	f000 ff92 	bl	801c410 <_sbrk_r>
 801b4ec:	6030      	str	r0, [r6, #0]
 801b4ee:	4621      	mov	r1, r4
 801b4f0:	4628      	mov	r0, r5
 801b4f2:	f000 ff8d 	bl	801c410 <_sbrk_r>
 801b4f6:	1c43      	adds	r3, r0, #1
 801b4f8:	d103      	bne.n	801b502 <sbrk_aligned+0x26>
 801b4fa:	f04f 34ff 	mov.w	r4, #4294967295
 801b4fe:	4620      	mov	r0, r4
 801b500:	bd70      	pop	{r4, r5, r6, pc}
 801b502:	1cc4      	adds	r4, r0, #3
 801b504:	f024 0403 	bic.w	r4, r4, #3
 801b508:	42a0      	cmp	r0, r4
 801b50a:	d0f8      	beq.n	801b4fe <sbrk_aligned+0x22>
 801b50c:	1a21      	subs	r1, r4, r0
 801b50e:	4628      	mov	r0, r5
 801b510:	f000 ff7e 	bl	801c410 <_sbrk_r>
 801b514:	3001      	adds	r0, #1
 801b516:	d1f2      	bne.n	801b4fe <sbrk_aligned+0x22>
 801b518:	e7ef      	b.n	801b4fa <sbrk_aligned+0x1e>
 801b51a:	bf00      	nop
 801b51c:	2401ce3c 	.word	0x2401ce3c

0801b520 <_malloc_r>:
 801b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b524:	1ccd      	adds	r5, r1, #3
 801b526:	f025 0503 	bic.w	r5, r5, #3
 801b52a:	3508      	adds	r5, #8
 801b52c:	2d0c      	cmp	r5, #12
 801b52e:	bf38      	it	cc
 801b530:	250c      	movcc	r5, #12
 801b532:	2d00      	cmp	r5, #0
 801b534:	4606      	mov	r6, r0
 801b536:	db01      	blt.n	801b53c <_malloc_r+0x1c>
 801b538:	42a9      	cmp	r1, r5
 801b53a:	d904      	bls.n	801b546 <_malloc_r+0x26>
 801b53c:	230c      	movs	r3, #12
 801b53e:	6033      	str	r3, [r6, #0]
 801b540:	2000      	movs	r0, #0
 801b542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b61c <_malloc_r+0xfc>
 801b54a:	f000 f87b 	bl	801b644 <__malloc_lock>
 801b54e:	f8d8 3000 	ldr.w	r3, [r8]
 801b552:	461c      	mov	r4, r3
 801b554:	bb44      	cbnz	r4, 801b5a8 <_malloc_r+0x88>
 801b556:	4629      	mov	r1, r5
 801b558:	4630      	mov	r0, r6
 801b55a:	f7ff ffbf 	bl	801b4dc <sbrk_aligned>
 801b55e:	1c43      	adds	r3, r0, #1
 801b560:	4604      	mov	r4, r0
 801b562:	d158      	bne.n	801b616 <_malloc_r+0xf6>
 801b564:	f8d8 4000 	ldr.w	r4, [r8]
 801b568:	4627      	mov	r7, r4
 801b56a:	2f00      	cmp	r7, #0
 801b56c:	d143      	bne.n	801b5f6 <_malloc_r+0xd6>
 801b56e:	2c00      	cmp	r4, #0
 801b570:	d04b      	beq.n	801b60a <_malloc_r+0xea>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	4639      	mov	r1, r7
 801b576:	4630      	mov	r0, r6
 801b578:	eb04 0903 	add.w	r9, r4, r3
 801b57c:	f000 ff48 	bl	801c410 <_sbrk_r>
 801b580:	4581      	cmp	r9, r0
 801b582:	d142      	bne.n	801b60a <_malloc_r+0xea>
 801b584:	6821      	ldr	r1, [r4, #0]
 801b586:	1a6d      	subs	r5, r5, r1
 801b588:	4629      	mov	r1, r5
 801b58a:	4630      	mov	r0, r6
 801b58c:	f7ff ffa6 	bl	801b4dc <sbrk_aligned>
 801b590:	3001      	adds	r0, #1
 801b592:	d03a      	beq.n	801b60a <_malloc_r+0xea>
 801b594:	6823      	ldr	r3, [r4, #0]
 801b596:	442b      	add	r3, r5
 801b598:	6023      	str	r3, [r4, #0]
 801b59a:	f8d8 3000 	ldr.w	r3, [r8]
 801b59e:	685a      	ldr	r2, [r3, #4]
 801b5a0:	bb62      	cbnz	r2, 801b5fc <_malloc_r+0xdc>
 801b5a2:	f8c8 7000 	str.w	r7, [r8]
 801b5a6:	e00f      	b.n	801b5c8 <_malloc_r+0xa8>
 801b5a8:	6822      	ldr	r2, [r4, #0]
 801b5aa:	1b52      	subs	r2, r2, r5
 801b5ac:	d420      	bmi.n	801b5f0 <_malloc_r+0xd0>
 801b5ae:	2a0b      	cmp	r2, #11
 801b5b0:	d917      	bls.n	801b5e2 <_malloc_r+0xc2>
 801b5b2:	1961      	adds	r1, r4, r5
 801b5b4:	42a3      	cmp	r3, r4
 801b5b6:	6025      	str	r5, [r4, #0]
 801b5b8:	bf18      	it	ne
 801b5ba:	6059      	strne	r1, [r3, #4]
 801b5bc:	6863      	ldr	r3, [r4, #4]
 801b5be:	bf08      	it	eq
 801b5c0:	f8c8 1000 	streq.w	r1, [r8]
 801b5c4:	5162      	str	r2, [r4, r5]
 801b5c6:	604b      	str	r3, [r1, #4]
 801b5c8:	4630      	mov	r0, r6
 801b5ca:	f000 f841 	bl	801b650 <__malloc_unlock>
 801b5ce:	f104 000b 	add.w	r0, r4, #11
 801b5d2:	1d23      	adds	r3, r4, #4
 801b5d4:	f020 0007 	bic.w	r0, r0, #7
 801b5d8:	1ac2      	subs	r2, r0, r3
 801b5da:	bf1c      	itt	ne
 801b5dc:	1a1b      	subne	r3, r3, r0
 801b5de:	50a3      	strne	r3, [r4, r2]
 801b5e0:	e7af      	b.n	801b542 <_malloc_r+0x22>
 801b5e2:	6862      	ldr	r2, [r4, #4]
 801b5e4:	42a3      	cmp	r3, r4
 801b5e6:	bf0c      	ite	eq
 801b5e8:	f8c8 2000 	streq.w	r2, [r8]
 801b5ec:	605a      	strne	r2, [r3, #4]
 801b5ee:	e7eb      	b.n	801b5c8 <_malloc_r+0xa8>
 801b5f0:	4623      	mov	r3, r4
 801b5f2:	6864      	ldr	r4, [r4, #4]
 801b5f4:	e7ae      	b.n	801b554 <_malloc_r+0x34>
 801b5f6:	463c      	mov	r4, r7
 801b5f8:	687f      	ldr	r7, [r7, #4]
 801b5fa:	e7b6      	b.n	801b56a <_malloc_r+0x4a>
 801b5fc:	461a      	mov	r2, r3
 801b5fe:	685b      	ldr	r3, [r3, #4]
 801b600:	42a3      	cmp	r3, r4
 801b602:	d1fb      	bne.n	801b5fc <_malloc_r+0xdc>
 801b604:	2300      	movs	r3, #0
 801b606:	6053      	str	r3, [r2, #4]
 801b608:	e7de      	b.n	801b5c8 <_malloc_r+0xa8>
 801b60a:	230c      	movs	r3, #12
 801b60c:	6033      	str	r3, [r6, #0]
 801b60e:	4630      	mov	r0, r6
 801b610:	f000 f81e 	bl	801b650 <__malloc_unlock>
 801b614:	e794      	b.n	801b540 <_malloc_r+0x20>
 801b616:	6005      	str	r5, [r0, #0]
 801b618:	e7d6      	b.n	801b5c8 <_malloc_r+0xa8>
 801b61a:	bf00      	nop
 801b61c:	2401ce40 	.word	0x2401ce40

0801b620 <__ascii_mbtowc>:
 801b620:	b082      	sub	sp, #8
 801b622:	b901      	cbnz	r1, 801b626 <__ascii_mbtowc+0x6>
 801b624:	a901      	add	r1, sp, #4
 801b626:	b142      	cbz	r2, 801b63a <__ascii_mbtowc+0x1a>
 801b628:	b14b      	cbz	r3, 801b63e <__ascii_mbtowc+0x1e>
 801b62a:	7813      	ldrb	r3, [r2, #0]
 801b62c:	600b      	str	r3, [r1, #0]
 801b62e:	7812      	ldrb	r2, [r2, #0]
 801b630:	1e10      	subs	r0, r2, #0
 801b632:	bf18      	it	ne
 801b634:	2001      	movne	r0, #1
 801b636:	b002      	add	sp, #8
 801b638:	4770      	bx	lr
 801b63a:	4610      	mov	r0, r2
 801b63c:	e7fb      	b.n	801b636 <__ascii_mbtowc+0x16>
 801b63e:	f06f 0001 	mvn.w	r0, #1
 801b642:	e7f8      	b.n	801b636 <__ascii_mbtowc+0x16>

0801b644 <__malloc_lock>:
 801b644:	4801      	ldr	r0, [pc, #4]	@ (801b64c <__malloc_lock+0x8>)
 801b646:	f7fe bdc4 	b.w	801a1d2 <__retarget_lock_acquire_recursive>
 801b64a:	bf00      	nop
 801b64c:	2401ce38 	.word	0x2401ce38

0801b650 <__malloc_unlock>:
 801b650:	4801      	ldr	r0, [pc, #4]	@ (801b658 <__malloc_unlock+0x8>)
 801b652:	f7fe bdbf 	b.w	801a1d4 <__retarget_lock_release_recursive>
 801b656:	bf00      	nop
 801b658:	2401ce38 	.word	0x2401ce38

0801b65c <_Balloc>:
 801b65c:	b570      	push	{r4, r5, r6, lr}
 801b65e:	69c6      	ldr	r6, [r0, #28]
 801b660:	4604      	mov	r4, r0
 801b662:	460d      	mov	r5, r1
 801b664:	b976      	cbnz	r6, 801b684 <_Balloc+0x28>
 801b666:	2010      	movs	r0, #16
 801b668:	f7ff ff30 	bl	801b4cc <malloc>
 801b66c:	4602      	mov	r2, r0
 801b66e:	61e0      	str	r0, [r4, #28]
 801b670:	b920      	cbnz	r0, 801b67c <_Balloc+0x20>
 801b672:	4b18      	ldr	r3, [pc, #96]	@ (801b6d4 <_Balloc+0x78>)
 801b674:	4818      	ldr	r0, [pc, #96]	@ (801b6d8 <_Balloc+0x7c>)
 801b676:	216b      	movs	r1, #107	@ 0x6b
 801b678:	f000 feda 	bl	801c430 <__assert_func>
 801b67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b680:	6006      	str	r6, [r0, #0]
 801b682:	60c6      	str	r6, [r0, #12]
 801b684:	69e6      	ldr	r6, [r4, #28]
 801b686:	68f3      	ldr	r3, [r6, #12]
 801b688:	b183      	cbz	r3, 801b6ac <_Balloc+0x50>
 801b68a:	69e3      	ldr	r3, [r4, #28]
 801b68c:	68db      	ldr	r3, [r3, #12]
 801b68e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b692:	b9b8      	cbnz	r0, 801b6c4 <_Balloc+0x68>
 801b694:	2101      	movs	r1, #1
 801b696:	fa01 f605 	lsl.w	r6, r1, r5
 801b69a:	1d72      	adds	r2, r6, #5
 801b69c:	0092      	lsls	r2, r2, #2
 801b69e:	4620      	mov	r0, r4
 801b6a0:	f000 fee4 	bl	801c46c <_calloc_r>
 801b6a4:	b160      	cbz	r0, 801b6c0 <_Balloc+0x64>
 801b6a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b6aa:	e00e      	b.n	801b6ca <_Balloc+0x6e>
 801b6ac:	2221      	movs	r2, #33	@ 0x21
 801b6ae:	2104      	movs	r1, #4
 801b6b0:	4620      	mov	r0, r4
 801b6b2:	f000 fedb 	bl	801c46c <_calloc_r>
 801b6b6:	69e3      	ldr	r3, [r4, #28]
 801b6b8:	60f0      	str	r0, [r6, #12]
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d1e4      	bne.n	801b68a <_Balloc+0x2e>
 801b6c0:	2000      	movs	r0, #0
 801b6c2:	bd70      	pop	{r4, r5, r6, pc}
 801b6c4:	6802      	ldr	r2, [r0, #0]
 801b6c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b6d0:	e7f7      	b.n	801b6c2 <_Balloc+0x66>
 801b6d2:	bf00      	nop
 801b6d4:	0801e4da 	.word	0x0801e4da
 801b6d8:	0801e5ba 	.word	0x0801e5ba

0801b6dc <_Bfree>:
 801b6dc:	b570      	push	{r4, r5, r6, lr}
 801b6de:	69c6      	ldr	r6, [r0, #28]
 801b6e0:	4605      	mov	r5, r0
 801b6e2:	460c      	mov	r4, r1
 801b6e4:	b976      	cbnz	r6, 801b704 <_Bfree+0x28>
 801b6e6:	2010      	movs	r0, #16
 801b6e8:	f7ff fef0 	bl	801b4cc <malloc>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	61e8      	str	r0, [r5, #28]
 801b6f0:	b920      	cbnz	r0, 801b6fc <_Bfree+0x20>
 801b6f2:	4b09      	ldr	r3, [pc, #36]	@ (801b718 <_Bfree+0x3c>)
 801b6f4:	4809      	ldr	r0, [pc, #36]	@ (801b71c <_Bfree+0x40>)
 801b6f6:	218f      	movs	r1, #143	@ 0x8f
 801b6f8:	f000 fe9a 	bl	801c430 <__assert_func>
 801b6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b700:	6006      	str	r6, [r0, #0]
 801b702:	60c6      	str	r6, [r0, #12]
 801b704:	b13c      	cbz	r4, 801b716 <_Bfree+0x3a>
 801b706:	69eb      	ldr	r3, [r5, #28]
 801b708:	6862      	ldr	r2, [r4, #4]
 801b70a:	68db      	ldr	r3, [r3, #12]
 801b70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b710:	6021      	str	r1, [r4, #0]
 801b712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b716:	bd70      	pop	{r4, r5, r6, pc}
 801b718:	0801e4da 	.word	0x0801e4da
 801b71c:	0801e5ba 	.word	0x0801e5ba

0801b720 <__multadd>:
 801b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b724:	690d      	ldr	r5, [r1, #16]
 801b726:	4607      	mov	r7, r0
 801b728:	460c      	mov	r4, r1
 801b72a:	461e      	mov	r6, r3
 801b72c:	f101 0c14 	add.w	ip, r1, #20
 801b730:	2000      	movs	r0, #0
 801b732:	f8dc 3000 	ldr.w	r3, [ip]
 801b736:	b299      	uxth	r1, r3
 801b738:	fb02 6101 	mla	r1, r2, r1, r6
 801b73c:	0c1e      	lsrs	r6, r3, #16
 801b73e:	0c0b      	lsrs	r3, r1, #16
 801b740:	fb02 3306 	mla	r3, r2, r6, r3
 801b744:	b289      	uxth	r1, r1
 801b746:	3001      	adds	r0, #1
 801b748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b74c:	4285      	cmp	r5, r0
 801b74e:	f84c 1b04 	str.w	r1, [ip], #4
 801b752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b756:	dcec      	bgt.n	801b732 <__multadd+0x12>
 801b758:	b30e      	cbz	r6, 801b79e <__multadd+0x7e>
 801b75a:	68a3      	ldr	r3, [r4, #8]
 801b75c:	42ab      	cmp	r3, r5
 801b75e:	dc19      	bgt.n	801b794 <__multadd+0x74>
 801b760:	6861      	ldr	r1, [r4, #4]
 801b762:	4638      	mov	r0, r7
 801b764:	3101      	adds	r1, #1
 801b766:	f7ff ff79 	bl	801b65c <_Balloc>
 801b76a:	4680      	mov	r8, r0
 801b76c:	b928      	cbnz	r0, 801b77a <__multadd+0x5a>
 801b76e:	4602      	mov	r2, r0
 801b770:	4b0c      	ldr	r3, [pc, #48]	@ (801b7a4 <__multadd+0x84>)
 801b772:	480d      	ldr	r0, [pc, #52]	@ (801b7a8 <__multadd+0x88>)
 801b774:	21ba      	movs	r1, #186	@ 0xba
 801b776:	f000 fe5b 	bl	801c430 <__assert_func>
 801b77a:	6922      	ldr	r2, [r4, #16]
 801b77c:	3202      	adds	r2, #2
 801b77e:	f104 010c 	add.w	r1, r4, #12
 801b782:	0092      	lsls	r2, r2, #2
 801b784:	300c      	adds	r0, #12
 801b786:	f7fe fd26 	bl	801a1d6 <memcpy>
 801b78a:	4621      	mov	r1, r4
 801b78c:	4638      	mov	r0, r7
 801b78e:	f7ff ffa5 	bl	801b6dc <_Bfree>
 801b792:	4644      	mov	r4, r8
 801b794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b798:	3501      	adds	r5, #1
 801b79a:	615e      	str	r6, [r3, #20]
 801b79c:	6125      	str	r5, [r4, #16]
 801b79e:	4620      	mov	r0, r4
 801b7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7a4:	0801e549 	.word	0x0801e549
 801b7a8:	0801e5ba 	.word	0x0801e5ba

0801b7ac <__s2b>:
 801b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7b0:	460c      	mov	r4, r1
 801b7b2:	4615      	mov	r5, r2
 801b7b4:	461f      	mov	r7, r3
 801b7b6:	2209      	movs	r2, #9
 801b7b8:	3308      	adds	r3, #8
 801b7ba:	4606      	mov	r6, r0
 801b7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 801b7c0:	2100      	movs	r1, #0
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	429a      	cmp	r2, r3
 801b7c6:	db09      	blt.n	801b7dc <__s2b+0x30>
 801b7c8:	4630      	mov	r0, r6
 801b7ca:	f7ff ff47 	bl	801b65c <_Balloc>
 801b7ce:	b940      	cbnz	r0, 801b7e2 <__s2b+0x36>
 801b7d0:	4602      	mov	r2, r0
 801b7d2:	4b19      	ldr	r3, [pc, #100]	@ (801b838 <__s2b+0x8c>)
 801b7d4:	4819      	ldr	r0, [pc, #100]	@ (801b83c <__s2b+0x90>)
 801b7d6:	21d3      	movs	r1, #211	@ 0xd3
 801b7d8:	f000 fe2a 	bl	801c430 <__assert_func>
 801b7dc:	0052      	lsls	r2, r2, #1
 801b7de:	3101      	adds	r1, #1
 801b7e0:	e7f0      	b.n	801b7c4 <__s2b+0x18>
 801b7e2:	9b08      	ldr	r3, [sp, #32]
 801b7e4:	6143      	str	r3, [r0, #20]
 801b7e6:	2d09      	cmp	r5, #9
 801b7e8:	f04f 0301 	mov.w	r3, #1
 801b7ec:	6103      	str	r3, [r0, #16]
 801b7ee:	dd16      	ble.n	801b81e <__s2b+0x72>
 801b7f0:	f104 0909 	add.w	r9, r4, #9
 801b7f4:	46c8      	mov	r8, r9
 801b7f6:	442c      	add	r4, r5
 801b7f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b7fc:	4601      	mov	r1, r0
 801b7fe:	3b30      	subs	r3, #48	@ 0x30
 801b800:	220a      	movs	r2, #10
 801b802:	4630      	mov	r0, r6
 801b804:	f7ff ff8c 	bl	801b720 <__multadd>
 801b808:	45a0      	cmp	r8, r4
 801b80a:	d1f5      	bne.n	801b7f8 <__s2b+0x4c>
 801b80c:	f1a5 0408 	sub.w	r4, r5, #8
 801b810:	444c      	add	r4, r9
 801b812:	1b2d      	subs	r5, r5, r4
 801b814:	1963      	adds	r3, r4, r5
 801b816:	42bb      	cmp	r3, r7
 801b818:	db04      	blt.n	801b824 <__s2b+0x78>
 801b81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b81e:	340a      	adds	r4, #10
 801b820:	2509      	movs	r5, #9
 801b822:	e7f6      	b.n	801b812 <__s2b+0x66>
 801b824:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b828:	4601      	mov	r1, r0
 801b82a:	3b30      	subs	r3, #48	@ 0x30
 801b82c:	220a      	movs	r2, #10
 801b82e:	4630      	mov	r0, r6
 801b830:	f7ff ff76 	bl	801b720 <__multadd>
 801b834:	e7ee      	b.n	801b814 <__s2b+0x68>
 801b836:	bf00      	nop
 801b838:	0801e549 	.word	0x0801e549
 801b83c:	0801e5ba 	.word	0x0801e5ba

0801b840 <__hi0bits>:
 801b840:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b844:	4603      	mov	r3, r0
 801b846:	bf36      	itet	cc
 801b848:	0403      	lslcc	r3, r0, #16
 801b84a:	2000      	movcs	r0, #0
 801b84c:	2010      	movcc	r0, #16
 801b84e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b852:	bf3c      	itt	cc
 801b854:	021b      	lslcc	r3, r3, #8
 801b856:	3008      	addcc	r0, #8
 801b858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b85c:	bf3c      	itt	cc
 801b85e:	011b      	lslcc	r3, r3, #4
 801b860:	3004      	addcc	r0, #4
 801b862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b866:	bf3c      	itt	cc
 801b868:	009b      	lslcc	r3, r3, #2
 801b86a:	3002      	addcc	r0, #2
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	db05      	blt.n	801b87c <__hi0bits+0x3c>
 801b870:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b874:	f100 0001 	add.w	r0, r0, #1
 801b878:	bf08      	it	eq
 801b87a:	2020      	moveq	r0, #32
 801b87c:	4770      	bx	lr

0801b87e <__lo0bits>:
 801b87e:	6803      	ldr	r3, [r0, #0]
 801b880:	4602      	mov	r2, r0
 801b882:	f013 0007 	ands.w	r0, r3, #7
 801b886:	d00b      	beq.n	801b8a0 <__lo0bits+0x22>
 801b888:	07d9      	lsls	r1, r3, #31
 801b88a:	d421      	bmi.n	801b8d0 <__lo0bits+0x52>
 801b88c:	0798      	lsls	r0, r3, #30
 801b88e:	bf49      	itett	mi
 801b890:	085b      	lsrmi	r3, r3, #1
 801b892:	089b      	lsrpl	r3, r3, #2
 801b894:	2001      	movmi	r0, #1
 801b896:	6013      	strmi	r3, [r2, #0]
 801b898:	bf5c      	itt	pl
 801b89a:	6013      	strpl	r3, [r2, #0]
 801b89c:	2002      	movpl	r0, #2
 801b89e:	4770      	bx	lr
 801b8a0:	b299      	uxth	r1, r3
 801b8a2:	b909      	cbnz	r1, 801b8a8 <__lo0bits+0x2a>
 801b8a4:	0c1b      	lsrs	r3, r3, #16
 801b8a6:	2010      	movs	r0, #16
 801b8a8:	b2d9      	uxtb	r1, r3
 801b8aa:	b909      	cbnz	r1, 801b8b0 <__lo0bits+0x32>
 801b8ac:	3008      	adds	r0, #8
 801b8ae:	0a1b      	lsrs	r3, r3, #8
 801b8b0:	0719      	lsls	r1, r3, #28
 801b8b2:	bf04      	itt	eq
 801b8b4:	091b      	lsreq	r3, r3, #4
 801b8b6:	3004      	addeq	r0, #4
 801b8b8:	0799      	lsls	r1, r3, #30
 801b8ba:	bf04      	itt	eq
 801b8bc:	089b      	lsreq	r3, r3, #2
 801b8be:	3002      	addeq	r0, #2
 801b8c0:	07d9      	lsls	r1, r3, #31
 801b8c2:	d403      	bmi.n	801b8cc <__lo0bits+0x4e>
 801b8c4:	085b      	lsrs	r3, r3, #1
 801b8c6:	f100 0001 	add.w	r0, r0, #1
 801b8ca:	d003      	beq.n	801b8d4 <__lo0bits+0x56>
 801b8cc:	6013      	str	r3, [r2, #0]
 801b8ce:	4770      	bx	lr
 801b8d0:	2000      	movs	r0, #0
 801b8d2:	4770      	bx	lr
 801b8d4:	2020      	movs	r0, #32
 801b8d6:	4770      	bx	lr

0801b8d8 <__i2b>:
 801b8d8:	b510      	push	{r4, lr}
 801b8da:	460c      	mov	r4, r1
 801b8dc:	2101      	movs	r1, #1
 801b8de:	f7ff febd 	bl	801b65c <_Balloc>
 801b8e2:	4602      	mov	r2, r0
 801b8e4:	b928      	cbnz	r0, 801b8f2 <__i2b+0x1a>
 801b8e6:	4b05      	ldr	r3, [pc, #20]	@ (801b8fc <__i2b+0x24>)
 801b8e8:	4805      	ldr	r0, [pc, #20]	@ (801b900 <__i2b+0x28>)
 801b8ea:	f240 1145 	movw	r1, #325	@ 0x145
 801b8ee:	f000 fd9f 	bl	801c430 <__assert_func>
 801b8f2:	2301      	movs	r3, #1
 801b8f4:	6144      	str	r4, [r0, #20]
 801b8f6:	6103      	str	r3, [r0, #16]
 801b8f8:	bd10      	pop	{r4, pc}
 801b8fa:	bf00      	nop
 801b8fc:	0801e549 	.word	0x0801e549
 801b900:	0801e5ba 	.word	0x0801e5ba

0801b904 <__multiply>:
 801b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b908:	4614      	mov	r4, r2
 801b90a:	690a      	ldr	r2, [r1, #16]
 801b90c:	6923      	ldr	r3, [r4, #16]
 801b90e:	429a      	cmp	r2, r3
 801b910:	bfa8      	it	ge
 801b912:	4623      	movge	r3, r4
 801b914:	460f      	mov	r7, r1
 801b916:	bfa4      	itt	ge
 801b918:	460c      	movge	r4, r1
 801b91a:	461f      	movge	r7, r3
 801b91c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b920:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b924:	68a3      	ldr	r3, [r4, #8]
 801b926:	6861      	ldr	r1, [r4, #4]
 801b928:	eb0a 0609 	add.w	r6, sl, r9
 801b92c:	42b3      	cmp	r3, r6
 801b92e:	b085      	sub	sp, #20
 801b930:	bfb8      	it	lt
 801b932:	3101      	addlt	r1, #1
 801b934:	f7ff fe92 	bl	801b65c <_Balloc>
 801b938:	b930      	cbnz	r0, 801b948 <__multiply+0x44>
 801b93a:	4602      	mov	r2, r0
 801b93c:	4b44      	ldr	r3, [pc, #272]	@ (801ba50 <__multiply+0x14c>)
 801b93e:	4845      	ldr	r0, [pc, #276]	@ (801ba54 <__multiply+0x150>)
 801b940:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b944:	f000 fd74 	bl	801c430 <__assert_func>
 801b948:	f100 0514 	add.w	r5, r0, #20
 801b94c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b950:	462b      	mov	r3, r5
 801b952:	2200      	movs	r2, #0
 801b954:	4543      	cmp	r3, r8
 801b956:	d321      	bcc.n	801b99c <__multiply+0x98>
 801b958:	f107 0114 	add.w	r1, r7, #20
 801b95c:	f104 0214 	add.w	r2, r4, #20
 801b960:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b964:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b968:	9302      	str	r3, [sp, #8]
 801b96a:	1b13      	subs	r3, r2, r4
 801b96c:	3b15      	subs	r3, #21
 801b96e:	f023 0303 	bic.w	r3, r3, #3
 801b972:	3304      	adds	r3, #4
 801b974:	f104 0715 	add.w	r7, r4, #21
 801b978:	42ba      	cmp	r2, r7
 801b97a:	bf38      	it	cc
 801b97c:	2304      	movcc	r3, #4
 801b97e:	9301      	str	r3, [sp, #4]
 801b980:	9b02      	ldr	r3, [sp, #8]
 801b982:	9103      	str	r1, [sp, #12]
 801b984:	428b      	cmp	r3, r1
 801b986:	d80c      	bhi.n	801b9a2 <__multiply+0x9e>
 801b988:	2e00      	cmp	r6, #0
 801b98a:	dd03      	ble.n	801b994 <__multiply+0x90>
 801b98c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b990:	2b00      	cmp	r3, #0
 801b992:	d05b      	beq.n	801ba4c <__multiply+0x148>
 801b994:	6106      	str	r6, [r0, #16]
 801b996:	b005      	add	sp, #20
 801b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b99c:	f843 2b04 	str.w	r2, [r3], #4
 801b9a0:	e7d8      	b.n	801b954 <__multiply+0x50>
 801b9a2:	f8b1 a000 	ldrh.w	sl, [r1]
 801b9a6:	f1ba 0f00 	cmp.w	sl, #0
 801b9aa:	d024      	beq.n	801b9f6 <__multiply+0xf2>
 801b9ac:	f104 0e14 	add.w	lr, r4, #20
 801b9b0:	46a9      	mov	r9, r5
 801b9b2:	f04f 0c00 	mov.w	ip, #0
 801b9b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b9ba:	f8d9 3000 	ldr.w	r3, [r9]
 801b9be:	fa1f fb87 	uxth.w	fp, r7
 801b9c2:	b29b      	uxth	r3, r3
 801b9c4:	fb0a 330b 	mla	r3, sl, fp, r3
 801b9c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b9cc:	f8d9 7000 	ldr.w	r7, [r9]
 801b9d0:	4463      	add	r3, ip
 801b9d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b9d6:	fb0a c70b 	mla	r7, sl, fp, ip
 801b9da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b9de:	b29b      	uxth	r3, r3
 801b9e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b9e4:	4572      	cmp	r2, lr
 801b9e6:	f849 3b04 	str.w	r3, [r9], #4
 801b9ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b9ee:	d8e2      	bhi.n	801b9b6 <__multiply+0xb2>
 801b9f0:	9b01      	ldr	r3, [sp, #4]
 801b9f2:	f845 c003 	str.w	ip, [r5, r3]
 801b9f6:	9b03      	ldr	r3, [sp, #12]
 801b9f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b9fc:	3104      	adds	r1, #4
 801b9fe:	f1b9 0f00 	cmp.w	r9, #0
 801ba02:	d021      	beq.n	801ba48 <__multiply+0x144>
 801ba04:	682b      	ldr	r3, [r5, #0]
 801ba06:	f104 0c14 	add.w	ip, r4, #20
 801ba0a:	46ae      	mov	lr, r5
 801ba0c:	f04f 0a00 	mov.w	sl, #0
 801ba10:	f8bc b000 	ldrh.w	fp, [ip]
 801ba14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ba18:	fb09 770b 	mla	r7, r9, fp, r7
 801ba1c:	4457      	add	r7, sl
 801ba1e:	b29b      	uxth	r3, r3
 801ba20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba24:	f84e 3b04 	str.w	r3, [lr], #4
 801ba28:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ba2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba30:	f8be 3000 	ldrh.w	r3, [lr]
 801ba34:	fb09 330a 	mla	r3, r9, sl, r3
 801ba38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ba3c:	4562      	cmp	r2, ip
 801ba3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba42:	d8e5      	bhi.n	801ba10 <__multiply+0x10c>
 801ba44:	9f01      	ldr	r7, [sp, #4]
 801ba46:	51eb      	str	r3, [r5, r7]
 801ba48:	3504      	adds	r5, #4
 801ba4a:	e799      	b.n	801b980 <__multiply+0x7c>
 801ba4c:	3e01      	subs	r6, #1
 801ba4e:	e79b      	b.n	801b988 <__multiply+0x84>
 801ba50:	0801e549 	.word	0x0801e549
 801ba54:	0801e5ba 	.word	0x0801e5ba

0801ba58 <__pow5mult>:
 801ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba5c:	4615      	mov	r5, r2
 801ba5e:	f012 0203 	ands.w	r2, r2, #3
 801ba62:	4607      	mov	r7, r0
 801ba64:	460e      	mov	r6, r1
 801ba66:	d007      	beq.n	801ba78 <__pow5mult+0x20>
 801ba68:	4c25      	ldr	r4, [pc, #148]	@ (801bb00 <__pow5mult+0xa8>)
 801ba6a:	3a01      	subs	r2, #1
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba72:	f7ff fe55 	bl	801b720 <__multadd>
 801ba76:	4606      	mov	r6, r0
 801ba78:	10ad      	asrs	r5, r5, #2
 801ba7a:	d03d      	beq.n	801baf8 <__pow5mult+0xa0>
 801ba7c:	69fc      	ldr	r4, [r7, #28]
 801ba7e:	b97c      	cbnz	r4, 801baa0 <__pow5mult+0x48>
 801ba80:	2010      	movs	r0, #16
 801ba82:	f7ff fd23 	bl	801b4cc <malloc>
 801ba86:	4602      	mov	r2, r0
 801ba88:	61f8      	str	r0, [r7, #28]
 801ba8a:	b928      	cbnz	r0, 801ba98 <__pow5mult+0x40>
 801ba8c:	4b1d      	ldr	r3, [pc, #116]	@ (801bb04 <__pow5mult+0xac>)
 801ba8e:	481e      	ldr	r0, [pc, #120]	@ (801bb08 <__pow5mult+0xb0>)
 801ba90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ba94:	f000 fccc 	bl	801c430 <__assert_func>
 801ba98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ba9c:	6004      	str	r4, [r0, #0]
 801ba9e:	60c4      	str	r4, [r0, #12]
 801baa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801baa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801baa8:	b94c      	cbnz	r4, 801babe <__pow5mult+0x66>
 801baaa:	f240 2171 	movw	r1, #625	@ 0x271
 801baae:	4638      	mov	r0, r7
 801bab0:	f7ff ff12 	bl	801b8d8 <__i2b>
 801bab4:	2300      	movs	r3, #0
 801bab6:	f8c8 0008 	str.w	r0, [r8, #8]
 801baba:	4604      	mov	r4, r0
 801babc:	6003      	str	r3, [r0, #0]
 801babe:	f04f 0900 	mov.w	r9, #0
 801bac2:	07eb      	lsls	r3, r5, #31
 801bac4:	d50a      	bpl.n	801badc <__pow5mult+0x84>
 801bac6:	4631      	mov	r1, r6
 801bac8:	4622      	mov	r2, r4
 801baca:	4638      	mov	r0, r7
 801bacc:	f7ff ff1a 	bl	801b904 <__multiply>
 801bad0:	4631      	mov	r1, r6
 801bad2:	4680      	mov	r8, r0
 801bad4:	4638      	mov	r0, r7
 801bad6:	f7ff fe01 	bl	801b6dc <_Bfree>
 801bada:	4646      	mov	r6, r8
 801badc:	106d      	asrs	r5, r5, #1
 801bade:	d00b      	beq.n	801baf8 <__pow5mult+0xa0>
 801bae0:	6820      	ldr	r0, [r4, #0]
 801bae2:	b938      	cbnz	r0, 801baf4 <__pow5mult+0x9c>
 801bae4:	4622      	mov	r2, r4
 801bae6:	4621      	mov	r1, r4
 801bae8:	4638      	mov	r0, r7
 801baea:	f7ff ff0b 	bl	801b904 <__multiply>
 801baee:	6020      	str	r0, [r4, #0]
 801baf0:	f8c0 9000 	str.w	r9, [r0]
 801baf4:	4604      	mov	r4, r0
 801baf6:	e7e4      	b.n	801bac2 <__pow5mult+0x6a>
 801baf8:	4630      	mov	r0, r6
 801bafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bafe:	bf00      	nop
 801bb00:	0801e614 	.word	0x0801e614
 801bb04:	0801e4da 	.word	0x0801e4da
 801bb08:	0801e5ba 	.word	0x0801e5ba

0801bb0c <__lshift>:
 801bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb10:	460c      	mov	r4, r1
 801bb12:	6849      	ldr	r1, [r1, #4]
 801bb14:	6923      	ldr	r3, [r4, #16]
 801bb16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb1a:	68a3      	ldr	r3, [r4, #8]
 801bb1c:	4607      	mov	r7, r0
 801bb1e:	4691      	mov	r9, r2
 801bb20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb24:	f108 0601 	add.w	r6, r8, #1
 801bb28:	42b3      	cmp	r3, r6
 801bb2a:	db0b      	blt.n	801bb44 <__lshift+0x38>
 801bb2c:	4638      	mov	r0, r7
 801bb2e:	f7ff fd95 	bl	801b65c <_Balloc>
 801bb32:	4605      	mov	r5, r0
 801bb34:	b948      	cbnz	r0, 801bb4a <__lshift+0x3e>
 801bb36:	4602      	mov	r2, r0
 801bb38:	4b28      	ldr	r3, [pc, #160]	@ (801bbdc <__lshift+0xd0>)
 801bb3a:	4829      	ldr	r0, [pc, #164]	@ (801bbe0 <__lshift+0xd4>)
 801bb3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bb40:	f000 fc76 	bl	801c430 <__assert_func>
 801bb44:	3101      	adds	r1, #1
 801bb46:	005b      	lsls	r3, r3, #1
 801bb48:	e7ee      	b.n	801bb28 <__lshift+0x1c>
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	f100 0114 	add.w	r1, r0, #20
 801bb50:	f100 0210 	add.w	r2, r0, #16
 801bb54:	4618      	mov	r0, r3
 801bb56:	4553      	cmp	r3, sl
 801bb58:	db33      	blt.n	801bbc2 <__lshift+0xb6>
 801bb5a:	6920      	ldr	r0, [r4, #16]
 801bb5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb60:	f104 0314 	add.w	r3, r4, #20
 801bb64:	f019 091f 	ands.w	r9, r9, #31
 801bb68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bb70:	d02b      	beq.n	801bbca <__lshift+0xbe>
 801bb72:	f1c9 0e20 	rsb	lr, r9, #32
 801bb76:	468a      	mov	sl, r1
 801bb78:	2200      	movs	r2, #0
 801bb7a:	6818      	ldr	r0, [r3, #0]
 801bb7c:	fa00 f009 	lsl.w	r0, r0, r9
 801bb80:	4310      	orrs	r0, r2
 801bb82:	f84a 0b04 	str.w	r0, [sl], #4
 801bb86:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb8a:	459c      	cmp	ip, r3
 801bb8c:	fa22 f20e 	lsr.w	r2, r2, lr
 801bb90:	d8f3      	bhi.n	801bb7a <__lshift+0x6e>
 801bb92:	ebac 0304 	sub.w	r3, ip, r4
 801bb96:	3b15      	subs	r3, #21
 801bb98:	f023 0303 	bic.w	r3, r3, #3
 801bb9c:	3304      	adds	r3, #4
 801bb9e:	f104 0015 	add.w	r0, r4, #21
 801bba2:	4584      	cmp	ip, r0
 801bba4:	bf38      	it	cc
 801bba6:	2304      	movcc	r3, #4
 801bba8:	50ca      	str	r2, [r1, r3]
 801bbaa:	b10a      	cbz	r2, 801bbb0 <__lshift+0xa4>
 801bbac:	f108 0602 	add.w	r6, r8, #2
 801bbb0:	3e01      	subs	r6, #1
 801bbb2:	4638      	mov	r0, r7
 801bbb4:	612e      	str	r6, [r5, #16]
 801bbb6:	4621      	mov	r1, r4
 801bbb8:	f7ff fd90 	bl	801b6dc <_Bfree>
 801bbbc:	4628      	mov	r0, r5
 801bbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbc2:	f842 0f04 	str.w	r0, [r2, #4]!
 801bbc6:	3301      	adds	r3, #1
 801bbc8:	e7c5      	b.n	801bb56 <__lshift+0x4a>
 801bbca:	3904      	subs	r1, #4
 801bbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbd0:	f841 2f04 	str.w	r2, [r1, #4]!
 801bbd4:	459c      	cmp	ip, r3
 801bbd6:	d8f9      	bhi.n	801bbcc <__lshift+0xc0>
 801bbd8:	e7ea      	b.n	801bbb0 <__lshift+0xa4>
 801bbda:	bf00      	nop
 801bbdc:	0801e549 	.word	0x0801e549
 801bbe0:	0801e5ba 	.word	0x0801e5ba

0801bbe4 <__mcmp>:
 801bbe4:	690a      	ldr	r2, [r1, #16]
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	6900      	ldr	r0, [r0, #16]
 801bbea:	1a80      	subs	r0, r0, r2
 801bbec:	b530      	push	{r4, r5, lr}
 801bbee:	d10e      	bne.n	801bc0e <__mcmp+0x2a>
 801bbf0:	3314      	adds	r3, #20
 801bbf2:	3114      	adds	r1, #20
 801bbf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bbf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bbfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bc00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bc04:	4295      	cmp	r5, r2
 801bc06:	d003      	beq.n	801bc10 <__mcmp+0x2c>
 801bc08:	d205      	bcs.n	801bc16 <__mcmp+0x32>
 801bc0a:	f04f 30ff 	mov.w	r0, #4294967295
 801bc0e:	bd30      	pop	{r4, r5, pc}
 801bc10:	42a3      	cmp	r3, r4
 801bc12:	d3f3      	bcc.n	801bbfc <__mcmp+0x18>
 801bc14:	e7fb      	b.n	801bc0e <__mcmp+0x2a>
 801bc16:	2001      	movs	r0, #1
 801bc18:	e7f9      	b.n	801bc0e <__mcmp+0x2a>
	...

0801bc1c <__mdiff>:
 801bc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc20:	4689      	mov	r9, r1
 801bc22:	4606      	mov	r6, r0
 801bc24:	4611      	mov	r1, r2
 801bc26:	4648      	mov	r0, r9
 801bc28:	4614      	mov	r4, r2
 801bc2a:	f7ff ffdb 	bl	801bbe4 <__mcmp>
 801bc2e:	1e05      	subs	r5, r0, #0
 801bc30:	d112      	bne.n	801bc58 <__mdiff+0x3c>
 801bc32:	4629      	mov	r1, r5
 801bc34:	4630      	mov	r0, r6
 801bc36:	f7ff fd11 	bl	801b65c <_Balloc>
 801bc3a:	4602      	mov	r2, r0
 801bc3c:	b928      	cbnz	r0, 801bc4a <__mdiff+0x2e>
 801bc3e:	4b3f      	ldr	r3, [pc, #252]	@ (801bd3c <__mdiff+0x120>)
 801bc40:	f240 2137 	movw	r1, #567	@ 0x237
 801bc44:	483e      	ldr	r0, [pc, #248]	@ (801bd40 <__mdiff+0x124>)
 801bc46:	f000 fbf3 	bl	801c430 <__assert_func>
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bc50:	4610      	mov	r0, r2
 801bc52:	b003      	add	sp, #12
 801bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc58:	bfbc      	itt	lt
 801bc5a:	464b      	movlt	r3, r9
 801bc5c:	46a1      	movlt	r9, r4
 801bc5e:	4630      	mov	r0, r6
 801bc60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bc64:	bfba      	itte	lt
 801bc66:	461c      	movlt	r4, r3
 801bc68:	2501      	movlt	r5, #1
 801bc6a:	2500      	movge	r5, #0
 801bc6c:	f7ff fcf6 	bl	801b65c <_Balloc>
 801bc70:	4602      	mov	r2, r0
 801bc72:	b918      	cbnz	r0, 801bc7c <__mdiff+0x60>
 801bc74:	4b31      	ldr	r3, [pc, #196]	@ (801bd3c <__mdiff+0x120>)
 801bc76:	f240 2145 	movw	r1, #581	@ 0x245
 801bc7a:	e7e3      	b.n	801bc44 <__mdiff+0x28>
 801bc7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bc80:	6926      	ldr	r6, [r4, #16]
 801bc82:	60c5      	str	r5, [r0, #12]
 801bc84:	f109 0310 	add.w	r3, r9, #16
 801bc88:	f109 0514 	add.w	r5, r9, #20
 801bc8c:	f104 0e14 	add.w	lr, r4, #20
 801bc90:	f100 0b14 	add.w	fp, r0, #20
 801bc94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bc98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bc9c:	9301      	str	r3, [sp, #4]
 801bc9e:	46d9      	mov	r9, fp
 801bca0:	f04f 0c00 	mov.w	ip, #0
 801bca4:	9b01      	ldr	r3, [sp, #4]
 801bca6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bcaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bcae:	9301      	str	r3, [sp, #4]
 801bcb0:	fa1f f38a 	uxth.w	r3, sl
 801bcb4:	4619      	mov	r1, r3
 801bcb6:	b283      	uxth	r3, r0
 801bcb8:	1acb      	subs	r3, r1, r3
 801bcba:	0c00      	lsrs	r0, r0, #16
 801bcbc:	4463      	add	r3, ip
 801bcbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bcc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bcc6:	b29b      	uxth	r3, r3
 801bcc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bccc:	4576      	cmp	r6, lr
 801bcce:	f849 3b04 	str.w	r3, [r9], #4
 801bcd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bcd6:	d8e5      	bhi.n	801bca4 <__mdiff+0x88>
 801bcd8:	1b33      	subs	r3, r6, r4
 801bcda:	3b15      	subs	r3, #21
 801bcdc:	f023 0303 	bic.w	r3, r3, #3
 801bce0:	3415      	adds	r4, #21
 801bce2:	3304      	adds	r3, #4
 801bce4:	42a6      	cmp	r6, r4
 801bce6:	bf38      	it	cc
 801bce8:	2304      	movcc	r3, #4
 801bcea:	441d      	add	r5, r3
 801bcec:	445b      	add	r3, fp
 801bcee:	461e      	mov	r6, r3
 801bcf0:	462c      	mov	r4, r5
 801bcf2:	4544      	cmp	r4, r8
 801bcf4:	d30e      	bcc.n	801bd14 <__mdiff+0xf8>
 801bcf6:	f108 0103 	add.w	r1, r8, #3
 801bcfa:	1b49      	subs	r1, r1, r5
 801bcfc:	f021 0103 	bic.w	r1, r1, #3
 801bd00:	3d03      	subs	r5, #3
 801bd02:	45a8      	cmp	r8, r5
 801bd04:	bf38      	it	cc
 801bd06:	2100      	movcc	r1, #0
 801bd08:	440b      	add	r3, r1
 801bd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd0e:	b191      	cbz	r1, 801bd36 <__mdiff+0x11a>
 801bd10:	6117      	str	r7, [r2, #16]
 801bd12:	e79d      	b.n	801bc50 <__mdiff+0x34>
 801bd14:	f854 1b04 	ldr.w	r1, [r4], #4
 801bd18:	46e6      	mov	lr, ip
 801bd1a:	0c08      	lsrs	r0, r1, #16
 801bd1c:	fa1c fc81 	uxtah	ip, ip, r1
 801bd20:	4471      	add	r1, lr
 801bd22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bd26:	b289      	uxth	r1, r1
 801bd28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bd2c:	f846 1b04 	str.w	r1, [r6], #4
 801bd30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd34:	e7dd      	b.n	801bcf2 <__mdiff+0xd6>
 801bd36:	3f01      	subs	r7, #1
 801bd38:	e7e7      	b.n	801bd0a <__mdiff+0xee>
 801bd3a:	bf00      	nop
 801bd3c:	0801e549 	.word	0x0801e549
 801bd40:	0801e5ba 	.word	0x0801e5ba

0801bd44 <__ulp>:
 801bd44:	b082      	sub	sp, #8
 801bd46:	ed8d 0b00 	vstr	d0, [sp]
 801bd4a:	9a01      	ldr	r2, [sp, #4]
 801bd4c:	4b0f      	ldr	r3, [pc, #60]	@ (801bd8c <__ulp+0x48>)
 801bd4e:	4013      	ands	r3, r2
 801bd50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	dc08      	bgt.n	801bd6a <__ulp+0x26>
 801bd58:	425b      	negs	r3, r3
 801bd5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bd5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bd62:	da04      	bge.n	801bd6e <__ulp+0x2a>
 801bd64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bd68:	4113      	asrs	r3, r2
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	e008      	b.n	801bd80 <__ulp+0x3c>
 801bd6e:	f1a2 0314 	sub.w	r3, r2, #20
 801bd72:	2b1e      	cmp	r3, #30
 801bd74:	bfda      	itte	le
 801bd76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bd7a:	40da      	lsrle	r2, r3
 801bd7c:	2201      	movgt	r2, #1
 801bd7e:	2300      	movs	r3, #0
 801bd80:	4619      	mov	r1, r3
 801bd82:	4610      	mov	r0, r2
 801bd84:	ec41 0b10 	vmov	d0, r0, r1
 801bd88:	b002      	add	sp, #8
 801bd8a:	4770      	bx	lr
 801bd8c:	7ff00000 	.word	0x7ff00000

0801bd90 <__b2d>:
 801bd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd94:	6906      	ldr	r6, [r0, #16]
 801bd96:	f100 0814 	add.w	r8, r0, #20
 801bd9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bd9e:	1f37      	subs	r7, r6, #4
 801bda0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bda4:	4610      	mov	r0, r2
 801bda6:	f7ff fd4b 	bl	801b840 <__hi0bits>
 801bdaa:	f1c0 0320 	rsb	r3, r0, #32
 801bdae:	280a      	cmp	r0, #10
 801bdb0:	600b      	str	r3, [r1, #0]
 801bdb2:	491b      	ldr	r1, [pc, #108]	@ (801be20 <__b2d+0x90>)
 801bdb4:	dc15      	bgt.n	801bde2 <__b2d+0x52>
 801bdb6:	f1c0 0c0b 	rsb	ip, r0, #11
 801bdba:	fa22 f30c 	lsr.w	r3, r2, ip
 801bdbe:	45b8      	cmp	r8, r7
 801bdc0:	ea43 0501 	orr.w	r5, r3, r1
 801bdc4:	bf34      	ite	cc
 801bdc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bdca:	2300      	movcs	r3, #0
 801bdcc:	3015      	adds	r0, #21
 801bdce:	fa02 f000 	lsl.w	r0, r2, r0
 801bdd2:	fa23 f30c 	lsr.w	r3, r3, ip
 801bdd6:	4303      	orrs	r3, r0
 801bdd8:	461c      	mov	r4, r3
 801bdda:	ec45 4b10 	vmov	d0, r4, r5
 801bdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bde2:	45b8      	cmp	r8, r7
 801bde4:	bf3a      	itte	cc
 801bde6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bdea:	f1a6 0708 	subcc.w	r7, r6, #8
 801bdee:	2300      	movcs	r3, #0
 801bdf0:	380b      	subs	r0, #11
 801bdf2:	d012      	beq.n	801be1a <__b2d+0x8a>
 801bdf4:	f1c0 0120 	rsb	r1, r0, #32
 801bdf8:	fa23 f401 	lsr.w	r4, r3, r1
 801bdfc:	4082      	lsls	r2, r0
 801bdfe:	4322      	orrs	r2, r4
 801be00:	4547      	cmp	r7, r8
 801be02:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801be06:	bf8c      	ite	hi
 801be08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801be0c:	2200      	movls	r2, #0
 801be0e:	4083      	lsls	r3, r0
 801be10:	40ca      	lsrs	r2, r1
 801be12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801be16:	4313      	orrs	r3, r2
 801be18:	e7de      	b.n	801bdd8 <__b2d+0x48>
 801be1a:	ea42 0501 	orr.w	r5, r2, r1
 801be1e:	e7db      	b.n	801bdd8 <__b2d+0x48>
 801be20:	3ff00000 	.word	0x3ff00000

0801be24 <__d2b>:
 801be24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be28:	460f      	mov	r7, r1
 801be2a:	2101      	movs	r1, #1
 801be2c:	ec59 8b10 	vmov	r8, r9, d0
 801be30:	4616      	mov	r6, r2
 801be32:	f7ff fc13 	bl	801b65c <_Balloc>
 801be36:	4604      	mov	r4, r0
 801be38:	b930      	cbnz	r0, 801be48 <__d2b+0x24>
 801be3a:	4602      	mov	r2, r0
 801be3c:	4b23      	ldr	r3, [pc, #140]	@ (801becc <__d2b+0xa8>)
 801be3e:	4824      	ldr	r0, [pc, #144]	@ (801bed0 <__d2b+0xac>)
 801be40:	f240 310f 	movw	r1, #783	@ 0x30f
 801be44:	f000 faf4 	bl	801c430 <__assert_func>
 801be48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801be4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801be50:	b10d      	cbz	r5, 801be56 <__d2b+0x32>
 801be52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801be56:	9301      	str	r3, [sp, #4]
 801be58:	f1b8 0300 	subs.w	r3, r8, #0
 801be5c:	d023      	beq.n	801bea6 <__d2b+0x82>
 801be5e:	4668      	mov	r0, sp
 801be60:	9300      	str	r3, [sp, #0]
 801be62:	f7ff fd0c 	bl	801b87e <__lo0bits>
 801be66:	e9dd 1200 	ldrd	r1, r2, [sp]
 801be6a:	b1d0      	cbz	r0, 801bea2 <__d2b+0x7e>
 801be6c:	f1c0 0320 	rsb	r3, r0, #32
 801be70:	fa02 f303 	lsl.w	r3, r2, r3
 801be74:	430b      	orrs	r3, r1
 801be76:	40c2      	lsrs	r2, r0
 801be78:	6163      	str	r3, [r4, #20]
 801be7a:	9201      	str	r2, [sp, #4]
 801be7c:	9b01      	ldr	r3, [sp, #4]
 801be7e:	61a3      	str	r3, [r4, #24]
 801be80:	2b00      	cmp	r3, #0
 801be82:	bf0c      	ite	eq
 801be84:	2201      	moveq	r2, #1
 801be86:	2202      	movne	r2, #2
 801be88:	6122      	str	r2, [r4, #16]
 801be8a:	b1a5      	cbz	r5, 801beb6 <__d2b+0x92>
 801be8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801be90:	4405      	add	r5, r0
 801be92:	603d      	str	r5, [r7, #0]
 801be94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801be98:	6030      	str	r0, [r6, #0]
 801be9a:	4620      	mov	r0, r4
 801be9c:	b003      	add	sp, #12
 801be9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bea2:	6161      	str	r1, [r4, #20]
 801bea4:	e7ea      	b.n	801be7c <__d2b+0x58>
 801bea6:	a801      	add	r0, sp, #4
 801bea8:	f7ff fce9 	bl	801b87e <__lo0bits>
 801beac:	9b01      	ldr	r3, [sp, #4]
 801beae:	6163      	str	r3, [r4, #20]
 801beb0:	3020      	adds	r0, #32
 801beb2:	2201      	movs	r2, #1
 801beb4:	e7e8      	b.n	801be88 <__d2b+0x64>
 801beb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801beba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bebe:	6038      	str	r0, [r7, #0]
 801bec0:	6918      	ldr	r0, [r3, #16]
 801bec2:	f7ff fcbd 	bl	801b840 <__hi0bits>
 801bec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801beca:	e7e5      	b.n	801be98 <__d2b+0x74>
 801becc:	0801e549 	.word	0x0801e549
 801bed0:	0801e5ba 	.word	0x0801e5ba

0801bed4 <__ratio>:
 801bed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed8:	4688      	mov	r8, r1
 801beda:	4669      	mov	r1, sp
 801bedc:	4681      	mov	r9, r0
 801bede:	f7ff ff57 	bl	801bd90 <__b2d>
 801bee2:	a901      	add	r1, sp, #4
 801bee4:	4640      	mov	r0, r8
 801bee6:	ec55 4b10 	vmov	r4, r5, d0
 801beea:	f7ff ff51 	bl	801bd90 <__b2d>
 801beee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801bef2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801bef6:	1ad2      	subs	r2, r2, r3
 801bef8:	e9dd 3100 	ldrd	r3, r1, [sp]
 801befc:	1a5b      	subs	r3, r3, r1
 801befe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801bf02:	ec57 6b10 	vmov	r6, r7, d0
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	bfd6      	itet	le
 801bf0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bf0e:	462a      	movgt	r2, r5
 801bf10:	463a      	movle	r2, r7
 801bf12:	46ab      	mov	fp, r5
 801bf14:	46a2      	mov	sl, r4
 801bf16:	bfce      	itee	gt
 801bf18:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bf1c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bf20:	ee00 3a90 	vmovle	s1, r3
 801bf24:	ec4b ab17 	vmov	d7, sl, fp
 801bf28:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bf2c:	b003      	add	sp, #12
 801bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf32 <__copybits>:
 801bf32:	3901      	subs	r1, #1
 801bf34:	b570      	push	{r4, r5, r6, lr}
 801bf36:	1149      	asrs	r1, r1, #5
 801bf38:	6914      	ldr	r4, [r2, #16]
 801bf3a:	3101      	adds	r1, #1
 801bf3c:	f102 0314 	add.w	r3, r2, #20
 801bf40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bf44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bf48:	1f05      	subs	r5, r0, #4
 801bf4a:	42a3      	cmp	r3, r4
 801bf4c:	d30c      	bcc.n	801bf68 <__copybits+0x36>
 801bf4e:	1aa3      	subs	r3, r4, r2
 801bf50:	3b11      	subs	r3, #17
 801bf52:	f023 0303 	bic.w	r3, r3, #3
 801bf56:	3211      	adds	r2, #17
 801bf58:	42a2      	cmp	r2, r4
 801bf5a:	bf88      	it	hi
 801bf5c:	2300      	movhi	r3, #0
 801bf5e:	4418      	add	r0, r3
 801bf60:	2300      	movs	r3, #0
 801bf62:	4288      	cmp	r0, r1
 801bf64:	d305      	bcc.n	801bf72 <__copybits+0x40>
 801bf66:	bd70      	pop	{r4, r5, r6, pc}
 801bf68:	f853 6b04 	ldr.w	r6, [r3], #4
 801bf6c:	f845 6f04 	str.w	r6, [r5, #4]!
 801bf70:	e7eb      	b.n	801bf4a <__copybits+0x18>
 801bf72:	f840 3b04 	str.w	r3, [r0], #4
 801bf76:	e7f4      	b.n	801bf62 <__copybits+0x30>

0801bf78 <__any_on>:
 801bf78:	f100 0214 	add.w	r2, r0, #20
 801bf7c:	6900      	ldr	r0, [r0, #16]
 801bf7e:	114b      	asrs	r3, r1, #5
 801bf80:	4298      	cmp	r0, r3
 801bf82:	b510      	push	{r4, lr}
 801bf84:	db11      	blt.n	801bfaa <__any_on+0x32>
 801bf86:	dd0a      	ble.n	801bf9e <__any_on+0x26>
 801bf88:	f011 011f 	ands.w	r1, r1, #31
 801bf8c:	d007      	beq.n	801bf9e <__any_on+0x26>
 801bf8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bf92:	fa24 f001 	lsr.w	r0, r4, r1
 801bf96:	fa00 f101 	lsl.w	r1, r0, r1
 801bf9a:	428c      	cmp	r4, r1
 801bf9c:	d10b      	bne.n	801bfb6 <__any_on+0x3e>
 801bf9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfa2:	4293      	cmp	r3, r2
 801bfa4:	d803      	bhi.n	801bfae <__any_on+0x36>
 801bfa6:	2000      	movs	r0, #0
 801bfa8:	bd10      	pop	{r4, pc}
 801bfaa:	4603      	mov	r3, r0
 801bfac:	e7f7      	b.n	801bf9e <__any_on+0x26>
 801bfae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bfb2:	2900      	cmp	r1, #0
 801bfb4:	d0f5      	beq.n	801bfa2 <__any_on+0x2a>
 801bfb6:	2001      	movs	r0, #1
 801bfb8:	e7f6      	b.n	801bfa8 <__any_on+0x30>

0801bfba <__ascii_wctomb>:
 801bfba:	4603      	mov	r3, r0
 801bfbc:	4608      	mov	r0, r1
 801bfbe:	b141      	cbz	r1, 801bfd2 <__ascii_wctomb+0x18>
 801bfc0:	2aff      	cmp	r2, #255	@ 0xff
 801bfc2:	d904      	bls.n	801bfce <__ascii_wctomb+0x14>
 801bfc4:	228a      	movs	r2, #138	@ 0x8a
 801bfc6:	601a      	str	r2, [r3, #0]
 801bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 801bfcc:	4770      	bx	lr
 801bfce:	700a      	strb	r2, [r1, #0]
 801bfd0:	2001      	movs	r0, #1
 801bfd2:	4770      	bx	lr

0801bfd4 <__ssputs_r>:
 801bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd8:	688e      	ldr	r6, [r1, #8]
 801bfda:	461f      	mov	r7, r3
 801bfdc:	42be      	cmp	r6, r7
 801bfde:	680b      	ldr	r3, [r1, #0]
 801bfe0:	4682      	mov	sl, r0
 801bfe2:	460c      	mov	r4, r1
 801bfe4:	4690      	mov	r8, r2
 801bfe6:	d82d      	bhi.n	801c044 <__ssputs_r+0x70>
 801bfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bfec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bff0:	d026      	beq.n	801c040 <__ssputs_r+0x6c>
 801bff2:	6965      	ldr	r5, [r4, #20]
 801bff4:	6909      	ldr	r1, [r1, #16]
 801bff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bffa:	eba3 0901 	sub.w	r9, r3, r1
 801bffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c002:	1c7b      	adds	r3, r7, #1
 801c004:	444b      	add	r3, r9
 801c006:	106d      	asrs	r5, r5, #1
 801c008:	429d      	cmp	r5, r3
 801c00a:	bf38      	it	cc
 801c00c:	461d      	movcc	r5, r3
 801c00e:	0553      	lsls	r3, r2, #21
 801c010:	d527      	bpl.n	801c062 <__ssputs_r+0x8e>
 801c012:	4629      	mov	r1, r5
 801c014:	f7ff fa84 	bl	801b520 <_malloc_r>
 801c018:	4606      	mov	r6, r0
 801c01a:	b360      	cbz	r0, 801c076 <__ssputs_r+0xa2>
 801c01c:	6921      	ldr	r1, [r4, #16]
 801c01e:	464a      	mov	r2, r9
 801c020:	f7fe f8d9 	bl	801a1d6 <memcpy>
 801c024:	89a3      	ldrh	r3, [r4, #12]
 801c026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c02e:	81a3      	strh	r3, [r4, #12]
 801c030:	6126      	str	r6, [r4, #16]
 801c032:	6165      	str	r5, [r4, #20]
 801c034:	444e      	add	r6, r9
 801c036:	eba5 0509 	sub.w	r5, r5, r9
 801c03a:	6026      	str	r6, [r4, #0]
 801c03c:	60a5      	str	r5, [r4, #8]
 801c03e:	463e      	mov	r6, r7
 801c040:	42be      	cmp	r6, r7
 801c042:	d900      	bls.n	801c046 <__ssputs_r+0x72>
 801c044:	463e      	mov	r6, r7
 801c046:	6820      	ldr	r0, [r4, #0]
 801c048:	4632      	mov	r2, r6
 801c04a:	4641      	mov	r1, r8
 801c04c:	f000 f9c6 	bl	801c3dc <memmove>
 801c050:	68a3      	ldr	r3, [r4, #8]
 801c052:	1b9b      	subs	r3, r3, r6
 801c054:	60a3      	str	r3, [r4, #8]
 801c056:	6823      	ldr	r3, [r4, #0]
 801c058:	4433      	add	r3, r6
 801c05a:	6023      	str	r3, [r4, #0]
 801c05c:	2000      	movs	r0, #0
 801c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c062:	462a      	mov	r2, r5
 801c064:	f000 fa16 	bl	801c494 <_realloc_r>
 801c068:	4606      	mov	r6, r0
 801c06a:	2800      	cmp	r0, #0
 801c06c:	d1e0      	bne.n	801c030 <__ssputs_r+0x5c>
 801c06e:	6921      	ldr	r1, [r4, #16]
 801c070:	4650      	mov	r0, sl
 801c072:	f7fe fea7 	bl	801adc4 <_free_r>
 801c076:	230c      	movs	r3, #12
 801c078:	f8ca 3000 	str.w	r3, [sl]
 801c07c:	89a3      	ldrh	r3, [r4, #12]
 801c07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c082:	81a3      	strh	r3, [r4, #12]
 801c084:	f04f 30ff 	mov.w	r0, #4294967295
 801c088:	e7e9      	b.n	801c05e <__ssputs_r+0x8a>
	...

0801c08c <_svfiprintf_r>:
 801c08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c090:	4698      	mov	r8, r3
 801c092:	898b      	ldrh	r3, [r1, #12]
 801c094:	061b      	lsls	r3, r3, #24
 801c096:	b09d      	sub	sp, #116	@ 0x74
 801c098:	4607      	mov	r7, r0
 801c09a:	460d      	mov	r5, r1
 801c09c:	4614      	mov	r4, r2
 801c09e:	d510      	bpl.n	801c0c2 <_svfiprintf_r+0x36>
 801c0a0:	690b      	ldr	r3, [r1, #16]
 801c0a2:	b973      	cbnz	r3, 801c0c2 <_svfiprintf_r+0x36>
 801c0a4:	2140      	movs	r1, #64	@ 0x40
 801c0a6:	f7ff fa3b 	bl	801b520 <_malloc_r>
 801c0aa:	6028      	str	r0, [r5, #0]
 801c0ac:	6128      	str	r0, [r5, #16]
 801c0ae:	b930      	cbnz	r0, 801c0be <_svfiprintf_r+0x32>
 801c0b0:	230c      	movs	r3, #12
 801c0b2:	603b      	str	r3, [r7, #0]
 801c0b4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0b8:	b01d      	add	sp, #116	@ 0x74
 801c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0be:	2340      	movs	r3, #64	@ 0x40
 801c0c0:	616b      	str	r3, [r5, #20]
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0c6:	2320      	movs	r3, #32
 801c0c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 801c0d0:	2330      	movs	r3, #48	@ 0x30
 801c0d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c270 <_svfiprintf_r+0x1e4>
 801c0d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c0da:	f04f 0901 	mov.w	r9, #1
 801c0de:	4623      	mov	r3, r4
 801c0e0:	469a      	mov	sl, r3
 801c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0e6:	b10a      	cbz	r2, 801c0ec <_svfiprintf_r+0x60>
 801c0e8:	2a25      	cmp	r2, #37	@ 0x25
 801c0ea:	d1f9      	bne.n	801c0e0 <_svfiprintf_r+0x54>
 801c0ec:	ebba 0b04 	subs.w	fp, sl, r4
 801c0f0:	d00b      	beq.n	801c10a <_svfiprintf_r+0x7e>
 801c0f2:	465b      	mov	r3, fp
 801c0f4:	4622      	mov	r2, r4
 801c0f6:	4629      	mov	r1, r5
 801c0f8:	4638      	mov	r0, r7
 801c0fa:	f7ff ff6b 	bl	801bfd4 <__ssputs_r>
 801c0fe:	3001      	adds	r0, #1
 801c100:	f000 80a7 	beq.w	801c252 <_svfiprintf_r+0x1c6>
 801c104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c106:	445a      	add	r2, fp
 801c108:	9209      	str	r2, [sp, #36]	@ 0x24
 801c10a:	f89a 3000 	ldrb.w	r3, [sl]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	f000 809f 	beq.w	801c252 <_svfiprintf_r+0x1c6>
 801c114:	2300      	movs	r3, #0
 801c116:	f04f 32ff 	mov.w	r2, #4294967295
 801c11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c11e:	f10a 0a01 	add.w	sl, sl, #1
 801c122:	9304      	str	r3, [sp, #16]
 801c124:	9307      	str	r3, [sp, #28]
 801c126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c12a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c12c:	4654      	mov	r4, sl
 801c12e:	2205      	movs	r2, #5
 801c130:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c134:	484e      	ldr	r0, [pc, #312]	@ (801c270 <_svfiprintf_r+0x1e4>)
 801c136:	f7e4 f8fb 	bl	8000330 <memchr>
 801c13a:	9a04      	ldr	r2, [sp, #16]
 801c13c:	b9d8      	cbnz	r0, 801c176 <_svfiprintf_r+0xea>
 801c13e:	06d0      	lsls	r0, r2, #27
 801c140:	bf44      	itt	mi
 801c142:	2320      	movmi	r3, #32
 801c144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c148:	0711      	lsls	r1, r2, #28
 801c14a:	bf44      	itt	mi
 801c14c:	232b      	movmi	r3, #43	@ 0x2b
 801c14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c152:	f89a 3000 	ldrb.w	r3, [sl]
 801c156:	2b2a      	cmp	r3, #42	@ 0x2a
 801c158:	d015      	beq.n	801c186 <_svfiprintf_r+0xfa>
 801c15a:	9a07      	ldr	r2, [sp, #28]
 801c15c:	4654      	mov	r4, sl
 801c15e:	2000      	movs	r0, #0
 801c160:	f04f 0c0a 	mov.w	ip, #10
 801c164:	4621      	mov	r1, r4
 801c166:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c16a:	3b30      	subs	r3, #48	@ 0x30
 801c16c:	2b09      	cmp	r3, #9
 801c16e:	d94b      	bls.n	801c208 <_svfiprintf_r+0x17c>
 801c170:	b1b0      	cbz	r0, 801c1a0 <_svfiprintf_r+0x114>
 801c172:	9207      	str	r2, [sp, #28]
 801c174:	e014      	b.n	801c1a0 <_svfiprintf_r+0x114>
 801c176:	eba0 0308 	sub.w	r3, r0, r8
 801c17a:	fa09 f303 	lsl.w	r3, r9, r3
 801c17e:	4313      	orrs	r3, r2
 801c180:	9304      	str	r3, [sp, #16]
 801c182:	46a2      	mov	sl, r4
 801c184:	e7d2      	b.n	801c12c <_svfiprintf_r+0xa0>
 801c186:	9b03      	ldr	r3, [sp, #12]
 801c188:	1d19      	adds	r1, r3, #4
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	9103      	str	r1, [sp, #12]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	bfbb      	ittet	lt
 801c192:	425b      	neglt	r3, r3
 801c194:	f042 0202 	orrlt.w	r2, r2, #2
 801c198:	9307      	strge	r3, [sp, #28]
 801c19a:	9307      	strlt	r3, [sp, #28]
 801c19c:	bfb8      	it	lt
 801c19e:	9204      	strlt	r2, [sp, #16]
 801c1a0:	7823      	ldrb	r3, [r4, #0]
 801c1a2:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1a4:	d10a      	bne.n	801c1bc <_svfiprintf_r+0x130>
 801c1a6:	7863      	ldrb	r3, [r4, #1]
 801c1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1aa:	d132      	bne.n	801c212 <_svfiprintf_r+0x186>
 801c1ac:	9b03      	ldr	r3, [sp, #12]
 801c1ae:	1d1a      	adds	r2, r3, #4
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	9203      	str	r2, [sp, #12]
 801c1b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c1b8:	3402      	adds	r4, #2
 801c1ba:	9305      	str	r3, [sp, #20]
 801c1bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c280 <_svfiprintf_r+0x1f4>
 801c1c0:	7821      	ldrb	r1, [r4, #0]
 801c1c2:	2203      	movs	r2, #3
 801c1c4:	4650      	mov	r0, sl
 801c1c6:	f7e4 f8b3 	bl	8000330 <memchr>
 801c1ca:	b138      	cbz	r0, 801c1dc <_svfiprintf_r+0x150>
 801c1cc:	9b04      	ldr	r3, [sp, #16]
 801c1ce:	eba0 000a 	sub.w	r0, r0, sl
 801c1d2:	2240      	movs	r2, #64	@ 0x40
 801c1d4:	4082      	lsls	r2, r0
 801c1d6:	4313      	orrs	r3, r2
 801c1d8:	3401      	adds	r4, #1
 801c1da:	9304      	str	r3, [sp, #16]
 801c1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1e0:	4824      	ldr	r0, [pc, #144]	@ (801c274 <_svfiprintf_r+0x1e8>)
 801c1e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c1e6:	2206      	movs	r2, #6
 801c1e8:	f7e4 f8a2 	bl	8000330 <memchr>
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	d036      	beq.n	801c25e <_svfiprintf_r+0x1d2>
 801c1f0:	4b21      	ldr	r3, [pc, #132]	@ (801c278 <_svfiprintf_r+0x1ec>)
 801c1f2:	bb1b      	cbnz	r3, 801c23c <_svfiprintf_r+0x1b0>
 801c1f4:	9b03      	ldr	r3, [sp, #12]
 801c1f6:	3307      	adds	r3, #7
 801c1f8:	f023 0307 	bic.w	r3, r3, #7
 801c1fc:	3308      	adds	r3, #8
 801c1fe:	9303      	str	r3, [sp, #12]
 801c200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c202:	4433      	add	r3, r6
 801c204:	9309      	str	r3, [sp, #36]	@ 0x24
 801c206:	e76a      	b.n	801c0de <_svfiprintf_r+0x52>
 801c208:	fb0c 3202 	mla	r2, ip, r2, r3
 801c20c:	460c      	mov	r4, r1
 801c20e:	2001      	movs	r0, #1
 801c210:	e7a8      	b.n	801c164 <_svfiprintf_r+0xd8>
 801c212:	2300      	movs	r3, #0
 801c214:	3401      	adds	r4, #1
 801c216:	9305      	str	r3, [sp, #20]
 801c218:	4619      	mov	r1, r3
 801c21a:	f04f 0c0a 	mov.w	ip, #10
 801c21e:	4620      	mov	r0, r4
 801c220:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c224:	3a30      	subs	r2, #48	@ 0x30
 801c226:	2a09      	cmp	r2, #9
 801c228:	d903      	bls.n	801c232 <_svfiprintf_r+0x1a6>
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d0c6      	beq.n	801c1bc <_svfiprintf_r+0x130>
 801c22e:	9105      	str	r1, [sp, #20]
 801c230:	e7c4      	b.n	801c1bc <_svfiprintf_r+0x130>
 801c232:	fb0c 2101 	mla	r1, ip, r1, r2
 801c236:	4604      	mov	r4, r0
 801c238:	2301      	movs	r3, #1
 801c23a:	e7f0      	b.n	801c21e <_svfiprintf_r+0x192>
 801c23c:	ab03      	add	r3, sp, #12
 801c23e:	9300      	str	r3, [sp, #0]
 801c240:	462a      	mov	r2, r5
 801c242:	4b0e      	ldr	r3, [pc, #56]	@ (801c27c <_svfiprintf_r+0x1f0>)
 801c244:	a904      	add	r1, sp, #16
 801c246:	4638      	mov	r0, r7
 801c248:	f7fd fa5a 	bl	8019700 <_printf_float>
 801c24c:	1c42      	adds	r2, r0, #1
 801c24e:	4606      	mov	r6, r0
 801c250:	d1d6      	bne.n	801c200 <_svfiprintf_r+0x174>
 801c252:	89ab      	ldrh	r3, [r5, #12]
 801c254:	065b      	lsls	r3, r3, #25
 801c256:	f53f af2d 	bmi.w	801c0b4 <_svfiprintf_r+0x28>
 801c25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c25c:	e72c      	b.n	801c0b8 <_svfiprintf_r+0x2c>
 801c25e:	ab03      	add	r3, sp, #12
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	462a      	mov	r2, r5
 801c264:	4b05      	ldr	r3, [pc, #20]	@ (801c27c <_svfiprintf_r+0x1f0>)
 801c266:	a904      	add	r1, sp, #16
 801c268:	4638      	mov	r0, r7
 801c26a:	f7fd fcd1 	bl	8019c10 <_printf_i>
 801c26e:	e7ed      	b.n	801c24c <_svfiprintf_r+0x1c0>
 801c270:	0801e710 	.word	0x0801e710
 801c274:	0801e71a 	.word	0x0801e71a
 801c278:	08019701 	.word	0x08019701
 801c27c:	0801bfd5 	.word	0x0801bfd5
 801c280:	0801e716 	.word	0x0801e716

0801c284 <__sflush_r>:
 801c284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c28c:	0716      	lsls	r6, r2, #28
 801c28e:	4605      	mov	r5, r0
 801c290:	460c      	mov	r4, r1
 801c292:	d454      	bmi.n	801c33e <__sflush_r+0xba>
 801c294:	684b      	ldr	r3, [r1, #4]
 801c296:	2b00      	cmp	r3, #0
 801c298:	dc02      	bgt.n	801c2a0 <__sflush_r+0x1c>
 801c29a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	dd48      	ble.n	801c332 <__sflush_r+0xae>
 801c2a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c2a2:	2e00      	cmp	r6, #0
 801c2a4:	d045      	beq.n	801c332 <__sflush_r+0xae>
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c2ac:	682f      	ldr	r7, [r5, #0]
 801c2ae:	6a21      	ldr	r1, [r4, #32]
 801c2b0:	602b      	str	r3, [r5, #0]
 801c2b2:	d030      	beq.n	801c316 <__sflush_r+0x92>
 801c2b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c2b6:	89a3      	ldrh	r3, [r4, #12]
 801c2b8:	0759      	lsls	r1, r3, #29
 801c2ba:	d505      	bpl.n	801c2c8 <__sflush_r+0x44>
 801c2bc:	6863      	ldr	r3, [r4, #4]
 801c2be:	1ad2      	subs	r2, r2, r3
 801c2c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c2c2:	b10b      	cbz	r3, 801c2c8 <__sflush_r+0x44>
 801c2c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c2c6:	1ad2      	subs	r2, r2, r3
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c2cc:	6a21      	ldr	r1, [r4, #32]
 801c2ce:	4628      	mov	r0, r5
 801c2d0:	47b0      	blx	r6
 801c2d2:	1c43      	adds	r3, r0, #1
 801c2d4:	89a3      	ldrh	r3, [r4, #12]
 801c2d6:	d106      	bne.n	801c2e6 <__sflush_r+0x62>
 801c2d8:	6829      	ldr	r1, [r5, #0]
 801c2da:	291d      	cmp	r1, #29
 801c2dc:	d82b      	bhi.n	801c336 <__sflush_r+0xb2>
 801c2de:	4a2a      	ldr	r2, [pc, #168]	@ (801c388 <__sflush_r+0x104>)
 801c2e0:	410a      	asrs	r2, r1
 801c2e2:	07d6      	lsls	r6, r2, #31
 801c2e4:	d427      	bmi.n	801c336 <__sflush_r+0xb2>
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	6062      	str	r2, [r4, #4]
 801c2ea:	04d9      	lsls	r1, r3, #19
 801c2ec:	6922      	ldr	r2, [r4, #16]
 801c2ee:	6022      	str	r2, [r4, #0]
 801c2f0:	d504      	bpl.n	801c2fc <__sflush_r+0x78>
 801c2f2:	1c42      	adds	r2, r0, #1
 801c2f4:	d101      	bne.n	801c2fa <__sflush_r+0x76>
 801c2f6:	682b      	ldr	r3, [r5, #0]
 801c2f8:	b903      	cbnz	r3, 801c2fc <__sflush_r+0x78>
 801c2fa:	6560      	str	r0, [r4, #84]	@ 0x54
 801c2fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c2fe:	602f      	str	r7, [r5, #0]
 801c300:	b1b9      	cbz	r1, 801c332 <__sflush_r+0xae>
 801c302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c306:	4299      	cmp	r1, r3
 801c308:	d002      	beq.n	801c310 <__sflush_r+0x8c>
 801c30a:	4628      	mov	r0, r5
 801c30c:	f7fe fd5a 	bl	801adc4 <_free_r>
 801c310:	2300      	movs	r3, #0
 801c312:	6363      	str	r3, [r4, #52]	@ 0x34
 801c314:	e00d      	b.n	801c332 <__sflush_r+0xae>
 801c316:	2301      	movs	r3, #1
 801c318:	4628      	mov	r0, r5
 801c31a:	47b0      	blx	r6
 801c31c:	4602      	mov	r2, r0
 801c31e:	1c50      	adds	r0, r2, #1
 801c320:	d1c9      	bne.n	801c2b6 <__sflush_r+0x32>
 801c322:	682b      	ldr	r3, [r5, #0]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d0c6      	beq.n	801c2b6 <__sflush_r+0x32>
 801c328:	2b1d      	cmp	r3, #29
 801c32a:	d001      	beq.n	801c330 <__sflush_r+0xac>
 801c32c:	2b16      	cmp	r3, #22
 801c32e:	d11e      	bne.n	801c36e <__sflush_r+0xea>
 801c330:	602f      	str	r7, [r5, #0]
 801c332:	2000      	movs	r0, #0
 801c334:	e022      	b.n	801c37c <__sflush_r+0xf8>
 801c336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c33a:	b21b      	sxth	r3, r3
 801c33c:	e01b      	b.n	801c376 <__sflush_r+0xf2>
 801c33e:	690f      	ldr	r7, [r1, #16]
 801c340:	2f00      	cmp	r7, #0
 801c342:	d0f6      	beq.n	801c332 <__sflush_r+0xae>
 801c344:	0793      	lsls	r3, r2, #30
 801c346:	680e      	ldr	r6, [r1, #0]
 801c348:	bf08      	it	eq
 801c34a:	694b      	ldreq	r3, [r1, #20]
 801c34c:	600f      	str	r7, [r1, #0]
 801c34e:	bf18      	it	ne
 801c350:	2300      	movne	r3, #0
 801c352:	eba6 0807 	sub.w	r8, r6, r7
 801c356:	608b      	str	r3, [r1, #8]
 801c358:	f1b8 0f00 	cmp.w	r8, #0
 801c35c:	dde9      	ble.n	801c332 <__sflush_r+0xae>
 801c35e:	6a21      	ldr	r1, [r4, #32]
 801c360:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c362:	4643      	mov	r3, r8
 801c364:	463a      	mov	r2, r7
 801c366:	4628      	mov	r0, r5
 801c368:	47b0      	blx	r6
 801c36a:	2800      	cmp	r0, #0
 801c36c:	dc08      	bgt.n	801c380 <__sflush_r+0xfc>
 801c36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c376:	81a3      	strh	r3, [r4, #12]
 801c378:	f04f 30ff 	mov.w	r0, #4294967295
 801c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c380:	4407      	add	r7, r0
 801c382:	eba8 0800 	sub.w	r8, r8, r0
 801c386:	e7e7      	b.n	801c358 <__sflush_r+0xd4>
 801c388:	dfbffffe 	.word	0xdfbffffe

0801c38c <_fflush_r>:
 801c38c:	b538      	push	{r3, r4, r5, lr}
 801c38e:	690b      	ldr	r3, [r1, #16]
 801c390:	4605      	mov	r5, r0
 801c392:	460c      	mov	r4, r1
 801c394:	b913      	cbnz	r3, 801c39c <_fflush_r+0x10>
 801c396:	2500      	movs	r5, #0
 801c398:	4628      	mov	r0, r5
 801c39a:	bd38      	pop	{r3, r4, r5, pc}
 801c39c:	b118      	cbz	r0, 801c3a6 <_fflush_r+0x1a>
 801c39e:	6a03      	ldr	r3, [r0, #32]
 801c3a0:	b90b      	cbnz	r3, 801c3a6 <_fflush_r+0x1a>
 801c3a2:	f7fd fde1 	bl	8019f68 <__sinit>
 801c3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d0f3      	beq.n	801c396 <_fflush_r+0xa>
 801c3ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c3b0:	07d0      	lsls	r0, r2, #31
 801c3b2:	d404      	bmi.n	801c3be <_fflush_r+0x32>
 801c3b4:	0599      	lsls	r1, r3, #22
 801c3b6:	d402      	bmi.n	801c3be <_fflush_r+0x32>
 801c3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3ba:	f7fd ff0a 	bl	801a1d2 <__retarget_lock_acquire_recursive>
 801c3be:	4628      	mov	r0, r5
 801c3c0:	4621      	mov	r1, r4
 801c3c2:	f7ff ff5f 	bl	801c284 <__sflush_r>
 801c3c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c3c8:	07da      	lsls	r2, r3, #31
 801c3ca:	4605      	mov	r5, r0
 801c3cc:	d4e4      	bmi.n	801c398 <_fflush_r+0xc>
 801c3ce:	89a3      	ldrh	r3, [r4, #12]
 801c3d0:	059b      	lsls	r3, r3, #22
 801c3d2:	d4e1      	bmi.n	801c398 <_fflush_r+0xc>
 801c3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3d6:	f7fd fefd 	bl	801a1d4 <__retarget_lock_release_recursive>
 801c3da:	e7dd      	b.n	801c398 <_fflush_r+0xc>

0801c3dc <memmove>:
 801c3dc:	4288      	cmp	r0, r1
 801c3de:	b510      	push	{r4, lr}
 801c3e0:	eb01 0402 	add.w	r4, r1, r2
 801c3e4:	d902      	bls.n	801c3ec <memmove+0x10>
 801c3e6:	4284      	cmp	r4, r0
 801c3e8:	4623      	mov	r3, r4
 801c3ea:	d807      	bhi.n	801c3fc <memmove+0x20>
 801c3ec:	1e43      	subs	r3, r0, #1
 801c3ee:	42a1      	cmp	r1, r4
 801c3f0:	d008      	beq.n	801c404 <memmove+0x28>
 801c3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c3fa:	e7f8      	b.n	801c3ee <memmove+0x12>
 801c3fc:	4402      	add	r2, r0
 801c3fe:	4601      	mov	r1, r0
 801c400:	428a      	cmp	r2, r1
 801c402:	d100      	bne.n	801c406 <memmove+0x2a>
 801c404:	bd10      	pop	{r4, pc}
 801c406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c40e:	e7f7      	b.n	801c400 <memmove+0x24>

0801c410 <_sbrk_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	4d06      	ldr	r5, [pc, #24]	@ (801c42c <_sbrk_r+0x1c>)
 801c414:	2300      	movs	r3, #0
 801c416:	4604      	mov	r4, r0
 801c418:	4608      	mov	r0, r1
 801c41a:	602b      	str	r3, [r5, #0]
 801c41c:	f7e6 fd14 	bl	8002e48 <_sbrk>
 801c420:	1c43      	adds	r3, r0, #1
 801c422:	d102      	bne.n	801c42a <_sbrk_r+0x1a>
 801c424:	682b      	ldr	r3, [r5, #0]
 801c426:	b103      	cbz	r3, 801c42a <_sbrk_r+0x1a>
 801c428:	6023      	str	r3, [r4, #0]
 801c42a:	bd38      	pop	{r3, r4, r5, pc}
 801c42c:	2401ce34 	.word	0x2401ce34

0801c430 <__assert_func>:
 801c430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c432:	4614      	mov	r4, r2
 801c434:	461a      	mov	r2, r3
 801c436:	4b09      	ldr	r3, [pc, #36]	@ (801c45c <__assert_func+0x2c>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	4605      	mov	r5, r0
 801c43c:	68d8      	ldr	r0, [r3, #12]
 801c43e:	b954      	cbnz	r4, 801c456 <__assert_func+0x26>
 801c440:	4b07      	ldr	r3, [pc, #28]	@ (801c460 <__assert_func+0x30>)
 801c442:	461c      	mov	r4, r3
 801c444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c448:	9100      	str	r1, [sp, #0]
 801c44a:	462b      	mov	r3, r5
 801c44c:	4905      	ldr	r1, [pc, #20]	@ (801c464 <__assert_func+0x34>)
 801c44e:	f000 f84f 	bl	801c4f0 <fiprintf>
 801c452:	f000 f85f 	bl	801c514 <abort>
 801c456:	4b04      	ldr	r3, [pc, #16]	@ (801c468 <__assert_func+0x38>)
 801c458:	e7f4      	b.n	801c444 <__assert_func+0x14>
 801c45a:	bf00      	nop
 801c45c:	240002ac 	.word	0x240002ac
 801c460:	0801e75c 	.word	0x0801e75c
 801c464:	0801e72e 	.word	0x0801e72e
 801c468:	0801e721 	.word	0x0801e721

0801c46c <_calloc_r>:
 801c46c:	b570      	push	{r4, r5, r6, lr}
 801c46e:	fba1 5402 	umull	r5, r4, r1, r2
 801c472:	b93c      	cbnz	r4, 801c484 <_calloc_r+0x18>
 801c474:	4629      	mov	r1, r5
 801c476:	f7ff f853 	bl	801b520 <_malloc_r>
 801c47a:	4606      	mov	r6, r0
 801c47c:	b928      	cbnz	r0, 801c48a <_calloc_r+0x1e>
 801c47e:	2600      	movs	r6, #0
 801c480:	4630      	mov	r0, r6
 801c482:	bd70      	pop	{r4, r5, r6, pc}
 801c484:	220c      	movs	r2, #12
 801c486:	6002      	str	r2, [r0, #0]
 801c488:	e7f9      	b.n	801c47e <_calloc_r+0x12>
 801c48a:	462a      	mov	r2, r5
 801c48c:	4621      	mov	r1, r4
 801c48e:	f7fd fe04 	bl	801a09a <memset>
 801c492:	e7f5      	b.n	801c480 <_calloc_r+0x14>

0801c494 <_realloc_r>:
 801c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c498:	4680      	mov	r8, r0
 801c49a:	4615      	mov	r5, r2
 801c49c:	460c      	mov	r4, r1
 801c49e:	b921      	cbnz	r1, 801c4aa <_realloc_r+0x16>
 801c4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4a4:	4611      	mov	r1, r2
 801c4a6:	f7ff b83b 	b.w	801b520 <_malloc_r>
 801c4aa:	b92a      	cbnz	r2, 801c4b8 <_realloc_r+0x24>
 801c4ac:	f7fe fc8a 	bl	801adc4 <_free_r>
 801c4b0:	2400      	movs	r4, #0
 801c4b2:	4620      	mov	r0, r4
 801c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4b8:	f000 f833 	bl	801c522 <_malloc_usable_size_r>
 801c4bc:	4285      	cmp	r5, r0
 801c4be:	4606      	mov	r6, r0
 801c4c0:	d802      	bhi.n	801c4c8 <_realloc_r+0x34>
 801c4c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c4c6:	d8f4      	bhi.n	801c4b2 <_realloc_r+0x1e>
 801c4c8:	4629      	mov	r1, r5
 801c4ca:	4640      	mov	r0, r8
 801c4cc:	f7ff f828 	bl	801b520 <_malloc_r>
 801c4d0:	4607      	mov	r7, r0
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	d0ec      	beq.n	801c4b0 <_realloc_r+0x1c>
 801c4d6:	42b5      	cmp	r5, r6
 801c4d8:	462a      	mov	r2, r5
 801c4da:	4621      	mov	r1, r4
 801c4dc:	bf28      	it	cs
 801c4de:	4632      	movcs	r2, r6
 801c4e0:	f7fd fe79 	bl	801a1d6 <memcpy>
 801c4e4:	4621      	mov	r1, r4
 801c4e6:	4640      	mov	r0, r8
 801c4e8:	f7fe fc6c 	bl	801adc4 <_free_r>
 801c4ec:	463c      	mov	r4, r7
 801c4ee:	e7e0      	b.n	801c4b2 <_realloc_r+0x1e>

0801c4f0 <fiprintf>:
 801c4f0:	b40e      	push	{r1, r2, r3}
 801c4f2:	b503      	push	{r0, r1, lr}
 801c4f4:	4601      	mov	r1, r0
 801c4f6:	ab03      	add	r3, sp, #12
 801c4f8:	4805      	ldr	r0, [pc, #20]	@ (801c510 <fiprintf+0x20>)
 801c4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4fe:	6800      	ldr	r0, [r0, #0]
 801c500:	9301      	str	r3, [sp, #4]
 801c502:	f000 f83f 	bl	801c584 <_vfiprintf_r>
 801c506:	b002      	add	sp, #8
 801c508:	f85d eb04 	ldr.w	lr, [sp], #4
 801c50c:	b003      	add	sp, #12
 801c50e:	4770      	bx	lr
 801c510:	240002ac 	.word	0x240002ac

0801c514 <abort>:
 801c514:	b508      	push	{r3, lr}
 801c516:	2006      	movs	r0, #6
 801c518:	f000 fa08 	bl	801c92c <raise>
 801c51c:	2001      	movs	r0, #1
 801c51e:	f7e6 fc1b 	bl	8002d58 <_exit>

0801c522 <_malloc_usable_size_r>:
 801c522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c526:	1f18      	subs	r0, r3, #4
 801c528:	2b00      	cmp	r3, #0
 801c52a:	bfbc      	itt	lt
 801c52c:	580b      	ldrlt	r3, [r1, r0]
 801c52e:	18c0      	addlt	r0, r0, r3
 801c530:	4770      	bx	lr

0801c532 <__sfputc_r>:
 801c532:	6893      	ldr	r3, [r2, #8]
 801c534:	3b01      	subs	r3, #1
 801c536:	2b00      	cmp	r3, #0
 801c538:	b410      	push	{r4}
 801c53a:	6093      	str	r3, [r2, #8]
 801c53c:	da08      	bge.n	801c550 <__sfputc_r+0x1e>
 801c53e:	6994      	ldr	r4, [r2, #24]
 801c540:	42a3      	cmp	r3, r4
 801c542:	db01      	blt.n	801c548 <__sfputc_r+0x16>
 801c544:	290a      	cmp	r1, #10
 801c546:	d103      	bne.n	801c550 <__sfputc_r+0x1e>
 801c548:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c54c:	f000 b932 	b.w	801c7b4 <__swbuf_r>
 801c550:	6813      	ldr	r3, [r2, #0]
 801c552:	1c58      	adds	r0, r3, #1
 801c554:	6010      	str	r0, [r2, #0]
 801c556:	7019      	strb	r1, [r3, #0]
 801c558:	4608      	mov	r0, r1
 801c55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c55e:	4770      	bx	lr

0801c560 <__sfputs_r>:
 801c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c562:	4606      	mov	r6, r0
 801c564:	460f      	mov	r7, r1
 801c566:	4614      	mov	r4, r2
 801c568:	18d5      	adds	r5, r2, r3
 801c56a:	42ac      	cmp	r4, r5
 801c56c:	d101      	bne.n	801c572 <__sfputs_r+0x12>
 801c56e:	2000      	movs	r0, #0
 801c570:	e007      	b.n	801c582 <__sfputs_r+0x22>
 801c572:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c576:	463a      	mov	r2, r7
 801c578:	4630      	mov	r0, r6
 801c57a:	f7ff ffda 	bl	801c532 <__sfputc_r>
 801c57e:	1c43      	adds	r3, r0, #1
 801c580:	d1f3      	bne.n	801c56a <__sfputs_r+0xa>
 801c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c584 <_vfiprintf_r>:
 801c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c588:	460d      	mov	r5, r1
 801c58a:	b09d      	sub	sp, #116	@ 0x74
 801c58c:	4614      	mov	r4, r2
 801c58e:	4698      	mov	r8, r3
 801c590:	4606      	mov	r6, r0
 801c592:	b118      	cbz	r0, 801c59c <_vfiprintf_r+0x18>
 801c594:	6a03      	ldr	r3, [r0, #32]
 801c596:	b90b      	cbnz	r3, 801c59c <_vfiprintf_r+0x18>
 801c598:	f7fd fce6 	bl	8019f68 <__sinit>
 801c59c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c59e:	07d9      	lsls	r1, r3, #31
 801c5a0:	d405      	bmi.n	801c5ae <_vfiprintf_r+0x2a>
 801c5a2:	89ab      	ldrh	r3, [r5, #12]
 801c5a4:	059a      	lsls	r2, r3, #22
 801c5a6:	d402      	bmi.n	801c5ae <_vfiprintf_r+0x2a>
 801c5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5aa:	f7fd fe12 	bl	801a1d2 <__retarget_lock_acquire_recursive>
 801c5ae:	89ab      	ldrh	r3, [r5, #12]
 801c5b0:	071b      	lsls	r3, r3, #28
 801c5b2:	d501      	bpl.n	801c5b8 <_vfiprintf_r+0x34>
 801c5b4:	692b      	ldr	r3, [r5, #16]
 801c5b6:	b99b      	cbnz	r3, 801c5e0 <_vfiprintf_r+0x5c>
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	4630      	mov	r0, r6
 801c5bc:	f000 f938 	bl	801c830 <__swsetup_r>
 801c5c0:	b170      	cbz	r0, 801c5e0 <_vfiprintf_r+0x5c>
 801c5c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c5c4:	07dc      	lsls	r4, r3, #31
 801c5c6:	d504      	bpl.n	801c5d2 <_vfiprintf_r+0x4e>
 801c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5cc:	b01d      	add	sp, #116	@ 0x74
 801c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	0598      	lsls	r0, r3, #22
 801c5d6:	d4f7      	bmi.n	801c5c8 <_vfiprintf_r+0x44>
 801c5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5da:	f7fd fdfb 	bl	801a1d4 <__retarget_lock_release_recursive>
 801c5de:	e7f3      	b.n	801c5c8 <_vfiprintf_r+0x44>
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5e4:	2320      	movs	r3, #32
 801c5e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 801c5ee:	2330      	movs	r3, #48	@ 0x30
 801c5f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c7a0 <_vfiprintf_r+0x21c>
 801c5f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c5f8:	f04f 0901 	mov.w	r9, #1
 801c5fc:	4623      	mov	r3, r4
 801c5fe:	469a      	mov	sl, r3
 801c600:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c604:	b10a      	cbz	r2, 801c60a <_vfiprintf_r+0x86>
 801c606:	2a25      	cmp	r2, #37	@ 0x25
 801c608:	d1f9      	bne.n	801c5fe <_vfiprintf_r+0x7a>
 801c60a:	ebba 0b04 	subs.w	fp, sl, r4
 801c60e:	d00b      	beq.n	801c628 <_vfiprintf_r+0xa4>
 801c610:	465b      	mov	r3, fp
 801c612:	4622      	mov	r2, r4
 801c614:	4629      	mov	r1, r5
 801c616:	4630      	mov	r0, r6
 801c618:	f7ff ffa2 	bl	801c560 <__sfputs_r>
 801c61c:	3001      	adds	r0, #1
 801c61e:	f000 80a7 	beq.w	801c770 <_vfiprintf_r+0x1ec>
 801c622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c624:	445a      	add	r2, fp
 801c626:	9209      	str	r2, [sp, #36]	@ 0x24
 801c628:	f89a 3000 	ldrb.w	r3, [sl]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	f000 809f 	beq.w	801c770 <_vfiprintf_r+0x1ec>
 801c632:	2300      	movs	r3, #0
 801c634:	f04f 32ff 	mov.w	r2, #4294967295
 801c638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c63c:	f10a 0a01 	add.w	sl, sl, #1
 801c640:	9304      	str	r3, [sp, #16]
 801c642:	9307      	str	r3, [sp, #28]
 801c644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c648:	931a      	str	r3, [sp, #104]	@ 0x68
 801c64a:	4654      	mov	r4, sl
 801c64c:	2205      	movs	r2, #5
 801c64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c652:	4853      	ldr	r0, [pc, #332]	@ (801c7a0 <_vfiprintf_r+0x21c>)
 801c654:	f7e3 fe6c 	bl	8000330 <memchr>
 801c658:	9a04      	ldr	r2, [sp, #16]
 801c65a:	b9d8      	cbnz	r0, 801c694 <_vfiprintf_r+0x110>
 801c65c:	06d1      	lsls	r1, r2, #27
 801c65e:	bf44      	itt	mi
 801c660:	2320      	movmi	r3, #32
 801c662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c666:	0713      	lsls	r3, r2, #28
 801c668:	bf44      	itt	mi
 801c66a:	232b      	movmi	r3, #43	@ 0x2b
 801c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c670:	f89a 3000 	ldrb.w	r3, [sl]
 801c674:	2b2a      	cmp	r3, #42	@ 0x2a
 801c676:	d015      	beq.n	801c6a4 <_vfiprintf_r+0x120>
 801c678:	9a07      	ldr	r2, [sp, #28]
 801c67a:	4654      	mov	r4, sl
 801c67c:	2000      	movs	r0, #0
 801c67e:	f04f 0c0a 	mov.w	ip, #10
 801c682:	4621      	mov	r1, r4
 801c684:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c688:	3b30      	subs	r3, #48	@ 0x30
 801c68a:	2b09      	cmp	r3, #9
 801c68c:	d94b      	bls.n	801c726 <_vfiprintf_r+0x1a2>
 801c68e:	b1b0      	cbz	r0, 801c6be <_vfiprintf_r+0x13a>
 801c690:	9207      	str	r2, [sp, #28]
 801c692:	e014      	b.n	801c6be <_vfiprintf_r+0x13a>
 801c694:	eba0 0308 	sub.w	r3, r0, r8
 801c698:	fa09 f303 	lsl.w	r3, r9, r3
 801c69c:	4313      	orrs	r3, r2
 801c69e:	9304      	str	r3, [sp, #16]
 801c6a0:	46a2      	mov	sl, r4
 801c6a2:	e7d2      	b.n	801c64a <_vfiprintf_r+0xc6>
 801c6a4:	9b03      	ldr	r3, [sp, #12]
 801c6a6:	1d19      	adds	r1, r3, #4
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	9103      	str	r1, [sp, #12]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	bfbb      	ittet	lt
 801c6b0:	425b      	neglt	r3, r3
 801c6b2:	f042 0202 	orrlt.w	r2, r2, #2
 801c6b6:	9307      	strge	r3, [sp, #28]
 801c6b8:	9307      	strlt	r3, [sp, #28]
 801c6ba:	bfb8      	it	lt
 801c6bc:	9204      	strlt	r2, [sp, #16]
 801c6be:	7823      	ldrb	r3, [r4, #0]
 801c6c0:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6c2:	d10a      	bne.n	801c6da <_vfiprintf_r+0x156>
 801c6c4:	7863      	ldrb	r3, [r4, #1]
 801c6c6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6c8:	d132      	bne.n	801c730 <_vfiprintf_r+0x1ac>
 801c6ca:	9b03      	ldr	r3, [sp, #12]
 801c6cc:	1d1a      	adds	r2, r3, #4
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	9203      	str	r2, [sp, #12]
 801c6d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c6d6:	3402      	adds	r4, #2
 801c6d8:	9305      	str	r3, [sp, #20]
 801c6da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c7b0 <_vfiprintf_r+0x22c>
 801c6de:	7821      	ldrb	r1, [r4, #0]
 801c6e0:	2203      	movs	r2, #3
 801c6e2:	4650      	mov	r0, sl
 801c6e4:	f7e3 fe24 	bl	8000330 <memchr>
 801c6e8:	b138      	cbz	r0, 801c6fa <_vfiprintf_r+0x176>
 801c6ea:	9b04      	ldr	r3, [sp, #16]
 801c6ec:	eba0 000a 	sub.w	r0, r0, sl
 801c6f0:	2240      	movs	r2, #64	@ 0x40
 801c6f2:	4082      	lsls	r2, r0
 801c6f4:	4313      	orrs	r3, r2
 801c6f6:	3401      	adds	r4, #1
 801c6f8:	9304      	str	r3, [sp, #16]
 801c6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6fe:	4829      	ldr	r0, [pc, #164]	@ (801c7a4 <_vfiprintf_r+0x220>)
 801c700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c704:	2206      	movs	r2, #6
 801c706:	f7e3 fe13 	bl	8000330 <memchr>
 801c70a:	2800      	cmp	r0, #0
 801c70c:	d03f      	beq.n	801c78e <_vfiprintf_r+0x20a>
 801c70e:	4b26      	ldr	r3, [pc, #152]	@ (801c7a8 <_vfiprintf_r+0x224>)
 801c710:	bb1b      	cbnz	r3, 801c75a <_vfiprintf_r+0x1d6>
 801c712:	9b03      	ldr	r3, [sp, #12]
 801c714:	3307      	adds	r3, #7
 801c716:	f023 0307 	bic.w	r3, r3, #7
 801c71a:	3308      	adds	r3, #8
 801c71c:	9303      	str	r3, [sp, #12]
 801c71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c720:	443b      	add	r3, r7
 801c722:	9309      	str	r3, [sp, #36]	@ 0x24
 801c724:	e76a      	b.n	801c5fc <_vfiprintf_r+0x78>
 801c726:	fb0c 3202 	mla	r2, ip, r2, r3
 801c72a:	460c      	mov	r4, r1
 801c72c:	2001      	movs	r0, #1
 801c72e:	e7a8      	b.n	801c682 <_vfiprintf_r+0xfe>
 801c730:	2300      	movs	r3, #0
 801c732:	3401      	adds	r4, #1
 801c734:	9305      	str	r3, [sp, #20]
 801c736:	4619      	mov	r1, r3
 801c738:	f04f 0c0a 	mov.w	ip, #10
 801c73c:	4620      	mov	r0, r4
 801c73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c742:	3a30      	subs	r2, #48	@ 0x30
 801c744:	2a09      	cmp	r2, #9
 801c746:	d903      	bls.n	801c750 <_vfiprintf_r+0x1cc>
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d0c6      	beq.n	801c6da <_vfiprintf_r+0x156>
 801c74c:	9105      	str	r1, [sp, #20]
 801c74e:	e7c4      	b.n	801c6da <_vfiprintf_r+0x156>
 801c750:	fb0c 2101 	mla	r1, ip, r1, r2
 801c754:	4604      	mov	r4, r0
 801c756:	2301      	movs	r3, #1
 801c758:	e7f0      	b.n	801c73c <_vfiprintf_r+0x1b8>
 801c75a:	ab03      	add	r3, sp, #12
 801c75c:	9300      	str	r3, [sp, #0]
 801c75e:	462a      	mov	r2, r5
 801c760:	4b12      	ldr	r3, [pc, #72]	@ (801c7ac <_vfiprintf_r+0x228>)
 801c762:	a904      	add	r1, sp, #16
 801c764:	4630      	mov	r0, r6
 801c766:	f7fc ffcb 	bl	8019700 <_printf_float>
 801c76a:	4607      	mov	r7, r0
 801c76c:	1c78      	adds	r0, r7, #1
 801c76e:	d1d6      	bne.n	801c71e <_vfiprintf_r+0x19a>
 801c770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c772:	07d9      	lsls	r1, r3, #31
 801c774:	d405      	bmi.n	801c782 <_vfiprintf_r+0x1fe>
 801c776:	89ab      	ldrh	r3, [r5, #12]
 801c778:	059a      	lsls	r2, r3, #22
 801c77a:	d402      	bmi.n	801c782 <_vfiprintf_r+0x1fe>
 801c77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c77e:	f7fd fd29 	bl	801a1d4 <__retarget_lock_release_recursive>
 801c782:	89ab      	ldrh	r3, [r5, #12]
 801c784:	065b      	lsls	r3, r3, #25
 801c786:	f53f af1f 	bmi.w	801c5c8 <_vfiprintf_r+0x44>
 801c78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c78c:	e71e      	b.n	801c5cc <_vfiprintf_r+0x48>
 801c78e:	ab03      	add	r3, sp, #12
 801c790:	9300      	str	r3, [sp, #0]
 801c792:	462a      	mov	r2, r5
 801c794:	4b05      	ldr	r3, [pc, #20]	@ (801c7ac <_vfiprintf_r+0x228>)
 801c796:	a904      	add	r1, sp, #16
 801c798:	4630      	mov	r0, r6
 801c79a:	f7fd fa39 	bl	8019c10 <_printf_i>
 801c79e:	e7e4      	b.n	801c76a <_vfiprintf_r+0x1e6>
 801c7a0:	0801e710 	.word	0x0801e710
 801c7a4:	0801e71a 	.word	0x0801e71a
 801c7a8:	08019701 	.word	0x08019701
 801c7ac:	0801c561 	.word	0x0801c561
 801c7b0:	0801e716 	.word	0x0801e716

0801c7b4 <__swbuf_r>:
 801c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7b6:	460e      	mov	r6, r1
 801c7b8:	4614      	mov	r4, r2
 801c7ba:	4605      	mov	r5, r0
 801c7bc:	b118      	cbz	r0, 801c7c6 <__swbuf_r+0x12>
 801c7be:	6a03      	ldr	r3, [r0, #32]
 801c7c0:	b90b      	cbnz	r3, 801c7c6 <__swbuf_r+0x12>
 801c7c2:	f7fd fbd1 	bl	8019f68 <__sinit>
 801c7c6:	69a3      	ldr	r3, [r4, #24]
 801c7c8:	60a3      	str	r3, [r4, #8]
 801c7ca:	89a3      	ldrh	r3, [r4, #12]
 801c7cc:	071a      	lsls	r2, r3, #28
 801c7ce:	d501      	bpl.n	801c7d4 <__swbuf_r+0x20>
 801c7d0:	6923      	ldr	r3, [r4, #16]
 801c7d2:	b943      	cbnz	r3, 801c7e6 <__swbuf_r+0x32>
 801c7d4:	4621      	mov	r1, r4
 801c7d6:	4628      	mov	r0, r5
 801c7d8:	f000 f82a 	bl	801c830 <__swsetup_r>
 801c7dc:	b118      	cbz	r0, 801c7e6 <__swbuf_r+0x32>
 801c7de:	f04f 37ff 	mov.w	r7, #4294967295
 801c7e2:	4638      	mov	r0, r7
 801c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7e6:	6823      	ldr	r3, [r4, #0]
 801c7e8:	6922      	ldr	r2, [r4, #16]
 801c7ea:	1a98      	subs	r0, r3, r2
 801c7ec:	6963      	ldr	r3, [r4, #20]
 801c7ee:	b2f6      	uxtb	r6, r6
 801c7f0:	4283      	cmp	r3, r0
 801c7f2:	4637      	mov	r7, r6
 801c7f4:	dc05      	bgt.n	801c802 <__swbuf_r+0x4e>
 801c7f6:	4621      	mov	r1, r4
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f7ff fdc7 	bl	801c38c <_fflush_r>
 801c7fe:	2800      	cmp	r0, #0
 801c800:	d1ed      	bne.n	801c7de <__swbuf_r+0x2a>
 801c802:	68a3      	ldr	r3, [r4, #8]
 801c804:	3b01      	subs	r3, #1
 801c806:	60a3      	str	r3, [r4, #8]
 801c808:	6823      	ldr	r3, [r4, #0]
 801c80a:	1c5a      	adds	r2, r3, #1
 801c80c:	6022      	str	r2, [r4, #0]
 801c80e:	701e      	strb	r6, [r3, #0]
 801c810:	6962      	ldr	r2, [r4, #20]
 801c812:	1c43      	adds	r3, r0, #1
 801c814:	429a      	cmp	r2, r3
 801c816:	d004      	beq.n	801c822 <__swbuf_r+0x6e>
 801c818:	89a3      	ldrh	r3, [r4, #12]
 801c81a:	07db      	lsls	r3, r3, #31
 801c81c:	d5e1      	bpl.n	801c7e2 <__swbuf_r+0x2e>
 801c81e:	2e0a      	cmp	r6, #10
 801c820:	d1df      	bne.n	801c7e2 <__swbuf_r+0x2e>
 801c822:	4621      	mov	r1, r4
 801c824:	4628      	mov	r0, r5
 801c826:	f7ff fdb1 	bl	801c38c <_fflush_r>
 801c82a:	2800      	cmp	r0, #0
 801c82c:	d0d9      	beq.n	801c7e2 <__swbuf_r+0x2e>
 801c82e:	e7d6      	b.n	801c7de <__swbuf_r+0x2a>

0801c830 <__swsetup_r>:
 801c830:	b538      	push	{r3, r4, r5, lr}
 801c832:	4b29      	ldr	r3, [pc, #164]	@ (801c8d8 <__swsetup_r+0xa8>)
 801c834:	4605      	mov	r5, r0
 801c836:	6818      	ldr	r0, [r3, #0]
 801c838:	460c      	mov	r4, r1
 801c83a:	b118      	cbz	r0, 801c844 <__swsetup_r+0x14>
 801c83c:	6a03      	ldr	r3, [r0, #32]
 801c83e:	b90b      	cbnz	r3, 801c844 <__swsetup_r+0x14>
 801c840:	f7fd fb92 	bl	8019f68 <__sinit>
 801c844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c848:	0719      	lsls	r1, r3, #28
 801c84a:	d422      	bmi.n	801c892 <__swsetup_r+0x62>
 801c84c:	06da      	lsls	r2, r3, #27
 801c84e:	d407      	bmi.n	801c860 <__swsetup_r+0x30>
 801c850:	2209      	movs	r2, #9
 801c852:	602a      	str	r2, [r5, #0]
 801c854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c858:	81a3      	strh	r3, [r4, #12]
 801c85a:	f04f 30ff 	mov.w	r0, #4294967295
 801c85e:	e033      	b.n	801c8c8 <__swsetup_r+0x98>
 801c860:	0758      	lsls	r0, r3, #29
 801c862:	d512      	bpl.n	801c88a <__swsetup_r+0x5a>
 801c864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c866:	b141      	cbz	r1, 801c87a <__swsetup_r+0x4a>
 801c868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c86c:	4299      	cmp	r1, r3
 801c86e:	d002      	beq.n	801c876 <__swsetup_r+0x46>
 801c870:	4628      	mov	r0, r5
 801c872:	f7fe faa7 	bl	801adc4 <_free_r>
 801c876:	2300      	movs	r3, #0
 801c878:	6363      	str	r3, [r4, #52]	@ 0x34
 801c87a:	89a3      	ldrh	r3, [r4, #12]
 801c87c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c880:	81a3      	strh	r3, [r4, #12]
 801c882:	2300      	movs	r3, #0
 801c884:	6063      	str	r3, [r4, #4]
 801c886:	6923      	ldr	r3, [r4, #16]
 801c888:	6023      	str	r3, [r4, #0]
 801c88a:	89a3      	ldrh	r3, [r4, #12]
 801c88c:	f043 0308 	orr.w	r3, r3, #8
 801c890:	81a3      	strh	r3, [r4, #12]
 801c892:	6923      	ldr	r3, [r4, #16]
 801c894:	b94b      	cbnz	r3, 801c8aa <__swsetup_r+0x7a>
 801c896:	89a3      	ldrh	r3, [r4, #12]
 801c898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c89c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c8a0:	d003      	beq.n	801c8aa <__swsetup_r+0x7a>
 801c8a2:	4621      	mov	r1, r4
 801c8a4:	4628      	mov	r0, r5
 801c8a6:	f000 f883 	bl	801c9b0 <__smakebuf_r>
 801c8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8ae:	f013 0201 	ands.w	r2, r3, #1
 801c8b2:	d00a      	beq.n	801c8ca <__swsetup_r+0x9a>
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	60a2      	str	r2, [r4, #8]
 801c8b8:	6962      	ldr	r2, [r4, #20]
 801c8ba:	4252      	negs	r2, r2
 801c8bc:	61a2      	str	r2, [r4, #24]
 801c8be:	6922      	ldr	r2, [r4, #16]
 801c8c0:	b942      	cbnz	r2, 801c8d4 <__swsetup_r+0xa4>
 801c8c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c8c6:	d1c5      	bne.n	801c854 <__swsetup_r+0x24>
 801c8c8:	bd38      	pop	{r3, r4, r5, pc}
 801c8ca:	0799      	lsls	r1, r3, #30
 801c8cc:	bf58      	it	pl
 801c8ce:	6962      	ldrpl	r2, [r4, #20]
 801c8d0:	60a2      	str	r2, [r4, #8]
 801c8d2:	e7f4      	b.n	801c8be <__swsetup_r+0x8e>
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	e7f7      	b.n	801c8c8 <__swsetup_r+0x98>
 801c8d8:	240002ac 	.word	0x240002ac

0801c8dc <_raise_r>:
 801c8dc:	291f      	cmp	r1, #31
 801c8de:	b538      	push	{r3, r4, r5, lr}
 801c8e0:	4605      	mov	r5, r0
 801c8e2:	460c      	mov	r4, r1
 801c8e4:	d904      	bls.n	801c8f0 <_raise_r+0x14>
 801c8e6:	2316      	movs	r3, #22
 801c8e8:	6003      	str	r3, [r0, #0]
 801c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c8ee:	bd38      	pop	{r3, r4, r5, pc}
 801c8f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c8f2:	b112      	cbz	r2, 801c8fa <_raise_r+0x1e>
 801c8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c8f8:	b94b      	cbnz	r3, 801c90e <_raise_r+0x32>
 801c8fa:	4628      	mov	r0, r5
 801c8fc:	f000 f830 	bl	801c960 <_getpid_r>
 801c900:	4622      	mov	r2, r4
 801c902:	4601      	mov	r1, r0
 801c904:	4628      	mov	r0, r5
 801c906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c90a:	f000 b817 	b.w	801c93c <_kill_r>
 801c90e:	2b01      	cmp	r3, #1
 801c910:	d00a      	beq.n	801c928 <_raise_r+0x4c>
 801c912:	1c59      	adds	r1, r3, #1
 801c914:	d103      	bne.n	801c91e <_raise_r+0x42>
 801c916:	2316      	movs	r3, #22
 801c918:	6003      	str	r3, [r0, #0]
 801c91a:	2001      	movs	r0, #1
 801c91c:	e7e7      	b.n	801c8ee <_raise_r+0x12>
 801c91e:	2100      	movs	r1, #0
 801c920:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c924:	4620      	mov	r0, r4
 801c926:	4798      	blx	r3
 801c928:	2000      	movs	r0, #0
 801c92a:	e7e0      	b.n	801c8ee <_raise_r+0x12>

0801c92c <raise>:
 801c92c:	4b02      	ldr	r3, [pc, #8]	@ (801c938 <raise+0xc>)
 801c92e:	4601      	mov	r1, r0
 801c930:	6818      	ldr	r0, [r3, #0]
 801c932:	f7ff bfd3 	b.w	801c8dc <_raise_r>
 801c936:	bf00      	nop
 801c938:	240002ac 	.word	0x240002ac

0801c93c <_kill_r>:
 801c93c:	b538      	push	{r3, r4, r5, lr}
 801c93e:	4d07      	ldr	r5, [pc, #28]	@ (801c95c <_kill_r+0x20>)
 801c940:	2300      	movs	r3, #0
 801c942:	4604      	mov	r4, r0
 801c944:	4608      	mov	r0, r1
 801c946:	4611      	mov	r1, r2
 801c948:	602b      	str	r3, [r5, #0]
 801c94a:	f7e6 f9f5 	bl	8002d38 <_kill>
 801c94e:	1c43      	adds	r3, r0, #1
 801c950:	d102      	bne.n	801c958 <_kill_r+0x1c>
 801c952:	682b      	ldr	r3, [r5, #0]
 801c954:	b103      	cbz	r3, 801c958 <_kill_r+0x1c>
 801c956:	6023      	str	r3, [r4, #0]
 801c958:	bd38      	pop	{r3, r4, r5, pc}
 801c95a:	bf00      	nop
 801c95c:	2401ce34 	.word	0x2401ce34

0801c960 <_getpid_r>:
 801c960:	f7e6 b9e2 	b.w	8002d28 <_getpid>

0801c964 <__swhatbuf_r>:
 801c964:	b570      	push	{r4, r5, r6, lr}
 801c966:	460c      	mov	r4, r1
 801c968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c96c:	2900      	cmp	r1, #0
 801c96e:	b096      	sub	sp, #88	@ 0x58
 801c970:	4615      	mov	r5, r2
 801c972:	461e      	mov	r6, r3
 801c974:	da0d      	bge.n	801c992 <__swhatbuf_r+0x2e>
 801c976:	89a3      	ldrh	r3, [r4, #12]
 801c978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c97c:	f04f 0100 	mov.w	r1, #0
 801c980:	bf14      	ite	ne
 801c982:	2340      	movne	r3, #64	@ 0x40
 801c984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c988:	2000      	movs	r0, #0
 801c98a:	6031      	str	r1, [r6, #0]
 801c98c:	602b      	str	r3, [r5, #0]
 801c98e:	b016      	add	sp, #88	@ 0x58
 801c990:	bd70      	pop	{r4, r5, r6, pc}
 801c992:	466a      	mov	r2, sp
 801c994:	f000 f848 	bl	801ca28 <_fstat_r>
 801c998:	2800      	cmp	r0, #0
 801c99a:	dbec      	blt.n	801c976 <__swhatbuf_r+0x12>
 801c99c:	9901      	ldr	r1, [sp, #4]
 801c99e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c9a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c9a6:	4259      	negs	r1, r3
 801c9a8:	4159      	adcs	r1, r3
 801c9aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c9ae:	e7eb      	b.n	801c988 <__swhatbuf_r+0x24>

0801c9b0 <__smakebuf_r>:
 801c9b0:	898b      	ldrh	r3, [r1, #12]
 801c9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9b4:	079d      	lsls	r5, r3, #30
 801c9b6:	4606      	mov	r6, r0
 801c9b8:	460c      	mov	r4, r1
 801c9ba:	d507      	bpl.n	801c9cc <__smakebuf_r+0x1c>
 801c9bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c9c0:	6023      	str	r3, [r4, #0]
 801c9c2:	6123      	str	r3, [r4, #16]
 801c9c4:	2301      	movs	r3, #1
 801c9c6:	6163      	str	r3, [r4, #20]
 801c9c8:	b003      	add	sp, #12
 801c9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9cc:	ab01      	add	r3, sp, #4
 801c9ce:	466a      	mov	r2, sp
 801c9d0:	f7ff ffc8 	bl	801c964 <__swhatbuf_r>
 801c9d4:	9f00      	ldr	r7, [sp, #0]
 801c9d6:	4605      	mov	r5, r0
 801c9d8:	4639      	mov	r1, r7
 801c9da:	4630      	mov	r0, r6
 801c9dc:	f7fe fda0 	bl	801b520 <_malloc_r>
 801c9e0:	b948      	cbnz	r0, 801c9f6 <__smakebuf_r+0x46>
 801c9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9e6:	059a      	lsls	r2, r3, #22
 801c9e8:	d4ee      	bmi.n	801c9c8 <__smakebuf_r+0x18>
 801c9ea:	f023 0303 	bic.w	r3, r3, #3
 801c9ee:	f043 0302 	orr.w	r3, r3, #2
 801c9f2:	81a3      	strh	r3, [r4, #12]
 801c9f4:	e7e2      	b.n	801c9bc <__smakebuf_r+0xc>
 801c9f6:	89a3      	ldrh	r3, [r4, #12]
 801c9f8:	6020      	str	r0, [r4, #0]
 801c9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c9fe:	81a3      	strh	r3, [r4, #12]
 801ca00:	9b01      	ldr	r3, [sp, #4]
 801ca02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ca06:	b15b      	cbz	r3, 801ca20 <__smakebuf_r+0x70>
 801ca08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca0c:	4630      	mov	r0, r6
 801ca0e:	f000 f81d 	bl	801ca4c <_isatty_r>
 801ca12:	b128      	cbz	r0, 801ca20 <__smakebuf_r+0x70>
 801ca14:	89a3      	ldrh	r3, [r4, #12]
 801ca16:	f023 0303 	bic.w	r3, r3, #3
 801ca1a:	f043 0301 	orr.w	r3, r3, #1
 801ca1e:	81a3      	strh	r3, [r4, #12]
 801ca20:	89a3      	ldrh	r3, [r4, #12]
 801ca22:	431d      	orrs	r5, r3
 801ca24:	81a5      	strh	r5, [r4, #12]
 801ca26:	e7cf      	b.n	801c9c8 <__smakebuf_r+0x18>

0801ca28 <_fstat_r>:
 801ca28:	b538      	push	{r3, r4, r5, lr}
 801ca2a:	4d07      	ldr	r5, [pc, #28]	@ (801ca48 <_fstat_r+0x20>)
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	4604      	mov	r4, r0
 801ca30:	4608      	mov	r0, r1
 801ca32:	4611      	mov	r1, r2
 801ca34:	602b      	str	r3, [r5, #0]
 801ca36:	f7e6 f9df 	bl	8002df8 <_fstat>
 801ca3a:	1c43      	adds	r3, r0, #1
 801ca3c:	d102      	bne.n	801ca44 <_fstat_r+0x1c>
 801ca3e:	682b      	ldr	r3, [r5, #0]
 801ca40:	b103      	cbz	r3, 801ca44 <_fstat_r+0x1c>
 801ca42:	6023      	str	r3, [r4, #0]
 801ca44:	bd38      	pop	{r3, r4, r5, pc}
 801ca46:	bf00      	nop
 801ca48:	2401ce34 	.word	0x2401ce34

0801ca4c <_isatty_r>:
 801ca4c:	b538      	push	{r3, r4, r5, lr}
 801ca4e:	4d06      	ldr	r5, [pc, #24]	@ (801ca68 <_isatty_r+0x1c>)
 801ca50:	2300      	movs	r3, #0
 801ca52:	4604      	mov	r4, r0
 801ca54:	4608      	mov	r0, r1
 801ca56:	602b      	str	r3, [r5, #0]
 801ca58:	f7e6 f9de 	bl	8002e18 <_isatty>
 801ca5c:	1c43      	adds	r3, r0, #1
 801ca5e:	d102      	bne.n	801ca66 <_isatty_r+0x1a>
 801ca60:	682b      	ldr	r3, [r5, #0]
 801ca62:	b103      	cbz	r3, 801ca66 <_isatty_r+0x1a>
 801ca64:	6023      	str	r3, [r4, #0]
 801ca66:	bd38      	pop	{r3, r4, r5, pc}
 801ca68:	2401ce34 	.word	0x2401ce34
 801ca6c:	00000000 	.word	0x00000000

0801ca70 <sin>:
 801ca70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca72:	eeb0 7b40 	vmov.f64	d7, d0
 801ca76:	ee17 3a90 	vmov	r3, s15
 801ca7a:	4a21      	ldr	r2, [pc, #132]	@ (801cb00 <sin+0x90>)
 801ca7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ca80:	4293      	cmp	r3, r2
 801ca82:	d807      	bhi.n	801ca94 <sin+0x24>
 801ca84:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801caf8 <sin+0x88>
 801ca88:	2000      	movs	r0, #0
 801ca8a:	b005      	add	sp, #20
 801ca8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca90:	f000 b986 	b.w	801cda0 <__kernel_sin>
 801ca94:	4a1b      	ldr	r2, [pc, #108]	@ (801cb04 <sin+0x94>)
 801ca96:	4293      	cmp	r3, r2
 801ca98:	d904      	bls.n	801caa4 <sin+0x34>
 801ca9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801ca9e:	b005      	add	sp, #20
 801caa0:	f85d fb04 	ldr.w	pc, [sp], #4
 801caa4:	4668      	mov	r0, sp
 801caa6:	f000 f9d3 	bl	801ce50 <__ieee754_rem_pio2>
 801caaa:	f000 0003 	and.w	r0, r0, #3
 801caae:	2801      	cmp	r0, #1
 801cab0:	d00a      	beq.n	801cac8 <sin+0x58>
 801cab2:	2802      	cmp	r0, #2
 801cab4:	d00f      	beq.n	801cad6 <sin+0x66>
 801cab6:	b9c0      	cbnz	r0, 801caea <sin+0x7a>
 801cab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cabc:	ed9d 0b00 	vldr	d0, [sp]
 801cac0:	2001      	movs	r0, #1
 801cac2:	f000 f96d 	bl	801cda0 <__kernel_sin>
 801cac6:	e7ea      	b.n	801ca9e <sin+0x2e>
 801cac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cacc:	ed9d 0b00 	vldr	d0, [sp]
 801cad0:	f000 f8fe 	bl	801ccd0 <__kernel_cos>
 801cad4:	e7e3      	b.n	801ca9e <sin+0x2e>
 801cad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cada:	ed9d 0b00 	vldr	d0, [sp]
 801cade:	2001      	movs	r0, #1
 801cae0:	f000 f95e 	bl	801cda0 <__kernel_sin>
 801cae4:	eeb1 0b40 	vneg.f64	d0, d0
 801cae8:	e7d9      	b.n	801ca9e <sin+0x2e>
 801caea:	ed9d 1b02 	vldr	d1, [sp, #8]
 801caee:	ed9d 0b00 	vldr	d0, [sp]
 801caf2:	f000 f8ed 	bl	801ccd0 <__kernel_cos>
 801caf6:	e7f5      	b.n	801cae4 <sin+0x74>
	...
 801cb00:	3fe921fb 	.word	0x3fe921fb
 801cb04:	7fefffff 	.word	0x7fefffff

0801cb08 <sinf_poly>:
 801cb08:	07cb      	lsls	r3, r1, #31
 801cb0a:	d412      	bmi.n	801cb32 <sinf_poly+0x2a>
 801cb0c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801cb10:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801cb14:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801cb18:	eea6 7b01 	vfma.f64	d7, d6, d1
 801cb1c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801cb20:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb24:	eea6 0b05 	vfma.f64	d0, d6, d5
 801cb28:	eea7 0b01 	vfma.f64	d0, d7, d1
 801cb2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cb30:	4770      	bx	lr
 801cb32:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801cb36:	ee21 5b01 	vmul.f64	d5, d1, d1
 801cb3a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801cb3e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801cb42:	eea1 7b06 	vfma.f64	d7, d1, d6
 801cb46:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801cb4a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801cb4e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801cb52:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb56:	eea5 0b06 	vfma.f64	d0, d5, d6
 801cb5a:	e7e5      	b.n	801cb28 <sinf_poly+0x20>
 801cb5c:	0000      	movs	r0, r0
	...

0801cb60 <sinf>:
 801cb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb62:	ee10 4a10 	vmov	r4, s0
 801cb66:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801cb6a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801cb6e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cb72:	eef0 7a40 	vmov.f32	s15, s0
 801cb76:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801cb7a:	d218      	bcs.n	801cbae <sinf+0x4e>
 801cb7c:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cb80:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801cb84:	d20a      	bcs.n	801cb9c <sinf+0x3c>
 801cb86:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801cb8a:	d103      	bne.n	801cb94 <sinf+0x34>
 801cb8c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801cb90:	ed8d 1a01 	vstr	s2, [sp, #4]
 801cb94:	eeb0 0a67 	vmov.f32	s0, s15
 801cb98:	b003      	add	sp, #12
 801cb9a:	bd30      	pop	{r4, r5, pc}
 801cb9c:	483a      	ldr	r0, [pc, #232]	@ (801cc88 <sinf+0x128>)
 801cb9e:	eeb0 0b46 	vmov.f64	d0, d6
 801cba2:	2100      	movs	r1, #0
 801cba4:	b003      	add	sp, #12
 801cba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbaa:	f7ff bfad 	b.w	801cb08 <sinf_poly>
 801cbae:	f240 422e 	movw	r2, #1070	@ 0x42e
 801cbb2:	4293      	cmp	r3, r2
 801cbb4:	d824      	bhi.n	801cc00 <sinf+0xa0>
 801cbb6:	4b34      	ldr	r3, [pc, #208]	@ (801cc88 <sinf+0x128>)
 801cbb8:	ed93 7b08 	vldr	d7, [r3, #32]
 801cbbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cbc0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cbc4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cbc8:	ee17 1a90 	vmov	r1, s15
 801cbcc:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801cbd0:	1609      	asrs	r1, r1, #24
 801cbd2:	ee07 1a90 	vmov	s15, r1
 801cbd6:	f001 0203 	and.w	r2, r1, #3
 801cbda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cbde:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cbe2:	ed92 0b00 	vldr	d0, [r2]
 801cbe6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801cbea:	f011 0f02 	tst.w	r1, #2
 801cbee:	eea5 6b47 	vfms.f64	d6, d5, d7
 801cbf2:	bf08      	it	eq
 801cbf4:	4618      	moveq	r0, r3
 801cbf6:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cbfa:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cbfe:	e7d1      	b.n	801cba4 <sinf+0x44>
 801cc00:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801cc04:	d237      	bcs.n	801cc76 <sinf+0x116>
 801cc06:	4921      	ldr	r1, [pc, #132]	@ (801cc8c <sinf+0x12c>)
 801cc08:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801cc0c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801cc10:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801cc14:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801cc18:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801cc1c:	6a10      	ldr	r0, [r2, #32]
 801cc1e:	6912      	ldr	r2, [r2, #16]
 801cc20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801cc24:	40ab      	lsls	r3, r5
 801cc26:	fba0 5003 	umull	r5, r0, r0, r3
 801cc2a:	4359      	muls	r1, r3
 801cc2c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801cc30:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801cc34:	0f9d      	lsrs	r5, r3, #30
 801cc36:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801cc3a:	1ac9      	subs	r1, r1, r3
 801cc3c:	f7e3 fd5e 	bl	80006fc <__aeabi_l2d>
 801cc40:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801cc44:	4b10      	ldr	r3, [pc, #64]	@ (801cc88 <sinf+0x128>)
 801cc46:	f004 0203 	and.w	r2, r4, #3
 801cc4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cc4e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801cc80 <sinf+0x120>
 801cc52:	ed92 0b00 	vldr	d0, [r2]
 801cc56:	ec41 0b17 	vmov	d7, r0, r1
 801cc5a:	f014 0f02 	tst.w	r4, #2
 801cc5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc62:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cc66:	4629      	mov	r1, r5
 801cc68:	bf08      	it	eq
 801cc6a:	4618      	moveq	r0, r3
 801cc6c:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cc70:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cc74:	e796      	b.n	801cba4 <sinf+0x44>
 801cc76:	b003      	add	sp, #12
 801cc78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc7c:	f000 b816 	b.w	801ccac <__math_invalidf>
 801cc80:	54442d18 	.word	0x54442d18
 801cc84:	3c1921fb 	.word	0x3c1921fb
 801cc88:	0801e7c0 	.word	0x0801e7c0
 801cc8c:	0801e760 	.word	0x0801e760

0801cc90 <with_errnof>:
 801cc90:	b510      	push	{r4, lr}
 801cc92:	ed2d 8b02 	vpush	{d8}
 801cc96:	eeb0 8a40 	vmov.f32	s16, s0
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	f7fd fa6e 	bl	801a17c <__errno>
 801cca0:	eeb0 0a48 	vmov.f32	s0, s16
 801cca4:	ecbd 8b02 	vpop	{d8}
 801cca8:	6004      	str	r4, [r0, #0]
 801ccaa:	bd10      	pop	{r4, pc}

0801ccac <__math_invalidf>:
 801ccac:	eef0 7a40 	vmov.f32	s15, s0
 801ccb0:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ccb4:	eef4 7a67 	vcmp.f32	s15, s15
 801ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccbc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ccc0:	d602      	bvs.n	801ccc8 <__math_invalidf+0x1c>
 801ccc2:	2021      	movs	r0, #33	@ 0x21
 801ccc4:	f7ff bfe4 	b.w	801cc90 <with_errnof>
 801ccc8:	4770      	bx	lr
 801ccca:	0000      	movs	r0, r0
 801cccc:	0000      	movs	r0, r0
	...

0801ccd0 <__kernel_cos>:
 801ccd0:	eeb0 5b40 	vmov.f64	d5, d0
 801ccd4:	ee15 1a90 	vmov	r1, s11
 801ccd8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801ccdc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cce0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801cce4:	d204      	bcs.n	801ccf0 <__kernel_cos+0x20>
 801cce6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801ccea:	ee17 3a90 	vmov	r3, s15
 801ccee:	b343      	cbz	r3, 801cd42 <__kernel_cos+0x72>
 801ccf0:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ccf4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801ccf8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801cd68 <__kernel_cos+0x98>
 801ccfc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd70 <__kernel_cos+0xa0>
 801cd00:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cd04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cd78 <__kernel_cos+0xa8>
 801cd08:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd0c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd80 <__kernel_cos+0xb0>
 801cd10:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd14:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cd88 <__kernel_cos+0xb8>
 801cd18:	4b1f      	ldr	r3, [pc, #124]	@ (801cd98 <__kernel_cos+0xc8>)
 801cd1a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd1e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd90 <__kernel_cos+0xc0>
 801cd22:	4299      	cmp	r1, r3
 801cd24:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd28:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cd2c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801cd30:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd34:	eea6 1b04 	vfma.f64	d1, d6, d4
 801cd38:	d804      	bhi.n	801cd44 <__kernel_cos+0x74>
 801cd3a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801cd3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cd42:	4770      	bx	lr
 801cd44:	4b15      	ldr	r3, [pc, #84]	@ (801cd9c <__kernel_cos+0xcc>)
 801cd46:	4299      	cmp	r1, r3
 801cd48:	d809      	bhi.n	801cd5e <__kernel_cos+0x8e>
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801cd50:	ec43 2b16 	vmov	d6, r2, r3
 801cd54:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cd58:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd5c:	e7ed      	b.n	801cd3a <__kernel_cos+0x6a>
 801cd5e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801cd62:	e7f7      	b.n	801cd54 <__kernel_cos+0x84>
 801cd64:	f3af 8000 	nop.w
 801cd68:	be8838d4 	.word	0xbe8838d4
 801cd6c:	bda8fae9 	.word	0xbda8fae9
 801cd70:	bdb4b1c4 	.word	0xbdb4b1c4
 801cd74:	3e21ee9e 	.word	0x3e21ee9e
 801cd78:	809c52ad 	.word	0x809c52ad
 801cd7c:	be927e4f 	.word	0xbe927e4f
 801cd80:	19cb1590 	.word	0x19cb1590
 801cd84:	3efa01a0 	.word	0x3efa01a0
 801cd88:	16c15177 	.word	0x16c15177
 801cd8c:	bf56c16c 	.word	0xbf56c16c
 801cd90:	5555554c 	.word	0x5555554c
 801cd94:	3fa55555 	.word	0x3fa55555
 801cd98:	3fd33332 	.word	0x3fd33332
 801cd9c:	3fe90000 	.word	0x3fe90000

0801cda0 <__kernel_sin>:
 801cda0:	ee10 3a90 	vmov	r3, s1
 801cda4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cda8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cdac:	d204      	bcs.n	801cdb8 <__kernel_sin+0x18>
 801cdae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cdb2:	ee17 3a90 	vmov	r3, s15
 801cdb6:	b35b      	cbz	r3, 801ce10 <__kernel_sin+0x70>
 801cdb8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cdbc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801cdc0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801ce18 <__kernel_sin+0x78>
 801cdc4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce20 <__kernel_sin+0x80>
 801cdc8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cdcc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce28 <__kernel_sin+0x88>
 801cdd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cdd4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce30 <__kernel_sin+0x90>
 801cdd8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cddc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce38 <__kernel_sin+0x98>
 801cde0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cde4:	b930      	cbnz	r0, 801cdf4 <__kernel_sin+0x54>
 801cde6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce40 <__kernel_sin+0xa0>
 801cdea:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cdee:	eea4 0b05 	vfma.f64	d0, d4, d5
 801cdf2:	4770      	bx	lr
 801cdf4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801cdf8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801cdfc:	eea1 7b04 	vfma.f64	d7, d1, d4
 801ce00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801ce04:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ce48 <__kernel_sin+0xa8>
 801ce08:	eea5 1b07 	vfma.f64	d1, d5, d7
 801ce0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ce10:	4770      	bx	lr
 801ce12:	bf00      	nop
 801ce14:	f3af 8000 	nop.w
 801ce18:	5acfd57c 	.word	0x5acfd57c
 801ce1c:	3de5d93a 	.word	0x3de5d93a
 801ce20:	8a2b9ceb 	.word	0x8a2b9ceb
 801ce24:	be5ae5e6 	.word	0xbe5ae5e6
 801ce28:	57b1fe7d 	.word	0x57b1fe7d
 801ce2c:	3ec71de3 	.word	0x3ec71de3
 801ce30:	19c161d5 	.word	0x19c161d5
 801ce34:	bf2a01a0 	.word	0xbf2a01a0
 801ce38:	1110f8a6 	.word	0x1110f8a6
 801ce3c:	3f811111 	.word	0x3f811111
 801ce40:	55555549 	.word	0x55555549
 801ce44:	bfc55555 	.word	0xbfc55555
 801ce48:	55555549 	.word	0x55555549
 801ce4c:	3fc55555 	.word	0x3fc55555

0801ce50 <__ieee754_rem_pio2>:
 801ce50:	b570      	push	{r4, r5, r6, lr}
 801ce52:	eeb0 7b40 	vmov.f64	d7, d0
 801ce56:	ee17 5a90 	vmov	r5, s15
 801ce5a:	4b99      	ldr	r3, [pc, #612]	@ (801d0c0 <__ieee754_rem_pio2+0x270>)
 801ce5c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801ce60:	429e      	cmp	r6, r3
 801ce62:	b088      	sub	sp, #32
 801ce64:	4604      	mov	r4, r0
 801ce66:	d807      	bhi.n	801ce78 <__ieee754_rem_pio2+0x28>
 801ce68:	2200      	movs	r2, #0
 801ce6a:	2300      	movs	r3, #0
 801ce6c:	ed84 0b00 	vstr	d0, [r4]
 801ce70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ce74:	2000      	movs	r0, #0
 801ce76:	e01b      	b.n	801ceb0 <__ieee754_rem_pio2+0x60>
 801ce78:	4b92      	ldr	r3, [pc, #584]	@ (801d0c4 <__ieee754_rem_pio2+0x274>)
 801ce7a:	429e      	cmp	r6, r3
 801ce7c:	d83b      	bhi.n	801cef6 <__ieee754_rem_pio2+0xa6>
 801ce7e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801ce82:	2d00      	cmp	r5, #0
 801ce84:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d080 <__ieee754_rem_pio2+0x230>
 801ce88:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801ce8c:	dd19      	ble.n	801cec2 <__ieee754_rem_pio2+0x72>
 801ce8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ce92:	429e      	cmp	r6, r3
 801ce94:	d00e      	beq.n	801ceb4 <__ieee754_rem_pio2+0x64>
 801ce96:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d088 <__ieee754_rem_pio2+0x238>
 801ce9a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801ce9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cea2:	ed84 6b00 	vstr	d6, [r4]
 801cea6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ceaa:	ed84 7b02 	vstr	d7, [r4, #8]
 801ceae:	2001      	movs	r0, #1
 801ceb0:	b008      	add	sp, #32
 801ceb2:	bd70      	pop	{r4, r5, r6, pc}
 801ceb4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d090 <__ieee754_rem_pio2+0x240>
 801ceb8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d098 <__ieee754_rem_pio2+0x248>
 801cebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cec0:	e7eb      	b.n	801ce9a <__ieee754_rem_pio2+0x4a>
 801cec2:	429e      	cmp	r6, r3
 801cec4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801cec8:	d00e      	beq.n	801cee8 <__ieee754_rem_pio2+0x98>
 801ceca:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d088 <__ieee754_rem_pio2+0x238>
 801cece:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ced2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ced6:	ed84 6b00 	vstr	d6, [r4]
 801ceda:	ee37 7b05 	vadd.f64	d7, d7, d5
 801cede:	f04f 30ff 	mov.w	r0, #4294967295
 801cee2:	ed84 7b02 	vstr	d7, [r4, #8]
 801cee6:	e7e3      	b.n	801ceb0 <__ieee754_rem_pio2+0x60>
 801cee8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d090 <__ieee754_rem_pio2+0x240>
 801ceec:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d098 <__ieee754_rem_pio2+0x248>
 801cef0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cef4:	e7eb      	b.n	801cece <__ieee754_rem_pio2+0x7e>
 801cef6:	4b74      	ldr	r3, [pc, #464]	@ (801d0c8 <__ieee754_rem_pio2+0x278>)
 801cef8:	429e      	cmp	r6, r3
 801cefa:	d870      	bhi.n	801cfde <__ieee754_rem_pio2+0x18e>
 801cefc:	f000 f8ec 	bl	801d0d8 <fabs>
 801cf00:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cf04:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d0a0 <__ieee754_rem_pio2+0x250>
 801cf08:	eea0 7b06 	vfma.f64	d7, d0, d6
 801cf0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cf10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cf14:	ee17 0a90 	vmov	r0, s15
 801cf18:	eeb1 4b45 	vneg.f64	d4, d5
 801cf1c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d080 <__ieee754_rem_pio2+0x230>
 801cf20:	eea5 0b47 	vfms.f64	d0, d5, d7
 801cf24:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d088 <__ieee754_rem_pio2+0x238>
 801cf28:	281f      	cmp	r0, #31
 801cf2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801cf2e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cf32:	dc05      	bgt.n	801cf40 <__ieee754_rem_pio2+0xf0>
 801cf34:	4b65      	ldr	r3, [pc, #404]	@ (801d0cc <__ieee754_rem_pio2+0x27c>)
 801cf36:	1e42      	subs	r2, r0, #1
 801cf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf3c:	42b3      	cmp	r3, r6
 801cf3e:	d109      	bne.n	801cf54 <__ieee754_rem_pio2+0x104>
 801cf40:	ee16 3a90 	vmov	r3, s13
 801cf44:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cf48:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801cf4c:	2b10      	cmp	r3, #16
 801cf4e:	ea4f 5226 	mov.w	r2, r6, asr #20
 801cf52:	dc02      	bgt.n	801cf5a <__ieee754_rem_pio2+0x10a>
 801cf54:	ed84 6b00 	vstr	d6, [r4]
 801cf58:	e01a      	b.n	801cf90 <__ieee754_rem_pio2+0x140>
 801cf5a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d090 <__ieee754_rem_pio2+0x240>
 801cf5e:	eeb0 6b40 	vmov.f64	d6, d0
 801cf62:	eea4 6b03 	vfma.f64	d6, d4, d3
 801cf66:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cf6a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801cf6e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d098 <__ieee754_rem_pio2+0x248>
 801cf72:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801cf76:	ee36 3b47 	vsub.f64	d3, d6, d7
 801cf7a:	ee13 3a90 	vmov	r3, s7
 801cf7e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cf82:	1ad3      	subs	r3, r2, r3
 801cf84:	2b31      	cmp	r3, #49	@ 0x31
 801cf86:	dc17      	bgt.n	801cfb8 <__ieee754_rem_pio2+0x168>
 801cf88:	eeb0 0b46 	vmov.f64	d0, d6
 801cf8c:	ed84 3b00 	vstr	d3, [r4]
 801cf90:	ed94 6b00 	vldr	d6, [r4]
 801cf94:	2d00      	cmp	r5, #0
 801cf96:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cf9a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cf9e:	ed84 0b02 	vstr	d0, [r4, #8]
 801cfa2:	da85      	bge.n	801ceb0 <__ieee754_rem_pio2+0x60>
 801cfa4:	eeb1 6b46 	vneg.f64	d6, d6
 801cfa8:	eeb1 0b40 	vneg.f64	d0, d0
 801cfac:	ed84 6b00 	vstr	d6, [r4]
 801cfb0:	ed84 0b02 	vstr	d0, [r4, #8]
 801cfb4:	4240      	negs	r0, r0
 801cfb6:	e77b      	b.n	801ceb0 <__ieee754_rem_pio2+0x60>
 801cfb8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d0a8 <__ieee754_rem_pio2+0x258>
 801cfbc:	eeb0 0b46 	vmov.f64	d0, d6
 801cfc0:	eea4 0b07 	vfma.f64	d0, d4, d7
 801cfc4:	ee36 6b40 	vsub.f64	d6, d6, d0
 801cfc8:	eea4 6b07 	vfma.f64	d6, d4, d7
 801cfcc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d0b0 <__ieee754_rem_pio2+0x260>
 801cfd0:	eeb0 7b46 	vmov.f64	d7, d6
 801cfd4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801cfd8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cfdc:	e7ba      	b.n	801cf54 <__ieee754_rem_pio2+0x104>
 801cfde:	4b3c      	ldr	r3, [pc, #240]	@ (801d0d0 <__ieee754_rem_pio2+0x280>)
 801cfe0:	429e      	cmp	r6, r3
 801cfe2:	d906      	bls.n	801cff2 <__ieee754_rem_pio2+0x1a2>
 801cfe4:	ee30 7b40 	vsub.f64	d7, d0, d0
 801cfe8:	ed80 7b02 	vstr	d7, [r0, #8]
 801cfec:	ed80 7b00 	vstr	d7, [r0]
 801cff0:	e740      	b.n	801ce74 <__ieee754_rem_pio2+0x24>
 801cff2:	ee10 3a10 	vmov	r3, s0
 801cff6:	1532      	asrs	r2, r6, #20
 801cff8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801cffc:	4618      	mov	r0, r3
 801cffe:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d002:	ec41 0b17 	vmov	d7, r0, r1
 801d006:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d00a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d0b8 <__ieee754_rem_pio2+0x268>
 801d00e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d012:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d016:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d01a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d01e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d022:	a808      	add	r0, sp, #32
 801d024:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d028:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d02c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d030:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d034:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d038:	2103      	movs	r1, #3
 801d03a:	ed30 7b02 	vldmdb	r0!, {d7}
 801d03e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d046:	460b      	mov	r3, r1
 801d048:	f101 31ff 	add.w	r1, r1, #4294967295
 801d04c:	d0f5      	beq.n	801d03a <__ieee754_rem_pio2+0x1ea>
 801d04e:	4921      	ldr	r1, [pc, #132]	@ (801d0d4 <__ieee754_rem_pio2+0x284>)
 801d050:	9101      	str	r1, [sp, #4]
 801d052:	2102      	movs	r1, #2
 801d054:	9100      	str	r1, [sp, #0]
 801d056:	a802      	add	r0, sp, #8
 801d058:	4621      	mov	r1, r4
 801d05a:	f000 f845 	bl	801d0e8 <__kernel_rem_pio2>
 801d05e:	2d00      	cmp	r5, #0
 801d060:	f6bf af26 	bge.w	801ceb0 <__ieee754_rem_pio2+0x60>
 801d064:	ed94 7b00 	vldr	d7, [r4]
 801d068:	eeb1 7b47 	vneg.f64	d7, d7
 801d06c:	ed84 7b00 	vstr	d7, [r4]
 801d070:	ed94 7b02 	vldr	d7, [r4, #8]
 801d074:	eeb1 7b47 	vneg.f64	d7, d7
 801d078:	ed84 7b02 	vstr	d7, [r4, #8]
 801d07c:	e79a      	b.n	801cfb4 <__ieee754_rem_pio2+0x164>
 801d07e:	bf00      	nop
 801d080:	54400000 	.word	0x54400000
 801d084:	3ff921fb 	.word	0x3ff921fb
 801d088:	1a626331 	.word	0x1a626331
 801d08c:	3dd0b461 	.word	0x3dd0b461
 801d090:	1a600000 	.word	0x1a600000
 801d094:	3dd0b461 	.word	0x3dd0b461
 801d098:	2e037073 	.word	0x2e037073
 801d09c:	3ba3198a 	.word	0x3ba3198a
 801d0a0:	6dc9c883 	.word	0x6dc9c883
 801d0a4:	3fe45f30 	.word	0x3fe45f30
 801d0a8:	2e000000 	.word	0x2e000000
 801d0ac:	3ba3198a 	.word	0x3ba3198a
 801d0b0:	252049c1 	.word	0x252049c1
 801d0b4:	397b839a 	.word	0x397b839a
 801d0b8:	00000000 	.word	0x00000000
 801d0bc:	41700000 	.word	0x41700000
 801d0c0:	3fe921fb 	.word	0x3fe921fb
 801d0c4:	4002d97b 	.word	0x4002d97b
 801d0c8:	413921fb 	.word	0x413921fb
 801d0cc:	0801e8a0 	.word	0x0801e8a0
 801d0d0:	7fefffff 	.word	0x7fefffff
 801d0d4:	0801e920 	.word	0x0801e920

0801d0d8 <fabs>:
 801d0d8:	ec51 0b10 	vmov	r0, r1, d0
 801d0dc:	4602      	mov	r2, r0
 801d0de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d0e2:	ec43 2b10 	vmov	d0, r2, r3
 801d0e6:	4770      	bx	lr

0801d0e8 <__kernel_rem_pio2>:
 801d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0ec:	ed2d 8b06 	vpush	{d8-d10}
 801d0f0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d0f4:	469b      	mov	fp, r3
 801d0f6:	9001      	str	r0, [sp, #4]
 801d0f8:	4bbb      	ldr	r3, [pc, #748]	@ (801d3e8 <__kernel_rem_pio2+0x300>)
 801d0fa:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801d0fc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801d100:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801d104:	f112 0f14 	cmn.w	r2, #20
 801d108:	bfa8      	it	ge
 801d10a:	1ed3      	subge	r3, r2, #3
 801d10c:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d110:	bfb8      	it	lt
 801d112:	2300      	movlt	r3, #0
 801d114:	f06f 0517 	mvn.w	r5, #23
 801d118:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d3d0 <__kernel_rem_pio2+0x2e8>
 801d11c:	bfa4      	itt	ge
 801d11e:	2018      	movge	r0, #24
 801d120:	fb93 f3f0 	sdivge	r3, r3, r0
 801d124:	fb03 5505 	mla	r5, r3, r5, r5
 801d128:	eba3 040a 	sub.w	r4, r3, sl
 801d12c:	4415      	add	r5, r2
 801d12e:	460f      	mov	r7, r1
 801d130:	eb09 060a 	add.w	r6, r9, sl
 801d134:	a81a      	add	r0, sp, #104	@ 0x68
 801d136:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801d13a:	2200      	movs	r2, #0
 801d13c:	42b2      	cmp	r2, r6
 801d13e:	dd0e      	ble.n	801d15e <__kernel_rem_pio2+0x76>
 801d140:	aa1a      	add	r2, sp, #104	@ 0x68
 801d142:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801d146:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801d14a:	2600      	movs	r6, #0
 801d14c:	454e      	cmp	r6, r9
 801d14e:	dc25      	bgt.n	801d19c <__kernel_rem_pio2+0xb4>
 801d150:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d3d0 <__kernel_rem_pio2+0x2e8>
 801d154:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d158:	4614      	mov	r4, r2
 801d15a:	2000      	movs	r0, #0
 801d15c:	e015      	b.n	801d18a <__kernel_rem_pio2+0xa2>
 801d15e:	42d4      	cmn	r4, r2
 801d160:	d409      	bmi.n	801d176 <__kernel_rem_pio2+0x8e>
 801d162:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801d166:	ee07 1a90 	vmov	s15, r1
 801d16a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d16e:	eca0 7b02 	vstmia	r0!, {d7}
 801d172:	3201      	adds	r2, #1
 801d174:	e7e2      	b.n	801d13c <__kernel_rem_pio2+0x54>
 801d176:	eeb0 7b46 	vmov.f64	d7, d6
 801d17a:	e7f8      	b.n	801d16e <__kernel_rem_pio2+0x86>
 801d17c:	ecbc 5b02 	vldmia	ip!, {d5}
 801d180:	ed94 6b00 	vldr	d6, [r4]
 801d184:	3001      	adds	r0, #1
 801d186:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d18a:	4550      	cmp	r0, sl
 801d18c:	f1a4 0408 	sub.w	r4, r4, #8
 801d190:	ddf4      	ble.n	801d17c <__kernel_rem_pio2+0x94>
 801d192:	ecae 7b02 	vstmia	lr!, {d7}
 801d196:	3601      	adds	r6, #1
 801d198:	3208      	adds	r2, #8
 801d19a:	e7d7      	b.n	801d14c <__kernel_rem_pio2+0x64>
 801d19c:	aa06      	add	r2, sp, #24
 801d19e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d3d8 <__kernel_rem_pio2+0x2f0>
 801d1a2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d3e0 <__kernel_rem_pio2+0x2f8>
 801d1a6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801d1aa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d1ae:	9203      	str	r2, [sp, #12]
 801d1b0:	9302      	str	r3, [sp, #8]
 801d1b2:	464c      	mov	r4, r9
 801d1b4:	00e3      	lsls	r3, r4, #3
 801d1b6:	9304      	str	r3, [sp, #16]
 801d1b8:	ab92      	add	r3, sp, #584	@ 0x248
 801d1ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d1be:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d1c2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d1c4:	ab06      	add	r3, sp, #24
 801d1c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d1ca:	461e      	mov	r6, r3
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	f1a2 0208 	sub.w	r2, r2, #8
 801d1d4:	dc4a      	bgt.n	801d26c <__kernel_rem_pio2+0x184>
 801d1d6:	4628      	mov	r0, r5
 801d1d8:	9305      	str	r3, [sp, #20]
 801d1da:	f000 fa01 	bl	801d5e0 <scalbn>
 801d1de:	eeb0 8b40 	vmov.f64	d8, d0
 801d1e2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d1e6:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d1ea:	f000 fa79 	bl	801d6e0 <floor>
 801d1ee:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d1f2:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d1f6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d1fa:	2d00      	cmp	r5, #0
 801d1fc:	ee17 8a90 	vmov	r8, s15
 801d200:	9b05      	ldr	r3, [sp, #20]
 801d202:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d206:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d20a:	dd41      	ble.n	801d290 <__kernel_rem_pio2+0x1a8>
 801d20c:	1e60      	subs	r0, r4, #1
 801d20e:	aa06      	add	r2, sp, #24
 801d210:	f1c5 0c18 	rsb	ip, r5, #24
 801d214:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d218:	fa46 f20c 	asr.w	r2, r6, ip
 801d21c:	4490      	add	r8, r2
 801d21e:	fa02 f20c 	lsl.w	r2, r2, ip
 801d222:	1ab6      	subs	r6, r6, r2
 801d224:	aa06      	add	r2, sp, #24
 801d226:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d22a:	f1c5 0217 	rsb	r2, r5, #23
 801d22e:	4116      	asrs	r6, r2
 801d230:	2e00      	cmp	r6, #0
 801d232:	dd3c      	ble.n	801d2ae <__kernel_rem_pio2+0x1c6>
 801d234:	f04f 0c00 	mov.w	ip, #0
 801d238:	f108 0801 	add.w	r8, r8, #1
 801d23c:	4660      	mov	r0, ip
 801d23e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d242:	4564      	cmp	r4, ip
 801d244:	dc66      	bgt.n	801d314 <__kernel_rem_pio2+0x22c>
 801d246:	2d00      	cmp	r5, #0
 801d248:	dd03      	ble.n	801d252 <__kernel_rem_pio2+0x16a>
 801d24a:	2d01      	cmp	r5, #1
 801d24c:	d072      	beq.n	801d334 <__kernel_rem_pio2+0x24c>
 801d24e:	2d02      	cmp	r5, #2
 801d250:	d07a      	beq.n	801d348 <__kernel_rem_pio2+0x260>
 801d252:	2e02      	cmp	r6, #2
 801d254:	d12b      	bne.n	801d2ae <__kernel_rem_pio2+0x1c6>
 801d256:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d25a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d25e:	b330      	cbz	r0, 801d2ae <__kernel_rem_pio2+0x1c6>
 801d260:	4628      	mov	r0, r5
 801d262:	f000 f9bd 	bl	801d5e0 <scalbn>
 801d266:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d26a:	e020      	b.n	801d2ae <__kernel_rem_pio2+0x1c6>
 801d26c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d270:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d274:	3801      	subs	r0, #1
 801d276:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d27a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d27e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d282:	eca6 0a01 	vstmia	r6!, {s0}
 801d286:	ed92 0b00 	vldr	d0, [r2]
 801d28a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d28e:	e79e      	b.n	801d1ce <__kernel_rem_pio2+0xe6>
 801d290:	d105      	bne.n	801d29e <__kernel_rem_pio2+0x1b6>
 801d292:	1e62      	subs	r2, r4, #1
 801d294:	a906      	add	r1, sp, #24
 801d296:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d29a:	15f6      	asrs	r6, r6, #23
 801d29c:	e7c8      	b.n	801d230 <__kernel_rem_pio2+0x148>
 801d29e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d2a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2aa:	da31      	bge.n	801d310 <__kernel_rem_pio2+0x228>
 801d2ac:	2600      	movs	r6, #0
 801d2ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2b6:	f040 809b 	bne.w	801d3f0 <__kernel_rem_pio2+0x308>
 801d2ba:	1e62      	subs	r2, r4, #1
 801d2bc:	2000      	movs	r0, #0
 801d2be:	454a      	cmp	r2, r9
 801d2c0:	da49      	bge.n	801d356 <__kernel_rem_pio2+0x26e>
 801d2c2:	2800      	cmp	r0, #0
 801d2c4:	d062      	beq.n	801d38c <__kernel_rem_pio2+0x2a4>
 801d2c6:	3c01      	subs	r4, #1
 801d2c8:	ab06      	add	r3, sp, #24
 801d2ca:	3d18      	subs	r5, #24
 801d2cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d0f8      	beq.n	801d2c6 <__kernel_rem_pio2+0x1de>
 801d2d4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d2d8:	4628      	mov	r0, r5
 801d2da:	f000 f981 	bl	801d5e0 <scalbn>
 801d2de:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d3d8 <__kernel_rem_pio2+0x2f0>
 801d2e2:	1c62      	adds	r2, r4, #1
 801d2e4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d2e6:	00d3      	lsls	r3, r2, #3
 801d2e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d2ec:	4622      	mov	r2, r4
 801d2ee:	2a00      	cmp	r2, #0
 801d2f0:	f280 80a8 	bge.w	801d444 <__kernel_rem_pio2+0x35c>
 801d2f4:	4622      	mov	r2, r4
 801d2f6:	2a00      	cmp	r2, #0
 801d2f8:	f2c0 80c6 	blt.w	801d488 <__kernel_rem_pio2+0x3a0>
 801d2fc:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d2fe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d302:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d3d0 <__kernel_rem_pio2+0x2e8>
 801d306:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d3ec <__kernel_rem_pio2+0x304>
 801d30a:	2000      	movs	r0, #0
 801d30c:	1aa1      	subs	r1, r4, r2
 801d30e:	e0b0      	b.n	801d472 <__kernel_rem_pio2+0x38a>
 801d310:	2602      	movs	r6, #2
 801d312:	e78f      	b.n	801d234 <__kernel_rem_pio2+0x14c>
 801d314:	f853 2b04 	ldr.w	r2, [r3], #4
 801d318:	b948      	cbnz	r0, 801d32e <__kernel_rem_pio2+0x246>
 801d31a:	b122      	cbz	r2, 801d326 <__kernel_rem_pio2+0x23e>
 801d31c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d320:	f843 2c04 	str.w	r2, [r3, #-4]
 801d324:	2201      	movs	r2, #1
 801d326:	f10c 0c01 	add.w	ip, ip, #1
 801d32a:	4610      	mov	r0, r2
 801d32c:	e789      	b.n	801d242 <__kernel_rem_pio2+0x15a>
 801d32e:	ebae 0202 	sub.w	r2, lr, r2
 801d332:	e7f5      	b.n	801d320 <__kernel_rem_pio2+0x238>
 801d334:	1e62      	subs	r2, r4, #1
 801d336:	ab06      	add	r3, sp, #24
 801d338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d33c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d340:	a906      	add	r1, sp, #24
 801d342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d346:	e784      	b.n	801d252 <__kernel_rem_pio2+0x16a>
 801d348:	1e62      	subs	r2, r4, #1
 801d34a:	ab06      	add	r3, sp, #24
 801d34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d350:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d354:	e7f4      	b.n	801d340 <__kernel_rem_pio2+0x258>
 801d356:	ab06      	add	r3, sp, #24
 801d358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d35c:	3a01      	subs	r2, #1
 801d35e:	4318      	orrs	r0, r3
 801d360:	e7ad      	b.n	801d2be <__kernel_rem_pio2+0x1d6>
 801d362:	3301      	adds	r3, #1
 801d364:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d368:	2800      	cmp	r0, #0
 801d36a:	d0fa      	beq.n	801d362 <__kernel_rem_pio2+0x27a>
 801d36c:	9a04      	ldr	r2, [sp, #16]
 801d36e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d372:	446a      	add	r2, sp
 801d374:	eb04 000b 	add.w	r0, r4, fp
 801d378:	a91a      	add	r1, sp, #104	@ 0x68
 801d37a:	1c66      	adds	r6, r4, #1
 801d37c:	3a98      	subs	r2, #152	@ 0x98
 801d37e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d382:	4423      	add	r3, r4
 801d384:	42b3      	cmp	r3, r6
 801d386:	da04      	bge.n	801d392 <__kernel_rem_pio2+0x2aa>
 801d388:	461c      	mov	r4, r3
 801d38a:	e713      	b.n	801d1b4 <__kernel_rem_pio2+0xcc>
 801d38c:	9a03      	ldr	r2, [sp, #12]
 801d38e:	2301      	movs	r3, #1
 801d390:	e7e8      	b.n	801d364 <__kernel_rem_pio2+0x27c>
 801d392:	9902      	ldr	r1, [sp, #8]
 801d394:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d398:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d39c:	9104      	str	r1, [sp, #16]
 801d39e:	ee07 1a90 	vmov	s15, r1
 801d3a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d3a6:	2400      	movs	r4, #0
 801d3a8:	eca0 7b02 	vstmia	r0!, {d7}
 801d3ac:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d3d0 <__kernel_rem_pio2+0x2e8>
 801d3b0:	4686      	mov	lr, r0
 801d3b2:	4554      	cmp	r4, sl
 801d3b4:	dd03      	ble.n	801d3be <__kernel_rem_pio2+0x2d6>
 801d3b6:	eca2 7b02 	vstmia	r2!, {d7}
 801d3ba:	3601      	adds	r6, #1
 801d3bc:	e7e2      	b.n	801d384 <__kernel_rem_pio2+0x29c>
 801d3be:	ecbc 5b02 	vldmia	ip!, {d5}
 801d3c2:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d3c6:	3401      	adds	r4, #1
 801d3c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d3cc:	e7f1      	b.n	801d3b2 <__kernel_rem_pio2+0x2ca>
 801d3ce:	bf00      	nop
	...
 801d3dc:	3e700000 	.word	0x3e700000
 801d3e0:	00000000 	.word	0x00000000
 801d3e4:	41700000 	.word	0x41700000
 801d3e8:	0801ea68 	.word	0x0801ea68
 801d3ec:	0801ea28 	.word	0x0801ea28
 801d3f0:	4268      	negs	r0, r5
 801d3f2:	eeb0 0b48 	vmov.f64	d0, d8
 801d3f6:	f000 f8f3 	bl	801d5e0 <scalbn>
 801d3fa:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d5c8 <__kernel_rem_pio2+0x4e0>
 801d3fe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d406:	db17      	blt.n	801d438 <__kernel_rem_pio2+0x350>
 801d408:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d5d0 <__kernel_rem_pio2+0x4e8>
 801d40c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d410:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d414:	aa06      	add	r2, sp, #24
 801d416:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d41a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d41e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d422:	3518      	adds	r5, #24
 801d424:	ee10 3a10 	vmov	r3, s0
 801d428:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d42c:	ee17 3a10 	vmov	r3, s14
 801d430:	3401      	adds	r4, #1
 801d432:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d436:	e74d      	b.n	801d2d4 <__kernel_rem_pio2+0x1ec>
 801d438:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d43c:	aa06      	add	r2, sp, #24
 801d43e:	ee10 3a10 	vmov	r3, s0
 801d442:	e7f6      	b.n	801d432 <__kernel_rem_pio2+0x34a>
 801d444:	a806      	add	r0, sp, #24
 801d446:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d44a:	9001      	str	r0, [sp, #4]
 801d44c:	ee07 0a90 	vmov	s15, r0
 801d450:	3a01      	subs	r2, #1
 801d452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d456:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d45a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d45e:	ed21 7b02 	vstmdb	r1!, {d7}
 801d462:	e744      	b.n	801d2ee <__kernel_rem_pio2+0x206>
 801d464:	ecbc 5b02 	vldmia	ip!, {d5}
 801d468:	ecb5 6b02 	vldmia	r5!, {d6}
 801d46c:	3001      	adds	r0, #1
 801d46e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d472:	4548      	cmp	r0, r9
 801d474:	dc01      	bgt.n	801d47a <__kernel_rem_pio2+0x392>
 801d476:	4281      	cmp	r1, r0
 801d478:	daf4      	bge.n	801d464 <__kernel_rem_pio2+0x37c>
 801d47a:	a842      	add	r0, sp, #264	@ 0x108
 801d47c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d480:	ed81 7b00 	vstr	d7, [r1]
 801d484:	3a01      	subs	r2, #1
 801d486:	e736      	b.n	801d2f6 <__kernel_rem_pio2+0x20e>
 801d488:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d48a:	2a02      	cmp	r2, #2
 801d48c:	dc0a      	bgt.n	801d4a4 <__kernel_rem_pio2+0x3bc>
 801d48e:	2a00      	cmp	r2, #0
 801d490:	dc2d      	bgt.n	801d4ee <__kernel_rem_pio2+0x406>
 801d492:	d046      	beq.n	801d522 <__kernel_rem_pio2+0x43a>
 801d494:	f008 0007 	and.w	r0, r8, #7
 801d498:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d49c:	ecbd 8b06 	vpop	{d8-d10}
 801d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d4a6:	2a03      	cmp	r2, #3
 801d4a8:	d1f4      	bne.n	801d494 <__kernel_rem_pio2+0x3ac>
 801d4aa:	a942      	add	r1, sp, #264	@ 0x108
 801d4ac:	f1a3 0208 	sub.w	r2, r3, #8
 801d4b0:	440a      	add	r2, r1
 801d4b2:	4611      	mov	r1, r2
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	2800      	cmp	r0, #0
 801d4b8:	f1a1 0108 	sub.w	r1, r1, #8
 801d4bc:	dc52      	bgt.n	801d564 <__kernel_rem_pio2+0x47c>
 801d4be:	4621      	mov	r1, r4
 801d4c0:	2901      	cmp	r1, #1
 801d4c2:	f1a2 0208 	sub.w	r2, r2, #8
 801d4c6:	dc5d      	bgt.n	801d584 <__kernel_rem_pio2+0x49c>
 801d4c8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d5d8 <__kernel_rem_pio2+0x4f0>
 801d4cc:	aa42      	add	r2, sp, #264	@ 0x108
 801d4ce:	4413      	add	r3, r2
 801d4d0:	2c01      	cmp	r4, #1
 801d4d2:	dc67      	bgt.n	801d5a4 <__kernel_rem_pio2+0x4bc>
 801d4d4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d4d8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d4dc:	2e00      	cmp	r6, #0
 801d4de:	d167      	bne.n	801d5b0 <__kernel_rem_pio2+0x4c8>
 801d4e0:	ed87 5b00 	vstr	d5, [r7]
 801d4e4:	ed87 6b02 	vstr	d6, [r7, #8]
 801d4e8:	ed87 7b04 	vstr	d7, [r7, #16]
 801d4ec:	e7d2      	b.n	801d494 <__kernel_rem_pio2+0x3ac>
 801d4ee:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d5d8 <__kernel_rem_pio2+0x4f0>
 801d4f2:	aa42      	add	r2, sp, #264	@ 0x108
 801d4f4:	4413      	add	r3, r2
 801d4f6:	4622      	mov	r2, r4
 801d4f8:	2a00      	cmp	r2, #0
 801d4fa:	da24      	bge.n	801d546 <__kernel_rem_pio2+0x45e>
 801d4fc:	b34e      	cbz	r6, 801d552 <__kernel_rem_pio2+0x46a>
 801d4fe:	eeb1 7b46 	vneg.f64	d7, d6
 801d502:	ed87 7b00 	vstr	d7, [r7]
 801d506:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d50a:	aa44      	add	r2, sp, #272	@ 0x110
 801d50c:	2301      	movs	r3, #1
 801d50e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d512:	429c      	cmp	r4, r3
 801d514:	da20      	bge.n	801d558 <__kernel_rem_pio2+0x470>
 801d516:	b10e      	cbz	r6, 801d51c <__kernel_rem_pio2+0x434>
 801d518:	eeb1 7b47 	vneg.f64	d7, d7
 801d51c:	ed87 7b02 	vstr	d7, [r7, #8]
 801d520:	e7b8      	b.n	801d494 <__kernel_rem_pio2+0x3ac>
 801d522:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d5d8 <__kernel_rem_pio2+0x4f0>
 801d526:	aa42      	add	r2, sp, #264	@ 0x108
 801d528:	4413      	add	r3, r2
 801d52a:	2c00      	cmp	r4, #0
 801d52c:	da05      	bge.n	801d53a <__kernel_rem_pio2+0x452>
 801d52e:	b10e      	cbz	r6, 801d534 <__kernel_rem_pio2+0x44c>
 801d530:	eeb1 7b47 	vneg.f64	d7, d7
 801d534:	ed87 7b00 	vstr	d7, [r7]
 801d538:	e7ac      	b.n	801d494 <__kernel_rem_pio2+0x3ac>
 801d53a:	ed33 6b02 	vldmdb	r3!, {d6}
 801d53e:	3c01      	subs	r4, #1
 801d540:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d544:	e7f1      	b.n	801d52a <__kernel_rem_pio2+0x442>
 801d546:	ed33 7b02 	vldmdb	r3!, {d7}
 801d54a:	3a01      	subs	r2, #1
 801d54c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d550:	e7d2      	b.n	801d4f8 <__kernel_rem_pio2+0x410>
 801d552:	eeb0 7b46 	vmov.f64	d7, d6
 801d556:	e7d4      	b.n	801d502 <__kernel_rem_pio2+0x41a>
 801d558:	ecb2 6b02 	vldmia	r2!, {d6}
 801d55c:	3301      	adds	r3, #1
 801d55e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d562:	e7d6      	b.n	801d512 <__kernel_rem_pio2+0x42a>
 801d564:	ed91 7b00 	vldr	d7, [r1]
 801d568:	ed91 5b02 	vldr	d5, [r1, #8]
 801d56c:	3801      	subs	r0, #1
 801d56e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d572:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d576:	ed81 6b00 	vstr	d6, [r1]
 801d57a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d57e:	ed81 7b02 	vstr	d7, [r1, #8]
 801d582:	e798      	b.n	801d4b6 <__kernel_rem_pio2+0x3ce>
 801d584:	ed92 7b00 	vldr	d7, [r2]
 801d588:	ed92 5b02 	vldr	d5, [r2, #8]
 801d58c:	3901      	subs	r1, #1
 801d58e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d592:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d596:	ed82 6b00 	vstr	d6, [r2]
 801d59a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d59e:	ed82 7b02 	vstr	d7, [r2, #8]
 801d5a2:	e78d      	b.n	801d4c0 <__kernel_rem_pio2+0x3d8>
 801d5a4:	ed33 6b02 	vldmdb	r3!, {d6}
 801d5a8:	3c01      	subs	r4, #1
 801d5aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d5ae:	e78f      	b.n	801d4d0 <__kernel_rem_pio2+0x3e8>
 801d5b0:	eeb1 5b45 	vneg.f64	d5, d5
 801d5b4:	eeb1 6b46 	vneg.f64	d6, d6
 801d5b8:	ed87 5b00 	vstr	d5, [r7]
 801d5bc:	eeb1 7b47 	vneg.f64	d7, d7
 801d5c0:	ed87 6b02 	vstr	d6, [r7, #8]
 801d5c4:	e790      	b.n	801d4e8 <__kernel_rem_pio2+0x400>
 801d5c6:	bf00      	nop
 801d5c8:	00000000 	.word	0x00000000
 801d5cc:	41700000 	.word	0x41700000
 801d5d0:	00000000 	.word	0x00000000
 801d5d4:	3e700000 	.word	0x3e700000
	...

0801d5e0 <scalbn>:
 801d5e0:	ee10 1a90 	vmov	r1, s1
 801d5e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d5e8:	b98b      	cbnz	r3, 801d60e <scalbn+0x2e>
 801d5ea:	ee10 3a10 	vmov	r3, s0
 801d5ee:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d5f2:	4319      	orrs	r1, r3
 801d5f4:	d00a      	beq.n	801d60c <scalbn+0x2c>
 801d5f6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801d6a8 <scalbn+0xc8>
 801d5fa:	4b37      	ldr	r3, [pc, #220]	@ (801d6d8 <scalbn+0xf8>)
 801d5fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d600:	4298      	cmp	r0, r3
 801d602:	da0b      	bge.n	801d61c <scalbn+0x3c>
 801d604:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801d6b0 <scalbn+0xd0>
 801d608:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d60c:	4770      	bx	lr
 801d60e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d612:	4293      	cmp	r3, r2
 801d614:	d107      	bne.n	801d626 <scalbn+0x46>
 801d616:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d61a:	4770      	bx	lr
 801d61c:	ee10 1a90 	vmov	r1, s1
 801d620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d624:	3b36      	subs	r3, #54	@ 0x36
 801d626:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d62a:	4290      	cmp	r0, r2
 801d62c:	dd0d      	ble.n	801d64a <scalbn+0x6a>
 801d62e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801d6b8 <scalbn+0xd8>
 801d632:	ee10 3a90 	vmov	r3, s1
 801d636:	eeb0 6b47 	vmov.f64	d6, d7
 801d63a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801d6c0 <scalbn+0xe0>
 801d63e:	2b00      	cmp	r3, #0
 801d640:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d644:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d648:	4770      	bx	lr
 801d64a:	4418      	add	r0, r3
 801d64c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d650:	4298      	cmp	r0, r3
 801d652:	dcec      	bgt.n	801d62e <scalbn+0x4e>
 801d654:	2800      	cmp	r0, #0
 801d656:	dd0a      	ble.n	801d66e <scalbn+0x8e>
 801d658:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d65c:	ec53 2b10 	vmov	r2, r3, d0
 801d660:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d664:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d668:	ec43 2b10 	vmov	d0, r2, r3
 801d66c:	4770      	bx	lr
 801d66e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d672:	da09      	bge.n	801d688 <scalbn+0xa8>
 801d674:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801d6b0 <scalbn+0xd0>
 801d678:	ee10 3a90 	vmov	r3, s1
 801d67c:	eeb0 6b47 	vmov.f64	d6, d7
 801d680:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801d6c8 <scalbn+0xe8>
 801d684:	2b00      	cmp	r3, #0
 801d686:	e7db      	b.n	801d640 <scalbn+0x60>
 801d688:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d68c:	ec53 2b10 	vmov	r2, r3, d0
 801d690:	3036      	adds	r0, #54	@ 0x36
 801d692:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d696:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d69a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d6d0 <scalbn+0xf0>
 801d69e:	ec43 2b10 	vmov	d0, r2, r3
 801d6a2:	e7b1      	b.n	801d608 <scalbn+0x28>
 801d6a4:	f3af 8000 	nop.w
 801d6a8:	00000000 	.word	0x00000000
 801d6ac:	43500000 	.word	0x43500000
 801d6b0:	c2f8f359 	.word	0xc2f8f359
 801d6b4:	01a56e1f 	.word	0x01a56e1f
 801d6b8:	8800759c 	.word	0x8800759c
 801d6bc:	7e37e43c 	.word	0x7e37e43c
 801d6c0:	8800759c 	.word	0x8800759c
 801d6c4:	fe37e43c 	.word	0xfe37e43c
 801d6c8:	c2f8f359 	.word	0xc2f8f359
 801d6cc:	81a56e1f 	.word	0x81a56e1f
 801d6d0:	00000000 	.word	0x00000000
 801d6d4:	3c900000 	.word	0x3c900000
 801d6d8:	ffff3cb0 	.word	0xffff3cb0
 801d6dc:	00000000 	.word	0x00000000

0801d6e0 <floor>:
 801d6e0:	ee10 3a90 	vmov	r3, s1
 801d6e4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801d6e8:	ee10 2a10 	vmov	r2, s0
 801d6ec:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801d6f0:	2913      	cmp	r1, #19
 801d6f2:	b530      	push	{r4, r5, lr}
 801d6f4:	4615      	mov	r5, r2
 801d6f6:	dc33      	bgt.n	801d760 <floor+0x80>
 801d6f8:	2900      	cmp	r1, #0
 801d6fa:	da18      	bge.n	801d72e <floor+0x4e>
 801d6fc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d7c0 <floor+0xe0>
 801d700:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d704:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d70c:	dd0a      	ble.n	801d724 <floor+0x44>
 801d70e:	2b00      	cmp	r3, #0
 801d710:	da50      	bge.n	801d7b4 <floor+0xd4>
 801d712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d716:	4313      	orrs	r3, r2
 801d718:	2200      	movs	r2, #0
 801d71a:	4293      	cmp	r3, r2
 801d71c:	4b2a      	ldr	r3, [pc, #168]	@ (801d7c8 <floor+0xe8>)
 801d71e:	bf08      	it	eq
 801d720:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d724:	4619      	mov	r1, r3
 801d726:	4610      	mov	r0, r2
 801d728:	ec41 0b10 	vmov	d0, r0, r1
 801d72c:	e01f      	b.n	801d76e <floor+0x8e>
 801d72e:	4827      	ldr	r0, [pc, #156]	@ (801d7cc <floor+0xec>)
 801d730:	4108      	asrs	r0, r1
 801d732:	ea03 0400 	and.w	r4, r3, r0
 801d736:	4314      	orrs	r4, r2
 801d738:	d019      	beq.n	801d76e <floor+0x8e>
 801d73a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d7c0 <floor+0xe0>
 801d73e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d742:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d74a:	ddeb      	ble.n	801d724 <floor+0x44>
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	bfbe      	ittt	lt
 801d750:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d754:	410a      	asrlt	r2, r1
 801d756:	189b      	addlt	r3, r3, r2
 801d758:	ea23 0300 	bic.w	r3, r3, r0
 801d75c:	2200      	movs	r2, #0
 801d75e:	e7e1      	b.n	801d724 <floor+0x44>
 801d760:	2933      	cmp	r1, #51	@ 0x33
 801d762:	dd05      	ble.n	801d770 <floor+0x90>
 801d764:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d768:	d101      	bne.n	801d76e <floor+0x8e>
 801d76a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d76e:	bd30      	pop	{r4, r5, pc}
 801d770:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d774:	f04f 30ff 	mov.w	r0, #4294967295
 801d778:	40e0      	lsrs	r0, r4
 801d77a:	4210      	tst	r0, r2
 801d77c:	d0f7      	beq.n	801d76e <floor+0x8e>
 801d77e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d7c0 <floor+0xe0>
 801d782:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d786:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d78e:	ddc9      	ble.n	801d724 <floor+0x44>
 801d790:	2b00      	cmp	r3, #0
 801d792:	da02      	bge.n	801d79a <floor+0xba>
 801d794:	2914      	cmp	r1, #20
 801d796:	d103      	bne.n	801d7a0 <floor+0xc0>
 801d798:	3301      	adds	r3, #1
 801d79a:	ea22 0200 	bic.w	r2, r2, r0
 801d79e:	e7c1      	b.n	801d724 <floor+0x44>
 801d7a0:	2401      	movs	r4, #1
 801d7a2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d7a6:	fa04 f101 	lsl.w	r1, r4, r1
 801d7aa:	440a      	add	r2, r1
 801d7ac:	42aa      	cmp	r2, r5
 801d7ae:	bf38      	it	cc
 801d7b0:	191b      	addcc	r3, r3, r4
 801d7b2:	e7f2      	b.n	801d79a <floor+0xba>
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	4613      	mov	r3, r2
 801d7b8:	e7b4      	b.n	801d724 <floor+0x44>
 801d7ba:	bf00      	nop
 801d7bc:	f3af 8000 	nop.w
 801d7c0:	8800759c 	.word	0x8800759c
 801d7c4:	7e37e43c 	.word	0x7e37e43c
 801d7c8:	bff00000 	.word	0xbff00000
 801d7cc:	000fffff 	.word	0x000fffff

0801d7d0 <_init>:
 801d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7d2:	bf00      	nop
 801d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7d6:	bc08      	pop	{r3}
 801d7d8:	469e      	mov	lr, r3
 801d7da:	4770      	bx	lr

0801d7dc <_fini>:
 801d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7de:	bf00      	nop
 801d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7e2:	bc08      	pop	{r3}
 801d7e4:	469e      	mov	lr, r3
 801d7e6:	4770      	bx	lr
