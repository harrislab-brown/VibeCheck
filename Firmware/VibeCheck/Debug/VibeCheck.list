
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d888  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f8  0801db58  0801db58  0001eb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ee50  0801ee50  0001fe50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ee58  0801ee58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ee5c  0801ee5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801ee60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d714  240002fc  0801f15c  000202fc  2**2
                  ALLOC
  8 ._user_heap_stack 00006400  2401da10  0801f15c  00020a10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003acca  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007699  00000000  00000000  0005aff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002958  00000000  00000000  00062690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002003  00000000  00000000  00064fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eaa9  00000000  00000000  00066feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cef6  00000000  00000000  000a5a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001733d0  00000000  00000000  000e298a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00255d5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c5b0  00000000  00000000  00255da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00262350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  002623f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801db40 	.word	0x0801db40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801db40 	.word	0x0801db40

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00b f8f9 	bl	800bcf4 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801db58 	.word	0x0801db58
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801db60 	.word	0x0801db60
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00a fdae 	bl	800bcf4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f010 f851 	bl	8011250 <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00a fd99 	bl	800bcf4 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00a fd7c 	bl	800bcf4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f00f fe34 	bl	8010e74 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00a fd6a 	bl	800bcf4 <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	b470      	push	{r4, r5, r6}
 800122e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001232:	4684      	mov	ip, r0
 8001234:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001236:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123a:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123c:	685e      	ldr	r6, [r3, #4]
 800123e:	4030      	ands	r0, r6
 8001240:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001242:	68d8      	ldr	r0, [r3, #12]
 8001244:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 8001248:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f040 0001 	orr.w	r0, r0, #1
 8001250:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001258:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125a:	b1a2      	cbz	r2, 8001286 <SPI_TxRx_Fast+0x5a>
 800125c:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001260:	6958      	ldr	r0, [r3, #20]
 8001262:	0780      	lsls	r0, r0, #30
 8001264:	d5fc      	bpl.n	8001260 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001266:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800126a:	45b4      	cmp	ip, r6
 800126c:	f883 0020 	strb.w	r0, [r3, #32]
 8001270:	d1f6      	bne.n	8001260 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001272:	440a      	add	r2, r1

	/* FIXME: this can potentially get stuck -- add a timeout or max iteration limit */

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001274:	6958      	ldr	r0, [r3, #20]
 8001276:	07c0      	lsls	r0, r0, #31
 8001278:	d5fc      	bpl.n	8001274 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800127a:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 800127e:	f801 0b01 	strb.w	r0, [r1], #1
 8001282:	4291      	cmp	r1, r2
 8001284:	d1f6      	bne.n	8001274 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 800128e:	61a5      	str	r5, [r4, #24]
}
 8001290:	bc70      	pop	{r4, r5, r6}
 8001292:	4770      	bx	lr
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012a2:	f005 f9a4 	bl	80065ee <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24011de0 	.word	0x24011de0

080012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012be:	f005 ff3f 	bl	8007140 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24011e04 	.word	0x24011e04

080012d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80012da:	f005 ff4d 	bl	8007178 <VibeCheckWaveGen_DMACpltCallback>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24011e04 	.word	0x24011e04

080012ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012fc:	f003 fe1b 	bl	8004f36 <VibeCheckSensor_EXTICallback>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240133c4 	.word	0x240133c4

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001312:	f000 ff23 	bl	800215c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f006 f9ef 	bl	80076f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f84d 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800131e:	f000 f8bb 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fdbf 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fd8d 	bl	8001e44 <MX_DMA_Init>
  MX_DAC1_Init();
 800132a:	f000 f9cb 	bl	80016c4 <MX_DAC1_Init>
  MX_I2C2_Init();
 800132e:	f000 fa05 	bl	800173c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001332:	f000 fa43 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001336:	f000 fa97 	bl	8001868 <MX_SPI3_Init>
  MX_SPI4_Init();
 800133a:	f000 faeb 	bl	8001914 <MX_SPI4_Init>
  MX_TIM4_Init();
 800133e:	f000 fc6f 	bl	8001c20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001342:	f000 fbdf 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd31 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800134a:	f000 fb39 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134e:	f000 fb8b 	bl	8001a68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001352:	f000 f8d1 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001356:	f000 f94b 	bl	80015f0 <MX_ADC2_Init>
  MX_UART7_Init();
 800135a:	f000 fcd9 	bl	8001d10 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800135e:	f016 ff95 	bl	801828c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0x84>)
 8001364:	f010 fbee 	bl	8011b44 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x88>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <main+0x8c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <main+0x90>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <main+0x94>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0x98>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <main+0x9c>)
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <main+0xa0>)
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xa4>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa8>)
 8001384:	f001 fe42 	bl	800300c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa8>)
 800138a:	f002 f859 	bl	8003440 <VibeCheck_Loop>
 800138e:	e7fb      	b.n	8001388 <main+0x7c>
 8001390:	24000734 	.word	0x24000734
 8001394:	24000660 	.word	0x24000660
 8001398:	240005d8 	.word	0x240005d8
 800139c:	24000550 	.word	0x24000550
 80013a0:	40000024 	.word	0x40000024
 80013a4:	240007cc 	.word	0x240007cc
 80013a8:	240003f8 	.word	0x240003f8
 80013ac:	240006e8 	.word	0x240006e8
 80013b0:	24000780 	.word	0x24000780
 80013b4:	240009b8 	.word	0x240009b8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	224c      	movs	r2, #76	@ 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f019 f81f 	bl	801a40a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f019 f819 	bl	801a40a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f00c f891 	bl	800d500 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemClock_Config+0xdc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	@ 0x21
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	@ 0x28
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001434:	230c      	movs	r3, #12
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4618      	mov	r0, r3
 8001446:	f00c f8a5 	bl	800d594 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 feb0 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f00c fc64 	bl	800dd48 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fe95 	bl	80021b4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	@ 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	@ 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f018 ffb0 	bl	801a40a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c ffbe 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fe63 	bl	80021b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f018 ff7a 	bl	801a40a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <MX_ADC1_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001532:	2204      	movs	r2, #4
 8001534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001544:	2201      	movs	r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800157e:	f006 fbb7 	bl	8007cf0 <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001588:	f000 fe14 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001598:	f007 fbf6 	bl	8008d88 <HAL_ADCEx_MultiModeConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 fe07 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_ADC1_Init+0xf0>)
 80015a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_ADC1_Init+0xf4>)
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 80015ca:	f006 fd99 	bl	8008100 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015d4:	f000 fdee 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000318 	.word	0x24000318
 80015e4:	40022000 	.word	0x40022000
 80015e8:	10c00010 	.word	0x10c00010
 80015ec:	47ff0000 	.word	0x47ff0000

080015f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f018 ff04 	bl	801a40a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <MX_ADC2_Init+0xc8>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001664:	2201      	movs	r2, #1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800166a:	f006 fb41 	bl	8007cf0 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001674:	f000 fd9e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_ADC2_Init+0xcc>)
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC2_Init+0xd0>)
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001688:	2304      	movs	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800169c:	f006 fd30 	bl	8008100 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016a6:	f000 fd85 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000388 	.word	0x24000388
 80016b8:	40022100 	.word	0x40022100
 80016bc:	0c900008 	.word	0x0c900008
 80016c0:	47ff0000 	.word	0x47ff0000

080016c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2224      	movs	r2, #36	@ 0x24
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f018 fe9a 	bl	801a40a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_DAC1_Init+0x74>)
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016de:	f007 fdbd 	bl	800925c <HAL_DAC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e8:	f000 fd64 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80016f0:	2306      	movs	r3, #6
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_DAC1_Init+0x70>)
 8001708:	f007 fe94 	bl	8009434 <HAL_DAC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fd4f 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2210      	movs	r2, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_DAC1_Init+0x70>)
 800171e:	f007 fe89 	bl	8009434 <HAL_DAC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 fd44 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240003f8 	.word	0x240003f8
 8001738:	40007400 	.word	0x40007400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f00a faf0 	bl	800bd5c <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fd17 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f00a fb83 	bl	800be94 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f00a fbc5 	bl	800bf2a <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fd05 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240004fc 	.word	0x240004fc
 80017b4:	40005800 	.word	0x40005800
 80017b8:	307075b1 	.word	0x307075b1

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800184e:	f00f f9ed 	bl	8010c2c <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fcac 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000550 	.word	0x24000550
 8001864:	40003800 	.word	0x40003800

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_SPI3_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_SPI3_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_SPI3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_SPI3_Init+0xa4>)
 800189c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018fa:	f00f f997 	bl	8010c2c <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fc56 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240005d8 	.word	0x240005d8
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <MX_SPI4_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a6:	f00f f941 	bl	8010c2c <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fc00 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000660 	.word	0x24000660
 80019bc:	40013400 	.word	0x40013400

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f010 f843 	bl	8011a96 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fbcd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f010 fff4 	bl	8012a14 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 fbbf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f011 fe36 	bl	80136b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fbaf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240006e8 	.word	0x240006e8
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f00f fff1 	bl	8011a96 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fb7b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f010 ffa2 	bl	8012a14 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fb6d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ada:	2320      	movs	r3, #32
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f011 fde6 	bl	80136b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fb5f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000734 	.word	0x24000734

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM3_Init+0x118>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b5e:	f00f ff9a 	bl	8011a96 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b68:	f000 fb24 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b7a:	f010 ff4b 	bl	8012a14 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b84:	f000 fb16 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b8a:	f010 f8df 	bl	8011d4c <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b94:	f000 fb0e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001ba8:	f011 fd86 	bl	80136b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb2:	f000 faff 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bce:	f010 fe0d 	bl	80127ec <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001be4:	f010 fe02 	bl	80127ec <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bee:	f000 fae1 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bfa:	f010 fdf7 	bl	80127ec <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001c0a:	f000 fee3 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000780 	.word	0x24000780
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	@ 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <MX_TIM4_Init+0xec>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c78:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c7a:	f00f ff0c 	bl	8011a96 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c84:	f000 fa96 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c96:	f010 febd 	bl	8012a14 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ca0:	f000 fa88 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001ca6:	f010 f851 	bl	8011d4c <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cb0:	f000 fa80 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cc4:	f011 fcf8 	bl	80136b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fa71 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd2:	2360      	movs	r3, #96	@ 0x60
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cea:	f010 fd7f 	bl	80127ec <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001cf4:	f000 fa5e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cfa:	f000 fe6b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240007cc 	.word	0x240007cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <MX_UART7_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d3c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d5c:	f011 fd66 	bl	801382c <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa25 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d6e:	f012 fe72 	bl	8014a56 <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d80:	f012 fea7 	bl	8014ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fa13 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d90:	f012 fe28 	bl	80149e4 <HAL_UARTEx_DisableFifoMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000890 	.word	0x24000890
 8001da8:	40007800 	.word	0x40007800

08001dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART1_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df6:	f011 fd19 	bl	801382c <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f9d8 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e08:	f012 fe25 	bl	8014a56 <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f9cf 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e1a:	f012 fe5a 	bl	8014ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f9c6 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e2a:	f012 fddb 	bl	80149e4 <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000924 	.word	0x24000924
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f007 f948 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e72:	200b      	movs	r0, #11
 8001e74:	f007 f95f 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f007 f940 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f007 f957 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f007 f938 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f007 f94f 	bl	8009136 <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a99      	ldr	r2, [pc, #612]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a91      	ldr	r2, [pc, #580]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b87      	ldr	r3, [pc, #540]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b78      	ldr	r3, [pc, #480]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4875      	ldr	r0, [pc, #468]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001f74:	f009 febe 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4873      	ldr	r0, [pc, #460]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8001f7e:	f009 feb9 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4872      	ldr	r0, [pc, #456]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f88:	f009 feb4 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	486f      	ldr	r0, [pc, #444]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f92:	f009 feaf 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	486d      	ldr	r0, [pc, #436]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001f9e:	f009 fea9 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	486c      	ldr	r0, [pc, #432]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8001fa8:	f009 fea4 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	4868      	ldr	r0, [pc, #416]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001fb4:	f009 fe9e 	bl	800bcf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	485e      	ldr	r0, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fce:	f009 fcd1 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4857      	ldr	r0, [pc, #348]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fea:	f009 fcc3 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4851      	ldr	r0, [pc, #324]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002006:	f009 fcb5 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	484a      	ldr	r0, [pc, #296]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002022:	f009 fca7 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002026:	230b      	movs	r3, #11
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 800203e:	f009 fc99 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin RECORD_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|RECORD_BUTTON_Pin;
 8002042:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8002058:	f009 fc8c 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8002076:	f009 fc7d 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800207a:	f240 3306 	movw	r3, #774	@ 0x306
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8002092:	f009 fc6f 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_GPIO_Init+0x2a8>)
 80020ac:	f009 fc62 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4824      	ldr	r0, [pc, #144]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 80020c8:	f009 fc54 	bl	800b974 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481b      	ldr	r0, [pc, #108]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 80020e6:	f009 fc45 	bl	800b974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2007      	movs	r0, #7
 80020f0:	f007 f807 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f007 f81e 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2008      	movs	r0, #8
 8002100:	f006 ffff 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002104:	2008      	movs	r0, #8
 8002106:	f007 f816 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2009      	movs	r0, #9
 8002110:	f006 fff7 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002114:	2009      	movs	r0, #9
 8002116:	f007 f80e 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2017      	movs	r0, #23
 8002120:	f006 ffef 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002124:	2017      	movs	r0, #23
 8002126:	f007 f806 	bl	8009136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f006 ffe7 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	@ 0x28
 8002136:	f006 fffe 	bl	8009136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	@ 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	58021000 	.word	0x58021000
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58020c00 	.word	0x58020c00

0800215c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800216e:	f006 fffd 	bl	800916c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800217e:	231f      	movs	r3, #31
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002182:	2387      	movs	r3, #135	@ 0x87
 8002184:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 f81b 	bl	80091dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021a6:	2004      	movs	r0, #4
 80021a8:	f006 fff8 	bl	800919c <HAL_MPU_Enable>

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	745a      	strb	r2, [r3, #17]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7c1b      	ldrb	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <Sequencer_Update+0x76>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02c      	beq.n	800229a <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d927      	bls.n	800229a <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10a      	bne.n	8002296 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7c5b      	ldrb	r3, [r3, #17]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e002      	b.n	8002296 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Sequencer_Update+0x78>
		}
	}

	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	741a      	strb	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	741a      	strb	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x34>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002310:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_MspInit+0x34>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_MspInit+0x34>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002328:	2005      	movs	r0, #5
 800232a:	f006 fedf 	bl	80090ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002376:	4a34      	ldr	r2, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <HAL_ADC_MspInit+0x110>)
 80023c0:	f009 fad8 	bl	800b974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c4:	e037      	b.n	8002436 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_MspInit+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d132      	bne.n	8002436 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_ADC_MspInit+0x118>)
 8002432:	f009 fa9f 	bl	800b974 <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	240144b8 	.word	0x240144b8
 8002448:	58024400 	.word	0x58024400
 800244c:	58020800 	.word	0x58020800
 8002450:	40022100 	.word	0x40022100
 8002454:	58020000 	.word	0x58020000

08002458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_DAC_MspInit+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808a 	bne.w	8002590 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DAC_MspInit+0x144>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024b8:	2330      	movs	r3, #48	@ 0x30
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4835      	ldr	r0, [pc, #212]	@ (80025a0 <HAL_DAC_MspInit+0x148>)
 80024cc:	f009 fa52 	bl	800b974 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d2:	4a35      	ldr	r2, [pc, #212]	@ (80025a8 <HAL_DAC_MspInit+0x150>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d8:	2243      	movs	r2, #67	@ 0x43
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002516:	f007 f959 	bl	80097cc <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002520:	f7ff fe48 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DAC_MspInit+0x158>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800254a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002576:	f007 f929 	bl	80097cc <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fe18 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007400 	.word	0x40007400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	2400040c 	.word	0x2400040c
 80025a8:	40020010 	.word	0x40020010
 80025ac:	24000484 	.word	0x24000484
 80025b0:	40020028 	.word	0x40020028

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b8      	sub	sp, #224	@ 0xe0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	22b8      	movs	r2, #184	@ 0xb8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f017 ff18 	bl	801a40a <memset>
  if(hi2c->Instance==I2C2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_I2C_MspInit+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d146      	bne.n	8002672 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025e4:	f04f 0208 	mov.w	r2, #8
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00b ff30 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002628:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002642:	2304      	movs	r3, #4
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_I2C_MspInit+0xd0>)
 8002650:	f009 f990 	bl	800b974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	@ 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005800 	.word	0x40005800
 8002680:	58024400 	.word	0x58024400
 8002684:	58020400 	.word	0x58020400

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0bc      	sub	sp, #240	@ 0xf0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	22b8      	movs	r2, #184	@ 0xb8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f017 feae 	bl	801a40a <memset>
  if(hspi->Instance==SPI2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_SPI_MspInit+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d146      	bne.n	8002746 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00b fec7 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80026d8:	f7ff fd6c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026dc:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a67      	ldr	r2, [pc, #412]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002718:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800271c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002732:	2305      	movs	r3, #5
 8002734:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273c:	4619      	mov	r1, r3
 800273e:	4851      	ldr	r0, [pc, #324]	@ (8002884 <HAL_SPI_MspInit+0x1fc>)
 8002740:	f009 f918 	bl	800b974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002744:	e096      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_SPI_MspInit+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800275c:	2300      	movs	r3, #0
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fe7b 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002770:	f7ff fd20 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027d4:	4619      	mov	r1, r3
 80027d6:	482d      	ldr	r0, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0x204>)
 80027d8:	f009 f8cc 	bl	800b974 <HAL_GPIO_Init>
}
 80027dc:	e04a      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_SPI_MspInit+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d145      	bne.n	8002874 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b fe2e 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002862:	2305      	movs	r3, #5
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800286c:	4619      	mov	r1, r3
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <HAL_SPI_MspInit+0x20c>)
 8002870:	f009 f880 	bl	800b974 <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	40003c00 	.word	0x40003c00
 800288c:	58020800 	.word	0x58020800
 8002890:	40013400 	.word	0x40013400
 8002894:	58021000 	.word	0x58021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_TIM_Base_MspInit+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c8:	e074      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a39      	ldr	r2, [pc, #228]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	e05f      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d117      	bne.n	800292e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800291c:	2201      	movs	r2, #1
 800291e:	2101      	movs	r1, #1
 8002920:	201d      	movs	r0, #29
 8002922:	f006 fbee 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f006 fc05 	bl	8009136 <HAL_NVIC_EnableIRQ>
}
 800292c:	e042      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_TIM_Base_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13d      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800295e:	221d      	movs	r2, #29
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800299a:	f006 ff17 	bl	80097cc <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029a4:	f7ff fc06 	bl	80021b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	24000818 	.word	0x24000818
 80029d0:	40020040 	.word	0x40020040

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d120      	bne.n	8002a38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <HAL_TIM_MspPostInit+0xc0>)
 8002a32:	f008 ff9f 	bl	800b974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a36:	e024      	b.n	8002a82 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_MspPostInit+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a72:	2302      	movs	r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <HAL_TIM_MspPostInit+0xc8>)
 8002a7e:	f008 ff79 	bl	800b974 <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	58020c00 	.word	0x58020c00

08002aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	22b8      	movs	r2, #184	@ 0xb8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f017 fca2 	bl	801a40a <memset>
  if(huart->Instance==UART7)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_UART_MspInit+0x160>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d147      	bne.n	8002b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ad0:	f04f 0202 	mov.w	r2, #2
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00b fcba 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002af2:	f7ff fb5f 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002afc:	4a41      	ldr	r2, [pc, #260]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x168>)
 8002b5a:	f008 ff0b 	bl	800b974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	e04a      	b.n	8002bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d145      	bne.n	8002bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6a:	f04f 0201 	mov.w	r2, #1
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b fc6d 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b8c:	f7ff fb12 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <HAL_UART_MspInit+0x170>)
 8002bf2:	f008 febf 	bl	800b974 <HAL_GPIO_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	@ 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40007800 	.word	0x40007800
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	58020400 	.word	0x58020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f004 fdb7 	bl	80077dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f009 f855 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f009 f84e 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c92:	2008      	movs	r0, #8
 8002c94:	f009 f847 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Stream0_IRQHandler+0x10>)
 8002ca2:	f007 fb55 	bl	800a350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400040c 	.word	0x2400040c

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f007 fb4b 	bl	800a350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000484 	.word	0x24000484

08002cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8002cca:	f007 fb41 	bl	800a350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000818 	.word	0x24000818

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f009 f821 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002ce4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ce8:	f009 f81d 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f00f fc71 	bl	80125dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000780 	.word	0x24000780

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d0c:	f009 f80b 	bl	800bd26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <OTG_HS_IRQHandler+0x10>)
 8002d1a:	f009 fa93 	bl	800c244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2401d1c0 	.word	0x2401d1c0

08002d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d42:	f017 fbd3 	bl	801a4ec <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2216      	movs	r2, #22
 8002d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_exit>:

void _exit (int status)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ffe7 	bl	8002d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <_exit+0x12>

08002d6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d80:	f3af 8000 	nop.w
 8002d84:	4601      	mov	r1, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60ba      	str	r2, [r7, #8]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dbf0      	blt.n	8002d80 <_read+0x12>
  }

  return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60ba      	str	r2, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf1      	blt.n	8002dba <_write+0x12>
  }
  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f017 fb38 	bl	801a4ec <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24050000 	.word	0x24050000
 8002ea8:	00003200 	.word	0x00003200
 8002eac:	240144bc 	.word	0x240144bc
 8002eb0:	2401da10 	.word	0x2401da10

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <SystemInit+0xd0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <SystemInit+0xd0>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <SystemInit+0xd4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d807      	bhi.n	8002ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <SystemInit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <SystemInit+0xd4>)
 8002ede:	f043 0307 	orr.w	r3, r3, #7
 8002ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <SystemInit+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <SystemInit+0xd8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <SystemInit+0xd8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <SystemInit+0xd8>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <SystemInit+0xd8>)
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <SystemInit+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <SystemInit+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SystemInit+0xd4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <SystemInit+0xd4>)
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <SystemInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SystemInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <SystemInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <SystemInit+0xd8>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <SystemInit+0xe0>)
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <SystemInit+0xd8>)
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <SystemInit+0xe4>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <SystemInit+0xd8>)
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <SystemInit+0xe8>)
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <SystemInit+0xd8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <SystemInit+0xd8>)
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <SystemInit+0xe8>)
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <SystemInit+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <SystemInit+0xd8>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <SystemInit+0xe8>)
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <SystemInit+0xd8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <SystemInit+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <SystemInit+0xd8>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <SystemInit+0xd8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemInit+0xec>)
 8002f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f94:	02020200 	.word	0x02020200
 8002f98:	01ff0000 	.word	0x01ff0000
 8002f9c:	01010280 	.word	0x01010280
 8002fa0:	52004000 	.word	0x52004000

08002fa4 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e019      	b.n	8002ff6 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bfb8      	it	lt
 8002fd4:	425b      	neglt	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3e1      	bcc.n	8002fc2 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b0f9      	sub	sp, #484	@ 0x1e4
 8003010:	af10      	add	r7, sp, #64	@ 0x40
 8003012:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8003016:	f5a4 74c6 	sub.w	r4, r4, #396	@ 0x18c
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8003020:	f5a0 70c8 	sub.w	r0, r0, #400	@ 0x190
 8003024:	6001      	str	r1, [r0, #0]
 8003026:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800302a:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 800302e:	600a      	str	r2, [r1, #0]
 8003030:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003034:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8003038:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 800303a:	200a      	movs	r0, #10
 800303c:	f004 fbee 	bl	800781c <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8003040:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003044:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fcac 	bl	80059a8 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8003050:	4acf      	ldr	r2, [pc, #828]	@ (8003390 <VibeCheck_Init+0x384>)
 8003052:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	6018      	str	r0, [r3, #0]
 800305a:	8891      	ldrh	r1, [r2, #4]
 800305c:	7992      	ldrb	r2, [r2, #6]
 800305e:	8099      	strh	r1, [r3, #4]
 8003060:	719a      	strb	r2, [r3, #6]
 8003062:	f207 135f 	addw	r3, r7, #351	@ 0x15f
 8003066:	2239      	movs	r2, #57	@ 0x39
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f017 f9cd 	bl	801a40a <memset>
 8003070:	4bc8      	ldr	r3, [pc, #800]	@ (8003394 <VibeCheck_Init+0x388>)
 8003072:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8003076:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800307a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4bc5      	ldr	r3, [pc, #788]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003082:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003084:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8003088:	4ac4      	ldr	r2, [pc, #784]	@ (800339c <VibeCheck_Init+0x390>)
 800308a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	c303      	stmia	r3!, {r0, r1}
 8003094:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003098:	2238      	movs	r2, #56	@ 0x38
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f017 f9b4 	bl	801a40a <memset>
 80030a2:	4bbf      	ldr	r3, [pc, #764]	@ (80033a0 <VibeCheck_Init+0x394>)
 80030a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 80030a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4bbc      	ldr	r3, [pc, #752]	@ (80033a4 <VibeCheck_Init+0x398>)
 80030b4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 80030b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 80030ba:	4bbb      	ldr	r3, [pc, #748]	@ (80033a8 <VibeCheck_Init+0x39c>)
 80030bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030c0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80030c4:	223c      	movs	r2, #60	@ 0x3c
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f017 f99e 	bl	801a40a <memset>
 80030ce:	4bb7      	ldr	r3, [pc, #732]	@ (80033ac <VibeCheck_Init+0x3a0>)
 80030d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 80030d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4bb4      	ldr	r3, [pc, #720]	@ (80033b0 <VibeCheck_Init+0x3a4>)
 80030e0:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 80030e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 80030e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80030ea:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80030ee:	4ab1      	ldr	r2, [pc, #708]	@ (80033b4 <VibeCheck_Init+0x3a8>)
 80030f0:	460b      	mov	r3, r1
 80030f2:	6810      	ldr	r0, [r2, #0]
 80030f4:	6018      	str	r0, [r3, #0]
 80030f6:	8890      	ldrh	r0, [r2, #4]
 80030f8:	7992      	ldrb	r2, [r2, #6]
 80030fa:	8098      	strh	r0, [r3, #4]
 80030fc:	719a      	strb	r2, [r3, #6]
 80030fe:	1dcb      	adds	r3, r1, #7
 8003100:	2239      	movs	r2, #57	@ 0x39
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f017 f980 	bl	801a40a <memset>
 800310a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800310e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003112:	4aa9      	ldr	r2, [pc, #676]	@ (80033b8 <VibeCheck_Init+0x3ac>)
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003116:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800311a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4ba6      	ldr	r3, [pc, #664]	@ (80033bc <VibeCheck_Init+0x3b0>)
 8003122:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 8003124:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003128:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800312c:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_InputHandler record_cmd = {
 800312e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003132:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003136:	4aa2      	ldr	r2, [pc, #648]	@ (80033c0 <VibeCheck_Init+0x3b4>)
 8003138:	4618      	mov	r0, r3
 800313a:	4611      	mov	r1, r2
 800313c:	2348      	movs	r3, #72	@ 0x48
 800313e:	461a      	mov	r2, r3
 8003140:	f017 fa01 	bl	801a546 <memcpy>
			.name = "record",
			.execute = VibeCheckRecordCMD_Execute,
			.obj = NULL
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8003144:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003148:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800314c:	681e      	ldr	r6, [r3, #0]
 800314e:	466d      	mov	r5, sp
 8003150:	f507 74b2 	add.w	r4, r7, #356	@ 0x164
 8003154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003164:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003168:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800316c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316e:	4630      	mov	r0, r6
 8003170:	f002 fd80 	bl	8005c74 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 8003174:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003178:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800317c:	681e      	ldr	r6, [r3, #0]
 800317e:	466d      	mov	r5, sp
 8003180:	f507 748e 	add.w	r4, r7, #284	@ 0x11c
 8003184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003190:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003194:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800319c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800319e:	4630      	mov	r0, r6
 80031a0:	f002 fd68 	bl	8005c74 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 80031a4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80031a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031ac:	681e      	ldr	r6, [r3, #0]
 80031ae:	466d      	mov	r5, sp
 80031b0:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 80031b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031c8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80031cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ce:	4630      	mov	r0, r6
 80031d0:	f002 fd50 	bl	8005c74 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 80031d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80031d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80031e4:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 80031e8:	466d      	mov	r5, sp
 80031ea:	f106 040c 	add.w	r4, r6, #12
 80031ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003202:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f002 fd34 	bl	8005c74 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, record_cmd);
 800320c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003210:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800321c:	f5a3 76b4 	sub.w	r6, r3, #360	@ 0x168
 8003220:	466d      	mov	r5, sp
 8003222:	f106 040c 	add.w	r4, r6, #12
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003232:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003236:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800323a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f002 fd18 	bl	8005c74 <VibeCheckShell_RegisterInputHandler>


	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003244:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003248:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800324c:	4a5d      	ldr	r2, [pc, #372]	@ (80033c4 <VibeCheck_Init+0x3b8>)
 800324e:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 8003250:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003254:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b58      	ldr	r3, [pc, #352]	@ (80033bc <VibeCheck_Init+0x3b0>)
 800325c:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 800325e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003262:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003266:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 8003268:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800326c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003270:	4a55      	ldr	r2, [pc, #340]	@ (80033c8 <VibeCheck_Init+0x3bc>)
 8003272:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 8003274:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003278:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b4f      	ldr	r3, [pc, #316]	@ (80033bc <VibeCheck_Init+0x3b0>)
 8003280:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 8003282:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003286:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800328a:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler mute_button_sender = {
 800328c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003290:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003294:	4a4d      	ldr	r2, [pc, #308]	@ (80033cc <VibeCheck_Init+0x3c0>)
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800329c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032a0:	2200      	movs	r2, #0
 80032a2:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckMuteSender_Execute,
			.obj = NULL
	};

	VibeCheckShell_OutputHandler record_button_sender = {
 80032a4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032a8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032ac:	4a48      	ldr	r2, [pc, #288]	@ (80033d0 <VibeCheck_Init+0x3c4>)
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032b4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckRecordSender_Execute,
			.obj = NULL
	};


	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 80032bc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032d2:	f002 fd03 	bl	8005cdc <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 80032d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032e4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80032e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032ec:	f002 fcf6 	bl	8005cdc <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, mute_button_sender);
 80032f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003302:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003306:	f002 fce9 	bl	8005cdc <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, record_button_sender);
 800330a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800330e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003318:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800331c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003320:	f002 fcdc 	bl	8005cdc <VibeCheckShell_RegisterOutputHandler>


	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8003324:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003328:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003330:	4413      	add	r3, r2
 8003332:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003336:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f002 ff93 	bl	8006268 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 8003342:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003346:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <VibeCheck_Init+0x398>)
 800334e:	4413      	add	r3, r2
 8003350:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003354:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8003358:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800335c:	f5a1 71cc 	sub.w	r1, r1, #408	@ 0x198
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fce5 	bl	8006d34 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 800336a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800336e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <VibeCheck_Init+0x3a4>)
 8003376:	4413      	add	r3, r2
 8003378:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fbfd 	bl	8003b7c <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003382:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003386:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	e022      	b.n	80033d4 <VibeCheck_Init+0x3c8>
 800338e:	bf00      	nop
 8003390:	0801db68 	.word	0x0801db68
 8003394:	08006835 	.word	0x08006835
 8003398:	00011428 	.word	0x00011428
 800339c:	0801db70 	.word	0x0801db70
 80033a0:	08007549 	.word	0x08007549
 80033a4:	0001144c 	.word	0x0001144c
 80033a8:	00626772 	.word	0x00626772
 80033ac:	08003fb5 	.word	0x08003fb5
 80033b0:	0001248c 	.word	0x0001248c
 80033b4:	0801db78 	.word	0x0801db78
 80033b8:	08005515 	.word	0x08005515
 80033bc:	00012a0c 	.word	0x00012a0c
 80033c0:	0801db80 	.word	0x0801db80
 80033c4:	08005839 	.word	0x08005839
 80033c8:	0800591d 	.word	0x0800591d
 80033cc:	08003ac5 	.word	0x08003ac5
 80033d0:	08003b2d 	.word	0x08003b2d
 80033d4:	4814      	ldr	r0, [pc, #80]	@ (8003428 <VibeCheck_Init+0x41c>)
 80033d6:	4418      	add	r0, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	4a14      	ldr	r2, [pc, #80]	@ (800342c <VibeCheck_Init+0x420>)
 80033dc:	4914      	ldr	r1, [pc, #80]	@ (8003430 <VibeCheck_Init+0x424>)
 80033de:	f000 fc80 	bl	8003ce2 <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80033e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80033e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	480e      	ldr	r0, [pc, #56]	@ (8003428 <VibeCheck_Init+0x41c>)
 80033ee:	4418      	add	r0, r3
 80033f0:	2304      	movs	r3, #4
 80033f2:	4a10      	ldr	r2, [pc, #64]	@ (8003434 <VibeCheck_Init+0x428>)
 80033f4:	4910      	ldr	r1, [pc, #64]	@ (8003438 <VibeCheck_Init+0x42c>)
 80033f6:	f000 fcab 	bl	8003d50 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 80033fa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80033fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	480d      	ldr	r0, [pc, #52]	@ (800343c <VibeCheck_Init+0x430>)
 8003406:	4418      	add	r0, r3
 8003408:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003412:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003416:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 800341a:	f000 feaf 	bl	800417c <VibeCheckSensor_Init>
}
 800341e:	bf00      	nop
 8003420:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8003424:	46bd      	mov	sp, r7
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	0001248c 	.word	0x0001248c
 800342c:	0801deb8 	.word	0x0801deb8
 8003430:	0801de78 	.word	0x0801de78
 8003434:	0801de0c 	.word	0x0801de0c
 8003438:	0801ddfc 	.word	0x0801ddfc
 800343c:	00012a0c 	.word	0x00012a0c

08003440 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b08d      	sub	sp, #52	@ 0x34
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003448:	f004 f9dc 	bl	8007804 <HAL_GetTick>
 800344c:	6238      	str	r0, [r7, #32]
	/* TODO: record button should just send a message any time it is pressed. Record LED should be turned on/off from serial cmd only */
	/* TODO: mute button should mute output, turn off strobe, and send message */


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4b9b      	ldr	r3, [pc, #620]	@ (80036c0 <VibeCheck_Loop+0x280>)
 8003452:	4413      	add	r3, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fcfb 	bl	8006e50 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4b99      	ldr	r3, [pc, #612]	@ (80036c4 <VibeCheck_Loop+0x284>)
 800345e:	4413      	add	r3, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fbc1 	bl	8003be8 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4b97      	ldr	r3, [pc, #604]	@ (80036c8 <VibeCheck_Loop+0x288>)
 800346a:	4413      	add	r3, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 ffad 	bl	80043cc <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fadf 	bl	8005a38 <VibeCheckShell_Update>
 800347a:	4603      	mov	r3, r0
 800347c:	61fb      	str	r3, [r7, #28]

	/* blink indicator LEDs based on shell status */
	if (shell_status.ihandl_status == VC_SHELL_INPUT_PROCESSED)
 800347e:	7f3b      	ldrb	r3, [r7, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10e      	bne.n	80034a2 <VibeCheck_Loop+0x62>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_success_times, led_shell_success_colors, led_shell_success_len);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	488f      	ldr	r0, [pc, #572]	@ (80036c4 <VibeCheck_Loop+0x284>)
 8003488:	4418      	add	r0, r3
 800348a:	2304      	movs	r3, #4
 800348c:	4a8f      	ldr	r2, [pc, #572]	@ (80036cc <VibeCheck_Loop+0x28c>)
 800348e:	4990      	ldr	r1, [pc, #576]	@ (80036d0 <VibeCheck_Loop+0x290>)
 8003490:	f000 fc5e 	bl	8003d50 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4b8b      	ldr	r3, [pc, #556]	@ (80036c4 <VibeCheck_Loop+0x284>)
 8003498:	4413      	add	r3, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fc6f 	bl	8003d7e <VibeCheckRGB_StartTopSequence>
 80034a0:	e013      	b.n	80034ca <VibeCheck_Loop+0x8a>
	}
	else if (shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_NO_HANDLER || shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_EXECUTING)
 80034a2:	7f3b      	ldrb	r3, [r7, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d002      	beq.n	80034ae <VibeCheck_Loop+0x6e>
 80034a8:	7f3b      	ldrb	r3, [r7, #28]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d10d      	bne.n	80034ca <VibeCheck_Loop+0x8a>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_failure_times, led_shell_failure_colors, led_shell_failure_len);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4884      	ldr	r0, [pc, #528]	@ (80036c4 <VibeCheck_Loop+0x284>)
 80034b2:	4418      	add	r0, r3
 80034b4:	2304      	movs	r3, #4
 80034b6:	4a87      	ldr	r2, [pc, #540]	@ (80036d4 <VibeCheck_Loop+0x294>)
 80034b8:	4987      	ldr	r1, [pc, #540]	@ (80036d8 <VibeCheck_Loop+0x298>)
 80034ba:	f000 fc49 	bl	8003d50 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4b80      	ldr	r3, [pc, #512]	@ (80036c4 <VibeCheck_Loop+0x284>)
 80034c2:	4413      	add	r3, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fc5a 	bl	8003d7e <VibeCheckRGB_StartTopSequence>


	/* send over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f107 0214 	add.w	r2, r7, #20
 80034d0:	f107 0118 	add.w	r1, r7, #24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fc81 	bl	8005ddc <VibeCheckShell_GetOutput>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00f      	beq.n	8003500 <VibeCheck_Loop+0xc0>
//
//		if ((end != '\n') || (start != 'a' && start != 'd' && start != 'e'))
//			HAL_Delay(1000);
		/* XXX */

		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	b292      	uxth	r2, r2
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f014 ff97 	bl	801841c <CDC_Transmit_HS>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <VibeCheck_Loop+0xc0>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fcc3 	bl	8005e86 <VibeCheckShell_UpdateOutputBuffer>
	}


	/* visualize the acceleration with the RGB LEDs */
	/* TODO: turn off the LEDs when done measuring */
	if (time - time_prev_led_update > 30)
 8003500:	4b76      	ldr	r3, [pc, #472]	@ (80036dc <VibeCheck_Loop+0x29c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b1e      	cmp	r3, #30
 800350a:	f240 81b3 	bls.w	8003874 <VibeCheck_Loop+0x434>
	{
		time_prev_led_update = time;
 800350e:	4a73      	ldr	r2, [pc, #460]	@ (80036dc <VibeCheck_Loop+0x29c>)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	6013      	str	r3, [r2, #0]

		if (!vc->rgb.top_sequence.is_running)  /* let the top sequence have precedence over the visualization */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800351a:	f893 3a04 	ldrb.w	r3, [r3, #2564]	@ 0xa04
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 81a8 	bne.w	8003874 <VibeCheck_Loop+0x434>
		{
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	e1a0      	b.n	800386c <VibeCheck_Loop+0x42c>
			{
				if (vc->sensor.status[i].is_connected)
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	18ca      	adds	r2, r1, r3
 8003538:	4b69      	ldr	r3, [pc, #420]	@ (80036e0 <VibeCheck_Loop+0x2a0>)
 800353a:	4413      	add	r3, r2
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8191 	beq.w	8003866 <VibeCheck_Loop+0x426>
				{
					if (vc->sensor.status[i].accel_measuring)
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	18ca      	adds	r2, r1, r3
 8003552:	4b64      	ldr	r3, [pc, #400]	@ (80036e4 <VibeCheck_Loop+0x2a4>)
 8003554:	4413      	add	r3, r2
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80cd 	beq.w	80036f8 <VibeCheck_Loop+0x2b8>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4858      	ldr	r0, [pc, #352]	@ (80036c4 <VibeCheck_Loop+0x284>)
 8003562:	4418      	add	r0, r3
 8003564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	189c      	adds	r4, r3, r2
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	18ca      	adds	r2, r1, r3
 800357a:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <VibeCheck_Loop+0x2a8>)
 800357c:	4413      	add	r3, r2
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	eef0 7ae7 	vabs.f32	s15, s15
 8003586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800358a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80036b8 <VibeCheck_Loop+0x278>
 800358e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	18ca      	adds	r2, r1, r3
 80035a0:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <VibeCheck_Loop+0x2ac>)
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035b6:	edc7 7a00 	vstr	s15, [r7]
 80035ba:	783b      	ldrb	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	4621      	mov	r1, r4
 80035c6:	f000 fbfa 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	483d      	ldr	r0, [pc, #244]	@ (80036c4 <VibeCheck_Loop+0x284>)
 80035ce:	4418      	add	r0, r3
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	1c5c      	adds	r4, r3, #1
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	18ca      	adds	r2, r1, r3
 80035e8:	4b41      	ldr	r3, [pc, #260]	@ (80036f0 <VibeCheck_Loop+0x2b0>)
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eef0 7ae7 	vabs.f32	s15, s15
 80035f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035f8:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80036b8 <VibeCheck_Loop+0x278>
 80035fc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	18ca      	adds	r2, r1, r3
 800360e:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <VibeCheck_Loop+0x2ac>)
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800361c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003620:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003624:	edc7 7a00 	vstr	s15, [r7]
 8003628:	783b      	ldrb	r3, [r7, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2200      	movs	r2, #0
 800362e:	9200      	str	r2, [sp, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	4621      	mov	r1, r4
 8003634:	f000 fbc3 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4822      	ldr	r0, [pc, #136]	@ (80036c4 <VibeCheck_Loop+0x284>)
 800363c:	4418      	add	r0, r3
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	1c9c      	adds	r4, r3, #2
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	18ca      	adds	r2, r1, r3
 8003656:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <VibeCheck_Loop+0x2b4>)
 8003658:	4413      	add	r3, r2
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	eef0 7ae7 	vabs.f32	s15, s15
 8003662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003666:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80036b8 <VibeCheck_Loop+0x278>
 800366a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	18ca      	adds	r2, r1, r3
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <VibeCheck_Loop+0x2ac>)
 800367e:	4413      	add	r3, r2
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800368a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800368e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003692:	edc7 7a00 	vstr	s15, [r7]
 8003696:	783b      	ldrb	r3, [r7, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	2200      	movs	r2, #0
 80036a0:	4621      	mov	r1, r4
 80036a2:	f000 fb8c 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <VibeCheck_Loop+0x284>)
 80036aa:	4413      	add	r3, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fbf8 	bl	8003ea2 <VibeCheckRGB_SendColors>
 80036b2:	e0d8      	b.n	8003866 <VibeCheck_Loop+0x426>
 80036b4:	f3af 8000 	nop.w
 80036b8:	00000000 	.word	0x00000000
 80036bc:	406fe000 	.word	0x406fe000
 80036c0:	0001144c 	.word	0x0001144c
 80036c4:	0001248c 	.word	0x0001248c
 80036c8:	00012a0c 	.word	0x00012a0c
 80036cc:	0801e078 	.word	0x0801e078
 80036d0:	0801e068 	.word	0x0801e068
 80036d4:	0801e0f4 	.word	0x0801e0f4
 80036d8:	0801e0e4 	.word	0x0801e0e4
 80036dc:	240144c0 	.word	0x240144c0
 80036e0:	00012b08 	.word	0x00012b08
 80036e4:	00012b0c 	.word	0x00012b0c
 80036e8:	00012a80 	.word	0x00012a80
 80036ec:	00012a1c 	.word	0x00012a1c
 80036f0:	00012a84 	.word	0x00012a84
 80036f4:	00012a88 	.word	0x00012a88
					}
					else if (vc->sensor.status[i].gyro_measuring)
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18ca      	adds	r2, r1, r3
 8003706:	4bb4      	ldr	r3, [pc, #720]	@ (80039d8 <VibeCheck_Loop+0x598>)
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80aa 	beq.w	8003866 <VibeCheck_Loop+0x426>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	48b1      	ldr	r0, [pc, #708]	@ (80039dc <VibeCheck_Loop+0x59c>)
 8003716:	4418      	add	r0, r3
 8003718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	189c      	adds	r4, r3, r2
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	18ca      	adds	r2, r1, r3
 800372e:	4bac      	ldr	r3, [pc, #688]	@ (80039e0 <VibeCheck_Loop+0x5a0>)
 8003730:	4413      	add	r3, r2
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	eef0 7ae7 	vabs.f32	s15, s15
 800373a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800373e:	ed9f 6ba4 	vldr	d6, [pc, #656]	@ 80039d0 <VibeCheck_Loop+0x590>
 8003742:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	18ca      	adds	r2, r1, r3
 8003754:	4ba3      	ldr	r3, [pc, #652]	@ (80039e4 <VibeCheck_Loop+0x5a4>)
 8003756:	4413      	add	r3, r2
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003762:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003766:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800376a:	edc7 7a00 	vstr	s15, [r7]
 800376e:	783b      	ldrb	r3, [r7, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	4621      	mov	r1, r4
 800377a:	f000 fb20 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4896      	ldr	r0, [pc, #600]	@ (80039dc <VibeCheck_Loop+0x59c>)
 8003782:	4418      	add	r0, r3
 8003784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	1c5c      	adds	r4, r3, #1
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	18ca      	adds	r2, r1, r3
 800379c:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <VibeCheck_Loop+0x5a8>)
 800379e:	4413      	add	r3, r2
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eef0 7ae7 	vabs.f32	s15, s15
 80037a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ac:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 80039d0 <VibeCheck_Loop+0x590>
 80037b0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	18ca      	adds	r2, r1, r3
 80037c2:	4b88      	ldr	r3, [pc, #544]	@ (80039e4 <VibeCheck_Loop+0x5a4>)
 80037c4:	4413      	add	r3, r2
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80037d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80037d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037d8:	edc7 7a00 	vstr	s15, [r7]
 80037dc:	783b      	ldrb	r3, [r7, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	9200      	str	r2, [sp, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	4621      	mov	r1, r4
 80037e8:	f000 fae9 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	487b      	ldr	r0, [pc, #492]	@ (80039dc <VibeCheck_Loop+0x59c>)
 80037f0:	4418      	add	r0, r3
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	1c9c      	adds	r4, r3, #2
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	18ca      	adds	r2, r1, r3
 800380a:	4b78      	ldr	r3, [pc, #480]	@ (80039ec <VibeCheck_Loop+0x5ac>)
 800380c:	4413      	add	r3, r2
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	eef0 7ae7 	vabs.f32	s15, s15
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	ed9f 6b6d 	vldr	d6, [pc, #436]	@ 80039d0 <VibeCheck_Loop+0x590>
 800381e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	18ca      	adds	r2, r1, r3
 8003830:	4b6c      	ldr	r3, [pc, #432]	@ (80039e4 <VibeCheck_Loop+0x5a4>)
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800383e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003842:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003846:	edc7 7a00 	vstr	s15, [r7]
 800384a:	783b      	ldrb	r3, [r7, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	2200      	movs	r2, #0
 8003854:	4621      	mov	r1, r4
 8003856:	f000 fab2 	bl	8003dbe <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4b5f      	ldr	r3, [pc, #380]	@ (80039dc <VibeCheck_Loop+0x59c>)
 800385e:	4413      	add	r3, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb1e 	bl	8003ea2 <VibeCheckRGB_SendColors>
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	3301      	adds	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	2b02      	cmp	r3, #2
 8003870:	f67f ae5b 	bls.w	800352a <VibeCheck_Loop+0xea>
	/* use RGB LEDs to indicate when sensors are connected or disconnected */

	/* TODO: make these only affect the LEDs corresponding the recently connected sensor (transparency?) */
	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4b5e      	ldr	r3, [pc, #376]	@ (80039f0 <VibeCheck_Loop+0x5b0>)
 8003878:	4413      	add	r3, r2
 800387a:	f107 020c 	add.w	r2, r7, #12
 800387e:	f107 0110 	add.w	r1, r7, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f9e0 	bl	8004c48 <VibeCheckSensor_ConnectionChanged>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d039      	beq.n	8003902 <VibeCheck_Loop+0x4c2>
	{
		if (is_connected)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d017      	beq.n	80038c4 <VibeCheck_Loop+0x484>
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4851      	ldr	r0, [pc, #324]	@ (80039dc <VibeCheck_Loop+0x59c>)
 8003898:	4418      	add	r0, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4a55      	ldr	r2, [pc, #340]	@ (80039f4 <VibeCheck_Loop+0x5b4>)
 800389e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a54      	ldr	r2, [pc, #336]	@ (80039f8 <VibeCheck_Loop+0x5b8>)
 80038a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4c53      	ldr	r4, [pc, #332]	@ (80039fc <VibeCheck_Loop+0x5bc>)
 80038ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038b2:	f000 fa4d 	bl	8003d50 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <VibeCheck_Loop+0x59c>)
 80038ba:	4413      	add	r3, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa5e 	bl	8003d7e <VibeCheckRGB_StartTopSequence>
 80038c2:	e016      	b.n	80038f2 <VibeCheck_Loop+0x4b2>
		}
		else
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4845      	ldr	r0, [pc, #276]	@ (80039dc <VibeCheck_Loop+0x59c>)
 80038c8:	4418      	add	r0, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003a00 <VibeCheck_Loop+0x5c0>)
 80038ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a04 <VibeCheck_Loop+0x5c4>)
 80038d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4c4a      	ldr	r4, [pc, #296]	@ (8003a08 <VibeCheck_Loop+0x5c8>)
 80038de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038e2:	f000 fa35 	bl	8003d50 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4b3c      	ldr	r3, [pc, #240]	@ (80039dc <VibeCheck_Loop+0x59c>)
 80038ea:	4413      	add	r3, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa46 	bl	8003d7e <VibeCheckRGB_StartTopSequence>
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <VibeCheck_Loop+0x5b0>)
 80038f6:	4413      	add	r3, r2
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f9d5 	bl	8004cac <VibeCheckSensor_ResetConnectionFlag>
	}


	/* check the buttons */
	if (time - time_prev_mute_press > 250 && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003902:	4b42      	ldr	r3, [pc, #264]	@ (8003a0c <VibeCheck_Loop+0x5cc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2bfa      	cmp	r3, #250	@ 0xfa
 800390c:	d947      	bls.n	800399e <VibeCheck_Loop+0x55e>
 800390e:	2104      	movs	r1, #4
 8003910:	483f      	ldr	r0, [pc, #252]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 8003912:	f008 f9d7 	bl	800bcc4 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d040      	beq.n	800399e <VibeCheck_Loop+0x55e>
	{
		time_prev_mute_press = time;
 800391c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a0c <VibeCheck_Loop+0x5cc>)
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	6013      	str	r3, [r2, #0]
		mute_pressed = 1;
 8003922:	4b3c      	ldr	r3, [pc, #240]	@ (8003a14 <VibeCheck_Loop+0x5d4>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]

		if (is_muted)
 8003928:	4b3b      	ldr	r3, [pc, #236]	@ (8003a18 <VibeCheck_Loop+0x5d8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <VibeCheck_Loop+0x520>
		{
			is_muted = 0;
 8003930:	4b39      	ldr	r3, [pc, #228]	@ (8003a18 <VibeCheck_Loop+0x5d8>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003936:	2200      	movs	r2, #0
 8003938:	2108      	movs	r1, #8
 800393a:	4835      	ldr	r0, [pc, #212]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 800393c:	f008 f9da 	bl	800bcf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003940:	2200      	movs	r2, #0
 8003942:	2102      	movs	r1, #2
 8003944:	4832      	ldr	r0, [pc, #200]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 8003946:	f008 f9d5 	bl	800bcf4 <HAL_GPIO_WritePin>
			if (was_strobing)
 800394a:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <VibeCheck_Loop+0x5dc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d025      	beq.n	800399e <VibeCheck_Loop+0x55e>
				VibeCheckStrobe_Start(&vc->strobe);
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4b32      	ldr	r3, [pc, #200]	@ (8003a20 <VibeCheck_Loop+0x5e0>)
 8003956:	4413      	add	r3, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f002 fcb7 	bl	80062cc <VibeCheckStrobe_Start>
 800395e:	e01e      	b.n	800399e <VibeCheck_Loop+0x55e>
		}
		else
		{
			is_muted = 1;
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <VibeCheck_Loop+0x5d8>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003966:	2201      	movs	r2, #1
 8003968:	2108      	movs	r1, #8
 800396a:	4829      	ldr	r0, [pc, #164]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 800396c:	f008 f9c2 	bl	800bcf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003970:	2201      	movs	r2, #1
 8003972:	2102      	movs	r1, #2
 8003974:	4826      	ldr	r0, [pc, #152]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 8003976:	f008 f9bd 	bl	800bcf4 <HAL_GPIO_WritePin>
			if (VibeCheckStrobe_IsRunning(&vc->strobe))
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <VibeCheck_Loop+0x5e0>)
 800397e:	4413      	add	r3, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f002 fce7 	bl	8006354 <VibeCheckStrobe_IsRunning>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <VibeCheck_Loop+0x55e>
			{
				was_strobing = 1;
 800398c:	4b23      	ldr	r3, [pc, #140]	@ (8003a1c <VibeCheck_Loop+0x5dc>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
				VibeCheckStrobe_Stop(&vc->strobe);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <VibeCheck_Loop+0x5e0>)
 8003996:	4413      	add	r3, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f002 fcb9 	bl	8006310 <VibeCheckStrobe_Stop>
			}
		}
	}

	if (time - time_prev_record_press > 250 && HAL_GPIO_ReadPin(RECORD_BUTTON_GPIO_Port, RECORD_BUTTON_Pin))
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <VibeCheck_Loop+0x5e4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a3a      	ldr	r2, [r7, #32]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2bfa      	cmp	r3, #250	@ 0xfa
 80039a8:	d90d      	bls.n	80039c6 <VibeCheck_Loop+0x586>
 80039aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039ae:	4818      	ldr	r0, [pc, #96]	@ (8003a10 <VibeCheck_Loop+0x5d0>)
 80039b0:	f008 f988 	bl	800bcc4 <HAL_GPIO_ReadPin>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <VibeCheck_Loop+0x586>
	{
		time_prev_record_press = time;
 80039ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003a24 <VibeCheck_Loop+0x5e4>)
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	6013      	str	r3, [r2, #0]
		record_pressed = 1;
 80039c0:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <VibeCheck_Loop+0x5e8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
	}
}
 80039c6:	bf00      	nop
 80039c8:	372c      	adds	r7, #44	@ 0x2c
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00000000 	.word	0x00000000
 80039d4:	406fe000 	.word	0x406fe000
 80039d8:	00012b10 	.word	0x00012b10
 80039dc:	0001248c 	.word	0x0001248c
 80039e0:	00012a8c 	.word	0x00012a8c
 80039e4:	00012a24 	.word	0x00012a24
 80039e8:	00012a90 	.word	0x00012a90
 80039ec:	00012a94 	.word	0x00012a94
 80039f0:	00012a0c 	.word	0x00012a0c
 80039f4:	24000008 	.word	0x24000008
 80039f8:	24000014 	.word	0x24000014
 80039fc:	0801e448 	.word	0x0801e448
 8003a00:	24000020 	.word	0x24000020
 8003a04:	2400002c 	.word	0x2400002c
 8003a08:	0801e454 	.word	0x0801e454
 8003a0c:	240144c4 	.word	0x240144c4
 8003a10:	58020000 	.word	0x58020000
 8003a14:	240144d4 	.word	0x240144d4
 8003a18:	240144d0 	.word	0x240144d0
 8003a1c:	240144cc 	.word	0x240144cc
 8003a20:	00011428 	.word	0x00011428
 8003a24:	240144c8 	.word	0x240144c8
 8003a28:	240144d8 	.word	0x240144d8

08003a2c <VibeCheckRecordCMD_Execute>:
#include "vibecheck_button_handler.h"

uint32_t is_muted, mute_pressed, record_pressed;

uint32_t VibeCheckRecordCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b092      	sub	sp, #72	@ 0x48
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	/* for host to set recording LED */
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	2240      	movs	r2, #64	@ 0x40
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f002 fa64 	bl	8005f0c <VibeCheckShell_GetNextString>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02f      	beq.n	8003aaa <VibeCheckRecordCMD_Execute+0x7e>
	{
		if (!strcmp(str, "start"))
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	4919      	ldr	r1, [pc, #100]	@ (8003ab4 <VibeCheckRecordCMD_Execute+0x88>)
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fc5d 	bl	8000310 <strcmp>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10e      	bne.n	8003a7a <VibeCheckRecordCMD_Execute+0x4e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_SET); /* turn on the record LED */
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a62:	4815      	ldr	r0, [pc, #84]	@ (8003ab8 <VibeCheckRecordCMD_Execute+0x8c>)
 8003a64:	f008 f946 	bl	800bcf4 <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003a68:	4914      	ldr	r1, [pc, #80]	@ (8003abc <VibeCheckRecordCMD_Execute+0x90>)
 8003a6a:	6838      	ldr	r0, [r7, #0]
 8003a6c:	f002 fb6e 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f002 fbeb 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e018      	b.n	8003aac <VibeCheckRecordCMD_Execute+0x80>
		}
		else if (!strcmp(str, "stop"))
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4910      	ldr	r1, [pc, #64]	@ (8003ac0 <VibeCheckRecordCMD_Execute+0x94>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fc45 	bl	8000310 <strcmp>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10e      	bne.n	8003aaa <VibeCheckRecordCMD_Execute+0x7e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET); /* turn off the record LED */
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a92:	4809      	ldr	r0, [pc, #36]	@ (8003ab8 <VibeCheckRecordCMD_Execute+0x8c>)
 8003a94:	f008 f92e 	bl	800bcf4 <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003a98:	4908      	ldr	r1, [pc, #32]	@ (8003abc <VibeCheckRecordCMD_Execute+0x90>)
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f002 fb56 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f002 fbd3 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <VibeCheckRecordCMD_Execute+0x80>
		}
	}

	return 0;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3748      	adds	r7, #72	@ 0x48
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	0801dbc8 	.word	0x0801dbc8
 8003ab8:	58020400 	.word	0x58020400
 8003abc:	0801dbd0 	.word	0x0801dbd0
 8003ac0:	0801dbd4 	.word	0x0801dbd4

08003ac4 <VibeCheckMuteSender_Execute>:

uint32_t VibeCheckMuteSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
	/* mute button */
	if (mute_pressed)
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <VibeCheckMuteSender_Execute+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01b      	beq.n	8003b0e <VibeCheckMuteSender_Execute+0x4a>
	{
		mute_pressed = 0;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <VibeCheckMuteSender_Execute+0x54>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003adc:	490f      	ldr	r1, [pc, #60]	@ (8003b1c <VibeCheckMuteSender_Execute+0x58>)
 8003ade:	6838      	ldr	r0, [r7, #0]
 8003ae0:	f002 fb34 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	f002 fba3 	bl	8006230 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <VibeCheckMuteSender_Execute+0x5c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <VibeCheckMuteSender_Execute+0x38>
			VibeCheckShell_PutOutputString(shell, "muted");
 8003af2:	490c      	ldr	r1, [pc, #48]	@ (8003b24 <VibeCheckMuteSender_Execute+0x60>)
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f002 fb29 	bl	800614c <VibeCheckShell_PutOutputString>
 8003afa:	e003      	b.n	8003b04 <VibeCheckMuteSender_Execute+0x40>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8003afc:	490a      	ldr	r1, [pc, #40]	@ (8003b28 <VibeCheckMuteSender_Execute+0x64>)
 8003afe:	6838      	ldr	r0, [r7, #0]
 8003b00:	f002 fb24 	bl	800614c <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8003b04:	6838      	ldr	r0, [r7, #0]
 8003b06:	f002 fba1 	bl	800624c <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <VibeCheckMuteSender_Execute+0x4c>
	}

	return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	240144d4 	.word	0x240144d4
 8003b1c:	0801dbdc 	.word	0x0801dbdc
 8003b20:	240144d0 	.word	0x240144d0
 8003b24:	0801dbe4 	.word	0x0801dbe4
 8003b28:	0801dbec 	.word	0x0801dbec

08003b2c <VibeCheckRecordSender_Execute>:


uint32_t VibeCheckRecordSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	/* record button */
	if (record_pressed)
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <VibeCheckRecordSender_Execute+0x44>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <VibeCheckRecordSender_Execute+0x38>
	{
		record_pressed = 0;
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <VibeCheckRecordSender_Execute+0x44>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003b44:	490b      	ldr	r1, [pc, #44]	@ (8003b74 <VibeCheckRecordSender_Execute+0x48>)
 8003b46:	6838      	ldr	r0, [r7, #0]
 8003b48:	f002 fb00 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003b4c:	6838      	ldr	r0, [r7, #0]
 8003b4e:	f002 fb6f 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "record");
 8003b52:	4909      	ldr	r1, [pc, #36]	@ (8003b78 <VibeCheckRecordSender_Execute+0x4c>)
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	f002 faf9 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputDelimiter(shell);
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	f002 fb76 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <VibeCheckRecordSender_Execute+0x3a>
	}

	return 0;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	240144d8 	.word	0x240144d8
 8003b74:	0801dbdc 	.word	0x0801dbdc
 8003b78:	0801dbf4 	.word	0x0801dbf4

08003b7c <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fb17 	bl	80021c0 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fb11 	bl	80021c0 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2263      	movs	r2, #99	@ 0x63
 8003bac:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e008      	b.n	8003bcc <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	3210      	adds	r2, #16
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 8003bd2:	d3f2      	bcc.n	8003bba <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f94a 	bl	8003e6e <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f961 	bl	8003ea2 <VibeCheckRGB_SendColors>
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003bf0:	f003 fe08 	bl	8007804 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003bfc:	f107 0210 	add.w	r2, r7, #16
 8003c00:	6979      	ldr	r1, [r7, #20]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fb0e 	bl	8002224 <Sequencer_Update>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e01e      	b.n	8003c52 <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	441a      	add	r2, r3
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	441a      	add	r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	18ca      	adds	r2, r1, r3
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	8811      	ldrh	r1, [r2, #0]
 8003c34:	7892      	ldrb	r2, [r2, #2]
 8003c36:	8019      	strh	r1, [r3, #0]
 8003c38:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003c3a:	7b3a      	ldrb	r2, [r7, #12]
 8003c3c:	7b79      	ldrb	r1, [r7, #13]
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	460b      	mov	r3, r1
 8003c44:	69f9      	ldr	r1, [r7, #28]
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8b9 	bl	8003dbe <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d9dd      	bls.n	8003c14 <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f922 	bl	8003ea2 <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003c5e:	e03c      	b.n	8003cda <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fb3f 	bl	80022ea <Sequencer_IsRunning>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d133      	bne.n	8003cda <VibeCheckRGB_Update+0xf2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003c78:	f107 0210 	add.w	r2, r7, #16
 8003c7c:	6979      	ldr	r1, [r7, #20]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fad0 	bl	8002224 <Sequencer_Update>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d027      	beq.n	8003cda <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e01e      	b.n	8003cce <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	441a      	add	r2, r3
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	18ca      	adds	r2, r1, r3
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	8811      	ldrh	r1, [r2, #0]
 8003cb0:	7892      	ldrb	r2, [r2, #2]
 8003cb2:	8019      	strh	r1, [r3, #0]
 8003cb4:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003cb6:	7a3a      	ldrb	r2, [r7, #8]
 8003cb8:	7a79      	ldrb	r1, [r7, #9]
 8003cba:	7abb      	ldrb	r3, [r7, #10]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f87b 	bl	8003dbe <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d9dd      	bls.n	8003c90 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8e4 	bl	8003ea2 <VibeCheckRGB_SendColors>
}
 8003cda:	bf00      	nop
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003cfe:	2301      	movs	r3, #1
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	f7fe fa78 	bl	80021f8 <Sequencer_SetSequence>
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003d1e:	f003 fd71 	bl	8007804 <HAL_GetTick>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4619      	mov	r1, r3
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7fe fabe 	bl	80022a8 <Sequencer_Start>
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}

08003d34 <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fac4 	bl	80022d0 <Sequencer_Stop>
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	f7fe fa41 	bl	80021f8 <Sequencer_SetSequence>
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003d7e:	b590      	push	{r4, r7, lr}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 8003d8c:	f003 fd3a 	bl	8007804 <HAL_GetTick>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7fe fa87 	bl	80022a8 <Sequencer_Start>
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd90      	pop	{r4, r7, pc}

08003da2 <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fa8d 	bl	80022d0 <Sequencer_Stop>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	71fb      	strb	r3, [r7, #7]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d901      	bls.n	8003dde <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003dda:	2308      	movs	r3, #8
 8003ddc:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	3304      	adds	r3, #4
 8003dec:	79fa      	ldrb	r2, [r7, #7]
 8003dee:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003df0:	68f9      	ldr	r1, [r7, #12]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3305      	adds	r3, #5
 8003dfe:	79ba      	ldrb	r2, [r7, #6]
 8003e00:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3306      	adds	r3, #6
 8003e10:	7e3a      	ldrb	r2, [r7, #24]
 8003e12:	701a      	strb	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d901      	bls.n	8003e34 <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003e30:	2308      	movs	r3, #8
 8003e32:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	18ca      	adds	r2, r1, r3
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	3204      	adds	r2, #4
 8003e46:	8811      	ldrh	r1, [r2, #0]
 8003e48:	7892      	ldrb	r2, [r2, #2]
 8003e4a:	8019      	strh	r1, [r3, #0]
 8003e4c:	709a      	strb	r2, [r3, #2]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	7b3a      	ldrb	r2, [r7, #12]
 8003e52:	f362 0307 	bfi	r3, r2, #0, #8
 8003e56:	7b7a      	ldrb	r2, [r7, #13]
 8003e58:	f362 230f 	bfi	r3, r2, #8, #8
 8003e5c:	7bba      	ldrb	r2, [r7, #14]
 8003e5e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e00a      	b.n	8003e92 <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2200      	movs	r2, #0
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ff99 	bl	8003dbe <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d9f1      	bls.n	8003e7c <VibeCheckRGB_SetAllOff+0xe>
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8003eaa:	23e0      	movs	r3, #224	@ 0xe0
 8003eac:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e06e      	b.n	8003f92 <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e01d      	b.n	8003ef6 <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3305      	adds	r3, #5
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	fa42 f303 	asr.w	r3, r2, r3
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <VibeCheckRGB_SendColors+0x3e>
 8003edc:	2130      	movs	r1, #48	@ 0x30
 8003ede:	e000      	b.n	8003ee2 <VibeCheckRGB_SendColors+0x40>
 8003ee0:	2118      	movs	r1, #24
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	61fa      	str	r2, [r7, #28]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	3310      	adds	r3, #16
 8003eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1de      	bne.n	8003eba <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003efc:	2308      	movs	r3, #8
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e01d      	b.n	8003f3e <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3304      	adds	r3, #4
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	fa42 f303 	asr.w	r3, r2, r3
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <VibeCheckRGB_SendColors+0x86>
 8003f24:	2130      	movs	r1, #48	@ 0x30
 8003f26:	e000      	b.n	8003f2a <VibeCheckRGB_SendColors+0x88>
 8003f28:	2118      	movs	r1, #24
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	61fa      	str	r2, [r7, #28]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	3310      	adds	r3, #16
 8003f34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1de      	bne.n	8003f02 <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003f44:	2308      	movs	r3, #8
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e01d      	b.n	8003f86 <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	3306      	adds	r3, #6
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	fa42 f303 	asr.w	r3, r2, r3
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <VibeCheckRGB_SendColors+0xce>
 8003f6c:	2130      	movs	r1, #48	@ 0x30
 8003f6e:	e000      	b.n	8003f72 <VibeCheckRGB_SendColors+0xd0>
 8003f70:	2118      	movs	r1, #24
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	61fa      	str	r2, [r7, #28]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1de      	bne.n	8003f4a <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d98d      	bls.n	8003eb4 <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f103 0220 	add.w	r2, r3, #32
 8003fa2:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f00e f8e4 	bl	8012174 <HAL_TIM_PWM_Start_DMA>
}
 8003fac:	bf00      	nop
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b09c      	sub	sp, #112	@ 0x70
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc6:	2240      	movs	r2, #64	@ 0x40
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6838      	ldr	r0, [r7, #0]
 8003fcc:	f001 ff9e 	bl	8005f0c <VibeCheckShell_GetNextString>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80c2 	beq.w	800415c <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fdc:	4962      	ldr	r1, [pc, #392]	@ (8004168 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc f996 	bl	8000310 <strcmp>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d141      	bne.n	800406e <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003fea:	f107 0320 	add.w	r3, r7, #32
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	f002 f803 	bl	8005ffc <VibeCheckShell_GetNextInt>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80af 	beq.w	800415c <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003ffe:	f107 031c 	add.w	r3, r7, #28
 8004002:	4619      	mov	r1, r3
 8004004:	6838      	ldr	r0, [r7, #0]
 8004006:	f001 fff9 	bl	8005ffc <VibeCheckShell_GetNextInt>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a5 	beq.w	800415c <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8004012:	f107 0318 	add.w	r3, r7, #24
 8004016:	4619      	mov	r1, r3
 8004018:	6838      	ldr	r0, [r7, #0]
 800401a:	f001 ffef 	bl	8005ffc <VibeCheckShell_GetNextInt>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 809b 	beq.w	800415c <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8004026:	f107 0314 	add.w	r3, r7, #20
 800402a:	4619      	mov	r1, r3
 800402c:	6838      	ldr	r0, [r7, #0]
 800402e:	f001 ffe5 	bl	8005ffc <VibeCheckShell_GetNextInt>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8091 	beq.w	800415c <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	4618      	mov	r0, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	460b      	mov	r3, r1
 800404e:	4601      	mov	r1, r0
 8004050:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004052:	f7ff feb4 	bl	8003dbe <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 8004056:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004058:	f7ff ff23 	bl	8003ea2 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 800405c:	4943      	ldr	r1, [pc, #268]	@ (800416c <VibeCheckRGBCMD_Execute+0x1b8>)
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	f002 f874 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f002 f8f1 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800406a:	2301      	movs	r3, #1
 800406c:	e077      	b.n	800415e <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 800406e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004072:	493f      	ldr	r1, [pc, #252]	@ (8004170 <VibeCheckRGBCMD_Execute+0x1bc>)
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc f94b 	bl	8000310 <strcmp>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d137      	bne.n	80040f0 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8004080:	f107 0310 	add.w	r3, r7, #16
 8004084:	4619      	mov	r1, r3
 8004086:	6838      	ldr	r0, [r7, #0]
 8004088:	f001 ffb8 	bl	8005ffc <VibeCheckShell_GetNextInt>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d064      	beq.n	800415c <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4619      	mov	r1, r3
 8004096:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004098:	f7ff fec2 	bl	8003e20 <VibeCheckRGB_GetColor>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	733a      	strb	r2, [r7, #12]
 80040a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80040a6:	737a      	strb	r2, [r7, #13]
 80040a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80040ac:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 80040ae:	492f      	ldr	r1, [pc, #188]	@ (800416c <VibeCheckRGBCMD_Execute+0x1b8>)
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f002 f84b 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 80040b6:	6838      	ldr	r0, [r7, #0]
 80040b8:	f002 f8ba 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 80040bc:	7b3b      	ldrb	r3, [r7, #12]
 80040be:	4619      	mov	r1, r3
 80040c0:	6838      	ldr	r0, [r7, #0]
 80040c2:	f002 f87f 	bl	80061c4 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f002 f8b2 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 80040cc:	7b7b      	ldrb	r3, [r7, #13]
 80040ce:	4619      	mov	r1, r3
 80040d0:	6838      	ldr	r0, [r7, #0]
 80040d2:	f002 f877 	bl	80061c4 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f002 f8aa 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	4619      	mov	r1, r3
 80040e0:	6838      	ldr	r0, [r7, #0]
 80040e2:	f002 f86f 	bl	80061c4 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f002 f8b0 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e036      	b.n	800415e <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 80040f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f4:	491f      	ldr	r1, [pc, #124]	@ (8004174 <VibeCheckRGBCMD_Execute+0x1c0>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc f90a 	bl	8000310 <strcmp>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10e      	bne.n	8004120 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8004102:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004104:	f7ff fe04 	bl	8003d10 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8004108:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800410a:	f7ff fe38 	bl	8003d7e <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 800410e:	4917      	ldr	r1, [pc, #92]	@ (800416c <VibeCheckRGBCMD_Execute+0x1b8>)
 8004110:	6838      	ldr	r0, [r7, #0]
 8004112:	f002 f81b 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004116:	6838      	ldr	r0, [r7, #0]
 8004118:	f002 f898 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800411c:	2301      	movs	r3, #1
 800411e:	e01e      	b.n	800415e <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8004120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004124:	4914      	ldr	r1, [pc, #80]	@ (8004178 <VibeCheckRGBCMD_Execute+0x1c4>)
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc f8f2 	bl	8000310 <strcmp>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d114      	bne.n	800415c <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8004132:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004134:	f7ff fdfe 	bl	8003d34 <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8004138:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800413a:	f7ff fe32 	bl	8003da2 <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 800413e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004140:	f7ff fe95 	bl	8003e6e <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8004144:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004146:	f7ff feac 	bl	8003ea2 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 800414a:	4908      	ldr	r1, [pc, #32]	@ (800416c <VibeCheckRGBCMD_Execute+0x1b8>)
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f001 fffd 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f002 f87a 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3768      	adds	r7, #104	@ 0x68
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0801dbfc 	.word	0x0801dbfc
 800416c:	0801dc00 	.word	0x0801dc00
 8004170:	0801dc04 	.word	0x0801dc04
 8004174:	0801dc08 	.word	0x0801dc08
 8004178:	0801dc10 	.word	0x0801dc10

0800417c <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 800417c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417e:	b0a1      	sub	sp, #132	@ 0x84
 8004180:	af06      	add	r7, sp, #24
 8004182:	6178      	str	r0, [r7, #20]
 8004184:	6139      	str	r1, [r7, #16]
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004190:	461a      	mov	r2, r3
 8004192:	2300      	movs	r3, #0
 8004194:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	sensor->data_ready = 0;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419e:	461a      	mov	r2, r3
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
	sensor->data_packet_size = VC_SENSOR_DEFAULT_PACKET_SIZE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ac:	461a      	mov	r2, r3
 80041ae:	230a      	movs	r3, #10
 80041b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	sensor->time_prev_update = 0;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	sensor->generate_fake_data = 0;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	sensor->time_micros = time_micros;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d6:	461a      	mov	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041e2:	e04a      	b.n	800427a <VibeCheckSensor_Init+0xfe>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	3304      	adds	r3, #4
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3308      	adds	r3, #8
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	330c      	adds	r3, #12
 8004234:	2234      	movs	r2, #52	@ 0x34
 8004236:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8004238:	6979      	ldr	r1, [r7, #20]
 800423a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3310      	adds	r3, #16
 8004248:	2204      	movs	r2, #4
 800424a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 800424c:	6979      	ldr	r1, [r7, #20]
 800424e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3314      	adds	r3, #20
 800425c:	2234      	movs	r2, #52	@ 0x34
 800425e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3318      	adds	r3, #24
 8004270:	227d      	movs	r2, #125	@ 0x7d
 8004272:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004276:	3301      	adds	r3, #1
 8004278:	667b      	str	r3, [r7, #100]	@ 0x64
 800427a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800427c:	2b02      	cmp	r3, #2
 800427e:	d9b1      	bls.n	80041e4 <VibeCheckSensor_Init+0x68>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	657b      	str	r3, [r7, #84]	@ 0x54
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800428c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 800428e:	4a49      	ldr	r2, [pc, #292]	@ (80043b4 <VibeCheckSensor_Init+0x238>)
 8004290:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004294:	ca07      	ldmia	r2, {r0, r1, r2}
 8004296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 800429a:	4a47      	ldr	r2, [pc, #284]	@ (80043b8 <VibeCheckSensor_Init+0x23c>)
 800429c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80042a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042a4:	6018      	str	r0, [r3, #0]
 80042a6:	3304      	adds	r3, #4
 80042a8:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 80042aa:	4a44      	ldr	r2, [pc, #272]	@ (80043bc <VibeCheckSensor_Init+0x240>)
 80042ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80042b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 80042b6:	4a42      	ldr	r2, [pc, #264]	@ (80043c0 <VibeCheckSensor_Init+0x244>)
 80042b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042c0:	6018      	str	r0, [r3, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 80042c6:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <VibeCheckSensor_Init+0x248>)
 80042c8:	f107 0320 	add.w	r3, r7, #32
 80042cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80042ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 80042d2:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <VibeCheckSensor_Init+0x24c>)
 80042d4:	f107 0318 	add.w	r3, r7, #24
 80042d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042dc:	6018      	str	r0, [r3, #0]
 80042de:	3304      	adds	r3, #4
 80042e0:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e6:	e05c      	b.n	80043a2 <VibeCheckSensor_Init+0x226>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 80042e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	3350      	adds	r3, #80	@ 0x50
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4413      	add	r3, r2
 80042f8:	1d1d      	adds	r5, r3, #4
 80042fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	18d6      	adds	r6, r2, r3
 8004308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3360      	adds	r3, #96	@ 0x60
 800430e:	f107 0208 	add.w	r2, r7, #8
 8004312:	4413      	add	r3, r2
 8004314:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	18cb      	adds	r3, r1, r3
 8004328:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	18c3      	adds	r3, r0, r3
 800433c:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8004340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	18c3      	adds	r3, r0, r3
 800434e:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8004352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	18c3      	adds	r3, r0, r3
 8004360:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8004364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	18e3      	adds	r3, r4, r3
 8004372:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8004376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	3360      	adds	r3, #96	@ 0x60
 800437c:	f107 0c08 	add.w	ip, r7, #8
 8004380:	4463      	add	r3, ip
 8004382:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	9403      	str	r4, [sp, #12]
 800438a:	9002      	str	r0, [sp, #8]
 800438c:	9101      	str	r1, [sp, #4]
 800438e:	9200      	str	r2, [sp, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4631      	mov	r1, r6
 8004396:	4628      	mov	r0, r5
 8004398:	f7fc fb8e 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800439c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800439e:	3301      	adds	r3, #1
 80043a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d99f      	bls.n	80042e8 <VibeCheckSensor_Init+0x16c>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	376c      	adds	r7, #108	@ 0x6c
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	0801dc18 	.word	0x0801dc18
 80043b8:	0801dc24 	.word	0x0801dc24
 80043bc:	0801dc2c 	.word	0x0801dc2c
 80043c0:	0801dc38 	.word	0x0801dc38
 80043c4:	0801dc40 	.word	0x0801dc40
 80043c8:	0801dc4c 	.word	0x0801dc4c

080043cc <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80043d4:	f003 fa16 	bl	8007804 <HAL_GetTick>
 80043d8:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043ec:	f240 8118 	bls.w	8004620 <VibeCheckSensor_Update+0x254>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e0ac      	b.n	8004550 <VibeCheckSensor_Update+0x184>
		{
			if (!sensor->status[i].is_connected)
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	33fc      	adds	r3, #252	@ 0xfc
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d134      	bne.n	8004476 <VibeCheckSensor_Update+0xaa>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	3350      	adds	r3, #80	@ 0x50
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	3304      	adds	r3, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc fb74 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 808f 	beq.w	800454a <VibeCheckSensor_Update+0x17e>
				{
					sensor->status[i].is_connected = 1;
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	33fc      	adds	r3, #252	@ 0xfc
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fc37 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
 8004474:	e069      	b.n	800454a <VibeCheckSensor_Update+0x17e>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d130      	bne.n	80044f0 <VibeCheckSensor_Update+0x124>
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d124      	bne.n	80044f0 <VibeCheckSensor_Update+0x124>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3350      	adds	r3, #80	@ 0x50
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fb27 	bl	8000b0c <LSM6DS3_TestCommunication>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d142      	bne.n	800454a <VibeCheckSensor_Update+0x17e>
					{
						sensor->status[i].is_connected = 0;
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	33fc      	adds	r3, #252	@ 0xfc
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80044ee:	e02c      	b.n	800454a <VibeCheckSensor_Update+0x17e>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <VibeCheckSensor_Update+0x154>
					{
						sensor->status[i].received_data_flag = 0;
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e014      	b.n	800454a <VibeCheckSensor_Update+0x17e>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	33fc      	adds	r3, #252	@ 0xfc
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b02      	cmp	r3, #2
 8004554:	f67f af4f 	bls.w	80043f6 <VibeCheckSensor_Update+0x2a>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d055      	beq.n	8004612 <VibeCheckSensor_Update+0x246>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004570:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004628 <VibeCheckSensor_Update+0x25c>
 8004574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004578:	eeb0 0a67 	vmov.f32	s0, s15
 800457c:	f018 fca8 	bl	801ced0 <sinf>
 8004580:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004628 <VibeCheckSensor_Update+0x25c>
 8004592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004596:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800462c <VibeCheckSensor_Update+0x260>
 800459a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800459e:	eeb0 0a67 	vmov.f32	s0, s15
 80045a2:	f018 fc95 	bl	801ced0 <sinf>
 80045a6:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004628 <VibeCheckSensor_Update+0x25c>
 80045b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045bc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004630 <VibeCheckSensor_Update+0x264>
 80045c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c4:	eeb0 0a67 	vmov.f32	s0, s15
 80045c8:	f018 fc82 	bl	801ced0 <sinf>
 80045cc:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 80045d0:	ed97 1a03 	vldr	s2, [r7, #12]
 80045d4:	edd7 0a04 	vldr	s1, [r7, #16]
 80045d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	2101      	movs	r1, #1
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fbd3 	bl	8004d8c <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 80045e6:	ed97 1a04 	vldr	s2, [r7, #16]
 80045ea:	edd7 0a05 	vldr	s1, [r7, #20]
 80045ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	2102      	movs	r1, #2
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fbc8 	bl	8004d8c <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 80045fc:	ed97 1a05 	vldr	s2, [r7, #20]
 8004600:	edd7 0a03 	vldr	s1, [r7, #12]
 8004604:	ed97 0a04 	vldr	s0, [r7, #16]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	2103      	movs	r1, #3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fbbd 	bl	8004d8c <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004618:	461a      	mov	r2, r3
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	}
}
 8004620:	bf00      	nop
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40c90fd0 	.word	0x40c90fd0
 800462c:	3f860a8b 	.word	0x3f860a8b
 8004630:	40060a8b 	.word	0x40060a8b

08004634 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <VibeCheckSensor_StartAccel+0x14>
 8004644:	2302      	movs	r3, #2
 8004646:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	33fc      	adds	r3, #252	@ 0xfc
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <VibeCheckSensor_StartAccel+0x5a>
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	3350      	adds	r3, #80	@ 0x50
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc fafd 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <VibeCheckSensor_StopAccel+0x14>
 80046bc:	2302      	movs	r3, #2
 80046be:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	33fc      	adds	r3, #252	@ 0xfc
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d017      	beq.n	8004706 <VibeCheckSensor_StopAccel+0x5a>
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3350      	adds	r3, #80	@ 0x50
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fc fbfb 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <VibeCheckSensor_StartGyro+0x14>
 8004734:	2302      	movs	r3, #2
 8004736:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	33fc      	adds	r3, #252	@ 0xfc
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d017      	beq.n	800477e <VibeCheckSensor_StartGyro+0x5a>
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	3350      	adds	r3, #80	@ 0x50
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc fb27 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <VibeCheckSensor_StopGyro+0x14>
 80047ac:	2302      	movs	r3, #2
 80047ae:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	33fc      	adds	r3, #252	@ 0xfc
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <VibeCheckSensor_StopGyro+0x5a>
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	3350      	adds	r3, #80	@ 0x50
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc fb91 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <VibeCheckSensor_SetAccelODR+0x16>
 8004826:	2302      	movs	r3, #2
 8004828:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	210a      	movs	r1, #10
 800482e:	480a      	ldr	r0, [pc, #40]	@ (8004858 <VibeCheckSensor_SetAccelODR+0x44>)
 8004830:	f7fe fbb8 	bl	8002fa4 <FindClosest>
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	330c      	adds	r3, #12
 8004844:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa4a 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	0801e460 	.word	0x0801e460

0800485c <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <VibeCheckSensor_SetGyroODR+0x16>
 800486e:	2302      	movs	r3, #2
 8004870:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	210a      	movs	r1, #10
 8004876:	480a      	ldr	r0, [pc, #40]	@ (80048a0 <VibeCheckSensor_SetGyroODR+0x44>)
 8004878:	f7fe fb94 	bl	8002fa4 <FindClosest>
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	3314      	adds	r3, #20
 800488c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fa26 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0801e460 	.word	0x0801e460

080048a4 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <VibeCheckSensor_SetAccelRange+0x16>
 80048b6:	2302      	movs	r3, #2
 80048b8:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	2104      	movs	r1, #4
 80048be:	480a      	ldr	r0, [pc, #40]	@ (80048e8 <VibeCheckSensor_SetAccelRange+0x44>)
 80048c0:	f7fe fb70 	bl	8002fa4 <FindClosest>
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3310      	adds	r3, #16
 80048d4:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fa02 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	0801e488 	.word	0x0801e488

080048ec <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <VibeCheckSensor_SetGyroRange+0x16>
 80048fe:	2302      	movs	r3, #2
 8004900:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	2105      	movs	r1, #5
 8004906:	480a      	ldr	r0, [pc, #40]	@ (8004930 <VibeCheckSensor_SetGyroRange+0x44>)
 8004908:	f7fe fb4c 	bl	8002fa4 <FindClosest>
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3318      	adds	r3, #24
 800491c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9de 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	0801e498 	.word	0x0801e498

08004934 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6178      	str	r0, [r7, #20]
 800493c:	6139      	str	r1, [r7, #16]
 800493e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004942:	edc7 0a02 	vstr	s1, [r7, #8]
 8004946:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <VibeCheckSensor_SetOffsets+0x20>
 8004950:	2302      	movs	r3, #2
 8004952:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004954:	edd7 7a03 	vldr	s15, [r7, #12]
 8004958:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004a24 <VibeCheckSensor_SetOffsets+0xf0>
 800495c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	dd01      	ble.n	800496a <VibeCheckSensor_SetOffsets+0x36>
 8004966:	4b30      	ldr	r3, [pc, #192]	@ (8004a28 <VibeCheckSensor_SetOffsets+0xf4>)
 8004968:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 800496a:	edd7 7a03 	vldr	s15, [r7, #12]
 800496e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004a2c <VibeCheckSensor_SetOffsets+0xf8>
 8004972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	d501      	bpl.n	8004980 <VibeCheckSensor_SetOffsets+0x4c>
 800497c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <VibeCheckSensor_SetOffsets+0xfc>)
 800497e:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004980:	edd7 7a02 	vldr	s15, [r7, #8]
 8004984:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004a24 <VibeCheckSensor_SetOffsets+0xf0>
 8004988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	dd01      	ble.n	8004996 <VibeCheckSensor_SetOffsets+0x62>
 8004992:	4b25      	ldr	r3, [pc, #148]	@ (8004a28 <VibeCheckSensor_SetOffsets+0xf4>)
 8004994:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004996:	edd7 7a02 	vldr	s15, [r7, #8]
 800499a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004a2c <VibeCheckSensor_SetOffsets+0xf8>
 800499e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	d501      	bpl.n	80049ac <VibeCheckSensor_SetOffsets+0x78>
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <VibeCheckSensor_SetOffsets+0xfc>)
 80049aa:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 80049ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80049b0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004a24 <VibeCheckSensor_SetOffsets+0xf0>
 80049b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	dd01      	ble.n	80049c2 <VibeCheckSensor_SetOffsets+0x8e>
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <VibeCheckSensor_SetOffsets+0xf4>)
 80049c0:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 80049c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80049c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004a2c <VibeCheckSensor_SetOffsets+0xf8>
 80049ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d501      	bpl.n	80049d8 <VibeCheckSensor_SetOffsets+0xa4>
 80049d4:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <VibeCheckSensor_SetOffsets+0xfc>)
 80049d6:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 80049ea:	6979      	ldr	r1, [r7, #20]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3304      	adds	r3, #4
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004a12:	6939      	ldr	r1, [r7, #16]
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	f000 f964 	bl	8004ce2 <VibeCheckSensor_UpdateSensor>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	3dfe0000 	.word	0x3dfe0000
 8004a28:	3dfe0000 	.word	0x3dfe0000
 8004a2c:	bdfe0000 	.word	0xbdfe0000
 8004a30:	bdfe0000 	.word	0xbdfe0000

08004a34 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <VibeCheckSensor_GetAccelODR+0x14>
 8004a44:	2302      	movs	r3, #2
 8004a46:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	330c      	adds	r3, #12
 8004a58:	681b      	ldr	r3, [r3, #0]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <VibeCheckSensor_GetGyroODR+0x14>
 8004a76:	2302      	movs	r3, #2
 8004a78:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3314      	adds	r3, #20
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <VibeCheckSensor_GetAccelRange+0x14>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	3310      	adds	r3, #16
 8004abc:	681b      	ldr	r3, [r3, #0]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <VibeCheckSensor_GetGyroRange+0x14>
 8004ada:	2302      	movs	r3, #2
 8004adc:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	3318      	adds	r3, #24
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <VibeCheckSensor_GetOffsets+0x18>
 8004b10:	2302      	movs	r3, #2
 8004b12:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004b14:	68f9      	ldr	r1, [r7, #12]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	3304      	adds	r3, #4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2301      	movs	r3, #1
 8004b72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <VibeCheckSensor_SetPacketSize>:


void VibeCheckSensor_SetPacketSize(VibeCheckSensor* sensor, uint32_t size)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	if (size < 1) size = 1;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <VibeCheckSensor_SetPacketSize+0x14>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	603b      	str	r3, [r7, #0]
	if (size > VC_SENSOR_MAX_PACKET_SIZE) size = VC_SENSOR_MAX_PACKET_SIZE;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d901      	bls.n	8004bc2 <VibeCheckSensor_SetPacketSize+0x1e>
 8004bbe:	2364      	movs	r3, #100	@ 0x64
 8004bc0:	603b      	str	r3, [r7, #0]

	/* reset the state of the data buffer */
	sensor->data_packet_size = size;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc8:	461a      	mov	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	sensor->data_ready = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
	sensor->data_ind = 0;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004be4:	461a      	mov	r2, r3
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <VibeCheckSensor_GetPacketSize>:


uint32_t VibeCheckSensor_GetPacketSize(VibeCheckSensor* sensor)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	return sensor->data_packet_size;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <VibeCheckSensor_IsConnected+0x14>
 8004c26:	2302      	movs	r3, #2
 8004c28:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	33fc      	adds	r3, #252	@ 0xfc
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e01e      	b.n	8004c98 <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00f      	beq.n	8004c92 <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 8004c78:	68f9      	ldr	r1, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	33fc      	adds	r3, #252	@ 0xfc
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
			return 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e006      	b.n	8004ca0 <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3301      	adds	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d9dd      	bls.n	8004c5a <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <VibeCheckSensor_ResetConnectionFlag+0x14>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <VibeCheckSensor_UpdateSensor+0x14>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	33fc      	adds	r3, #252	@ 0xfc
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d03b      	beq.n	8004d84 <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	3350      	adds	r3, #80	@ 0x50
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb ff0e 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	3350      	adds	r3, #80	@ 0x50
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb ff9a 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	3350      	adds	r3, #80	@ 0x50
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fc f824 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6178      	str	r0, [r7, #20]
 8004d94:	460b      	mov	r3, r1
 8004d96:	60fa      	str	r2, [r7, #12]
 8004d98:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004da0:	ed87 1a00 	vstr	s2, [r7]
 8004da4:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004dc0:	7cfa      	ldrb	r2, [r7, #19]
 8004dc2:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e06:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e24:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e46:	3301      	adds	r3, #1
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	if (sensor->data_ind == sensor->data_packet_size)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e58:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d107      	bne.n	8004e7a <VibeCheckSensor_AddData+0xee>
	{
		sensor->data_ready = 1;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e70:	461a      	mov	r2, r3
 8004e72:	2301      	movs	r3, #1
 8004e74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 8004e78:	e01a      	b.n	8004eb0 <VibeCheckSensor_AddData+0x124>
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e80:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10d      	bne.n	8004eb0 <VibeCheckSensor_AddData+0x124>
		sensor->data_ind = 0;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		sensor->data_ready = 1;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d029      	beq.n	8004f28 <VibeCheckSensor_GetDataReady+0x6c>
	{
		sensor->data_ready = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eda:	461a      	mov	r2, r3
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
		if (sensor->data_ind < sensor->data_packet_size)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ee8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d20f      	bcs.n	8004f1a <VibeCheckSensor_GetDataReady+0x5e>
		{
			/* ready to send the second half */
			*data = &sensor->data[sensor->data_packet_size];
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	441a      	add	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e004      	b.n	8004f24 <VibeCheckSensor_GetDataReady+0x68>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <VibeCheckSensor_GetDataReady+0x6e>
	}
	return 0;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b08a      	sub	sp, #40	@ 0x28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f46:	e0ae      	b.n	80050a6 <VibeCheckSensor_EXTICallback+0x170>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3364      	adds	r3, #100	@ 0x64
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d148      	bne.n	8004ff2 <VibeCheckSensor_EXTICallback+0xbc>
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d03c      	beq.n	8004ff2 <VibeCheckSensor_EXTICallback+0xbc>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	3350      	adds	r3, #80	@ 0x50
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	1d18      	adds	r0, r3, #4
 8004f8a:	f107 0318 	add.w	r3, r7, #24
 8004f8e:	f107 021c 	add.w	r2, r7, #28
 8004f92:	f107 0120 	add.w	r1, r7, #32
 8004f96:	f7fb ffcd 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	b2d9      	uxtb	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fa8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fc2:	edd7 6a06 	vldr	s13, [r7, #24]
 8004fc6:	eeb0 1a66 	vmov.f32	s2, s13
 8004fca:	eef0 0a47 	vmov.f32	s1, s14
 8004fce:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fed9 	bl	8004d8c <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
			break;
 8004ff0:	e05e      	b.n	80050b0 <VibeCheckSensor_EXTICallback+0x17a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	440b      	add	r3, r1
 8005000:	336c      	adds	r3, #108	@ 0x6c
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	429a      	cmp	r2, r3
 8005008:	d14a      	bne.n	80050a0 <VibeCheckSensor_EXTICallback+0x16a>
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d03e      	beq.n	80050a0 <VibeCheckSensor_EXTICallback+0x16a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	3350      	adds	r3, #80	@ 0x50
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	1d18      	adds	r0, r3, #4
 8005034:	f107 030c 	add.w	r3, r7, #12
 8005038:	f107 0210 	add.w	r2, r7, #16
 800503c:	f107 0114 	add.w	r1, r7, #20
 8005040:	f7fc f806 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	b2db      	uxtb	r3, r3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	3301      	adds	r3, #1
 800504e:	b2d9      	uxtb	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005056:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	edd7 7a05 	vldr	s15, [r7, #20]
 800506c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005070:	edd7 6a03 	vldr	s13, [r7, #12]
 8005074:	eeb0 1a66 	vmov.f32	s2, s13
 8005078:	eef0 0a47 	vmov.f32	s1, s14
 800507c:	eeb0 0a67 	vmov.f32	s0, s15
 8005080:	461a      	mov	r2, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fe82 	bl	8004d8c <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
			break;
 800509e:	e007      	b.n	80050b0 <VibeCheckSensor_EXTICallback+0x17a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	3301      	adds	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	f67f af4d 	bls.w	8004f48 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3728      	adds	r7, #40	@ 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b09c      	sub	sp, #112	@ 0x70
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80050c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	4619      	mov	r1, r3
 80050cc:	68b8      	ldr	r0, [r7, #8]
 80050ce:	f000 ff1d 	bl	8005f0c <VibeCheckShell_GetNextString>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80eb 	beq.w	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 80050da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80050de:	4977      	ldr	r1, [pc, #476]	@ (80052bc <VibeCheckSensorCMD_Set+0x204>)
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb f915 	bl	8000310 <strcmp>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d14f      	bne.n	800518c <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80050ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80050f0:	2240      	movs	r2, #64	@ 0x40
 80050f2:	4619      	mov	r1, r3
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f000 ff09 	bl	8005f0c <VibeCheckShell_GetNextString>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80d7 	beq.w	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8005102:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005106:	496e      	ldr	r1, [pc, #440]	@ (80052c0 <VibeCheckSensorCMD_Set+0x208>)
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb f901 	bl	8000310 <strcmp>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d118      	bne.n	8005146 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8005114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005118:	4619      	mov	r1, r3
 800511a:	68b8      	ldr	r0, [r7, #8]
 800511c:	f000 ff6e 	bl	8005ffc <VibeCheckShell_GetNextInt>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80c4 	beq.w	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	461a      	mov	r2, r3
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fb70 	bl	8004814 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005134:	4963      	ldr	r1, [pc, #396]	@ (80052c4 <VibeCheckSensorCMD_Set+0x20c>)
 8005136:	68b8      	ldr	r0, [r7, #8]
 8005138:	f001 f808 	bl	800614c <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800513c:	68b8      	ldr	r0, [r7, #8]
 800513e:	f001 f885 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005142:	2301      	movs	r3, #1
 8005144:	e0b5      	b.n	80052b2 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8005146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800514a:	495f      	ldr	r1, [pc, #380]	@ (80052c8 <VibeCheckSensorCMD_Set+0x210>)
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb f8df 	bl	8000310 <strcmp>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 80ab 	bne.w	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 800515a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800515e:	4619      	mov	r1, r3
 8005160:	68b8      	ldr	r0, [r7, #8]
 8005162:	f000 ff4b 	bl	8005ffc <VibeCheckShell_GetNextInt>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a1 	beq.w	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	461a      	mov	r2, r3
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fb95 	bl	80048a4 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 800517a:	4952      	ldr	r1, [pc, #328]	@ (80052c4 <VibeCheckSensorCMD_Set+0x20c>)
 800517c:	68b8      	ldr	r0, [r7, #8]
 800517e:	f000 ffe5 	bl	800614c <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005182:	68b8      	ldr	r0, [r7, #8]
 8005184:	f001 f862 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005188:	2301      	movs	r3, #1
 800518a:	e092      	b.n	80052b2 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 800518c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005190:	494e      	ldr	r1, [pc, #312]	@ (80052cc <VibeCheckSensorCMD_Set+0x214>)
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb f8bc 	bl	8000310 <strcmp>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d14b      	bne.n	8005236 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800519e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80051a2:	2240      	movs	r2, #64	@ 0x40
 80051a4:	4619      	mov	r1, r3
 80051a6:	68b8      	ldr	r0, [r7, #8]
 80051a8:	f000 feb0 	bl	8005f0c <VibeCheckShell_GetNextString>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d07e      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 80051b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80051b6:	4942      	ldr	r1, [pc, #264]	@ (80052c0 <VibeCheckSensorCMD_Set+0x208>)
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb f8a9 	bl	8000310 <strcmp>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d117      	bne.n	80051f4 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 80051c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051c8:	4619      	mov	r1, r3
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	f000 ff16 	bl	8005ffc <VibeCheckShell_GetNextInt>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06c      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	461a      	mov	r2, r3
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fb3d 	bl	800485c <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 80051e2:	4938      	ldr	r1, [pc, #224]	@ (80052c4 <VibeCheckSensorCMD_Set+0x20c>)
 80051e4:	68b8      	ldr	r0, [r7, #8]
 80051e6:	f000 ffb1 	bl	800614c <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80051ea:	68b8      	ldr	r0, [r7, #8]
 80051ec:	f001 f82e 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e05e      	b.n	80052b2 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 80051f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80051f8:	4933      	ldr	r1, [pc, #204]	@ (80052c8 <VibeCheckSensorCMD_Set+0x210>)
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fb f888 	bl	8000310 <strcmp>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d154      	bne.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8005206:	f107 0320 	add.w	r3, r7, #32
 800520a:	4619      	mov	r1, r3
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f000 fef5 	bl	8005ffc <VibeCheckShell_GetNextInt>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d04b      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	461a      	mov	r2, r3
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fb64 	bl	80048ec <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005224:	4927      	ldr	r1, [pc, #156]	@ (80052c4 <VibeCheckSensorCMD_Set+0x20c>)
 8005226:	68b8      	ldr	r0, [r7, #8]
 8005228:	f000 ff90 	bl	800614c <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f001 f80d 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005232:	2301      	movs	r3, #1
 8005234:	e03d      	b.n	80052b2 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8005236:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800523a:	4925      	ldr	r1, [pc, #148]	@ (80052d0 <VibeCheckSensorCMD_Set+0x218>)
 800523c:	4618      	mov	r0, r3
 800523e:	f7fb f867 	bl	8000310 <strcmp>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d133      	bne.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8005248:	f107 031c 	add.w	r3, r7, #28
 800524c:	4619      	mov	r1, r3
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f000 fef0 	bl	8006034 <VibeCheckShell_GetNextFloat>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02a      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 800525a:	f107 0318 	add.w	r3, r7, #24
 800525e:	4619      	mov	r1, r3
 8005260:	68b8      	ldr	r0, [r7, #8]
 8005262:	f000 fee7 	bl	8006034 <VibeCheckShell_GetNextFloat>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d021      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4619      	mov	r1, r3
 8005272:	68b8      	ldr	r0, [r7, #8]
 8005274:	f000 fede 	bl	8006034 <VibeCheckShell_GetNextFloat>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 800527e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005282:	ed97 7a06 	vldr	s14, [r7, #24]
 8005286:	edd7 6a05 	vldr	s13, [r7, #20]
 800528a:	eeb0 1a66 	vmov.f32	s2, s13
 800528e:	eef0 0a47 	vmov.f32	s1, s14
 8005292:	eeb0 0a67 	vmov.f32	s0, s15
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fb4b 	bl	8004934 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 800529e:	4909      	ldr	r1, [pc, #36]	@ (80052c4 <VibeCheckSensorCMD_Set+0x20c>)
 80052a0:	68b8      	ldr	r0, [r7, #8]
 80052a2:	f000 ff53 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f000 ffd0 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3770      	adds	r7, #112	@ 0x70
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	0801dc54 	.word	0x0801dc54
 80052c0:	0801dc5c 	.word	0x0801dc5c
 80052c4:	0801dc60 	.word	0x0801dc60
 80052c8:	0801dc64 	.word	0x0801dc64
 80052cc:	0801dc6c 	.word	0x0801dc6c
 80052d0:	0801dc74 	.word	0x0801dc74

080052d4 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b09a      	sub	sp, #104	@ 0x68
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80052e0:	f107 0320 	add.w	r3, r7, #32
 80052e4:	2240      	movs	r2, #64	@ 0x40
 80052e6:	4619      	mov	r1, r3
 80052e8:	68b8      	ldr	r0, [r7, #8]
 80052ea:	f000 fe0f 	bl	8005f0c <VibeCheckShell_GetNextString>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80fb 	beq.w	80054ec <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 80052f6:	f107 0320 	add.w	r3, r7, #32
 80052fa:	497f      	ldr	r1, [pc, #508]	@ (80054f8 <VibeCheckSensorCMD_Get+0x224>)
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb f807 	bl	8000310 <strcmp>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d147      	bne.n	8005398 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005308:	f107 0320 	add.w	r3, r7, #32
 800530c:	2240      	movs	r2, #64	@ 0x40
 800530e:	4619      	mov	r1, r3
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f000 fdfb 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80e7 	beq.w	80054ec <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 800531e:	f107 0320 	add.w	r3, r7, #32
 8005322:	4976      	ldr	r1, [pc, #472]	@ (80054fc <VibeCheckSensorCMD_Get+0x228>)
 8005324:	4618      	mov	r0, r3
 8005326:	f7fa fff3 	bl	8000310 <strcmp>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d114      	bne.n	800535a <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005330:	4973      	ldr	r1, [pc, #460]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 8005332:	68b8      	ldr	r0, [r7, #8]
 8005334:	f000 ff0a 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005338:	68b8      	ldr	r0, [r7, #8]
 800533a:	f000 ff79 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff fb77 	bl	8004a34 <VibeCheckSensor_GetAccelODR>
 8005346:	4603      	mov	r3, r0
 8005348:	4619      	mov	r1, r3
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f000 ff3a 	bl	80061c4 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f000 ff7b 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005356:	2301      	movs	r3, #1
 8005358:	e0c9      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 800535a:	f107 0320 	add.w	r3, r7, #32
 800535e:	4969      	ldr	r1, [pc, #420]	@ (8005504 <VibeCheckSensorCMD_Get+0x230>)
 8005360:	4618      	mov	r0, r3
 8005362:	f7fa ffd5 	bl	8000310 <strcmp>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	f040 80bf 	bne.w	80054ec <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800536e:	4964      	ldr	r1, [pc, #400]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 8005370:	68b8      	ldr	r0, [r7, #8]
 8005372:	f000 feeb 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005376:	68b8      	ldr	r0, [r7, #8]
 8005378:	f000 ff5a 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fb8a 	bl	8004a98 <VibeCheckSensor_GetAccelRange>
 8005384:	4603      	mov	r3, r0
 8005386:	4619      	mov	r1, r3
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f000 ff1b 	bl	80061c4 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f000 ff5c 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005394:	2301      	movs	r3, #1
 8005396:	e0aa      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8005398:	f107 0320 	add.w	r3, r7, #32
 800539c:	495a      	ldr	r1, [pc, #360]	@ (8005508 <VibeCheckSensorCMD_Get+0x234>)
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fa ffb6 	bl	8000310 <strcmp>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d146      	bne.n	8005438 <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80053aa:	f107 0320 	add.w	r3, r7, #32
 80053ae:	2240      	movs	r2, #64	@ 0x40
 80053b0:	4619      	mov	r1, r3
 80053b2:	68b8      	ldr	r0, [r7, #8]
 80053b4:	f000 fdaa 	bl	8005f0c <VibeCheckShell_GetNextString>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8096 	beq.w	80054ec <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 80053c0:	f107 0320 	add.w	r3, r7, #32
 80053c4:	494d      	ldr	r1, [pc, #308]	@ (80054fc <VibeCheckSensorCMD_Get+0x228>)
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fa ffa2 	bl	8000310 <strcmp>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d114      	bne.n	80053fc <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80053d2:	494b      	ldr	r1, [pc, #300]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f000 feb9 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80053da:	68b8      	ldr	r0, [r7, #8]
 80053dc:	f000 ff28 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff fb3f 	bl	8004a66 <VibeCheckSensor_GetGyroODR>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4619      	mov	r1, r3
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f000 fee9 	bl	80061c4 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80053f2:	68b8      	ldr	r0, [r7, #8]
 80053f4:	f000 ff2a 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e078      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 80053fc:	f107 0320 	add.w	r3, r7, #32
 8005400:	4940      	ldr	r1, [pc, #256]	@ (8005504 <VibeCheckSensorCMD_Get+0x230>)
 8005402:	4618      	mov	r0, r3
 8005404:	f7fa ff84 	bl	8000310 <strcmp>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d16e      	bne.n	80054ec <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800540e:	493c      	ldr	r1, [pc, #240]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 8005410:	68b8      	ldr	r0, [r7, #8]
 8005412:	f000 fe9b 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005416:	68b8      	ldr	r0, [r7, #8]
 8005418:	f000 ff0a 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fb53 	bl	8004aca <VibeCheckSensor_GetGyroRange>
 8005424:	4603      	mov	r3, r0
 8005426:	4619      	mov	r1, r3
 8005428:	68b8      	ldr	r0, [r7, #8]
 800542a:	f000 fecb 	bl	80061c4 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800542e:	68b8      	ldr	r0, [r7, #8]
 8005430:	f000 ff0c 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005434:	2301      	movs	r3, #1
 8005436:	e05a      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8005438:	f107 0320 	add.w	r3, r7, #32
 800543c:	4933      	ldr	r1, [pc, #204]	@ (800550c <VibeCheckSensorCMD_Get+0x238>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7fa ff66 	bl	8000310 <strcmp>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d132      	bne.n	80054b0 <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 800544a:	f107 0118 	add.w	r1, r7, #24
 800544e:	f107 021c 	add.w	r2, r7, #28
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	460b      	mov	r3, r1
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fb4d 	bl	8004afc <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 8005462:	4927      	ldr	r1, [pc, #156]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 8005464:	68b8      	ldr	r0, [r7, #8]
 8005466:	f000 fe71 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	f000 fee0 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 8005470:	edd7 7a07 	vldr	s15, [r7, #28]
 8005474:	eeb0 0a67 	vmov.f32	s0, s15
 8005478:	68b8      	ldr	r0, [r7, #8]
 800547a:	f000 febb 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800547e:	68b8      	ldr	r0, [r7, #8]
 8005480:	f000 fed6 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8005484:	edd7 7a06 	vldr	s15, [r7, #24]
 8005488:	eeb0 0a67 	vmov.f32	s0, s15
 800548c:	68b8      	ldr	r0, [r7, #8]
 800548e:	f000 feb1 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f000 fecc 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8005498:	edd7 7a05 	vldr	s15, [r7, #20]
 800549c:	eeb0 0a67 	vmov.f32	s0, s15
 80054a0:	68b8      	ldr	r0, [r7, #8]
 80054a2:	f000 fea7 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f000 fed0 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e01e      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 80054b0:	f107 0320 	add.w	r3, r7, #32
 80054b4:	4916      	ldr	r1, [pc, #88]	@ (8005510 <VibeCheckSensorCMD_Get+0x23c>)
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fa ff2a 	bl	8000310 <strcmp>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d114      	bne.n	80054ec <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80054c2:	490f      	ldr	r1, [pc, #60]	@ (8005500 <VibeCheckSensorCMD_Get+0x22c>)
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f000 fe41 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f000 feb0 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff fb9f 	bl	8004c16 <VibeCheckSensor_IsConnected>
 80054d8:	4603      	mov	r3, r0
 80054da:	4619      	mov	r1, r3
 80054dc:	68b8      	ldr	r0, [r7, #8]
 80054de:	f000 fe71 	bl	80061c4 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 80054e2:	68b8      	ldr	r0, [r7, #8]
 80054e4:	f000 feb2 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3760      	adds	r7, #96	@ 0x60
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	0801dc54 	.word	0x0801dc54
 80054fc:	0801dc5c 	.word	0x0801dc5c
 8005500:	0801dc60 	.word	0x0801dc60
 8005504:	0801dc64 	.word	0x0801dc64
 8005508:	0801dc6c 	.word	0x0801dc6c
 800550c:	0801dc74 	.word	0x0801dc74
 8005510:	0801dc7c 	.word	0x0801dc7c

08005514 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b096      	sub	sp, #88	@ 0x58
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	657b      	str	r3, [r7, #84]	@ 0x54

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	4619      	mov	r1, r3
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	f000 fcee 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8169 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
	{
		if (!strcmp(str, "fakedata"))
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	49b5      	ldr	r1, [pc, #724]	@ (8005814 <VibeCheckSensorCMD_Execute+0x300>)
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa fee6 	bl	8000310 <strcmp>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d135      	bne.n	80055b6 <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	2240      	movs	r2, #64	@ 0x40
 8005550:	4619      	mov	r1, r3
 8005552:	6838      	ldr	r0, [r7, #0]
 8005554:	f000 fcda 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8155 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	49ac      	ldr	r1, [pc, #688]	@ (8005818 <VibeCheckSensorCMD_Execute+0x304>)
 8005566:	4618      	mov	r0, r3
 8005568:	f7fa fed2 	bl	8000310 <strcmp>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8005572:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005574:	f7ff faf4 	bl	8004b60 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005578:	49a8      	ldr	r1, [pc, #672]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f000 fde6 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005580:	6838      	ldr	r0, [r7, #0]
 8005582:	f000 fe63 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005586:	2301      	movs	r3, #1
 8005588:	e140      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
				}
				else if (!strcmp(str, "stop"))
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	49a4      	ldr	r1, [pc, #656]	@ (8005820 <VibeCheckSensorCMD_Execute+0x30c>)
 8005590:	4618      	mov	r0, r3
 8005592:	f7fa febd 	bl	8000310 <strcmp>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8136 	bne.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckSensor_StopFakeData(sensor);
 800559e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80055a0:	f7ff faef 	bl	8004b82 <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80055a4:	499d      	ldr	r1, [pc, #628]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 80055a6:	6838      	ldr	r0, [r7, #0]
 80055a8:	f000 fdd0 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80055ac:	6838      	ldr	r0, [r7, #0]
 80055ae:	f000 fe4d 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e12a      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (!strcmp(str, "set"))
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	499a      	ldr	r1, [pc, #616]	@ (8005824 <VibeCheckSensorCMD_Execute+0x310>)
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fa fea7 	bl	8000310 <strcmp>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d12c      	bne.n	8005622 <VibeCheckSensorCMD_Execute+0x10e>
		{
			/* setters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	2240      	movs	r2, #64	@ 0x40
 80055ce:	4619      	mov	r1, r3
 80055d0:	6838      	ldr	r0, [r7, #0]
 80055d2:	f000 fc9b 	bl	8005f0c <VibeCheckShell_GetNextString>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8116 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 80055de:	f107 0314 	add.w	r3, r7, #20
 80055e2:	4991      	ldr	r1, [pc, #580]	@ (8005828 <VibeCheckSensorCMD_Execute+0x314>)
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fa fe93 	bl	8000310 <strcmp>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 810c 	bne.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
				{
					int32_t size;
					if (VibeCheckShell_GetNextInt(shell, &size))
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4619      	mov	r1, r3
 80055f8:	6838      	ldr	r0, [r7, #0]
 80055fa:	f000 fcff 	bl	8005ffc <VibeCheckShell_GetNextInt>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8102 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
					{
						VibeCheckSensor_SetPacketSize(sensor, size);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4619      	mov	r1, r3
 800560a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800560c:	f7ff faca 	bl	8004ba4 <VibeCheckSensor_SetPacketSize>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005610:	4982      	ldr	r1, [pc, #520]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 8005612:	6838      	ldr	r0, [r7, #0]
 8005614:	f000 fd9a 	bl	800614c <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005618:	6838      	ldr	r0, [r7, #0]
 800561a:	f000 fe17 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800561e:	2301      	movs	r3, #1
 8005620:	e0f4      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
			}
		}
		else if (!strcmp(str, "get"))
 8005622:	f107 0314 	add.w	r3, r7, #20
 8005626:	4981      	ldr	r1, [pc, #516]	@ (800582c <VibeCheckSensorCMD_Execute+0x318>)
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa fe71 	bl	8000310 <strcmp>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d128      	bne.n	8005686 <VibeCheckSensorCMD_Execute+0x172>
		{
			/* getters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	2240      	movs	r2, #64	@ 0x40
 800563a:	4619      	mov	r1, r3
 800563c:	6838      	ldr	r0, [r7, #0]
 800563e:	f000 fc65 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80e0 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	4976      	ldr	r1, [pc, #472]	@ (8005828 <VibeCheckSensorCMD_Execute+0x314>)
 8005650:	4618      	mov	r0, r3
 8005652:	f7fa fe5d 	bl	8000310 <strcmp>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 80d6 	bne.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800565e:	496f      	ldr	r1, [pc, #444]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 8005660:	6838      	ldr	r0, [r7, #0]
 8005662:	f000 fd73 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005666:	6838      	ldr	r0, [r7, #0]
 8005668:	f000 fde2 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetPacketSize(sensor));
 800566c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800566e:	f7ff fac3 	bl	8004bf8 <VibeCheckSensor_GetPacketSize>
 8005672:	4603      	mov	r3, r0
 8005674:	4619      	mov	r1, r3
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f000 fda4 	bl	80061c4 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800567c:	6838      	ldr	r0, [r7, #0]
 800567e:	f000 fde5 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005682:	2301      	movs	r3, #1
 8005684:	e0c2      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8005686:	f107 0210 	add.w	r2, r7, #16
 800568a:	f107 0314 	add.w	r3, r7, #20
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fceb 	bl	800606c <VibeCheckShell_TurnToInt>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80b6 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	2240      	movs	r2, #64	@ 0x40
 80056a4:	4619      	mov	r1, r3
 80056a6:	6838      	ldr	r0, [r7, #0]
 80056a8:	f000 fc30 	bl	8005f0c <VibeCheckShell_GetNextString>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80ab 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4957      	ldr	r1, [pc, #348]	@ (8005818 <VibeCheckSensorCMD_Execute+0x304>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fa fe28 	bl	8000310 <strcmp>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d138      	bne.n	8005738 <VibeCheckSensorCMD_Execute+0x224>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	2240      	movs	r2, #64	@ 0x40
 80056cc:	4619      	mov	r1, r3
 80056ce:	6838      	ldr	r0, [r7, #0]
 80056d0:	f000 fc1c 	bl	8005f0c <VibeCheckShell_GetNextString>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8097 	beq.w	800580a <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4953      	ldr	r1, [pc, #332]	@ (8005830 <VibeCheckSensorCMD_Execute+0x31c>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa fe14 	bl	8000310 <strcmp>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <VibeCheckSensorCMD_Execute+0x1f6>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80056f4:	f7fe ff9e 	bl	8004634 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 80056f8:	4948      	ldr	r1, [pc, #288]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 80056fa:	6838      	ldr	r0, [r7, #0]
 80056fc:	f000 fd26 	bl	800614c <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005700:	6838      	ldr	r0, [r7, #0]
 8005702:	f000 fda3 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005706:	2301      	movs	r3, #1
 8005708:	e080      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	4949      	ldr	r1, [pc, #292]	@ (8005834 <VibeCheckSensorCMD_Execute+0x320>)
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa fdfd 	bl	8000310 <strcmp>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d176      	bne.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4619      	mov	r1, r3
 8005720:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005722:	f7fe ffff 	bl	8004724 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005726:	493d      	ldr	r1, [pc, #244]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 8005728:	6838      	ldr	r0, [r7, #0]
 800572a:	f000 fd0f 	bl	800614c <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800572e:	6838      	ldr	r0, [r7, #0]
 8005730:	f000 fd8c 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005734:	2301      	movs	r3, #1
 8005736:	e069      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4938      	ldr	r1, [pc, #224]	@ (8005820 <VibeCheckSensorCMD_Execute+0x30c>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fa fde6 	bl	8000310 <strcmp>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d137      	bne.n	80057ba <VibeCheckSensorCMD_Execute+0x2a6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	4619      	mov	r1, r3
 8005752:	6838      	ldr	r0, [r7, #0]
 8005754:	f000 fbda 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d055      	beq.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	4933      	ldr	r1, [pc, #204]	@ (8005830 <VibeCheckSensorCMD_Execute+0x31c>)
 8005764:	4618      	mov	r0, r3
 8005766:	f7fa fdd3 	bl	8000310 <strcmp>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <VibeCheckSensorCMD_Execute+0x278>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4619      	mov	r1, r3
 8005774:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005776:	f7fe ff99 	bl	80046ac <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 800577a:	4928      	ldr	r1, [pc, #160]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 800577c:	6838      	ldr	r0, [r7, #0]
 800577e:	f000 fce5 	bl	800614c <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f000 fd62 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005788:	2301      	movs	r3, #1
 800578a:	e03f      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4928      	ldr	r1, [pc, #160]	@ (8005834 <VibeCheckSensorCMD_Execute+0x320>)
 8005792:	4618      	mov	r0, r3
 8005794:	f7fa fdbc 	bl	8000310 <strcmp>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d135      	bne.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80057a4:	f7fe fffa 	bl	800479c <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 80057a8:	491c      	ldr	r1, [pc, #112]	@ (800581c <VibeCheckSensorCMD_Execute+0x308>)
 80057aa:	6838      	ldr	r0, [r7, #0]
 80057ac:	f000 fcce 	bl	800614c <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80057b0:	6838      	ldr	r0, [r7, #0]
 80057b2:	f000 fd4b 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e028      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "set"))
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	4919      	ldr	r1, [pc, #100]	@ (8005824 <VibeCheckSensorCMD_Execute+0x310>)
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fa fda5 	bl	8000310 <strcmp>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <VibeCheckSensorCMD_Execute+0x2ce>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80057d4:	f7ff fc70 	bl	80050b8 <VibeCheckSensorCMD_Set>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 80057de:	2301      	movs	r3, #1
 80057e0:	e014      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
				else if (!strcmp(str, "get"))
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	4911      	ldr	r1, [pc, #68]	@ (800582c <VibeCheckSensorCMD_Execute+0x318>)
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fa fd91 	bl	8000310 <strcmp>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80057fc:	f7ff fd6a 	bl	80052d4 <VibeCheckSensorCMD_Get>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
	}

	return 0;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3758      	adds	r7, #88	@ 0x58
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	0801dc88 	.word	0x0801dc88
 8005818:	0801dc94 	.word	0x0801dc94
 800581c:	0801dc60 	.word	0x0801dc60
 8005820:	0801dc9c 	.word	0x0801dc9c
 8005824:	0801dca4 	.word	0x0801dca4
 8005828:	0801dca8 	.word	0x0801dca8
 800582c:	0801dcb4 	.word	0x0801dcb4
 8005830:	0801dc54 	.word	0x0801dc54
 8005834:	0801dc6c 	.word	0x0801dc6c

08005838 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	4619      	mov	r1, r3
 800584c:	6938      	ldr	r0, [r7, #16]
 800584e:	f7ff fb35 	bl	8004ebc <VibeCheckSensor_GetDataReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d059      	beq.n	800590c <VibeCheckSensorSender_Data_Execute+0xd4>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8005858:	492f      	ldr	r1, [pc, #188]	@ (8005918 <VibeCheckSensorSender_Data_Execute+0xe0>)
 800585a:	6838      	ldr	r0, [r7, #0]
 800585c:	f000 fc76 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005860:	6838      	ldr	r0, [r7, #0]
 8005862:	f000 fce5 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, sensor->data_packet_size);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800586c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005870:	4619      	mov	r1, r3
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	f000 fca6 	bl	80061c4 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]

		while (data_written < sensor->data_packet_size)
 800587c:	e039      	b.n	80058f2 <VibeCheckSensorSender_Data_Execute+0xba>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 800587e:	6838      	ldr	r0, [r7, #0]
 8005880:	f000 fcd6 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	6838      	ldr	r0, [r7, #0]
 800588e:	f000 fc99 	bl	80061c4 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005892:	6838      	ldr	r0, [r7, #0]
 8005894:	f000 fccc 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4619      	mov	r1, r3
 800589e:	6838      	ldr	r0, [r7, #0]
 80058a0:	f000 fc90 	bl	80061c4 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f000 fcc3 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80058b0:	eeb0 0a67 	vmov.f32	s0, s15
 80058b4:	6838      	ldr	r0, [r7, #0]
 80058b6:	f000 fc9d 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	f000 fcb8 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80058c6:	eeb0 0a67 	vmov.f32	s0, s15
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f000 fc92 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f000 fcad 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80058dc:	eeb0 0a67 	vmov.f32	s0, s15
 80058e0:	6838      	ldr	r0, [r7, #0]
 80058e2:	f000 fc87 	bl	80061f4 <VibeCheckShell_PutOutputFloat>


			data++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3314      	adds	r3, #20
 80058ea:	60fb      	str	r3, [r7, #12]
			data_written++;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	3301      	adds	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
		while (data_written < sensor->data_packet_size)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3bd      	bcc.n	800587e <VibeCheckSensorSender_Data_Execute+0x46>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8005902:	6838      	ldr	r0, [r7, #0]
 8005904:	f000 fca2 	bl	800624c <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <VibeCheckSensorSender_Data_Execute+0xd6>
	}

	return 0;
 800590c:	2300      	movs	r3, #0

}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	0801dcb8 	.word	0x0801dcb8

0800591c <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 800592a:	f107 020c 	add.w	r2, r7, #12
 800592e:	f107 0310 	add.w	r3, r7, #16
 8005932:	4619      	mov	r1, r3
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f7ff f987 	bl	8004c48 <VibeCheckSensor_ConnectionChanged>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d026      	beq.n	800598e <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8005940:	4915      	ldr	r1, [pc, #84]	@ (8005998 <VibeCheckSensorSender_Status_Execute+0x7c>)
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f000 fc02 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005948:	6838      	ldr	r0, [r7, #0]
 800594a:	f000 fc71 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 800594e:	4913      	ldr	r1, [pc, #76]	@ (800599c <VibeCheckSensorSender_Status_Execute+0x80>)
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f000 fbfb 	bl	800614c <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005956:	6838      	ldr	r0, [r7, #0]
 8005958:	f000 fc6a 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4619      	mov	r1, r3
 8005960:	6838      	ldr	r0, [r7, #0]
 8005962:	f000 fc2f 	bl	80061c4 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8005966:	6838      	ldr	r0, [r7, #0]
 8005968:	f000 fc62 	bl	8006230 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8005972:	490b      	ldr	r1, [pc, #44]	@ (80059a0 <VibeCheckSensorSender_Status_Execute+0x84>)
 8005974:	6838      	ldr	r0, [r7, #0]
 8005976:	f000 fbe9 	bl	800614c <VibeCheckShell_PutOutputString>
 800597a:	e003      	b.n	8005984 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 800597c:	4909      	ldr	r1, [pc, #36]	@ (80059a4 <VibeCheckSensorSender_Status_Execute+0x88>)
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	f000 fbe4 	bl	800614c <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005984:	6838      	ldr	r0, [r7, #0]
 8005986:	f000 fc61 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
		return 1;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0801dcc0 	.word	0x0801dcc0
 800599c:	0801dcc8 	.word	0x0801dcc8
 80059a0:	0801dc7c 	.word	0x0801dc7c
 80059a4:	0801dcd0 	.word	0x0801dcd0

080059a8 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80059c2:	461a      	mov	r2, r3
 80059c4:	2300      	movs	r3, #0
 80059c6:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80059ce:	461a      	mov	r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80059da:	461a      	mov	r2, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059e6:	461a      	mov	r2, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6153      	str	r3, [r2, #20]
	shell->output_end = 0;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6193      	str	r3, [r2, #24]
	shell->output_count = 0;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61d3      	str	r3, [r2, #28]

	shell->ih_count = 0;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	shell->oh_count = 0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005a24:	461a      	mov	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8005a38:	b590      	push	{r4, r7, lr}
 8005a3a:	b099      	sub	sp, #100	@ 0x64
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8005a40:	2300      	movs	r3, #0
 8005a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a50:	d302      	bcc.n	8005a58 <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8099 	beq.w	8005b98 <VibeCheckShell_Update+0x160>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8005a6c:	e094      	b.n	8005b98 <VibeCheckShell_Update+0x160>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	2240      	movs	r2, #64	@ 0x40
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa48 	bl	8005f0c <VibeCheckShell_GetNextString>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04a      	beq.n	8005b18 <VibeCheckShell_Update+0xe0>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a86:	e03e      	b.n	8005b06 <VibeCheckShell_Update+0xce>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005a88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4a74      	ldr	r2, [pc, #464]	@ (8005c64 <VibeCheckShell_Update+0x22c>)
 8005a94:	441a      	add	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f107 020c 	add.w	r2, r7, #12
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fa fc35 	bl	8000310 <strcmp>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11d      	bne.n	8005ae8 <VibeCheckShell_Update+0xb0>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	18ca      	adds	r2, r1, r3
 8005aba:	4b6b      	ldr	r3, [pc, #428]	@ (8005c68 <VibeCheckShell_Update+0x230>)
 8005abc:	4413      	add	r3, r2
 8005abe:	681c      	ldr	r4, [r3, #0]
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	18ca      	adds	r2, r1, r3
 8005ace:	4b67      	ldr	r3, [pc, #412]	@ (8005c6c <VibeCheckShell_Update+0x234>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	47a0      	blx	r4
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11f      	bne.n	8005b20 <VibeCheckShell_Update+0xe8>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8005ae6:	e01b      	b.n	8005b20 <VibeCheckShell_Update+0xe8>
				}

				if (i == shell->ih_count - 1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005aee:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005af2:	3b01      	subs	r3, #1
 8005af4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d102      	bne.n	8005b00 <VibeCheckShell_Update+0xc8>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005afa:	2302      	movs	r3, #2
 8005afc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b02:	3301      	adds	r3, #1
 8005b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005b0c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005b10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d3b8      	bcc.n	8005a88 <VibeCheckShell_Update+0x50>
 8005b16:	e004      	b.n	8005b22 <VibeCheckShell_Update+0xea>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005b1e:	e000      	b.n	8005b22 <VibeCheckShell_Update+0xea>
					break;
 8005b20:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005b42:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005b54:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b62:	d105      	bne.n	8005b70 <VibeCheckShell_Update+0x138>
				shell->input_tail = 0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005b70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b74:	4619      	mov	r1, r3
 8005b76:	483e      	ldr	r0, [pc, #248]	@ (8005c70 <VibeCheckShell_Update+0x238>)
 8005b78:	f014 fc4f 	bl	801a41a <strchr>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d100      	bne.n	8005b84 <VibeCheckShell_Update+0x14c>
		{
 8005b82:	e7ce      	b.n	8005b22 <VibeCheckShell_Update+0xea>
				break;  /* found the delimiter */
 8005b84:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005b96:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f af64 	bne.w	8005a6e <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005baa:	e032      	b.n	8005c12 <VibeCheckShell_Update+0x1da>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005bb0:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005bb4:	440b      	add	r3, r1
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005bc0:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005bc4:	4403      	add	r3, r0
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	440b      	add	r3, r1
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4790      	blx	r2
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d019      	beq.n	8005c0c <VibeCheckShell_Update+0x1d4>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			/* wrap the output buffer if necessary so that an output packet doesn't get split up */
			if (VC_SHELL_IO_BUF_LEN - shell->output_head < VC_SHELL_MAX_OUTPUT_PACKET_LEN)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bee:	d20d      	bcs.n	8005c0c <VibeCheckShell_Update+0x1d4>
			{
				shell->output_end = shell->output_head;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005bfe:	6193      	str	r3, [r2, #24]
				shell->output_head = 0;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005c06:	461a      	mov	r2, r3
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6113      	str	r3, [r2, #16]
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c0e:	3301      	adds	r3, #1
 8005c10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005c18:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8005c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3c4      	bcc.n	8005bac <VibeCheckShell_Update+0x174>
			}
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2e:	d302      	bcc.n	8005c36 <VibeCheckShell_Update+0x1fe>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8005c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8005c40:	f362 0307 	bfi	r3, r2, #0, #8
 8005c44:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8005c48:	f362 230f 	bfi	r3, r2, #8, #8
 8005c4c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005c50:	f362 4317 	bfi	r3, r2, #16, #8
 8005c54:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8005c58:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3764      	adds	r7, #100	@ 0x64
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}
 8005c64:	00010020 	.word	0x00010020
 8005c68:	00010060 	.word	0x00010060
 8005c6c:	00010064 	.word	0x00010064
 8005c70:	0801dce0 	.word	0x0801dce0

08005c74 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0014 	add.w	r0, r7, #20
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005c8c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005c90:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c92:	d819      	bhi.n	8005cc8 <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005c9a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005c9e:	1c53      	adds	r3, r2, #1
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005ca6:	f8c1 3220 	str.w	r3, [r1, #544]	@ 0x220
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	18ca      	adds	r2, r1, r3
 8005cb6:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <VibeCheckShell_RegisterInputHandler+0x64>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f107 0314 	add.w	r3, r7, #20
 8005cc0:	2248      	movs	r2, #72	@ 0x48
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f014 fc3f 	bl	801a546 <memcpy>
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd2:	b004      	add	sp, #16
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00010020 	.word	0x00010020

08005cdc <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005cf0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8005cf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cf6:	d816      	bhi.n	8005d26 <VibeCheckShell_RegisterOutputHandler+0x4a>
		shell->output_handlers[shell->oh_count++] = handler;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005cfe:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 8005d02:	1c53      	adds	r3, r2, #1
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005d0a:	f8c1 3424 	str.w	r3, [r1, #1060]	@ 0x424
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005d14:	4413      	add	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	440b      	add	r3, r1
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	1d3a      	adds	r2, r7, #4
 8005d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d22:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e03e      	b.n	8005dc4 <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03f      	beq.n	8005dce <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8005d5e:	600a      	str	r2, [r1, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	7811      	ldrb	r1, [r2, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d74:	d105      	bne.n	8005d82 <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005d92:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	480f      	ldr	r0, [pc, #60]	@ (8005dd8 <VibeCheckShell_PutInput+0xa4>)
 8005d9c:	f014 fb3d 	bl	801a41a <strchr>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005db6:	60d3      	str	r3, [r2, #12]

			input++;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d3bc      	bcc.n	8005d46 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8005dcc:	e000      	b.n	8005dd0 <VibeCheckShell_PutInput+0x9c>
			break;
 8005dce:	bf00      	nop
}
 8005dd0:	bf00      	nop
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	0801dce0 	.word	0x0801dce0

08005ddc <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	uint32_t head = shell->output_head;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	617b      	str	r3, [r7, #20]
	uint32_t tail = shell->output_tail;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	613b      	str	r3, [r7, #16]

	if (head == tail)
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d101      	bne.n	8005e08 <VibeCheckShell_GetOutput+0x2c>
		return 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e038      	b.n	8005e7a <VibeCheckShell_GetOutput+0x9e>

	if (head > tail)
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d90e      	bls.n	8005e2e <VibeCheckShell_GetOutput+0x52>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[tail];
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005e16:	4413      	add	r3, r2
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	441a      	add	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	601a      	str	r2, [r3, #0]
		*len = head - tail;
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad2      	subs	r2, r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
		return 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e025      	b.n	8005e7a <VibeCheckShell_GetOutput+0x9e>
	}
	else
	{
		if (shell->output_end)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <VibeCheckShell_GetOutput+0x82>
		{
			/* the output would have wrapped but we caught it - only send up to the delimited end of the output */
			*output = &shell->output[tail];
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005e40:	4413      	add	r3, r2
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	441a      	add	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	601a      	str	r2, [r3, #0]
			*len = shell->output_end - tail;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
			return 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00d      	b.n	8005e7a <VibeCheckShell_GetOutput+0x9e>
		}
		else
		{
			/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
			*output = &shell->output[tail];
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005e64:	4413      	add	r3, r2
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	441a      	add	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	601a      	str	r2, [r3, #0]
			*len = VC_SHELL_IO_BUF_LEN - tail;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
			return 1;
 8005e78:	2301      	movs	r3, #1
		}
	}
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005ea2:	61d3      	str	r3, [r2, #28]
	shell->output_tail += len;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005eb6:	6153      	str	r3, [r2, #20]

	if (shell->output_end)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <VibeCheckShell_UpdateOutputBuffer+0x58>
	{
		/* sent a packet which ends in the wrapping boundary region */
		shell->output_end = 0;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6153      	str	r3, [r2, #20]
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
	}


}
 8005edc:	e010      	b.n	8005f00 <VibeCheckShell_UpdateOutputBuffer+0x7a>
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eea:	d309      	bcc.n	8005f00 <VibeCheckShell_UpdateOutputBuffer+0x7a>
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005efe:	6153      	str	r3, [r2, #20]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e05f      	b.n	8005fde <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	5cd3      	ldrb	r3, [r2, r3]
 8005f2a:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	482f      	ldr	r0, [pc, #188]	@ (8005ff0 <VibeCheckShell_GetNextString+0xe4>)
 8005f32:	f014 fa72 	bl	801a41a <strchr>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
				return 1;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04d      	b.n	8005fe8 <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e04b      	b.n	8005fe8 <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005f60:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005f72:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f80:	d105      	bne.n	8005f8e <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8005f8e:	7cfb      	ldrb	r3, [r7, #19]
 8005f90:	4619      	mov	r1, r3
 8005f92:	4818      	ldr	r0, [pc, #96]	@ (8005ff4 <VibeCheckShell_GetNextString+0xe8>)
 8005f94:	f014 fa41 	bl	801a41a <strchr>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01c      	beq.n	8005fde <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
					return 1;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e01c      	b.n	8005fe8 <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8005fae:	7cfb      	ldrb	r3, [r7, #19]
 8005fb0:	74bb      	strb	r3, [r7, #18]
 8005fb2:	7cbb      	ldrb	r3, [r7, #18]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a10      	ldr	r2, [pc, #64]	@ (8005ff8 <VibeCheckShell_GetNextString+0xec>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d103      	bne.n	8005fcc <VibeCheckShell_GetNextString+0xc0>
 8005fc4:	7cbb      	ldrb	r3, [r7, #18]
 8005fc6:	f103 0220 	add.w	r2, r3, #32
 8005fca:	e000      	b.n	8005fce <VibeCheckShell_GetNextString+0xc2>
 8005fcc:	7cba      	ldrb	r2, [r7, #18]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1c59      	adds	r1, r3, #1
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
				i++;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d39b      	bcc.n	8005f1e <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	0801dce0 	.word	0x0801dce0
 8005ff4:	0801dce4 	.word	0x0801dce4
 8005ff8:	0801e768 	.word	0x0801e768

08005ffc <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b092      	sub	sp, #72	@ 0x48
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	2240      	movs	r2, #64	@ 0x40
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ff7c 	bl	8005f0c <VibeCheckShell_GetNextString>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f823 	bl	800606c <VibeCheckShell_TurnToInt>
 8006026:	4603      	mov	r3, r0
 8006028:	e000      	b.n	800602c <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3748      	adds	r7, #72	@ 0x48
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b092      	sub	sp, #72	@ 0x48
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	2240      	movs	r2, #64	@ 0x40
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff60 	bl	8005f0c <VibeCheckShell_GetNextString>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f83d 	bl	80060d8 <VibeCheckShell_TurnToFloat>
 800605e:	4603      	mov	r3, r0
 8006060:	e000      	b.n	8006064 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3748      	adds	r7, #72	@ 0x48
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8006076:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <VibeCheckShell_TurnToInt+0x68>)
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	ca07      	ldmia	r2, {r0, r1, r2}
 800607e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e012      	b.n	80060ae <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	f107 0308 	add.w	r3, r7, #8
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f014 f9be 	bl	801a41a <strchr>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 80060a4:	2300      	movs	r3, #0
 80060a6:	e010      	b.n	80060ca <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3301      	adds	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa f98e 	bl	80003d0 <strlen>
 80060b4:	4602      	mov	r2, r0
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d3e5      	bcc.n	8006088 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f012 fe04 	bl	8018cca <atoi>
 80060c2:	4602      	mov	r2, r0
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	601a      	str	r2, [r3, #0]
	return 1;
 80060c8:	2301      	movs	r3, #1
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	0801dce8 	.word	0x0801dce8

080060d8 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b089      	sub	sp, #36	@ 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 80060e2:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <VibeCheckShell_TurnToFloat+0x70>)
 80060e4:	f107 040c 	add.w	r4, r7, #12
 80060e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ea:	c407      	stmia	r4!, {r0, r1, r2}
 80060ec:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e012      	b.n	800611a <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f107 030c 	add.w	r3, r7, #12
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f014 f988 	bl	801a41a <strchr>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8006110:	2300      	movs	r3, #0
 8006112:	e014      	b.n	800613e <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fa f958 	bl	80003d0 <strlen>
 8006120:	4602      	mov	r2, r0
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4293      	cmp	r3, r2
 8006126:	d3e5      	bcc.n	80060f4 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f012 fdcb 	bl	8018cc4 <atof>
 800612e:	eeb0 7b40 	vmov.f64	d7, d0
 8006132:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 800613c:	2301      	movs	r3, #1
}
 800613e:	4618      	mov	r0, r3
 8006140:	3724      	adds	r7, #36	@ 0x24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd90      	pop	{r4, r7, pc}
 8006146:	bf00      	nop
 8006148:	0801dcf4 	.word	0x0801dcf4

0800614c <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	while (*str)
 8006156:	e029      	b.n	80061ac <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	1c53      	adds	r3, r2, #1
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 800616e:	6101      	str	r1, [r0, #16]
 8006170:	7811      	ldrb	r1, [r2, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	441a      	add	r2, r3
 8006176:	f248 0310 	movw	r3, #32784	@ 0x8010
 800617a:	4413      	add	r3, r2
 800617c:	460a      	mov	r2, r1
 800617e:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8006190:	61d3      	str	r3, [r2, #28]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800619e:	d105      	bne.n	80061ac <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80061a6:	461a      	mov	r2, r3
 80061a8:	2300      	movs	r3, #0
 80061aa:	6113      	str	r3, [r2, #16]
	while (*str)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1d1      	bne.n	8006158 <VibeCheckShell_PutOutputString+0xc>
	}
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b092      	sub	sp, #72	@ 0x48
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4906      	ldr	r1, [pc, #24]	@ (80061f0 <VibeCheckShell_PutOutputInt+0x2c>)
 80061d6:	4618      	mov	r0, r3
 80061d8:	f014 f8b4 	bl	801a344 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff ffb2 	bl	800614c <VibeCheckShell_PutOutputString>
}
 80061e8:	bf00      	nop
 80061ea:	3748      	adds	r7, #72	@ 0x48
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	0801dd04 	.word	0x0801dd04

080061f4 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b092      	sub	sp, #72	@ 0x48
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%.3f", val);
 8006200:	edd7 7a00 	vldr	s15, [r7]
 8006204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006208:	f107 0008 	add.w	r0, r7, #8
 800620c:	ec53 2b17 	vmov	r2, r3, d7
 8006210:	4906      	ldr	r1, [pc, #24]	@ (800622c <VibeCheckShell_PutOutputFloat+0x38>)
 8006212:	f014 f897 	bl	801a344 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff95 	bl	800614c <VibeCheckShell_PutOutputString>
}
 8006222:	bf00      	nop
 8006224:	3748      	adds	r7, #72	@ 0x48
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	0801dd08 	.word	0x0801dd08

08006230 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8006238:	4903      	ldr	r1, [pc, #12]	@ (8006248 <VibeCheckShell_PutOutputSeparator+0x18>)
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff ff86 	bl	800614c <VibeCheckShell_PutOutputString>
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	0801dd10 	.word	0x0801dd10

0800624c <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8006254:	4903      	ldr	r1, [pc, #12]	@ (8006264 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ff78 	bl	800614c <VibeCheckShell_PutOutputString>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	0801dce0 	.word	0x0801dce0

08006268 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_DEFAULT_FREQ_HZ;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a13      	ldr	r2, [pc, #76]	@ (80062c8 <VibeCheckStrobe_Init+0x60>)
 800627c:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = VC_STROBE_DEFAULT_EXPOSURE_MS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006284:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	60da      	str	r2, [r3, #12]
	strobe->is_running = 0;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	611a      	str	r2, [r3, #16]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f640 125f 	movw	r2, #2399	@ 0x95f
 800629e:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80062a6:	eeb0 0a67 	vmov.f32	s0, s15
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f85e 	bl	800636c <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80062b6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f93c 	bl	8006538 <VibeCheckStrobe_SetExposure>

}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	42700000 	.word	0x42700000

080062cc <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	strobe->is_running = 1;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f00b fcae 	bl	8011c40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f00b fd90 	bl	8011e10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2104      	movs	r1, #4
 80062f6:	4618      	mov	r0, r3
 80062f8:	f00b fd8a 	bl	8011e10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2108      	movs	r1, #8
 8006302:	4618      	mov	r0, r3
 8006304:	f00b fd84 	bl	8011e10 <HAL_TIM_PWM_Start>
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	strobe->is_running = 0;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(strobe->htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f00b fc8c 	bl	8011c40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f00b fe8a 	bl	8012048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2104      	movs	r1, #4
 800633a:	4618      	mov	r0, r3
 800633c:	f00b fe84 	bl	8012048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2108      	movs	r1, #8
 8006346:	4618      	mov	r0, r3
 8006348:	f00b fe7e 	bl	8012048 <HAL_TIM_PWM_Stop>
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <VibeCheckStrobe_IsRunning>:


uint32_t VibeCheckStrobe_IsRunning(VibeCheckStrobe* strobe)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	return strobe->is_running;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8006378:	edd7 7a00 	vldr	s15, [r7]
 800637c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	d502      	bpl.n	8006390 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 800638a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800638e:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8006390:	edd7 7a00 	vldr	s15, [r7]
 8006394:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006400 <VibeCheckStrobe_SetFrequency+0x94>
 8006398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a0:	dd01      	ble.n	80063a6 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 80063a2:	4b18      	ldr	r3, [pc, #96]	@ (8006404 <VibeCheckStrobe_SetFrequency+0x98>)
 80063a4:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 80063a6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8006408 <VibeCheckStrobe_SetFrequency+0x9c>
 80063aa:	ed97 7a00 	vldr	s14, [r7]
 80063ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063be:	ee17 2a90 	vmov	r2, s15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	615a      	str	r2, [r3, #20]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063da:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8006408 <VibeCheckStrobe_SetFrequency+0x9c>
 80063de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6952      	ldr	r2, [r2, #20]
 80063f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	447a0000 	.word	0x447a0000
 8006404:	447a0000 	.word	0x447a0000
 8006408:	47c35000 	.word	0x47c35000

0800640c <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	ee07 3a90 	vmov	s15, r3
}
 800641c:	eeb0 0a67 	vmov.f32	s0, s15
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8006438:	edd7 7a00 	vldr	s15, [r7]
 800643c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006504 <VibeCheckStrobe_SetPhase+0xd8>
 8006440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	d501      	bpl.n	800644e <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <VibeCheckStrobe_SetPhase+0xdc>)
 800644c:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 800644e:	edd7 7a00 	vldr	s15, [r7]
 8006452:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800650c <VibeCheckStrobe_SetPhase+0xe0>
 8006456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	dd01      	ble.n	8006464 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8006460:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <VibeCheckStrobe_SetPhase+0xe4>)
 8006462:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	edd3 7a03 	vldr	s15, [r3, #12]
 800646a:	ed97 7a00 	vldr	s14, [r7]
 800646e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006472:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8006476:	edd7 7a03 	vldr	s15, [r7, #12]
 800647a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006514 <VibeCheckStrobe_SetPhase+0xe8>
 800647e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006496:	ee17 3a90 	vmov	r3, s15
 800649a:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d029      	beq.n	80064f6 <VibeCheckStrobe_SetPhase+0xca>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d125      	bne.n	80064f6 <VibeCheckStrobe_SetPhase+0xca>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d121      	bne.n	80064f6 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80064d2:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006514 <VibeCheckStrobe_SetPhase+0xe8>
 80064d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695a      	ldr	r2, [r3, #20]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	441a      	add	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	61da      	str	r2, [r3, #28]
	}
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	c3340000 	.word	0xc3340000
 8006508:	c3340000 	.word	0xc3340000
 800650c:	43340000 	.word	0x43340000
 8006510:	43340000 	.word	0x43340000
 8006514:	43b40000 	.word	0x43b40000

08006518 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	ee07 3a90 	vmov	s15, r3
}
 8006528:	eeb0 0a67 	vmov.f32	s0, s15
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8006544:	edd7 7a00 	vldr	s15, [r7]
 8006548:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80065c4 <VibeCheckStrobe_SetExposure+0x8c>
 800654c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006550:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80065c8 <VibeCheckStrobe_SetExposure+0x90>
 8006554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655c:	ee17 3a90 	vmov	r3, s15
 8006560:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d904      	bls.n	800657a <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006584:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80065c8 <VibeCheckStrobe_SetExposure+0x90>
 8006588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800658c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80065cc <VibeCheckStrobe_SetExposure+0x94>
 8006590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	3a83126f 	.word	0x3a83126f
 80065c8:	47c35000 	.word	0x47c35000
 80065cc:	447a0000 	.word	0x447a0000

080065d0 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	ee07 3a90 	vmov	s15, r3
}
 80065e0:	eeb0 0a67 	vmov.f32	s0, s15
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6952      	ldr	r2, [r2, #20]
 8006608:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	621a      	str	r2, [r3, #32]
	}

	if (strobe->phase_change_pending)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6992      	ldr	r2, [r2, #24]
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	621a      	str	r2, [r3, #32]
		strobe->phase_change_pending = 0;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	61da      	str	r2, [r3, #28]
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b096      	sub	sp, #88	@ 0x58
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006646:	f107 0318 	add.w	r3, r7, #24
 800664a:	2240      	movs	r2, #64	@ 0x40
 800664c:	4619      	mov	r1, r3
 800664e:	6838      	ldr	r0, [r7, #0]
 8006650:	f7ff fc5c 	bl	8005f0c <VibeCheckShell_GetNextString>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d065      	beq.n	8006726 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 800665a:	f107 0318 	add.w	r3, r7, #24
 800665e:	4934      	ldr	r1, [pc, #208]	@ (8006730 <VibeCheckStrobeCMD_Set+0xf4>)
 8006660:	4618      	mov	r0, r3
 8006662:	f7f9 fe55 	bl	8000310 <strcmp>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d118      	bne.n	800669e <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4619      	mov	r1, r3
 8006672:	6838      	ldr	r0, [r7, #0]
 8006674:	f7ff fcde 	bl	8006034 <VibeCheckShell_GetNextFloat>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d053      	beq.n	8006726 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 800667e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006682:	eeb0 0a67 	vmov.f32	s0, s15
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fe70 	bl	800636c <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 800668c:	4929      	ldr	r1, [pc, #164]	@ (8006734 <VibeCheckStrobeCMD_Set+0xf8>)
 800668e:	6838      	ldr	r0, [r7, #0]
 8006690:	f7ff fd5c 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006694:	6838      	ldr	r0, [r7, #0]
 8006696:	f7ff fdd9 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800669a:	2301      	movs	r3, #1
 800669c:	e044      	b.n	8006728 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 800669e:	f107 0318 	add.w	r3, r7, #24
 80066a2:	4925      	ldr	r1, [pc, #148]	@ (8006738 <VibeCheckStrobeCMD_Set+0xfc>)
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7f9 fe33 	bl	8000310 <strcmp>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d118      	bne.n	80066e2 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	4619      	mov	r1, r3
 80066b6:	6838      	ldr	r0, [r7, #0]
 80066b8:	f7ff fcbc 	bl	8006034 <VibeCheckShell_GetNextFloat>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d031      	beq.n	8006726 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 80066c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80066c6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff feae 	bl	800642c <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 80066d0:	4918      	ldr	r1, [pc, #96]	@ (8006734 <VibeCheckStrobeCMD_Set+0xf8>)
 80066d2:	6838      	ldr	r0, [r7, #0]
 80066d4:	f7ff fd3a 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80066d8:	6838      	ldr	r0, [r7, #0]
 80066da:	f7ff fdb7 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 80066e2:	f107 0318 	add.w	r3, r7, #24
 80066e6:	4915      	ldr	r1, [pc, #84]	@ (800673c <VibeCheckStrobeCMD_Set+0x100>)
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7f9 fe11 	bl	8000310 <strcmp>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d118      	bne.n	8006726 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	4619      	mov	r1, r3
 80066fa:	6838      	ldr	r0, [r7, #0]
 80066fc:	f7ff fc9a 	bl	8006034 <VibeCheckShell_GetNextFloat>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00f      	beq.n	8006726 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8006706:	edd7 7a03 	vldr	s15, [r7, #12]
 800670a:	eeb0 0a67 	vmov.f32	s0, s15
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff ff12 	bl	8006538 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006714:	4907      	ldr	r1, [pc, #28]	@ (8006734 <VibeCheckStrobeCMD_Set+0xf8>)
 8006716:	6838      	ldr	r0, [r7, #0]
 8006718:	f7ff fd18 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800671c:	6838      	ldr	r0, [r7, #0]
 800671e:	f7ff fd95 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3758      	adds	r7, #88	@ 0x58
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	0801dd14 	.word	0x0801dd14
 8006734:	0801dd20 	.word	0x0801dd20
 8006738:	0801dd24 	.word	0x0801dd24
 800673c:	0801dd2c 	.word	0x0801dd2c

08006740 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b092      	sub	sp, #72	@ 0x48
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	2240      	movs	r2, #64	@ 0x40
 8006750:	4619      	mov	r1, r3
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f7ff fbda 	bl	8005f0c <VibeCheckShell_GetNextString>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d05c      	beq.n	8006818 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4930      	ldr	r1, [pc, #192]	@ (8006824 <VibeCheckStrobeCMD_Get+0xe4>)
 8006764:	4618      	mov	r0, r3
 8006766:	f7f9 fdd3 	bl	8000310 <strcmp>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d115      	bne.n	800679c <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006770:	492d      	ldr	r1, [pc, #180]	@ (8006828 <VibeCheckStrobeCMD_Get+0xe8>)
 8006772:	6838      	ldr	r0, [r7, #0]
 8006774:	f7ff fcea 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006778:	6838      	ldr	r0, [r7, #0]
 800677a:	f7ff fd59 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe44 	bl	800640c <VibeCheckStrobe_GetFrequency>
 8006784:	eef0 7a40 	vmov.f32	s15, s0
 8006788:	eeb0 0a67 	vmov.f32	s0, s15
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f7ff fd31 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006792:	6838      	ldr	r0, [r7, #0]
 8006794:	f7ff fd5a 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006798:	2301      	movs	r3, #1
 800679a:	e03e      	b.n	800681a <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 800679c:	f107 0308 	add.w	r3, r7, #8
 80067a0:	4922      	ldr	r1, [pc, #136]	@ (800682c <VibeCheckStrobeCMD_Get+0xec>)
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fdb4 	bl	8000310 <strcmp>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d115      	bne.n	80067da <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80067ae:	491e      	ldr	r1, [pc, #120]	@ (8006828 <VibeCheckStrobeCMD_Get+0xe8>)
 80067b0:	6838      	ldr	r0, [r7, #0]
 80067b2:	f7ff fccb 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80067b6:	6838      	ldr	r0, [r7, #0]
 80067b8:	f7ff fd3a 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff feab 	bl	8006518 <VibeCheckStrobe_GetPhase>
 80067c2:	eef0 7a40 	vmov.f32	s15, s0
 80067c6:	eeb0 0a67 	vmov.f32	s0, s15
 80067ca:	6838      	ldr	r0, [r7, #0]
 80067cc:	f7ff fd12 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80067d0:	6838      	ldr	r0, [r7, #0]
 80067d2:	f7ff fd3b 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e01f      	b.n	800681a <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4914      	ldr	r1, [pc, #80]	@ (8006830 <VibeCheckStrobeCMD_Get+0xf0>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fd95 	bl	8000310 <strcmp>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d115      	bne.n	8006818 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80067ec:	490e      	ldr	r1, [pc, #56]	@ (8006828 <VibeCheckStrobeCMD_Get+0xe8>)
 80067ee:	6838      	ldr	r0, [r7, #0]
 80067f0:	f7ff fcac 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80067f4:	6838      	ldr	r0, [r7, #0]
 80067f6:	f7ff fd1b 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fee8 	bl	80065d0 <VibeCheckStrobe_GetExposure>
 8006800:	eef0 7a40 	vmov.f32	s15, s0
 8006804:	eeb0 0a67 	vmov.f32	s0, s15
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f7ff fcf3 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800680e:	6838      	ldr	r0, [r7, #0]
 8006810:	f7ff fd1c 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3748      	adds	r7, #72	@ 0x48
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	0801dd14 	.word	0x0801dd14
 8006828:	0801dd20 	.word	0x0801dd20
 800682c:	0801dd24 	.word	0x0801dd24
 8006830:	0801dd2c 	.word	0x0801dd2c

08006834 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b094      	sub	sp, #80	@ 0x50
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006842:	f107 030c 	add.w	r3, r7, #12
 8006846:	2240      	movs	r2, #64	@ 0x40
 8006848:	4619      	mov	r1, r3
 800684a:	6838      	ldr	r0, [r7, #0]
 800684c:	f7ff fb5e 	bl	8005f0c <VibeCheckShell_GetNextString>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d04d      	beq.n	80068f2 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8006856:	f107 030c 	add.w	r3, r7, #12
 800685a:	4928      	ldr	r1, [pc, #160]	@ (80068fc <VibeCheckStrobeCMD_Execute+0xc8>)
 800685c:	4618      	mov	r0, r3
 800685e:	f7f9 fd57 	bl	8000310 <strcmp>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8006868:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800686a:	f7ff fd2f 	bl	80062cc <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 800686e:	4924      	ldr	r1, [pc, #144]	@ (8006900 <VibeCheckStrobeCMD_Execute+0xcc>)
 8006870:	6838      	ldr	r0, [r7, #0]
 8006872:	f7ff fc6b 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006876:	6838      	ldr	r0, [r7, #0]
 8006878:	f7ff fce8 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800687c:	2301      	movs	r3, #1
 800687e:	e039      	b.n	80068f4 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	491f      	ldr	r1, [pc, #124]	@ (8006904 <VibeCheckStrobeCMD_Execute+0xd0>)
 8006886:	4618      	mov	r0, r3
 8006888:	f7f9 fd42 	bl	8000310 <strcmp>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8006892:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006894:	f7ff fd3c 	bl	8006310 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006898:	4919      	ldr	r1, [pc, #100]	@ (8006900 <VibeCheckStrobeCMD_Execute+0xcc>)
 800689a:	6838      	ldr	r0, [r7, #0]
 800689c:	f7ff fc56 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7ff fcd3 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e024      	b.n	80068f4 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	4916      	ldr	r1, [pc, #88]	@ (8006908 <VibeCheckStrobeCMD_Execute+0xd4>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7f9 fd2d 	bl	8000310 <strcmp>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d108      	bne.n	80068ce <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80068c0:	f7ff febc 	bl	800663c <VibeCheckStrobeCMD_Set>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e012      	b.n	80068f4 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	490e      	ldr	r1, [pc, #56]	@ (800690c <VibeCheckStrobeCMD_Execute+0xd8>)
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7f9 fd1b 	bl	8000310 <strcmp>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d108      	bne.n	80068f2 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80068e4:	f7ff ff2c 	bl	8006740 <VibeCheckStrobeCMD_Get>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3750      	adds	r7, #80	@ 0x50
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	0801dd38 	.word	0x0801dd38
 8006900:	0801dd20 	.word	0x0801dd20
 8006904:	0801dd40 	.word	0x0801dd40
 8006908:	0801dd48 	.word	0x0801dd48
 800690c:	0801dd4c 	.word	0x0801dd4c

08006910 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	ed2d 8b02 	vpush	{d8}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e032      	b.n	800698e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006928:	edd7 7a01 	vldr	s15, [r7, #4]
 800692c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800693e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80069b0 <ComputeSineWave+0xa0>
 8006942:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006958:	eeb0 0b47 	vmov.f64	d0, d7
 800695c:	f016 fa40 	bl	801cde0 <sin>
 8006960:	eeb0 7b40 	vmov.f64	d7, d0
 8006964:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006968:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800696c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006970:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80069a8 <ComputeSineWave+0x98>
 8006974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	60fa      	str	r2, [r7, #12]
 800697e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3301      	adds	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d3c8      	bcc.n	8006928 <ComputeSineWave+0x18>
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	ecbd 8b02 	vpop	{d8}
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	f3af 8000 	nop.w
 80069a8:	00000000 	.word	0x00000000
 80069ac:	409ffe00 	.word	0x409ffe00
 80069b0:	40490fd0 	.word	0x40490fd0

080069b4 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e02c      	b.n	8006a22 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d212      	bcs.n	80069f8 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 80069d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80069d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069de:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006a38 <ComputeSquareWave+0x84>
 80069e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1d1a      	adds	r2, r3, #4
 80069ea:	60fa      	str	r2, [r7, #12]
 80069ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f0:	ee17 2a90 	vmov	r2, s15
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	e011      	b.n	8006a1c <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 80069f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a04:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006a38 <ComputeSquareWave+0x84>
 8006a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	60fa      	str	r2, [r7, #12]
 8006a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a16:	ee17 2a90 	vmov	r2, s15
 8006a1a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d3ce      	bcc.n	80069c8 <ComputeSquareWave+0x14>
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	44fff000 	.word	0x44fff000

08006a3c <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e052      	b.n	8006af6 <ComputeSawWave+0xba>
		if (i < len / 2)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d222      	bcs.n	8006aa0 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006a68:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a6c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a86:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006b0c <ComputeSawWave+0xd0>
 8006a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	60fa      	str	r2, [r7, #12]
 8006a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a98:	ee17 2a90 	vmov	r2, s15
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e027      	b.n	8006af0 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8006aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006aa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ac2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006b0c <ComputeSawWave+0xd0>
 8006adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	60fa      	str	r2, [r7, #12]
 8006ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aea:	ee17 2a90 	vmov	r2, s15
 8006aee:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	3301      	adds	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d3a8      	bcc.n	8006a50 <ComputeSawWave+0x14>
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	44fff000 	.word	0x44fff000

08006b10 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	e082      	b.n	8006c2a <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	089b      	lsrs	r3, r3, #2
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d221      	bcs.n	8006b72 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b58:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006c44 <ComputeTriangleWave+0x134>
 8006b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	1d1a      	adds	r2, r3, #4
 8006b64:	60fa      	str	r2, [r7, #12]
 8006b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6a:	ee17 2a90 	vmov	r2, s15
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e058      	b.n	8006c24 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	089b      	lsrs	r3, r3, #2
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d227      	bcs.n	8006bd2 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8006b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ba2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bb8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006c44 <ComputeTriangleWave+0x134>
 8006bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	60fa      	str	r2, [r7, #12]
 8006bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e028      	b.n	8006c24 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8006bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bd6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bf6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c0c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006c44 <ComputeTriangleWave+0x134>
 8006c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	60fa      	str	r2, [r7, #12]
 8006c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1e:	ee17 2a90 	vmov	r2, s15
 8006c22:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	3301      	adds	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	f4ff af78 	bcc.w	8006b24 <ComputeTriangleWave+0x14>
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	44fff000 	.word	0x44fff000

08006c48 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e008      	b.n	8006c6a <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006c62:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d3f2      	bcc.n	8006c58 <ComputeNullWave+0x10>
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d044      	beq.n	8006d20 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c9c:	7e1b      	ldrb	r3, [r3, #24]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d844      	bhi.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cd3 	.word	0x08006cd3
 8006cb0:	08006ced 	.word	0x08006ced
 8006cb4:	08006d07 	.word	0x08006d07
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8006cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cca:	6838      	ldr	r0, [r7, #0]
 8006ccc:	f7ff fe20 	bl	8006910 <ComputeSineWave>
			break;
 8006cd0:	e02c      	b.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8006cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7ff fe65 	bl	80069b4 <ComputeSquareWave>
			break;
 8006cea:	e01f      	b.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf2:	edd3 7a08 	vldr	s15, [r3, #32]
 8006cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cfe:	6838      	ldr	r0, [r7, #0]
 8006d00:	f7ff fe9c 	bl	8006a3c <ComputeSawWave>
			break;
 8006d04:	e012      	b.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006d10:	eeb0 0a67 	vmov.f32	s0, s15
 8006d14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	f7ff fef9 	bl	8006b10 <ComputeTriangleWave>
			break;
 8006d1e:	e005      	b.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f7ff ff8f 	bl	8006c48 <ComputeNullWave>
	}
}
 8006d2a:	e7ff      	b.n	8006d2c <VibeCheckWaveGen_RecomputeWave+0xac>
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = VC_WAVE_DEFAULT_FREQ_HZ;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d52:	461a      	mov	r2, r3
 8006d54:	4b3c      	ldr	r3, [pc, #240]	@ (8006e48 <VibeCheckWaveGen_Init+0x114>)
 8006d56:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = VC_WAVE_DEFAULT_AMPLITUDE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8006d64:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d76:	461a      	mov	r2, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6253      	str	r3, [r2, #36]	@ 0x24

	wavegen->wave_ping_compute_pending = 0;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2300      	movs	r3, #0
 8006d92:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da6:	461a      	mov	r2, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db2:	461a      	mov	r2, r3
 8006db4:	2300      	movs	r3, #0
 8006db6:	6293      	str	r3, [r2, #40]	@ 0x28

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	220b      	movs	r2, #11
 8006dc0:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc8:	edd3 7a07 	vldr	s15, [r3, #28]
 8006dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f8db 	bl	8006f8c <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff4f 	bl	8006c80 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff ff48 	bl	8006c80 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6858      	ldr	r0, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f103 0208 	add.w	r2, r3, #8
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e02:	2100      	movs	r1, #0
 8006e04:	f002 fa4c 	bl	80092a0 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6858      	ldr	r0, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f103 0208 	add.w	r2, r3, #8
 8006e12:	2300      	movs	r3, #0
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e1a:	2110      	movs	r1, #16
 8006e1c:	f002 fa40 	bl	80092a0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f00a fe8d 	bl	8011b44 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	4807      	ldr	r0, [pc, #28]	@ (8006e4c <VibeCheckWaveGen_Init+0x118>)
 8006e30:	f004 ff60 	bl	800bcf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8006e34:	2200      	movs	r2, #0
 8006e36:	2102      	movs	r1, #2
 8006e38:	4804      	ldr	r0, [pc, #16]	@ (8006e4c <VibeCheckWaveGen_Init+0x118>)
 8006e3a:	f004 ff5b 	bl	800bcf4 <HAL_GPIO_WritePin>
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	42700000 	.word	0x42700000
 8006e4c:	58020000 	.word	0x58020000

08006e50 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	uint32_t time = HAL_GetTick();
 8006e58:	f000 fcd4 	bl	8007804 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]


	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <VibeCheckWaveGen_Update+0x32>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff05 	bl	8006c80 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <VibeCheckWaveGen_Update+0x58>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fef2 	bl	8006c80 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	f241 032c 	movw	r3, #4140	@ 0x102c
 8006eae:	4413      	add	r3, r2
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	68f9      	ldr	r1, [r7, #12]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fb f9b4 	bl	8002224 <Sequencer_Update>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d017      	beq.n	8006ef2 <VibeCheckWaveGen_Update+0xa2>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d006      	beq.n	8006edc <VibeCheckWaveGen_Update+0x8c>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8006efc <VibeCheckWaveGen_Update+0xac>)
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	edd3 7a00 	vldr	s15, [r3]
 8006eda:	e005      	b.n	8006ee8 <VibeCheckWaveGen_Update+0x98>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4a08      	ldr	r2, [pc, #32]	@ (8006f00 <VibeCheckWaveGen_Update+0xb0>)
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	edd3 7a00 	vldr	s15, [r3]
 8006ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f84d 	bl	8006f8c <VibeCheckWaveGen_SetFrequency>
	}

}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	0801e630 	.word	0x0801e630
 8006f00:	0801e514 	.word	0x0801e514

08006f04 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d111      	bne.n	8006f3c <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2301      	movs	r3, #1
 8006f22:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f36:	461a      	mov	r2, r3
 8006f38:	2301      	movs	r3, #1
 8006f3a:	60d3      	str	r3, [r2, #12]
	}

}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d011      	beq.n	8006f80 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2301      	movs	r3, #1
 8006f72:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	60d3      	str	r3, [r2, #12]
	}
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8006f98:	edd7 7a00 	vldr	s15, [r7]
 8006f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	d502      	bpl.n	8006fac <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006fac:	edd7 7a00 	vldr	s15, [r7]
 8006fb0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800702c <VibeCheckWaveGen_SetFrequency+0xa0>
 8006fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	dd01      	ble.n	8006fc2 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <VibeCheckWaveGen_SetFrequency+0xa4>)
 8006fc0:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8006fc2:	edd7 7a00 	vldr	s15, [r7]
 8006fc6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8007034 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006fce:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007038 <VibeCheckWaveGen_SetFrequency+0xac>
 8006fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe2:	ee17 3a90 	vmov	r3, s15
 8006fe6:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ffa:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8007038 <VibeCheckWaveGen_SetFrequency+0xac>
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8007034 <VibeCheckWaveGen_SetFrequency+0xa8>
 8007006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007010:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	46989600 	.word	0x46989600
 8007030:	46989600 	.word	0x46989600
 8007034:	44000000 	.word	0x44000000
 8007038:	4b989680 	.word	0x4b989680

0800703c <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	ee07 3a90 	vmov	s15, r3
}
 8007050:	eeb0 0a67 	vmov.f32	s0, s15
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 800706a:	edd7 7a00 	vldr	s15, [r7]
 800706e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007076:	d502      	bpl.n	800707e <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800707e:	edd7 7a00 	vldr	s15, [r7]
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	dd02      	ble.n	8007096 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8007090:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007094:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709c:	461a      	mov	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a8:	461a      	mov	r2, r3
 80070aa:	2301      	movs	r3, #1
 80070ac:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b4:	461a      	mov	r2, r3
 80070b6:	2301      	movs	r3, #1
 80070b8:	60d3      	str	r3, [r2, #12]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	ee07 3a90 	vmov	s15, r3
}
 80070da:	eeb0 0a67 	vmov.f32	s0, s15
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fa:	461a      	mov	r2, r3
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007106:	461a      	mov	r2, r3
 8007108:	2301      	movs	r3, #1
 800710a:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007112:	461a      	mov	r2, r3
 8007114:	2301      	movs	r3, #1
 8007116:	60d3      	str	r3, [r2, #12]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007132:	7e1b      	ldrb	r3, [r3, #24]
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715a:	461a      	mov	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007166:	461a      	mov	r2, r3
 8007168:	2301      	movs	r3, #1
 800716a:	6113      	str	r3, [r2, #16]
	}
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007192:	461a      	mov	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800719e:	461a      	mov	r2, r3
 80071a0:	2301      	movs	r3, #1
 80071a2:	6153      	str	r3, [r2, #20]
	}
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 80071b0:	b590      	push	{r4, r7, lr}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f241 032c 	movw	r3, #4140	@ 0x102c
 80071be:	4413      	add	r3, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fa fffd 	bl	80021c0 <Sequencer_Init>
	if (wavegen->demo_num)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f241 002c 	movw	r0, #4140	@ 0x102c
 80071d8:	4418      	add	r0, r3
 80071da:	2301      	movs	r3, #1
 80071dc:	221a      	movs	r2, #26
 80071de:	4916      	ldr	r1, [pc, #88]	@ (8007238 <VibeCheckWaveGen_StartDemo+0x88>)
 80071e0:	f7fb f80a 	bl	80021f8 <Sequencer_SetSequence>
 80071e4:	e008      	b.n	80071f8 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f241 002c 	movw	r0, #4140	@ 0x102c
 80071ec:	4418      	add	r0, r3
 80071ee:	2301      	movs	r3, #1
 80071f0:	222d      	movs	r2, #45	@ 0x2d
 80071f2:	4912      	ldr	r1, [pc, #72]	@ (800723c <VibeCheckWaveGen_StartDemo+0x8c>)
 80071f4:	f7fb f800 	bl	80021f8 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007212:	629a      	str	r2, [r3, #40]	@ 0x28
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f241 042c 	movw	r4, #4140	@ 0x102c
 800721a:	441c      	add	r4, r3
 800721c:	f000 faf2 	bl	8007804 <HAL_GetTick>
 8007220:	4603      	mov	r3, r0
 8007222:	4619      	mov	r1, r3
 8007224:	4620      	mov	r0, r4
 8007226:	f7fb f83f 	bl	80022a8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fe6a 	bl	8006f04 <VibeCheckWaveGen_Start>
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bd90      	pop	{r4, r7, pc}
 8007238:	0801e4ac 	.word	0x0801e4ac
 800723c:	0801e57c 	.word	0x0801e57c

08007240 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff fe7d 	bl	8006f48 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	f241 032c 	movw	r3, #4140	@ 0x102c
 8007254:	4413      	add	r3, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f7fb f83a 	bl	80022d0 <Sequencer_Stop>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b094      	sub	sp, #80	@ 0x50
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800726e:	f107 0310 	add.w	r3, r7, #16
 8007272:	2240      	movs	r2, #64	@ 0x40
 8007274:	4619      	mov	r1, r3
 8007276:	6838      	ldr	r0, [r7, #0]
 8007278:	f7fe fe48 	bl	8005f0c <VibeCheckShell_GetNextString>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80b0 	beq.w	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	4959      	ldr	r1, [pc, #356]	@ (80073f0 <VibeCheckWaveGenCMD_Set+0x18c>)
 800728a:	4618      	mov	r0, r3
 800728c:	f7f9 f840 	bl	8000310 <strcmp>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d119      	bne.n	80072ca <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4619      	mov	r1, r3
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f7fe fec9 	bl	8006034 <VibeCheckShell_GetNextFloat>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 809d 	beq.w	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 80072aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ae:	eeb0 0a67 	vmov.f32	s0, s15
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fe6a 	bl	8006f8c <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80072b8:	494e      	ldr	r1, [pc, #312]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 80072ba:	6838      	ldr	r0, [r7, #0]
 80072bc:	f7fe ff46 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80072c0:	6838      	ldr	r0, [r7, #0]
 80072c2:	f7fe ffc3 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e08d      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 80072ca:	f107 0310 	add.w	r3, r7, #16
 80072ce:	494a      	ldr	r1, [pc, #296]	@ (80073f8 <VibeCheckWaveGenCMD_Set+0x194>)
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7f9 f81d 	bl	8000310 <strcmp>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d118      	bne.n	800730e <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	4619      	mov	r1, r3
 80072e2:	6838      	ldr	r0, [r7, #0]
 80072e4:	f7fe fea6 	bl	8006034 <VibeCheckShell_GetNextFloat>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d07a      	beq.n	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 80072ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80072f2:	eeb0 0a67 	vmov.f32	s0, s15
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff feb1 	bl	800705e <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 80072fc:	493d      	ldr	r1, [pc, #244]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	f7fe ff24 	bl	800614c <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f7fe ffa1 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800730a:	2301      	movs	r3, #1
 800730c:	e06b      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 800730e:	f107 0310 	add.w	r3, r7, #16
 8007312:	493a      	ldr	r1, [pc, #232]	@ (80073fc <VibeCheckWaveGenCMD_Set+0x198>)
 8007314:	4618      	mov	r0, r3
 8007316:	f7f8 fffb 	bl	8000310 <strcmp>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d161      	bne.n	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007320:	f107 0310 	add.w	r3, r7, #16
 8007324:	2240      	movs	r2, #64	@ 0x40
 8007326:	4619      	mov	r1, r3
 8007328:	6838      	ldr	r0, [r7, #0]
 800732a:	f7fe fdef 	bl	8005f0c <VibeCheckShell_GetNextString>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d057      	beq.n	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	4931      	ldr	r1, [pc, #196]	@ (8007400 <VibeCheckWaveGenCMD_Set+0x19c>)
 800733a:	4618      	mov	r0, r3
 800733c:	f7f8 ffe8 	bl	8000310 <strcmp>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10c      	bne.n	8007360 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fecd 	bl	80070e8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800734e:	4929      	ldr	r1, [pc, #164]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 8007350:	6838      	ldr	r0, [r7, #0]
 8007352:	f7fe fefb 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007356:	6838      	ldr	r0, [r7, #0]
 8007358:	f7fe ff78 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800735c:	2301      	movs	r3, #1
 800735e:	e042      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8007360:	f107 0310 	add.w	r3, r7, #16
 8007364:	4927      	ldr	r1, [pc, #156]	@ (8007404 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8007366:	4618      	mov	r0, r3
 8007368:	f7f8 ffd2 	bl	8000310 <strcmp>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff feb7 	bl	80070e8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800737a:	491e      	ldr	r1, [pc, #120]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 800737c:	6838      	ldr	r0, [r7, #0]
 800737e:	f7fe fee5 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007382:	6838      	ldr	r0, [r7, #0]
 8007384:	f7fe ff62 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007388:	2301      	movs	r3, #1
 800738a:	e02c      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 800738c:	f107 0310 	add.w	r3, r7, #16
 8007390:	491d      	ldr	r1, [pc, #116]	@ (8007408 <VibeCheckWaveGenCMD_Set+0x1a4>)
 8007392:	4618      	mov	r0, r3
 8007394:	f7f8 ffbc 	bl	8000310 <strcmp>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10c      	bne.n	80073b8 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 800739e:	2102      	movs	r1, #2
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fea1 	bl	80070e8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80073a6:	4913      	ldr	r1, [pc, #76]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 80073a8:	6838      	ldr	r0, [r7, #0]
 80073aa:	f7fe fecf 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	f7fe ff4c 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e016      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 80073b8:	f107 0310 	add.w	r3, r7, #16
 80073bc:	4913      	ldr	r1, [pc, #76]	@ (800740c <VibeCheckWaveGenCMD_Set+0x1a8>)
 80073be:	4618      	mov	r0, r3
 80073c0:	f7f8 ffa6 	bl	8000310 <strcmp>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10c      	bne.n	80073e4 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 80073ca:	2103      	movs	r1, #3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fe8b 	bl	80070e8 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80073d2:	4908      	ldr	r1, [pc, #32]	@ (80073f4 <VibeCheckWaveGenCMD_Set+0x190>)
 80073d4:	6838      	ldr	r0, [r7, #0]
 80073d6:	f7fe feb9 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80073da:	6838      	ldr	r0, [r7, #0]
 80073dc:	f7fe ff36 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3750      	adds	r7, #80	@ 0x50
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	0801dd50 	.word	0x0801dd50
 80073f4:	0801dd5c 	.word	0x0801dd5c
 80073f8:	0801dd60 	.word	0x0801dd60
 80073fc:	0801dd6c 	.word	0x0801dd6c
 8007400:	0801dd78 	.word	0x0801dd78
 8007404:	0801dd80 	.word	0x0801dd80
 8007408:	0801dd88 	.word	0x0801dd88
 800740c:	0801dd8c 	.word	0x0801dd8c

08007410 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b092      	sub	sp, #72	@ 0x48
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	2240      	movs	r2, #64	@ 0x40
 8007420:	4619      	mov	r1, r3
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f7fe fd72 	bl	8005f0c <VibeCheckShell_GetNextString>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d077      	beq.n	800751e <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	493d      	ldr	r1, [pc, #244]	@ (8007528 <VibeCheckWaveGenCMD_Get+0x118>)
 8007434:	4618      	mov	r0, r3
 8007436:	f7f8 ff6b 	bl	8000310 <strcmp>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d115      	bne.n	800746c <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007440:	493a      	ldr	r1, [pc, #232]	@ (800752c <VibeCheckWaveGenCMD_Get+0x11c>)
 8007442:	6838      	ldr	r0, [r7, #0]
 8007444:	f7fe fe82 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007448:	6838      	ldr	r0, [r7, #0]
 800744a:	f7fe fef1 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fdf4 	bl	800703c <VibeCheckWaveGen_GetFrequency>
 8007454:	eef0 7a40 	vmov.f32	s15, s0
 8007458:	eeb0 0a67 	vmov.f32	s0, s15
 800745c:	6838      	ldr	r0, [r7, #0]
 800745e:	f7fe fec9 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007462:	6838      	ldr	r0, [r7, #0]
 8007464:	f7fe fef2 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007468:	2301      	movs	r3, #1
 800746a:	e059      	b.n	8007520 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 800746c:	f107 0308 	add.w	r3, r7, #8
 8007470:	492f      	ldr	r1, [pc, #188]	@ (8007530 <VibeCheckWaveGenCMD_Get+0x120>)
 8007472:	4618      	mov	r0, r3
 8007474:	f7f8 ff4c 	bl	8000310 <strcmp>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d115      	bne.n	80074aa <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800747e:	492b      	ldr	r1, [pc, #172]	@ (800752c <VibeCheckWaveGenCMD_Get+0x11c>)
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	f7fe fe63 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f7fe fed2 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff fe1a 	bl	80070c6 <VibeCheckWaveGen_GetAmplitude>
 8007492:	eef0 7a40 	vmov.f32	s15, s0
 8007496:	eeb0 0a67 	vmov.f32	s0, s15
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f7fe feaa 	bl	80061f4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80074a0:	6838      	ldr	r0, [r7, #0]
 80074a2:	f7fe fed3 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e03a      	b.n	8007520 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80074aa:	f107 0308 	add.w	r3, r7, #8
 80074ae:	4921      	ldr	r1, [pc, #132]	@ (8007534 <VibeCheckWaveGenCMD_Get+0x124>)
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7f8 ff2d 	bl	8000310 <strcmp>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d130      	bne.n	800751e <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80074bc:	491b      	ldr	r1, [pc, #108]	@ (800752c <VibeCheckWaveGenCMD_Get+0x11c>)
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	f7fe fe44 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80074c4:	6838      	ldr	r0, [r7, #0]
 80074c6:	f7fe feb3 	bl	8006230 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fe2a 	bl	8007124 <VibeCheckWaveGen_GetWaveform>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d81e      	bhi.n	8007514 <VibeCheckWaveGenCMD_Get+0x104>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <VibeCheckWaveGenCMD_Get+0xcc>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074f7 	.word	0x080074f7
 80074e4:	08007501 	.word	0x08007501
 80074e8:	0800750b 	.word	0x0800750b
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 80074ec:	4912      	ldr	r1, [pc, #72]	@ (8007538 <VibeCheckWaveGenCMD_Get+0x128>)
 80074ee:	6838      	ldr	r0, [r7, #0]
 80074f0:	f7fe fe2c 	bl	800614c <VibeCheckShell_PutOutputString>
				break;
 80074f4:	e00e      	b.n	8007514 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 80074f6:	4911      	ldr	r1, [pc, #68]	@ (800753c <VibeCheckWaveGenCMD_Get+0x12c>)
 80074f8:	6838      	ldr	r0, [r7, #0]
 80074fa:	f7fe fe27 	bl	800614c <VibeCheckShell_PutOutputString>
				break;
 80074fe:	e009      	b.n	8007514 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8007500:	490f      	ldr	r1, [pc, #60]	@ (8007540 <VibeCheckWaveGenCMD_Get+0x130>)
 8007502:	6838      	ldr	r0, [r7, #0]
 8007504:	f7fe fe22 	bl	800614c <VibeCheckShell_PutOutputString>
				break;
 8007508:	e004      	b.n	8007514 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 800750a:	490e      	ldr	r1, [pc, #56]	@ (8007544 <VibeCheckWaveGenCMD_Get+0x134>)
 800750c:	6838      	ldr	r0, [r7, #0]
 800750e:	f7fe fe1d 	bl	800614c <VibeCheckShell_PutOutputString>
				break;
 8007512:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007514:	6838      	ldr	r0, [r7, #0]
 8007516:	f7fe fe99 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3748      	adds	r7, #72	@ 0x48
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	0801dd50 	.word	0x0801dd50
 800752c:	0801dd5c 	.word	0x0801dd5c
 8007530:	0801dd60 	.word	0x0801dd60
 8007534:	0801dd6c 	.word	0x0801dd6c
 8007538:	0801dd78 	.word	0x0801dd78
 800753c:	0801dd80 	.word	0x0801dd80
 8007540:	0801dd88 	.word	0x0801dd88
 8007544:	0801dd8c 	.word	0x0801dd8c

08007548 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b094      	sub	sp, #80	@ 0x50
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007556:	f107 030c 	add.w	r3, r7, #12
 800755a:	2240      	movs	r2, #64	@ 0x40
 800755c:	4619      	mov	r1, r3
 800755e:	6838      	ldr	r0, [r7, #0]
 8007560:	f7fe fcd4 	bl	8005f0c <VibeCheckShell_GetNextString>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 808b 	beq.w	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4946      	ldr	r1, [pc, #280]	@ (800768c <VibeCheckWaveGenCMD_Execute+0x144>)
 8007572:	4618      	mov	r0, r3
 8007574:	f7f8 fecc 	bl	8000310 <strcmp>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 800757e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007580:	f7ff fcc0 	bl	8006f04 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007584:	4942      	ldr	r1, [pc, #264]	@ (8007690 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007586:	6838      	ldr	r0, [r7, #0]
 8007588:	f7fe fde0 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800758c:	6838      	ldr	r0, [r7, #0]
 800758e:	f7fe fe5d 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007592:	2301      	movs	r3, #1
 8007594:	e076      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8007596:	f107 030c 	add.w	r3, r7, #12
 800759a:	493e      	ldr	r1, [pc, #248]	@ (8007694 <VibeCheckWaveGenCMD_Execute+0x14c>)
 800759c:	4618      	mov	r0, r3
 800759e:	f7f8 feb7 	bl	8000310 <strcmp>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80075a8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80075aa:	f7ff fccd 	bl	8006f48 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80075ae:	4938      	ldr	r1, [pc, #224]	@ (8007690 <VibeCheckWaveGenCMD_Execute+0x148>)
 80075b0:	6838      	ldr	r0, [r7, #0]
 80075b2:	f7fe fdcb 	bl	800614c <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80075b6:	6838      	ldr	r0, [r7, #0]
 80075b8:	f7fe fe48 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	e061      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 80075c0:	f107 030c 	add.w	r3, r7, #12
 80075c4:	4934      	ldr	r1, [pc, #208]	@ (8007698 <VibeCheckWaveGenCMD_Execute+0x150>)
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f8 fea2 	bl	8000310 <strcmp>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80075d6:	f7ff fe45 	bl	8007264 <VibeCheckWaveGenCMD_Set>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d050      	beq.n	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e04f      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 80075e4:	f107 030c 	add.w	r3, r7, #12
 80075e8:	492c      	ldr	r1, [pc, #176]	@ (800769c <VibeCheckWaveGenCMD_Execute+0x154>)
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f8 fe90 	bl	8000310 <strcmp>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d108      	bne.n	8007608 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80075fa:	f7ff ff09 	bl	8007410 <VibeCheckWaveGenCMD_Get>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d03e      	beq.n	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007604:	2301      	movs	r3, #1
 8007606:	e03d      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	4924      	ldr	r1, [pc, #144]	@ (80076a0 <VibeCheckWaveGenCMD_Execute+0x158>)
 800760e:	4618      	mov	r0, r3
 8007610:	f7f8 fe7e 	bl	8000310 <strcmp>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d133      	bne.n	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800761a:	f107 030c 	add.w	r3, r7, #12
 800761e:	2240      	movs	r2, #64	@ 0x40
 8007620:	4619      	mov	r1, r3
 8007622:	6838      	ldr	r0, [r7, #0]
 8007624:	f7fe fc72 	bl	8005f0c <VibeCheckShell_GetNextString>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d029      	beq.n	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 800762e:	f107 030c 	add.w	r3, r7, #12
 8007632:	4916      	ldr	r1, [pc, #88]	@ (800768c <VibeCheckWaveGenCMD_Execute+0x144>)
 8007634:	4618      	mov	r0, r3
 8007636:	f7f8 fe6b 	bl	8000310 <strcmp>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8007640:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007642:	f7ff fdb5 	bl	80071b0 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007646:	4912      	ldr	r1, [pc, #72]	@ (8007690 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007648:	6838      	ldr	r0, [r7, #0]
 800764a:	f7fe fd7f 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800764e:	6838      	ldr	r0, [r7, #0]
 8007650:	f7fe fdfc 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007654:	2301      	movs	r3, #1
 8007656:	e015      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8007658:	f107 030c 	add.w	r3, r7, #12
 800765c:	490d      	ldr	r1, [pc, #52]	@ (8007694 <VibeCheckWaveGenCMD_Execute+0x14c>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7f8 fe56 	bl	8000310 <strcmp>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 800766a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800766c:	f7ff fde8 	bl	8007240 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007670:	4907      	ldr	r1, [pc, #28]	@ (8007690 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007672:	6838      	ldr	r0, [r7, #0]
 8007674:	f7fe fd6a 	bl	800614c <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007678:	6838      	ldr	r0, [r7, #0]
 800767a:	f7fe fde7 	bl	800624c <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3750      	adds	r7, #80	@ 0x50
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	0801dd98 	.word	0x0801dd98
 8007690:	0801dd5c 	.word	0x0801dd5c
 8007694:	0801dda0 	.word	0x0801dda0
 8007698:	0801dda8 	.word	0x0801dda8
 800769c:	0801ddac 	.word	0x0801ddac
 80076a0:	0801ddb0 	.word	0x0801ddb0

080076a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80076a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80076dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80076a8:	f7fb fc04 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076ac:	480c      	ldr	r0, [pc, #48]	@ (80076e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80076ae:	490d      	ldr	r1, [pc, #52]	@ (80076e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80076b0:	4a0d      	ldr	r2, [pc, #52]	@ (80076e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80076b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076b4:	e002      	b.n	80076bc <LoopCopyDataInit>

080076b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076ba:	3304      	adds	r3, #4

080076bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076c0:	d3f9      	bcc.n	80076b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076c2:	4a0a      	ldr	r2, [pc, #40]	@ (80076ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076c4:	4c0a      	ldr	r4, [pc, #40]	@ (80076f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80076c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076c8:	e001      	b.n	80076ce <LoopFillZerobss>

080076ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076cc:	3204      	adds	r2, #4

080076ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076d0:	d3fb      	bcc.n	80076ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80076d2:	f012 ff11 	bl	801a4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076d6:	f7f9 fe19 	bl	800130c <main>
  bx  lr
 80076da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80076dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80076e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80076e4:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 80076e8:	0801ee60 	.word	0x0801ee60
  ldr r2, =_sbss
 80076ec:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 80076f0:	2401da10 	.word	0x2401da10

080076f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076f4:	e7fe      	b.n	80076f4 <ADC3_IRQHandler>
	...

080076f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076fe:	2003      	movs	r0, #3
 8007700:	f001 fcf4 	bl	80090ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007704:	f006 fcd6 	bl	800e0b4 <HAL_RCC_GetSysClockFreq>
 8007708:	4602      	mov	r2, r0
 800770a:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <HAL_Init+0x68>)
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	4913      	ldr	r1, [pc, #76]	@ (8007764 <HAL_Init+0x6c>)
 8007716:	5ccb      	ldrb	r3, [r1, r3]
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
 8007720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007722:	4b0f      	ldr	r3, [pc, #60]	@ (8007760 <HAL_Init+0x68>)
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	4a0e      	ldr	r2, [pc, #56]	@ (8007764 <HAL_Init+0x6c>)
 800772c:	5cd3      	ldrb	r3, [r2, r3]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	fa22 f303 	lsr.w	r3, r2, r3
 8007738:	4a0b      	ldr	r2, [pc, #44]	@ (8007768 <HAL_Init+0x70>)
 800773a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800773c:	4a0b      	ldr	r2, [pc, #44]	@ (800776c <HAL_Init+0x74>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007742:	2002      	movs	r0, #2
 8007744:	f000 f814 	bl	8007770 <HAL_InitTick>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e002      	b.n	8007758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007752:	f7fa fdd7 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	58024400 	.word	0x58024400
 8007764:	0801ddec 	.word	0x0801ddec
 8007768:	24000004 	.word	0x24000004
 800776c:	24000000 	.word	0x24000000

08007770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007778:	4b15      	ldr	r3, [pc, #84]	@ (80077d0 <HAL_InitTick+0x60>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e021      	b.n	80077c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007784:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <HAL_InitTick+0x64>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <HAL_InitTick+0x60>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	4619      	mov	r1, r3
 800778e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007792:	fbb3 f3f1 	udiv	r3, r3, r1
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fcd9 	bl	8009152 <HAL_SYSTICK_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e00e      	b.n	80077c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b0f      	cmp	r3, #15
 80077ae:	d80a      	bhi.n	80077c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077b0:	2200      	movs	r2, #0
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	f001 fca3 	bl	8009102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077bc:	4a06      	ldr	r2, [pc, #24]	@ (80077d8 <HAL_InitTick+0x68>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e000      	b.n	80077c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	2400003c 	.word	0x2400003c
 80077d4:	24000000 	.word	0x24000000
 80077d8:	24000038 	.word	0x24000038

080077dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80077e0:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <HAL_IncTick+0x20>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <HAL_IncTick+0x24>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4413      	add	r3, r2
 80077ec:	4a04      	ldr	r2, [pc, #16]	@ (8007800 <HAL_IncTick+0x24>)
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	2400003c 	.word	0x2400003c
 8007800:	240144dc 	.word	0x240144dc

08007804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return uwTick;
 8007808:	4b03      	ldr	r3, [pc, #12]	@ (8007818 <HAL_GetTick+0x14>)
 800780a:	681b      	ldr	r3, [r3, #0]
}
 800780c:	4618      	mov	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	240144dc 	.word	0x240144dc

0800781c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007824:	f7ff ffee 	bl	8007804 <HAL_GetTick>
 8007828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d005      	beq.n	8007842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <HAL_Delay+0x44>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007842:	bf00      	nop
 8007844:	f7ff ffde 	bl	8007804 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d8f7      	bhi.n	8007844 <HAL_Delay+0x28>
  {
  }
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	2400003c 	.word	0x2400003c

08007864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	609a      	str	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3360      	adds	r3, #96	@ 0x60
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a10      	ldr	r2, [pc, #64]	@ (800792c <LL_ADC_SetOffset+0x60>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10b      	bne.n	8007908 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007906:	e00b      	b.n	8007920 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	430b      	orrs	r3, r1
 800791a:	431a      	orrs	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	601a      	str	r2, [r3, #0]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	58026000 	.word	0x58026000

08007930 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3360      	adds	r3, #96	@ 0x60
 800793e:	461a      	mov	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	431a      	orrs	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	611a      	str	r2, [r3, #16]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3360      	adds	r3, #96	@ 0x60
 80079a8:	461a      	mov	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	431a      	orrs	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	601a      	str	r2, [r3, #0]
  }
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	58026000 	.word	0x58026000

080079d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <LL_ADC_SetOffsetSaturation+0x40>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10e      	bne.n	8007a06 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3360      	adds	r3, #96	@ 0x60
 80079ec:	461a      	mov	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	58026000 	.word	0x58026000

08007a18 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a0c      	ldr	r2, [pc, #48]	@ (8007a58 <LL_ADC_SetOffsetSign+0x40>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10e      	bne.n	8007a4a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3360      	adds	r3, #96	@ 0x60
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	58026000 	.word	0x58026000

08007a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3360      	adds	r3, #96	@ 0x60
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a0c      	ldr	r2, [pc, #48]	@ (8007aac <LL_ADC_SetOffsetState+0x50>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d108      	bne.n	8007a90 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8007a8e:	e007      	b.n	8007aa0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	58026000 	.word	0x58026000

08007ab0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3330      	adds	r3, #48	@ 0x30
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	0a1b      	lsrs	r3, r3, #8
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	f003 030c 	and.w	r3, r3, #12
 8007acc:	4413      	add	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	211f      	movs	r1, #31
 8007adc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0e9b      	lsrs	r3, r3, #26
 8007ae8:	f003 011f 	and.w	r1, r3, #31
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	fa01 f303 	lsl.w	r3, r1, r3
 8007af6:	431a      	orrs	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3314      	adds	r3, #20
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0e5b      	lsrs	r3, r3, #25
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	4413      	add	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	0d1b      	lsrs	r3, r3, #20
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	2107      	movs	r1, #7
 8007b36:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	401a      	ands	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	0d1b      	lsrs	r3, r3, #20
 8007b42:	f003 031f 	and.w	r3, r3, #31
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d115      	bne.n	8007ba0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0318 	and.w	r3, r3, #24
 8007b8a:	4914      	ldr	r1, [pc, #80]	@ (8007bdc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007b8c:	40d9      	lsrs	r1, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	400b      	ands	r3, r1
 8007b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007b9e:	e014      	b.n	8007bca <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bac:	43db      	mvns	r3, r3
 8007bae:	401a      	ands	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0318 	and.w	r3, r3, #24
 8007bb6:	4909      	ldr	r1, [pc, #36]	@ (8007bdc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007bb8:	40d9      	lsrs	r1, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	400b      	ands	r3, r1
 8007bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	58026000 	.word	0x58026000
 8007bdc:	000fffff 	.word	0x000fffff

08007be0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	4b04      	ldr	r3, [pc, #16]	@ (8007c00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6093      	str	r3, [r2, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	5fffffc0 	.word	0x5fffffc0

08007c04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c18:	d101      	bne.n	8007c1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <LL_ADC_EnableInternalRegulator+0x24>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	6fffffc0 	.word	0x6fffffc0

08007c54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c68:	d101      	bne.n	8007c6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <LL_ADC_IsEnabled+0x18>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <LL_ADC_IsEnabled+0x1a>
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d101      	bne.n	8007cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d101      	bne.n	8007ce0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e000      	b.n	8007ce2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b089      	sub	sp, #36	@ 0x24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e1ee      	b.n	80080e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d109      	bne.n	8007d2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fa fb0f 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff ff67 	bl	8007c04 <LL_ADC_IsDeepPowerDownEnabled>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff ff4d 	bl	8007be0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff ff82 	bl	8007c54 <LL_ADC_IsInternalRegulatorEnabled>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ff66 	bl	8007c2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d60:	4b8e      	ldr	r3, [pc, #568]	@ (8007f9c <HAL_ADC_Init+0x2ac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	099b      	lsrs	r3, r3, #6
 8007d66:	4a8e      	ldr	r2, [pc, #568]	@ (8007fa0 <HAL_ADC_Init+0x2b0>)
 8007d68:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d72:	e002      	b.n	8007d7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f9      	bne.n	8007d74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff ff65 	bl	8007c54 <LL_ADC_IsInternalRegulatorEnabled>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10d      	bne.n	8007dac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d94:	f043 0210 	orr.w	r2, r3, #16
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da0:	f043 0201 	orr.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff ff76 	bl	8007ca2 <LL_ADC_REG_IsConversionOngoing>
 8007db6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f040 8188 	bne.w	80080d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8184 	bne.w	80080d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dd2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007dd6:	f043 0202 	orr.w	r2, r3, #2
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ff4a 	bl	8007c7c <LL_ADC_IsEnabled>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d136      	bne.n	8007e5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6c      	ldr	r2, [pc, #432]	@ (8007fa4 <HAL_ADC_Init+0x2b4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_ADC_Init+0x112>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8007fa8 <HAL_ADC_Init+0x2b8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10e      	bne.n	8007e20 <HAL_ADC_Init+0x130>
 8007e02:	4868      	ldr	r0, [pc, #416]	@ (8007fa4 <HAL_ADC_Init+0x2b4>)
 8007e04:	f7ff ff3a 	bl	8007c7c <LL_ADC_IsEnabled>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	4867      	ldr	r0, [pc, #412]	@ (8007fa8 <HAL_ADC_Init+0x2b8>)
 8007e0c:	f7ff ff36 	bl	8007c7c <LL_ADC_IsEnabled>
 8007e10:	4603      	mov	r3, r0
 8007e12:	4323      	orrs	r3, r4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	e008      	b.n	8007e32 <HAL_ADC_Init+0x142>
 8007e20:	4862      	ldr	r0, [pc, #392]	@ (8007fac <HAL_ADC_Init+0x2bc>)
 8007e22:	f7ff ff2b 	bl	8007c7c <LL_ADC_IsEnabled>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d012      	beq.n	8007e5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8007fa4 <HAL_ADC_Init+0x2b4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d004      	beq.n	8007e4a <HAL_ADC_Init+0x15a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a58      	ldr	r2, [pc, #352]	@ (8007fa8 <HAL_ADC_Init+0x2b8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d101      	bne.n	8007e4e <HAL_ADC_Init+0x15e>
 8007e4a:	4a59      	ldr	r2, [pc, #356]	@ (8007fb0 <HAL_ADC_Init+0x2c0>)
 8007e4c:	e000      	b.n	8007e50 <HAL_ADC_Init+0x160>
 8007e4e:	4a59      	ldr	r2, [pc, #356]	@ (8007fb4 <HAL_ADC_Init+0x2c4>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7ff fd04 	bl	8007864 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a52      	ldr	r2, [pc, #328]	@ (8007fac <HAL_ADC_Init+0x2bc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d129      	bne.n	8007eba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7e5b      	ldrb	r3, [r3, #25]
 8007e6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007e70:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007e76:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d013      	beq.n	8007ea8 <HAL_ADC_Init+0x1b8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d00d      	beq.n	8007ea4 <HAL_ADC_Init+0x1b4>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b1c      	cmp	r3, #28
 8007e8e:	d007      	beq.n	8007ea0 <HAL_ADC_Init+0x1b0>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b18      	cmp	r3, #24
 8007e96:	d101      	bne.n	8007e9c <HAL_ADC_Init+0x1ac>
 8007e98:	2318      	movs	r3, #24
 8007e9a:	e006      	b.n	8007eaa <HAL_ADC_Init+0x1ba>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e004      	b.n	8007eaa <HAL_ADC_Init+0x1ba>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	e002      	b.n	8007eaa <HAL_ADC_Init+0x1ba>
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	e000      	b.n	8007eaa <HAL_ADC_Init+0x1ba>
 8007ea8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007eaa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eb2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e00e      	b.n	8007ed8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7e5b      	ldrb	r3, [r3, #25]
 8007ebe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007ec4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007eca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ed2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d106      	bne.n	8007ef0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	045b      	lsls	r3, r3, #17
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a26      	ldr	r2, [pc, #152]	@ (8007fac <HAL_ADC_Init+0x2bc>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d115      	bne.n	8007f42 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	4b26      	ldr	r3, [pc, #152]	@ (8007fb8 <HAL_ADC_Init+0x2c8>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	430b      	orrs	r3, r1
 8007f28:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	611a      	str	r2, [r3, #16]
 8007f40:	e009      	b.n	8007f56 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	4b1c      	ldr	r3, [pc, #112]	@ (8007fbc <HAL_ADC_Init+0x2cc>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	69b9      	ldr	r1, [r7, #24]
 8007f52:	430b      	orrs	r3, r1
 8007f54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fea1 	bl	8007ca2 <LL_ADC_REG_IsConversionOngoing>
 8007f60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff feae 	bl	8007cc8 <LL_ADC_INJ_IsConversionOngoing>
 8007f6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 808e 	bne.w	8008092 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 808a 	bne.w	8008092 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a0a      	ldr	r2, [pc, #40]	@ (8007fac <HAL_ADC_Init+0x2bc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d11b      	bne.n	8007fc0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7e1b      	ldrb	r3, [r3, #24]
 8007f8c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f94:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	e018      	b.n	8007fce <HAL_ADC_Init+0x2de>
 8007f9c:	24000000 	.word	0x24000000
 8007fa0:	053e2d63 	.word	0x053e2d63
 8007fa4:	40022000 	.word	0x40022000
 8007fa8:	40022100 	.word	0x40022100
 8007fac:	58026000 	.word	0x58026000
 8007fb0:	40022300 	.word	0x40022300
 8007fb4:	58026300 	.word	0x58026300
 8007fb8:	fff04007 	.word	0xfff04007
 8007fbc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	7e1b      	ldrb	r3, [r3, #24]
 8007fc4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	4b46      	ldr	r3, [pc, #280]	@ (80080f0 <HAL_ADC_Init+0x400>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d137      	bne.n	800805c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80080f4 <HAL_ADC_Init+0x404>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d116      	bne.n	800802a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	4b3d      	ldr	r3, [pc, #244]	@ (80080f8 <HAL_ADC_Init+0x408>)
 8008004:	4013      	ands	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800800e:	4311      	orrs	r1, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008014:	4311      	orrs	r1, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800801a:	430a      	orrs	r2, r1
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	611a      	str	r2, [r3, #16]
 8008028:	e020      	b.n	800806c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	4b32      	ldr	r3, [pc, #200]	@ (80080fc <HAL_ADC_Init+0x40c>)
 8008032:	4013      	ands	r3, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008038:	3a01      	subs	r2, #1
 800803a:	0411      	lsls	r1, r2, #16
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008040:	4311      	orrs	r1, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008046:	4311      	orrs	r1, r2
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800804c:	430a      	orrs	r2, r1
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0201 	orr.w	r2, r2, #1
 8008058:	611a      	str	r2, [r3, #16]
 800805a:	e007      	b.n	800806c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1b      	ldr	r2, [pc, #108]	@ (80080f4 <HAL_ADC_Init+0x404>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d002      	beq.n	8008092 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fd67 	bl	8008b60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d10c      	bne.n	80080b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	f023 010f 	bic.w	r1, r3, #15
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80080b2:	e007      	b.n	80080c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 020f 	bic.w	r2, r2, #15
 80080c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	f043 0201 	orr.w	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80080d4:	e007      	b.n	80080e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080da:	f043 0210 	orr.w	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80080e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3724      	adds	r7, #36	@ 0x24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd90      	pop	{r4, r7, pc}
 80080f0:	ffffbffc 	.word	0xffffbffc
 80080f4:	58026000 	.word	0x58026000
 80080f8:	fc00f81f 	.word	0xfc00f81f
 80080fc:	fc00f81e 	.word	0xfc00f81e

08008100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b0b9      	sub	sp, #228	@ 0xe4
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800811a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4aab      	ldr	r2, [pc, #684]	@ (80083d0 <HAL_ADC_ConfigChannel+0x2d0>)
 8008122:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d102      	bne.n	8008134 <HAL_ADC_ConfigChannel+0x34>
 800812e:	2302      	movs	r3, #2
 8008130:	f000 bcfe 	b.w	8008b30 <HAL_ADC_ConfigChannel+0xa30>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff fdae 	bl	8007ca2 <LL_ADC_REG_IsConversionOngoing>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 84e2 	bne.w	8008b12 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	db38      	blt.n	80081c8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a9e      	ldr	r2, [pc, #632]	@ (80083d4 <HAL_ADC_ConfigChannel+0x2d4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d033      	beq.n	80081c8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008168:	2b00      	cmp	r3, #0
 800816a:	d108      	bne.n	800817e <HAL_ADC_ConfigChannel+0x7e>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	0e9b      	lsrs	r3, r3, #26
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	e01d      	b.n	80081ba <HAL_ADC_ConfigChannel+0xba>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800818a:	fa93 f3a3 	rbit	r3, r3
 800818e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800819a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80081a2:	2320      	movs	r3, #32
 80081a4:	e004      	b.n	80081b0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80081a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081aa:	fab3 f383 	clz	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	2201      	movs	r2, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	69d1      	ldr	r1, [r2, #28]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	430b      	orrs	r3, r1
 80081c6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	f7ff fc6b 	bl	8007ab0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fd5f 	bl	8007ca2 <LL_ADC_REG_IsConversionOngoing>
 80081e4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fd6b 	bl	8007cc8 <LL_ADC_INJ_IsConversionOngoing>
 80081f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f040 8270 	bne.w	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008200:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 826b 	bne.w	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	461a      	mov	r2, r3
 8008218:	f7ff fc76 	bl	8007b08 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a6c      	ldr	r2, [pc, #432]	@ (80083d4 <HAL_ADC_ConfigChannel+0x2d4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d10d      	bne.n	8008242 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	08db      	lsrs	r3, r3, #3
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008240:	e032      	b.n	80082a8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008242:	4b65      	ldr	r3, [pc, #404]	@ (80083d8 <HAL_ADC_ConfigChannel+0x2d8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800824a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800824e:	d10b      	bne.n	8008268 <HAL_ADC_ConfigChannel+0x168>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695a      	ldr	r2, [r3, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	089b      	lsrs	r3, r3, #2
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	e01d      	b.n	80082a4 <HAL_ADC_ConfigChannel+0x1a4>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10b      	bne.n	800828e <HAL_ADC_ConfigChannel+0x18e>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	089b      	lsrs	r3, r3, #2
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	e00a      	b.n	80082a4 <HAL_ADC_ConfigChannel+0x1a4>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d048      	beq.n	8008342 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6919      	ldr	r1, [r3, #16]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082c0:	f7ff fb04 	bl	80078cc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a42      	ldr	r2, [pc, #264]	@ (80083d4 <HAL_ADC_ConfigChannel+0x2d4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d119      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	6919      	ldr	r1, [r3, #16]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7ff fb9c 	bl	8007a18 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	6919      	ldr	r1, [r3, #16]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d102      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0x1f8>
 80082f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082f6:	e000      	b.n	80082fa <HAL_ADC_ConfigChannel+0x1fa>
 80082f8:	2300      	movs	r3, #0
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7ff fb6a 	bl	80079d4 <LL_ADC_SetOffsetSaturation>
 8008300:	e1ee      	b.n	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	6919      	ldr	r1, [r3, #16]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008310:	2b01      	cmp	r3, #1
 8008312:	d102      	bne.n	800831a <HAL_ADC_ConfigChannel+0x21a>
 8008314:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008318:	e000      	b.n	800831c <HAL_ADC_ConfigChannel+0x21c>
 800831a:	2300      	movs	r3, #0
 800831c:	461a      	mov	r2, r3
 800831e:	f7ff fb37 	bl	8007990 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6919      	ldr	r1, [r3, #16]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	7e1b      	ldrb	r3, [r3, #24]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d102      	bne.n	8008338 <HAL_ADC_ConfigChannel+0x238>
 8008332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008336:	e000      	b.n	800833a <HAL_ADC_ConfigChannel+0x23a>
 8008338:	2300      	movs	r3, #0
 800833a:	461a      	mov	r2, r3
 800833c:	f7ff fb0e 	bl	800795c <LL_ADC_SetDataRightShift>
 8008340:	e1ce      	b.n	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a23      	ldr	r2, [pc, #140]	@ (80083d4 <HAL_ADC_ConfigChannel+0x2d4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	f040 8181 	bne.w	8008650 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff faeb 	bl	8007930 <LL_ADC_GetOffsetChannel>
 800835a:	4603      	mov	r3, r0
 800835c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <HAL_ADC_ConfigChannel+0x27a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fae0 	bl	8007930 <LL_ADC_GetOffsetChannel>
 8008370:	4603      	mov	r3, r0
 8008372:	0e9b      	lsrs	r3, r3, #26
 8008374:	f003 021f 	and.w	r2, r3, #31
 8008378:	e01e      	b.n	80083b8 <HAL_ADC_ConfigChannel+0x2b8>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fad5 	bl	8007930 <LL_ADC_GetOffsetChannel>
 8008386:	4603      	mov	r3, r0
 8008388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008390:	fa93 f3a3 	rbit	r3, r3
 8008394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8008398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800839c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80083a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80083a8:	2320      	movs	r3, #32
 80083aa:	e004      	b.n	80083b6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80083ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083b0:	fab3 f383 	clz	r3, r3
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x2dc>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	0e9b      	lsrs	r3, r3, #26
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	e01e      	b.n	800840e <HAL_ADC_ConfigChannel+0x30e>
 80083d0:	47ff0000 	.word	0x47ff0000
 80083d4:	58026000 	.word	0x58026000
 80083d8:	5c001000 	.word	0x5c001000
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083e8:	fa93 f3a3 	rbit	r3, r3
 80083ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80083f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80083f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8008400:	2320      	movs	r3, #32
 8008402:	e004      	b.n	800840e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8008404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008408:	fab3 f383 	clz	r3, r3
 800840c:	b2db      	uxtb	r3, r3
 800840e:	429a      	cmp	r2, r3
 8008410:	d106      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fb1e 	bl	8007a5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2101      	movs	r1, #1
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fa82 	bl	8007930 <LL_ADC_GetOffsetChannel>
 800842c:	4603      	mov	r3, r0
 800842e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <HAL_ADC_ConfigChannel+0x34c>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2101      	movs	r1, #1
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fa77 	bl	8007930 <LL_ADC_GetOffsetChannel>
 8008442:	4603      	mov	r3, r0
 8008444:	0e9b      	lsrs	r3, r3, #26
 8008446:	f003 021f 	and.w	r2, r3, #31
 800844a:	e01e      	b.n	800848a <HAL_ADC_ConfigChannel+0x38a>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2101      	movs	r1, #1
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fa6c 	bl	8007930 <LL_ADC_GetOffsetChannel>
 8008458:	4603      	mov	r3, r0
 800845a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008462:	fa93 f3a3 	rbit	r3, r3
 8008466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800846a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800846e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8008472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800847a:	2320      	movs	r3, #32
 800847c:	e004      	b.n	8008488 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800847e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008482:	fab3 f383 	clz	r3, r3
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <HAL_ADC_ConfigChannel+0x3a2>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	0e9b      	lsrs	r3, r3, #26
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	e018      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x3d4>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084ae:	fa93 f3a3 	rbit	r3, r3
 80084b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80084b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80084be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80084c6:	2320      	movs	r3, #32
 80084c8:	e004      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80084ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084ce:	fab3 f383 	clz	r3, r3
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d106      	bne.n	80084e6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2200      	movs	r2, #0
 80084de:	2101      	movs	r1, #1
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fabb 	bl	8007a5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fa1f 	bl	8007930 <LL_ADC_GetOffsetChannel>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <HAL_ADC_ConfigChannel+0x412>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2102      	movs	r1, #2
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff fa14 	bl	8007930 <LL_ADC_GetOffsetChannel>
 8008508:	4603      	mov	r3, r0
 800850a:	0e9b      	lsrs	r3, r3, #26
 800850c:	f003 021f 	and.w	r2, r3, #31
 8008510:	e01e      	b.n	8008550 <HAL_ADC_ConfigChannel+0x450>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fa09 	bl	8007930 <LL_ADC_GetOffsetChannel>
 800851e:	4603      	mov	r3, r0
 8008520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008524:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008528:	fa93 f3a3 	rbit	r3, r3
 800852c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8008530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8008538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8008540:	2320      	movs	r3, #32
 8008542:	e004      	b.n	800854e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8008544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008548:	fab3 f383 	clz	r3, r3
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <HAL_ADC_ConfigChannel+0x468>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	0e9b      	lsrs	r3, r3, #26
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	e014      	b.n	8008592 <HAL_ADC_ConfigChannel+0x492>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008570:	fa93 f3a3 	rbit	r3, r3
 8008574:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800857c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008584:	2320      	movs	r3, #32
 8008586:	e004      	b.n	8008592 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008588:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800858c:	fab3 f383 	clz	r3, r3
 8008590:	b2db      	uxtb	r3, r3
 8008592:	429a      	cmp	r2, r3
 8008594:	d106      	bne.n	80085a4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	2102      	movs	r1, #2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fa5c 	bl	8007a5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2103      	movs	r1, #3
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff f9c0 	bl	8007930 <LL_ADC_GetOffsetChannel>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <HAL_ADC_ConfigChannel+0x4d0>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2103      	movs	r1, #3
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff f9b5 	bl	8007930 <LL_ADC_GetOffsetChannel>
 80085c6:	4603      	mov	r3, r0
 80085c8:	0e9b      	lsrs	r3, r3, #26
 80085ca:	f003 021f 	and.w	r2, r3, #31
 80085ce:	e017      	b.n	8008600 <HAL_ADC_ConfigChannel+0x500>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2103      	movs	r1, #3
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff f9aa 	bl	8007930 <LL_ADC_GetOffsetChannel>
 80085dc:	4603      	mov	r3, r0
 80085de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80085e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80085ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80085f2:	2320      	movs	r3, #32
 80085f4:	e003      	b.n	80085fe <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80085f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085f8:	fab3 f383 	clz	r3, r3
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	461a      	mov	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x518>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	0e9b      	lsrs	r3, r3, #26
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	e011      	b.n	800863c <HAL_ADC_ConfigChannel+0x53c>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800861e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008620:	fa93 f3a3 	rbit	r3, r3
 8008624:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8008626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008628:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800862a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8008630:	2320      	movs	r3, #32
 8008632:	e003      	b.n	800863c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8008634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008636:	fab3 f383 	clz	r3, r3
 800863a:	b2db      	uxtb	r3, r3
 800863c:	429a      	cmp	r2, r3
 800863e:	d14f      	bne.n	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2200      	movs	r2, #0
 8008646:	2103      	movs	r1, #3
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fa07 	bl	8007a5c <LL_ADC_SetOffsetState>
 800864e:	e047      	b.n	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	069b      	lsls	r3, r3, #26
 8008660:	429a      	cmp	r2, r3
 8008662:	d107      	bne.n	8008674 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008672:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800867a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	069b      	lsls	r3, r3, #26
 8008684:	429a      	cmp	r2, r3
 8008686:	d107      	bne.n	8008698 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008696:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800869e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	069b      	lsls	r3, r3, #26
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d107      	bne.n	80086bc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80086ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	069b      	lsls	r3, r3, #26
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d107      	bne.n	80086e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80086de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fac9 	bl	8007c7c <LL_ADC_IsEnabled>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 8219 	bne.w	8008b24 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	461a      	mov	r2, r3
 8008700:	f7ff fa2e 	bl	8007b60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4aa1      	ldr	r2, [pc, #644]	@ (8008990 <HAL_ADC_ConfigChannel+0x890>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f040 812e 	bne.w	800896c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <HAL_ADC_ConfigChannel+0x638>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	0e9b      	lsrs	r3, r3, #26
 8008726:	3301      	adds	r3, #1
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2b09      	cmp	r3, #9
 800872e:	bf94      	ite	ls
 8008730:	2301      	movls	r3, #1
 8008732:	2300      	movhi	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	e019      	b.n	800876c <HAL_ADC_ConfigChannel+0x66c>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008740:	fa93 f3a3 	rbit	r3, r3
 8008744:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008748:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800874a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8008750:	2320      	movs	r3, #32
 8008752:	e003      	b.n	800875c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008756:	fab3 f383 	clz	r3, r3
 800875a:	b2db      	uxtb	r3, r3
 800875c:	3301      	adds	r3, #1
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	2b09      	cmp	r3, #9
 8008764:	bf94      	ite	ls
 8008766:	2301      	movls	r3, #1
 8008768:	2300      	movhi	r3, #0
 800876a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800876c:	2b00      	cmp	r3, #0
 800876e:	d079      	beq.n	8008864 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008778:	2b00      	cmp	r3, #0
 800877a:	d107      	bne.n	800878c <HAL_ADC_ConfigChannel+0x68c>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	0e9b      	lsrs	r3, r3, #26
 8008782:	3301      	adds	r3, #1
 8008784:	069b      	lsls	r3, r3, #26
 8008786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800878a:	e015      	b.n	80087b8 <HAL_ADC_ConfigChannel+0x6b8>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008794:	fa93 f3a3 	rbit	r3, r3
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800879a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800879c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800879e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80087a4:	2320      	movs	r3, #32
 80087a6:	e003      	b.n	80087b0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80087a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087aa:	fab3 f383 	clz	r3, r3
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	3301      	adds	r3, #1
 80087b2:	069b      	lsls	r3, r3, #26
 80087b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <HAL_ADC_ConfigChannel+0x6d8>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	0e9b      	lsrs	r3, r3, #26
 80087ca:	3301      	adds	r3, #1
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	2101      	movs	r1, #1
 80087d2:	fa01 f303 	lsl.w	r3, r1, r3
 80087d6:	e017      	b.n	8008808 <HAL_ADC_ConfigChannel+0x708>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e0:	fa93 f3a3 	rbit	r3, r3
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80087e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80087ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80087f0:	2320      	movs	r3, #32
 80087f2:	e003      	b.n	80087fc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80087f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087f6:	fab3 f383 	clz	r3, r3
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	3301      	adds	r3, #1
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2101      	movs	r1, #1
 8008804:	fa01 f303 	lsl.w	r3, r1, r3
 8008808:	ea42 0103 	orr.w	r1, r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <HAL_ADC_ConfigChannel+0x72e>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	0e9b      	lsrs	r3, r3, #26
 800881e:	3301      	adds	r3, #1
 8008820:	f003 021f 	and.w	r2, r3, #31
 8008824:	4613      	mov	r3, r2
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	4413      	add	r3, r2
 800882a:	051b      	lsls	r3, r3, #20
 800882c:	e018      	b.n	8008860 <HAL_ADC_ConfigChannel+0x760>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	fa93 f3a3 	rbit	r3, r3
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008846:	2320      	movs	r3, #32
 8008848:	e003      	b.n	8008852 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	fab3 f383 	clz	r3, r3
 8008850:	b2db      	uxtb	r3, r3
 8008852:	3301      	adds	r3, #1
 8008854:	f003 021f 	and.w	r2, r3, #31
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008860:	430b      	orrs	r3, r1
 8008862:	e07e      	b.n	8008962 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800886c:	2b00      	cmp	r3, #0
 800886e:	d107      	bne.n	8008880 <HAL_ADC_ConfigChannel+0x780>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	0e9b      	lsrs	r3, r3, #26
 8008876:	3301      	adds	r3, #1
 8008878:	069b      	lsls	r3, r3, #26
 800887a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800887e:	e015      	b.n	80088ac <HAL_ADC_ConfigChannel+0x7ac>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	fa93 f3a3 	rbit	r3, r3
 800888c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008898:	2320      	movs	r3, #32
 800889a:	e003      	b.n	80088a4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889e:	fab3 f383 	clz	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	3301      	adds	r3, #1
 80088a6:	069b      	lsls	r3, r3, #26
 80088a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_ADC_ConfigChannel+0x7cc>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	0e9b      	lsrs	r3, r3, #26
 80088be:	3301      	adds	r3, #1
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	e017      	b.n	80088fc <HAL_ADC_ConfigChannel+0x7fc>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	fa93 f3a3 	rbit	r3, r3
 80088d8:	61bb      	str	r3, [r7, #24]
  return result;
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80088e4:	2320      	movs	r3, #32
 80088e6:	e003      	b.n	80088f0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	fab3 f383 	clz	r3, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	3301      	adds	r3, #1
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2101      	movs	r1, #1
 80088f8:	fa01 f303 	lsl.w	r3, r1, r3
 80088fc:	ea42 0103 	orr.w	r1, r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10d      	bne.n	8008928 <HAL_ADC_ConfigChannel+0x828>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	0e9b      	lsrs	r3, r3, #26
 8008912:	3301      	adds	r3, #1
 8008914:	f003 021f 	and.w	r2, r3, #31
 8008918:	4613      	mov	r3, r2
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	4413      	add	r3, r2
 800891e:	3b1e      	subs	r3, #30
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008926:	e01b      	b.n	8008960 <HAL_ADC_ConfigChannel+0x860>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	fa93 f3a3 	rbit	r3, r3
 8008934:	60fb      	str	r3, [r7, #12]
  return result;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8008940:	2320      	movs	r3, #32
 8008942:	e003      	b.n	800894c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	fab3 f383 	clz	r3, r3
 800894a:	b2db      	uxtb	r3, r3
 800894c:	3301      	adds	r3, #1
 800894e:	f003 021f 	and.w	r2, r3, #31
 8008952:	4613      	mov	r3, r2
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	4413      	add	r3, r2
 8008958:	3b1e      	subs	r3, #30
 800895a:	051b      	lsls	r3, r3, #20
 800895c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008960:	430b      	orrs	r3, r1
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	6892      	ldr	r2, [r2, #8]
 8008966:	4619      	mov	r1, r3
 8008968:	f7ff f8ce 	bl	8007b08 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f280 80d7 	bge.w	8008b24 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a06      	ldr	r2, [pc, #24]	@ (8008994 <HAL_ADC_ConfigChannel+0x894>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d004      	beq.n	800898a <HAL_ADC_ConfigChannel+0x88a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a04      	ldr	r2, [pc, #16]	@ (8008998 <HAL_ADC_ConfigChannel+0x898>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d10a      	bne.n	80089a0 <HAL_ADC_ConfigChannel+0x8a0>
 800898a:	4b04      	ldr	r3, [pc, #16]	@ (800899c <HAL_ADC_ConfigChannel+0x89c>)
 800898c:	e009      	b.n	80089a2 <HAL_ADC_ConfigChannel+0x8a2>
 800898e:	bf00      	nop
 8008990:	47ff0000 	.word	0x47ff0000
 8008994:	40022000 	.word	0x40022000
 8008998:	40022100 	.word	0x40022100
 800899c:	40022300 	.word	0x40022300
 80089a0:	4b65      	ldr	r3, [pc, #404]	@ (8008b38 <HAL_ADC_ConfigChannel+0xa38>)
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe ff84 	bl	80078b0 <LL_ADC_GetCommonPathInternalCh>
 80089a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a62      	ldr	r2, [pc, #392]	@ (8008b3c <HAL_ADC_ConfigChannel+0xa3c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <HAL_ADC_ConfigChannel+0x8c0>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a61      	ldr	r2, [pc, #388]	@ (8008b40 <HAL_ADC_ConfigChannel+0xa40>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10e      	bne.n	80089de <HAL_ADC_ConfigChannel+0x8de>
 80089c0:	485e      	ldr	r0, [pc, #376]	@ (8008b3c <HAL_ADC_ConfigChannel+0xa3c>)
 80089c2:	f7ff f95b 	bl	8007c7c <LL_ADC_IsEnabled>
 80089c6:	4604      	mov	r4, r0
 80089c8:	485d      	ldr	r0, [pc, #372]	@ (8008b40 <HAL_ADC_ConfigChannel+0xa40>)
 80089ca:	f7ff f957 	bl	8007c7c <LL_ADC_IsEnabled>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4323      	orrs	r3, r4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	bf0c      	ite	eq
 80089d6:	2301      	moveq	r3, #1
 80089d8:	2300      	movne	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	e008      	b.n	80089f0 <HAL_ADC_ConfigChannel+0x8f0>
 80089de:	4859      	ldr	r0, [pc, #356]	@ (8008b44 <HAL_ADC_ConfigChannel+0xa44>)
 80089e0:	f7ff f94c 	bl	8007c7c <LL_ADC_IsEnabled>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf0c      	ite	eq
 80089ea:	2301      	moveq	r3, #1
 80089ec:	2300      	movne	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8084 	beq.w	8008afe <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a53      	ldr	r2, [pc, #332]	@ (8008b48 <HAL_ADC_ConfigChannel+0xa48>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d132      	bne.n	8008a66 <HAL_ADC_ConfigChannel+0x966>
 8008a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d12c      	bne.n	8008a66 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a4c      	ldr	r2, [pc, #304]	@ (8008b44 <HAL_ADC_ConfigChannel+0xa44>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	f040 8086 	bne.w	8008b24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a47      	ldr	r2, [pc, #284]	@ (8008b3c <HAL_ADC_ConfigChannel+0xa3c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <HAL_ADC_ConfigChannel+0x92c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a46      	ldr	r2, [pc, #280]	@ (8008b40 <HAL_ADC_ConfigChannel+0xa40>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d101      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x930>
 8008a2c:	4a47      	ldr	r2, [pc, #284]	@ (8008b4c <HAL_ADC_ConfigChannel+0xa4c>)
 8008a2e:	e000      	b.n	8008a32 <HAL_ADC_ConfigChannel+0x932>
 8008a30:	4a41      	ldr	r2, [pc, #260]	@ (8008b38 <HAL_ADC_ConfigChannel+0xa38>)
 8008a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fe ff24 	bl	800788a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a42:	4b43      	ldr	r3, [pc, #268]	@ (8008b50 <HAL_ADC_ConfigChannel+0xa50>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	099b      	lsrs	r3, r3, #6
 8008a48:	4a42      	ldr	r2, [pc, #264]	@ (8008b54 <HAL_ADC_ConfigChannel+0xa54>)
 8008a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4e:	099b      	lsrs	r3, r3, #6
 8008a50:	3301      	adds	r3, #1
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008a56:	e002      	b.n	8008a5e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f9      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a64:	e05e      	b.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8008b58 <HAL_ADC_ConfigChannel+0xa58>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d120      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x9b2>
 8008a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11a      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a30      	ldr	r2, [pc, #192]	@ (8008b44 <HAL_ADC_ConfigChannel+0xa44>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d14e      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b3c <HAL_ADC_ConfigChannel+0xa3c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_ADC_ConfigChannel+0x99a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a2a      	ldr	r2, [pc, #168]	@ (8008b40 <HAL_ADC_ConfigChannel+0xa40>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <HAL_ADC_ConfigChannel+0x99e>
 8008a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b4c <HAL_ADC_ConfigChannel+0xa4c>)
 8008a9c:	e000      	b.n	8008aa0 <HAL_ADC_ConfigChannel+0x9a0>
 8008a9e:	4a26      	ldr	r2, [pc, #152]	@ (8008b38 <HAL_ADC_ConfigChannel+0xa38>)
 8008aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f7fe feed 	bl	800788a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ab0:	e038      	b.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a29      	ldr	r2, [pc, #164]	@ (8008b5c <HAL_ADC_ConfigChannel+0xa5c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d133      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
 8008abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d12d      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <HAL_ADC_ConfigChannel+0xa44>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d128      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a19      	ldr	r2, [pc, #100]	@ (8008b3c <HAL_ADC_ConfigChannel+0xa3c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d004      	beq.n	8008ae6 <HAL_ADC_ConfigChannel+0x9e6>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a17      	ldr	r2, [pc, #92]	@ (8008b40 <HAL_ADC_ConfigChannel+0xa40>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d101      	bne.n	8008aea <HAL_ADC_ConfigChannel+0x9ea>
 8008ae6:	4a19      	ldr	r2, [pc, #100]	@ (8008b4c <HAL_ADC_ConfigChannel+0xa4c>)
 8008ae8:	e000      	b.n	8008aec <HAL_ADC_ConfigChannel+0x9ec>
 8008aea:	4a13      	ldr	r2, [pc, #76]	@ (8008b38 <HAL_ADC_ConfigChannel+0xa38>)
 8008aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008af4:	4619      	mov	r1, r3
 8008af6:	4610      	mov	r0, r2
 8008af8:	f7fe fec7 	bl	800788a <LL_ADC_SetCommonPathInternalCh>
 8008afc:	e012      	b.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008b10:	e008      	b.n	8008b24 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b16:	f043 0220 	orr.w	r2, r3, #32
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008b2c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	37e4      	adds	r7, #228	@ 0xe4
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}
 8008b38:	58026300 	.word	0x58026300
 8008b3c:	40022000 	.word	0x40022000
 8008b40:	40022100 	.word	0x40022100
 8008b44:	58026000 	.word	0x58026000
 8008b48:	c7520000 	.word	0xc7520000
 8008b4c:	40022300 	.word	0x40022300
 8008b50:	24000000 	.word	0x24000000
 8008b54:	053e2d63 	.word	0x053e2d63
 8008b58:	c3210000 	.word	0xc3210000
 8008b5c:	cb840000 	.word	0xcb840000

08008b60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a6c      	ldr	r2, [pc, #432]	@ (8008d20 <ADC_ConfigureBoostMode+0x1c0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <ADC_ConfigureBoostMode+0x1c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a6b      	ldr	r2, [pc, #428]	@ (8008d24 <ADC_ConfigureBoostMode+0x1c4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d109      	bne.n	8008b90 <ADC_ConfigureBoostMode+0x30>
 8008b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8008d28 <ADC_ConfigureBoostMode+0x1c8>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bf14      	ite	ne
 8008b88:	2301      	movne	r3, #1
 8008b8a:	2300      	moveq	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	e008      	b.n	8008ba2 <ADC_ConfigureBoostMode+0x42>
 8008b90:	4b66      	ldr	r3, [pc, #408]	@ (8008d2c <ADC_ConfigureBoostMode+0x1cc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bf14      	ite	ne
 8008b9c:	2301      	movne	r3, #1
 8008b9e:	2300      	moveq	r3, #0
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01c      	beq.n	8008be0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008ba6:	f005 fbff 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 8008baa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bb4:	d010      	beq.n	8008bd8 <ADC_ConfigureBoostMode+0x78>
 8008bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bba:	d873      	bhi.n	8008ca4 <ADC_ConfigureBoostMode+0x144>
 8008bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc0:	d002      	beq.n	8008bc8 <ADC_ConfigureBoostMode+0x68>
 8008bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bc6:	d16d      	bne.n	8008ca4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd4:	60fb      	str	r3, [r7, #12]
        break;
 8008bd6:	e068      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	60fb      	str	r3, [r7, #12]
        break;
 8008bde:	e064      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008be0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	f006 fdda 	bl	800f7a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008bf6:	d051      	beq.n	8008c9c <ADC_ConfigureBoostMode+0x13c>
 8008bf8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008bfc:	d854      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008bfe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008c02:	d047      	beq.n	8008c94 <ADC_ConfigureBoostMode+0x134>
 8008c04:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008c08:	d84e      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c0a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008c0e:	d03d      	beq.n	8008c8c <ADC_ConfigureBoostMode+0x12c>
 8008c10:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008c14:	d848      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c1a:	d033      	beq.n	8008c84 <ADC_ConfigureBoostMode+0x124>
 8008c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c20:	d842      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008c26:	d029      	beq.n	8008c7c <ADC_ConfigureBoostMode+0x11c>
 8008c28:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008c2c:	d83c      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008c32:	d01a      	beq.n	8008c6a <ADC_ConfigureBoostMode+0x10a>
 8008c34:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008c38:	d836      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008c3e:	d014      	beq.n	8008c6a <ADC_ConfigureBoostMode+0x10a>
 8008c40:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008c44:	d830      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4a:	d00e      	beq.n	8008c6a <ADC_ConfigureBoostMode+0x10a>
 8008c4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c50:	d82a      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008c56:	d008      	beq.n	8008c6a <ADC_ConfigureBoostMode+0x10a>
 8008c58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008c5c:	d824      	bhi.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
 8008c5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c62:	d002      	beq.n	8008c6a <ADC_ConfigureBoostMode+0x10a>
 8008c64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008c68:	d11e      	bne.n	8008ca8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	0c9b      	lsrs	r3, r3, #18
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c78:	60fb      	str	r3, [r7, #12]
        break;
 8008c7a:	e016      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	091b      	lsrs	r3, r3, #4
 8008c80:	60fb      	str	r3, [r7, #12]
        break;
 8008c82:	e012      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	60fb      	str	r3, [r7, #12]
        break;
 8008c8a:	e00e      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	099b      	lsrs	r3, r3, #6
 8008c90:	60fb      	str	r3, [r7, #12]
        break;
 8008c92:	e00a      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	09db      	lsrs	r3, r3, #7
 8008c98:	60fb      	str	r3, [r7, #12]
        break;
 8008c9a:	e006      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	0a1b      	lsrs	r3, r3, #8
 8008ca0:	60fb      	str	r3, [r7, #12]
        break;
 8008ca2:	e002      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
        break;
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008ca8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <ADC_ConfigureBoostMode+0x1d0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d808      	bhi.n	8008cca <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008cc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008cc8:	e025      	b.n	8008d16 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	@ (8008d34 <ADC_ConfigureBoostMode+0x1d4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d80a      	bhi.n	8008ce8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ce4:	609a      	str	r2, [r3, #8]
}
 8008ce6:	e016      	b.n	8008d16 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4a13      	ldr	r2, [pc, #76]	@ (8008d38 <ADC_ConfigureBoostMode+0x1d8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d80a      	bhi.n	8008d06 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d02:	609a      	str	r2, [r3, #8]
}
 8008d04:	e007      	b.n	8008d16 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008d14:	609a      	str	r2, [r3, #8]
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40022000 	.word	0x40022000
 8008d24:	40022100 	.word	0x40022100
 8008d28:	40022300 	.word	0x40022300
 8008d2c:	58026300 	.word	0x58026300
 8008d30:	005f5e10 	.word	0x005f5e10
 8008d34:	00bebc20 	.word	0x00bebc20
 8008d38:	017d7840 	.word	0x017d7840

08008d3c <LL_ADC_IsEnabled>:
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <LL_ADC_IsEnabled+0x18>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <LL_ADC_IsEnabled+0x1a>
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <LL_ADC_REG_IsConversionOngoing>:
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d101      	bne.n	8008d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e000      	b.n	8008d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b0a3      	sub	sp, #140	@ 0x8c
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d101      	bne.n	8008da6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008da2:	2302      	movs	r3, #2
 8008da4:	e0c1      	b.n	8008f2a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008dae:	2300      	movs	r3, #0
 8008db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a5e      	ldr	r2, [pc, #376]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d102      	bne.n	8008dc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e001      	b.n	8008dca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0a0      	b.n	8008f2a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff ffb9 	bl	8008d62 <LL_ADC_REG_IsConversionOngoing>
 8008df0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff ffb2 	bl	8008d62 <LL_ADC_REG_IsConversionOngoing>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8081 	bne.w	8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d17c      	bne.n	8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a48      	ldr	r2, [pc, #288]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a46      	ldr	r2, [pc, #280]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d101      	bne.n	8008e26 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008e22:	4b46      	ldr	r3, [pc, #280]	@ (8008f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008e24:	e000      	b.n	8008e28 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008e26:	4b46      	ldr	r3, [pc, #280]	@ (8008f40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e28:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d039      	beq.n	8008ea6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008e32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a3a      	ldr	r2, [pc, #232]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a39      	ldr	r2, [pc, #228]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d10e      	bne.n	8008e76 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008e58:	4836      	ldr	r0, [pc, #216]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e5a:	f7ff ff6f 	bl	8008d3c <LL_ADC_IsEnabled>
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4835      	ldr	r0, [pc, #212]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e62:	f7ff ff6b 	bl	8008d3c <LL_ADC_IsEnabled>
 8008e66:	4603      	mov	r3, r0
 8008e68:	4323      	orrs	r3, r4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bf0c      	ite	eq
 8008e6e:	2301      	moveq	r3, #1
 8008e70:	2300      	movne	r3, #0
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	e008      	b.n	8008e88 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008e76:	4833      	ldr	r0, [pc, #204]	@ (8008f44 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008e78:	f7ff ff60 	bl	8008d3c <LL_ADC_IsEnabled>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf0c      	ite	eq
 8008e82:	2301      	moveq	r3, #1
 8008e84:	2300      	movne	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d047      	beq.n	8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	4b2d      	ldr	r3, [pc, #180]	@ (8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008e92:	4013      	ands	r3, r2
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	6811      	ldr	r1, [r2, #0]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	6892      	ldr	r2, [r2, #8]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ea2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ea4:	e03a      	b.n	8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008eb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d004      	beq.n	8008ec6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d10e      	bne.n	8008ee4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008ec6:	481b      	ldr	r0, [pc, #108]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ec8:	f7ff ff38 	bl	8008d3c <LL_ADC_IsEnabled>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	481a      	ldr	r0, [pc, #104]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ed0:	f7ff ff34 	bl	8008d3c <LL_ADC_IsEnabled>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4323      	orrs	r3, r4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bf0c      	ite	eq
 8008edc:	2301      	moveq	r3, #1
 8008ede:	2300      	movne	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	e008      	b.n	8008ef6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008ee4:	4817      	ldr	r0, [pc, #92]	@ (8008f44 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008ee6:	f7ff ff29 	bl	8008d3c <LL_ADC_IsEnabled>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bf0c      	ite	eq
 8008ef0:	2301      	moveq	r3, #1
 8008ef2:	2300      	movne	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008efa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	4b12      	ldr	r3, [pc, #72]	@ (8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f06:	e009      	b.n	8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f0c:	f043 0220 	orr.w	r2, r3, #32
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008f1a:	e000      	b.n	8008f1e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008f26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	378c      	adds	r7, #140	@ 0x8c
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd90      	pop	{r4, r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40022000 	.word	0x40022000
 8008f38:	40022100 	.word	0x40022100
 8008f3c:	40022300 	.word	0x40022300
 8008f40:	58026300 	.word	0x58026300
 8008f44:	58026000 	.word	0x58026000
 8008f48:	fffff0e0 	.word	0xfffff0e0

08008f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <__NVIC_SetPriorityGrouping+0x40>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008f74:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <__NVIC_SetPriorityGrouping+0x44>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f7a:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <__NVIC_SetPriorityGrouping+0x40>)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	60d3      	str	r3, [r2, #12]
}
 8008f80:	bf00      	nop
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	e000ed00 	.word	0xe000ed00
 8008f90:	05fa0000 	.word	0x05fa0000

08008f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f98:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <__NVIC_GetPriorityGrouping+0x18>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	f003 0307 	and.w	r3, r3, #7
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db0b      	blt.n	8008fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fc2:	88fb      	ldrh	r3, [r7, #6]
 8008fc4:	f003 021f 	and.w	r2, r3, #31
 8008fc8:	4907      	ldr	r1, [pc, #28]	@ (8008fe8 <__NVIC_EnableIRQ+0x38>)
 8008fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	e000e100 	.word	0xe000e100

08008fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db0a      	blt.n	8009016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	490c      	ldr	r1, [pc, #48]	@ (8009038 <__NVIC_SetPriority+0x4c>)
 8009006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800900a:	0112      	lsls	r2, r2, #4
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	440b      	add	r3, r1
 8009010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009014:	e00a      	b.n	800902c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4908      	ldr	r1, [pc, #32]	@ (800903c <__NVIC_SetPriority+0x50>)
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	3b04      	subs	r3, #4
 8009024:	0112      	lsls	r2, r2, #4
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	440b      	add	r3, r1
 800902a:	761a      	strb	r2, [r3, #24]
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	e000e100 	.word	0xe000e100
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009040:	b480      	push	{r7}
 8009042:	b089      	sub	sp, #36	@ 0x24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f1c3 0307 	rsb	r3, r3, #7
 800905a:	2b04      	cmp	r3, #4
 800905c:	bf28      	it	cs
 800905e:	2304      	movcs	r3, #4
 8009060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3304      	adds	r3, #4
 8009066:	2b06      	cmp	r3, #6
 8009068:	d902      	bls.n	8009070 <NVIC_EncodePriority+0x30>
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3b03      	subs	r3, #3
 800906e:	e000      	b.n	8009072 <NVIC_EncodePriority+0x32>
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43da      	mvns	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	401a      	ands	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009088:	f04f 31ff 	mov.w	r1, #4294967295
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	43d9      	mvns	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009098:	4313      	orrs	r3, r2
         );
}
 800909a:	4618      	mov	r0, r3
 800909c:	3724      	adds	r7, #36	@ 0x24
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090b8:	d301      	bcc.n	80090be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ba:	2301      	movs	r3, #1
 80090bc:	e00f      	b.n	80090de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090be:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <SysTick_Config+0x40>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090c6:	210f      	movs	r1, #15
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	f7ff ff8e 	bl	8008fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090d0:	4b05      	ldr	r3, [pc, #20]	@ (80090e8 <SysTick_Config+0x40>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090d6:	4b04      	ldr	r3, [pc, #16]	@ (80090e8 <SysTick_Config+0x40>)
 80090d8:	2207      	movs	r2, #7
 80090da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	e000e010 	.word	0xe000e010

080090ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff29 	bl	8008f4c <__NVIC_SetPriorityGrouping>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	4603      	mov	r3, r0
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009110:	f7ff ff40 	bl	8008f94 <__NVIC_GetPriorityGrouping>
 8009114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	6978      	ldr	r0, [r7, #20]
 800911c:	f7ff ff90 	bl	8009040 <NVIC_EncodePriority>
 8009120:	4602      	mov	r2, r0
 8009122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff ff5f 	bl	8008fec <__NVIC_SetPriority>
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	4603      	mov	r3, r0
 800913e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ff33 	bl	8008fb0 <__NVIC_EnableIRQ>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ffa4 	bl	80090a8 <SysTick_Config>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009170:	f3bf 8f5f 	dmb	sy
}
 8009174:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009176:	4b07      	ldr	r3, [pc, #28]	@ (8009194 <HAL_MPU_Disable+0x28>)
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	4a06      	ldr	r2, [pc, #24]	@ (8009194 <HAL_MPU_Disable+0x28>)
 800917c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009180:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009182:	4b05      	ldr	r3, [pc, #20]	@ (8009198 <HAL_MPU_Disable+0x2c>)
 8009184:	2200      	movs	r2, #0
 8009186:	605a      	str	r2, [r3, #4]
}
 8009188:	bf00      	nop
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	e000ed00 	.word	0xe000ed00
 8009198:	e000ed90 	.word	0xe000ed90

0800919c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80091a4:	4a0b      	ldr	r2, [pc, #44]	@ (80091d4 <HAL_MPU_Enable+0x38>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <HAL_MPU_Enable+0x3c>)
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	4a09      	ldr	r2, [pc, #36]	@ (80091d8 <HAL_MPU_Enable+0x3c>)
 80091b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80091ba:	f3bf 8f4f 	dsb	sy
}
 80091be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091c0:	f3bf 8f6f 	isb	sy
}
 80091c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	e000ed90 	.word	0xe000ed90
 80091d8:	e000ed00 	.word	0xe000ed00

080091dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	785a      	ldrb	r2, [r3, #1]
 80091e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <HAL_MPU_ConfigRegion+0x7c>)
 80091ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80091ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <HAL_MPU_ConfigRegion+0x7c>)
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	4a19      	ldr	r2, [pc, #100]	@ (8009258 <HAL_MPU_ConfigRegion+0x7c>)
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80091f8:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <HAL_MPU_ConfigRegion+0x7c>)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	7b1b      	ldrb	r3, [r3, #12]
 8009204:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7adb      	ldrb	r3, [r3, #11]
 800920a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800920c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	7a9b      	ldrb	r3, [r3, #10]
 8009212:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7b5b      	ldrb	r3, [r3, #13]
 800921a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800921c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7b9b      	ldrb	r3, [r3, #14]
 8009222:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7bdb      	ldrb	r3, [r3, #15]
 800922a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800922c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7a5b      	ldrb	r3, [r3, #9]
 8009232:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009234:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7a1b      	ldrb	r3, [r3, #8]
 800923a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800923c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	7812      	ldrb	r2, [r2, #0]
 8009242:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009244:	4a04      	ldr	r2, [pc, #16]	@ (8009258 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009246:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009248:	6113      	str	r3, [r2, #16]
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	e000ed90 	.word	0xe000ed90

0800925c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e014      	b.n	8009298 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7f9 f8ea 	bl	8002458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0a2      	b.n	80093fe <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	795b      	ldrb	r3, [r3, #5]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_DAC_Start_DMA+0x24>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e09c      	b.n	80093fe <HAL_DAC_Start_DMA+0x15e>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2202      	movs	r2, #2
 80092ce:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d129      	bne.n	800932a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	4a4b      	ldr	r2, [pc, #300]	@ (8009408 <HAL_DAC_Start_DMA+0x168>)
 80092dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4a4a      	ldr	r2, [pc, #296]	@ (800940c <HAL_DAC_Start_DMA+0x16c>)
 80092e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	4a49      	ldr	r2, [pc, #292]	@ (8009410 <HAL_DAC_Start_DMA+0x170>)
 80092ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_DAC_Start_DMA+0x6c>
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d005      	beq.n	8009316 <HAL_DAC_Start_DMA+0x76>
 800930a:	e009      	b.n	8009320 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	613b      	str	r3, [r7, #16]
        break;
 8009314:	e033      	b.n	800937e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	613b      	str	r3, [r7, #16]
        break;
 800931e:	e02e      	b.n	800937e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3310      	adds	r3, #16
 8009326:	613b      	str	r3, [r7, #16]
        break;
 8009328:	e029      	b.n	800937e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	4a39      	ldr	r2, [pc, #228]	@ (8009414 <HAL_DAC_Start_DMA+0x174>)
 8009330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	4a38      	ldr	r2, [pc, #224]	@ (8009418 <HAL_DAC_Start_DMA+0x178>)
 8009338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	4a37      	ldr	r2, [pc, #220]	@ (800941c <HAL_DAC_Start_DMA+0x17c>)
 8009340:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009350:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <HAL_DAC_Start_DMA+0xc0>
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	2b04      	cmp	r3, #4
 800935c:	d005      	beq.n	800936a <HAL_DAC_Start_DMA+0xca>
 800935e:	e009      	b.n	8009374 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3314      	adds	r3, #20
 8009366:	613b      	str	r3, [r7, #16]
        break;
 8009368:	e009      	b.n	800937e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3318      	adds	r3, #24
 8009370:	613b      	str	r3, [r7, #16]
        break;
 8009372:	e004      	b.n	800937e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	331c      	adds	r3, #28
 800937a:	613b      	str	r3, [r7, #16]
        break;
 800937c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d111      	bne.n	80093a8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009392:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6898      	ldr	r0, [r3, #8]
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	f000 fd6d 	bl	8009e7c <HAL_DMA_Start_IT>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]
 80093a6:	e010      	b.n	80093ca <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80093b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68d8      	ldr	r0, [r3, #12]
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	f000 fd5b 	bl	8009e7c <HAL_DMA_Start_IT>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2201      	movs	r2, #1
 80093e4:	409a      	lsls	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e005      	b.n	80093fc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f043 0204 	orr.w	r2, r3, #4
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	080096b9 	.word	0x080096b9
 800940c:	080096db 	.word	0x080096db
 8009410:	080096f7 	.word	0x080096f7
 8009414:	08009761 	.word	0x08009761
 8009418:	08009783 	.word	0x08009783
 800941c:	0800979f 	.word	0x0800979f

08009420 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	@ 0x28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_DAC_ConfigChannel+0x1e>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e12a      	b.n	80096ac <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	795b      	ldrb	r3, [r3, #5]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <HAL_DAC_ConfigChannel+0x2e>
 800945e:	2302      	movs	r3, #2
 8009460:	e124      	b.n	80096ac <HAL_DAC_ConfigChannel+0x278>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2202      	movs	r2, #2
 800946c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b04      	cmp	r3, #4
 8009474:	d17a      	bne.n	800956c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009476:	f7fe f9c5 	bl	8007804 <HAL_GetTick>
 800947a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d13d      	bne.n	80094fe <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009482:	e018      	b.n	80094b6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009484:	f7fe f9be 	bl	8007804 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d911      	bls.n	80094b6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009498:	4b86      	ldr	r3, [pc, #536]	@ (80096b4 <HAL_DAC_ConfigChannel+0x280>)
 800949a:	4013      	ands	r3, r2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	f043 0208 	orr.w	r2, r3, #8
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2203      	movs	r2, #3
 80094b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e0fa      	b.n	80096ac <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094bc:	4b7d      	ldr	r3, [pc, #500]	@ (80096b4 <HAL_DAC_ConfigChannel+0x280>)
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1df      	bne.n	8009484 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	6992      	ldr	r2, [r2, #24]
 80094cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80094ce:	e020      	b.n	8009512 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80094d0:	f7fe f998 	bl	8007804 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d90f      	bls.n	80094fe <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da0a      	bge.n	80094fe <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f043 0208 	orr.w	r2, r3, #8
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2203      	movs	r2, #3
 80094f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e0d6      	b.n	80096ac <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	dbe3      	blt.n	80094d0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	6992      	ldr	r2, [r2, #24]
 8009510:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009522:	fa01 f303 	lsl.w	r3, r1, r3
 8009526:	43db      	mvns	r3, r3
 8009528:	ea02 0103 	and.w	r1, r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	409a      	lsls	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	21ff      	movs	r1, #255	@ 0xff
 800954e:	fa01 f303 	lsl.w	r3, r1, r3
 8009552:	43db      	mvns	r3, r3
 8009554:	ea02 0103 	and.w	r1, r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6a1a      	ldr	r2, [r3, #32]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	409a      	lsls	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d11d      	bne.n	80095b0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	221f      	movs	r2, #31
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	43db      	mvns	r3, r3
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	4013      	ands	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2207      	movs	r2, #7
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	43db      	mvns	r3, r3
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	4013      	ands	r3, r2
 80095ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d102      	bne.n	80095da <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80095d4:	2300      	movs	r3, #0
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095d8:	e00f      	b.n	80095fa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d102      	bne.n	80095e8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80095e2:	2301      	movs	r3, #1
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095e6:	e008      	b.n	80095fa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80095f0:	2301      	movs	r3, #1
 80095f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f4:	e001      	b.n	80095fa <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	4313      	orrs	r3, r2
 800961a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f003 0310 	and.w	r3, r3, #16
 8009630:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	43da      	mvns	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	400a      	ands	r2, r1
 8009640:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	43db      	mvns	r3, r3
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	4013      	ands	r3, r2
 800965e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	4313      	orrs	r3, r2
 8009676:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6819      	ldr	r1, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	22c0      	movs	r2, #192	@ 0xc0
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	43da      	mvns	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	400a      	ands	r2, r1
 800969a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80096a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3728      	adds	r7, #40	@ 0x28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20008000 	.word	0x20008000

080096b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7f7 fe02 	bl	80012d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	711a      	strb	r2, [r3, #4]
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7f7 fde3 	bl	80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	f043 0204 	orr.w	r2, r3, #4
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fe85 	bl	8009420 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	711a      	strb	r2, [r3, #4]
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff ffd8 	bl	8009724 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	711a      	strb	r2, [r3, #4]
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff ffd1 	bl	8009738 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f043 0204 	orr.w	r2, r3, #4
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff ffc7 	bl	800974c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2201      	movs	r2, #1
 80097c2:	711a      	strb	r2, [r3, #4]
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80097d4:	f7fe f816 	bl	8007804 <HAL_GetTick>
 80097d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e312      	b.n	8009e0a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a66      	ldr	r2, [pc, #408]	@ (8009984 <HAL_DMA_Init+0x1b8>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d04a      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a65      	ldr	r2, [pc, #404]	@ (8009988 <HAL_DMA_Init+0x1bc>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d045      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a63      	ldr	r2, [pc, #396]	@ (800998c <HAL_DMA_Init+0x1c0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d040      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a62      	ldr	r2, [pc, #392]	@ (8009990 <HAL_DMA_Init+0x1c4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d03b      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a60      	ldr	r2, [pc, #384]	@ (8009994 <HAL_DMA_Init+0x1c8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d036      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a5f      	ldr	r2, [pc, #380]	@ (8009998 <HAL_DMA_Init+0x1cc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d031      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a5d      	ldr	r2, [pc, #372]	@ (800999c <HAL_DMA_Init+0x1d0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d02c      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a5c      	ldr	r2, [pc, #368]	@ (80099a0 <HAL_DMA_Init+0x1d4>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d027      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a5a      	ldr	r2, [pc, #360]	@ (80099a4 <HAL_DMA_Init+0x1d8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d022      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a59      	ldr	r2, [pc, #356]	@ (80099a8 <HAL_DMA_Init+0x1dc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d01d      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a57      	ldr	r2, [pc, #348]	@ (80099ac <HAL_DMA_Init+0x1e0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d018      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a56      	ldr	r2, [pc, #344]	@ (80099b0 <HAL_DMA_Init+0x1e4>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d013      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a54      	ldr	r2, [pc, #336]	@ (80099b4 <HAL_DMA_Init+0x1e8>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00e      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a53      	ldr	r2, [pc, #332]	@ (80099b8 <HAL_DMA_Init+0x1ec>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d009      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a51      	ldr	r2, [pc, #324]	@ (80099bc <HAL_DMA_Init+0x1f0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_DMA_Init+0xb8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a50      	ldr	r2, [pc, #320]	@ (80099c0 <HAL_DMA_Init+0x1f4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d101      	bne.n	8009888 <HAL_DMA_Init+0xbc>
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <HAL_DMA_Init+0xbe>
 8009888:	2300      	movs	r3, #0
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 813c 	beq.w	8009b08 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a37      	ldr	r2, [pc, #220]	@ (8009984 <HAL_DMA_Init+0x1b8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d04a      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a36      	ldr	r2, [pc, #216]	@ (8009988 <HAL_DMA_Init+0x1bc>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d045      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a34      	ldr	r2, [pc, #208]	@ (800998c <HAL_DMA_Init+0x1c0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d040      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a33      	ldr	r2, [pc, #204]	@ (8009990 <HAL_DMA_Init+0x1c4>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d03b      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a31      	ldr	r2, [pc, #196]	@ (8009994 <HAL_DMA_Init+0x1c8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d036      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a30      	ldr	r2, [pc, #192]	@ (8009998 <HAL_DMA_Init+0x1cc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d031      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a2e      	ldr	r2, [pc, #184]	@ (800999c <HAL_DMA_Init+0x1d0>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d02c      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a2d      	ldr	r2, [pc, #180]	@ (80099a0 <HAL_DMA_Init+0x1d4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d027      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a2b      	ldr	r2, [pc, #172]	@ (80099a4 <HAL_DMA_Init+0x1d8>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d022      	beq.n	8009940 <HAL_DMA_Init+0x174>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a2a      	ldr	r2, [pc, #168]	@ (80099a8 <HAL_DMA_Init+0x1dc>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d01d      	beq.n	8009940 <HAL_DMA_Init+0x174>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a28      	ldr	r2, [pc, #160]	@ (80099ac <HAL_DMA_Init+0x1e0>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d018      	beq.n	8009940 <HAL_DMA_Init+0x174>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a27      	ldr	r2, [pc, #156]	@ (80099b0 <HAL_DMA_Init+0x1e4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_DMA_Init+0x174>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a25      	ldr	r2, [pc, #148]	@ (80099b4 <HAL_DMA_Init+0x1e8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_DMA_Init+0x174>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a24      	ldr	r2, [pc, #144]	@ (80099b8 <HAL_DMA_Init+0x1ec>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d009      	beq.n	8009940 <HAL_DMA_Init+0x174>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a22      	ldr	r2, [pc, #136]	@ (80099bc <HAL_DMA_Init+0x1f0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_DMA_Init+0x174>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a21      	ldr	r2, [pc, #132]	@ (80099c0 <HAL_DMA_Init+0x1f4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d108      	bne.n	8009952 <HAL_DMA_Init+0x186>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0201 	bic.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	e007      	b.n	8009962 <HAL_DMA_Init+0x196>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009962:	e02f      	b.n	80099c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009964:	f7fd ff4e 	bl	8007804 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b05      	cmp	r3, #5
 8009970:	d928      	bls.n	80099c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2203      	movs	r2, #3
 800997c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e242      	b.n	8009e0a <HAL_DMA_Init+0x63e>
 8009984:	40020010 	.word	0x40020010
 8009988:	40020028 	.word	0x40020028
 800998c:	40020040 	.word	0x40020040
 8009990:	40020058 	.word	0x40020058
 8009994:	40020070 	.word	0x40020070
 8009998:	40020088 	.word	0x40020088
 800999c:	400200a0 	.word	0x400200a0
 80099a0:	400200b8 	.word	0x400200b8
 80099a4:	40020410 	.word	0x40020410
 80099a8:	40020428 	.word	0x40020428
 80099ac:	40020440 	.word	0x40020440
 80099b0:	40020458 	.word	0x40020458
 80099b4:	40020470 	.word	0x40020470
 80099b8:	40020488 	.word	0x40020488
 80099bc:	400204a0 	.word	0x400204a0
 80099c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1c8      	bne.n	8009964 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4b83      	ldr	r3, [pc, #524]	@ (8009bec <HAL_DMA_Init+0x420>)
 80099de:	4013      	ands	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80099ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d107      	bne.n	8009a28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a20:	4313      	orrs	r3, r2
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2b28      	cmp	r3, #40	@ 0x28
 8009a2e:	d903      	bls.n	8009a38 <HAL_DMA_Init+0x26c>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a36:	d91f      	bls.n	8009a78 <HAL_DMA_Init+0x2ac>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a3e:	d903      	bls.n	8009a48 <HAL_DMA_Init+0x27c>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b42      	cmp	r3, #66	@ 0x42
 8009a46:	d917      	bls.n	8009a78 <HAL_DMA_Init+0x2ac>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b46      	cmp	r3, #70	@ 0x46
 8009a4e:	d903      	bls.n	8009a58 <HAL_DMA_Init+0x28c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b48      	cmp	r3, #72	@ 0x48
 8009a56:	d90f      	bls.n	8009a78 <HAL_DMA_Init+0x2ac>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009a5e:	d903      	bls.n	8009a68 <HAL_DMA_Init+0x29c>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b52      	cmp	r3, #82	@ 0x52
 8009a66:	d907      	bls.n	8009a78 <HAL_DMA_Init+0x2ac>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b73      	cmp	r3, #115	@ 0x73
 8009a6e:	d905      	bls.n	8009a7c <HAL_DMA_Init+0x2b0>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b77      	cmp	r3, #119	@ 0x77
 8009a76:	d801      	bhi.n	8009a7c <HAL_DMA_Init+0x2b0>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <HAL_DMA_Init+0x2b2>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a88:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f023 0307 	bic.w	r3, r3, #7
 8009aa0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d117      	bne.n	8009ae4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fdca 	bl	800b660 <DMA_CheckFifoParam>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2240      	movs	r2, #64	@ 0x40
 8009ad6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e192      	b.n	8009e0a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 fd05 	bl	800b4fc <DMA_CalcBaseAndBitshift>
 8009af2:	4603      	mov	r3, r0
 8009af4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	223f      	movs	r2, #63	@ 0x3f
 8009b00:	409a      	lsls	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	609a      	str	r2, [r3, #8]
 8009b06:	e0c8      	b.n	8009c9a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a38      	ldr	r2, [pc, #224]	@ (8009bf0 <HAL_DMA_Init+0x424>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d022      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a37      	ldr	r2, [pc, #220]	@ (8009bf4 <HAL_DMA_Init+0x428>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d01d      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a35      	ldr	r2, [pc, #212]	@ (8009bf8 <HAL_DMA_Init+0x42c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d018      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a34      	ldr	r2, [pc, #208]	@ (8009bfc <HAL_DMA_Init+0x430>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d013      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a32      	ldr	r2, [pc, #200]	@ (8009c00 <HAL_DMA_Init+0x434>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d00e      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a31      	ldr	r2, [pc, #196]	@ (8009c04 <HAL_DMA_Init+0x438>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d009      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a2f      	ldr	r2, [pc, #188]	@ (8009c08 <HAL_DMA_Init+0x43c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d004      	beq.n	8009b58 <HAL_DMA_Init+0x38c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a2e      	ldr	r2, [pc, #184]	@ (8009c0c <HAL_DMA_Init+0x440>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d101      	bne.n	8009b5c <HAL_DMA_Init+0x390>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e000      	b.n	8009b5e <HAL_DMA_Init+0x392>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8092 	beq.w	8009c88 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a21      	ldr	r2, [pc, #132]	@ (8009bf0 <HAL_DMA_Init+0x424>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d021      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a20      	ldr	r2, [pc, #128]	@ (8009bf4 <HAL_DMA_Init+0x428>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d01c      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8009bf8 <HAL_DMA_Init+0x42c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d017      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1d      	ldr	r2, [pc, #116]	@ (8009bfc <HAL_DMA_Init+0x430>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d012      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a1b      	ldr	r2, [pc, #108]	@ (8009c00 <HAL_DMA_Init+0x434>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00d      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8009c04 <HAL_DMA_Init+0x438>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d008      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a18      	ldr	r2, [pc, #96]	@ (8009c08 <HAL_DMA_Init+0x43c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d003      	beq.n	8009bb2 <HAL_DMA_Init+0x3e6>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a17      	ldr	r2, [pc, #92]	@ (8009c0c <HAL_DMA_Init+0x440>)
 8009bb0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	4b10      	ldr	r3, [pc, #64]	@ (8009c10 <HAL_DMA_Init+0x444>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	2b40      	cmp	r3, #64	@ 0x40
 8009bd8:	d01c      	beq.n	8009c14 <HAL_DMA_Init+0x448>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b80      	cmp	r3, #128	@ 0x80
 8009be0:	d102      	bne.n	8009be8 <HAL_DMA_Init+0x41c>
 8009be2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009be6:	e016      	b.n	8009c16 <HAL_DMA_Init+0x44a>
 8009be8:	2300      	movs	r3, #0
 8009bea:	e014      	b.n	8009c16 <HAL_DMA_Init+0x44a>
 8009bec:	fe10803f 	.word	0xfe10803f
 8009bf0:	58025408 	.word	0x58025408
 8009bf4:	5802541c 	.word	0x5802541c
 8009bf8:	58025430 	.word	0x58025430
 8009bfc:	58025444 	.word	0x58025444
 8009c00:	58025458 	.word	0x58025458
 8009c04:	5802546c 	.word	0x5802546c
 8009c08:	58025480 	.word	0x58025480
 8009c0c:	58025494 	.word	0x58025494
 8009c10:	fffe000f 	.word	0xfffe000f
 8009c14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68d2      	ldr	r2, [r2, #12]
 8009c1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009c34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009c44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8009e14 <HAL_DMA_Init+0x648>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	4a6e      	ldr	r2, [pc, #440]	@ (8009e18 <HAL_DMA_Init+0x64c>)
 8009c60:	fba2 2303 	umull	r2, r3, r2, r3
 8009c64:	091b      	lsrs	r3, r3, #4
 8009c66:	009a      	lsls	r2, r3, #2
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 fc45 	bl	800b4fc <DMA_CalcBaseAndBitshift>
 8009c72:	4603      	mov	r3, r0
 8009c74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c7a:	f003 031f 	and.w	r3, r3, #31
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	e008      	b.n	8009c9a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2240      	movs	r2, #64	@ 0x40
 8009c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2203      	movs	r2, #3
 8009c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e0b7      	b.n	8009e0a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8009e1c <HAL_DMA_Init+0x650>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d072      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8009e20 <HAL_DMA_Init+0x654>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d06d      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8009e24 <HAL_DMA_Init+0x658>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d068      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a5a      	ldr	r2, [pc, #360]	@ (8009e28 <HAL_DMA_Init+0x65c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d063      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a59      	ldr	r2, [pc, #356]	@ (8009e2c <HAL_DMA_Init+0x660>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d05e      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a57      	ldr	r2, [pc, #348]	@ (8009e30 <HAL_DMA_Init+0x664>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d059      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a56      	ldr	r2, [pc, #344]	@ (8009e34 <HAL_DMA_Init+0x668>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d054      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a54      	ldr	r2, [pc, #336]	@ (8009e38 <HAL_DMA_Init+0x66c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d04f      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a53      	ldr	r2, [pc, #332]	@ (8009e3c <HAL_DMA_Init+0x670>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d04a      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a51      	ldr	r2, [pc, #324]	@ (8009e40 <HAL_DMA_Init+0x674>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d045      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a50      	ldr	r2, [pc, #320]	@ (8009e44 <HAL_DMA_Init+0x678>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d040      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8009e48 <HAL_DMA_Init+0x67c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d03b      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a4d      	ldr	r2, [pc, #308]	@ (8009e4c <HAL_DMA_Init+0x680>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d036      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a4b      	ldr	r2, [pc, #300]	@ (8009e50 <HAL_DMA_Init+0x684>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d031      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8009e54 <HAL_DMA_Init+0x688>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d02c      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a48      	ldr	r2, [pc, #288]	@ (8009e58 <HAL_DMA_Init+0x68c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d027      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a47      	ldr	r2, [pc, #284]	@ (8009e5c <HAL_DMA_Init+0x690>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d022      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a45      	ldr	r2, [pc, #276]	@ (8009e60 <HAL_DMA_Init+0x694>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d01d      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a44      	ldr	r2, [pc, #272]	@ (8009e64 <HAL_DMA_Init+0x698>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d018      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a42      	ldr	r2, [pc, #264]	@ (8009e68 <HAL_DMA_Init+0x69c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d013      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a41      	ldr	r2, [pc, #260]	@ (8009e6c <HAL_DMA_Init+0x6a0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00e      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a3f      	ldr	r2, [pc, #252]	@ (8009e70 <HAL_DMA_Init+0x6a4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d009      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8009e74 <HAL_DMA_Init+0x6a8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d004      	beq.n	8009d8a <HAL_DMA_Init+0x5be>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a3c      	ldr	r2, [pc, #240]	@ (8009e78 <HAL_DMA_Init+0x6ac>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d101      	bne.n	8009d8e <HAL_DMA_Init+0x5c2>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <HAL_DMA_Init+0x5c4>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d032      	beq.n	8009dfa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fcdf 	bl	800b758 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b80      	cmp	r3, #128	@ 0x80
 8009da0:	d102      	bne.n	8009da8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009dbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d010      	beq.n	8009de8 <HAL_DMA_Init+0x61c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d80c      	bhi.n	8009de8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fd5c 	bl	800b88c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	e008      	b.n	8009dfa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	a7fdabf8 	.word	0xa7fdabf8
 8009e18:	cccccccd 	.word	0xcccccccd
 8009e1c:	40020010 	.word	0x40020010
 8009e20:	40020028 	.word	0x40020028
 8009e24:	40020040 	.word	0x40020040
 8009e28:	40020058 	.word	0x40020058
 8009e2c:	40020070 	.word	0x40020070
 8009e30:	40020088 	.word	0x40020088
 8009e34:	400200a0 	.word	0x400200a0
 8009e38:	400200b8 	.word	0x400200b8
 8009e3c:	40020410 	.word	0x40020410
 8009e40:	40020428 	.word	0x40020428
 8009e44:	40020440 	.word	0x40020440
 8009e48:	40020458 	.word	0x40020458
 8009e4c:	40020470 	.word	0x40020470
 8009e50:	40020488 	.word	0x40020488
 8009e54:	400204a0 	.word	0x400204a0
 8009e58:	400204b8 	.word	0x400204b8
 8009e5c:	58025408 	.word	0x58025408
 8009e60:	5802541c 	.word	0x5802541c
 8009e64:	58025430 	.word	0x58025430
 8009e68:	58025444 	.word	0x58025444
 8009e6c:	58025458 	.word	0x58025458
 8009e70:	5802546c 	.word	0x5802546c
 8009e74:	58025480 	.word	0x58025480
 8009e78:	58025494 	.word	0x58025494

08009e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e226      	b.n	800a2e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <HAL_DMA_Start_IT+0x2a>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e21f      	b.n	800a2e6 <HAL_DMA_Start_IT+0x46a>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	f040 820a 	bne.w	800a2d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a68      	ldr	r2, [pc, #416]	@ (800a070 <HAL_DMA_Start_IT+0x1f4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d04a      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a66      	ldr	r2, [pc, #408]	@ (800a074 <HAL_DMA_Start_IT+0x1f8>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d045      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a65      	ldr	r2, [pc, #404]	@ (800a078 <HAL_DMA_Start_IT+0x1fc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d040      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a63      	ldr	r2, [pc, #396]	@ (800a07c <HAL_DMA_Start_IT+0x200>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d03b      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a62      	ldr	r2, [pc, #392]	@ (800a080 <HAL_DMA_Start_IT+0x204>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d036      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a60      	ldr	r2, [pc, #384]	@ (800a084 <HAL_DMA_Start_IT+0x208>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d031      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a5f      	ldr	r2, [pc, #380]	@ (800a088 <HAL_DMA_Start_IT+0x20c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d02c      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a5d      	ldr	r2, [pc, #372]	@ (800a08c <HAL_DMA_Start_IT+0x210>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d027      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a5c      	ldr	r2, [pc, #368]	@ (800a090 <HAL_DMA_Start_IT+0x214>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d022      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a5a      	ldr	r2, [pc, #360]	@ (800a094 <HAL_DMA_Start_IT+0x218>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d01d      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a59      	ldr	r2, [pc, #356]	@ (800a098 <HAL_DMA_Start_IT+0x21c>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d018      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a57      	ldr	r2, [pc, #348]	@ (800a09c <HAL_DMA_Start_IT+0x220>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d013      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a56      	ldr	r2, [pc, #344]	@ (800a0a0 <HAL_DMA_Start_IT+0x224>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00e      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a54      	ldr	r2, [pc, #336]	@ (800a0a4 <HAL_DMA_Start_IT+0x228>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a53      	ldr	r2, [pc, #332]	@ (800a0a8 <HAL_DMA_Start_IT+0x22c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d004      	beq.n	8009f6a <HAL_DMA_Start_IT+0xee>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a51      	ldr	r2, [pc, #324]	@ (800a0ac <HAL_DMA_Start_IT+0x230>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d108      	bne.n	8009f7c <HAL_DMA_Start_IT+0x100>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e007      	b.n	8009f8c <HAL_DMA_Start_IT+0x110>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	68b9      	ldr	r1, [r7, #8]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f001 f906 	bl	800b1a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a34      	ldr	r2, [pc, #208]	@ (800a070 <HAL_DMA_Start_IT+0x1f4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d04a      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a33      	ldr	r2, [pc, #204]	@ (800a074 <HAL_DMA_Start_IT+0x1f8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d045      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a31      	ldr	r2, [pc, #196]	@ (800a078 <HAL_DMA_Start_IT+0x1fc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d040      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a30      	ldr	r2, [pc, #192]	@ (800a07c <HAL_DMA_Start_IT+0x200>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d03b      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a2e      	ldr	r2, [pc, #184]	@ (800a080 <HAL_DMA_Start_IT+0x204>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d036      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a2d      	ldr	r2, [pc, #180]	@ (800a084 <HAL_DMA_Start_IT+0x208>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d031      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a2b      	ldr	r2, [pc, #172]	@ (800a088 <HAL_DMA_Start_IT+0x20c>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d02c      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800a08c <HAL_DMA_Start_IT+0x210>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d027      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a28      	ldr	r2, [pc, #160]	@ (800a090 <HAL_DMA_Start_IT+0x214>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d022      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a27      	ldr	r2, [pc, #156]	@ (800a094 <HAL_DMA_Start_IT+0x218>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d01d      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a25      	ldr	r2, [pc, #148]	@ (800a098 <HAL_DMA_Start_IT+0x21c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d018      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a24      	ldr	r2, [pc, #144]	@ (800a09c <HAL_DMA_Start_IT+0x220>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d013      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a22      	ldr	r2, [pc, #136]	@ (800a0a0 <HAL_DMA_Start_IT+0x224>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00e      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a21      	ldr	r2, [pc, #132]	@ (800a0a4 <HAL_DMA_Start_IT+0x228>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d009      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1f      	ldr	r2, [pc, #124]	@ (800a0a8 <HAL_DMA_Start_IT+0x22c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d004      	beq.n	800a038 <HAL_DMA_Start_IT+0x1bc>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1e      	ldr	r2, [pc, #120]	@ (800a0ac <HAL_DMA_Start_IT+0x230>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d101      	bne.n	800a03c <HAL_DMA_Start_IT+0x1c0>
 800a038:	2301      	movs	r3, #1
 800a03a:	e000      	b.n	800a03e <HAL_DMA_Start_IT+0x1c2>
 800a03c:	2300      	movs	r3, #0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d036      	beq.n	800a0b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f023 021e 	bic.w	r2, r3, #30
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f042 0216 	orr.w	r2, r2, #22
 800a054:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d03e      	beq.n	800a0dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0208 	orr.w	r2, r2, #8
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	e035      	b.n	800a0dc <HAL_DMA_Start_IT+0x260>
 800a070:	40020010 	.word	0x40020010
 800a074:	40020028 	.word	0x40020028
 800a078:	40020040 	.word	0x40020040
 800a07c:	40020058 	.word	0x40020058
 800a080:	40020070 	.word	0x40020070
 800a084:	40020088 	.word	0x40020088
 800a088:	400200a0 	.word	0x400200a0
 800a08c:	400200b8 	.word	0x400200b8
 800a090:	40020410 	.word	0x40020410
 800a094:	40020428 	.word	0x40020428
 800a098:	40020440 	.word	0x40020440
 800a09c:	40020458 	.word	0x40020458
 800a0a0:	40020470 	.word	0x40020470
 800a0a4:	40020488 	.word	0x40020488
 800a0a8:	400204a0 	.word	0x400204a0
 800a0ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 020e 	bic.w	r2, r3, #14
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 020a 	orr.w	r2, r2, #10
 800a0c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0204 	orr.w	r2, r2, #4
 800a0da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a83      	ldr	r2, [pc, #524]	@ (800a2f0 <HAL_DMA_Start_IT+0x474>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d072      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a82      	ldr	r2, [pc, #520]	@ (800a2f4 <HAL_DMA_Start_IT+0x478>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d06d      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a80      	ldr	r2, [pc, #512]	@ (800a2f8 <HAL_DMA_Start_IT+0x47c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d068      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a7f      	ldr	r2, [pc, #508]	@ (800a2fc <HAL_DMA_Start_IT+0x480>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d063      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a7d      	ldr	r2, [pc, #500]	@ (800a300 <HAL_DMA_Start_IT+0x484>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d05e      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a7c      	ldr	r2, [pc, #496]	@ (800a304 <HAL_DMA_Start_IT+0x488>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d059      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a7a      	ldr	r2, [pc, #488]	@ (800a308 <HAL_DMA_Start_IT+0x48c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d054      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a79      	ldr	r2, [pc, #484]	@ (800a30c <HAL_DMA_Start_IT+0x490>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d04f      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a77      	ldr	r2, [pc, #476]	@ (800a310 <HAL_DMA_Start_IT+0x494>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d04a      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a76      	ldr	r2, [pc, #472]	@ (800a314 <HAL_DMA_Start_IT+0x498>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d045      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a74      	ldr	r2, [pc, #464]	@ (800a318 <HAL_DMA_Start_IT+0x49c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d040      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a73      	ldr	r2, [pc, #460]	@ (800a31c <HAL_DMA_Start_IT+0x4a0>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d03b      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a71      	ldr	r2, [pc, #452]	@ (800a320 <HAL_DMA_Start_IT+0x4a4>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d036      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a70      	ldr	r2, [pc, #448]	@ (800a324 <HAL_DMA_Start_IT+0x4a8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d031      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a6e      	ldr	r2, [pc, #440]	@ (800a328 <HAL_DMA_Start_IT+0x4ac>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d02c      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a6d      	ldr	r2, [pc, #436]	@ (800a32c <HAL_DMA_Start_IT+0x4b0>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d027      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a6b      	ldr	r2, [pc, #428]	@ (800a330 <HAL_DMA_Start_IT+0x4b4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d022      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a6a      	ldr	r2, [pc, #424]	@ (800a334 <HAL_DMA_Start_IT+0x4b8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d01d      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a68      	ldr	r2, [pc, #416]	@ (800a338 <HAL_DMA_Start_IT+0x4bc>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d018      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a67      	ldr	r2, [pc, #412]	@ (800a33c <HAL_DMA_Start_IT+0x4c0>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d013      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a65      	ldr	r2, [pc, #404]	@ (800a340 <HAL_DMA_Start_IT+0x4c4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00e      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a64      	ldr	r2, [pc, #400]	@ (800a344 <HAL_DMA_Start_IT+0x4c8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d009      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a62      	ldr	r2, [pc, #392]	@ (800a348 <HAL_DMA_Start_IT+0x4cc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <HAL_DMA_Start_IT+0x350>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a61      	ldr	r2, [pc, #388]	@ (800a34c <HAL_DMA_Start_IT+0x4d0>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d101      	bne.n	800a1d0 <HAL_DMA_Start_IT+0x354>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e000      	b.n	800a1d2 <HAL_DMA_Start_IT+0x356>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01a      	beq.n	800a20c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d007      	beq.n	800a1f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d007      	beq.n	800a20c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a20a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a37      	ldr	r2, [pc, #220]	@ (800a2f0 <HAL_DMA_Start_IT+0x474>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d04a      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a36      	ldr	r2, [pc, #216]	@ (800a2f4 <HAL_DMA_Start_IT+0x478>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d045      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a34      	ldr	r2, [pc, #208]	@ (800a2f8 <HAL_DMA_Start_IT+0x47c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d040      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a33      	ldr	r2, [pc, #204]	@ (800a2fc <HAL_DMA_Start_IT+0x480>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d03b      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a31      	ldr	r2, [pc, #196]	@ (800a300 <HAL_DMA_Start_IT+0x484>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d036      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a30      	ldr	r2, [pc, #192]	@ (800a304 <HAL_DMA_Start_IT+0x488>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d031      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a2e      	ldr	r2, [pc, #184]	@ (800a308 <HAL_DMA_Start_IT+0x48c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d02c      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a2d      	ldr	r2, [pc, #180]	@ (800a30c <HAL_DMA_Start_IT+0x490>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d027      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a2b      	ldr	r2, [pc, #172]	@ (800a310 <HAL_DMA_Start_IT+0x494>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d022      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a2a      	ldr	r2, [pc, #168]	@ (800a314 <HAL_DMA_Start_IT+0x498>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d01d      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a28      	ldr	r2, [pc, #160]	@ (800a318 <HAL_DMA_Start_IT+0x49c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d018      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a27      	ldr	r2, [pc, #156]	@ (800a31c <HAL_DMA_Start_IT+0x4a0>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d013      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a25      	ldr	r2, [pc, #148]	@ (800a320 <HAL_DMA_Start_IT+0x4a4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00e      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a24      	ldr	r2, [pc, #144]	@ (800a324 <HAL_DMA_Start_IT+0x4a8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d009      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a22      	ldr	r2, [pc, #136]	@ (800a328 <HAL_DMA_Start_IT+0x4ac>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_DMA_Start_IT+0x430>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a21      	ldr	r2, [pc, #132]	@ (800a32c <HAL_DMA_Start_IT+0x4b0>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d108      	bne.n	800a2be <HAL_DMA_Start_IT+0x442>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0201 	orr.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	e012      	b.n	800a2e4 <HAL_DMA_Start_IT+0x468>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0201 	orr.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	e009      	b.n	800a2e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	40020010 	.word	0x40020010
 800a2f4:	40020028 	.word	0x40020028
 800a2f8:	40020040 	.word	0x40020040
 800a2fc:	40020058 	.word	0x40020058
 800a300:	40020070 	.word	0x40020070
 800a304:	40020088 	.word	0x40020088
 800a308:	400200a0 	.word	0x400200a0
 800a30c:	400200b8 	.word	0x400200b8
 800a310:	40020410 	.word	0x40020410
 800a314:	40020428 	.word	0x40020428
 800a318:	40020440 	.word	0x40020440
 800a31c:	40020458 	.word	0x40020458
 800a320:	40020470 	.word	0x40020470
 800a324:	40020488 	.word	0x40020488
 800a328:	400204a0 	.word	0x400204a0
 800a32c:	400204b8 	.word	0x400204b8
 800a330:	58025408 	.word	0x58025408
 800a334:	5802541c 	.word	0x5802541c
 800a338:	58025430 	.word	0x58025430
 800a33c:	58025444 	.word	0x58025444
 800a340:	58025458 	.word	0x58025458
 800a344:	5802546c 	.word	0x5802546c
 800a348:	58025480 	.word	0x58025480
 800a34c:	58025494 	.word	0x58025494

0800a350 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	@ 0x28
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a35c:	4b67      	ldr	r3, [pc, #412]	@ (800a4fc <HAL_DMA_IRQHandler+0x1ac>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a67      	ldr	r2, [pc, #412]	@ (800a500 <HAL_DMA_IRQHandler+0x1b0>)
 800a362:	fba2 2303 	umull	r2, r3, r2, r3
 800a366:	0a9b      	lsrs	r3, r3, #10
 800a368:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a36e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a374:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a5f      	ldr	r2, [pc, #380]	@ (800a504 <HAL_DMA_IRQHandler+0x1b4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d04a      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a5d      	ldr	r2, [pc, #372]	@ (800a508 <HAL_DMA_IRQHandler+0x1b8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d045      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a5c      	ldr	r2, [pc, #368]	@ (800a50c <HAL_DMA_IRQHandler+0x1bc>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d040      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a5a      	ldr	r2, [pc, #360]	@ (800a510 <HAL_DMA_IRQHandler+0x1c0>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d03b      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a59      	ldr	r2, [pc, #356]	@ (800a514 <HAL_DMA_IRQHandler+0x1c4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d036      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a57      	ldr	r2, [pc, #348]	@ (800a518 <HAL_DMA_IRQHandler+0x1c8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d031      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a56      	ldr	r2, [pc, #344]	@ (800a51c <HAL_DMA_IRQHandler+0x1cc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d02c      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a54      	ldr	r2, [pc, #336]	@ (800a520 <HAL_DMA_IRQHandler+0x1d0>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d027      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a53      	ldr	r2, [pc, #332]	@ (800a524 <HAL_DMA_IRQHandler+0x1d4>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d022      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a51      	ldr	r2, [pc, #324]	@ (800a528 <HAL_DMA_IRQHandler+0x1d8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d01d      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a50      	ldr	r2, [pc, #320]	@ (800a52c <HAL_DMA_IRQHandler+0x1dc>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d018      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a4e      	ldr	r2, [pc, #312]	@ (800a530 <HAL_DMA_IRQHandler+0x1e0>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d013      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a4d      	ldr	r2, [pc, #308]	@ (800a534 <HAL_DMA_IRQHandler+0x1e4>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00e      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a4b      	ldr	r2, [pc, #300]	@ (800a538 <HAL_DMA_IRQHandler+0x1e8>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d009      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a4a      	ldr	r2, [pc, #296]	@ (800a53c <HAL_DMA_IRQHandler+0x1ec>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d004      	beq.n	800a422 <HAL_DMA_IRQHandler+0xd2>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a48      	ldr	r2, [pc, #288]	@ (800a540 <HAL_DMA_IRQHandler+0x1f0>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d101      	bne.n	800a426 <HAL_DMA_IRQHandler+0xd6>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <HAL_DMA_IRQHandler+0xd8>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 842b 	beq.w	800ac84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a432:	f003 031f 	and.w	r3, r3, #31
 800a436:	2208      	movs	r2, #8
 800a438:	409a      	lsls	r2, r3
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	4013      	ands	r3, r2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 80a2 	beq.w	800a588 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a2e      	ldr	r2, [pc, #184]	@ (800a504 <HAL_DMA_IRQHandler+0x1b4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d04a      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a2d      	ldr	r2, [pc, #180]	@ (800a508 <HAL_DMA_IRQHandler+0x1b8>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d045      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a2b      	ldr	r2, [pc, #172]	@ (800a50c <HAL_DMA_IRQHandler+0x1bc>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d040      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a2a      	ldr	r2, [pc, #168]	@ (800a510 <HAL_DMA_IRQHandler+0x1c0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d03b      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a28      	ldr	r2, [pc, #160]	@ (800a514 <HAL_DMA_IRQHandler+0x1c4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d036      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a27      	ldr	r2, [pc, #156]	@ (800a518 <HAL_DMA_IRQHandler+0x1c8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d031      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a25      	ldr	r2, [pc, #148]	@ (800a51c <HAL_DMA_IRQHandler+0x1cc>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d02c      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a24      	ldr	r2, [pc, #144]	@ (800a520 <HAL_DMA_IRQHandler+0x1d0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d027      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a22      	ldr	r2, [pc, #136]	@ (800a524 <HAL_DMA_IRQHandler+0x1d4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d022      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a21      	ldr	r2, [pc, #132]	@ (800a528 <HAL_DMA_IRQHandler+0x1d8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d01d      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a52c <HAL_DMA_IRQHandler+0x1dc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d018      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a1e      	ldr	r2, [pc, #120]	@ (800a530 <HAL_DMA_IRQHandler+0x1e0>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d013      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a1c      	ldr	r2, [pc, #112]	@ (800a534 <HAL_DMA_IRQHandler+0x1e4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00e      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a538 <HAL_DMA_IRQHandler+0x1e8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d009      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a19      	ldr	r2, [pc, #100]	@ (800a53c <HAL_DMA_IRQHandler+0x1ec>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d004      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x194>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a18      	ldr	r2, [pc, #96]	@ (800a540 <HAL_DMA_IRQHandler+0x1f0>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d12f      	bne.n	800a544 <HAL_DMA_IRQHandler+0x1f4>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bf14      	ite	ne
 800a4f2:	2301      	movne	r3, #1
 800a4f4:	2300      	moveq	r3, #0
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	e02e      	b.n	800a558 <HAL_DMA_IRQHandler+0x208>
 800a4fa:	bf00      	nop
 800a4fc:	24000000 	.word	0x24000000
 800a500:	1b4e81b5 	.word	0x1b4e81b5
 800a504:	40020010 	.word	0x40020010
 800a508:	40020028 	.word	0x40020028
 800a50c:	40020040 	.word	0x40020040
 800a510:	40020058 	.word	0x40020058
 800a514:	40020070 	.word	0x40020070
 800a518:	40020088 	.word	0x40020088
 800a51c:	400200a0 	.word	0x400200a0
 800a520:	400200b8 	.word	0x400200b8
 800a524:	40020410 	.word	0x40020410
 800a528:	40020428 	.word	0x40020428
 800a52c:	40020440 	.word	0x40020440
 800a530:	40020458 	.word	0x40020458
 800a534:	40020470 	.word	0x40020470
 800a538:	40020488 	.word	0x40020488
 800a53c:	400204a0 	.word	0x400204a0
 800a540:	400204b8 	.word	0x400204b8
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bf14      	ite	ne
 800a552:	2301      	movne	r3, #1
 800a554:	2300      	moveq	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d015      	beq.n	800a588 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0204 	bic.w	r2, r2, #4
 800a56a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a570:	f003 031f 	and.w	r3, r3, #31
 800a574:	2208      	movs	r2, #8
 800a576:	409a      	lsls	r2, r3
 800a578:	6a3b      	ldr	r3, [r7, #32]
 800a57a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a580:	f043 0201 	orr.w	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a58c:	f003 031f 	and.w	r3, r3, #31
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	fa22 f303 	lsr.w	r3, r2, r3
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d06e      	beq.n	800a67c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a69      	ldr	r2, [pc, #420]	@ (800a748 <HAL_DMA_IRQHandler+0x3f8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d04a      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a67      	ldr	r2, [pc, #412]	@ (800a74c <HAL_DMA_IRQHandler+0x3fc>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d045      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a66      	ldr	r2, [pc, #408]	@ (800a750 <HAL_DMA_IRQHandler+0x400>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d040      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a64      	ldr	r2, [pc, #400]	@ (800a754 <HAL_DMA_IRQHandler+0x404>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d03b      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a63      	ldr	r2, [pc, #396]	@ (800a758 <HAL_DMA_IRQHandler+0x408>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d036      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a61      	ldr	r2, [pc, #388]	@ (800a75c <HAL_DMA_IRQHandler+0x40c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d031      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a60      	ldr	r2, [pc, #384]	@ (800a760 <HAL_DMA_IRQHandler+0x410>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d02c      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a5e      	ldr	r2, [pc, #376]	@ (800a764 <HAL_DMA_IRQHandler+0x414>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d027      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a5d      	ldr	r2, [pc, #372]	@ (800a768 <HAL_DMA_IRQHandler+0x418>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d022      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a5b      	ldr	r2, [pc, #364]	@ (800a76c <HAL_DMA_IRQHandler+0x41c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d01d      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a5a      	ldr	r2, [pc, #360]	@ (800a770 <HAL_DMA_IRQHandler+0x420>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d018      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a58      	ldr	r2, [pc, #352]	@ (800a774 <HAL_DMA_IRQHandler+0x424>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a57      	ldr	r2, [pc, #348]	@ (800a778 <HAL_DMA_IRQHandler+0x428>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00e      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a55      	ldr	r2, [pc, #340]	@ (800a77c <HAL_DMA_IRQHandler+0x42c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d009      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a54      	ldr	r2, [pc, #336]	@ (800a780 <HAL_DMA_IRQHandler+0x430>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d004      	beq.n	800a63e <HAL_DMA_IRQHandler+0x2ee>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a52      	ldr	r2, [pc, #328]	@ (800a784 <HAL_DMA_IRQHandler+0x434>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d10a      	bne.n	800a654 <HAL_DMA_IRQHandler+0x304>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf14      	ite	ne
 800a64c:	2301      	movne	r3, #1
 800a64e:	2300      	moveq	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	e003      	b.n	800a65c <HAL_DMA_IRQHandler+0x30c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00d      	beq.n	800a67c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	2201      	movs	r2, #1
 800a66a:	409a      	lsls	r2, r3
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a674:	f043 0202 	orr.w	r2, r3, #2
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a680:	f003 031f 	and.w	r3, r3, #31
 800a684:	2204      	movs	r2, #4
 800a686:	409a      	lsls	r2, r3
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 808f 	beq.w	800a7b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a2c      	ldr	r2, [pc, #176]	@ (800a748 <HAL_DMA_IRQHandler+0x3f8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d04a      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a2a      	ldr	r2, [pc, #168]	@ (800a74c <HAL_DMA_IRQHandler+0x3fc>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d045      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a29      	ldr	r2, [pc, #164]	@ (800a750 <HAL_DMA_IRQHandler+0x400>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d040      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a27      	ldr	r2, [pc, #156]	@ (800a754 <HAL_DMA_IRQHandler+0x404>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d03b      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a26      	ldr	r2, [pc, #152]	@ (800a758 <HAL_DMA_IRQHandler+0x408>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d036      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a24      	ldr	r2, [pc, #144]	@ (800a75c <HAL_DMA_IRQHandler+0x40c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d031      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a23      	ldr	r2, [pc, #140]	@ (800a760 <HAL_DMA_IRQHandler+0x410>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d02c      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a21      	ldr	r2, [pc, #132]	@ (800a764 <HAL_DMA_IRQHandler+0x414>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d027      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a20      	ldr	r2, [pc, #128]	@ (800a768 <HAL_DMA_IRQHandler+0x418>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d022      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a1e      	ldr	r2, [pc, #120]	@ (800a76c <HAL_DMA_IRQHandler+0x41c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d01d      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1d      	ldr	r2, [pc, #116]	@ (800a770 <HAL_DMA_IRQHandler+0x420>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d018      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1b      	ldr	r2, [pc, #108]	@ (800a774 <HAL_DMA_IRQHandler+0x424>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a1a      	ldr	r2, [pc, #104]	@ (800a778 <HAL_DMA_IRQHandler+0x428>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d00e      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a18      	ldr	r2, [pc, #96]	@ (800a77c <HAL_DMA_IRQHandler+0x42c>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d009      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a17      	ldr	r2, [pc, #92]	@ (800a780 <HAL_DMA_IRQHandler+0x430>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d004      	beq.n	800a732 <HAL_DMA_IRQHandler+0x3e2>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a15      	ldr	r2, [pc, #84]	@ (800a784 <HAL_DMA_IRQHandler+0x434>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d12a      	bne.n	800a788 <HAL_DMA_IRQHandler+0x438>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bf14      	ite	ne
 800a740:	2301      	movne	r3, #1
 800a742:	2300      	moveq	r3, #0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	e023      	b.n	800a790 <HAL_DMA_IRQHandler+0x440>
 800a748:	40020010 	.word	0x40020010
 800a74c:	40020028 	.word	0x40020028
 800a750:	40020040 	.word	0x40020040
 800a754:	40020058 	.word	0x40020058
 800a758:	40020070 	.word	0x40020070
 800a75c:	40020088 	.word	0x40020088
 800a760:	400200a0 	.word	0x400200a0
 800a764:	400200b8 	.word	0x400200b8
 800a768:	40020410 	.word	0x40020410
 800a76c:	40020428 	.word	0x40020428
 800a770:	40020440 	.word	0x40020440
 800a774:	40020458 	.word	0x40020458
 800a778:	40020470 	.word	0x40020470
 800a77c:	40020488 	.word	0x40020488
 800a780:	400204a0 	.word	0x400204a0
 800a784:	400204b8 	.word	0x400204b8
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2300      	movs	r3, #0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00d      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a798:	f003 031f 	and.w	r3, r3, #31
 800a79c:	2204      	movs	r2, #4
 800a79e:	409a      	lsls	r2, r3
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a8:	f043 0204 	orr.w	r2, r3, #4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	409a      	lsls	r2, r3
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 80a6 	beq.w	800a912 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a85      	ldr	r2, [pc, #532]	@ (800a9e0 <HAL_DMA_IRQHandler+0x690>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d04a      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a83      	ldr	r2, [pc, #524]	@ (800a9e4 <HAL_DMA_IRQHandler+0x694>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d045      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a82      	ldr	r2, [pc, #520]	@ (800a9e8 <HAL_DMA_IRQHandler+0x698>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d040      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a80      	ldr	r2, [pc, #512]	@ (800a9ec <HAL_DMA_IRQHandler+0x69c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d03b      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a7f      	ldr	r2, [pc, #508]	@ (800a9f0 <HAL_DMA_IRQHandler+0x6a0>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d036      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a7d      	ldr	r2, [pc, #500]	@ (800a9f4 <HAL_DMA_IRQHandler+0x6a4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d031      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a7c      	ldr	r2, [pc, #496]	@ (800a9f8 <HAL_DMA_IRQHandler+0x6a8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d02c      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a7a      	ldr	r2, [pc, #488]	@ (800a9fc <HAL_DMA_IRQHandler+0x6ac>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d027      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a79      	ldr	r2, [pc, #484]	@ (800aa00 <HAL_DMA_IRQHandler+0x6b0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d022      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a77      	ldr	r2, [pc, #476]	@ (800aa04 <HAL_DMA_IRQHandler+0x6b4>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d01d      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a76      	ldr	r2, [pc, #472]	@ (800aa08 <HAL_DMA_IRQHandler+0x6b8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d018      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a74      	ldr	r2, [pc, #464]	@ (800aa0c <HAL_DMA_IRQHandler+0x6bc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d013      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a73      	ldr	r2, [pc, #460]	@ (800aa10 <HAL_DMA_IRQHandler+0x6c0>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00e      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a71      	ldr	r2, [pc, #452]	@ (800aa14 <HAL_DMA_IRQHandler+0x6c4>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d009      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a70      	ldr	r2, [pc, #448]	@ (800aa18 <HAL_DMA_IRQHandler+0x6c8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d004      	beq.n	800a866 <HAL_DMA_IRQHandler+0x516>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a6e      	ldr	r2, [pc, #440]	@ (800aa1c <HAL_DMA_IRQHandler+0x6cc>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d10a      	bne.n	800a87c <HAL_DMA_IRQHandler+0x52c>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf14      	ite	ne
 800a874:	2301      	movne	r3, #1
 800a876:	2300      	moveq	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	e009      	b.n	800a890 <HAL_DMA_IRQHandler+0x540>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	bf14      	ite	ne
 800a88a:	2301      	movne	r3, #1
 800a88c:	2300      	moveq	r3, #0
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d03e      	beq.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	2210      	movs	r2, #16
 800a89e:	409a      	lsls	r2, r3
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d018      	beq.n	800a8e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d108      	bne.n	800a8d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d024      	beq.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
 800a8d0:	e01f      	b.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01b      	beq.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	e016      	b.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d107      	bne.n	800a902 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0208 	bic.w	r2, r2, #8
 800a900:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a916:	f003 031f 	and.w	r3, r3, #31
 800a91a:	2220      	movs	r2, #32
 800a91c:	409a      	lsls	r2, r3
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	4013      	ands	r3, r2
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 8110 	beq.w	800ab48 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a2c      	ldr	r2, [pc, #176]	@ (800a9e0 <HAL_DMA_IRQHandler+0x690>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d04a      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a2b      	ldr	r2, [pc, #172]	@ (800a9e4 <HAL_DMA_IRQHandler+0x694>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d045      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a29      	ldr	r2, [pc, #164]	@ (800a9e8 <HAL_DMA_IRQHandler+0x698>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d040      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a28      	ldr	r2, [pc, #160]	@ (800a9ec <HAL_DMA_IRQHandler+0x69c>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d03b      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a26      	ldr	r2, [pc, #152]	@ (800a9f0 <HAL_DMA_IRQHandler+0x6a0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d036      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a25      	ldr	r2, [pc, #148]	@ (800a9f4 <HAL_DMA_IRQHandler+0x6a4>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d031      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a23      	ldr	r2, [pc, #140]	@ (800a9f8 <HAL_DMA_IRQHandler+0x6a8>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d02c      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a22      	ldr	r2, [pc, #136]	@ (800a9fc <HAL_DMA_IRQHandler+0x6ac>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d027      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a20      	ldr	r2, [pc, #128]	@ (800aa00 <HAL_DMA_IRQHandler+0x6b0>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d022      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1f      	ldr	r2, [pc, #124]	@ (800aa04 <HAL_DMA_IRQHandler+0x6b4>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d01d      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1d      	ldr	r2, [pc, #116]	@ (800aa08 <HAL_DMA_IRQHandler+0x6b8>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d018      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a1c      	ldr	r2, [pc, #112]	@ (800aa0c <HAL_DMA_IRQHandler+0x6bc>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d013      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a1a      	ldr	r2, [pc, #104]	@ (800aa10 <HAL_DMA_IRQHandler+0x6c0>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d00e      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a19      	ldr	r2, [pc, #100]	@ (800aa14 <HAL_DMA_IRQHandler+0x6c4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d009      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a17      	ldr	r2, [pc, #92]	@ (800aa18 <HAL_DMA_IRQHandler+0x6c8>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d004      	beq.n	800a9c8 <HAL_DMA_IRQHandler+0x678>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a16      	ldr	r2, [pc, #88]	@ (800aa1c <HAL_DMA_IRQHandler+0x6cc>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d12b      	bne.n	800aa20 <HAL_DMA_IRQHandler+0x6d0>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bf14      	ite	ne
 800a9d6:	2301      	movne	r3, #1
 800a9d8:	2300      	moveq	r3, #0
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	e02a      	b.n	800aa34 <HAL_DMA_IRQHandler+0x6e4>
 800a9de:	bf00      	nop
 800a9e0:	40020010 	.word	0x40020010
 800a9e4:	40020028 	.word	0x40020028
 800a9e8:	40020040 	.word	0x40020040
 800a9ec:	40020058 	.word	0x40020058
 800a9f0:	40020070 	.word	0x40020070
 800a9f4:	40020088 	.word	0x40020088
 800a9f8:	400200a0 	.word	0x400200a0
 800a9fc:	400200b8 	.word	0x400200b8
 800aa00:	40020410 	.word	0x40020410
 800aa04:	40020428 	.word	0x40020428
 800aa08:	40020440 	.word	0x40020440
 800aa0c:	40020458 	.word	0x40020458
 800aa10:	40020470 	.word	0x40020470
 800aa14:	40020488 	.word	0x40020488
 800aa18:	400204a0 	.word	0x400204a0
 800aa1c:	400204b8 	.word	0x400204b8
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bf14      	ite	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	2300      	moveq	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8087 	beq.w	800ab48 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa3e:	f003 031f 	and.w	r3, r3, #31
 800aa42:	2220      	movs	r2, #32
 800aa44:	409a      	lsls	r2, r3
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d139      	bne.n	800aaca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0216 	bic.w	r2, r2, #22
 800aa64:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	695a      	ldr	r2, [r3, #20]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa74:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <HAL_DMA_IRQHandler+0x736>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f022 0208 	bic.w	r2, r2, #8
 800aa94:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa9a:	f003 031f 	and.w	r3, r3, #31
 800aa9e:	223f      	movs	r2, #63	@ 0x3f
 800aaa0:	409a      	lsls	r2, r3
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 834a 	beq.w	800b154 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
          }
          return;
 800aac8:	e344      	b.n	800b154 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d018      	beq.n	800ab0a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d108      	bne.n	800aaf8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02c      	beq.n	800ab48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
 800aaf6:	e027      	b.n	800ab48 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d023      	beq.n	800ab48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
 800ab08:	e01e      	b.n	800ab48 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10f      	bne.n	800ab38 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0210 	bic.w	r2, r2, #16
 800ab26:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8306 	beq.w	800b15e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 8088 	beq.w	800ac70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2204      	movs	r2, #4
 800ab64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a7a      	ldr	r2, [pc, #488]	@ (800ad58 <HAL_DMA_IRQHandler+0xa08>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d04a      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a79      	ldr	r2, [pc, #484]	@ (800ad5c <HAL_DMA_IRQHandler+0xa0c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d045      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a77      	ldr	r2, [pc, #476]	@ (800ad60 <HAL_DMA_IRQHandler+0xa10>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d040      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a76      	ldr	r2, [pc, #472]	@ (800ad64 <HAL_DMA_IRQHandler+0xa14>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d03b      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a74      	ldr	r2, [pc, #464]	@ (800ad68 <HAL_DMA_IRQHandler+0xa18>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d036      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a73      	ldr	r2, [pc, #460]	@ (800ad6c <HAL_DMA_IRQHandler+0xa1c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d031      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a71      	ldr	r2, [pc, #452]	@ (800ad70 <HAL_DMA_IRQHandler+0xa20>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d02c      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a70      	ldr	r2, [pc, #448]	@ (800ad74 <HAL_DMA_IRQHandler+0xa24>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d027      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a6e      	ldr	r2, [pc, #440]	@ (800ad78 <HAL_DMA_IRQHandler+0xa28>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d022      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a6d      	ldr	r2, [pc, #436]	@ (800ad7c <HAL_DMA_IRQHandler+0xa2c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d01d      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a6b      	ldr	r2, [pc, #428]	@ (800ad80 <HAL_DMA_IRQHandler+0xa30>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d018      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a6a      	ldr	r2, [pc, #424]	@ (800ad84 <HAL_DMA_IRQHandler+0xa34>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d013      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a68      	ldr	r2, [pc, #416]	@ (800ad88 <HAL_DMA_IRQHandler+0xa38>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00e      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a67      	ldr	r2, [pc, #412]	@ (800ad8c <HAL_DMA_IRQHandler+0xa3c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d009      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a65      	ldr	r2, [pc, #404]	@ (800ad90 <HAL_DMA_IRQHandler+0xa40>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d004      	beq.n	800ac08 <HAL_DMA_IRQHandler+0x8b8>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a64      	ldr	r2, [pc, #400]	@ (800ad94 <HAL_DMA_IRQHandler+0xa44>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d108      	bne.n	800ac1a <HAL_DMA_IRQHandler+0x8ca>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0201 	bic.w	r2, r2, #1
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	e007      	b.n	800ac2a <HAL_DMA_IRQHandler+0x8da>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0201 	bic.w	r2, r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d307      	bcc.n	800ac46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f2      	bne.n	800ac2a <HAL_DMA_IRQHandler+0x8da>
 800ac44:	e000      	b.n	800ac48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800ac46:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d004      	beq.n	800ac60 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ac5e:	e003      	b.n	800ac68 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8272 	beq.w	800b15e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	e26c      	b.n	800b15e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a43      	ldr	r2, [pc, #268]	@ (800ad98 <HAL_DMA_IRQHandler+0xa48>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d022      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a42      	ldr	r2, [pc, #264]	@ (800ad9c <HAL_DMA_IRQHandler+0xa4c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d01d      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a40      	ldr	r2, [pc, #256]	@ (800ada0 <HAL_DMA_IRQHandler+0xa50>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d018      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a3f      	ldr	r2, [pc, #252]	@ (800ada4 <HAL_DMA_IRQHandler+0xa54>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d013      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a3d      	ldr	r2, [pc, #244]	@ (800ada8 <HAL_DMA_IRQHandler+0xa58>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00e      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a3c      	ldr	r2, [pc, #240]	@ (800adac <HAL_DMA_IRQHandler+0xa5c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d009      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a3a      	ldr	r2, [pc, #232]	@ (800adb0 <HAL_DMA_IRQHandler+0xa60>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x984>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a39      	ldr	r2, [pc, #228]	@ (800adb4 <HAL_DMA_IRQHandler+0xa64>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d101      	bne.n	800acd8 <HAL_DMA_IRQHandler+0x988>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <HAL_DMA_IRQHandler+0x98a>
 800acd8:	2300      	movs	r3, #0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 823f 	beq.w	800b15e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acec:	f003 031f 	and.w	r3, r3, #31
 800acf0:	2204      	movs	r2, #4
 800acf2:	409a      	lsls	r2, r3
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80cd 	beq.w	800ae98 <HAL_DMA_IRQHandler+0xb48>
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80c7 	beq.w	800ae98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	2204      	movs	r2, #4
 800ad14:	409a      	lsls	r2, r3
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d049      	beq.n	800adb8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 8210 	beq.w	800b158 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ad40:	e20a      	b.n	800b158 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8206 	beq.w	800b158 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ad54:	e200      	b.n	800b158 <HAL_DMA_IRQHandler+0xe08>
 800ad56:	bf00      	nop
 800ad58:	40020010 	.word	0x40020010
 800ad5c:	40020028 	.word	0x40020028
 800ad60:	40020040 	.word	0x40020040
 800ad64:	40020058 	.word	0x40020058
 800ad68:	40020070 	.word	0x40020070
 800ad6c:	40020088 	.word	0x40020088
 800ad70:	400200a0 	.word	0x400200a0
 800ad74:	400200b8 	.word	0x400200b8
 800ad78:	40020410 	.word	0x40020410
 800ad7c:	40020428 	.word	0x40020428
 800ad80:	40020440 	.word	0x40020440
 800ad84:	40020458 	.word	0x40020458
 800ad88:	40020470 	.word	0x40020470
 800ad8c:	40020488 	.word	0x40020488
 800ad90:	400204a0 	.word	0x400204a0
 800ad94:	400204b8 	.word	0x400204b8
 800ad98:	58025408 	.word	0x58025408
 800ad9c:	5802541c 	.word	0x5802541c
 800ada0:	58025430 	.word	0x58025430
 800ada4:	58025444 	.word	0x58025444
 800ada8:	58025458 	.word	0x58025458
 800adac:	5802546c 	.word	0x5802546c
 800adb0:	58025480 	.word	0x58025480
 800adb4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d160      	bne.n	800ae84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a7f      	ldr	r2, [pc, #508]	@ (800afc4 <HAL_DMA_IRQHandler+0xc74>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d04a      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a7d      	ldr	r2, [pc, #500]	@ (800afc8 <HAL_DMA_IRQHandler+0xc78>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d045      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a7c      	ldr	r2, [pc, #496]	@ (800afcc <HAL_DMA_IRQHandler+0xc7c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d040      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a7a      	ldr	r2, [pc, #488]	@ (800afd0 <HAL_DMA_IRQHandler+0xc80>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d03b      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a79      	ldr	r2, [pc, #484]	@ (800afd4 <HAL_DMA_IRQHandler+0xc84>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d036      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a77      	ldr	r2, [pc, #476]	@ (800afd8 <HAL_DMA_IRQHandler+0xc88>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d031      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a76      	ldr	r2, [pc, #472]	@ (800afdc <HAL_DMA_IRQHandler+0xc8c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d02c      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a74      	ldr	r2, [pc, #464]	@ (800afe0 <HAL_DMA_IRQHandler+0xc90>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d027      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a73      	ldr	r2, [pc, #460]	@ (800afe4 <HAL_DMA_IRQHandler+0xc94>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d022      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a71      	ldr	r2, [pc, #452]	@ (800afe8 <HAL_DMA_IRQHandler+0xc98>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d01d      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a70      	ldr	r2, [pc, #448]	@ (800afec <HAL_DMA_IRQHandler+0xc9c>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d018      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a6e      	ldr	r2, [pc, #440]	@ (800aff0 <HAL_DMA_IRQHandler+0xca0>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d013      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a6d      	ldr	r2, [pc, #436]	@ (800aff4 <HAL_DMA_IRQHandler+0xca4>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00e      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a6b      	ldr	r2, [pc, #428]	@ (800aff8 <HAL_DMA_IRQHandler+0xca8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d009      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a6a      	ldr	r2, [pc, #424]	@ (800affc <HAL_DMA_IRQHandler+0xcac>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d004      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xb12>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a68      	ldr	r2, [pc, #416]	@ (800b000 <HAL_DMA_IRQHandler+0xcb0>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d108      	bne.n	800ae74 <HAL_DMA_IRQHandler+0xb24>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0208 	bic.w	r2, r2, #8
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	e007      	b.n	800ae84 <HAL_DMA_IRQHandler+0xb34>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0204 	bic.w	r2, r2, #4
 800ae82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 8165 	beq.w	800b158 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae96:	e15f      	b.n	800b158 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae9c:	f003 031f 	and.w	r3, r3, #31
 800aea0:	2202      	movs	r2, #2
 800aea2:	409a      	lsls	r2, r3
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 80c5 	beq.w	800b038 <HAL_DMA_IRQHandler+0xce8>
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80bf 	beq.w	800b038 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aebe:	f003 031f 	and.w	r3, r3, #31
 800aec2:	2202      	movs	r2, #2
 800aec4:	409a      	lsls	r2, r3
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d018      	beq.n	800af06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 813a 	beq.w	800b15c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aef0:	e134      	b.n	800b15c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8130 	beq.w	800b15c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af04:	e12a      	b.n	800b15c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 8089 	bne.w	800b024 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a2b      	ldr	r2, [pc, #172]	@ (800afc4 <HAL_DMA_IRQHandler+0xc74>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d04a      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a29      	ldr	r2, [pc, #164]	@ (800afc8 <HAL_DMA_IRQHandler+0xc78>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d045      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a28      	ldr	r2, [pc, #160]	@ (800afcc <HAL_DMA_IRQHandler+0xc7c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d040      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a26      	ldr	r2, [pc, #152]	@ (800afd0 <HAL_DMA_IRQHandler+0xc80>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d03b      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a25      	ldr	r2, [pc, #148]	@ (800afd4 <HAL_DMA_IRQHandler+0xc84>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d036      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a23      	ldr	r2, [pc, #140]	@ (800afd8 <HAL_DMA_IRQHandler+0xc88>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d031      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a22      	ldr	r2, [pc, #136]	@ (800afdc <HAL_DMA_IRQHandler+0xc8c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d02c      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a20      	ldr	r2, [pc, #128]	@ (800afe0 <HAL_DMA_IRQHandler+0xc90>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d027      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a1f      	ldr	r2, [pc, #124]	@ (800afe4 <HAL_DMA_IRQHandler+0xc94>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d022      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a1d      	ldr	r2, [pc, #116]	@ (800afe8 <HAL_DMA_IRQHandler+0xc98>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d01d      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a1c      	ldr	r2, [pc, #112]	@ (800afec <HAL_DMA_IRQHandler+0xc9c>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d018      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a1a      	ldr	r2, [pc, #104]	@ (800aff0 <HAL_DMA_IRQHandler+0xca0>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d013      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a19      	ldr	r2, [pc, #100]	@ (800aff4 <HAL_DMA_IRQHandler+0xca4>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00e      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a17      	ldr	r2, [pc, #92]	@ (800aff8 <HAL_DMA_IRQHandler+0xca8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d009      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a16      	ldr	r2, [pc, #88]	@ (800affc <HAL_DMA_IRQHandler+0xcac>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d004      	beq.n	800afb2 <HAL_DMA_IRQHandler+0xc62>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a14      	ldr	r2, [pc, #80]	@ (800b000 <HAL_DMA_IRQHandler+0xcb0>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d128      	bne.n	800b004 <HAL_DMA_IRQHandler+0xcb4>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f022 0214 	bic.w	r2, r2, #20
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	e027      	b.n	800b014 <HAL_DMA_IRQHandler+0xcc4>
 800afc4:	40020010 	.word	0x40020010
 800afc8:	40020028 	.word	0x40020028
 800afcc:	40020040 	.word	0x40020040
 800afd0:	40020058 	.word	0x40020058
 800afd4:	40020070 	.word	0x40020070
 800afd8:	40020088 	.word	0x40020088
 800afdc:	400200a0 	.word	0x400200a0
 800afe0:	400200b8 	.word	0x400200b8
 800afe4:	40020410 	.word	0x40020410
 800afe8:	40020428 	.word	0x40020428
 800afec:	40020440 	.word	0x40020440
 800aff0:	40020458 	.word	0x40020458
 800aff4:	40020470 	.word	0x40020470
 800aff8:	40020488 	.word	0x40020488
 800affc:	400204a0 	.word	0x400204a0
 800b000:	400204b8 	.word	0x400204b8
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 020a 	bic.w	r2, r2, #10
 800b012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8097 	beq.w	800b15c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b036:	e091      	b.n	800b15c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	2208      	movs	r2, #8
 800b042:	409a      	lsls	r2, r3
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4013      	ands	r3, r2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 8088 	beq.w	800b15e <HAL_DMA_IRQHandler+0xe0e>
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8082 	beq.w	800b15e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a41      	ldr	r2, [pc, #260]	@ (800b164 <HAL_DMA_IRQHandler+0xe14>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d04a      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a3f      	ldr	r2, [pc, #252]	@ (800b168 <HAL_DMA_IRQHandler+0xe18>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d045      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a3e      	ldr	r2, [pc, #248]	@ (800b16c <HAL_DMA_IRQHandler+0xe1c>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d040      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a3c      	ldr	r2, [pc, #240]	@ (800b170 <HAL_DMA_IRQHandler+0xe20>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d03b      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a3b      	ldr	r2, [pc, #236]	@ (800b174 <HAL_DMA_IRQHandler+0xe24>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d036      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a39      	ldr	r2, [pc, #228]	@ (800b178 <HAL_DMA_IRQHandler+0xe28>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d031      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a38      	ldr	r2, [pc, #224]	@ (800b17c <HAL_DMA_IRQHandler+0xe2c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d02c      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a36      	ldr	r2, [pc, #216]	@ (800b180 <HAL_DMA_IRQHandler+0xe30>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d027      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a35      	ldr	r2, [pc, #212]	@ (800b184 <HAL_DMA_IRQHandler+0xe34>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d022      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a33      	ldr	r2, [pc, #204]	@ (800b188 <HAL_DMA_IRQHandler+0xe38>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d01d      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a32      	ldr	r2, [pc, #200]	@ (800b18c <HAL_DMA_IRQHandler+0xe3c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d018      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a30      	ldr	r2, [pc, #192]	@ (800b190 <HAL_DMA_IRQHandler+0xe40>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d013      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a2f      	ldr	r2, [pc, #188]	@ (800b194 <HAL_DMA_IRQHandler+0xe44>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00e      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b198 <HAL_DMA_IRQHandler+0xe48>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d009      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a2c      	ldr	r2, [pc, #176]	@ (800b19c <HAL_DMA_IRQHandler+0xe4c>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d004      	beq.n	800b0fa <HAL_DMA_IRQHandler+0xdaa>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a0 <HAL_DMA_IRQHandler+0xe50>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d108      	bne.n	800b10c <HAL_DMA_IRQHandler+0xdbc>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 021c 	bic.w	r2, r2, #28
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	e007      	b.n	800b11c <HAL_DMA_IRQHandler+0xdcc>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 020e 	bic.w	r2, r2, #14
 800b11a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b120:	f003 031f 	and.w	r3, r3, #31
 800b124:	2201      	movs	r2, #1
 800b126:	409a      	lsls	r2, r3
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d009      	beq.n	800b15e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
 800b152:	e004      	b.n	800b15e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b154:	bf00      	nop
 800b156:	e002      	b.n	800b15e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b158:	bf00      	nop
 800b15a:	e000      	b.n	800b15e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b15c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b15e:	3728      	adds	r7, #40	@ 0x28
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	40020010 	.word	0x40020010
 800b168:	40020028 	.word	0x40020028
 800b16c:	40020040 	.word	0x40020040
 800b170:	40020058 	.word	0x40020058
 800b174:	40020070 	.word	0x40020070
 800b178:	40020088 	.word	0x40020088
 800b17c:	400200a0 	.word	0x400200a0
 800b180:	400200b8 	.word	0x400200b8
 800b184:	40020410 	.word	0x40020410
 800b188:	40020428 	.word	0x40020428
 800b18c:	40020440 	.word	0x40020440
 800b190:	40020458 	.word	0x40020458
 800b194:	40020470 	.word	0x40020470
 800b198:	40020488 	.word	0x40020488
 800b19c:	400204a0 	.word	0x400204a0
 800b1a0:	400204b8 	.word	0x400204b8

0800b1a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a7f      	ldr	r2, [pc, #508]	@ (800b3c0 <DMA_SetConfig+0x21c>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d072      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a7d      	ldr	r2, [pc, #500]	@ (800b3c4 <DMA_SetConfig+0x220>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d06d      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a7c      	ldr	r2, [pc, #496]	@ (800b3c8 <DMA_SetConfig+0x224>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d068      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a7a      	ldr	r2, [pc, #488]	@ (800b3cc <DMA_SetConfig+0x228>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d063      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a79      	ldr	r2, [pc, #484]	@ (800b3d0 <DMA_SetConfig+0x22c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d05e      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a77      	ldr	r2, [pc, #476]	@ (800b3d4 <DMA_SetConfig+0x230>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d059      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a76      	ldr	r2, [pc, #472]	@ (800b3d8 <DMA_SetConfig+0x234>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d054      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a74      	ldr	r2, [pc, #464]	@ (800b3dc <DMA_SetConfig+0x238>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d04f      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a73      	ldr	r2, [pc, #460]	@ (800b3e0 <DMA_SetConfig+0x23c>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d04a      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a71      	ldr	r2, [pc, #452]	@ (800b3e4 <DMA_SetConfig+0x240>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d045      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a70      	ldr	r2, [pc, #448]	@ (800b3e8 <DMA_SetConfig+0x244>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d040      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a6e      	ldr	r2, [pc, #440]	@ (800b3ec <DMA_SetConfig+0x248>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d03b      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a6d      	ldr	r2, [pc, #436]	@ (800b3f0 <DMA_SetConfig+0x24c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d036      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a6b      	ldr	r2, [pc, #428]	@ (800b3f4 <DMA_SetConfig+0x250>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d031      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a6a      	ldr	r2, [pc, #424]	@ (800b3f8 <DMA_SetConfig+0x254>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d02c      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a68      	ldr	r2, [pc, #416]	@ (800b3fc <DMA_SetConfig+0x258>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d027      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a67      	ldr	r2, [pc, #412]	@ (800b400 <DMA_SetConfig+0x25c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d022      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a65      	ldr	r2, [pc, #404]	@ (800b404 <DMA_SetConfig+0x260>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d01d      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a64      	ldr	r2, [pc, #400]	@ (800b408 <DMA_SetConfig+0x264>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d018      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a62      	ldr	r2, [pc, #392]	@ (800b40c <DMA_SetConfig+0x268>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a61      	ldr	r2, [pc, #388]	@ (800b410 <DMA_SetConfig+0x26c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00e      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a5f      	ldr	r2, [pc, #380]	@ (800b414 <DMA_SetConfig+0x270>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d009      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a5e      	ldr	r2, [pc, #376]	@ (800b418 <DMA_SetConfig+0x274>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d004      	beq.n	800b2ae <DMA_SetConfig+0x10a>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a5c      	ldr	r2, [pc, #368]	@ (800b41c <DMA_SetConfig+0x278>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d101      	bne.n	800b2b2 <DMA_SetConfig+0x10e>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <DMA_SetConfig+0x110>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00d      	beq.n	800b2d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b2c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b2d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a39      	ldr	r2, [pc, #228]	@ (800b3c0 <DMA_SetConfig+0x21c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d04a      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a38      	ldr	r2, [pc, #224]	@ (800b3c4 <DMA_SetConfig+0x220>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d045      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a36      	ldr	r2, [pc, #216]	@ (800b3c8 <DMA_SetConfig+0x224>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d040      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a35      	ldr	r2, [pc, #212]	@ (800b3cc <DMA_SetConfig+0x228>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d03b      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a33      	ldr	r2, [pc, #204]	@ (800b3d0 <DMA_SetConfig+0x22c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d036      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a32      	ldr	r2, [pc, #200]	@ (800b3d4 <DMA_SetConfig+0x230>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d031      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a30      	ldr	r2, [pc, #192]	@ (800b3d8 <DMA_SetConfig+0x234>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d02c      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a2f      	ldr	r2, [pc, #188]	@ (800b3dc <DMA_SetConfig+0x238>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d027      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a2d      	ldr	r2, [pc, #180]	@ (800b3e0 <DMA_SetConfig+0x23c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d022      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a2c      	ldr	r2, [pc, #176]	@ (800b3e4 <DMA_SetConfig+0x240>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d01d      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a2a      	ldr	r2, [pc, #168]	@ (800b3e8 <DMA_SetConfig+0x244>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d018      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a29      	ldr	r2, [pc, #164]	@ (800b3ec <DMA_SetConfig+0x248>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d013      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a27      	ldr	r2, [pc, #156]	@ (800b3f0 <DMA_SetConfig+0x24c>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00e      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a26      	ldr	r2, [pc, #152]	@ (800b3f4 <DMA_SetConfig+0x250>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d009      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a24      	ldr	r2, [pc, #144]	@ (800b3f8 <DMA_SetConfig+0x254>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d004      	beq.n	800b374 <DMA_SetConfig+0x1d0>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a23      	ldr	r2, [pc, #140]	@ (800b3fc <DMA_SetConfig+0x258>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d101      	bne.n	800b378 <DMA_SetConfig+0x1d4>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <DMA_SetConfig+0x1d6>
 800b378:	2300      	movs	r3, #0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d059      	beq.n	800b432 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b382:	f003 031f 	and.w	r3, r3, #31
 800b386:	223f      	movs	r2, #63	@ 0x3f
 800b388:	409a      	lsls	r2, r3
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b39c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	2b40      	cmp	r3, #64	@ 0x40
 800b3ac:	d138      	bne.n	800b420 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b3be:	e086      	b.n	800b4ce <DMA_SetConfig+0x32a>
 800b3c0:	40020010 	.word	0x40020010
 800b3c4:	40020028 	.word	0x40020028
 800b3c8:	40020040 	.word	0x40020040
 800b3cc:	40020058 	.word	0x40020058
 800b3d0:	40020070 	.word	0x40020070
 800b3d4:	40020088 	.word	0x40020088
 800b3d8:	400200a0 	.word	0x400200a0
 800b3dc:	400200b8 	.word	0x400200b8
 800b3e0:	40020410 	.word	0x40020410
 800b3e4:	40020428 	.word	0x40020428
 800b3e8:	40020440 	.word	0x40020440
 800b3ec:	40020458 	.word	0x40020458
 800b3f0:	40020470 	.word	0x40020470
 800b3f4:	40020488 	.word	0x40020488
 800b3f8:	400204a0 	.word	0x400204a0
 800b3fc:	400204b8 	.word	0x400204b8
 800b400:	58025408 	.word	0x58025408
 800b404:	5802541c 	.word	0x5802541c
 800b408:	58025430 	.word	0x58025430
 800b40c:	58025444 	.word	0x58025444
 800b410:	58025458 	.word	0x58025458
 800b414:	5802546c 	.word	0x5802546c
 800b418:	58025480 	.word	0x58025480
 800b41c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	60da      	str	r2, [r3, #12]
}
 800b430:	e04d      	b.n	800b4ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a29      	ldr	r2, [pc, #164]	@ (800b4dc <DMA_SetConfig+0x338>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d022      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a27      	ldr	r2, [pc, #156]	@ (800b4e0 <DMA_SetConfig+0x33c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d01d      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a26      	ldr	r2, [pc, #152]	@ (800b4e4 <DMA_SetConfig+0x340>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d018      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a24      	ldr	r2, [pc, #144]	@ (800b4e8 <DMA_SetConfig+0x344>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d013      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a23      	ldr	r2, [pc, #140]	@ (800b4ec <DMA_SetConfig+0x348>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d00e      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a21      	ldr	r2, [pc, #132]	@ (800b4f0 <DMA_SetConfig+0x34c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d009      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a20      	ldr	r2, [pc, #128]	@ (800b4f4 <DMA_SetConfig+0x350>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d004      	beq.n	800b482 <DMA_SetConfig+0x2de>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f8 <DMA_SetConfig+0x354>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d101      	bne.n	800b486 <DMA_SetConfig+0x2e2>
 800b482:	2301      	movs	r3, #1
 800b484:	e000      	b.n	800b488 <DMA_SetConfig+0x2e4>
 800b486:	2300      	movs	r3, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d020      	beq.n	800b4ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	2201      	movs	r2, #1
 800b496:	409a      	lsls	r2, r3
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	2b40      	cmp	r3, #64	@ 0x40
 800b4aa:	d108      	bne.n	800b4be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	60da      	str	r2, [r3, #12]
}
 800b4bc:	e007      	b.n	800b4ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	58025408 	.word	0x58025408
 800b4e0:	5802541c 	.word	0x5802541c
 800b4e4:	58025430 	.word	0x58025430
 800b4e8:	58025444 	.word	0x58025444
 800b4ec:	58025458 	.word	0x58025458
 800b4f0:	5802546c 	.word	0x5802546c
 800b4f4:	58025480 	.word	0x58025480
 800b4f8:	58025494 	.word	0x58025494

0800b4fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a42      	ldr	r2, [pc, #264]	@ (800b614 <DMA_CalcBaseAndBitshift+0x118>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d04a      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a41      	ldr	r2, [pc, #260]	@ (800b618 <DMA_CalcBaseAndBitshift+0x11c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d045      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a3f      	ldr	r2, [pc, #252]	@ (800b61c <DMA_CalcBaseAndBitshift+0x120>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d040      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a3e      	ldr	r2, [pc, #248]	@ (800b620 <DMA_CalcBaseAndBitshift+0x124>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d03b      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a3c      	ldr	r2, [pc, #240]	@ (800b624 <DMA_CalcBaseAndBitshift+0x128>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d036      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a3b      	ldr	r2, [pc, #236]	@ (800b628 <DMA_CalcBaseAndBitshift+0x12c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d031      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a39      	ldr	r2, [pc, #228]	@ (800b62c <DMA_CalcBaseAndBitshift+0x130>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d02c      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a38      	ldr	r2, [pc, #224]	@ (800b630 <DMA_CalcBaseAndBitshift+0x134>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d027      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a36      	ldr	r2, [pc, #216]	@ (800b634 <DMA_CalcBaseAndBitshift+0x138>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d022      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a35      	ldr	r2, [pc, #212]	@ (800b638 <DMA_CalcBaseAndBitshift+0x13c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d01d      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a33      	ldr	r2, [pc, #204]	@ (800b63c <DMA_CalcBaseAndBitshift+0x140>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d018      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a32      	ldr	r2, [pc, #200]	@ (800b640 <DMA_CalcBaseAndBitshift+0x144>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d013      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a30      	ldr	r2, [pc, #192]	@ (800b644 <DMA_CalcBaseAndBitshift+0x148>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d00e      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a2f      	ldr	r2, [pc, #188]	@ (800b648 <DMA_CalcBaseAndBitshift+0x14c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d009      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a2d      	ldr	r2, [pc, #180]	@ (800b64c <DMA_CalcBaseAndBitshift+0x150>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d004      	beq.n	800b5a4 <DMA_CalcBaseAndBitshift+0xa8>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a2c      	ldr	r2, [pc, #176]	@ (800b650 <DMA_CalcBaseAndBitshift+0x154>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d101      	bne.n	800b5a8 <DMA_CalcBaseAndBitshift+0xac>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <DMA_CalcBaseAndBitshift+0xae>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d024      	beq.n	800b5f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	3b10      	subs	r3, #16
 800b5b6:	4a27      	ldr	r2, [pc, #156]	@ (800b654 <DMA_CalcBaseAndBitshift+0x158>)
 800b5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5bc:	091b      	lsrs	r3, r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	4a24      	ldr	r2, [pc, #144]	@ (800b658 <DMA_CalcBaseAndBitshift+0x15c>)
 800b5c8:	5cd3      	ldrb	r3, [r2, r3]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d908      	bls.n	800b5e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b65c <DMA_CalcBaseAndBitshift+0x160>)
 800b5de:	4013      	ands	r3, r2
 800b5e0:	1d1a      	adds	r2, r3, #4
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800b5e6:	e00d      	b.n	800b604 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b65c <DMA_CalcBaseAndBitshift+0x160>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b5f6:	e005      	b.n	800b604 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	40020010 	.word	0x40020010
 800b618:	40020028 	.word	0x40020028
 800b61c:	40020040 	.word	0x40020040
 800b620:	40020058 	.word	0x40020058
 800b624:	40020070 	.word	0x40020070
 800b628:	40020088 	.word	0x40020088
 800b62c:	400200a0 	.word	0x400200a0
 800b630:	400200b8 	.word	0x400200b8
 800b634:	40020410 	.word	0x40020410
 800b638:	40020428 	.word	0x40020428
 800b63c:	40020440 	.word	0x40020440
 800b640:	40020458 	.word	0x40020458
 800b644:	40020470 	.word	0x40020470
 800b648:	40020488 	.word	0x40020488
 800b64c:	400204a0 	.word	0x400204a0
 800b650:	400204b8 	.word	0x400204b8
 800b654:	aaaaaaab 	.word	0xaaaaaaab
 800b658:	0801e6e4 	.word	0x0801e6e4
 800b65c:	fffffc00 	.word	0xfffffc00

0800b660 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d120      	bne.n	800b6b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d858      	bhi.n	800b72e <DMA_CheckFifoParam+0xce>
 800b67c:	a201      	add	r2, pc, #4	@ (adr r2, 800b684 <DMA_CheckFifoParam+0x24>)
 800b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b682:	bf00      	nop
 800b684:	0800b695 	.word	0x0800b695
 800b688:	0800b6a7 	.word	0x0800b6a7
 800b68c:	0800b695 	.word	0x0800b695
 800b690:	0800b72f 	.word	0x0800b72f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d048      	beq.n	800b732 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6a4:	e045      	b.n	800b732 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b6ae:	d142      	bne.n	800b736 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6b4:	e03f      	b.n	800b736 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6be:	d123      	bne.n	800b708 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d838      	bhi.n	800b73a <DMA_CheckFifoParam+0xda>
 800b6c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <DMA_CheckFifoParam+0x70>)
 800b6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ce:	bf00      	nop
 800b6d0:	0800b6e1 	.word	0x0800b6e1
 800b6d4:	0800b6e7 	.word	0x0800b6e7
 800b6d8:	0800b6e1 	.word	0x0800b6e1
 800b6dc:	0800b6f9 	.word	0x0800b6f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	73fb      	strb	r3, [r7, #15]
        break;
 800b6e4:	e030      	b.n	800b748 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d025      	beq.n	800b73e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6f6:	e022      	b.n	800b73e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b700:	d11f      	bne.n	800b742 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b706:	e01c      	b.n	800b742 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d902      	bls.n	800b716 <DMA_CheckFifoParam+0xb6>
 800b710:	2b03      	cmp	r3, #3
 800b712:	d003      	beq.n	800b71c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b714:	e018      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	73fb      	strb	r3, [r7, #15]
        break;
 800b71a:	e015      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00e      	beq.n	800b746 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	73fb      	strb	r3, [r7, #15]
    break;
 800b72c:	e00b      	b.n	800b746 <DMA_CheckFifoParam+0xe6>
        break;
 800b72e:	bf00      	nop
 800b730:	e00a      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        break;
 800b732:	bf00      	nop
 800b734:	e008      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        break;
 800b736:	bf00      	nop
 800b738:	e006      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        break;
 800b73a:	bf00      	nop
 800b73c:	e004      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        break;
 800b73e:	bf00      	nop
 800b740:	e002      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
        break;
 800b742:	bf00      	nop
 800b744:	e000      	b.n	800b748 <DMA_CheckFifoParam+0xe8>
    break;
 800b746:	bf00      	nop
    }
  }

  return status;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop

0800b758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a38      	ldr	r2, [pc, #224]	@ (800b84c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d022      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a36      	ldr	r2, [pc, #216]	@ (800b850 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d01d      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a35      	ldr	r2, [pc, #212]	@ (800b854 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d018      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a33      	ldr	r2, [pc, #204]	@ (800b858 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a32      	ldr	r2, [pc, #200]	@ (800b85c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00e      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a30      	ldr	r2, [pc, #192]	@ (800b860 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d009      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a2f      	ldr	r2, [pc, #188]	@ (800b864 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b868 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d101      	bne.n	800b7ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01a      	beq.n	800b7f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	3b08      	subs	r3, #8
 800b7c8:	4a28      	ldr	r2, [pc, #160]	@ (800b86c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	091b      	lsrs	r3, r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	4b26      	ldr	r3, [pc, #152]	@ (800b870 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	461a      	mov	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a24      	ldr	r2, [pc, #144]	@ (800b874 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b7e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f003 031f 	and.w	r3, r3, #31
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	409a      	lsls	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b7f4:	e024      	b.n	800b840 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	3b10      	subs	r3, #16
 800b7fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b878 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b800:	fba2 2303 	umull	r2, r3, r2, r3
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	4a1c      	ldr	r2, [pc, #112]	@ (800b87c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d806      	bhi.n	800b81e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4a1b      	ldr	r2, [pc, #108]	@ (800b880 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d902      	bls.n	800b81e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3308      	adds	r3, #8
 800b81c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4b18      	ldr	r3, [pc, #96]	@ (800b884 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a16      	ldr	r2, [pc, #88]	@ (800b888 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b830:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f003 031f 	and.w	r3, r3, #31
 800b838:	2201      	movs	r2, #1
 800b83a:	409a      	lsls	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b840:	bf00      	nop
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	58025408 	.word	0x58025408
 800b850:	5802541c 	.word	0x5802541c
 800b854:	58025430 	.word	0x58025430
 800b858:	58025444 	.word	0x58025444
 800b85c:	58025458 	.word	0x58025458
 800b860:	5802546c 	.word	0x5802546c
 800b864:	58025480 	.word	0x58025480
 800b868:	58025494 	.word	0x58025494
 800b86c:	cccccccd 	.word	0xcccccccd
 800b870:	16009600 	.word	0x16009600
 800b874:	58025880 	.word	0x58025880
 800b878:	aaaaaaab 	.word	0xaaaaaaab
 800b87c:	400204b8 	.word	0x400204b8
 800b880:	4002040f 	.word	0x4002040f
 800b884:	10008200 	.word	0x10008200
 800b888:	40020880 	.word	0x40020880

0800b88c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d04a      	beq.n	800b938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	d847      	bhi.n	800b938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a25      	ldr	r2, [pc, #148]	@ (800b944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d022      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a24      	ldr	r2, [pc, #144]	@ (800b948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d01d      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a22      	ldr	r2, [pc, #136]	@ (800b94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d018      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a21      	ldr	r2, [pc, #132]	@ (800b950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d013      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d00e      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a1e      	ldr	r2, [pc, #120]	@ (800b958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d009      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b95c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d004      	beq.n	800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d101      	bne.n	800b8fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e000      	b.n	800b8fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4b17      	ldr	r3, [pc, #92]	@ (800b964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	461a      	mov	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a15      	ldr	r2, [pc, #84]	@ (800b968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b914:	671a      	str	r2, [r3, #112]	@ 0x70
 800b916:	e009      	b.n	800b92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4b14      	ldr	r3, [pc, #80]	@ (800b96c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	461a      	mov	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a11      	ldr	r2, [pc, #68]	@ (800b970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b92a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3b01      	subs	r3, #1
 800b930:	2201      	movs	r2, #1
 800b932:	409a      	lsls	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	58025408 	.word	0x58025408
 800b948:	5802541c 	.word	0x5802541c
 800b94c:	58025430 	.word	0x58025430
 800b950:	58025444 	.word	0x58025444
 800b954:	58025458 	.word	0x58025458
 800b958:	5802546c 	.word	0x5802546c
 800b95c:	58025480 	.word	0x58025480
 800b960:	58025494 	.word	0x58025494
 800b964:	1600963f 	.word	0x1600963f
 800b968:	58025940 	.word	0x58025940
 800b96c:	1000823f 	.word	0x1000823f
 800b970:	40020940 	.word	0x40020940

0800b974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b974:	b480      	push	{r7}
 800b976:	b089      	sub	sp, #36	@ 0x24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b97e:	2300      	movs	r3, #0
 800b980:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b982:	4b86      	ldr	r3, [pc, #536]	@ (800bb9c <HAL_GPIO_Init+0x228>)
 800b984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b986:	e18c      	b.n	800bca2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	2101      	movs	r1, #1
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	fa01 f303 	lsl.w	r3, r1, r3
 800b994:	4013      	ands	r3, r2
 800b996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 817e 	beq.w	800bc9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f003 0303 	and.w	r3, r3, #3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d005      	beq.n	800b9b8 <HAL_GPIO_Init+0x44>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d130      	bne.n	800ba1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	2203      	movs	r2, #3
 800b9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c8:	43db      	mvns	r3, r3
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	68da      	ldr	r2, [r3, #12]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9dc:	69ba      	ldr	r2, [r7, #24]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f6:	43db      	mvns	r3, r3
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	091b      	lsrs	r3, r3, #4
 800ba04:	f003 0201 	and.w	r2, r3, #1
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	69ba      	ldr	r2, [r7, #24]
 800ba18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f003 0303 	and.w	r3, r3, #3
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d017      	beq.n	800ba56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	005b      	lsls	r3, r3, #1
 800ba30:	2203      	movs	r2, #3
 800ba32:	fa02 f303 	lsl.w	r3, r2, r3
 800ba36:	43db      	mvns	r3, r3
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f003 0303 	and.w	r3, r3, #3
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d123      	bne.n	800baaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	08da      	lsrs	r2, r3, #3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3208      	adds	r2, #8
 800ba6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	f003 0307 	and.w	r3, r3, #7
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	220f      	movs	r2, #15
 800ba7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7e:	43db      	mvns	r3, r3
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	4013      	ands	r3, r2
 800ba84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	691a      	ldr	r2, [r3, #16]
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	f003 0307 	and.w	r3, r3, #7
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	fa02 f303 	lsl.w	r3, r2, r3
 800ba96:	69ba      	ldr	r2, [r7, #24]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	08da      	lsrs	r2, r3, #3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3208      	adds	r2, #8
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	2203      	movs	r2, #3
 800bab6:	fa02 f303 	lsl.w	r3, r2, r3
 800baba:	43db      	mvns	r3, r3
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	4013      	ands	r3, r2
 800bac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f003 0203 	and.w	r2, r3, #3
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	fa02 f303 	lsl.w	r3, r2, r3
 800bad2:	69ba      	ldr	r2, [r7, #24]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 80d8 	beq.w	800bc9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800baec:	4b2c      	ldr	r3, [pc, #176]	@ (800bba0 <HAL_GPIO_Init+0x22c>)
 800baee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800baf2:	4a2b      	ldr	r2, [pc, #172]	@ (800bba0 <HAL_GPIO_Init+0x22c>)
 800baf4:	f043 0302 	orr.w	r3, r3, #2
 800baf8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800bafc:	4b28      	ldr	r3, [pc, #160]	@ (800bba0 <HAL_GPIO_Init+0x22c>)
 800bafe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bb0a:	4a26      	ldr	r2, [pc, #152]	@ (800bba4 <HAL_GPIO_Init+0x230>)
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	089b      	lsrs	r3, r3, #2
 800bb10:	3302      	adds	r3, #2
 800bb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	220f      	movs	r2, #15
 800bb22:	fa02 f303 	lsl.w	r3, r2, r3
 800bb26:	43db      	mvns	r3, r3
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a1d      	ldr	r2, [pc, #116]	@ (800bba8 <HAL_GPIO_Init+0x234>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d04a      	beq.n	800bbcc <HAL_GPIO_Init+0x258>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a1c      	ldr	r2, [pc, #112]	@ (800bbac <HAL_GPIO_Init+0x238>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d02b      	beq.n	800bb96 <HAL_GPIO_Init+0x222>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a1b      	ldr	r2, [pc, #108]	@ (800bbb0 <HAL_GPIO_Init+0x23c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d025      	beq.n	800bb92 <HAL_GPIO_Init+0x21e>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a1a      	ldr	r2, [pc, #104]	@ (800bbb4 <HAL_GPIO_Init+0x240>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d01f      	beq.n	800bb8e <HAL_GPIO_Init+0x21a>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a19      	ldr	r2, [pc, #100]	@ (800bbb8 <HAL_GPIO_Init+0x244>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d019      	beq.n	800bb8a <HAL_GPIO_Init+0x216>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <HAL_GPIO_Init+0x248>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d013      	beq.n	800bb86 <HAL_GPIO_Init+0x212>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a17      	ldr	r2, [pc, #92]	@ (800bbc0 <HAL_GPIO_Init+0x24c>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d00d      	beq.n	800bb82 <HAL_GPIO_Init+0x20e>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a16      	ldr	r2, [pc, #88]	@ (800bbc4 <HAL_GPIO_Init+0x250>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d007      	beq.n	800bb7e <HAL_GPIO_Init+0x20a>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a15      	ldr	r2, [pc, #84]	@ (800bbc8 <HAL_GPIO_Init+0x254>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d101      	bne.n	800bb7a <HAL_GPIO_Init+0x206>
 800bb76:	2309      	movs	r3, #9
 800bb78:	e029      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb7a:	230a      	movs	r3, #10
 800bb7c:	e027      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb7e:	2307      	movs	r3, #7
 800bb80:	e025      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb82:	2306      	movs	r3, #6
 800bb84:	e023      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb86:	2305      	movs	r3, #5
 800bb88:	e021      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb8a:	2304      	movs	r3, #4
 800bb8c:	e01f      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e01d      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e01b      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e019      	b.n	800bbce <HAL_GPIO_Init+0x25a>
 800bb9a:	bf00      	nop
 800bb9c:	58000080 	.word	0x58000080
 800bba0:	58024400 	.word	0x58024400
 800bba4:	58000400 	.word	0x58000400
 800bba8:	58020000 	.word	0x58020000
 800bbac:	58020400 	.word	0x58020400
 800bbb0:	58020800 	.word	0x58020800
 800bbb4:	58020c00 	.word	0x58020c00
 800bbb8:	58021000 	.word	0x58021000
 800bbbc:	58021400 	.word	0x58021400
 800bbc0:	58021800 	.word	0x58021800
 800bbc4:	58021c00 	.word	0x58021c00
 800bbc8:	58022400 	.word	0x58022400
 800bbcc:	2300      	movs	r3, #0
 800bbce:	69fa      	ldr	r2, [r7, #28]
 800bbd0:	f002 0203 	and.w	r2, r2, #3
 800bbd4:	0092      	lsls	r2, r2, #2
 800bbd6:	4093      	lsls	r3, r2
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bbde:	4938      	ldr	r1, [pc, #224]	@ (800bcc0 <HAL_GPIO_Init+0x34c>)
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	089b      	lsrs	r3, r3, #2
 800bbe4:	3302      	adds	r3, #2
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bbec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	43db      	mvns	r3, r3
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d003      	beq.n	800bc12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800bc0a:	69ba      	ldr	r2, [r7, #24]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bc12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	43db      	mvns	r3, r3
 800bc26:	69ba      	ldr	r2, [r7, #24]
 800bc28:	4013      	ands	r3, r2
 800bc2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bc40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	43db      	mvns	r3, r3
 800bc52:	69ba      	ldr	r2, [r7, #24]
 800bc54:	4013      	ands	r3, r2
 800bc56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	43db      	mvns	r3, r3
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	4013      	ands	r3, r2
 800bc80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f47f ae6b 	bne.w	800b988 <HAL_GPIO_Init+0x14>
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	bf00      	nop
 800bcb6:	3724      	adds	r7, #36	@ 0x24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	58000400 	.word	0x58000400

0800bcc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691a      	ldr	r2, [r3, #16]
 800bcd4:	887b      	ldrh	r3, [r7, #2]
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	73fb      	strb	r3, [r7, #15]
 800bce0:	e001      	b.n	800bce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	807b      	strh	r3, [r7, #2]
 800bd00:	4613      	mov	r3, r2
 800bd02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bd04:	787b      	ldrb	r3, [r7, #1]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd0a:	887a      	ldrh	r2, [r7, #2]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bd10:	e003      	b.n	800bd1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bd12:	887b      	ldrh	r3, [r7, #2]
 800bd14:	041a      	lsls	r2, r3, #16
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	619a      	str	r2, [r3, #24]
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800bd30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd34:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7f5 facd 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e08b      	b.n	800be86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7f6 fc16 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2224      	movs	r2, #36	@ 0x24
 800bd8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0201 	bic.w	r2, r2, #1
 800bd9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bdac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	689a      	ldr	r2, [r3, #8]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bdbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d107      	bne.n	800bdd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bdd2:	609a      	str	r2, [r3, #8]
 800bdd4:	e006      	b.n	800bde4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800bde2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d108      	bne.n	800bdfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdfa:	605a      	str	r2, [r3, #4]
 800bdfc:	e007      	b.n	800be0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6859      	ldr	r1, [r3, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b1d      	ldr	r3, [pc, #116]	@ (800be90 <HAL_I2C_Init+0x134>)
 800be1a:	430b      	orrs	r3, r1
 800be1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800be2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691a      	ldr	r2, [r3, #16]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	69d9      	ldr	r1, [r3, #28]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a1a      	ldr	r2, [r3, #32]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f042 0201 	orr.w	r2, r2, #1
 800be66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2220      	movs	r2, #32
 800be72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	02008000 	.word	0x02008000

0800be94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b20      	cmp	r3, #32
 800bea8:	d138      	bne.n	800bf1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d101      	bne.n	800beb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800beb4:	2302      	movs	r3, #2
 800beb6:	e032      	b.n	800bf1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2224      	movs	r2, #36	@ 0x24
 800bec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 0201 	bic.w	r2, r2, #1
 800bed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6819      	ldr	r1, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e000      	b.n	800bf1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf1c:	2302      	movs	r3, #2
  }
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b085      	sub	sp, #20
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d139      	bne.n	800bfb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d101      	bne.n	800bf4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	e033      	b.n	800bfb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2224      	movs	r2, #36	@ 0x24
 800bf5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0201 	bic.w	r2, r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bf7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f042 0201 	orr.w	r2, r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e000      	b.n	800bfb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bfb4:	2302      	movs	r3, #2
  }
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b086      	sub	sp, #24
 800bfc6:	af02      	add	r7, sp, #8
 800bfc8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e0fe      	b.n	800c1d2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f00c fb5f 	bl	80186ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2203      	movs	r2, #3
 800bff2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f008 ff1b 	bl	8014e36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7c1a      	ldrb	r2, [r3, #16]
 800c008:	f88d 2000 	strb.w	r2, [sp]
 800c00c:	3304      	adds	r3, #4
 800c00e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c010:	f008 fdec 	bl	8014bec <USB_CoreInit>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d005      	beq.n	800c026 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2202      	movs	r2, #2
 800c01e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e0d5      	b.n	800c1d2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2100      	movs	r1, #0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f008 ff13 	bl	8014e58 <USB_SetCurrentMode>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2202      	movs	r2, #2
 800c03c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e0c6      	b.n	800c1d2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c044:	2300      	movs	r3, #0
 800c046:	73fb      	strb	r3, [r7, #15]
 800c048:	e04a      	b.n	800c0e0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c04a:	7bfa      	ldrb	r2, [r7, #15]
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	4613      	mov	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	3315      	adds	r3, #21
 800c05a:	2201      	movs	r2, #1
 800c05c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c05e:	7bfa      	ldrb	r2, [r7, #15]
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	3314      	adds	r3, #20
 800c06e:	7bfa      	ldrb	r2, [r7, #15]
 800c070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c072:	7bfa      	ldrb	r2, [r7, #15]
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	b298      	uxth	r0, r3
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	440b      	add	r3, r1
 800c084:	332e      	adds	r3, #46	@ 0x2e
 800c086:	4602      	mov	r2, r0
 800c088:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c08a:	7bfa      	ldrb	r2, [r7, #15]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	3318      	adds	r3, #24
 800c09a:	2200      	movs	r2, #0
 800c09c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c09e:	7bfa      	ldrb	r2, [r7, #15]
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	331c      	adds	r3, #28
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c0b2:	7bfa      	ldrb	r2, [r7, #15]
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	440b      	add	r3, r1
 800c0c0:	3320      	adds	r3, #32
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c0c6:	7bfa      	ldrb	r2, [r7, #15]
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	00db      	lsls	r3, r3, #3
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3324      	adds	r3, #36	@ 0x24
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	73fb      	strb	r3, [r7, #15]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	791b      	ldrb	r3, [r3, #4]
 800c0e4:	7bfa      	ldrb	r2, [r7, #15]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d3af      	bcc.n	800c04a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
 800c0ee:	e044      	b.n	800c17a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c0f0:	7bfa      	ldrb	r2, [r7, #15]
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c102:	2200      	movs	r2, #0
 800c104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c106:	7bfa      	ldrb	r2, [r7, #15]
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	4613      	mov	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	440b      	add	r3, r1
 800c114:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c118:	7bfa      	ldrb	r2, [r7, #15]
 800c11a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c11c:	7bfa      	ldrb	r2, [r7, #15]
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c12e:	2200      	movs	r2, #0
 800c130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c132:	7bfa      	ldrb	r2, [r7, #15]
 800c134:	6879      	ldr	r1, [r7, #4]
 800c136:	4613      	mov	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	440b      	add	r3, r1
 800c140:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c148:	7bfa      	ldrb	r2, [r7, #15]
 800c14a:	6879      	ldr	r1, [r7, #4]
 800c14c:	4613      	mov	r3, r2
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	4413      	add	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	440b      	add	r3, r1
 800c156:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c15e:	7bfa      	ldrb	r2, [r7, #15]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	4613      	mov	r3, r2
 800c164:	00db      	lsls	r3, r3, #3
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	440b      	add	r3, r1
 800c16c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	3301      	adds	r3, #1
 800c178:	73fb      	strb	r3, [r7, #15]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	791b      	ldrb	r3, [r3, #4]
 800c17e:	7bfa      	ldrb	r2, [r7, #15]
 800c180:	429a      	cmp	r2, r3
 800c182:	d3b5      	bcc.n	800c0f0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7c1a      	ldrb	r2, [r3, #16]
 800c18c:	f88d 2000 	strb.w	r2, [sp]
 800c190:	3304      	adds	r3, #4
 800c192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c194:	f008 feac 	bl	8014ef0 <USB_DevInit>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d005      	beq.n	800c1aa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e013      	b.n	800c1d2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7b1b      	ldrb	r3, [r3, #12]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d102      	bne.n	800c1c6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f96d 	bl	800d4a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f009 feeb 	bl	8015fa6 <USB_DevDisconnect>

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d101      	bne.n	800c1f6 <HAL_PCD_Start+0x1c>
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	e022      	b.n	800c23c <HAL_PCD_Start+0x62>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d105      	bne.n	800c21e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c216:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	f008 fdf6 	bl	8014e14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f009 fe99 	bl	8015f64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b08d      	sub	sp, #52	@ 0x34
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f009 ff57 	bl	801610e <USB_GetMode>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	f040 84b9 	bne.w	800cbda <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f009 febb 	bl	8015fe8 <USB_ReadInterrupts>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 84af 	beq.w	800cbd8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	0a1b      	lsrs	r3, r3, #8
 800c284:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f009 fea8 	bl	8015fe8 <USB_ReadInterrupts>
 800c298:	4603      	mov	r3, r0
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d107      	bne.n	800c2b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	695a      	ldr	r2, [r3, #20]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f002 0202 	and.w	r2, r2, #2
 800c2b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f009 fe96 	bl	8015fe8 <USB_ReadInterrupts>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	f003 0310 	and.w	r3, r3, #16
 800c2c2:	2b10      	cmp	r3, #16
 800c2c4:	d161      	bne.n	800c38a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	699a      	ldr	r2, [r3, #24]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0210 	bic.w	r2, r2, #16
 800c2d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	f003 020f 	and.w	r2, r3, #15
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	4413      	add	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	0c5b      	lsrs	r3, r3, #17
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d124      	bne.n	800c34c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c302:	69ba      	ldr	r2, [r7, #24]
 800c304:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c308:	4013      	ands	r3, r2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d035      	beq.n	800c37a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	091b      	lsrs	r3, r3, #4
 800c316:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	6a38      	ldr	r0, [r7, #32]
 800c322:	f009 fccd 	bl	8015cc0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	091b      	lsrs	r3, r3, #4
 800c32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c332:	441a      	add	r2, r3
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	695a      	ldr	r2, [r3, #20]
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	091b      	lsrs	r3, r3, #4
 800c340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c344:	441a      	add	r2, r3
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	615a      	str	r2, [r3, #20]
 800c34a:	e016      	b.n	800c37a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	0c5b      	lsrs	r3, r3, #17
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	2b06      	cmp	r3, #6
 800c356:	d110      	bne.n	800c37a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c35e:	2208      	movs	r2, #8
 800c360:	4619      	mov	r1, r3
 800c362:	6a38      	ldr	r0, [r7, #32]
 800c364:	f009 fcac 	bl	8015cc0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	091b      	lsrs	r3, r3, #4
 800c370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c374:	441a      	add	r2, r3
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	699a      	ldr	r2, [r3, #24]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f042 0210 	orr.w	r2, r2, #16
 800c388:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4618      	mov	r0, r3
 800c390:	f009 fe2a 	bl	8015fe8 <USB_ReadInterrupts>
 800c394:	4603      	mov	r3, r0
 800c396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c39a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c39e:	f040 80a7 	bne.w	800c4f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f009 fe2f 	bl	801600e <USB_ReadDevAllOutEpInterrupt>
 800c3b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c3b2:	e099      	b.n	800c4e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 808e 	beq.w	800c4dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f009 fe53 	bl	8016076 <USB_ReadDevOutEPInterrupt>
 800c3d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00c      	beq.n	800c3f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	015a      	lsls	r2, r3, #5
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c3ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fecf 	bl	800d194 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00c      	beq.n	800c41a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c40c:	461a      	mov	r2, r3
 800c40e:	2308      	movs	r3, #8
 800c410:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 ffa5 	bl	800d364 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f003 0310 	and.w	r3, r3, #16
 800c420:	2b00      	cmp	r3, #0
 800c422:	d008      	beq.n	800c436 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c430:	461a      	mov	r2, r3
 800c432:	2310      	movs	r3, #16
 800c434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f003 0302 	and.w	r3, r3, #2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d030      	beq.n	800c4a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c448:	2b80      	cmp	r3, #128	@ 0x80
 800c44a:	d109      	bne.n	800c460 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c45a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c45e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c462:	4613      	mov	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	4413      	add	r3, r2
 800c472:	3304      	adds	r3, #4
 800c474:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	78db      	ldrb	r3, [r3, #3]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d108      	bne.n	800c490 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2200      	movs	r2, #0
 800c482:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c486:	b2db      	uxtb	r3, r3
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f00c fa06 	bl	801889c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c49c:	461a      	mov	r2, r3
 800c49e:	2302      	movs	r3, #2
 800c4a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f003 0320 	and.w	r3, r3, #32
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d008      	beq.n	800c4be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	015a      	lsls	r2, r3, #5
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	2320      	movs	r3, #32
 800c4bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d009      	beq.n	800c4dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c4da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	3301      	adds	r3, #1
 800c4e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e4:	085b      	lsrs	r3, r3, #1
 800c4e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f47f af62 	bne.w	800c3b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f009 fd77 	bl	8015fe8 <USB_ReadInterrupts>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c504:	f040 80db 	bne.w	800c6be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f009 fd98 	bl	8016042 <USB_ReadDevAllInEpInterrupt>
 800c512:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c514:	2300      	movs	r3, #0
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c518:	e0cd      	b.n	800c6b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 80c2 	beq.w	800c6aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c52c:	b2d2      	uxtb	r2, r2
 800c52e:	4611      	mov	r1, r2
 800c530:	4618      	mov	r0, r3
 800c532:	f009 fdbe 	bl	80160b2 <USB_ReadDevInEPInterrupt>
 800c536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d057      	beq.n	800c5f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	f003 030f 	and.w	r3, r3, #15
 800c548:	2201      	movs	r2, #1
 800c54a:	fa02 f303 	lsl.w	r3, r2, r3
 800c54e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	43db      	mvns	r3, r3
 800c55c:	69f9      	ldr	r1, [r7, #28]
 800c55e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c562:	4013      	ands	r3, r2
 800c564:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c572:	461a      	mov	r2, r3
 800c574:	2301      	movs	r3, #1
 800c576:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	799b      	ldrb	r3, [r3, #6]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d132      	bne.n	800c5e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c584:	4613      	mov	r3, r2
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	3320      	adds	r3, #32
 800c590:	6819      	ldr	r1, [r3, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c596:	4613      	mov	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	4413      	add	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4403      	add	r3, r0
 800c5a0:	331c      	adds	r3, #28
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4419      	add	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4403      	add	r3, r0
 800c5b4:	3320      	adds	r3, #32
 800c5b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d113      	bne.n	800c5e6 <HAL_PCD_IRQHandler+0x3a2>
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	440b      	add	r3, r1
 800c5cc:	3324      	adds	r3, #36	@ 0x24
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d108      	bne.n	800c5e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5de:	461a      	mov	r2, r3
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	f009 fdc7 	bl	8016174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f00c f8d0 	bl	8018792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f003 0308 	and.w	r3, r3, #8
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c608:	461a      	mov	r2, r3
 800c60a:	2308      	movs	r3, #8
 800c60c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c624:	461a      	mov	r2, r3
 800c626:	2310      	movs	r3, #16
 800c628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	d008      	beq.n	800c646 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c640:	461a      	mov	r2, r3
 800c642:	2340      	movs	r3, #64	@ 0x40
 800c644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f003 0302 	and.w	r3, r3, #2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d023      	beq.n	800c698 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c652:	6a38      	ldr	r0, [r7, #32]
 800c654:	f008 fdaa 	bl	80151ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c65a:	4613      	mov	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	4413      	add	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	3310      	adds	r3, #16
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	4413      	add	r3, r2
 800c668:	3304      	adds	r3, #4
 800c66a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	78db      	ldrb	r3, [r3, #3]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d108      	bne.n	800c686 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2200      	movs	r2, #0
 800c678:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f00c f91d 	bl	80188c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c692:	461a      	mov	r2, r3
 800c694:	2302      	movs	r3, #2
 800c696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c6a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fce8 	bl	800d07a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b2:	085b      	lsrs	r3, r3, #1
 800c6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f47f af2e 	bne.w	800c51a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f009 fc90 	bl	8015fe8 <USB_ReadInterrupts>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6d2:	d122      	bne.n	800c71a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	69fa      	ldr	r2, [r7, #28]
 800c6de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6e2:	f023 0301 	bic.w	r3, r3, #1
 800c6e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d108      	bne.n	800c704 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fef3 	bl	800d4e8 <HAL_PCDEx_LPM_Callback>
 800c702:	e002      	b.n	800c70a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f00c f8bb 	bl	8018880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	695a      	ldr	r2, [r3, #20]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f009 fc62 	bl	8015fe8 <USB_ReadInterrupts>
 800c724:	4603      	mov	r3, r0
 800c726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c72a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c72e:	d112      	bne.n	800c756 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f003 0301 	and.w	r3, r3, #1
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d102      	bne.n	800c746 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f00c f877 	bl	8018834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	695a      	ldr	r2, [r3, #20]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c754:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f009 fc44 	bl	8015fe8 <USB_ReadInterrupts>
 800c760:	4603      	mov	r3, r0
 800c762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c76a:	d121      	bne.n	800c7b0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	695a      	ldr	r2, [r3, #20]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c77a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c782:	2b00      	cmp	r3, #0
 800c784:	d111      	bne.n	800c7aa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c794:	089b      	lsrs	r3, r3, #2
 800c796:	f003 020f 	and.w	r2, r3, #15
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fea0 	bl	800d4e8 <HAL_PCDEx_LPM_Callback>
 800c7a8:	e002      	b.n	800c7b0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f00c f842 	bl	8018834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f009 fc17 	bl	8015fe8 <USB_ReadInterrupts>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c7c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7c4:	f040 80b7 	bne.w	800c936 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7d6:	f023 0301 	bic.w	r3, r3, #1
 800c7da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2110      	movs	r1, #16
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f008 fce2 	bl	80151ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ec:	e046      	b.n	800c87c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c800:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c812:	0151      	lsls	r1, r2, #5
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	440a      	add	r2, r1
 800c818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c81c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c820:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c82e:	461a      	mov	r2, r3
 800c830:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c834:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c846:	0151      	lsls	r1, r2, #5
 800c848:	69fa      	ldr	r2, [r7, #28]
 800c84a:	440a      	add	r2, r1
 800c84c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c850:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c866:	0151      	lsls	r1, r2, #5
 800c868:	69fa      	ldr	r2, [r7, #28]
 800c86a:	440a      	add	r2, r1
 800c86c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c870:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c874:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c878:	3301      	adds	r3, #1
 800c87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	791b      	ldrb	r3, [r3, #4]
 800c880:	461a      	mov	r2, r3
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	4293      	cmp	r3, r2
 800c886:	d3b2      	bcc.n	800c7ee <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c896:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c89a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	7bdb      	ldrb	r3, [r3, #15]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d016      	beq.n	800c8d2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8b4:	f043 030b 	orr.w	r3, r3, #11
 800c8b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8c4:	69fa      	ldr	r2, [r7, #28]
 800c8c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8ca:	f043 030b 	orr.w	r3, r3, #11
 800c8ce:	6453      	str	r3, [r2, #68]	@ 0x44
 800c8d0:	e015      	b.n	800c8fe <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8d8:	695a      	ldr	r2, [r3, #20]
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8f8:	f043 030b 	orr.w	r3, r3, #11
 800c8fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c90c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c910:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c920:	461a      	mov	r2, r3
 800c922:	f009 fc27 	bl	8016174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	695a      	ldr	r2, [r3, #20]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f009 fb54 	bl	8015fe8 <USB_ReadInterrupts>
 800c940:	4603      	mov	r3, r0
 800c942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c94a:	d123      	bne.n	800c994 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4618      	mov	r0, r3
 800c952:	f009 fbeb 	bl	801612c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f008 fc9f 	bl	801529e <USB_GetDevSpeed>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681c      	ldr	r4, [r3, #0]
 800c96c:	f001 fd1c 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 800c970:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c976:	461a      	mov	r2, r3
 800c978:	4620      	mov	r0, r4
 800c97a:	f008 f9a9 	bl	8014cd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f00b ff2f 	bl	80187e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	695a      	ldr	r2, [r3, #20]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c992:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4618      	mov	r0, r3
 800c99a:	f009 fb25 	bl	8015fe8 <USB_ReadInterrupts>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d10a      	bne.n	800c9be <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f00b ff0c 	bl	80187c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	695a      	ldr	r2, [r3, #20]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f002 0208 	and.w	r2, r2, #8
 800c9bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f009 fb10 	bl	8015fe8 <USB_ReadInterrupts>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ce:	2b80      	cmp	r3, #128	@ 0x80
 800c9d0:	d123      	bne.n	800ca1a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c9de:	2301      	movs	r3, #1
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9e2:	e014      	b.n	800ca0e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	440b      	add	r3, r1
 800c9f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d105      	bne.n	800ca08 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fb08 	bl	800d018 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	461a      	mov	r2, r3
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d3e4      	bcc.n	800c9e4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f009 fae2 	bl	8015fe8 <USB_ReadInterrupts>
 800ca24:	4603      	mov	r3, r0
 800ca26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca2e:	d13c      	bne.n	800caaa <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca30:	2301      	movs	r3, #1
 800ca32:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca34:	e02b      	b.n	800ca8e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	440b      	add	r3, r1
 800ca54:	3318      	adds	r3, #24
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d115      	bne.n	800ca88 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ca5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da12      	bge.n	800ca88 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ca62:	6879      	ldr	r1, [r7, #4]
 800ca64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca66:	4613      	mov	r3, r2
 800ca68:	00db      	lsls	r3, r3, #3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	440b      	add	r3, r1
 800ca70:	3317      	adds	r3, #23
 800ca72:	2201      	movs	r2, #1
 800ca74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fac8 	bl	800d018 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	791b      	ldrb	r3, [r3, #4]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d3cd      	bcc.n	800ca36 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	695a      	ldr	r2, [r3, #20]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800caa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4618      	mov	r0, r3
 800cab0:	f009 fa9a 	bl	8015fe8 <USB_ReadInterrupts>
 800cab4:	4603      	mov	r3, r0
 800cab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800caba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cabe:	d156      	bne.n	800cb6e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cac0:	2301      	movs	r3, #1
 800cac2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac4:	e045      	b.n	800cb52 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cada:	4613      	mov	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	440b      	add	r3, r1
 800cae4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d12e      	bne.n	800cb4c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800caee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da2b      	bge.n	800cb4c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800cb00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d121      	bne.n	800cb4c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800cb08:	6879      	ldr	r1, [r7, #4]
 800cb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	440b      	add	r3, r1
 800cb16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800cb2a:	6a3b      	ldr	r3, [r7, #32]
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cb48:	6053      	str	r3, [r2, #4]
            break;
 800cb4a:	e008      	b.n	800cb5e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4e:	3301      	adds	r3, #1
 800cb50:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	791b      	ldrb	r3, [r3, #4]
 800cb56:	461a      	mov	r2, r3
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d3b3      	bcc.n	800cac6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	695a      	ldr	r2, [r3, #20]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800cb6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f009 fa38 	bl	8015fe8 <USB_ReadInterrupts>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb82:	d10a      	bne.n	800cb9a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f00b fead 	bl	80188e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	695a      	ldr	r2, [r3, #20]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800cb98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f009 fa22 	bl	8015fe8 <USB_ReadInterrupts>
 800cba4:	4603      	mov	r3, r0
 800cba6:	f003 0304 	and.w	r3, r3, #4
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d115      	bne.n	800cbda <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	f003 0304 	and.w	r3, r3, #4
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f00b fe9d 	bl	8018900 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	6859      	ldr	r1, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	69ba      	ldr	r2, [r7, #24]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	605a      	str	r2, [r3, #4]
 800cbd6:	e000      	b.n	800cbda <HAL_PCD_IRQHandler+0x996>
      return;
 800cbd8:	bf00      	nop
    }
  }
}
 800cbda:	3734      	adds	r7, #52	@ 0x34
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd90      	pop	{r4, r7, pc}

0800cbe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d101      	bne.n	800cbfa <HAL_PCD_SetAddress+0x1a>
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	e012      	b.n	800cc20 <HAL_PCD_SetAddress+0x40>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	78fa      	ldrb	r2, [r7, #3]
 800cc06:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	78fa      	ldrb	r2, [r7, #3]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f009 f981 	bl	8015f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	4608      	mov	r0, r1
 800cc32:	4611      	mov	r1, r2
 800cc34:	461a      	mov	r2, r3
 800cc36:	4603      	mov	r3, r0
 800cc38:	70fb      	strb	r3, [r7, #3]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	803b      	strh	r3, [r7, #0]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cc46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	da0f      	bge.n	800cc6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	f003 020f 	and.w	r2, r3, #15
 800cc54:	4613      	mov	r3, r2
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	4413      	add	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	4413      	add	r3, r2
 800cc62:	3304      	adds	r3, #4
 800cc64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	705a      	strb	r2, [r3, #1]
 800cc6c:	e00f      	b.n	800cc8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	f003 020f 	and.w	r2, r3, #15
 800cc74:	4613      	mov	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	3304      	adds	r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cc8e:	78fb      	ldrb	r3, [r7, #3]
 800cc90:	f003 030f 	and.w	r3, r3, #15
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cc9a:	883a      	ldrh	r2, [r7, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	78ba      	ldrb	r2, [r7, #2]
 800cca4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d004      	beq.n	800ccb8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ccb8:	78bb      	ldrb	r3, [r7, #2]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d102      	bne.n	800ccc4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d101      	bne.n	800ccd2 <HAL_PCD_EP_Open+0xaa>
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e00e      	b.n	800ccf0 <HAL_PCD_EP_Open+0xc8>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68f9      	ldr	r1, [r7, #12]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f008 fb01 	bl	80152e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ccee:	7afb      	ldrb	r3, [r7, #11]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	da0f      	bge.n	800cd2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	f003 020f 	and.w	r2, r3, #15
 800cd12:	4613      	mov	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	3310      	adds	r3, #16
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	4413      	add	r3, r2
 800cd20:	3304      	adds	r3, #4
 800cd22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2201      	movs	r2, #1
 800cd28:	705a      	strb	r2, [r3, #1]
 800cd2a:	e00f      	b.n	800cd4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd2c:	78fb      	ldrb	r3, [r7, #3]
 800cd2e:	f003 020f 	and.w	r2, r3, #15
 800cd32:	4613      	mov	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	4413      	add	r3, r2
 800cd42:	3304      	adds	r3, #4
 800cd44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd4c:	78fb      	ldrb	r3, [r7, #3]
 800cd4e:	f003 030f 	and.w	r3, r3, #15
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d101      	bne.n	800cd66 <HAL_PCD_EP_Close+0x6e>
 800cd62:	2302      	movs	r3, #2
 800cd64:	e00e      	b.n	800cd84 <HAL_PCD_EP_Close+0x8c>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f008 fb3f 	bl	80153f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	607a      	str	r2, [r7, #4]
 800cd96:	603b      	str	r3, [r7, #0]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd9c:	7afb      	ldrb	r3, [r7, #11]
 800cd9e:	f003 020f 	and.w	r2, r3, #15
 800cda2:	4613      	mov	r3, r2
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdce:	7afb      	ldrb	r3, [r7, #11]
 800cdd0:	f003 030f 	and.w	r3, r3, #15
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	799b      	ldrb	r3, [r3, #6]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d102      	bne.n	800cde8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6818      	ldr	r0, [r3, #0]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	799b      	ldrb	r3, [r3, #6]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	6979      	ldr	r1, [r7, #20]
 800cdf4:	f008 fbdc 	bl	80155b0 <USB_EPStartXfer>

  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b083      	sub	sp, #12
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	f003 020f 	and.w	r2, r3, #15
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	4613      	mov	r3, r2
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	440b      	add	r3, r1
 800ce20:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ce24:	681b      	ldr	r3, [r3, #0]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b086      	sub	sp, #24
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	603b      	str	r3, [r7, #0]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce42:	7afb      	ldrb	r3, [r7, #11]
 800ce44:	f003 020f 	and.w	r2, r3, #15
 800ce48:	4613      	mov	r3, r2
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	4413      	add	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	3310      	adds	r3, #16
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	4413      	add	r3, r2
 800ce56:	3304      	adds	r3, #4
 800ce58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce72:	7afb      	ldrb	r3, [r7, #11]
 800ce74:	f003 030f 	and.w	r3, r3, #15
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	799b      	ldrb	r3, [r3, #6]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d102      	bne.n	800ce8c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	799b      	ldrb	r3, [r3, #6]
 800ce94:	461a      	mov	r2, r3
 800ce96:	6979      	ldr	r1, [r7, #20]
 800ce98:	f008 fb8a 	bl	80155b0 <USB_EPStartXfer>

  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b084      	sub	sp, #16
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ceb2:	78fb      	ldrb	r3, [r7, #3]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7912      	ldrb	r2, [r2, #4]
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d901      	bls.n	800cec4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e04f      	b.n	800cf64 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	da0f      	bge.n	800ceec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	f003 020f 	and.w	r2, r3, #15
 800ced2:	4613      	mov	r3, r2
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	3310      	adds	r3, #16
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	4413      	add	r3, r2
 800cee0:	3304      	adds	r3, #4
 800cee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2201      	movs	r2, #1
 800cee8:	705a      	strb	r2, [r3, #1]
 800ceea:	e00d      	b.n	800cf08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ceec:	78fa      	ldrb	r2, [r7, #3]
 800ceee:	4613      	mov	r3, r2
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	3304      	adds	r3, #4
 800cf00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	f003 030f 	and.w	r3, r3, #15
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d101      	bne.n	800cf28 <HAL_PCD_EP_SetStall+0x82>
 800cf24:	2302      	movs	r3, #2
 800cf26:	e01d      	b.n	800cf64 <HAL_PCD_EP_SetStall+0xbe>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68f9      	ldr	r1, [r7, #12]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f008 ff1a 	bl	8015d70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	f003 030f 	and.w	r3, r3, #15
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d109      	bne.n	800cf5a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7999      	ldrb	r1, [r3, #6]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf54:	461a      	mov	r2, r3
 800cf56:	f009 f90d 	bl	8016174 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	f003 030f 	and.w	r3, r3, #15
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	7912      	ldrb	r2, [r2, #4]
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d901      	bls.n	800cf8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e042      	b.n	800d010 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	da0f      	bge.n	800cfb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf92:	78fb      	ldrb	r3, [r7, #3]
 800cf94:	f003 020f 	and.w	r2, r3, #15
 800cf98:	4613      	mov	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	4413      	add	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	3310      	adds	r3, #16
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2201      	movs	r2, #1
 800cfae:	705a      	strb	r2, [r3, #1]
 800cfb0:	e00f      	b.n	800cfd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	f003 020f 	and.w	r2, r3, #15
 800cfb8:	4613      	mov	r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	4413      	add	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	3304      	adds	r3, #4
 800cfca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfd8:	78fb      	ldrb	r3, [r7, #3]
 800cfda:	f003 030f 	and.w	r3, r3, #15
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d101      	bne.n	800cff2 <HAL_PCD_EP_ClrStall+0x86>
 800cfee:	2302      	movs	r3, #2
 800cff0:	e00e      	b.n	800d010 <HAL_PCD_EP_ClrStall+0xa4>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68f9      	ldr	r1, [r7, #12]
 800d000:	4618      	mov	r0, r3
 800d002:	f008 ff23 	bl	8015e4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	da0c      	bge.n	800d046 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d02c:	78fb      	ldrb	r3, [r7, #3]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	4613      	mov	r3, r2
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	4413      	add	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	3310      	adds	r3, #16
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	4413      	add	r3, r2
 800d040:	3304      	adds	r3, #4
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e00c      	b.n	800d060 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	f003 020f 	and.w	r2, r3, #15
 800d04c:	4613      	mov	r3, r2
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	4413      	add	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	4413      	add	r3, r2
 800d05c:	3304      	adds	r3, #4
 800d05e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68f9      	ldr	r1, [r7, #12]
 800d066:	4618      	mov	r0, r3
 800d068:	f008 fd42 	bl	8015af0 <USB_EPStopXfer>
 800d06c:	4603      	mov	r3, r0
 800d06e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d070:	7afb      	ldrb	r3, [r7, #11]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b08a      	sub	sp, #40	@ 0x28
 800d07e:	af02      	add	r7, sp, #8
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	3310      	adds	r3, #16
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	4413      	add	r3, r2
 800d09e:	3304      	adds	r3, #4
 800d0a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	695a      	ldr	r2, [r3, #20]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d901      	bls.n	800d0b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e06b      	b.n	800d18a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	691a      	ldr	r2, [r3, #16]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d902      	bls.n	800d0ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	089b      	lsrs	r3, r3, #2
 800d0d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0d6:	e02a      	b.n	800d12e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	695b      	ldr	r3, [r3, #20]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	69fa      	ldr	r2, [r7, #28]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d902      	bls.n	800d0f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	3303      	adds	r3, #3
 800d0f8:	089b      	lsrs	r3, r3, #2
 800d0fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68d9      	ldr	r1, [r3, #12]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	b2da      	uxtb	r2, r3
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	4603      	mov	r3, r0
 800d110:	6978      	ldr	r0, [r7, #20]
 800d112:	f008 fd97 	bl	8015c44 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	441a      	add	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	695a      	ldr	r2, [r3, #20]
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	441a      	add	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	429a      	cmp	r2, r3
 800d142:	d809      	bhi.n	800d158 <PCD_WriteEmptyTxFifo+0xde>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	695a      	ldr	r2, [r3, #20]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d203      	bcs.n	800d158 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1bf      	bne.n	800d0d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	691a      	ldr	r2, [r3, #16]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	429a      	cmp	r2, r3
 800d162:	d811      	bhi.n	800d188 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	2201      	movs	r2, #1
 800d16c:	fa02 f303 	lsl.w	r3, r2, r3
 800d170:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	43db      	mvns	r3, r3
 800d17e:	6939      	ldr	r1, [r7, #16]
 800d180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d184:	4013      	ands	r3, r2
 800d186:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3720      	adds	r7, #32
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	333c      	adds	r3, #60	@ 0x3c
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	799b      	ldrb	r3, [r3, #6]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d17b      	bne.n	800d2c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f003 0308 	and.w	r3, r3, #8
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d015      	beq.n	800d200 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	4a61      	ldr	r2, [pc, #388]	@ (800d35c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	f240 80b9 	bls.w	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 80b3 	beq.w	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	e0a7      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f003 0320 	and.w	r3, r3, #32
 800d206:	2b00      	cmp	r3, #0
 800d208:	d009      	beq.n	800d21e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d216:	461a      	mov	r2, r3
 800d218:	2320      	movs	r3, #32
 800d21a:	6093      	str	r3, [r2, #8]
 800d21c:	e098      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d224:	2b00      	cmp	r3, #0
 800d226:	f040 8093 	bne.w	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4a4b      	ldr	r2, [pc, #300]	@ (800d35c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d90f      	bls.n	800d252 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00a      	beq.n	800d252 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	4413      	add	r3, r2
 800d244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d248:	461a      	mov	r2, r3
 800d24a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d24e:	6093      	str	r3, [r2, #8]
 800d250:	e07e      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	4613      	mov	r3, r2
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	4413      	add	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4413      	add	r3, r2
 800d264:	3304      	adds	r3, #4
 800d266:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6a1a      	ldr	r2, [r3, #32]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	0159      	lsls	r1, r3, #5
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	440b      	add	r3, r1
 800d274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d114      	bne.n	800d2b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d109      	bne.n	800d2a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6818      	ldr	r0, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d29c:	461a      	mov	r2, r3
 800d29e:	2101      	movs	r1, #1
 800d2a0:	f008 ff68 	bl	8016174 <USB_EP0_OutStart>
 800d2a4:	e006      	b.n	800d2b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	441a      	add	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f00b fa4e 	bl	801875c <HAL_PCD_DataOutStageCallback>
 800d2c0:	e046      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	4a26      	ldr	r2, [pc, #152]	@ (800d360 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d124      	bne.n	800d314 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00a      	beq.n	800d2ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2e6:	6093      	str	r3, [r2, #8]
 800d2e8:	e032      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f003 0320 	and.w	r3, r3, #32
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d008      	beq.n	800d306 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	015a      	lsls	r2, r3, #5
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d300:	461a      	mov	r2, r3
 800d302:	2320      	movs	r3, #32
 800d304:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f00b fa25 	bl	801875c <HAL_PCD_DataOutStageCallback>
 800d312:	e01d      	b.n	800d350 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d114      	bne.n	800d344 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	4613      	mov	r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	440b      	add	r3, r1
 800d328:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d108      	bne.n	800d344 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6818      	ldr	r0, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d33c:	461a      	mov	r2, r3
 800d33e:	2100      	movs	r1, #0
 800d340:	f008 ff18 	bl	8016174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f00b fa06 	bl	801875c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3720      	adds	r7, #32
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	4f54300a 	.word	0x4f54300a
 800d360:	4f54310a 	.word	0x4f54310a

0800d364 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	333c      	adds	r3, #60	@ 0x3c
 800d37c:	3304      	adds	r3, #4
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	4a15      	ldr	r2, [pc, #84]	@ (800d3ec <PCD_EP_OutSetupPacket_int+0x88>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d90e      	bls.n	800d3b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d009      	beq.n	800d3b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f00b f9bd 	bl	8018738 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d3ec <PCD_EP_OutSetupPacket_int+0x88>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d90c      	bls.n	800d3e0 <PCD_EP_OutSetupPacket_int+0x7c>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	799b      	ldrb	r3, [r3, #6]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d108      	bne.n	800d3e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6818      	ldr	r0, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d3d8:	461a      	mov	r2, r3
 800d3da:	2101      	movs	r1, #1
 800d3dc:	f008 feca 	bl	8016174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	4f54300a 	.word	0x4f54300a

0800d3f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70fb      	strb	r3, [r7, #3]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d406:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d408:	78fb      	ldrb	r3, [r7, #3]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d107      	bne.n	800d41e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d40e:	883b      	ldrh	r3, [r7, #0]
 800d410:	0419      	lsls	r1, r3, #16
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	430a      	orrs	r2, r1
 800d41a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d41c:	e028      	b.n	800d470 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	4413      	add	r3, r2
 800d42a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e00d      	b.n	800d44e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	7bfb      	ldrb	r3, [r7, #15]
 800d438:	3340      	adds	r3, #64	@ 0x40
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	0c1b      	lsrs	r3, r3, #16
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	4413      	add	r3, r2
 800d446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	3301      	adds	r3, #1
 800d44c:	73fb      	strb	r3, [r7, #15]
 800d44e:	7bfa      	ldrb	r2, [r7, #15]
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	3b01      	subs	r3, #1
 800d454:	429a      	cmp	r2, r3
 800d456:	d3ec      	bcc.n	800d432 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d458:	883b      	ldrh	r3, [r7, #0]
 800d45a:	0418      	lsls	r0, r3, #16
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6819      	ldr	r1, [r3, #0]
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	3b01      	subs	r3, #1
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	4302      	orrs	r2, r0
 800d468:	3340      	adds	r3, #64	@ 0x40
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	440b      	add	r3, r1
 800d46e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	460b      	mov	r3, r1
 800d488:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	887a      	ldrh	r2, [r7, #2]
 800d490:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4ce:	4b05      	ldr	r3, [pc, #20]	@ (800d4e4 <HAL_PCDEx_ActivateLPM+0x44>)
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	10000003 	.word	0x10000003

0800d4e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d508:	4b19      	ldr	r3, [pc, #100]	@ (800d570 <HAL_PWREx_ConfigSupply+0x70>)
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	f003 0304 	and.w	r3, r3, #4
 800d510:	2b04      	cmp	r3, #4
 800d512:	d00a      	beq.n	800d52a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d514:	4b16      	ldr	r3, [pc, #88]	@ (800d570 <HAL_PWREx_ConfigSupply+0x70>)
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	f003 0307 	and.w	r3, r3, #7
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d001      	beq.n	800d526 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e01f      	b.n	800d566 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	e01d      	b.n	800d566 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d52a:	4b11      	ldr	r3, [pc, #68]	@ (800d570 <HAL_PWREx_ConfigSupply+0x70>)
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	f023 0207 	bic.w	r2, r3, #7
 800d532:	490f      	ldr	r1, [pc, #60]	@ (800d570 <HAL_PWREx_ConfigSupply+0x70>)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4313      	orrs	r3, r2
 800d538:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d53a:	f7fa f963 	bl	8007804 <HAL_GetTick>
 800d53e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d540:	e009      	b.n	800d556 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d542:	f7fa f95f 	bl	8007804 <HAL_GetTick>
 800d546:	4602      	mov	r2, r0
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d550:	d901      	bls.n	800d556 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e007      	b.n	800d566 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d556:	4b06      	ldr	r3, [pc, #24]	@ (800d570 <HAL_PWREx_ConfigSupply+0x70>)
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d55e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d562:	d1ee      	bne.n	800d542 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	58024800 	.word	0x58024800

0800d574 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d574:	b480      	push	{r7}
 800d576:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d578:	4b05      	ldr	r3, [pc, #20]	@ (800d590 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	4a04      	ldr	r2, [pc, #16]	@ (800d590 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d57e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d582:	60d3      	str	r3, [r2, #12]
}
 800d584:	bf00      	nop
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	58024800 	.word	0x58024800

0800d594 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08c      	sub	sp, #48	@ 0x30
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e3c8      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 8087 	beq.w	800d6c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d5b4:	4b88      	ldr	r3, [pc, #544]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d5be:	4b86      	ldr	r3, [pc, #536]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c6:	2b10      	cmp	r3, #16
 800d5c8:	d007      	beq.n	800d5da <HAL_RCC_OscConfig+0x46>
 800d5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5cc:	2b18      	cmp	r3, #24
 800d5ce:	d110      	bne.n	800d5f2 <HAL_RCC_OscConfig+0x5e>
 800d5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d2:	f003 0303 	and.w	r3, r3, #3
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d10b      	bne.n	800d5f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5da:	4b7f      	ldr	r3, [pc, #508]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d06c      	beq.n	800d6c0 <HAL_RCC_OscConfig+0x12c>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d168      	bne.n	800d6c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e3a2      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5fa:	d106      	bne.n	800d60a <HAL_RCC_OscConfig+0x76>
 800d5fc:	4b76      	ldr	r3, [pc, #472]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a75      	ldr	r2, [pc, #468]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d606:	6013      	str	r3, [r2, #0]
 800d608:	e02e      	b.n	800d668 <HAL_RCC_OscConfig+0xd4>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10c      	bne.n	800d62c <HAL_RCC_OscConfig+0x98>
 800d612:	4b71      	ldr	r3, [pc, #452]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a70      	ldr	r2, [pc, #448]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	4b6e      	ldr	r3, [pc, #440]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a6d      	ldr	r2, [pc, #436]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d624:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d628:	6013      	str	r3, [r2, #0]
 800d62a:	e01d      	b.n	800d668 <HAL_RCC_OscConfig+0xd4>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d634:	d10c      	bne.n	800d650 <HAL_RCC_OscConfig+0xbc>
 800d636:	4b68      	ldr	r3, [pc, #416]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a67      	ldr	r2, [pc, #412]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d63c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	4b65      	ldr	r3, [pc, #404]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a64      	ldr	r2, [pc, #400]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	e00b      	b.n	800d668 <HAL_RCC_OscConfig+0xd4>
 800d650:	4b61      	ldr	r3, [pc, #388]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a60      	ldr	r2, [pc, #384]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	4b5e      	ldr	r3, [pc, #376]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a5d      	ldr	r2, [pc, #372]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d013      	beq.n	800d698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d670:	f7fa f8c8 	bl	8007804 <HAL_GetTick>
 800d674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d676:	e008      	b.n	800d68a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d678:	f7fa f8c4 	bl	8007804 <HAL_GetTick>
 800d67c:	4602      	mov	r2, r0
 800d67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b64      	cmp	r3, #100	@ 0x64
 800d684:	d901      	bls.n	800d68a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e356      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d68a:	4b53      	ldr	r3, [pc, #332]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0f0      	beq.n	800d678 <HAL_RCC_OscConfig+0xe4>
 800d696:	e014      	b.n	800d6c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d698:	f7fa f8b4 	bl	8007804 <HAL_GetTick>
 800d69c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d6a0:	f7fa f8b0 	bl	8007804 <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b64      	cmp	r3, #100	@ 0x64
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e342      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d6b2:	4b49      	ldr	r3, [pc, #292]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1f0      	bne.n	800d6a0 <HAL_RCC_OscConfig+0x10c>
 800d6be:	e000      	b.n	800d6c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 808c 	beq.w	800d7e8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6d0:	4b41      	ldr	r3, [pc, #260]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d6da:	4b3f      	ldr	r3, [pc, #252]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d007      	beq.n	800d6f6 <HAL_RCC_OscConfig+0x162>
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	2b18      	cmp	r3, #24
 800d6ea:	d137      	bne.n	800d75c <HAL_RCC_OscConfig+0x1c8>
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d132      	bne.n	800d75c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d6f6:	4b38      	ldr	r3, [pc, #224]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f003 0304 	and.w	r3, r3, #4
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <HAL_RCC_OscConfig+0x17a>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e314      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d70e:	4b32      	ldr	r3, [pc, #200]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f023 0219 	bic.w	r2, r3, #25
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	492f      	ldr	r1, [pc, #188]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d720:	f7fa f870 	bl	8007804 <HAL_GetTick>
 800d724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d726:	e008      	b.n	800d73a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d728:	f7fa f86c 	bl	8007804 <HAL_GetTick>
 800d72c:	4602      	mov	r2, r0
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	2b02      	cmp	r3, #2
 800d734:	d901      	bls.n	800d73a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e2fe      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d73a:	4b27      	ldr	r3, [pc, #156]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f003 0304 	and.w	r3, r3, #4
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0f0      	beq.n	800d728 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d746:	4b24      	ldr	r3, [pc, #144]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	061b      	lsls	r3, r3, #24
 800d754:	4920      	ldr	r1, [pc, #128]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d756:	4313      	orrs	r3, r2
 800d758:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d75a:	e045      	b.n	800d7e8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d026      	beq.n	800d7b2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d764:	4b1c      	ldr	r3, [pc, #112]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f023 0219 	bic.w	r2, r3, #25
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	4919      	ldr	r1, [pc, #100]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d772:	4313      	orrs	r3, r2
 800d774:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d776:	f7fa f845 	bl	8007804 <HAL_GetTick>
 800d77a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d77c:	e008      	b.n	800d790 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d77e:	f7fa f841 	bl	8007804 <HAL_GetTick>
 800d782:	4602      	mov	r2, r0
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d901      	bls.n	800d790 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e2d3      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d790:	4b11      	ldr	r3, [pc, #68]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0f0      	beq.n	800d77e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d79c:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	061b      	lsls	r3, r3, #24
 800d7aa:	490b      	ldr	r1, [pc, #44]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	604b      	str	r3, [r1, #4]
 800d7b0:	e01a      	b.n	800d7e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7b2:	4b09      	ldr	r3, [pc, #36]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a08      	ldr	r2, [pc, #32]	@ (800d7d8 <HAL_RCC_OscConfig+0x244>)
 800d7b8:	f023 0301 	bic.w	r3, r3, #1
 800d7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7be:	f7fa f821 	bl	8007804 <HAL_GetTick>
 800d7c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d7c4:	e00a      	b.n	800d7dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7c6:	f7fa f81d 	bl	8007804 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d903      	bls.n	800d7dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e2af      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
 800d7d8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d7dc:	4b96      	ldr	r3, [pc, #600]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f003 0304 	and.w	r3, r3, #4
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1ee      	bne.n	800d7c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0310 	and.w	r3, r3, #16
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d06a      	beq.n	800d8ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7f4:	4b90      	ldr	r3, [pc, #576]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d7fe:	4b8e      	ldr	r3, [pc, #568]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d802:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	2b08      	cmp	r3, #8
 800d808:	d007      	beq.n	800d81a <HAL_RCC_OscConfig+0x286>
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	2b18      	cmp	r3, #24
 800d80e:	d11b      	bne.n	800d848 <HAL_RCC_OscConfig+0x2b4>
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	f003 0303 	and.w	r3, r3, #3
 800d816:	2b01      	cmp	r3, #1
 800d818:	d116      	bne.n	800d848 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d81a:	4b87      	ldr	r3, [pc, #540]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d822:	2b00      	cmp	r3, #0
 800d824:	d005      	beq.n	800d832 <HAL_RCC_OscConfig+0x29e>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	2b80      	cmp	r3, #128	@ 0x80
 800d82c:	d001      	beq.n	800d832 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e282      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d832:	4b81      	ldr	r3, [pc, #516]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a1b      	ldr	r3, [r3, #32]
 800d83e:	061b      	lsls	r3, r3, #24
 800d840:	497d      	ldr	r1, [pc, #500]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d842:	4313      	orrs	r3, r2
 800d844:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d846:	e040      	b.n	800d8ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	69db      	ldr	r3, [r3, #28]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d023      	beq.n	800d898 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d850:	4b79      	ldr	r3, [pc, #484]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a78      	ldr	r2, [pc, #480]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d85a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d85c:	f7f9 ffd2 	bl	8007804 <HAL_GetTick>
 800d860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d862:	e008      	b.n	800d876 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d864:	f7f9 ffce 	bl	8007804 <HAL_GetTick>
 800d868:	4602      	mov	r2, r0
 800d86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d901      	bls.n	800d876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d872:	2303      	movs	r3, #3
 800d874:	e260      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d876:	4b70      	ldr	r3, [pc, #448]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0f0      	beq.n	800d864 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d882:	4b6d      	ldr	r3, [pc, #436]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a1b      	ldr	r3, [r3, #32]
 800d88e:	061b      	lsls	r3, r3, #24
 800d890:	4969      	ldr	r1, [pc, #420]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d892:	4313      	orrs	r3, r2
 800d894:	60cb      	str	r3, [r1, #12]
 800d896:	e018      	b.n	800d8ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d898:	4b67      	ldr	r3, [pc, #412]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a66      	ldr	r2, [pc, #408]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d89e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8a4:	f7f9 ffae 	bl	8007804 <HAL_GetTick>
 800d8a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d8aa:	e008      	b.n	800d8be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d8ac:	f7f9 ffaa 	bl	8007804 <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d901      	bls.n	800d8be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e23c      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d8be:	4b5e      	ldr	r3, [pc, #376]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f0      	bne.n	800d8ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0308 	and.w	r3, r3, #8
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d036      	beq.n	800d944 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	695b      	ldr	r3, [r3, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d019      	beq.n	800d912 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8de:	4b56      	ldr	r3, [pc, #344]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8e2:	4a55      	ldr	r2, [pc, #340]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d8e4:	f043 0301 	orr.w	r3, r3, #1
 800d8e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8ea:	f7f9 ff8b 	bl	8007804 <HAL_GetTick>
 800d8ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d8f0:	e008      	b.n	800d904 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8f2:	f7f9 ff87 	bl	8007804 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d901      	bls.n	800d904 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d900:	2303      	movs	r3, #3
 800d902:	e219      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d904:	4b4c      	ldr	r3, [pc, #304]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d908:	f003 0302 	and.w	r3, r3, #2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0f0      	beq.n	800d8f2 <HAL_RCC_OscConfig+0x35e>
 800d910:	e018      	b.n	800d944 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d912:	4b49      	ldr	r3, [pc, #292]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d916:	4a48      	ldr	r2, [pc, #288]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d918:	f023 0301 	bic.w	r3, r3, #1
 800d91c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d91e:	f7f9 ff71 	bl	8007804 <HAL_GetTick>
 800d922:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d924:	e008      	b.n	800d938 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d926:	f7f9 ff6d 	bl	8007804 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	2b02      	cmp	r3, #2
 800d932:	d901      	bls.n	800d938 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d934:	2303      	movs	r3, #3
 800d936:	e1ff      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d938:	4b3f      	ldr	r3, [pc, #252]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d93a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d93c:	f003 0302 	and.w	r3, r3, #2
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1f0      	bne.n	800d926 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f003 0320 	and.w	r3, r3, #32
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d036      	beq.n	800d9be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d019      	beq.n	800d98c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d958:	4b37      	ldr	r3, [pc, #220]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a36      	ldr	r2, [pc, #216]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d95e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d962:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d964:	f7f9 ff4e 	bl	8007804 <HAL_GetTick>
 800d968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d96a:	e008      	b.n	800d97e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d96c:	f7f9 ff4a 	bl	8007804 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	2b02      	cmp	r3, #2
 800d978:	d901      	bls.n	800d97e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d97a:	2303      	movs	r3, #3
 800d97c:	e1dc      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d97e:	4b2e      	ldr	r3, [pc, #184]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0f0      	beq.n	800d96c <HAL_RCC_OscConfig+0x3d8>
 800d98a:	e018      	b.n	800d9be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d98c:	4b2a      	ldr	r3, [pc, #168]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a29      	ldr	r2, [pc, #164]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d996:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d998:	f7f9 ff34 	bl	8007804 <HAL_GetTick>
 800d99c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d99e:	e008      	b.n	800d9b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d9a0:	f7f9 ff30 	bl	8007804 <HAL_GetTick>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	d901      	bls.n	800d9b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e1c2      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d9b2:	4b21      	ldr	r3, [pc, #132]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1f0      	bne.n	800d9a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f003 0304 	and.w	r3, r3, #4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 8086 	beq.w	800dad8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	@ (800da3c <HAL_RCC_OscConfig+0x4a8>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	@ (800da3c <HAL_RCC_OscConfig+0x4a8>)
 800d9d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d9d8:	f7f9 ff14 	bl	8007804 <HAL_GetTick>
 800d9dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9de:	e008      	b.n	800d9f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9e0:	f7f9 ff10 	bl	8007804 <HAL_GetTick>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	2b64      	cmp	r3, #100	@ 0x64
 800d9ec:	d901      	bls.n	800d9f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	e1a2      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9f2:	4b12      	ldr	r3, [pc, #72]	@ (800da3c <HAL_RCC_OscConfig+0x4a8>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d0f0      	beq.n	800d9e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d106      	bne.n	800da14 <HAL_RCC_OscConfig+0x480>
 800da06:	4b0c      	ldr	r3, [pc, #48]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da0a:	4a0b      	ldr	r2, [pc, #44]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da0c:	f043 0301 	orr.w	r3, r3, #1
 800da10:	6713      	str	r3, [r2, #112]	@ 0x70
 800da12:	e032      	b.n	800da7a <HAL_RCC_OscConfig+0x4e6>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d111      	bne.n	800da40 <HAL_RCC_OscConfig+0x4ac>
 800da1c:	4b06      	ldr	r3, [pc, #24]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da20:	4a05      	ldr	r2, [pc, #20]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da22:	f023 0301 	bic.w	r3, r3, #1
 800da26:	6713      	str	r3, [r2, #112]	@ 0x70
 800da28:	4b03      	ldr	r3, [pc, #12]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da2c:	4a02      	ldr	r2, [pc, #8]	@ (800da38 <HAL_RCC_OscConfig+0x4a4>)
 800da2e:	f023 0304 	bic.w	r3, r3, #4
 800da32:	6713      	str	r3, [r2, #112]	@ 0x70
 800da34:	e021      	b.n	800da7a <HAL_RCC_OscConfig+0x4e6>
 800da36:	bf00      	nop
 800da38:	58024400 	.word	0x58024400
 800da3c:	58024800 	.word	0x58024800
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b05      	cmp	r3, #5
 800da46:	d10c      	bne.n	800da62 <HAL_RCC_OscConfig+0x4ce>
 800da48:	4b83      	ldr	r3, [pc, #524]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da4c:	4a82      	ldr	r2, [pc, #520]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da4e:	f043 0304 	orr.w	r3, r3, #4
 800da52:	6713      	str	r3, [r2, #112]	@ 0x70
 800da54:	4b80      	ldr	r3, [pc, #512]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da58:	4a7f      	ldr	r2, [pc, #508]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da5a:	f043 0301 	orr.w	r3, r3, #1
 800da5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800da60:	e00b      	b.n	800da7a <HAL_RCC_OscConfig+0x4e6>
 800da62:	4b7d      	ldr	r3, [pc, #500]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da66:	4a7c      	ldr	r2, [pc, #496]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da68:	f023 0301 	bic.w	r3, r3, #1
 800da6c:	6713      	str	r3, [r2, #112]	@ 0x70
 800da6e:	4b7a      	ldr	r3, [pc, #488]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da72:	4a79      	ldr	r2, [pc, #484]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800da74:	f023 0304 	bic.w	r3, r3, #4
 800da78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d015      	beq.n	800daae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da82:	f7f9 febf 	bl	8007804 <HAL_GetTick>
 800da86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da88:	e00a      	b.n	800daa0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da8a:	f7f9 febb 	bl	8007804 <HAL_GetTick>
 800da8e:	4602      	mov	r2, r0
 800da90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da98:	4293      	cmp	r3, r2
 800da9a:	d901      	bls.n	800daa0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e14b      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800daa0:	4b6d      	ldr	r3, [pc, #436]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800daa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0ee      	beq.n	800da8a <HAL_RCC_OscConfig+0x4f6>
 800daac:	e014      	b.n	800dad8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daae:	f7f9 fea9 	bl	8007804 <HAL_GetTick>
 800dab2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dab4:	e00a      	b.n	800dacc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dab6:	f7f9 fea5 	bl	8007804 <HAL_GetTick>
 800daba:	4602      	mov	r2, r0
 800dabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d901      	bls.n	800dacc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e135      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dacc:	4b62      	ldr	r3, [pc, #392]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1ee      	bne.n	800dab6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 812a 	beq.w	800dd36 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800dae2:	4b5d      	ldr	r3, [pc, #372]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800daea:	2b18      	cmp	r3, #24
 800daec:	f000 80ba 	beq.w	800dc64 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	f040 8095 	bne.w	800dc24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dafa:	4b57      	ldr	r3, [pc, #348]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a56      	ldr	r2, [pc, #344]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db06:	f7f9 fe7d 	bl	8007804 <HAL_GetTick>
 800db0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db0c:	e008      	b.n	800db20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db0e:	f7f9 fe79 	bl	8007804 <HAL_GetTick>
 800db12:	4602      	mov	r2, r0
 800db14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d901      	bls.n	800db20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800db1c:	2303      	movs	r3, #3
 800db1e:	e10b      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db20:	4b4d      	ldr	r3, [pc, #308]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1f0      	bne.n	800db0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db2c:	4b4a      	ldr	r3, [pc, #296]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db30:	4b4a      	ldr	r3, [pc, #296]	@ (800dc5c <HAL_RCC_OscConfig+0x6c8>)
 800db32:	4013      	ands	r3, r2
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db3c:	0112      	lsls	r2, r2, #4
 800db3e:	430a      	orrs	r2, r1
 800db40:	4945      	ldr	r1, [pc, #276]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db42:	4313      	orrs	r3, r2
 800db44:	628b      	str	r3, [r1, #40]	@ 0x28
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db4a:	3b01      	subs	r3, #1
 800db4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db54:	3b01      	subs	r3, #1
 800db56:	025b      	lsls	r3, r3, #9
 800db58:	b29b      	uxth	r3, r3
 800db5a:	431a      	orrs	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db60:	3b01      	subs	r3, #1
 800db62:	041b      	lsls	r3, r3, #16
 800db64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db68:	431a      	orrs	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db6e:	3b01      	subs	r3, #1
 800db70:	061b      	lsls	r3, r3, #24
 800db72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db76:	4938      	ldr	r1, [pc, #224]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db78:	4313      	orrs	r3, r2
 800db7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800db7c:	4b36      	ldr	r3, [pc, #216]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db80:	4a35      	ldr	r2, [pc, #212]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db82:	f023 0301 	bic.w	r3, r3, #1
 800db86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800db88:	4b33      	ldr	r3, [pc, #204]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db8c:	4b34      	ldr	r3, [pc, #208]	@ (800dc60 <HAL_RCC_OscConfig+0x6cc>)
 800db8e:	4013      	ands	r3, r2
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800db94:	00d2      	lsls	r2, r2, #3
 800db96:	4930      	ldr	r1, [pc, #192]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db98:	4313      	orrs	r3, r2
 800db9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800db9c:	4b2e      	ldr	r3, [pc, #184]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800db9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba0:	f023 020c 	bic.w	r2, r3, #12
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba8:	492b      	ldr	r1, [pc, #172]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dbae:	4b2a      	ldr	r3, [pc, #168]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb2:	f023 0202 	bic.w	r2, r3, #2
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbba:	4927      	ldr	r1, [pc, #156]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dbc0:	4b25      	ldr	r3, [pc, #148]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc4:	4a24      	ldr	r2, [pc, #144]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbcc:	4b22      	ldr	r3, [pc, #136]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd0:	4a21      	ldr	r2, [pc, #132]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800dbd8:	4b1f      	ldr	r3, [pc, #124]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbdc:	4a1e      	ldr	r2, [pc, #120]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dbe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800dbe4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe8:	4a1b      	ldr	r2, [pc, #108]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbea:	f043 0301 	orr.w	r3, r3, #1
 800dbee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbf0:	4b19      	ldr	r3, [pc, #100]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a18      	ldr	r2, [pc, #96]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dbf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbfc:	f7f9 fe02 	bl	8007804 <HAL_GetTick>
 800dc00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc02:	e008      	b.n	800dc16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc04:	f7f9 fdfe 	bl	8007804 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e090      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc16:	4b10      	ldr	r3, [pc, #64]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0f0      	beq.n	800dc04 <HAL_RCC_OscConfig+0x670>
 800dc22:	e088      	b.n	800dd36 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc24:	4b0c      	ldr	r3, [pc, #48]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a0b      	ldr	r2, [pc, #44]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dc2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dc2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc30:	f7f9 fde8 	bl	8007804 <HAL_GetTick>
 800dc34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc36:	e008      	b.n	800dc4a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc38:	f7f9 fde4 	bl	8007804 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d901      	bls.n	800dc4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	e076      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc4a:	4b03      	ldr	r3, [pc, #12]	@ (800dc58 <HAL_RCC_OscConfig+0x6c4>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1f0      	bne.n	800dc38 <HAL_RCC_OscConfig+0x6a4>
 800dc56:	e06e      	b.n	800dd36 <HAL_RCC_OscConfig+0x7a2>
 800dc58:	58024400 	.word	0x58024400
 800dc5c:	fffffc0c 	.word	0xfffffc0c
 800dc60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dc64:	4b36      	ldr	r3, [pc, #216]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dc6a:	4b35      	ldr	r3, [pc, #212]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dc6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d031      	beq.n	800dcdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	f003 0203 	and.w	r2, r3, #3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d12a      	bne.n	800dcdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	091b      	lsrs	r3, r3, #4
 800dc8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d122      	bne.n	800dcdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dca0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d11a      	bne.n	800dcdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	0a5b      	lsrs	r3, r3, #9
 800dcaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d111      	bne.n	800dcdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	0c1b      	lsrs	r3, r3, #16
 800dcbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d108      	bne.n	800dcdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	0e1b      	lsrs	r3, r3, #24
 800dcce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d001      	beq.n	800dce0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e02b      	b.n	800dd38 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dce0:	4b17      	ldr	r3, [pc, #92]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce4:	08db      	lsrs	r3, r3, #3
 800dce6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d01f      	beq.n	800dd36 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800dcf6:	4b12      	ldr	r3, [pc, #72]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfa:	4a11      	ldr	r2, [pc, #68]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dcfc:	f023 0301 	bic.w	r3, r3, #1
 800dd00:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dd02:	f7f9 fd7f 	bl	8007804 <HAL_GetTick>
 800dd06:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800dd08:	bf00      	nop
 800dd0a:	f7f9 fd7b 	bl	8007804 <HAL_GetTick>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d0f9      	beq.n	800dd0a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dd16:	4b0a      	ldr	r3, [pc, #40]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dd18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd1a:	4b0a      	ldr	r3, [pc, #40]	@ (800dd44 <HAL_RCC_OscConfig+0x7b0>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800dd22:	00d2      	lsls	r2, r2, #3
 800dd24:	4906      	ldr	r1, [pc, #24]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800dd2a:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd2e:	4a04      	ldr	r2, [pc, #16]	@ (800dd40 <HAL_RCC_OscConfig+0x7ac>)
 800dd30:	f043 0301 	orr.w	r3, r3, #1
 800dd34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3730      	adds	r7, #48	@ 0x30
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	58024400 	.word	0x58024400
 800dd44:	ffff0007 	.word	0xffff0007

0800dd48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e19c      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dd5c:	4b8a      	ldr	r3, [pc, #552]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 030f 	and.w	r3, r3, #15
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d910      	bls.n	800dd8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd6a:	4b87      	ldr	r3, [pc, #540]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f023 020f 	bic.w	r2, r3, #15
 800dd72:	4985      	ldr	r1, [pc, #532]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd7a:	4b83      	ldr	r3, [pc, #524]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f003 030f 	and.w	r3, r3, #15
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d001      	beq.n	800dd8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e184      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 0304 	and.w	r3, r3, #4
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d010      	beq.n	800ddba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	691a      	ldr	r2, [r3, #16]
 800dd9c:	4b7b      	ldr	r3, [pc, #492]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d908      	bls.n	800ddba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dda8:	4b78      	ldr	r3, [pc, #480]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	4975      	ldr	r1, [pc, #468]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 0308 	and.w	r3, r3, #8
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d010      	beq.n	800dde8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	695a      	ldr	r2, [r3, #20]
 800ddca:	4b70      	ldr	r3, [pc, #448]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d908      	bls.n	800dde8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ddd6:	4b6d      	ldr	r3, [pc, #436]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800ddd8:	69db      	ldr	r3, [r3, #28]
 800ddda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	496a      	ldr	r1, [pc, #424]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800dde4:	4313      	orrs	r3, r2
 800dde6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 0310 	and.w	r3, r3, #16
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d010      	beq.n	800de16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	699a      	ldr	r2, [r3, #24]
 800ddf8:	4b64      	ldr	r3, [pc, #400]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de00:	429a      	cmp	r2, r3
 800de02:	d908      	bls.n	800de16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800de04:	4b61      	ldr	r3, [pc, #388]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	495e      	ldr	r1, [pc, #376]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de12:	4313      	orrs	r3, r2
 800de14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 0320 	and.w	r3, r3, #32
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d010      	beq.n	800de44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69da      	ldr	r2, [r3, #28]
 800de26:	4b59      	ldr	r3, [pc, #356]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800de2e:	429a      	cmp	r2, r3
 800de30:	d908      	bls.n	800de44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800de32:	4b56      	ldr	r3, [pc, #344]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	69db      	ldr	r3, [r3, #28]
 800de3e:	4953      	ldr	r1, [pc, #332]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de40:	4313      	orrs	r3, r2
 800de42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0302 	and.w	r3, r3, #2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d010      	beq.n	800de72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	4b4d      	ldr	r3, [pc, #308]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	f003 030f 	and.w	r3, r3, #15
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d908      	bls.n	800de72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de60:	4b4a      	ldr	r3, [pc, #296]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	f023 020f 	bic.w	r2, r3, #15
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	4947      	ldr	r1, [pc, #284]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de6e:	4313      	orrs	r3, r2
 800de70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d055      	beq.n	800df2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800de7e:	4b43      	ldr	r3, [pc, #268]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	4940      	ldr	r1, [pc, #256]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de8c:	4313      	orrs	r3, r2
 800de8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d107      	bne.n	800dea8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de98:	4b3c      	ldr	r3, [pc, #240]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d121      	bne.n	800dee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e0f6      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	2b03      	cmp	r3, #3
 800deae:	d107      	bne.n	800dec0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800deb0:	4b36      	ldr	r3, [pc, #216]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d115      	bne.n	800dee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e0ea      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d107      	bne.n	800ded8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dec8:	4b30      	ldr	r3, [pc, #192]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d109      	bne.n	800dee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0de      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ded8:	4b2c      	ldr	r3, [pc, #176]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e0d6      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dee8:	4b28      	ldr	r3, [pc, #160]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	f023 0207 	bic.w	r2, r3, #7
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4925      	ldr	r1, [pc, #148]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800def6:	4313      	orrs	r3, r2
 800def8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800defa:	f7f9 fc83 	bl	8007804 <HAL_GetTick>
 800defe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df00:	e00a      	b.n	800df18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df02:	f7f9 fc7f 	bl	8007804 <HAL_GetTick>
 800df06:	4602      	mov	r2, r0
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df10:	4293      	cmp	r3, r2
 800df12:	d901      	bls.n	800df18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e0be      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df18:	4b1c      	ldr	r3, [pc, #112]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	429a      	cmp	r2, r3
 800df28:	d1eb      	bne.n	800df02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	2b00      	cmp	r3, #0
 800df34:	d010      	beq.n	800df58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	68da      	ldr	r2, [r3, #12]
 800df3a:	4b14      	ldr	r3, [pc, #80]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	f003 030f 	and.w	r3, r3, #15
 800df42:	429a      	cmp	r2, r3
 800df44:	d208      	bcs.n	800df58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df46:	4b11      	ldr	r3, [pc, #68]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	f023 020f 	bic.w	r2, r3, #15
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	490e      	ldr	r1, [pc, #56]	@ (800df8c <HAL_RCC_ClockConfig+0x244>)
 800df54:	4313      	orrs	r3, r2
 800df56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800df58:	4b0b      	ldr	r3, [pc, #44]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 030f 	and.w	r3, r3, #15
 800df60:	683a      	ldr	r2, [r7, #0]
 800df62:	429a      	cmp	r2, r3
 800df64:	d214      	bcs.n	800df90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df66:	4b08      	ldr	r3, [pc, #32]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f023 020f 	bic.w	r2, r3, #15
 800df6e:	4906      	ldr	r1, [pc, #24]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	4313      	orrs	r3, r2
 800df74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df76:	4b04      	ldr	r3, [pc, #16]	@ (800df88 <HAL_RCC_ClockConfig+0x240>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f003 030f 	and.w	r3, r3, #15
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	429a      	cmp	r2, r3
 800df82:	d005      	beq.n	800df90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800df84:	2301      	movs	r3, #1
 800df86:	e086      	b.n	800e096 <HAL_RCC_ClockConfig+0x34e>
 800df88:	52002000 	.word	0x52002000
 800df8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d010      	beq.n	800dfbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	691a      	ldr	r2, [r3, #16]
 800dfa0:	4b3f      	ldr	r3, [pc, #252]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d208      	bcs.n	800dfbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dfac:	4b3c      	ldr	r3, [pc, #240]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	4939      	ldr	r1, [pc, #228]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 0308 	and.w	r3, r3, #8
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d010      	beq.n	800dfec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	695a      	ldr	r2, [r3, #20]
 800dfce:	4b34      	ldr	r3, [pc, #208]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d208      	bcs.n	800dfec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dfda:	4b31      	ldr	r3, [pc, #196]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	492e      	ldr	r1, [pc, #184]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 0310 	and.w	r3, r3, #16
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d010      	beq.n	800e01a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	699a      	ldr	r2, [r3, #24]
 800dffc:	4b28      	ldr	r3, [pc, #160]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800dffe:	69db      	ldr	r3, [r3, #28]
 800e000:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e004:	429a      	cmp	r2, r3
 800e006:	d208      	bcs.n	800e01a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e008:	4b25      	ldr	r3, [pc, #148]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	4922      	ldr	r1, [pc, #136]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e016:	4313      	orrs	r3, r2
 800e018:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 0320 	and.w	r3, r3, #32
 800e022:	2b00      	cmp	r3, #0
 800e024:	d010      	beq.n	800e048 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	69da      	ldr	r2, [r3, #28]
 800e02a:	4b1d      	ldr	r3, [pc, #116]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e032:	429a      	cmp	r2, r3
 800e034:	d208      	bcs.n	800e048 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e036:	4b1a      	ldr	r3, [pc, #104]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	69db      	ldr	r3, [r3, #28]
 800e042:	4917      	ldr	r1, [pc, #92]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e044:	4313      	orrs	r3, r2
 800e046:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e048:	f000 f834 	bl	800e0b4 <HAL_RCC_GetSysClockFreq>
 800e04c:	4602      	mov	r2, r0
 800e04e:	4b14      	ldr	r3, [pc, #80]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	0a1b      	lsrs	r3, r3, #8
 800e054:	f003 030f 	and.w	r3, r3, #15
 800e058:	4912      	ldr	r1, [pc, #72]	@ (800e0a4 <HAL_RCC_ClockConfig+0x35c>)
 800e05a:	5ccb      	ldrb	r3, [r1, r3]
 800e05c:	f003 031f 	and.w	r3, r3, #31
 800e060:	fa22 f303 	lsr.w	r3, r2, r3
 800e064:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e066:	4b0e      	ldr	r3, [pc, #56]	@ (800e0a0 <HAL_RCC_ClockConfig+0x358>)
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	f003 030f 	and.w	r3, r3, #15
 800e06e:	4a0d      	ldr	r2, [pc, #52]	@ (800e0a4 <HAL_RCC_ClockConfig+0x35c>)
 800e070:	5cd3      	ldrb	r3, [r2, r3]
 800e072:	f003 031f 	and.w	r3, r3, #31
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	fa22 f303 	lsr.w	r3, r2, r3
 800e07c:	4a0a      	ldr	r2, [pc, #40]	@ (800e0a8 <HAL_RCC_ClockConfig+0x360>)
 800e07e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e080:	4a0a      	ldr	r2, [pc, #40]	@ (800e0ac <HAL_RCC_ClockConfig+0x364>)
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e086:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b0 <HAL_RCC_ClockConfig+0x368>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f9 fb70 	bl	8007770 <HAL_InitTick>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3718      	adds	r7, #24
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	58024400 	.word	0x58024400
 800e0a4:	0801ddec 	.word	0x0801ddec
 800e0a8:	24000004 	.word	0x24000004
 800e0ac:	24000000 	.word	0x24000000
 800e0b0:	24000038 	.word	0x24000038

0800e0b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b089      	sub	sp, #36	@ 0x24
 800e0b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0ba:	4bb3      	ldr	r3, [pc, #716]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0c2:	2b18      	cmp	r3, #24
 800e0c4:	f200 8155 	bhi.w	800e372 <HAL_RCC_GetSysClockFreq+0x2be>
 800e0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ce:	bf00      	nop
 800e0d0:	0800e135 	.word	0x0800e135
 800e0d4:	0800e373 	.word	0x0800e373
 800e0d8:	0800e373 	.word	0x0800e373
 800e0dc:	0800e373 	.word	0x0800e373
 800e0e0:	0800e373 	.word	0x0800e373
 800e0e4:	0800e373 	.word	0x0800e373
 800e0e8:	0800e373 	.word	0x0800e373
 800e0ec:	0800e373 	.word	0x0800e373
 800e0f0:	0800e15b 	.word	0x0800e15b
 800e0f4:	0800e373 	.word	0x0800e373
 800e0f8:	0800e373 	.word	0x0800e373
 800e0fc:	0800e373 	.word	0x0800e373
 800e100:	0800e373 	.word	0x0800e373
 800e104:	0800e373 	.word	0x0800e373
 800e108:	0800e373 	.word	0x0800e373
 800e10c:	0800e373 	.word	0x0800e373
 800e110:	0800e161 	.word	0x0800e161
 800e114:	0800e373 	.word	0x0800e373
 800e118:	0800e373 	.word	0x0800e373
 800e11c:	0800e373 	.word	0x0800e373
 800e120:	0800e373 	.word	0x0800e373
 800e124:	0800e373 	.word	0x0800e373
 800e128:	0800e373 	.word	0x0800e373
 800e12c:	0800e373 	.word	0x0800e373
 800e130:	0800e167 	.word	0x0800e167
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e134:	4b94      	ldr	r3, [pc, #592]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f003 0320 	and.w	r3, r3, #32
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e140:	4b91      	ldr	r3, [pc, #580]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	08db      	lsrs	r3, r3, #3
 800e146:	f003 0303 	and.w	r3, r3, #3
 800e14a:	4a90      	ldr	r2, [pc, #576]	@ (800e38c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e14c:	fa22 f303 	lsr.w	r3, r2, r3
 800e150:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e152:	e111      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e154:	4b8d      	ldr	r3, [pc, #564]	@ (800e38c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e156:	61bb      	str	r3, [r7, #24]
      break;
 800e158:	e10e      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e15a:	4b8d      	ldr	r3, [pc, #564]	@ (800e390 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e15c:	61bb      	str	r3, [r7, #24]
      break;
 800e15e:	e10b      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e160:	4b8c      	ldr	r3, [pc, #560]	@ (800e394 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e162:	61bb      	str	r3, [r7, #24]
      break;
 800e164:	e108      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e166:	4b88      	ldr	r3, [pc, #544]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e16a:	f003 0303 	and.w	r3, r3, #3
 800e16e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e170:	4b85      	ldr	r3, [pc, #532]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e174:	091b      	lsrs	r3, r3, #4
 800e176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e17a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e17c:	4b82      	ldr	r3, [pc, #520]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e180:	f003 0301 	and.w	r3, r3, #1
 800e184:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e186:	4b80      	ldr	r3, [pc, #512]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e18a:	08db      	lsrs	r3, r3, #3
 800e18c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	fb02 f303 	mul.w	r3, r2, r3
 800e196:	ee07 3a90 	vmov	s15, r3
 800e19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e19e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 80e1 	beq.w	800e36c <HAL_RCC_GetSysClockFreq+0x2b8>
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	f000 8083 	beq.w	800e2b8 <HAL_RCC_GetSysClockFreq+0x204>
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	f200 80a1 	bhi.w	800e2fc <HAL_RCC_GetSysClockFreq+0x248>
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d003      	beq.n	800e1c8 <HAL_RCC_GetSysClockFreq+0x114>
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d056      	beq.n	800e274 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e1c6:	e099      	b.n	800e2fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 0320 	and.w	r3, r3, #32
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d02d      	beq.n	800e230 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1d4:	4b6c      	ldr	r3, [pc, #432]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	08db      	lsrs	r3, r3, #3
 800e1da:	f003 0303 	and.w	r3, r3, #3
 800e1de:	4a6b      	ldr	r2, [pc, #428]	@ (800e38c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	ee07 3a90 	vmov	s15, r3
 800e1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	ee07 3a90 	vmov	s15, r3
 800e1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1fe:	4b62      	ldr	r3, [pc, #392]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e206:	ee07 3a90 	vmov	s15, r3
 800e20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e20e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e212:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e21e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e22a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e22e:	e087      	b.n	800e340 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	ee07 3a90 	vmov	s15, r3
 800e236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e23a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e39c <HAL_RCC_GetSysClockFreq+0x2e8>
 800e23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e242:	4b51      	ldr	r3, [pc, #324]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e24a:	ee07 3a90 	vmov	s15, r3
 800e24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e252:	ed97 6a02 	vldr	s12, [r7, #8]
 800e256:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e26e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e272:	e065      	b.n	800e340 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	ee07 3a90 	vmov	s15, r3
 800e27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e27e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e3a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e286:	4b40      	ldr	r3, [pc, #256]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e28e:	ee07 3a90 	vmov	s15, r3
 800e292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e296:	ed97 6a02 	vldr	s12, [r7, #8]
 800e29a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e2b6:	e043      	b.n	800e340 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	ee07 3a90 	vmov	s15, r3
 800e2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e3a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2d2:	ee07 3a90 	vmov	s15, r3
 800e2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2da:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e2fa:	e021      	b.n	800e340 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	ee07 3a90 	vmov	s15, r3
 800e302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e306:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e3a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e30e:	4b1e      	ldr	r3, [pc, #120]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e316:	ee07 3a90 	vmov	s15, r3
 800e31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e31e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e322:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e32e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e33a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e33e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e340:	4b11      	ldr	r3, [pc, #68]	@ (800e388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e344:	0a5b      	lsrs	r3, r3, #9
 800e346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e34a:	3301      	adds	r3, #1
 800e34c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	ee07 3a90 	vmov	s15, r3
 800e354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e358:	edd7 6a07 	vldr	s13, [r7, #28]
 800e35c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e364:	ee17 3a90 	vmov	r3, s15
 800e368:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e36a:	e005      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e36c:	2300      	movs	r3, #0
 800e36e:	61bb      	str	r3, [r7, #24]
      break;
 800e370:	e002      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e372:	4b07      	ldr	r3, [pc, #28]	@ (800e390 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e374:	61bb      	str	r3, [r7, #24]
      break;
 800e376:	bf00      	nop
  }

  return sysclockfreq;
 800e378:	69bb      	ldr	r3, [r7, #24]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3724      	adds	r7, #36	@ 0x24
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	58024400 	.word	0x58024400
 800e38c:	03d09000 	.word	0x03d09000
 800e390:	003d0900 	.word	0x003d0900
 800e394:	016e3600 	.word	0x016e3600
 800e398:	46000000 	.word	0x46000000
 800e39c:	4c742400 	.word	0x4c742400
 800e3a0:	4a742400 	.word	0x4a742400
 800e3a4:	4bb71b00 	.word	0x4bb71b00

0800e3a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e3ae:	f7ff fe81 	bl	800e0b4 <HAL_RCC_GetSysClockFreq>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	4b10      	ldr	r3, [pc, #64]	@ (800e3f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e3b6:	699b      	ldr	r3, [r3, #24]
 800e3b8:	0a1b      	lsrs	r3, r3, #8
 800e3ba:	f003 030f 	and.w	r3, r3, #15
 800e3be:	490f      	ldr	r1, [pc, #60]	@ (800e3fc <HAL_RCC_GetHCLKFreq+0x54>)
 800e3c0:	5ccb      	ldrb	r3, [r1, r3]
 800e3c2:	f003 031f 	and.w	r3, r3, #31
 800e3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	f003 030f 	and.w	r3, r3, #15
 800e3d4:	4a09      	ldr	r2, [pc, #36]	@ (800e3fc <HAL_RCC_GetHCLKFreq+0x54>)
 800e3d6:	5cd3      	ldrb	r3, [r2, r3]
 800e3d8:	f003 031f 	and.w	r3, r3, #31
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	fa22 f303 	lsr.w	r3, r2, r3
 800e3e2:	4a07      	ldr	r2, [pc, #28]	@ (800e400 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e3e6:	4a07      	ldr	r2, [pc, #28]	@ (800e404 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e3ec:	4b04      	ldr	r3, [pc, #16]	@ (800e400 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	58024400 	.word	0x58024400
 800e3fc:	0801ddec 	.word	0x0801ddec
 800e400:	24000004 	.word	0x24000004
 800e404:	24000000 	.word	0x24000000

0800e408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e40c:	f7ff ffcc 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 800e410:	4602      	mov	r2, r0
 800e412:	4b06      	ldr	r3, [pc, #24]	@ (800e42c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e414:	69db      	ldr	r3, [r3, #28]
 800e416:	091b      	lsrs	r3, r3, #4
 800e418:	f003 0307 	and.w	r3, r3, #7
 800e41c:	4904      	ldr	r1, [pc, #16]	@ (800e430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e41e:	5ccb      	ldrb	r3, [r1, r3]
 800e420:	f003 031f 	and.w	r3, r3, #31
 800e424:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e428:	4618      	mov	r0, r3
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	58024400 	.word	0x58024400
 800e430:	0801ddec 	.word	0x0801ddec

0800e434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e438:	f7ff ffb6 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 800e43c:	4602      	mov	r2, r0
 800e43e:	4b06      	ldr	r3, [pc, #24]	@ (800e458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e440:	69db      	ldr	r3, [r3, #28]
 800e442:	0a1b      	lsrs	r3, r3, #8
 800e444:	f003 0307 	and.w	r3, r3, #7
 800e448:	4904      	ldr	r1, [pc, #16]	@ (800e45c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e44a:	5ccb      	ldrb	r3, [r1, r3]
 800e44c:	f003 031f 	and.w	r3, r3, #31
 800e450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e454:	4618      	mov	r0, r3
 800e456:	bd80      	pop	{r7, pc}
 800e458:	58024400 	.word	0x58024400
 800e45c:	0801ddec 	.word	0x0801ddec

0800e460 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e464:	b0c6      	sub	sp, #280	@ 0x118
 800e466:	af00      	add	r7, sp, #0
 800e468:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e46c:	2300      	movs	r3, #0
 800e46e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e472:	2300      	movs	r3, #0
 800e474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e484:	2500      	movs	r5, #0
 800e486:	ea54 0305 	orrs.w	r3, r4, r5
 800e48a:	d049      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e496:	d02f      	beq.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e498:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e49c:	d828      	bhi.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e49e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e4a2:	d01a      	beq.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e4a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e4a8:	d822      	bhi.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e4ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4b2:	d007      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e4b4:	e01c      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4b6:	4bab      	ldr	r3, [pc, #684]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ba:	4aaa      	ldr	r2, [pc, #680]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e4bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4c2:	e01a      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f002 fa49 	bl	8010964 <RCCEx_PLL2_Config>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4d8:	e00f      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4de:	3328      	adds	r3, #40	@ 0x28
 800e4e0:	2102      	movs	r1, #2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f002 faf0 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4ee:	e004      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e4f6:	e000      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10a      	bne.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e502:	4b98      	ldr	r3, [pc, #608]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e506:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e50e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e510:	4a94      	ldr	r2, [pc, #592]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e512:	430b      	orrs	r3, r1
 800e514:	6513      	str	r3, [r2, #80]	@ 0x50
 800e516:	e003      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e51c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e52c:	f04f 0900 	mov.w	r9, #0
 800e530:	ea58 0309 	orrs.w	r3, r8, r9
 800e534:	d047      	beq.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e53a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d82a      	bhi.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e540:	a201      	add	r2, pc, #4	@ (adr r2, 800e548 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e546:	bf00      	nop
 800e548:	0800e55d 	.word	0x0800e55d
 800e54c:	0800e56b 	.word	0x0800e56b
 800e550:	0800e581 	.word	0x0800e581
 800e554:	0800e59f 	.word	0x0800e59f
 800e558:	0800e59f 	.word	0x0800e59f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e55c:	4b81      	ldr	r3, [pc, #516]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e560:	4a80      	ldr	r2, [pc, #512]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e568:	e01a      	b.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e56e:	3308      	adds	r3, #8
 800e570:	2100      	movs	r1, #0
 800e572:	4618      	mov	r0, r3
 800e574:	f002 f9f6 	bl	8010964 <RCCEx_PLL2_Config>
 800e578:	4603      	mov	r3, r0
 800e57a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e57e:	e00f      	b.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e584:	3328      	adds	r3, #40	@ 0x28
 800e586:	2100      	movs	r1, #0
 800e588:	4618      	mov	r0, r3
 800e58a:	f002 fa9d 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e58e:	4603      	mov	r3, r0
 800e590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e594:	e004      	b.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e59c:	e000      	b.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e59e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10a      	bne.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e5a8:	4b6e      	ldr	r3, [pc, #440]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5ac:	f023 0107 	bic.w	r1, r3, #7
 800e5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5b6:	4a6b      	ldr	r2, [pc, #428]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e5b8:	430b      	orrs	r3, r1
 800e5ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800e5bc:	e003      	b.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800e5d2:	f04f 0b00 	mov.w	fp, #0
 800e5d6:	ea5a 030b 	orrs.w	r3, sl, fp
 800e5da:	d05b      	beq.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e5e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e5e8:	d03b      	beq.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e5ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e5ee:	d834      	bhi.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e5f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e5f4:	d037      	beq.n	800e666 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e5f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e5fa:	d82e      	bhi.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e5fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e600:	d033      	beq.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e602:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e606:	d828      	bhi.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e60c:	d01a      	beq.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800e60e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e612:	d822      	bhi.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800e618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e61c:	d007      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800e61e:	e01c      	b.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e620:	4b50      	ldr	r3, [pc, #320]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e624:	4a4f      	ldr	r2, [pc, #316]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e62a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e62c:	e01e      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e632:	3308      	adds	r3, #8
 800e634:	2100      	movs	r1, #0
 800e636:	4618      	mov	r0, r3
 800e638:	f002 f994 	bl	8010964 <RCCEx_PLL2_Config>
 800e63c:	4603      	mov	r3, r0
 800e63e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e642:	e013      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e648:	3328      	adds	r3, #40	@ 0x28
 800e64a:	2100      	movs	r1, #0
 800e64c:	4618      	mov	r0, r3
 800e64e:	f002 fa3b 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e652:	4603      	mov	r3, r0
 800e654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e658:	e008      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e660:	e004      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e662:	bf00      	nop
 800e664:	e002      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e666:	bf00      	nop
 800e668:	e000      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e66a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e66c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10b      	bne.n	800e68c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e674:	4b3b      	ldr	r3, [pc, #236]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e678:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e680:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e684:	4a37      	ldr	r2, [pc, #220]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e686:	430b      	orrs	r3, r1
 800e688:	6593      	str	r3, [r2, #88]	@ 0x58
 800e68a:	e003      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e68c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e6a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e6aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	d05d      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e6bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e6c0:	d03b      	beq.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e6c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e6c6:	d834      	bhi.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e6c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e6cc:	d037      	beq.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e6ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e6d2:	d82e      	bhi.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e6d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e6d8:	d033      	beq.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e6da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e6de:	d828      	bhi.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e6e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e6e4:	d01a      	beq.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e6e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e6ea:	d822      	bhi.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e6f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e6f4:	d007      	beq.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e6f6:	e01c      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6fc:	4a19      	ldr	r2, [pc, #100]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e6fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e704:	e01e      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e70a:	3308      	adds	r3, #8
 800e70c:	2100      	movs	r1, #0
 800e70e:	4618      	mov	r0, r3
 800e710:	f002 f928 	bl	8010964 <RCCEx_PLL2_Config>
 800e714:	4603      	mov	r3, r0
 800e716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e71a:	e013      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e720:	3328      	adds	r3, #40	@ 0x28
 800e722:	2100      	movs	r1, #0
 800e724:	4618      	mov	r0, r3
 800e726:	f002 f9cf 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e72a:	4603      	mov	r3, r0
 800e72c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e730:	e008      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e732:	2301      	movs	r3, #1
 800e734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e738:	e004      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e73a:	bf00      	nop
 800e73c:	e002      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e73e:	bf00      	nop
 800e740:	e000      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e742:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10d      	bne.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e74c:	4b05      	ldr	r3, [pc, #20]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e74e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e750:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e758:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e75c:	4a01      	ldr	r2, [pc, #4]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e75e:	430b      	orrs	r3, r1
 800e760:	6593      	str	r3, [r2, #88]	@ 0x58
 800e762:	e005      	b.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e76c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e77c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e780:	2300      	movs	r3, #0
 800e782:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e786:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4313      	orrs	r3, r2
 800e78e:	d03a      	beq.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e796:	2b30      	cmp	r3, #48	@ 0x30
 800e798:	d01f      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e79a:	2b30      	cmp	r3, #48	@ 0x30
 800e79c:	d819      	bhi.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e79e:	2b20      	cmp	r3, #32
 800e7a0:	d00c      	beq.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e7a2:	2b20      	cmp	r3, #32
 800e7a4:	d815      	bhi.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d019      	beq.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e7aa:	2b10      	cmp	r3, #16
 800e7ac:	d111      	bne.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7ae:	4baa      	ldr	r3, [pc, #680]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b2:	4aa9      	ldr	r2, [pc, #676]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e7b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e7ba:	e011      	b.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	2102      	movs	r1, #2
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f002 f8cd 	bl	8010964 <RCCEx_PLL2_Config>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e7d0:	e006      	b.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7d8:	e002      	b.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e7da:	bf00      	nop
 800e7dc:	e000      	b.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e7de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e7e8:	4b9b      	ldr	r3, [pc, #620]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7f6:	4a98      	ldr	r2, [pc, #608]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e7f8:	430b      	orrs	r3, r1
 800e7fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7fc:	e003      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e816:	2300      	movs	r3, #0
 800e818:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e81c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e820:	460b      	mov	r3, r1
 800e822:	4313      	orrs	r3, r2
 800e824:	d051      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e82c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e830:	d035      	beq.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e836:	d82e      	bhi.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e83c:	d031      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e83e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e842:	d828      	bhi.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e848:	d01a      	beq.n	800e880 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e84a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e84e:	d822      	bhi.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e850:	2b00      	cmp	r3, #0
 800e852:	d003      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e858:	d007      	beq.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e85a:	e01c      	b.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e85c:	4b7e      	ldr	r3, [pc, #504]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e860:	4a7d      	ldr	r2, [pc, #500]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e868:	e01c      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e86e:	3308      	adds	r3, #8
 800e870:	2100      	movs	r1, #0
 800e872:	4618      	mov	r0, r3
 800e874:	f002 f876 	bl	8010964 <RCCEx_PLL2_Config>
 800e878:	4603      	mov	r3, r0
 800e87a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e87e:	e011      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e884:	3328      	adds	r3, #40	@ 0x28
 800e886:	2100      	movs	r1, #0
 800e888:	4618      	mov	r0, r3
 800e88a:	f002 f91d 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e894:	e006      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e89c:	e002      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10a      	bne.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e8ac:	4b6a      	ldr	r3, [pc, #424]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8ba:	4a67      	ldr	r2, [pc, #412]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e8bc:	430b      	orrs	r3, r1
 800e8be:	6513      	str	r3, [r2, #80]	@ 0x50
 800e8c0:	e003      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e8d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e8e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	d053      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e8f4:	d033      	beq.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e8f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e8fa:	d82c      	bhi.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e8fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e900:	d02f      	beq.n	800e962 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e902:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e906:	d826      	bhi.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e908:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e90c:	d02b      	beq.n	800e966 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e90e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e912:	d820      	bhi.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e918:	d012      	beq.n	800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e91e:	d81a      	bhi.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e920:	2b00      	cmp	r3, #0
 800e922:	d022      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e928:	d115      	bne.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e92e:	3308      	adds	r3, #8
 800e930:	2101      	movs	r1, #1
 800e932:	4618      	mov	r0, r3
 800e934:	f002 f816 	bl	8010964 <RCCEx_PLL2_Config>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e93e:	e015      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e944:	3328      	adds	r3, #40	@ 0x28
 800e946:	2101      	movs	r1, #1
 800e948:	4618      	mov	r0, r3
 800e94a:	f002 f8bd 	bl	8010ac8 <RCCEx_PLL3_Config>
 800e94e:	4603      	mov	r3, r0
 800e950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e954:	e00a      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e95c:	e006      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e95e:	bf00      	nop
 800e960:	e004      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e962:	bf00      	nop
 800e964:	e002      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e966:	bf00      	nop
 800e968:	e000      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e96c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e974:	4b38      	ldr	r3, [pc, #224]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e978:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e982:	4a35      	ldr	r2, [pc, #212]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e984:	430b      	orrs	r3, r1
 800e986:	6513      	str	r3, [r2, #80]	@ 0x50
 800e988:	e003      	b.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e98a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e98e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e99e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e9a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	d058      	beq.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e9ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e9be:	d033      	beq.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e9c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e9c4:	d82c      	bhi.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9ca:	d02f      	beq.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9d0:	d826      	bhi.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e9d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e9d6:	d02b      	beq.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e9d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e9dc:	d820      	bhi.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e9de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9e2:	d012      	beq.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e9e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9e8:	d81a      	bhi.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d022      	beq.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e9ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9f2:	d115      	bne.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	2101      	movs	r1, #1
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f001 ffb1 	bl	8010964 <RCCEx_PLL2_Config>
 800ea02:	4603      	mov	r3, r0
 800ea04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea08:	e015      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea0e:	3328      	adds	r3, #40	@ 0x28
 800ea10:	2101      	movs	r1, #1
 800ea12:	4618      	mov	r0, r3
 800ea14:	f002 f858 	bl	8010ac8 <RCCEx_PLL3_Config>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea1e:	e00a      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea26:	e006      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ea28:	bf00      	nop
 800ea2a:	e004      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ea2c:	bf00      	nop
 800ea2e:	e002      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ea30:	bf00      	nop
 800ea32:	e000      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ea34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10e      	bne.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ea3e:	4b06      	ldr	r3, [pc, #24]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ea40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ea46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ea4e:	4a02      	ldr	r2, [pc, #8]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ea50:	430b      	orrs	r3, r1
 800ea52:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea54:	e006      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ea56:	bf00      	nop
 800ea58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ea64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ea70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ea74:	2300      	movs	r3, #0
 800ea76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ea7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4313      	orrs	r3, r2
 800ea82:	d037      	beq.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ea84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea8e:	d00e      	beq.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ea90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea94:	d816      	bhi.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d018      	beq.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ea9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea9e:	d111      	bne.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaa0:	4bc4      	ldr	r3, [pc, #784]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa4:	4ac3      	ldr	r2, [pc, #780]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eaa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eaac:	e00f      	b.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eab2:	3308      	adds	r3, #8
 800eab4:	2101      	movs	r1, #1
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 ff54 	bl	8010964 <RCCEx_PLL2_Config>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eac2:	e004      	b.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eaca:	e000      	b.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800eacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d10a      	bne.n	800eaec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ead6:	4bb7      	ldr	r3, [pc, #732]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ead8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eada:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae4:	4ab3      	ldr	r2, [pc, #716]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eae6:	430b      	orrs	r3, r1
 800eae8:	6513      	str	r3, [r2, #80]	@ 0x50
 800eaea:	e003      	b.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eaf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800eaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800eb00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb04:	2300      	movs	r3, #0
 800eb06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800eb0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4313      	orrs	r3, r2
 800eb12:	d039      	beq.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800eb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d81c      	bhi.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb61 	.word	0x0800eb61
 800eb28:	0800eb35 	.word	0x0800eb35
 800eb2c:	0800eb43 	.word	0x0800eb43
 800eb30:	0800eb61 	.word	0x0800eb61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb34:	4b9f      	ldr	r3, [pc, #636]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb38:	4a9e      	ldr	r2, [pc, #632]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eb3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eb40:	e00f      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb46:	3308      	adds	r3, #8
 800eb48:	2102      	movs	r1, #2
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f001 ff0a 	bl	8010964 <RCCEx_PLL2_Config>
 800eb50:	4603      	mov	r3, r0
 800eb52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eb56:	e004      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb5e:	e000      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800eb60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10a      	bne.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800eb6a:	4b92      	ldr	r3, [pc, #584]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eb6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb6e:	f023 0103 	bic.w	r1, r3, #3
 800eb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb78:	4a8e      	ldr	r2, [pc, #568]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eb7a:	430b      	orrs	r3, r1
 800eb7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb7e:	e003      	b.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800eb94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4313      	orrs	r3, r2
 800eba6:	f000 8099 	beq.w	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ebaa:	4b83      	ldr	r3, [pc, #524]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a82      	ldr	r2, [pc, #520]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ebb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ebb6:	f7f8 fe25 	bl	8007804 <HAL_GetTick>
 800ebba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ebbe:	e00b      	b.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebc0:	f7f8 fe20 	bl	8007804 <HAL_GetTick>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	2b64      	cmp	r3, #100	@ 0x64
 800ebce:	d903      	bls.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ebd0:	2303      	movs	r3, #3
 800ebd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ebd6:	e005      	b.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ebd8:	4b77      	ldr	r3, [pc, #476]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0ed      	beq.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ebe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d173      	bne.n	800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ebec:	4b71      	ldr	r3, [pc, #452]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ebee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ebf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ebf8:	4053      	eors	r3, r2
 800ebfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d015      	beq.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec02:	4b6c      	ldr	r3, [pc, #432]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec0e:	4b69      	ldr	r3, [pc, #420]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec12:	4a68      	ldr	r2, [pc, #416]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ec1a:	4b66      	ldr	r3, [pc, #408]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec1e:	4a65      	ldr	r2, [pc, #404]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ec26:	4a63      	ldr	r2, [pc, #396]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ec2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ec36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec3a:	d118      	bne.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec3c:	f7f8 fde2 	bl	8007804 <HAL_GetTick>
 800ec40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec44:	e00d      	b.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec46:	f7f8 fddd 	bl	8007804 <HAL_GetTick>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ec50:	1ad2      	subs	r2, r2, r3
 800ec52:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d903      	bls.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ec60:	e005      	b.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec62:	4b54      	ldr	r3, [pc, #336]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec66:	f003 0302 	and.w	r3, r3, #2
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0eb      	beq.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ec6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d129      	bne.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ec76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ec7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec86:	d10e      	bne.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ec88:	4b4a      	ldr	r3, [pc, #296]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ec90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ec98:	091a      	lsrs	r2, r3, #4
 800ec9a:	4b48      	ldr	r3, [pc, #288]	@ (800edbc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	4a45      	ldr	r2, [pc, #276]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eca0:	430b      	orrs	r3, r1
 800eca2:	6113      	str	r3, [r2, #16]
 800eca4:	e005      	b.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800eca6:	4b43      	ldr	r3, [pc, #268]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	4a42      	ldr	r2, [pc, #264]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ecac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ecb0:	6113      	str	r3, [r2, #16]
 800ecb2:	4b40      	ldr	r3, [pc, #256]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ecb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ecb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ecbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecc2:	4a3c      	ldr	r2, [pc, #240]	@ (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ecc4:	430b      	orrs	r3, r1
 800ecc6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ecc8:	e008      	b.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ecca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ecd2:	e003      	b.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ecdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	f002 0301 	and.w	r3, r2, #1
 800ece8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ecec:	2300      	movs	r3, #0
 800ecee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ecf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	f000 808f 	beq.w	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ecfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed04:	2b28      	cmp	r3, #40	@ 0x28
 800ed06:	d871      	bhi.n	800edec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ed08:	a201      	add	r2, pc, #4	@ (adr r2, 800ed10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ed0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0e:	bf00      	nop
 800ed10:	0800edf5 	.word	0x0800edf5
 800ed14:	0800eded 	.word	0x0800eded
 800ed18:	0800eded 	.word	0x0800eded
 800ed1c:	0800eded 	.word	0x0800eded
 800ed20:	0800eded 	.word	0x0800eded
 800ed24:	0800eded 	.word	0x0800eded
 800ed28:	0800eded 	.word	0x0800eded
 800ed2c:	0800eded 	.word	0x0800eded
 800ed30:	0800edc1 	.word	0x0800edc1
 800ed34:	0800eded 	.word	0x0800eded
 800ed38:	0800eded 	.word	0x0800eded
 800ed3c:	0800eded 	.word	0x0800eded
 800ed40:	0800eded 	.word	0x0800eded
 800ed44:	0800eded 	.word	0x0800eded
 800ed48:	0800eded 	.word	0x0800eded
 800ed4c:	0800eded 	.word	0x0800eded
 800ed50:	0800edd7 	.word	0x0800edd7
 800ed54:	0800eded 	.word	0x0800eded
 800ed58:	0800eded 	.word	0x0800eded
 800ed5c:	0800eded 	.word	0x0800eded
 800ed60:	0800eded 	.word	0x0800eded
 800ed64:	0800eded 	.word	0x0800eded
 800ed68:	0800eded 	.word	0x0800eded
 800ed6c:	0800eded 	.word	0x0800eded
 800ed70:	0800edf5 	.word	0x0800edf5
 800ed74:	0800eded 	.word	0x0800eded
 800ed78:	0800eded 	.word	0x0800eded
 800ed7c:	0800eded 	.word	0x0800eded
 800ed80:	0800eded 	.word	0x0800eded
 800ed84:	0800eded 	.word	0x0800eded
 800ed88:	0800eded 	.word	0x0800eded
 800ed8c:	0800eded 	.word	0x0800eded
 800ed90:	0800edf5 	.word	0x0800edf5
 800ed94:	0800eded 	.word	0x0800eded
 800ed98:	0800eded 	.word	0x0800eded
 800ed9c:	0800eded 	.word	0x0800eded
 800eda0:	0800eded 	.word	0x0800eded
 800eda4:	0800eded 	.word	0x0800eded
 800eda8:	0800eded 	.word	0x0800eded
 800edac:	0800eded 	.word	0x0800eded
 800edb0:	0800edf5 	.word	0x0800edf5
 800edb4:	58024400 	.word	0x58024400
 800edb8:	58024800 	.word	0x58024800
 800edbc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edc4:	3308      	adds	r3, #8
 800edc6:	2101      	movs	r1, #1
 800edc8:	4618      	mov	r0, r3
 800edca:	f001 fdcb 	bl	8010964 <RCCEx_PLL2_Config>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800edd4:	e00f      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800edd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edda:	3328      	adds	r3, #40	@ 0x28
 800eddc:	2101      	movs	r1, #1
 800edde:	4618      	mov	r0, r3
 800ede0:	f001 fe72 	bl	8010ac8 <RCCEx_PLL3_Config>
 800ede4:	4603      	mov	r3, r0
 800ede6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800edea:	e004      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800edf2:	e000      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800edf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10a      	bne.n	800ee14 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800edfe:	4bbf      	ldr	r3, [pc, #764]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ee00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ee06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee0c:	4abb      	ldr	r2, [pc, #748]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ee0e:	430b      	orrs	r3, r1
 800ee10:	6553      	str	r3, [r2, #84]	@ 0x54
 800ee12:	e003      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ee1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	f002 0302 	and.w	r3, r2, #2
 800ee28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ee32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ee36:	460b      	mov	r3, r1
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	d041      	beq.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ee3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee42:	2b05      	cmp	r3, #5
 800ee44:	d824      	bhi.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ee46:	a201      	add	r2, pc, #4	@ (adr r2, 800ee4c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee99 	.word	0x0800ee99
 800ee50:	0800ee65 	.word	0x0800ee65
 800ee54:	0800ee7b 	.word	0x0800ee7b
 800ee58:	0800ee99 	.word	0x0800ee99
 800ee5c:	0800ee99 	.word	0x0800ee99
 800ee60:	0800ee99 	.word	0x0800ee99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee68:	3308      	adds	r3, #8
 800ee6a:	2101      	movs	r1, #1
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f001 fd79 	bl	8010964 <RCCEx_PLL2_Config>
 800ee72:	4603      	mov	r3, r0
 800ee74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ee78:	e00f      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee7e:	3328      	adds	r3, #40	@ 0x28
 800ee80:	2101      	movs	r1, #1
 800ee82:	4618      	mov	r0, r3
 800ee84:	f001 fe20 	bl	8010ac8 <RCCEx_PLL3_Config>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ee8e:	e004      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee96:	e000      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ee98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10a      	bne.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eea2:	4b96      	ldr	r3, [pc, #600]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea6:	f023 0107 	bic.w	r1, r3, #7
 800eeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb0:	4a92      	ldr	r2, [pc, #584]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eeb2:	430b      	orrs	r3, r1
 800eeb4:	6553      	str	r3, [r2, #84]	@ 0x54
 800eeb6:	e003      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eeb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	f002 0304 	and.w	r3, r2, #4
 800eecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eed0:	2300      	movs	r3, #0
 800eed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eed6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eeda:	460b      	mov	r3, r1
 800eedc:	4313      	orrs	r3, r2
 800eede:	d044      	beq.n	800ef6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800eee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eee8:	2b05      	cmp	r3, #5
 800eeea:	d825      	bhi.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800eeec:	a201      	add	r2, pc, #4	@ (adr r2, 800eef4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800eeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef2:	bf00      	nop
 800eef4:	0800ef41 	.word	0x0800ef41
 800eef8:	0800ef0d 	.word	0x0800ef0d
 800eefc:	0800ef23 	.word	0x0800ef23
 800ef00:	0800ef41 	.word	0x0800ef41
 800ef04:	0800ef41 	.word	0x0800ef41
 800ef08:	0800ef41 	.word	0x0800ef41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef10:	3308      	adds	r3, #8
 800ef12:	2101      	movs	r1, #1
 800ef14:	4618      	mov	r0, r3
 800ef16:	f001 fd25 	bl	8010964 <RCCEx_PLL2_Config>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef20:	e00f      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef26:	3328      	adds	r3, #40	@ 0x28
 800ef28:	2101      	movs	r1, #1
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f001 fdcc 	bl	8010ac8 <RCCEx_PLL3_Config>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef36:	e004      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ef3e:	e000      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ef40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10b      	bne.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ef4a:	4b6c      	ldr	r3, [pc, #432]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ef4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef4e:	f023 0107 	bic.w	r1, r3, #7
 800ef52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef5a:	4a68      	ldr	r2, [pc, #416]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ef5c:	430b      	orrs	r3, r1
 800ef5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef60:	e003      	b.n	800ef6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ef6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f002 0320 	and.w	r3, r2, #32
 800ef76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ef80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4313      	orrs	r3, r2
 800ef88:	d055      	beq.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ef8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef96:	d033      	beq.n	800f000 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ef98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef9c:	d82c      	bhi.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ef9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efa2:	d02f      	beq.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800efa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efa8:	d826      	bhi.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800efaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efae:	d02b      	beq.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800efb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efb4:	d820      	bhi.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800efb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efba:	d012      	beq.n	800efe2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800efbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efc0:	d81a      	bhi.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d022      	beq.n	800f00c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800efc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efca:	d115      	bne.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd0:	3308      	adds	r3, #8
 800efd2:	2100      	movs	r1, #0
 800efd4:	4618      	mov	r0, r3
 800efd6:	f001 fcc5 	bl	8010964 <RCCEx_PLL2_Config>
 800efda:	4603      	mov	r3, r0
 800efdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800efe0:	e015      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800efe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efe6:	3328      	adds	r3, #40	@ 0x28
 800efe8:	2102      	movs	r1, #2
 800efea:	4618      	mov	r0, r3
 800efec:	f001 fd6c 	bl	8010ac8 <RCCEx_PLL3_Config>
 800eff0:	4603      	mov	r3, r0
 800eff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eff6:	e00a      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eff8:	2301      	movs	r3, #1
 800effa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800effe:	e006      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f000:	bf00      	nop
 800f002:	e004      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f004:	bf00      	nop
 800f006:	e002      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f008:	bf00      	nop
 800f00a:	e000      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f00e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10b      	bne.n	800f02e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f016:	4b39      	ldr	r3, [pc, #228]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f01a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f026:	4a35      	ldr	r2, [pc, #212]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f028:	430b      	orrs	r3, r1
 800f02a:	6553      	str	r3, [r2, #84]	@ 0x54
 800f02c:	e003      	b.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f02e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f032:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f046:	2300      	movs	r3, #0
 800f048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f04c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f050:	460b      	mov	r3, r1
 800f052:	4313      	orrs	r3, r2
 800f054:	d058      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f05e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f062:	d033      	beq.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800f064:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f068:	d82c      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f06a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f06e:	d02f      	beq.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f074:	d826      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f07a:	d02b      	beq.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800f07c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f080:	d820      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f086:	d012      	beq.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800f088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f08c:	d81a      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d022      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800f092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f096:	d115      	bne.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f09c:	3308      	adds	r3, #8
 800f09e:	2100      	movs	r1, #0
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f001 fc5f 	bl	8010964 <RCCEx_PLL2_Config>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f0ac:	e015      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0b2:	3328      	adds	r3, #40	@ 0x28
 800f0b4:	2102      	movs	r1, #2
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f001 fd06 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f0c2:	e00a      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f0ca:	e006      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f0cc:	bf00      	nop
 800f0ce:	e004      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f0d0:	bf00      	nop
 800f0d2:	e002      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f0d4:	bf00      	nop
 800f0d6:	e000      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f0d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10e      	bne.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f0e2:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f0f2:	4a02      	ldr	r2, [pc, #8]	@ (800f0fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f0f4:	430b      	orrs	r3, r1
 800f0f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800f0f8:	e006      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800f0fa:	bf00      	nop
 800f0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f114:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f118:	2300      	movs	r3, #0
 800f11a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f11e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f122:	460b      	mov	r3, r1
 800f124:	4313      	orrs	r3, r2
 800f126:	d055      	beq.n	800f1d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f12c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f130:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f134:	d033      	beq.n	800f19e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800f136:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f13a:	d82c      	bhi.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f140:	d02f      	beq.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800f142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f146:	d826      	bhi.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f148:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f14c:	d02b      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800f14e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f152:	d820      	bhi.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f158:	d012      	beq.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800f15a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f15e:	d81a      	bhi.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f160:	2b00      	cmp	r3, #0
 800f162:	d022      	beq.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800f164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f168:	d115      	bne.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f16e:	3308      	adds	r3, #8
 800f170:	2100      	movs	r1, #0
 800f172:	4618      	mov	r0, r3
 800f174:	f001 fbf6 	bl	8010964 <RCCEx_PLL2_Config>
 800f178:	4603      	mov	r3, r0
 800f17a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f17e:	e015      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f184:	3328      	adds	r3, #40	@ 0x28
 800f186:	2102      	movs	r1, #2
 800f188:	4618      	mov	r0, r3
 800f18a:	f001 fc9d 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f18e:	4603      	mov	r3, r0
 800f190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f194:	e00a      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f196:	2301      	movs	r3, #1
 800f198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f19c:	e006      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f19e:	bf00      	nop
 800f1a0:	e004      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f1a2:	bf00      	nop
 800f1a4:	e002      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f1a6:	bf00      	nop
 800f1a8:	e000      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10b      	bne.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f1b4:	4ba0      	ldr	r3, [pc, #640]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1c4:	4a9c      	ldr	r2, [pc, #624]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f1c6:	430b      	orrs	r3, r1
 800f1c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1ca:	e003      	b.n	800f1d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800f1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f002 0308 	and.w	r3, r2, #8
 800f1e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f1ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	d01e      	beq.n	800f232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800f1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f200:	d10c      	bne.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f206:	3328      	adds	r3, #40	@ 0x28
 800f208:	2102      	movs	r1, #2
 800f20a:	4618      	mov	r0, r3
 800f20c:	f001 fc5c 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d002      	beq.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800f21c:	4b86      	ldr	r3, [pc, #536]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f220:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22c:	4a82      	ldr	r2, [pc, #520]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f22e:	430b      	orrs	r3, r1
 800f230:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23a:	f002 0310 	and.w	r3, r2, #16
 800f23e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f242:	2300      	movs	r3, #0
 800f244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f248:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f24c:	460b      	mov	r3, r1
 800f24e:	4313      	orrs	r3, r2
 800f250:	d01e      	beq.n	800f290 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f25e:	d10c      	bne.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f264:	3328      	adds	r3, #40	@ 0x28
 800f266:	2102      	movs	r1, #2
 800f268:	4618      	mov	r0, r3
 800f26a:	f001 fc2d 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f27a:	4b6f      	ldr	r3, [pc, #444]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f27c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f27e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f28a:	4a6b      	ldr	r2, [pc, #428]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f28c:	430b      	orrs	r3, r1
 800f28e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f29c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f29e:	2300      	movs	r3, #0
 800f2a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	d03e      	beq.n	800f32a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2b8:	d022      	beq.n	800f300 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800f2ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2be:	d81b      	bhi.n	800f2f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800f2c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2c8:	d00b      	beq.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800f2ca:	e015      	b.n	800f2f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f001 fb45 	bl	8010964 <RCCEx_PLL2_Config>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f2e0:	e00f      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2e6:	3328      	adds	r3, #40	@ 0x28
 800f2e8:	2102      	movs	r1, #2
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f001 fbec 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f2f6:	e004      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f2fe:	e000      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800f300:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10b      	bne.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f30a:	4b4b      	ldr	r3, [pc, #300]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f30e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f31a:	4a47      	ldr	r2, [pc, #284]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f31c:	430b      	orrs	r3, r1
 800f31e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f320:	e003      	b.n	800f32a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f326:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f336:	673b      	str	r3, [r7, #112]	@ 0x70
 800f338:	2300      	movs	r3, #0
 800f33a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f33c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f340:	460b      	mov	r3, r1
 800f342:	4313      	orrs	r3, r2
 800f344:	d03b      	beq.n	800f3be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f34e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f352:	d01f      	beq.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800f354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f358:	d818      	bhi.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800f35a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f35e:	d003      	beq.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800f360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f364:	d007      	beq.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800f366:	e011      	b.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f368:	4b33      	ldr	r3, [pc, #204]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	4a32      	ldr	r2, [pc, #200]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f36e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f374:	e00f      	b.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f37a:	3328      	adds	r3, #40	@ 0x28
 800f37c:	2101      	movs	r1, #1
 800f37e:	4618      	mov	r0, r3
 800f380:	f001 fba2 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f384:	4603      	mov	r3, r0
 800f386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f38a:	e004      	b.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f392:	e000      	b.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f394:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10b      	bne.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f39e:	4b26      	ldr	r3, [pc, #152]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3ae:	4a22      	ldr	r2, [pc, #136]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f3b0:	430b      	orrs	r3, r1
 800f3b2:	6553      	str	r3, [r2, #84]	@ 0x54
 800f3b4:	e003      	b.n	800f3be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f3ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	d034      	beq.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f3e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3e8:	d007      	beq.n	800f3fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f3ea:	e011      	b.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3ec:	4b12      	ldr	r3, [pc, #72]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f0:	4a11      	ldr	r2, [pc, #68]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f3f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f3f8:	e00e      	b.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3fe:	3308      	adds	r3, #8
 800f400:	2102      	movs	r1, #2
 800f402:	4618      	mov	r0, r3
 800f404:	f001 faae 	bl	8010964 <RCCEx_PLL2_Config>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f40e:	e003      	b.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f416:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10d      	bne.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f420:	4b05      	ldr	r3, [pc, #20]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f424:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f42e:	4a02      	ldr	r2, [pc, #8]	@ (800f438 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f430:	430b      	orrs	r3, r1
 800f432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f434:	e006      	b.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800f436:	bf00      	nop
 800f438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f43c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f450:	663b      	str	r3, [r7, #96]	@ 0x60
 800f452:	2300      	movs	r3, #0
 800f454:	667b      	str	r3, [r7, #100]	@ 0x64
 800f456:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f45a:	460b      	mov	r3, r1
 800f45c:	4313      	orrs	r3, r2
 800f45e:	d00c      	beq.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f464:	3328      	adds	r3, #40	@ 0x28
 800f466:	2102      	movs	r1, #2
 800f468:	4618      	mov	r0, r3
 800f46a:	f001 fb2d 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f482:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f486:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f488:	2300      	movs	r3, #0
 800f48a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f48c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f490:	460b      	mov	r3, r1
 800f492:	4313      	orrs	r3, r2
 800f494:	d036      	beq.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f49a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f49c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4a0:	d018      	beq.n	800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800f4a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4a6:	d811      	bhi.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4ac:	d014      	beq.n	800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800f4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4b2:	d80b      	bhi.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d011      	beq.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800f4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4bc:	d106      	bne.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4be:	4bb7      	ldr	r3, [pc, #732]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c2:	4ab6      	ldr	r2, [pc, #728]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f4c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f4ca:	e008      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f4d2:	e004      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f4d4:	bf00      	nop
 800f4d6:	e002      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f4d8:	bf00      	nop
 800f4da:	e000      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f4dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10a      	bne.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f4e6:	4bad      	ldr	r3, [pc, #692]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4f4:	4aa9      	ldr	r2, [pc, #676]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f4f6:	430b      	orrs	r3, r1
 800f4f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800f4fa:	e003      	b.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f510:	653b      	str	r3, [r7, #80]	@ 0x50
 800f512:	2300      	movs	r3, #0
 800f514:	657b      	str	r3, [r7, #84]	@ 0x54
 800f516:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f51a:	460b      	mov	r3, r1
 800f51c:	4313      	orrs	r3, r2
 800f51e:	d009      	beq.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f520:	4b9e      	ldr	r3, [pc, #632]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f524:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f52e:	4a9b      	ldr	r2, [pc, #620]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f530:	430b      	orrs	r3, r1
 800f532:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f542:	2300      	movs	r3, #0
 800f544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f546:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f54a:	460b      	mov	r3, r1
 800f54c:	4313      	orrs	r3, r2
 800f54e:	d009      	beq.n	800f564 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f550:	4b92      	ldr	r3, [pc, #584]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f554:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f55c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f55e:	4a8f      	ldr	r2, [pc, #572]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f560:	430b      	orrs	r3, r1
 800f562:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f570:	643b      	str	r3, [r7, #64]	@ 0x40
 800f572:	2300      	movs	r3, #0
 800f574:	647b      	str	r3, [r7, #68]	@ 0x44
 800f576:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f57a:	460b      	mov	r3, r1
 800f57c:	4313      	orrs	r3, r2
 800f57e:	d00e      	beq.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f580:	4b86      	ldr	r3, [pc, #536]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	4a85      	ldr	r2, [pc, #532]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f586:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f58a:	6113      	str	r3, [r2, #16]
 800f58c:	4b83      	ldr	r3, [pc, #524]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f58e:	6919      	ldr	r1, [r3, #16]
 800f590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f598:	4a80      	ldr	r2, [pc, #512]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f59a:	430b      	orrs	r3, r1
 800f59c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	d009      	beq.n	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f5ba:	4b78      	ldr	r3, [pc, #480]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f5bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5c8:	4a74      	ldr	r2, [pc, #464]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f5ca:	430b      	orrs	r3, r1
 800f5cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f5da:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5dc:	2300      	movs	r3, #0
 800f5de:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	d00a      	beq.n	800f600 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f5ea:	4b6c      	ldr	r3, [pc, #432]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5fa:	4a68      	ldr	r2, [pc, #416]	@ (800f79c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f5fc:	430b      	orrs	r3, r1
 800f5fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	2100      	movs	r1, #0
 800f60a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f612:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f616:	460b      	mov	r3, r1
 800f618:	4313      	orrs	r3, r2
 800f61a:	d011      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f620:	3308      	adds	r3, #8
 800f622:	2100      	movs	r1, #0
 800f624:	4618      	mov	r0, r3
 800f626:	f001 f99d 	bl	8010964 <RCCEx_PLL2_Config>
 800f62a:	4603      	mov	r3, r0
 800f62c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f63c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	2100      	movs	r1, #0
 800f64a:	6239      	str	r1, [r7, #32]
 800f64c:	f003 0302 	and.w	r3, r3, #2
 800f650:	627b      	str	r3, [r7, #36]	@ 0x24
 800f652:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f656:	460b      	mov	r3, r1
 800f658:	4313      	orrs	r3, r2
 800f65a:	d011      	beq.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f660:	3308      	adds	r3, #8
 800f662:	2101      	movs	r1, #1
 800f664:	4618      	mov	r0, r3
 800f666:	f001 f97d 	bl	8010964 <RCCEx_PLL2_Config>
 800f66a:	4603      	mov	r3, r0
 800f66c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f674:	2b00      	cmp	r3, #0
 800f676:	d003      	beq.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f67c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	2100      	movs	r1, #0
 800f68a:	61b9      	str	r1, [r7, #24]
 800f68c:	f003 0304 	and.w	r3, r3, #4
 800f690:	61fb      	str	r3, [r7, #28]
 800f692:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f696:	460b      	mov	r3, r1
 800f698:	4313      	orrs	r3, r2
 800f69a:	d011      	beq.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	2102      	movs	r1, #2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f001 f95d 	bl	8010964 <RCCEx_PLL2_Config>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f6b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d003      	beq.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	6139      	str	r1, [r7, #16]
 800f6cc:	f003 0308 	and.w	r3, r3, #8
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	d011      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6e0:	3328      	adds	r3, #40	@ 0x28
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f001 f9ef 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f6f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	2100      	movs	r1, #0
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	f003 0310 	and.w	r3, r3, #16
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f716:	460b      	mov	r3, r1
 800f718:	4313      	orrs	r3, r2
 800f71a:	d011      	beq.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f720:	3328      	adds	r3, #40	@ 0x28
 800f722:	2101      	movs	r1, #1
 800f724:	4618      	mov	r0, r3
 800f726:	f001 f9cf 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f72a:	4603      	mov	r3, r0
 800f72c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f73c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	2100      	movs	r1, #0
 800f74a:	6039      	str	r1, [r7, #0]
 800f74c:	f003 0320 	and.w	r3, r3, #32
 800f750:	607b      	str	r3, [r7, #4]
 800f752:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f756:	460b      	mov	r3, r1
 800f758:	4313      	orrs	r3, r2
 800f75a:	d011      	beq.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f760:	3328      	adds	r3, #40	@ 0x28
 800f762:	2102      	movs	r1, #2
 800f764:	4618      	mov	r0, r3
 800f766:	f001 f9af 	bl	8010ac8 <RCCEx_PLL3_Config>
 800f76a:	4603      	mov	r3, r0
 800f76c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f774:	2b00      	cmp	r3, #0
 800f776:	d003      	beq.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f77c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f780:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f784:	2b00      	cmp	r3, #0
 800f786:	d101      	bne.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	e000      	b.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
}
 800f78e:	4618      	mov	r0, r3
 800f790:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f794:	46bd      	mov	sp, r7
 800f796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f79a:	bf00      	nop
 800f79c:	58024400 	.word	0x58024400

0800f7a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b090      	sub	sp, #64	@ 0x40
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f7b2:	430b      	orrs	r3, r1
 800f7b4:	f040 8094 	bne.w	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f7b8:	4b9b      	ldr	r3, [pc, #620]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f7ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7bc:	f003 0307 	and.w	r3, r3, #7
 800f7c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	f200 8087 	bhi.w	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d0:	0800f7e5 	.word	0x0800f7e5
 800f7d4:	0800f80d 	.word	0x0800f80d
 800f7d8:	0800f835 	.word	0x0800f835
 800f7dc:	0800f8d1 	.word	0x0800f8d1
 800f7e0:	0800f85d 	.word	0x0800f85d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f7e4:	4b90      	ldr	r3, [pc, #576]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7f0:	d108      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 ff62 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f800:	f000 bc93 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f804:	2300      	movs	r3, #0
 800f806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f808:	f000 bc8f 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f80c:	4b86      	ldr	r3, [pc, #536]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f818:	d108      	bne.n	800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f81a:	f107 0318 	add.w	r3, r7, #24
 800f81e:	4618      	mov	r0, r3
 800f820:	f000 fca6 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f828:	f000 bc7f 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f830:	f000 bc7b 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f834:	4b7c      	ldr	r3, [pc, #496]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f83c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f840:	d108      	bne.n	800f854 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f842:	f107 030c 	add.w	r3, r7, #12
 800f846:	4618      	mov	r0, r3
 800f848:	f000 fde6 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f850:	f000 bc6b 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f858:	f000 bc67 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f85c:	4b72      	ldr	r3, [pc, #456]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f85e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f860:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f864:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f866:	4b70      	ldr	r3, [pc, #448]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 0304 	and.w	r3, r3, #4
 800f86e:	2b04      	cmp	r3, #4
 800f870:	d10c      	bne.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f874:	2b00      	cmp	r3, #0
 800f876:	d109      	bne.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f878:	4b6b      	ldr	r3, [pc, #428]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	08db      	lsrs	r3, r3, #3
 800f87e:	f003 0303 	and.w	r3, r3, #3
 800f882:	4a6a      	ldr	r2, [pc, #424]	@ (800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f884:	fa22 f303 	lsr.w	r3, r2, r3
 800f888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f88a:	e01f      	b.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f88c:	4b66      	ldr	r3, [pc, #408]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f898:	d106      	bne.n	800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8a0:	d102      	bne.n	800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f8a2:	4b63      	ldr	r3, [pc, #396]	@ (800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8a6:	e011      	b.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f8a8:	4b5f      	ldr	r3, [pc, #380]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8b4:	d106      	bne.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8bc:	d102      	bne.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f8be:	4b5d      	ldr	r3, [pc, #372]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c2:	e003      	b.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f8c8:	f000 bc2f 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8cc:	f000 bc2d 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f8d0:	4b59      	ldr	r3, [pc, #356]	@ (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d4:	f000 bc29 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8dc:	f000 bc25 	b.w	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f8e8:	430b      	orrs	r3, r1
 800f8ea:	f040 80a7 	bne.w	800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f8ee:	4b4e      	ldr	r3, [pc, #312]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f8f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f8fe:	d054      	beq.n	800f9aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f906:	f200 808b 	bhi.w	800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f910:	f000 8083 	beq.w	800fa1a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f916:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f91a:	f200 8081 	bhi.w	800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f924:	d02f      	beq.n	800f986 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f92c:	d878      	bhi.n	800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f930:	2b00      	cmp	r3, #0
 800f932:	d004      	beq.n	800f93e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f93a:	d012      	beq.n	800f962 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f93c:	e070      	b.n	800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f93e:	4b3a      	ldr	r3, [pc, #232]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f94a:	d107      	bne.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f94c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f950:	4618      	mov	r0, r3
 800f952:	f000 feb5 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f95a:	e3e6      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f960:	e3e3      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f962:	4b31      	ldr	r3, [pc, #196]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f96a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f96e:	d107      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f970:	f107 0318 	add.w	r3, r7, #24
 800f974:	4618      	mov	r0, r3
 800f976:	f000 fbfb 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f97e:	e3d4      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f984:	e3d1      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f986:	4b28      	ldr	r3, [pc, #160]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f992:	d107      	bne.n	800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f994:	f107 030c 	add.w	r3, r7, #12
 800f998:	4618      	mov	r0, r3
 800f99a:	f000 fd3d 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9a2:	e3c2      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9a8:	e3bf      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f9b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f003 0304 	and.w	r3, r3, #4
 800f9bc:	2b04      	cmp	r3, #4
 800f9be:	d10c      	bne.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f9c6:	4b18      	ldr	r3, [pc, #96]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	08db      	lsrs	r3, r3, #3
 800f9cc:	f003 0303 	and.w	r3, r3, #3
 800f9d0:	4a16      	ldr	r2, [pc, #88]	@ (800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9d8:	e01e      	b.n	800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f9da:	4b13      	ldr	r3, [pc, #76]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9e6:	d106      	bne.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9ee:	d102      	bne.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9f4:	e010      	b.n	800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa02:	d106      	bne.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800fa04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa0a:	d102      	bne.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fa0c:	4b09      	ldr	r3, [pc, #36]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa10:	e002      	b.n	800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fa16:	e388      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fa18:	e387      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fa1a:	4b07      	ldr	r3, [pc, #28]	@ (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa1e:	e384      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa24:	e381      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fa26:	bf00      	nop
 800fa28:	58024400 	.word	0x58024400
 800fa2c:	03d09000 	.word	0x03d09000
 800fa30:	003d0900 	.word	0x003d0900
 800fa34:	016e3600 	.word	0x016e3600
 800fa38:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800fa3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa40:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800fa44:	430b      	orrs	r3, r1
 800fa46:	f040 809c 	bne.w	800fb82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800fa4a:	4b9e      	ldr	r3, [pc, #632]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fa4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa4e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800fa52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fa5a:	d054      	beq.n	800fb06 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fa62:	f200 808b 	bhi.w	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800fa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fa6c:	f000 8083 	beq.w	800fb76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fa76:	f200 8081 	bhi.w	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fa80:	d02f      	beq.n	800fae2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800fa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fa88:	d878      	bhi.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d004      	beq.n	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800fa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa96:	d012      	beq.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800fa98:	e070      	b.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fa9a:	4b8a      	ldr	r3, [pc, #552]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800faa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800faa6:	d107      	bne.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800faa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800faac:	4618      	mov	r0, r3
 800faae:	f000 fe07 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fab6:	e338      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fab8:	2300      	movs	r3, #0
 800faba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fabc:	e335      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fabe:	4b81      	ldr	r3, [pc, #516]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800faca:	d107      	bne.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800facc:	f107 0318 	add.w	r3, r7, #24
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fb4d 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fada:	e326      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fae0:	e323      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fae2:	4b78      	ldr	r3, [pc, #480]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800faea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800faee:	d107      	bne.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800faf0:	f107 030c 	add.w	r3, r7, #12
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 fc8f 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fafe:	e314      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb04:	e311      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb06:	4b6f      	ldr	r3, [pc, #444]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb10:	4b6c      	ldr	r3, [pc, #432]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f003 0304 	and.w	r3, r3, #4
 800fb18:	2b04      	cmp	r3, #4
 800fb1a:	d10c      	bne.n	800fb36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800fb1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d109      	bne.n	800fb36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb22:	4b68      	ldr	r3, [pc, #416]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	08db      	lsrs	r3, r3, #3
 800fb28:	f003 0303 	and.w	r3, r3, #3
 800fb2c:	4a66      	ldr	r2, [pc, #408]	@ (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800fb2e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb34:	e01e      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb36:	4b63      	ldr	r3, [pc, #396]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb42:	d106      	bne.n	800fb52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800fb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb4a:	d102      	bne.n	800fb52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb4c:	4b5f      	ldr	r3, [pc, #380]	@ (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800fb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb50:	e010      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb52:	4b5c      	ldr	r3, [pc, #368]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb5e:	d106      	bne.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800fb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb66:	d102      	bne.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb68:	4b59      	ldr	r3, [pc, #356]	@ (800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb6c:	e002      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fb72:	e2da      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fb74:	e2d9      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fb76:	4b57      	ldr	r3, [pc, #348]	@ (800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb7a:	e2d6      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb80:	e2d3      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800fb82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb86:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	f040 80a7 	bne.w	800fcde <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800fb90:	4b4c      	ldr	r3, [pc, #304]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fb92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fb98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fba0:	d055      	beq.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800fba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fba8:	f200 8096 	bhi.w	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800fbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fbb2:	f000 8084 	beq.w	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800fbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fbbc:	f200 808c 	bhi.w	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fbc6:	d030      	beq.n	800fc2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800fbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fbce:	f200 8083 	bhi.w	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d004      	beq.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800fbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbde:	d012      	beq.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800fbe0:	e07a      	b.n	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fbe2:	4b38      	ldr	r3, [pc, #224]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fbea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbee:	d107      	bne.n	800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f000 fd63 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbfe:	e294      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc04:	e291      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc06:	4b2f      	ldr	r3, [pc, #188]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc12:	d107      	bne.n	800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc14:	f107 0318 	add.w	r3, r7, #24
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f000 faa9 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc22:	e282      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc24:	2300      	movs	r3, #0
 800fc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc28:	e27f      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc2a:	4b26      	ldr	r3, [pc, #152]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc36:	d107      	bne.n	800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc38:	f107 030c 	add.w	r3, r7, #12
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fbeb 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc46:	e270      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc4c:	e26d      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fc4e:	4b1d      	ldr	r3, [pc, #116]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fc56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fc58:	4b1a      	ldr	r3, [pc, #104]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b04      	cmp	r3, #4
 800fc62:	d10c      	bne.n	800fc7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800fc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d109      	bne.n	800fc7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc6a:	4b16      	ldr	r3, [pc, #88]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	08db      	lsrs	r3, r3, #3
 800fc70:	f003 0303 	and.w	r3, r3, #3
 800fc74:	4a14      	ldr	r2, [pc, #80]	@ (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800fc76:	fa22 f303 	lsr.w	r3, r2, r3
 800fc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc7c:	e01e      	b.n	800fcbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fc7e:	4b11      	ldr	r3, [pc, #68]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc8a:	d106      	bne.n	800fc9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800fc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc92:	d102      	bne.n	800fc9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fc94:	4b0d      	ldr	r3, [pc, #52]	@ (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800fc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc98:	e010      	b.n	800fcbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fc9a:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fca6:	d106      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800fca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcae:	d102      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fcb0:	4b07      	ldr	r3, [pc, #28]	@ (800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcb4:	e002      	b.n	800fcbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fcba:	e236      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fcbc:	e235      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fcbe:	4b05      	ldr	r3, [pc, #20]	@ (800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcc2:	e232      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fcc4:	58024400 	.word	0x58024400
 800fcc8:	03d09000 	.word	0x03d09000
 800fccc:	003d0900 	.word	0x003d0900
 800fcd0:	016e3600 	.word	0x016e3600
 800fcd4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcdc:	e225      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800fcde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fce2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800fce6:	430b      	orrs	r3, r1
 800fce8:	f040 8085 	bne.w	800fdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800fcec:	4b9c      	ldr	r3, [pc, #624]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fcee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcf0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800fcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fcfc:	d06b      	beq.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fd04:	d874      	bhi.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800fd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fd0c:	d056      	beq.n	800fdbc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fd14:	d86c      	bhi.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800fd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fd1c:	d03b      	beq.n	800fd96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fd24:	d864      	bhi.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800fd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd2c:	d021      	beq.n	800fd72 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd34:	d85c      	bhi.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800fd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d004      	beq.n	800fd46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd42:	d004      	beq.n	800fd4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800fd44:	e054      	b.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800fd46:	f7fe fb5f 	bl	800e408 <HAL_RCC_GetPCLK1Freq>
 800fd4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd4c:	e1ed      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd4e:	4b84      	ldr	r3, [pc, #528]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd5a:	d107      	bne.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd5c:	f107 0318 	add.w	r3, r7, #24
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 fa05 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd6a:	e1de      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd70:	e1db      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fd72:	4b7b      	ldr	r3, [pc, #492]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd7e:	d107      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd80:	f107 030c 	add.w	r3, r7, #12
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 fb47 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8e:	e1cc      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	e1c9      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fd96:	4b72      	ldr	r3, [pc, #456]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b04      	cmp	r3, #4
 800fda0:	d109      	bne.n	800fdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fda2:	4b6f      	ldr	r3, [pc, #444]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	08db      	lsrs	r3, r3, #3
 800fda8:	f003 0303 	and.w	r3, r3, #3
 800fdac:	4a6d      	ldr	r2, [pc, #436]	@ (800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fdae:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb4:	e1b9      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdba:	e1b6      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fdbc:	4b68      	ldr	r3, [pc, #416]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdc8:	d102      	bne.n	800fdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800fdca:	4b67      	ldr	r3, [pc, #412]	@ (800ff68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdce:	e1ac      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdd4:	e1a9      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fdd6:	4b62      	ldr	r3, [pc, #392]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fdde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fde2:	d102      	bne.n	800fdea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800fde4:	4b61      	ldr	r3, [pc, #388]	@ (800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fde8:	e19f      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdee:	e19c      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdf4:	e199      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fdf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdfa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800fdfe:	430b      	orrs	r3, r1
 800fe00:	d173      	bne.n	800feea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fe02:	4b57      	ldr	r3, [pc, #348]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fe0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe12:	d02f      	beq.n	800fe74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800fe14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe1a:	d863      	bhi.n	800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d004      	beq.n	800fe2c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800fe22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe28:	d012      	beq.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800fe2a:	e05b      	b.n	800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe2c:	4b4c      	ldr	r3, [pc, #304]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fe38:	d107      	bne.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe3a:	f107 0318 	add.w	r3, r7, #24
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 f996 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe48:	e16f      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe4e:	e16c      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe50:	4b43      	ldr	r3, [pc, #268]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe5c:	d107      	bne.n	800fe6e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe5e:	f107 030c 	add.w	r3, r7, #12
 800fe62:	4618      	mov	r0, r3
 800fe64:	f000 fad8 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe6c:	e15d      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe72:	e15a      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe74:	4b3a      	ldr	r3, [pc, #232]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe7e:	4b38      	ldr	r3, [pc, #224]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f003 0304 	and.w	r3, r3, #4
 800fe86:	2b04      	cmp	r3, #4
 800fe88:	d10c      	bne.n	800fea4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d109      	bne.n	800fea4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe90:	4b33      	ldr	r3, [pc, #204]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	08db      	lsrs	r3, r3, #3
 800fe96:	f003 0303 	and.w	r3, r3, #3
 800fe9a:	4a32      	ldr	r2, [pc, #200]	@ (800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fe9c:	fa22 f303 	lsr.w	r3, r2, r3
 800fea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fea2:	e01e      	b.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fea4:	4b2e      	ldr	r3, [pc, #184]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800feac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800feb0:	d106      	bne.n	800fec0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800feb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800feb8:	d102      	bne.n	800fec0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800feba:	4b2b      	ldr	r3, [pc, #172]	@ (800ff68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800febc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800febe:	e010      	b.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fec0:	4b27      	ldr	r3, [pc, #156]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fecc:	d106      	bne.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800fece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fed4:	d102      	bne.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fed6:	4b25      	ldr	r3, [pc, #148]	@ (800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feda:	e002      	b.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fee0:	e123      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fee2:	e122      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fee4:	2300      	movs	r3, #0
 800fee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee8:	e11f      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800feea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800fef2:	430b      	orrs	r3, r1
 800fef4:	d13c      	bne.n	800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fef6:	4b1a      	ldr	r3, [pc, #104]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fefa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fefe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ff00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d004      	beq.n	800ff10 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ff06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff0c:	d012      	beq.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ff0e:	e023      	b.n	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff10:	4b13      	ldr	r3, [pc, #76]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ff18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ff1c:	d107      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fbcc 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff2c:	e0fd      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff32:	e0fa      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff34:	4b0a      	ldr	r3, [pc, #40]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff40:	d107      	bne.n	800ff52 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff42:	f107 0318 	add.w	r3, r7, #24
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 f912 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff50:	e0eb      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ff52:	2300      	movs	r3, #0
 800ff54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff56:	e0e8      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff5c:	e0e5      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ff5e:	bf00      	nop
 800ff60:	58024400 	.word	0x58024400
 800ff64:	03d09000 	.word	0x03d09000
 800ff68:	003d0900 	.word	0x003d0900
 800ff6c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ff70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff74:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ff78:	430b      	orrs	r3, r1
 800ff7a:	f040 8085 	bne.w	8010088 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ff7e:	4b6d      	ldr	r3, [pc, #436]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ff80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff82:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ff86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ff88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff8e:	d06b      	beq.n	8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ff90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff96:	d874      	bhi.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ff98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff9e:	d056      	beq.n	801004e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffa6:	d86c      	bhi.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ffae:	d03b      	beq.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ffb6:	d864      	bhi.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ffb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ffbe:	d021      	beq.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ffc6:	d85c      	bhi.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ffc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d004      	beq.n	800ffd8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ffce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffd4:	d004      	beq.n	800ffe0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ffd6:	e054      	b.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ffd8:	f000 f8b4 	bl	8010144 <HAL_RCCEx_GetD3PCLK1Freq>
 800ffdc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffde:	e0a4      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ffe0:	4b54      	ldr	r3, [pc, #336]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ffec:	d107      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffee:	f107 0318 	add.w	r3, r7, #24
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f8bc 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fffc:	e095      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010002:	e092      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010004:	4b4b      	ldr	r3, [pc, #300]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801000c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010010:	d107      	bne.n	8010022 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010012:	f107 030c 	add.w	r3, r7, #12
 8010016:	4618      	mov	r0, r3
 8010018:	f000 f9fe 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010020:	e083      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010022:	2300      	movs	r3, #0
 8010024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010026:	e080      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010028:	4b42      	ldr	r3, [pc, #264]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f003 0304 	and.w	r3, r3, #4
 8010030:	2b04      	cmp	r3, #4
 8010032:	d109      	bne.n	8010048 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010034:	4b3f      	ldr	r3, [pc, #252]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	08db      	lsrs	r3, r3, #3
 801003a:	f003 0303 	and.w	r3, r3, #3
 801003e:	4a3e      	ldr	r2, [pc, #248]	@ (8010138 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8010040:	fa22 f303 	lsr.w	r3, r2, r3
 8010044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010046:	e070      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010048:	2300      	movs	r3, #0
 801004a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801004c:	e06d      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801004e:	4b39      	ldr	r3, [pc, #228]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801005a:	d102      	bne.n	8010062 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801005c:	4b37      	ldr	r3, [pc, #220]	@ (801013c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801005e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010060:	e063      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010066:	e060      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010068:	4b32      	ldr	r3, [pc, #200]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010074:	d102      	bne.n	801007c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8010076:	4b32      	ldr	r3, [pc, #200]	@ (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8010078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801007a:	e056      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010080:	e053      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010086:	e050      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010088:	e9d7 2300 	ldrd	r2, r3, [r7]
 801008c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8010090:	430b      	orrs	r3, r1
 8010092:	d148      	bne.n	8010126 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010094:	4b27      	ldr	r3, [pc, #156]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801009c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801009e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100a4:	d02a      	beq.n	80100fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80100a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100ac:	d838      	bhi.n	8010120 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80100ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d004      	beq.n	80100be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80100b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100ba:	d00d      	beq.n	80100d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80100bc:	e030      	b.n	8010120 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80100be:	4b1d      	ldr	r3, [pc, #116]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100ca:	d102      	bne.n	80100d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80100cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80100ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100d0:	e02b      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100d6:	e028      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80100d8:	4b16      	ldr	r3, [pc, #88]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80100e4:	d107      	bne.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 fae8 	bl	80106c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100f4:	e019      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80100f6:	2300      	movs	r3, #0
 80100f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100fa:	e016      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010108:	d107      	bne.n	801011a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801010a:	f107 0318 	add.w	r3, r7, #24
 801010e:	4618      	mov	r0, r3
 8010110:	f000 f82e 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010118:	e007      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801011e:	e004      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010124:	e001      	b.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801012a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801012c:	4618      	mov	r0, r3
 801012e:	3740      	adds	r7, #64	@ 0x40
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	58024400 	.word	0x58024400
 8010138:	03d09000 	.word	0x03d09000
 801013c:	003d0900 	.word	0x003d0900
 8010140:	016e3600 	.word	0x016e3600

08010144 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010148:	f7fe f92e 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 801014c:	4602      	mov	r2, r0
 801014e:	4b06      	ldr	r3, [pc, #24]	@ (8010168 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	091b      	lsrs	r3, r3, #4
 8010154:	f003 0307 	and.w	r3, r3, #7
 8010158:	4904      	ldr	r1, [pc, #16]	@ (801016c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801015a:	5ccb      	ldrb	r3, [r1, r3]
 801015c:	f003 031f 	and.w	r3, r3, #31
 8010160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010164:	4618      	mov	r0, r3
 8010166:	bd80      	pop	{r7, pc}
 8010168:	58024400 	.word	0x58024400
 801016c:	0801ddec 	.word	0x0801ddec

08010170 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010170:	b480      	push	{r7}
 8010172:	b089      	sub	sp, #36	@ 0x24
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010178:	4ba1      	ldr	r3, [pc, #644]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801017c:	f003 0303 	and.w	r3, r3, #3
 8010180:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010182:	4b9f      	ldr	r3, [pc, #636]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010186:	0b1b      	lsrs	r3, r3, #12
 8010188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801018c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801018e:	4b9c      	ldr	r3, [pc, #624]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010192:	091b      	lsrs	r3, r3, #4
 8010194:	f003 0301 	and.w	r3, r3, #1
 8010198:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801019a:	4b99      	ldr	r3, [pc, #612]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801019c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801019e:	08db      	lsrs	r3, r3, #3
 80101a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101a4:	693a      	ldr	r2, [r7, #16]
 80101a6:	fb02 f303 	mul.w	r3, r2, r3
 80101aa:	ee07 3a90 	vmov	s15, r3
 80101ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 8111 	beq.w	80103e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	f000 8083 	beq.w	80102cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	f200 80a1 	bhi.w	8010310 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d003      	beq.n	80101dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d056      	beq.n	8010288 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80101da:	e099      	b.n	8010310 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101dc:	4b88      	ldr	r3, [pc, #544]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f003 0320 	and.w	r3, r3, #32
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d02d      	beq.n	8010244 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101e8:	4b85      	ldr	r3, [pc, #532]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	08db      	lsrs	r3, r3, #3
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	4a84      	ldr	r2, [pc, #528]	@ (8010404 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80101f4:	fa22 f303 	lsr.w	r3, r2, r3
 80101f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	ee07 3a90 	vmov	s15, r3
 8010200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	ee07 3a90 	vmov	s15, r3
 801020a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801020e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010212:	4b7b      	ldr	r3, [pc, #492]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801021a:	ee07 3a90 	vmov	s15, r3
 801021e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010222:	ed97 6a03 	vldr	s12, [r7, #12]
 8010226:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010408 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801022a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801022e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801023a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801023e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010242:	e087      	b.n	8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	ee07 3a90 	vmov	s15, r3
 801024a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801024e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801040c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010256:	4b6a      	ldr	r3, [pc, #424]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801025a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025e:	ee07 3a90 	vmov	s15, r3
 8010262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010266:	ed97 6a03 	vldr	s12, [r7, #12]
 801026a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010408 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801026e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801027a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801027e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010286:	e065      	b.n	8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	ee07 3a90 	vmov	s15, r3
 801028e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010292:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801029a:	4b59      	ldr	r3, [pc, #356]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801029c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801029e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102a2:	ee07 3a90 	vmov	s15, r3
 80102a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80102ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010408 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80102b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80102be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102ca:	e043      	b.n	8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	ee07 3a90 	vmov	s15, r3
 80102d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010414 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80102da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102de:	4b48      	ldr	r3, [pc, #288]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80102e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102e6:	ee07 3a90 	vmov	s15, r3
 80102ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80102f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010408 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80102f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801030a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801030e:	e021      	b.n	8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	ee07 3a90 	vmov	s15, r3
 8010316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801031a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801031e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010322:	4b37      	ldr	r3, [pc, #220]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801032a:	ee07 3a90 	vmov	s15, r3
 801032e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010332:	ed97 6a03 	vldr	s12, [r7, #12]
 8010336:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010408 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801033a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801033e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801034a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801034e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010352:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010354:	4b2a      	ldr	r3, [pc, #168]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010358:	0a5b      	lsrs	r3, r3, #9
 801035a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801035e:	ee07 3a90 	vmov	s15, r3
 8010362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801036a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801036e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801037a:	ee17 2a90 	vmov	r2, s15
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010382:	4b1f      	ldr	r3, [pc, #124]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010386:	0c1b      	lsrs	r3, r3, #16
 8010388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801038c:	ee07 3a90 	vmov	s15, r3
 8010390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010394:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010398:	ee37 7a87 	vadd.f32	s14, s15, s14
 801039c:	edd7 6a07 	vldr	s13, [r7, #28]
 80103a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103a8:	ee17 2a90 	vmov	r2, s15
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80103b0:	4b13      	ldr	r3, [pc, #76]	@ (8010400 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b4:	0e1b      	lsrs	r3, r3, #24
 80103b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103ba:	ee07 3a90 	vmov	s15, r3
 80103be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80103ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80103ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103d6:	ee17 2a90 	vmov	r2, s15
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80103de:	e008      	b.n	80103f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	609a      	str	r2, [r3, #8]
}
 80103f2:	bf00      	nop
 80103f4:	3724      	adds	r7, #36	@ 0x24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	58024400 	.word	0x58024400
 8010404:	03d09000 	.word	0x03d09000
 8010408:	46000000 	.word	0x46000000
 801040c:	4c742400 	.word	0x4c742400
 8010410:	4a742400 	.word	0x4a742400
 8010414:	4bb71b00 	.word	0x4bb71b00

08010418 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010418:	b480      	push	{r7}
 801041a:	b089      	sub	sp, #36	@ 0x24
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010420:	4ba1      	ldr	r3, [pc, #644]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010424:	f003 0303 	and.w	r3, r3, #3
 8010428:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801042a:	4b9f      	ldr	r3, [pc, #636]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801042c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801042e:	0d1b      	lsrs	r3, r3, #20
 8010430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010434:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010436:	4b9c      	ldr	r3, [pc, #624]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801043a:	0a1b      	lsrs	r3, r3, #8
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010442:	4b99      	ldr	r3, [pc, #612]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010446:	08db      	lsrs	r3, r3, #3
 8010448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	fb02 f303 	mul.w	r3, r2, r3
 8010452:	ee07 3a90 	vmov	s15, r3
 8010456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801045a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 8111 	beq.w	8010688 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	2b02      	cmp	r3, #2
 801046a:	f000 8083 	beq.w	8010574 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	2b02      	cmp	r3, #2
 8010472:	f200 80a1 	bhi.w	80105b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d003      	beq.n	8010484 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d056      	beq.n	8010530 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010482:	e099      	b.n	80105b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010484:	4b88      	ldr	r3, [pc, #544]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f003 0320 	and.w	r3, r3, #32
 801048c:	2b00      	cmp	r3, #0
 801048e:	d02d      	beq.n	80104ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010490:	4b85      	ldr	r3, [pc, #532]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	08db      	lsrs	r3, r3, #3
 8010496:	f003 0303 	and.w	r3, r3, #3
 801049a:	4a84      	ldr	r2, [pc, #528]	@ (80106ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801049c:	fa22 f303 	lsr.w	r3, r2, r3
 80104a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	ee07 3a90 	vmov	s15, r3
 80104a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	ee07 3a90 	vmov	s15, r3
 80104b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104ba:	4b7b      	ldr	r3, [pc, #492]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80104bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c2:	ee07 3a90 	vmov	s15, r3
 80104c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80104ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80106b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80104d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80104ea:	e087      	b.n	80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	ee07 3a90 	vmov	s15, r3
 80104f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80106b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80104fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104fe:	4b6a      	ldr	r3, [pc, #424]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010506:	ee07 3a90 	vmov	s15, r3
 801050a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801050e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010512:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80106b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801051a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801051e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010526:	ee67 7a27 	vmul.f32	s15, s14, s15
 801052a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801052e:	e065      	b.n	80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	ee07 3a90 	vmov	s15, r3
 8010536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801053a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80106b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801053e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010542:	4b59      	ldr	r3, [pc, #356]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801054a:	ee07 3a90 	vmov	s15, r3
 801054e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010552:	ed97 6a03 	vldr	s12, [r7, #12]
 8010556:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80106b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801055a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801055e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801056a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801056e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010572:	e043      	b.n	80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	ee07 3a90 	vmov	s15, r3
 801057a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801057e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80106bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010586:	4b48      	ldr	r3, [pc, #288]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801058a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801058e:	ee07 3a90 	vmov	s15, r3
 8010592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010596:	ed97 6a03 	vldr	s12, [r7, #12]
 801059a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80106b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801059e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80105a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80105a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80105aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80105b6:	e021      	b.n	80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	ee07 3a90 	vmov	s15, r3
 80105be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80106b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80105c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80105ca:	4b37      	ldr	r3, [pc, #220]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80105cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105d2:	ee07 3a90 	vmov	s15, r3
 80105d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80105da:	ed97 6a03 	vldr	s12, [r7, #12]
 80105de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80106b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80105e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80105e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80105ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80105ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80105fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80105fc:	4b2a      	ldr	r3, [pc, #168]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80105fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010600:	0a5b      	lsrs	r3, r3, #9
 8010602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010606:	ee07 3a90 	vmov	s15, r3
 801060a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801060e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010616:	edd7 6a07 	vldr	s13, [r7, #28]
 801061a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801061e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010622:	ee17 2a90 	vmov	r2, s15
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801062a:	4b1f      	ldr	r3, [pc, #124]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801062e:	0c1b      	lsrs	r3, r3, #16
 8010630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010634:	ee07 3a90 	vmov	s15, r3
 8010638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801063c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010644:	edd7 6a07 	vldr	s13, [r7, #28]
 8010648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801064c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010650:	ee17 2a90 	vmov	r2, s15
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010658:	4b13      	ldr	r3, [pc, #76]	@ (80106a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801065c:	0e1b      	lsrs	r3, r3, #24
 801065e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010662:	ee07 3a90 	vmov	s15, r3
 8010666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801066a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801066e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010672:	edd7 6a07 	vldr	s13, [r7, #28]
 8010676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801067a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801067e:	ee17 2a90 	vmov	r2, s15
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010686:	e008      	b.n	801069a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	609a      	str	r2, [r3, #8]
}
 801069a:	bf00      	nop
 801069c:	3724      	adds	r7, #36	@ 0x24
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	58024400 	.word	0x58024400
 80106ac:	03d09000 	.word	0x03d09000
 80106b0:	46000000 	.word	0x46000000
 80106b4:	4c742400 	.word	0x4c742400
 80106b8:	4a742400 	.word	0x4a742400
 80106bc:	4bb71b00 	.word	0x4bb71b00

080106c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b089      	sub	sp, #36	@ 0x24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80106c8:	4ba0      	ldr	r3, [pc, #640]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80106ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106cc:	f003 0303 	and.w	r3, r3, #3
 80106d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80106d2:	4b9e      	ldr	r3, [pc, #632]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80106d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d6:	091b      	lsrs	r3, r3, #4
 80106d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80106de:	4b9b      	ldr	r3, [pc, #620]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80106e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106e2:	f003 0301 	and.w	r3, r3, #1
 80106e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80106e8:	4b98      	ldr	r3, [pc, #608]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80106ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106ec:	08db      	lsrs	r3, r3, #3
 80106ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106f2:	693a      	ldr	r2, [r7, #16]
 80106f4:	fb02 f303 	mul.w	r3, r2, r3
 80106f8:	ee07 3a90 	vmov	s15, r3
 80106fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010700:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	f000 8111 	beq.w	801092e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	2b02      	cmp	r3, #2
 8010710:	f000 8083 	beq.w	801081a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	2b02      	cmp	r3, #2
 8010718:	f200 80a1 	bhi.w	801085e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d003      	beq.n	801072a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d056      	beq.n	80107d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010728:	e099      	b.n	801085e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801072a:	4b88      	ldr	r3, [pc, #544]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f003 0320 	and.w	r3, r3, #32
 8010732:	2b00      	cmp	r3, #0
 8010734:	d02d      	beq.n	8010792 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010736:	4b85      	ldr	r3, [pc, #532]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	08db      	lsrs	r3, r3, #3
 801073c:	f003 0303 	and.w	r3, r3, #3
 8010740:	4a83      	ldr	r2, [pc, #524]	@ (8010950 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010742:	fa22 f303 	lsr.w	r3, r2, r3
 8010746:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	ee07 3a90 	vmov	s15, r3
 801074e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	ee07 3a90 	vmov	s15, r3
 8010758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801075c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010760:	4b7a      	ldr	r3, [pc, #488]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010768:	ee07 3a90 	vmov	s15, r3
 801076c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010770:	ed97 6a03 	vldr	s12, [r7, #12]
 8010774:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010954 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801077c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010788:	ee67 7a27 	vmul.f32	s15, s14, s15
 801078c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010790:	e087      	b.n	80108a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	ee07 3a90 	vmov	s15, r3
 8010798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801079c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010958 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80107a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80107a4:	4b69      	ldr	r3, [pc, #420]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80107a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107ac:	ee07 3a90 	vmov	s15, r3
 80107b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80107b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010954 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80107bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107d4:	e065      	b.n	80108a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	ee07 3a90 	vmov	s15, r3
 80107dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801095c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80107e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80107e8:	4b58      	ldr	r3, [pc, #352]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80107ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107f0:	ee07 3a90 	vmov	s15, r3
 80107f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80107fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010954 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801080c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010814:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010818:	e043      	b.n	80108a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	ee07 3a90 	vmov	s15, r3
 8010820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010824:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801082c:	4b47      	ldr	r3, [pc, #284]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010834:	ee07 3a90 	vmov	s15, r3
 8010838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801083c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010840:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010954 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801084c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010858:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801085c:	e021      	b.n	80108a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	ee07 3a90 	vmov	s15, r3
 8010864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010868:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010958 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801086c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010870:	4b36      	ldr	r3, [pc, #216]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010878:	ee07 3a90 	vmov	s15, r3
 801087c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010880:	ed97 6a03 	vldr	s12, [r7, #12]
 8010884:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010954 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801088c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010898:	ee67 7a27 	vmul.f32	s15, s14, s15
 801089c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80108a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80108a2:	4b2a      	ldr	r3, [pc, #168]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108a6:	0a5b      	lsrs	r3, r3, #9
 80108a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108ac:	ee07 3a90 	vmov	s15, r3
 80108b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80108b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80108bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80108c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108c8:	ee17 2a90 	vmov	r2, s15
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80108d0:	4b1e      	ldr	r3, [pc, #120]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108d4:	0c1b      	lsrs	r3, r3, #16
 80108d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108da:	ee07 3a90 	vmov	s15, r3
 80108de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80108e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80108ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80108ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108f6:	ee17 2a90 	vmov	r2, s15
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80108fe:	4b13      	ldr	r3, [pc, #76]	@ (801094c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010902:	0e1b      	lsrs	r3, r3, #24
 8010904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010908:	ee07 3a90 	vmov	s15, r3
 801090c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010918:	edd7 6a07 	vldr	s13, [r7, #28]
 801091c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010924:	ee17 2a90 	vmov	r2, s15
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801092c:	e008      	b.n	8010940 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	609a      	str	r2, [r3, #8]
}
 8010940:	bf00      	nop
 8010942:	3724      	adds	r7, #36	@ 0x24
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr
 801094c:	58024400 	.word	0x58024400
 8010950:	03d09000 	.word	0x03d09000
 8010954:	46000000 	.word	0x46000000
 8010958:	4c742400 	.word	0x4c742400
 801095c:	4a742400 	.word	0x4a742400
 8010960:	4bb71b00 	.word	0x4bb71b00

08010964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801096e:	2300      	movs	r3, #0
 8010970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010972:	4b53      	ldr	r3, [pc, #332]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010976:	f003 0303 	and.w	r3, r3, #3
 801097a:	2b03      	cmp	r3, #3
 801097c:	d101      	bne.n	8010982 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801097e:	2301      	movs	r3, #1
 8010980:	e099      	b.n	8010ab6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010982:	4b4f      	ldr	r3, [pc, #316]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4a4e      	ldr	r2, [pc, #312]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010988:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801098c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801098e:	f7f6 ff39 	bl	8007804 <HAL_GetTick>
 8010992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010994:	e008      	b.n	80109a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010996:	f7f6 ff35 	bl	8007804 <HAL_GetTick>
 801099a:	4602      	mov	r2, r0
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d901      	bls.n	80109a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80109a4:	2303      	movs	r3, #3
 80109a6:	e086      	b.n	8010ab6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80109a8:	4b45      	ldr	r3, [pc, #276]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d1f0      	bne.n	8010996 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80109b4:	4b42      	ldr	r3, [pc, #264]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 80109b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	031b      	lsls	r3, r3, #12
 80109c2:	493f      	ldr	r1, [pc, #252]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 80109c4:	4313      	orrs	r3, r2
 80109c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	3b01      	subs	r3, #1
 80109d8:	025b      	lsls	r3, r3, #9
 80109da:	b29b      	uxth	r3, r3
 80109dc:	431a      	orrs	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	3b01      	subs	r3, #1
 80109e4:	041b      	lsls	r3, r3, #16
 80109e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80109ea:	431a      	orrs	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	3b01      	subs	r3, #1
 80109f2:	061b      	lsls	r3, r3, #24
 80109f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80109f8:	4931      	ldr	r1, [pc, #196]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 80109fa:	4313      	orrs	r3, r2
 80109fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80109fe:	4b30      	ldr	r3, [pc, #192]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	492d      	ldr	r1, [pc, #180]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010a10:	4b2b      	ldr	r3, [pc, #172]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a14:	f023 0220 	bic.w	r2, r3, #32
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	4928      	ldr	r1, [pc, #160]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010a22:	4b27      	ldr	r3, [pc, #156]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a26:	4a26      	ldr	r2, [pc, #152]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a28:	f023 0310 	bic.w	r3, r3, #16
 8010a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010a2e:	4b24      	ldr	r3, [pc, #144]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010a32:	4b24      	ldr	r3, [pc, #144]	@ (8010ac4 <RCCEx_PLL2_Config+0x160>)
 8010a34:	4013      	ands	r3, r2
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	69d2      	ldr	r2, [r2, #28]
 8010a3a:	00d2      	lsls	r2, r2, #3
 8010a3c:	4920      	ldr	r1, [pc, #128]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010a42:	4b1f      	ldr	r3, [pc, #124]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a46:	4a1e      	ldr	r2, [pc, #120]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a48:	f043 0310 	orr.w	r3, r3, #16
 8010a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d106      	bne.n	8010a62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010a54:	4b1a      	ldr	r3, [pc, #104]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a58:	4a19      	ldr	r2, [pc, #100]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010a60:	e00f      	b.n	8010a82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d106      	bne.n	8010a76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010a68:	4b15      	ldr	r3, [pc, #84]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a6c:	4a14      	ldr	r2, [pc, #80]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010a74:	e005      	b.n	8010a82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010a76:	4b12      	ldr	r3, [pc, #72]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a7a:	4a11      	ldr	r2, [pc, #68]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010a82:	4b0f      	ldr	r3, [pc, #60]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a0e      	ldr	r2, [pc, #56]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010a88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010a8e:	f7f6 feb9 	bl	8007804 <HAL_GetTick>
 8010a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010a94:	e008      	b.n	8010aa8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010a96:	f7f6 feb5 	bl	8007804 <HAL_GetTick>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	d901      	bls.n	8010aa8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	e006      	b.n	8010ab6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010aa8:	4b05      	ldr	r3, [pc, #20]	@ (8010ac0 <RCCEx_PLL2_Config+0x15c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d0f0      	beq.n	8010a96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	58024400 	.word	0x58024400
 8010ac4:	ffff0007 	.word	0xffff0007

08010ac8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ad6:	4b53      	ldr	r3, [pc, #332]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ada:	f003 0303 	and.w	r3, r3, #3
 8010ade:	2b03      	cmp	r3, #3
 8010ae0:	d101      	bne.n	8010ae6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e099      	b.n	8010c1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a4e      	ldr	r2, [pc, #312]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010af2:	f7f6 fe87 	bl	8007804 <HAL_GetTick>
 8010af6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010af8:	e008      	b.n	8010b0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010afa:	f7f6 fe83 	bl	8007804 <HAL_GetTick>
 8010afe:	4602      	mov	r2, r0
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	2b02      	cmp	r3, #2
 8010b06:	d901      	bls.n	8010b0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010b08:	2303      	movs	r3, #3
 8010b0a:	e086      	b.n	8010c1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010b0c:	4b45      	ldr	r3, [pc, #276]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1f0      	bne.n	8010afa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010b18:	4b42      	ldr	r3, [pc, #264]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	051b      	lsls	r3, r3, #20
 8010b26:	493f      	ldr	r1, [pc, #252]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	3b01      	subs	r3, #1
 8010b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	025b      	lsls	r3, r3, #9
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	431a      	orrs	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	041b      	lsls	r3, r3, #16
 8010b4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010b4e:	431a      	orrs	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	691b      	ldr	r3, [r3, #16]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	061b      	lsls	r3, r3, #24
 8010b58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010b5c:	4931      	ldr	r1, [pc, #196]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010b62:	4b30      	ldr	r3, [pc, #192]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	695b      	ldr	r3, [r3, #20]
 8010b6e:	492d      	ldr	r1, [pc, #180]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b70:	4313      	orrs	r3, r2
 8010b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010b74:	4b2b      	ldr	r3, [pc, #172]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	4928      	ldr	r1, [pc, #160]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b82:	4313      	orrs	r3, r2
 8010b84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010b86:	4b27      	ldr	r3, [pc, #156]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b8a:	4a26      	ldr	r2, [pc, #152]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010b92:	4b24      	ldr	r3, [pc, #144]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010b96:	4b24      	ldr	r3, [pc, #144]	@ (8010c28 <RCCEx_PLL3_Config+0x160>)
 8010b98:	4013      	ands	r3, r2
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	69d2      	ldr	r2, [r2, #28]
 8010b9e:	00d2      	lsls	r2, r2, #3
 8010ba0:	4920      	ldr	r1, [pc, #128]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010baa:	4a1e      	ldr	r2, [pc, #120]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bbc:	4a19      	ldr	r2, [pc, #100]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010bc4:	e00f      	b.n	8010be6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d106      	bne.n	8010bda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010bcc:	4b15      	ldr	r3, [pc, #84]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bd0:	4a14      	ldr	r2, [pc, #80]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010bd8:	e005      	b.n	8010be6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010bda:	4b12      	ldr	r3, [pc, #72]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bde:	4a11      	ldr	r2, [pc, #68]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010be6:	4b0f      	ldr	r3, [pc, #60]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a0e      	ldr	r2, [pc, #56]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010bf2:	f7f6 fe07 	bl	8007804 <HAL_GetTick>
 8010bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010bf8:	e008      	b.n	8010c0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010bfa:	f7f6 fe03 	bl	8007804 <HAL_GetTick>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d901      	bls.n	8010c0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010c08:	2303      	movs	r3, #3
 8010c0a:	e006      	b.n	8010c1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010c0c:	4b05      	ldr	r3, [pc, #20]	@ (8010c24 <RCCEx_PLL3_Config+0x15c>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d0f0      	beq.n	8010bfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	58024400 	.word	0x58024400
 8010c28:	ffff0007 	.word	0xffff0007

08010c2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e10f      	b.n	8010e5e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4a87      	ldr	r2, [pc, #540]	@ (8010e68 <HAL_SPI_Init+0x23c>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d00f      	beq.n	8010c6e <HAL_SPI_Init+0x42>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a86      	ldr	r2, [pc, #536]	@ (8010e6c <HAL_SPI_Init+0x240>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d00a      	beq.n	8010c6e <HAL_SPI_Init+0x42>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a84      	ldr	r2, [pc, #528]	@ (8010e70 <HAL_SPI_Init+0x244>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d005      	beq.n	8010c6e <HAL_SPI_Init+0x42>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	2b0f      	cmp	r3, #15
 8010c68:	d901      	bls.n	8010c6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e0f7      	b.n	8010e5e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fef6 	bl	8011a60 <SPI_GetPacketSize>
 8010c74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8010e68 <HAL_SPI_Init+0x23c>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d00c      	beq.n	8010c9a <HAL_SPI_Init+0x6e>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a79      	ldr	r2, [pc, #484]	@ (8010e6c <HAL_SPI_Init+0x240>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d007      	beq.n	8010c9a <HAL_SPI_Init+0x6e>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a78      	ldr	r2, [pc, #480]	@ (8010e70 <HAL_SPI_Init+0x244>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d002      	beq.n	8010c9a <HAL_SPI_Init+0x6e>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b08      	cmp	r3, #8
 8010c98:	d811      	bhi.n	8010cbe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010c9e:	4a72      	ldr	r2, [pc, #456]	@ (8010e68 <HAL_SPI_Init+0x23c>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d009      	beq.n	8010cb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a70      	ldr	r2, [pc, #448]	@ (8010e6c <HAL_SPI_Init+0x240>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d004      	beq.n	8010cb8 <HAL_SPI_Init+0x8c>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8010e70 <HAL_SPI_Init+0x244>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d104      	bne.n	8010cc2 <HAL_SPI_Init+0x96>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2b10      	cmp	r3, #16
 8010cbc:	d901      	bls.n	8010cc2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e0cd      	b.n	8010e5e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d106      	bne.n	8010cdc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f7f1 fcd6 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2202      	movs	r2, #2
 8010ce0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f022 0201 	bic.w	r2, r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	689b      	ldr	r3, [r3, #8]
 8010cfa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010cfe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	699b      	ldr	r3, [r3, #24]
 8010d04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d08:	d119      	bne.n	8010d3e <HAL_SPI_Init+0x112>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010d12:	d103      	bne.n	8010d1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d008      	beq.n	8010d2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d10c      	bne.n	8010d3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d2c:	d107      	bne.n	8010d3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010d3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00f      	beq.n	8010d6a <HAL_SPI_Init+0x13e>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	2b06      	cmp	r3, #6
 8010d50:	d90b      	bls.n	8010d6a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	430a      	orrs	r2, r1
 8010d66:	601a      	str	r2, [r3, #0]
 8010d68:	e007      	b.n	8010d7a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010d78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	69da      	ldr	r2, [r3, #28]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d82:	431a      	orrs	r2, r3
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	431a      	orrs	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d8c:	ea42 0103 	orr.w	r1, r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	68da      	ldr	r2, [r3, #12]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010da4:	431a      	orrs	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010daa:	431a      	orrs	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	699b      	ldr	r3, [r3, #24]
 8010db0:	431a      	orrs	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	691b      	ldr	r3, [r3, #16]
 8010db6:	431a      	orrs	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	695b      	ldr	r3, [r3, #20]
 8010dbc:	431a      	orrs	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6a1b      	ldr	r3, [r3, #32]
 8010dc2:	431a      	orrs	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	431a      	orrs	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010dce:	431a      	orrs	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	431a      	orrs	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dda:	ea42 0103 	orr.w	r1, r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	430a      	orrs	r2, r1
 8010de8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d113      	bne.n	8010e1a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010e04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	689b      	ldr	r3, [r3, #8]
 8010e0c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010e18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f022 0201 	bic.w	r2, r2, #1
 8010e28:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00a      	beq.n	8010e4c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2201      	movs	r2, #1
 8010e58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	40013000 	.word	0x40013000
 8010e6c:	40003800 	.word	0x40003800
 8010e70:	40003c00 	.word	0x40003c00

08010e74 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af02      	add	r7, sp, #8
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	603b      	str	r3, [r7, #0]
 8010e80:	4613      	mov	r3, r2
 8010e82:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3320      	adds	r3, #32
 8010e8a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010e8c:	f7f6 fcba 	bl	8007804 <HAL_GetTick>
 8010e90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d001      	beq.n	8010ea2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010e9e:	2302      	movs	r3, #2
 8010ea0:	e1d1      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <HAL_SPI_Transmit+0x3a>
 8010ea8:	88fb      	ldrh	r3, [r7, #6]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e1c9      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d101      	bne.n	8010ec0 <HAL_SPI_Transmit+0x4c>
 8010ebc:	2302      	movs	r3, #2
 8010ebe:	e1c2      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2203      	movs	r2, #3
 8010ecc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	68ba      	ldr	r2, [r7, #8]
 8010edc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	88fa      	ldrh	r2, [r7, #6]
 8010ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	88fa      	ldrh	r2, [r7, #6]
 8010eea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2200      	movs	r2, #0
 8010f08:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010f18:	d108      	bne.n	8010f2c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	681a      	ldr	r2, [r3, #0]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	e009      	b.n	8010f40 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010f3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	685a      	ldr	r2, [r3, #4]
 8010f46:	4b96      	ldr	r3, [pc, #600]	@ (80111a0 <HAL_SPI_Transmit+0x32c>)
 8010f48:	4013      	ands	r3, r2
 8010f4a:	88f9      	ldrh	r1, [r7, #6]
 8010f4c:	68fa      	ldr	r2, [r7, #12]
 8010f4e:	6812      	ldr	r2, [r2, #0]
 8010f50:	430b      	orrs	r3, r1
 8010f52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f042 0201 	orr.w	r2, r2, #1
 8010f62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010f6c:	d107      	bne.n	8010f7e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	2b0f      	cmp	r3, #15
 8010f84:	d947      	bls.n	8011016 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010f86:	e03f      	b.n	8011008 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	695b      	ldr	r3, [r3, #20]
 8010f8e:	f003 0302 	and.w	r3, r3, #2
 8010f92:	2b02      	cmp	r3, #2
 8010f94:	d114      	bne.n	8010fc0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	6812      	ldr	r2, [r2, #0]
 8010fa0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fa6:	1d1a      	adds	r2, r3, #4
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010fbe:	e023      	b.n	8011008 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010fc0:	f7f6 fc20 	bl	8007804 <HAL_GetTick>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	1ad3      	subs	r3, r2, r3
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d803      	bhi.n	8010fd8 <HAL_SPI_Transmit+0x164>
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd6:	d102      	bne.n	8010fde <HAL_SPI_Transmit+0x16a>
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d114      	bne.n	8011008 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	f000 fc70 	bl	80118c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011004:	2303      	movs	r3, #3
 8011006:	e11e      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801100e:	b29b      	uxth	r3, r3
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1b9      	bne.n	8010f88 <HAL_SPI_Transmit+0x114>
 8011014:	e0f1      	b.n	80111fa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	2b07      	cmp	r3, #7
 801101c:	f240 80e6 	bls.w	80111ec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011020:	e05d      	b.n	80110de <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	695b      	ldr	r3, [r3, #20]
 8011028:	f003 0302 	and.w	r3, r3, #2
 801102c:	2b02      	cmp	r3, #2
 801102e:	d132      	bne.n	8011096 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011036:	b29b      	uxth	r3, r3
 8011038:	2b01      	cmp	r3, #1
 801103a:	d918      	bls.n	801106e <HAL_SPI_Transmit+0x1fa>
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011040:	2b00      	cmp	r3, #0
 8011042:	d014      	beq.n	801106e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6812      	ldr	r2, [r2, #0]
 801104e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011054:	1d1a      	adds	r2, r3, #4
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011060:	b29b      	uxth	r3, r3
 8011062:	3b02      	subs	r3, #2
 8011064:	b29a      	uxth	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801106c:	e037      	b.n	80110de <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011072:	881a      	ldrh	r2, [r3, #0]
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801107c:	1c9a      	adds	r2, r3, #2
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011088:	b29b      	uxth	r3, r3
 801108a:	3b01      	subs	r3, #1
 801108c:	b29a      	uxth	r2, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011094:	e023      	b.n	80110de <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011096:	f7f6 fbb5 	bl	8007804 <HAL_GetTick>
 801109a:	4602      	mov	r2, r0
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	1ad3      	subs	r3, r2, r3
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d803      	bhi.n	80110ae <HAL_SPI_Transmit+0x23a>
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ac:	d102      	bne.n	80110b4 <HAL_SPI_Transmit+0x240>
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d114      	bne.n	80110de <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80110b4:	68f8      	ldr	r0, [r7, #12]
 80110b6:	f000 fc05 	bl	80118c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2201      	movs	r2, #1
 80110ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80110da:	2303      	movs	r3, #3
 80110dc:	e0b3      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d19b      	bne.n	8011022 <HAL_SPI_Transmit+0x1ae>
 80110ea:	e086      	b.n	80111fa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	f003 0302 	and.w	r3, r3, #2
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d154      	bne.n	80111a4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011100:	b29b      	uxth	r3, r3
 8011102:	2b03      	cmp	r3, #3
 8011104:	d918      	bls.n	8011138 <HAL_SPI_Transmit+0x2c4>
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801110a:	2b40      	cmp	r3, #64	@ 0x40
 801110c:	d914      	bls.n	8011138 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	6812      	ldr	r2, [r2, #0]
 8011118:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801111e:	1d1a      	adds	r2, r3, #4
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801112a:	b29b      	uxth	r3, r3
 801112c:	3b04      	subs	r3, #4
 801112e:	b29a      	uxth	r2, r3
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011136:	e059      	b.n	80111ec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801113e:	b29b      	uxth	r3, r3
 8011140:	2b01      	cmp	r3, #1
 8011142:	d917      	bls.n	8011174 <HAL_SPI_Transmit+0x300>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011148:	2b00      	cmp	r3, #0
 801114a:	d013      	beq.n	8011174 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011150:	881a      	ldrh	r2, [r3, #0]
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801115a:	1c9a      	adds	r2, r3, #2
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011166:	b29b      	uxth	r3, r3
 8011168:	3b02      	subs	r3, #2
 801116a:	b29a      	uxth	r2, r3
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011172:	e03b      	b.n	80111ec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	3320      	adds	r3, #32
 801117e:	7812      	ldrb	r2, [r2, #0]
 8011180:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011192:	b29b      	uxth	r3, r3
 8011194:	3b01      	subs	r3, #1
 8011196:	b29a      	uxth	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801119e:	e025      	b.n	80111ec <HAL_SPI_Transmit+0x378>
 80111a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111a4:	f7f6 fb2e 	bl	8007804 <HAL_GetTick>
 80111a8:	4602      	mov	r2, r0
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	1ad3      	subs	r3, r2, r3
 80111ae:	683a      	ldr	r2, [r7, #0]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d803      	bhi.n	80111bc <HAL_SPI_Transmit+0x348>
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d102      	bne.n	80111c2 <HAL_SPI_Transmit+0x34e>
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d114      	bne.n	80111ec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f000 fb7e 	bl	80118c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80111ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2201      	movs	r2, #1
 80111dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80111e8:	2303      	movs	r3, #3
 80111ea:	e02c      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f47f af79 	bne.w	80110ec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	2200      	movs	r2, #0
 8011202:	2108      	movs	r1, #8
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f000 fbfd 	bl	8011a04 <SPI_WaitOnFlagUntilTimeout>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d007      	beq.n	8011220 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011216:	f043 0220 	orr.w	r2, r3, #32
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 fb4f 	bl	80118c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2201      	movs	r2, #1
 801122a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2200      	movs	r2, #0
 8011232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801123c:	2b00      	cmp	r3, #0
 801123e:	d001      	beq.n	8011244 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011240:	2301      	movs	r3, #1
 8011242:	e000      	b.n	8011246 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011244:	2300      	movs	r3, #0
  }
}
 8011246:	4618      	mov	r0, r3
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop

08011250 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08e      	sub	sp, #56	@ 0x38
 8011254:	af02      	add	r7, sp, #8
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	3320      	adds	r3, #32
 8011264:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	3330      	adds	r3, #48	@ 0x30
 801126c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011272:	095b      	lsrs	r3, r3, #5
 8011274:	b29b      	uxth	r3, r3
 8011276:	3301      	adds	r3, #1
 8011278:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801127a:	f7f6 fac3 	bl	8007804 <HAL_GetTick>
 801127e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8011280:	887b      	ldrh	r3, [r7, #2]
 8011282:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8011284:	887b      	ldrh	r3, [r7, #2]
 8011286:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b01      	cmp	r3, #1
 8011292:	d001      	beq.n	8011298 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8011294:	2302      	movs	r3, #2
 8011296:	e310      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d005      	beq.n	80112aa <HAL_SPI_TransmitReceive+0x5a>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <HAL_SPI_TransmitReceive+0x5a>
 80112a4:	887b      	ldrh	r3, [r7, #2]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d101      	bne.n	80112ae <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	e305      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d101      	bne.n	80112bc <HAL_SPI_TransmitReceive+0x6c>
 80112b8:	2302      	movs	r3, #2
 80112ba:	e2fe      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2201      	movs	r2, #1
 80112c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2205      	movs	r2, #5
 80112c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	887a      	ldrh	r2, [r7, #2]
 80112de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	887a      	ldrh	r2, [r7, #2]
 80112e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	68ba      	ldr	r2, [r7, #8]
 80112ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	887a      	ldrh	r2, [r7, #2]
 80112f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	887a      	ldrh	r2, [r7, #2]
 80112fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	2200      	movs	r2, #0
 8011304:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	68da      	ldr	r2, [r3, #12]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801131a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a70      	ldr	r2, [pc, #448]	@ (80114e4 <HAL_SPI_TransmitReceive+0x294>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d009      	beq.n	801133a <HAL_SPI_TransmitReceive+0xea>
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4a6f      	ldr	r2, [pc, #444]	@ (80114e8 <HAL_SPI_TransmitReceive+0x298>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d004      	beq.n	801133a <HAL_SPI_TransmitReceive+0xea>
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a6d      	ldr	r2, [pc, #436]	@ (80114ec <HAL_SPI_TransmitReceive+0x29c>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d102      	bne.n	8011340 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 801133a:	2310      	movs	r3, #16
 801133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801133e:	e001      	b.n	8011344 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8011340:	2308      	movs	r3, #8
 8011342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	685a      	ldr	r2, [r3, #4]
 801134a:	4b69      	ldr	r3, [pc, #420]	@ (80114f0 <HAL_SPI_TransmitReceive+0x2a0>)
 801134c:	4013      	ands	r3, r2
 801134e:	8879      	ldrh	r1, [r7, #2]
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	6812      	ldr	r2, [r2, #0]
 8011354:	430b      	orrs	r3, r1
 8011356:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f042 0201 	orr.w	r2, r2, #1
 8011366:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011370:	d107      	bne.n	8011382 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	2b0f      	cmp	r3, #15
 8011388:	f240 80a2 	bls.w	80114d0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 801138c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138e:	089b      	lsrs	r3, r3, #2
 8011390:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011392:	e094      	b.n	80114be <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	f003 0302 	and.w	r3, r3, #2
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d120      	bne.n	80113e4 <HAL_SPI_TransmitReceive+0x194>
 80113a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d01d      	beq.n	80113e4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80113a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80113aa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d217      	bcs.n	80113e4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	6812      	ldr	r2, [r2, #0]
 80113be:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113c4:	1d1a      	adds	r2, r3, #4
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	3b01      	subs	r3, #1
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80113e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80113ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d065      	beq.n	80114be <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	695b      	ldr	r3, [r3, #20]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d118      	bne.n	8011432 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011408:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801140a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011410:	1d1a      	adds	r2, r3, #4
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801141c:	b29b      	uxth	r3, r3
 801141e:	3b01      	subs	r3, #1
 8011420:	b29a      	uxth	r2, r3
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801142e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011430:	e045      	b.n	80114be <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011432:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011434:	8bfb      	ldrh	r3, [r7, #30]
 8011436:	429a      	cmp	r2, r3
 8011438:	d21d      	bcs.n	8011476 <HAL_SPI_TransmitReceive+0x226>
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011440:	2b00      	cmp	r3, #0
 8011442:	d018      	beq.n	8011476 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801144c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801144e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011454:	1d1a      	adds	r2, r3, #4
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011460:	b29b      	uxth	r3, r3
 8011462:	3b01      	subs	r3, #1
 8011464:	b29a      	uxth	r2, r3
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011472:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011474:	e023      	b.n	80114be <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011476:	f7f6 f9c5 	bl	8007804 <HAL_GetTick>
 801147a:	4602      	mov	r2, r0
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011482:	429a      	cmp	r2, r3
 8011484:	d803      	bhi.n	801148e <HAL_SPI_TransmitReceive+0x23e>
 8011486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148c:	d102      	bne.n	8011494 <HAL_SPI_TransmitReceive+0x244>
 801148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011490:	2b00      	cmp	r3, #0
 8011492:	d114      	bne.n	80114be <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f000 fa15 	bl	80118c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2201      	movs	r2, #1
 80114ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2200      	movs	r2, #0
 80114b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80114ba:	2303      	movs	r3, #3
 80114bc:	e1fd      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80114be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f47f af67 	bne.w	8011394 <HAL_SPI_TransmitReceive+0x144>
 80114c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f47f af63 	bne.w	8011394 <HAL_SPI_TransmitReceive+0x144>
 80114ce:	e1ce      	b.n	801186e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	2b07      	cmp	r3, #7
 80114d6:	f240 81c2 	bls.w	801185e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80114da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114dc:	085b      	lsrs	r3, r3, #1
 80114de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80114e0:	e0c9      	b.n	8011676 <HAL_SPI_TransmitReceive+0x426>
 80114e2:	bf00      	nop
 80114e4:	40013000 	.word	0x40013000
 80114e8:	40003800 	.word	0x40003800
 80114ec:	40003c00 	.word	0x40003c00
 80114f0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	f003 0302 	and.w	r3, r3, #2
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d11f      	bne.n	8011542 <HAL_SPI_TransmitReceive+0x2f2>
 8011502:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011504:	2b00      	cmp	r3, #0
 8011506:	d01c      	beq.n	8011542 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011508:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801150a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801150c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011510:	429a      	cmp	r2, r3
 8011512:	d216      	bcs.n	8011542 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011518:	881a      	ldrh	r2, [r3, #0]
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011522:	1c9a      	adds	r2, r3, #2
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801152e:	b29b      	uxth	r3, r3
 8011530:	3b01      	subs	r3, #1
 8011532:	b29a      	uxth	r2, r3
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011540:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801154a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 8092 	beq.w	8011676 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	695b      	ldr	r3, [r3, #20]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b01      	cmp	r3, #1
 801155e:	d118      	bne.n	8011592 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011564:	6a3a      	ldr	r2, [r7, #32]
 8011566:	8812      	ldrh	r2, [r2, #0]
 8011568:	b292      	uxth	r2, r2
 801156a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011570:	1c9a      	adds	r2, r3, #2
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801157c:	b29b      	uxth	r3, r3
 801157e:	3b01      	subs	r3, #1
 8011580:	b29a      	uxth	r2, r3
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801158e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011590:	e071      	b.n	8011676 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011592:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011594:	8bfb      	ldrh	r3, [r7, #30]
 8011596:	429a      	cmp	r2, r3
 8011598:	d228      	bcs.n	80115ec <HAL_SPI_TransmitReceive+0x39c>
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d023      	beq.n	80115ec <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115a8:	6a3a      	ldr	r2, [r7, #32]
 80115aa:	8812      	ldrh	r2, [r2, #0]
 80115ac:	b292      	uxth	r2, r2
 80115ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115b4:	1c9a      	adds	r2, r3, #2
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115be:	6a3a      	ldr	r2, [r7, #32]
 80115c0:	8812      	ldrh	r2, [r2, #0]
 80115c2:	b292      	uxth	r2, r2
 80115c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115ca:	1c9a      	adds	r2, r3, #2
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	3b02      	subs	r3, #2
 80115da:	b29a      	uxth	r2, r3
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80115ea:	e044      	b.n	8011676 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80115ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d11d      	bne.n	801162e <HAL_SPI_TransmitReceive+0x3de>
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d018      	beq.n	801162e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011600:	6a3a      	ldr	r2, [r7, #32]
 8011602:	8812      	ldrh	r2, [r2, #0]
 8011604:	b292      	uxth	r2, r2
 8011606:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801160c:	1c9a      	adds	r2, r3, #2
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011618:	b29b      	uxth	r3, r3
 801161a:	3b01      	subs	r3, #1
 801161c:	b29a      	uxth	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801162a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801162c:	e023      	b.n	8011676 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801162e:	f7f6 f8e9 	bl	8007804 <HAL_GetTick>
 8011632:	4602      	mov	r2, r0
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801163a:	429a      	cmp	r2, r3
 801163c:	d803      	bhi.n	8011646 <HAL_SPI_TransmitReceive+0x3f6>
 801163e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011644:	d102      	bne.n	801164c <HAL_SPI_TransmitReceive+0x3fc>
 8011646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011648:	2b00      	cmp	r3, #0
 801164a:	d114      	bne.n	8011676 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 f939 	bl	80118c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2201      	movs	r2, #1
 8011666:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011672:	2303      	movs	r3, #3
 8011674:	e121      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011676:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011678:	2b00      	cmp	r3, #0
 801167a:	f47f af3b 	bne.w	80114f4 <HAL_SPI_TransmitReceive+0x2a4>
 801167e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011680:	2b00      	cmp	r3, #0
 8011682:	f47f af37 	bne.w	80114f4 <HAL_SPI_TransmitReceive+0x2a4>
 8011686:	e0f2      	b.n	801186e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	695b      	ldr	r3, [r3, #20]
 801168e:	f003 0302 	and.w	r3, r3, #2
 8011692:	2b02      	cmp	r3, #2
 8011694:	d121      	bne.n	80116da <HAL_SPI_TransmitReceive+0x48a>
 8011696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011698:	2b00      	cmp	r3, #0
 801169a:	d01e      	beq.n	80116da <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801169c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801169e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80116a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d218      	bcs.n	80116da <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3320      	adds	r3, #32
 80116b2:	7812      	ldrb	r2, [r2, #0]
 80116b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	3b01      	subs	r3, #1
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	695b      	ldr	r3, [r3, #20]
 80116e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80116e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f000 80ba 	beq.w	801185e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d11b      	bne.n	8011730 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011704:	7812      	ldrb	r2, [r2, #0]
 8011706:	b2d2      	uxtb	r2, r2
 8011708:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801171a:	b29b      	uxth	r3, r3
 801171c:	3b01      	subs	r3, #1
 801171e:	b29a      	uxth	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801172c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801172e:	e096      	b.n	801185e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011730:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011732:	8bfb      	ldrh	r3, [r7, #30]
 8011734:	429a      	cmp	r2, r3
 8011736:	d24a      	bcs.n	80117ce <HAL_SPI_TransmitReceive+0x57e>
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801173e:	2b00      	cmp	r3, #0
 8011740:	d045      	beq.n	80117ce <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801174e:	7812      	ldrb	r2, [r2, #0]
 8011750:	b2d2      	uxtb	r2, r2
 8011752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011758:	1c5a      	adds	r2, r3, #1
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801176a:	7812      	ldrb	r2, [r2, #0]
 801176c:	b2d2      	uxtb	r2, r2
 801176e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011786:	7812      	ldrb	r2, [r2, #0]
 8011788:	b2d2      	uxtb	r2, r2
 801178a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011790:	1c5a      	adds	r2, r3, #1
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80117a2:	7812      	ldrb	r2, [r2, #0]
 80117a4:	b2d2      	uxtb	r2, r2
 80117a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80117ac:	1c5a      	adds	r2, r3, #1
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	3b04      	subs	r3, #4
 80117bc:	b29a      	uxth	r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80117ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80117cc:	e047      	b.n	801185e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80117ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117d0:	2b03      	cmp	r3, #3
 80117d2:	d820      	bhi.n	8011816 <HAL_SPI_TransmitReceive+0x5c6>
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d01b      	beq.n	8011816 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80117ea:	7812      	ldrb	r2, [r2, #0]
 80117ec:	b2d2      	uxtb	r2, r2
 80117ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80117f4:	1c5a      	adds	r2, r3, #1
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011800:	b29b      	uxth	r3, r3
 8011802:	3b01      	subs	r3, #1
 8011804:	b29a      	uxth	r2, r3
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011812:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011814:	e023      	b.n	801185e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011816:	f7f5 fff5 	bl	8007804 <HAL_GetTick>
 801181a:	4602      	mov	r2, r0
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011822:	429a      	cmp	r2, r3
 8011824:	d803      	bhi.n	801182e <HAL_SPI_TransmitReceive+0x5de>
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182c:	d102      	bne.n	8011834 <HAL_SPI_TransmitReceive+0x5e4>
 801182e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011830:	2b00      	cmp	r3, #0
 8011832:	d114      	bne.n	801185e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011834:	68f8      	ldr	r0, [r7, #12]
 8011836:	f000 f845 	bl	80118c4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011840:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2200      	movs	r2, #0
 8011856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801185a:	2303      	movs	r3, #3
 801185c:	e02d      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801185e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011860:	2b00      	cmp	r3, #0
 8011862:	f47f af11 	bne.w	8011688 <HAL_SPI_TransmitReceive+0x438>
 8011866:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011868:	2b00      	cmp	r3, #0
 801186a:	f47f af0d 	bne.w	8011688 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011874:	2200      	movs	r2, #0
 8011876:	2108      	movs	r1, #8
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 f8c3 	bl	8011a04 <SPI_WaitOnFlagUntilTimeout>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d007      	beq.n	8011894 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801188a:	f043 0220 	orr.w	r2, r3, #32
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011894:	68f8      	ldr	r0, [r7, #12]
 8011896:	f000 f815 	bl	80118c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2201      	movs	r2, #1
 801189e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2200      	movs	r2, #0
 80118a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e000      	b.n	80118ba <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80118b8:	2300      	movs	r3, #0
  }
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3730      	adds	r7, #48	@ 0x30
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop

080118c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	699a      	ldr	r2, [r3, #24]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f042 0208 	orr.w	r2, r2, #8
 80118e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	699a      	ldr	r2, [r3, #24]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f042 0210 	orr.w	r2, r2, #16
 80118f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f022 0201 	bic.w	r2, r2, #1
 8011902:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	6919      	ldr	r1, [r3, #16]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	4b3c      	ldr	r3, [pc, #240]	@ (8011a00 <SPI_CloseTransfer+0x13c>)
 8011910:	400b      	ands	r3, r1
 8011912:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	689a      	ldr	r2, [r3, #8]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011922:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2b04      	cmp	r3, #4
 801192e:	d014      	beq.n	801195a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f003 0320 	and.w	r3, r3, #32
 8011936:	2b00      	cmp	r3, #0
 8011938:	d00f      	beq.n	801195a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011940:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	699a      	ldr	r2, [r3, #24]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f042 0220 	orr.w	r2, r2, #32
 8011958:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2b03      	cmp	r3, #3
 8011964:	d014      	beq.n	8011990 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00f      	beq.n	8011990 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011976:	f043 0204 	orr.w	r2, r3, #4
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	699a      	ldr	r2, [r3, #24]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801198e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00f      	beq.n	80119ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119a0:	f043 0201 	orr.w	r2, r3, #1
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	699a      	ldr	r2, [r3, #24]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80119b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00f      	beq.n	80119e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119ca:	f043 0208 	orr.w	r2, r3, #8
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	699a      	ldr	r2, [r3, #24]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80119e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80119f4:	bf00      	nop
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	fffffc90 	.word	0xfffffc90

08011a04 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	603b      	str	r3, [r7, #0]
 8011a10:	4613      	mov	r3, r2
 8011a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011a14:	e010      	b.n	8011a38 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a16:	f7f5 fef5 	bl	8007804 <HAL_GetTick>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d803      	bhi.n	8011a2e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2c:	d102      	bne.n	8011a34 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011a34:	2303      	movs	r3, #3
 8011a36:	e00f      	b.n	8011a58 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	695a      	ldr	r2, [r3, #20]
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	4013      	ands	r3, r2
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	bf0c      	ite	eq
 8011a48:	2301      	moveq	r3, #1
 8011a4a:	2300      	movne	r3, #0
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	461a      	mov	r2, r3
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d0df      	beq.n	8011a16 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a6c:	095b      	lsrs	r3, r3, #5
 8011a6e:	3301      	adds	r3, #1
 8011a70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	3307      	adds	r3, #7
 8011a7e:	08db      	lsrs	r3, r3, #3
 8011a80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	fb02 f303 	mul.w	r3, r2, r3
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3714      	adds	r7, #20
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b082      	sub	sp, #8
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e049      	b.n	8011b3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d106      	bne.n	8011ac2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7f0 feeb 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	f001 f9a3 	bl	8012e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2201      	movs	r2, #1
 8011ade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2201      	movs	r2, #1
 8011aee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2201      	movs	r2, #1
 8011afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2201      	movs	r2, #1
 8011b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2201      	movs	r2, #1
 8011b26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011b3a:	2300      	movs	r3, #0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b085      	sub	sp, #20
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d001      	beq.n	8011b5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e056      	b.n	8011c0a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2202      	movs	r2, #2
 8011b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a2b      	ldr	r2, [pc, #172]	@ (8011c18 <HAL_TIM_Base_Start+0xd4>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d02c      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b76:	d027      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a27      	ldr	r2, [pc, #156]	@ (8011c1c <HAL_TIM_Base_Start+0xd8>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d022      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4a26      	ldr	r2, [pc, #152]	@ (8011c20 <HAL_TIM_Base_Start+0xdc>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d01d      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a24      	ldr	r2, [pc, #144]	@ (8011c24 <HAL_TIM_Base_Start+0xe0>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d018      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a23      	ldr	r2, [pc, #140]	@ (8011c28 <HAL_TIM_Base_Start+0xe4>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d013      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a21      	ldr	r2, [pc, #132]	@ (8011c2c <HAL_TIM_Base_Start+0xe8>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d00e      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4a20      	ldr	r2, [pc, #128]	@ (8011c30 <HAL_TIM_Base_Start+0xec>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d009      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8011c34 <HAL_TIM_Base_Start+0xf0>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d004      	beq.n	8011bc8 <HAL_TIM_Base_Start+0x84>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8011c38 <HAL_TIM_Base_Start+0xf4>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d115      	bne.n	8011bf4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	689a      	ldr	r2, [r3, #8]
 8011bce:	4b1b      	ldr	r3, [pc, #108]	@ (8011c3c <HAL_TIM_Base_Start+0xf8>)
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b06      	cmp	r3, #6
 8011bd8:	d015      	beq.n	8011c06 <HAL_TIM_Base_Start+0xc2>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011be0:	d011      	beq.n	8011c06 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f042 0201 	orr.w	r2, r2, #1
 8011bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bf2:	e008      	b.n	8011c06 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f042 0201 	orr.w	r2, r2, #1
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	e000      	b.n	8011c08 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	40010000 	.word	0x40010000
 8011c1c:	40000400 	.word	0x40000400
 8011c20:	40000800 	.word	0x40000800
 8011c24:	40000c00 	.word	0x40000c00
 8011c28:	40010400 	.word	0x40010400
 8011c2c:	40001800 	.word	0x40001800
 8011c30:	40014000 	.word	0x40014000
 8011c34:	4000e000 	.word	0x4000e000
 8011c38:	4000e400 	.word	0x4000e400
 8011c3c:	00010007 	.word	0x00010007

08011c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d001      	beq.n	8011c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011c54:	2301      	movs	r3, #1
 8011c56:	e05e      	b.n	8011d16 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2202      	movs	r2, #2
 8011c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68da      	ldr	r2, [r3, #12]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	f042 0201 	orr.w	r2, r2, #1
 8011c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4a2b      	ldr	r2, [pc, #172]	@ (8011d24 <HAL_TIM_Base_Start_IT+0xe4>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d02c      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c82:	d027      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4a27      	ldr	r2, [pc, #156]	@ (8011d28 <HAL_TIM_Base_Start_IT+0xe8>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d022      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a26      	ldr	r2, [pc, #152]	@ (8011d2c <HAL_TIM_Base_Start_IT+0xec>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d01d      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4a24      	ldr	r2, [pc, #144]	@ (8011d30 <HAL_TIM_Base_Start_IT+0xf0>)
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d018      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4a23      	ldr	r2, [pc, #140]	@ (8011d34 <HAL_TIM_Base_Start_IT+0xf4>)
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d013      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4a21      	ldr	r2, [pc, #132]	@ (8011d38 <HAL_TIM_Base_Start_IT+0xf8>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d00e      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a20      	ldr	r2, [pc, #128]	@ (8011d3c <HAL_TIM_Base_Start_IT+0xfc>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d009      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8011d40 <HAL_TIM_Base_Start_IT+0x100>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d004      	beq.n	8011cd4 <HAL_TIM_Base_Start_IT+0x94>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4a1d      	ldr	r2, [pc, #116]	@ (8011d44 <HAL_TIM_Base_Start_IT+0x104>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d115      	bne.n	8011d00 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	689a      	ldr	r2, [r3, #8]
 8011cda:	4b1b      	ldr	r3, [pc, #108]	@ (8011d48 <HAL_TIM_Base_Start_IT+0x108>)
 8011cdc:	4013      	ands	r3, r2
 8011cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b06      	cmp	r3, #6
 8011ce4:	d015      	beq.n	8011d12 <HAL_TIM_Base_Start_IT+0xd2>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011cec:	d011      	beq.n	8011d12 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f042 0201 	orr.w	r2, r2, #1
 8011cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011cfe:	e008      	b.n	8011d12 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f042 0201 	orr.w	r2, r2, #1
 8011d0e:	601a      	str	r2, [r3, #0]
 8011d10:	e000      	b.n	8011d14 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011d14:	2300      	movs	r3, #0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3714      	adds	r7, #20
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	40010000 	.word	0x40010000
 8011d28:	40000400 	.word	0x40000400
 8011d2c:	40000800 	.word	0x40000800
 8011d30:	40000c00 	.word	0x40000c00
 8011d34:	40010400 	.word	0x40010400
 8011d38:	40001800 	.word	0x40001800
 8011d3c:	40014000 	.word	0x40014000
 8011d40:	4000e000 	.word	0x4000e000
 8011d44:	4000e400 	.word	0x4000e400
 8011d48:	00010007 	.word	0x00010007

08011d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e049      	b.n	8011df2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 f841 	bl	8011dfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2202      	movs	r2, #2
 8011d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3304      	adds	r3, #4
 8011d88:	4619      	mov	r1, r3
 8011d8a:	4610      	mov	r0, r2
 8011d8c:	f001 f848 	bl	8012e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2201      	movs	r2, #1
 8011da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2201      	movs	r2, #1
 8011dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2201      	movs	r2, #1
 8011db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2201      	movs	r2, #1
 8011dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011e02:	bf00      	nop
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
	...

08011e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d109      	bne.n	8011e34 <HAL_TIM_PWM_Start+0x24>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	bf14      	ite	ne
 8011e2c:	2301      	movne	r3, #1
 8011e2e:	2300      	moveq	r3, #0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	e03c      	b.n	8011eae <HAL_TIM_PWM_Start+0x9e>
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	2b04      	cmp	r3, #4
 8011e38:	d109      	bne.n	8011e4e <HAL_TIM_PWM_Start+0x3e>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	bf14      	ite	ne
 8011e46:	2301      	movne	r3, #1
 8011e48:	2300      	moveq	r3, #0
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	e02f      	b.n	8011eae <HAL_TIM_PWM_Start+0x9e>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2b08      	cmp	r3, #8
 8011e52:	d109      	bne.n	8011e68 <HAL_TIM_PWM_Start+0x58>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	bf14      	ite	ne
 8011e60:	2301      	movne	r3, #1
 8011e62:	2300      	moveq	r3, #0
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	e022      	b.n	8011eae <HAL_TIM_PWM_Start+0x9e>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	2b0c      	cmp	r3, #12
 8011e6c:	d109      	bne.n	8011e82 <HAL_TIM_PWM_Start+0x72>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	bf14      	ite	ne
 8011e7a:	2301      	movne	r3, #1
 8011e7c:	2300      	moveq	r3, #0
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	e015      	b.n	8011eae <HAL_TIM_PWM_Start+0x9e>
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b10      	cmp	r3, #16
 8011e86:	d109      	bne.n	8011e9c <HAL_TIM_PWM_Start+0x8c>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	bf14      	ite	ne
 8011e94:	2301      	movne	r3, #1
 8011e96:	2300      	moveq	r3, #0
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	e008      	b.n	8011eae <HAL_TIM_PWM_Start+0x9e>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	bf14      	ite	ne
 8011ea8:	2301      	movne	r3, #1
 8011eaa:	2300      	moveq	r3, #0
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e0ab      	b.n	801200e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d104      	bne.n	8011ec6 <HAL_TIM_PWM_Start+0xb6>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2202      	movs	r2, #2
 8011ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ec4:	e023      	b.n	8011f0e <HAL_TIM_PWM_Start+0xfe>
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	d104      	bne.n	8011ed6 <HAL_TIM_PWM_Start+0xc6>
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2202      	movs	r2, #2
 8011ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011ed4:	e01b      	b.n	8011f0e <HAL_TIM_PWM_Start+0xfe>
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	2b08      	cmp	r3, #8
 8011eda:	d104      	bne.n	8011ee6 <HAL_TIM_PWM_Start+0xd6>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2202      	movs	r2, #2
 8011ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ee4:	e013      	b.n	8011f0e <HAL_TIM_PWM_Start+0xfe>
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	2b0c      	cmp	r3, #12
 8011eea:	d104      	bne.n	8011ef6 <HAL_TIM_PWM_Start+0xe6>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2202      	movs	r2, #2
 8011ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011ef4:	e00b      	b.n	8011f0e <HAL_TIM_PWM_Start+0xfe>
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	2b10      	cmp	r3, #16
 8011efa:	d104      	bne.n	8011f06 <HAL_TIM_PWM_Start+0xf6>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2202      	movs	r2, #2
 8011f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011f04:	e003      	b.n	8011f0e <HAL_TIM_PWM_Start+0xfe>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2202      	movs	r2, #2
 8011f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2201      	movs	r2, #1
 8011f14:	6839      	ldr	r1, [r7, #0]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 fba8 	bl	801366c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a3d      	ldr	r2, [pc, #244]	@ (8012018 <HAL_TIM_PWM_Start+0x208>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d013      	beq.n	8011f4e <HAL_TIM_PWM_Start+0x13e>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a3c      	ldr	r2, [pc, #240]	@ (801201c <HAL_TIM_PWM_Start+0x20c>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d00e      	beq.n	8011f4e <HAL_TIM_PWM_Start+0x13e>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a3a      	ldr	r2, [pc, #232]	@ (8012020 <HAL_TIM_PWM_Start+0x210>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d009      	beq.n	8011f4e <HAL_TIM_PWM_Start+0x13e>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a39      	ldr	r2, [pc, #228]	@ (8012024 <HAL_TIM_PWM_Start+0x214>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d004      	beq.n	8011f4e <HAL_TIM_PWM_Start+0x13e>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a37      	ldr	r2, [pc, #220]	@ (8012028 <HAL_TIM_PWM_Start+0x218>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d101      	bne.n	8011f52 <HAL_TIM_PWM_Start+0x142>
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e000      	b.n	8011f54 <HAL_TIM_PWM_Start+0x144>
 8011f52:	2300      	movs	r3, #0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d007      	beq.n	8011f68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011f66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8012018 <HAL_TIM_PWM_Start+0x208>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d02c      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f7a:	d027      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4a2a      	ldr	r2, [pc, #168]	@ (801202c <HAL_TIM_PWM_Start+0x21c>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d022      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a29      	ldr	r2, [pc, #164]	@ (8012030 <HAL_TIM_PWM_Start+0x220>)
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	d01d      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4a27      	ldr	r2, [pc, #156]	@ (8012034 <HAL_TIM_PWM_Start+0x224>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d018      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801201c <HAL_TIM_PWM_Start+0x20c>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d013      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a23      	ldr	r2, [pc, #140]	@ (8012038 <HAL_TIM_PWM_Start+0x228>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	d00e      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8012020 <HAL_TIM_PWM_Start+0x210>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d009      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a1f      	ldr	r2, [pc, #124]	@ (801203c <HAL_TIM_PWM_Start+0x22c>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d004      	beq.n	8011fcc <HAL_TIM_PWM_Start+0x1bc>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8012040 <HAL_TIM_PWM_Start+0x230>)
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	d115      	bne.n	8011ff8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	689a      	ldr	r2, [r3, #8]
 8011fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8012044 <HAL_TIM_PWM_Start+0x234>)
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2b06      	cmp	r3, #6
 8011fdc:	d015      	beq.n	801200a <HAL_TIM_PWM_Start+0x1fa>
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011fe4:	d011      	beq.n	801200a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f042 0201 	orr.w	r2, r2, #1
 8011ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ff6:	e008      	b.n	801200a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f042 0201 	orr.w	r2, r2, #1
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	e000      	b.n	801200c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801200a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801200c:	2300      	movs	r3, #0
}
 801200e:	4618      	mov	r0, r3
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	40010000 	.word	0x40010000
 801201c:	40010400 	.word	0x40010400
 8012020:	40014000 	.word	0x40014000
 8012024:	40014400 	.word	0x40014400
 8012028:	40014800 	.word	0x40014800
 801202c:	40000400 	.word	0x40000400
 8012030:	40000800 	.word	0x40000800
 8012034:	40000c00 	.word	0x40000c00
 8012038:	40001800 	.word	0x40001800
 801203c:	4000e000 	.word	0x4000e000
 8012040:	4000e400 	.word	0x4000e400
 8012044:	00010007 	.word	0x00010007

08012048 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2200      	movs	r2, #0
 8012058:	6839      	ldr	r1, [r7, #0]
 801205a:	4618      	mov	r0, r3
 801205c:	f001 fb06 	bl	801366c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	4a3e      	ldr	r2, [pc, #248]	@ (8012160 <HAL_TIM_PWM_Stop+0x118>)
 8012066:	4293      	cmp	r3, r2
 8012068:	d013      	beq.n	8012092 <HAL_TIM_PWM_Stop+0x4a>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4a3d      	ldr	r2, [pc, #244]	@ (8012164 <HAL_TIM_PWM_Stop+0x11c>)
 8012070:	4293      	cmp	r3, r2
 8012072:	d00e      	beq.n	8012092 <HAL_TIM_PWM_Stop+0x4a>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4a3b      	ldr	r2, [pc, #236]	@ (8012168 <HAL_TIM_PWM_Stop+0x120>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d009      	beq.n	8012092 <HAL_TIM_PWM_Stop+0x4a>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	4a3a      	ldr	r2, [pc, #232]	@ (801216c <HAL_TIM_PWM_Stop+0x124>)
 8012084:	4293      	cmp	r3, r2
 8012086:	d004      	beq.n	8012092 <HAL_TIM_PWM_Stop+0x4a>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	4a38      	ldr	r2, [pc, #224]	@ (8012170 <HAL_TIM_PWM_Stop+0x128>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d101      	bne.n	8012096 <HAL_TIM_PWM_Stop+0x4e>
 8012092:	2301      	movs	r3, #1
 8012094:	e000      	b.n	8012098 <HAL_TIM_PWM_Stop+0x50>
 8012096:	2300      	movs	r3, #0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d017      	beq.n	80120cc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	6a1a      	ldr	r2, [r3, #32]
 80120a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80120a6:	4013      	ands	r3, r2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10f      	bne.n	80120cc <HAL_TIM_PWM_Stop+0x84>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	6a1a      	ldr	r2, [r3, #32]
 80120b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80120b6:	4013      	ands	r3, r2
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d107      	bne.n	80120cc <HAL_TIM_PWM_Stop+0x84>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80120ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6a1a      	ldr	r2, [r3, #32]
 80120d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80120d6:	4013      	ands	r3, r2
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10f      	bne.n	80120fc <HAL_TIM_PWM_Stop+0xb4>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6a1a      	ldr	r2, [r3, #32]
 80120e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80120e6:	4013      	ands	r3, r2
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d107      	bne.n	80120fc <HAL_TIM_PWM_Stop+0xb4>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f022 0201 	bic.w	r2, r2, #1
 80120fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d104      	bne.n	801210c <HAL_TIM_PWM_Stop+0xc4>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2201      	movs	r2, #1
 8012106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801210a:	e023      	b.n	8012154 <HAL_TIM_PWM_Stop+0x10c>
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2b04      	cmp	r3, #4
 8012110:	d104      	bne.n	801211c <HAL_TIM_PWM_Stop+0xd4>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2201      	movs	r2, #1
 8012116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801211a:	e01b      	b.n	8012154 <HAL_TIM_PWM_Stop+0x10c>
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	2b08      	cmp	r3, #8
 8012120:	d104      	bne.n	801212c <HAL_TIM_PWM_Stop+0xe4>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2201      	movs	r2, #1
 8012126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801212a:	e013      	b.n	8012154 <HAL_TIM_PWM_Stop+0x10c>
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2b0c      	cmp	r3, #12
 8012130:	d104      	bne.n	801213c <HAL_TIM_PWM_Stop+0xf4>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2201      	movs	r2, #1
 8012136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801213a:	e00b      	b.n	8012154 <HAL_TIM_PWM_Stop+0x10c>
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	2b10      	cmp	r3, #16
 8012140:	d104      	bne.n	801214c <HAL_TIM_PWM_Stop+0x104>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2201      	movs	r2, #1
 8012146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801214a:	e003      	b.n	8012154 <HAL_TIM_PWM_Stop+0x10c>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	40010000 	.word	0x40010000
 8012164:	40010400 	.word	0x40010400
 8012168:	40014000 	.word	0x40014000
 801216c:	40014400 	.word	0x40014400
 8012170:	40014800 	.word	0x40014800

08012174 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
 8012180:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8012182:	2300      	movs	r3, #0
 8012184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d109      	bne.n	80121a0 <HAL_TIM_PWM_Start_DMA+0x2c>
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b02      	cmp	r3, #2
 8012196:	bf0c      	ite	eq
 8012198:	2301      	moveq	r3, #1
 801219a:	2300      	movne	r3, #0
 801219c:	b2db      	uxtb	r3, r3
 801219e:	e03c      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0xa6>
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	2b04      	cmp	r3, #4
 80121a4:	d109      	bne.n	80121ba <HAL_TIM_PWM_Start_DMA+0x46>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	bf0c      	ite	eq
 80121b2:	2301      	moveq	r3, #1
 80121b4:	2300      	movne	r3, #0
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	e02f      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0xa6>
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	2b08      	cmp	r3, #8
 80121be:	d109      	bne.n	80121d4 <HAL_TIM_PWM_Start_DMA+0x60>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	2b02      	cmp	r3, #2
 80121ca:	bf0c      	ite	eq
 80121cc:	2301      	moveq	r3, #1
 80121ce:	2300      	movne	r3, #0
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	e022      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0xa6>
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	2b0c      	cmp	r3, #12
 80121d8:	d109      	bne.n	80121ee <HAL_TIM_PWM_Start_DMA+0x7a>
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	bf0c      	ite	eq
 80121e6:	2301      	moveq	r3, #1
 80121e8:	2300      	movne	r3, #0
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	e015      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0xa6>
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	2b10      	cmp	r3, #16
 80121f2:	d109      	bne.n	8012208 <HAL_TIM_PWM_Start_DMA+0x94>
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	bf0c      	ite	eq
 8012200:	2301      	moveq	r3, #1
 8012202:	2300      	movne	r3, #0
 8012204:	b2db      	uxtb	r3, r3
 8012206:	e008      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0xa6>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801220e:	b2db      	uxtb	r3, r3
 8012210:	2b02      	cmp	r3, #2
 8012212:	bf0c      	ite	eq
 8012214:	2301      	moveq	r3, #1
 8012216:	2300      	movne	r3, #0
 8012218:	b2db      	uxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801221e:	2302      	movs	r3, #2
 8012220:	e1ba      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d109      	bne.n	801223c <HAL_TIM_PWM_Start_DMA+0xc8>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b01      	cmp	r3, #1
 8012232:	bf0c      	ite	eq
 8012234:	2301      	moveq	r3, #1
 8012236:	2300      	movne	r3, #0
 8012238:	b2db      	uxtb	r3, r3
 801223a:	e03c      	b.n	80122b6 <HAL_TIM_PWM_Start_DMA+0x142>
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	2b04      	cmp	r3, #4
 8012240:	d109      	bne.n	8012256 <HAL_TIM_PWM_Start_DMA+0xe2>
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012248:	b2db      	uxtb	r3, r3
 801224a:	2b01      	cmp	r3, #1
 801224c:	bf0c      	ite	eq
 801224e:	2301      	moveq	r3, #1
 8012250:	2300      	movne	r3, #0
 8012252:	b2db      	uxtb	r3, r3
 8012254:	e02f      	b.n	80122b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	2b08      	cmp	r3, #8
 801225a:	d109      	bne.n	8012270 <HAL_TIM_PWM_Start_DMA+0xfc>
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012262:	b2db      	uxtb	r3, r3
 8012264:	2b01      	cmp	r3, #1
 8012266:	bf0c      	ite	eq
 8012268:	2301      	moveq	r3, #1
 801226a:	2300      	movne	r3, #0
 801226c:	b2db      	uxtb	r3, r3
 801226e:	e022      	b.n	80122b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	2b0c      	cmp	r3, #12
 8012274:	d109      	bne.n	801228a <HAL_TIM_PWM_Start_DMA+0x116>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b01      	cmp	r3, #1
 8012280:	bf0c      	ite	eq
 8012282:	2301      	moveq	r3, #1
 8012284:	2300      	movne	r3, #0
 8012286:	b2db      	uxtb	r3, r3
 8012288:	e015      	b.n	80122b6 <HAL_TIM_PWM_Start_DMA+0x142>
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	2b10      	cmp	r3, #16
 801228e:	d109      	bne.n	80122a4 <HAL_TIM_PWM_Start_DMA+0x130>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012296:	b2db      	uxtb	r3, r3
 8012298:	2b01      	cmp	r3, #1
 801229a:	bf0c      	ite	eq
 801229c:	2301      	moveq	r3, #1
 801229e:	2300      	movne	r3, #0
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	e008      	b.n	80122b6 <HAL_TIM_PWM_Start_DMA+0x142>
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	bf0c      	ite	eq
 80122b0:	2301      	moveq	r3, #1
 80122b2:	2300      	movne	r3, #0
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d034      	beq.n	8012324 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <HAL_TIM_PWM_Start_DMA+0x152>
 80122c0:	887b      	ldrh	r3, [r7, #2]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d101      	bne.n	80122ca <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e166      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d104      	bne.n	80122da <HAL_TIM_PWM_Start_DMA+0x166>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2202      	movs	r2, #2
 80122d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122d8:	e026      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	2b04      	cmp	r3, #4
 80122de:	d104      	bne.n	80122ea <HAL_TIM_PWM_Start_DMA+0x176>
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2202      	movs	r2, #2
 80122e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122e8:	e01e      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	2b08      	cmp	r3, #8
 80122ee:	d104      	bne.n	80122fa <HAL_TIM_PWM_Start_DMA+0x186>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2202      	movs	r2, #2
 80122f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122f8:	e016      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	2b0c      	cmp	r3, #12
 80122fe:	d104      	bne.n	801230a <HAL_TIM_PWM_Start_DMA+0x196>
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2202      	movs	r2, #2
 8012304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012308:	e00e      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2b10      	cmp	r3, #16
 801230e:	d104      	bne.n	801231a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	2202      	movs	r2, #2
 8012314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012318:	e006      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2202      	movs	r2, #2
 801231e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012322:	e001      	b.n	8012328 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012324:	2301      	movs	r3, #1
 8012326:	e137      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2b0c      	cmp	r3, #12
 801232c:	f200 80ae 	bhi.w	801248c <HAL_TIM_PWM_Start_DMA+0x318>
 8012330:	a201      	add	r2, pc, #4	@ (adr r2, 8012338 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8012332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012336:	bf00      	nop
 8012338:	0801236d 	.word	0x0801236d
 801233c:	0801248d 	.word	0x0801248d
 8012340:	0801248d 	.word	0x0801248d
 8012344:	0801248d 	.word	0x0801248d
 8012348:	080123b5 	.word	0x080123b5
 801234c:	0801248d 	.word	0x0801248d
 8012350:	0801248d 	.word	0x0801248d
 8012354:	0801248d 	.word	0x0801248d
 8012358:	080123fd 	.word	0x080123fd
 801235c:	0801248d 	.word	0x0801248d
 8012360:	0801248d 	.word	0x0801248d
 8012364:	0801248d 	.word	0x0801248d
 8012368:	08012445 	.word	0x08012445
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012370:	4a8b      	ldr	r2, [pc, #556]	@ (80125a0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012372:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012378:	4a8a      	ldr	r2, [pc, #552]	@ (80125a4 <HAL_TIM_PWM_Start_DMA+0x430>)
 801237a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012380:	4a89      	ldr	r2, [pc, #548]	@ (80125a8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012382:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012388:	6879      	ldr	r1, [r7, #4]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	3334      	adds	r3, #52	@ 0x34
 8012390:	461a      	mov	r2, r3
 8012392:	887b      	ldrh	r3, [r7, #2]
 8012394:	f7f7 fd72 	bl	8009e7c <HAL_DMA_Start_IT>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d001      	beq.n	80123a2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801239e:	2301      	movs	r3, #1
 80123a0:	e0fa      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	68da      	ldr	r2, [r3, #12]
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80123b0:	60da      	str	r2, [r3, #12]
      break;
 80123b2:	e06e      	b.n	8012492 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123b8:	4a79      	ldr	r2, [pc, #484]	@ (80125a0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80123ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123c0:	4a78      	ldr	r2, [pc, #480]	@ (80125a4 <HAL_TIM_PWM_Start_DMA+0x430>)
 80123c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123c8:	4a77      	ldr	r2, [pc, #476]	@ (80125a8 <HAL_TIM_PWM_Start_DMA+0x434>)
 80123ca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80123d0:	6879      	ldr	r1, [r7, #4]
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	3338      	adds	r3, #56	@ 0x38
 80123d8:	461a      	mov	r2, r3
 80123da:	887b      	ldrh	r3, [r7, #2]
 80123dc:	f7f7 fd4e 	bl	8009e7c <HAL_DMA_Start_IT>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d001      	beq.n	80123ea <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80123e6:	2301      	movs	r3, #1
 80123e8:	e0d6      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	68da      	ldr	r2, [r3, #12]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80123f8:	60da      	str	r2, [r3, #12]
      break;
 80123fa:	e04a      	b.n	8012492 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012400:	4a67      	ldr	r2, [pc, #412]	@ (80125a0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012402:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012408:	4a66      	ldr	r2, [pc, #408]	@ (80125a4 <HAL_TIM_PWM_Start_DMA+0x430>)
 801240a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012410:	4a65      	ldr	r2, [pc, #404]	@ (80125a8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012412:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012418:	6879      	ldr	r1, [r7, #4]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	333c      	adds	r3, #60	@ 0x3c
 8012420:	461a      	mov	r2, r3
 8012422:	887b      	ldrh	r3, [r7, #2]
 8012424:	f7f7 fd2a 	bl	8009e7c <HAL_DMA_Start_IT>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d001      	beq.n	8012432 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	e0b2      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	68da      	ldr	r2, [r3, #12]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012440:	60da      	str	r2, [r3, #12]
      break;
 8012442:	e026      	b.n	8012492 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012448:	4a55      	ldr	r2, [pc, #340]	@ (80125a0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801244a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012450:	4a54      	ldr	r2, [pc, #336]	@ (80125a4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012452:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012458:	4a53      	ldr	r2, [pc, #332]	@ (80125a8 <HAL_TIM_PWM_Start_DMA+0x434>)
 801245a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012460:	6879      	ldr	r1, [r7, #4]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	3340      	adds	r3, #64	@ 0x40
 8012468:	461a      	mov	r2, r3
 801246a:	887b      	ldrh	r3, [r7, #2]
 801246c:	f7f7 fd06 	bl	8009e7c <HAL_DMA_Start_IT>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012476:	2301      	movs	r3, #1
 8012478:	e08e      	b.n	8012598 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	68da      	ldr	r2, [r3, #12]
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012488:	60da      	str	r2, [r3, #12]
      break;
 801248a:	e002      	b.n	8012492 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 801248c:	2301      	movs	r3, #1
 801248e:	75fb      	strb	r3, [r7, #23]
      break;
 8012490:	bf00      	nop
  }

  if (status == HAL_OK)
 8012492:	7dfb      	ldrb	r3, [r7, #23]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d17e      	bne.n	8012596 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2201      	movs	r2, #1
 801249e:	68b9      	ldr	r1, [r7, #8]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f001 f8e3 	bl	801366c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a40      	ldr	r2, [pc, #256]	@ (80125ac <HAL_TIM_PWM_Start_DMA+0x438>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d013      	beq.n	80124d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a3e      	ldr	r2, [pc, #248]	@ (80125b0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d00e      	beq.n	80124d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a3d      	ldr	r2, [pc, #244]	@ (80125b4 <HAL_TIM_PWM_Start_DMA+0x440>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d009      	beq.n	80124d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a3b      	ldr	r2, [pc, #236]	@ (80125b8 <HAL_TIM_PWM_Start_DMA+0x444>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d004      	beq.n	80124d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a3a      	ldr	r2, [pc, #232]	@ (80125bc <HAL_TIM_PWM_Start_DMA+0x448>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d101      	bne.n	80124dc <HAL_TIM_PWM_Start_DMA+0x368>
 80124d8:	2301      	movs	r3, #1
 80124da:	e000      	b.n	80124de <HAL_TIM_PWM_Start_DMA+0x36a>
 80124dc:	2300      	movs	r3, #0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d007      	beq.n	80124f2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80124f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a2d      	ldr	r2, [pc, #180]	@ (80125ac <HAL_TIM_PWM_Start_DMA+0x438>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d02c      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012504:	d027      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a2d      	ldr	r2, [pc, #180]	@ (80125c0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d022      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a2b      	ldr	r2, [pc, #172]	@ (80125c4 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d01d      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a2a      	ldr	r2, [pc, #168]	@ (80125c8 <HAL_TIM_PWM_Start_DMA+0x454>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d018      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a21      	ldr	r2, [pc, #132]	@ (80125b0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d013      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4a26      	ldr	r2, [pc, #152]	@ (80125cc <HAL_TIM_PWM_Start_DMA+0x458>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d00e      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a1d      	ldr	r2, [pc, #116]	@ (80125b4 <HAL_TIM_PWM_Start_DMA+0x440>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d009      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a22      	ldr	r2, [pc, #136]	@ (80125d0 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d004      	beq.n	8012556 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a20      	ldr	r2, [pc, #128]	@ (80125d4 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012552:	4293      	cmp	r3, r2
 8012554:	d115      	bne.n	8012582 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	689a      	ldr	r2, [r3, #8]
 801255c:	4b1e      	ldr	r3, [pc, #120]	@ (80125d8 <HAL_TIM_PWM_Start_DMA+0x464>)
 801255e:	4013      	ands	r3, r2
 8012560:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	2b06      	cmp	r3, #6
 8012566:	d015      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x420>
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801256e:	d011      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	f042 0201 	orr.w	r2, r2, #1
 801257e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012580:	e008      	b.n	8012594 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f042 0201 	orr.w	r2, r2, #1
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	e000      	b.n	8012596 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012594:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012596:	7dfb      	ldrb	r3, [r7, #23]
}
 8012598:	4618      	mov	r0, r3
 801259a:	3718      	adds	r7, #24
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	08012d0f 	.word	0x08012d0f
 80125a4:	08012db7 	.word	0x08012db7
 80125a8:	08012c7d 	.word	0x08012c7d
 80125ac:	40010000 	.word	0x40010000
 80125b0:	40010400 	.word	0x40010400
 80125b4:	40014000 	.word	0x40014000
 80125b8:	40014400 	.word	0x40014400
 80125bc:	40014800 	.word	0x40014800
 80125c0:	40000400 	.word	0x40000400
 80125c4:	40000800 	.word	0x40000800
 80125c8:	40000c00 	.word	0x40000c00
 80125cc:	40001800 	.word	0x40001800
 80125d0:	4000e000 	.word	0x4000e000
 80125d4:	4000e400 	.word	0x4000e400
 80125d8:	00010007 	.word	0x00010007

080125dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	f003 0302 	and.w	r3, r3, #2
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d020      	beq.n	8012640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f003 0302 	and.w	r3, r3, #2
 8012604:	2b00      	cmp	r3, #0
 8012606:	d01b      	beq.n	8012640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f06f 0202 	mvn.w	r2, #2
 8012610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2201      	movs	r2, #1
 8012616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	f003 0303 	and.w	r3, r3, #3
 8012622:	2b00      	cmp	r3, #0
 8012624:	d003      	beq.n	801262e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 faf6 	bl	8012c18 <HAL_TIM_IC_CaptureCallback>
 801262c:	e005      	b.n	801263a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 fae8 	bl	8012c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 faf9 	bl	8012c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2200      	movs	r2, #0
 801263e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	f003 0304 	and.w	r3, r3, #4
 8012646:	2b00      	cmp	r3, #0
 8012648:	d020      	beq.n	801268c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f003 0304 	and.w	r3, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	d01b      	beq.n	801268c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f06f 0204 	mvn.w	r2, #4
 801265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2202      	movs	r2, #2
 8012662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	699b      	ldr	r3, [r3, #24]
 801266a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801266e:	2b00      	cmp	r3, #0
 8012670:	d003      	beq.n	801267a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 fad0 	bl	8012c18 <HAL_TIM_IC_CaptureCallback>
 8012678:	e005      	b.n	8012686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fac2 	bl	8012c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fad3 	bl	8012c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2200      	movs	r2, #0
 801268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	f003 0308 	and.w	r3, r3, #8
 8012692:	2b00      	cmp	r3, #0
 8012694:	d020      	beq.n	80126d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f003 0308 	and.w	r3, r3, #8
 801269c:	2b00      	cmp	r3, #0
 801269e:	d01b      	beq.n	80126d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f06f 0208 	mvn.w	r2, #8
 80126a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2204      	movs	r2, #4
 80126ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	69db      	ldr	r3, [r3, #28]
 80126b6:	f003 0303 	and.w	r3, r3, #3
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d003      	beq.n	80126c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 faaa 	bl	8012c18 <HAL_TIM_IC_CaptureCallback>
 80126c4:	e005      	b.n	80126d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 fa9c 	bl	8012c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 faad 	bl	8012c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2200      	movs	r2, #0
 80126d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	f003 0310 	and.w	r3, r3, #16
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d020      	beq.n	8012724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	f003 0310 	and.w	r3, r3, #16
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d01b      	beq.n	8012724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f06f 0210 	mvn.w	r2, #16
 80126f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2208      	movs	r2, #8
 80126fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	69db      	ldr	r3, [r3, #28]
 8012702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012706:	2b00      	cmp	r3, #0
 8012708:	d003      	beq.n	8012712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fa84 	bl	8012c18 <HAL_TIM_IC_CaptureCallback>
 8012710:	e005      	b.n	801271e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fa76 	bl	8012c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fa87 	bl	8012c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	f003 0301 	and.w	r3, r3, #1
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00c      	beq.n	8012748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d007      	beq.n	8012748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f06f 0201 	mvn.w	r2, #1
 8012740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7ee fda8 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801274e:	2b00      	cmp	r3, #0
 8012750:	d104      	bne.n	801275c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00c      	beq.n	8012776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801276e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f001 f847 	bl	8013804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801277c:	2b00      	cmp	r3, #0
 801277e:	d00c      	beq.n	801279a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012786:	2b00      	cmp	r3, #0
 8012788:	d007      	beq.n	801279a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f001 f83f 	bl	8013818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d00c      	beq.n	80127be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d007      	beq.n	80127be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80127b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 fa4b 	bl	8012c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	f003 0320 	and.w	r3, r3, #32
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00c      	beq.n	80127e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f003 0320 	and.w	r3, r3, #32
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d007      	beq.n	80127e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f06f 0220 	mvn.w	r2, #32
 80127da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f001 f807 	bl	80137f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80127e2:	bf00      	nop
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
	...

080127ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b086      	sub	sp, #24
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127f8:	2300      	movs	r3, #0
 80127fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012802:	2b01      	cmp	r3, #1
 8012804:	d101      	bne.n	801280a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012806:	2302      	movs	r3, #2
 8012808:	e0ff      	b.n	8012a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2201      	movs	r2, #1
 801280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b14      	cmp	r3, #20
 8012816:	f200 80f0 	bhi.w	80129fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 801281a:	a201      	add	r2, pc, #4	@ (adr r2, 8012820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012820:	08012875 	.word	0x08012875
 8012824:	080129fb 	.word	0x080129fb
 8012828:	080129fb 	.word	0x080129fb
 801282c:	080129fb 	.word	0x080129fb
 8012830:	080128b5 	.word	0x080128b5
 8012834:	080129fb 	.word	0x080129fb
 8012838:	080129fb 	.word	0x080129fb
 801283c:	080129fb 	.word	0x080129fb
 8012840:	080128f7 	.word	0x080128f7
 8012844:	080129fb 	.word	0x080129fb
 8012848:	080129fb 	.word	0x080129fb
 801284c:	080129fb 	.word	0x080129fb
 8012850:	08012937 	.word	0x08012937
 8012854:	080129fb 	.word	0x080129fb
 8012858:	080129fb 	.word	0x080129fb
 801285c:	080129fb 	.word	0x080129fb
 8012860:	08012979 	.word	0x08012979
 8012864:	080129fb 	.word	0x080129fb
 8012868:	080129fb 	.word	0x080129fb
 801286c:	080129fb 	.word	0x080129fb
 8012870:	080129b9 	.word	0x080129b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	68b9      	ldr	r1, [r7, #8]
 801287a:	4618      	mov	r0, r3
 801287c:	f000 fb82 	bl	8012f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	699a      	ldr	r2, [r3, #24]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f042 0208 	orr.w	r2, r2, #8
 801288e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	699a      	ldr	r2, [r3, #24]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f022 0204 	bic.w	r2, r2, #4
 801289e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	6999      	ldr	r1, [r3, #24]
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	691a      	ldr	r2, [r3, #16]
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	430a      	orrs	r2, r1
 80128b0:	619a      	str	r2, [r3, #24]
      break;
 80128b2:	e0a5      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	68b9      	ldr	r1, [r7, #8]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f000 fbf2 	bl	80130a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	699a      	ldr	r2, [r3, #24]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80128ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	699a      	ldr	r2, [r3, #24]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80128de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	6999      	ldr	r1, [r3, #24]
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	691b      	ldr	r3, [r3, #16]
 80128ea:	021a      	lsls	r2, r3, #8
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	430a      	orrs	r2, r1
 80128f2:	619a      	str	r2, [r3, #24]
      break;
 80128f4:	e084      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	68b9      	ldr	r1, [r7, #8]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f000 fc5b 	bl	80131b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	69da      	ldr	r2, [r3, #28]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f042 0208 	orr.w	r2, r2, #8
 8012910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	69da      	ldr	r2, [r3, #28]
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f022 0204 	bic.w	r2, r2, #4
 8012920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	69d9      	ldr	r1, [r3, #28]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	691a      	ldr	r2, [r3, #16]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	430a      	orrs	r2, r1
 8012932:	61da      	str	r2, [r3, #28]
      break;
 8012934:	e064      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68b9      	ldr	r1, [r7, #8]
 801293c:	4618      	mov	r0, r3
 801293e:	f000 fcc3 	bl	80132c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	69da      	ldr	r2, [r3, #28]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	69da      	ldr	r2, [r3, #28]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	69d9      	ldr	r1, [r3, #28]
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	021a      	lsls	r2, r3, #8
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	430a      	orrs	r2, r1
 8012974:	61da      	str	r2, [r3, #28]
      break;
 8012976:	e043      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68b9      	ldr	r1, [r7, #8]
 801297e:	4618      	mov	r0, r3
 8012980:	f000 fd0c 	bl	801339c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f042 0208 	orr.w	r2, r2, #8
 8012992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f022 0204 	bic.w	r2, r2, #4
 80129a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	691a      	ldr	r2, [r3, #16]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	430a      	orrs	r2, r1
 80129b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80129b6:	e023      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68b9      	ldr	r1, [r7, #8]
 80129be:	4618      	mov	r0, r3
 80129c0:	f000 fd50 	bl	8013464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80129d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80129e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	021a      	lsls	r2, r3, #8
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	430a      	orrs	r2, r1
 80129f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80129f8:	e002      	b.n	8012a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80129fa:	2301      	movs	r3, #1
 80129fc:	75fb      	strb	r3, [r7, #23]
      break;
 80129fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3718      	adds	r7, #24
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop

08012a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d101      	bne.n	8012a30 <HAL_TIM_ConfigClockSource+0x1c>
 8012a2c:	2302      	movs	r3, #2
 8012a2e:	e0dc      	b.n	8012bea <HAL_TIM_ConfigClockSource+0x1d6>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2201      	movs	r2, #1
 8012a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2202      	movs	r2, #2
 8012a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	689b      	ldr	r3, [r3, #8]
 8012a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8012bf4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012a4c:	4013      	ands	r3, r2
 8012a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	68ba      	ldr	r2, [r7, #8]
 8012a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a64      	ldr	r2, [pc, #400]	@ (8012bf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	f000 80a9 	beq.w	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012a6c:	4a62      	ldr	r2, [pc, #392]	@ (8012bf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	f200 80ae 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a74:	4a61      	ldr	r2, [pc, #388]	@ (8012bfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	f000 80a1 	beq.w	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012a7c:	4a5f      	ldr	r2, [pc, #380]	@ (8012bfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	f200 80a6 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a84:	4a5e      	ldr	r2, [pc, #376]	@ (8012c00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	f000 8099 	beq.w	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012a8c:	4a5c      	ldr	r2, [pc, #368]	@ (8012c00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	f200 809e 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012a94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012a98:	f000 8091 	beq.w	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012a9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012aa0:	f200 8096 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012aa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012aa8:	f000 8089 	beq.w	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012aac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012ab0:	f200 808e 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ab8:	d03e      	beq.n	8012b38 <HAL_TIM_ConfigClockSource+0x124>
 8012aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012abe:	f200 8087 	bhi.w	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ac6:	f000 8086 	beq.w	8012bd6 <HAL_TIM_ConfigClockSource+0x1c2>
 8012aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ace:	d87f      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ad0:	2b70      	cmp	r3, #112	@ 0x70
 8012ad2:	d01a      	beq.n	8012b0a <HAL_TIM_ConfigClockSource+0xf6>
 8012ad4:	2b70      	cmp	r3, #112	@ 0x70
 8012ad6:	d87b      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ad8:	2b60      	cmp	r3, #96	@ 0x60
 8012ada:	d050      	beq.n	8012b7e <HAL_TIM_ConfigClockSource+0x16a>
 8012adc:	2b60      	cmp	r3, #96	@ 0x60
 8012ade:	d877      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ae0:	2b50      	cmp	r3, #80	@ 0x50
 8012ae2:	d03c      	beq.n	8012b5e <HAL_TIM_ConfigClockSource+0x14a>
 8012ae4:	2b50      	cmp	r3, #80	@ 0x50
 8012ae6:	d873      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ae8:	2b40      	cmp	r3, #64	@ 0x40
 8012aea:	d058      	beq.n	8012b9e <HAL_TIM_ConfigClockSource+0x18a>
 8012aec:	2b40      	cmp	r3, #64	@ 0x40
 8012aee:	d86f      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012af0:	2b30      	cmp	r3, #48	@ 0x30
 8012af2:	d064      	beq.n	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012af4:	2b30      	cmp	r3, #48	@ 0x30
 8012af6:	d86b      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012af8:	2b20      	cmp	r3, #32
 8012afa:	d060      	beq.n	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012afc:	2b20      	cmp	r3, #32
 8012afe:	d867      	bhi.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d05c      	beq.n	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012b04:	2b10      	cmp	r3, #16
 8012b06:	d05a      	beq.n	8012bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8012b08:	e062      	b.n	8012bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012b1a:	f000 fd87 	bl	801362c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	609a      	str	r2, [r3, #8]
      break;
 8012b36:	e04f      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012b48:	f000 fd70 	bl	801362c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	689a      	ldr	r2, [r3, #8]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012b5a:	609a      	str	r2, [r3, #8]
      break;
 8012b5c:	e03c      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f000 fce0 	bl	8013530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2150      	movs	r1, #80	@ 0x50
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 fd3a 	bl	80135f0 <TIM_ITRx_SetConfig>
      break;
 8012b7c:	e02c      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f000 fcff 	bl	801358e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2160      	movs	r1, #96	@ 0x60
 8012b96:	4618      	mov	r0, r3
 8012b98:	f000 fd2a 	bl	80135f0 <TIM_ITRx_SetConfig>
      break;
 8012b9c:	e01c      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012baa:	461a      	mov	r2, r3
 8012bac:	f000 fcc0 	bl	8013530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2140      	movs	r1, #64	@ 0x40
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f000 fd1a 	bl	80135f0 <TIM_ITRx_SetConfig>
      break;
 8012bbc:	e00c      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	4610      	mov	r0, r2
 8012bca:	f000 fd11 	bl	80135f0 <TIM_ITRx_SetConfig>
      break;
 8012bce:	e003      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8012bd4:	e000      	b.n	8012bd8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	ffceff88 	.word	0xffceff88
 8012bf8:	00100040 	.word	0x00100040
 8012bfc:	00100030 	.word	0x00100030
 8012c00:	00100020 	.word	0x00100020

08012c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012c0c:	bf00      	nop
 8012c0e:	370c      	adds	r7, #12
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012c34:	bf00      	nop
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012c5c:	bf00      	nop
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8012c70:	bf00      	nop
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d107      	bne.n	8012ca4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2201      	movs	r2, #1
 8012c98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012ca2:	e02a      	b.n	8012cfa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d107      	bne.n	8012cbe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012cbc:	e01d      	b.n	8012cfa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d107      	bne.n	8012cd8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2204      	movs	r2, #4
 8012ccc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012cd6:	e010      	b.n	8012cfa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d107      	bne.n	8012cf2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2208      	movs	r2, #8
 8012ce6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012cf0:	e003      	b.n	8012cfa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f7ff ffb4 	bl	8012c68 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2200      	movs	r2, #0
 8012d04:	771a      	strb	r2, [r3, #28]
}
 8012d06:	bf00      	nop
 8012d08:	3710      	adds	r7, #16
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d1a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d10b      	bne.n	8012d3e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	69db      	ldr	r3, [r3, #28]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d136      	bne.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d3c:	e031      	b.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d10b      	bne.n	8012d60 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	69db      	ldr	r3, [r3, #28]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d125      	bne.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d5e:	e020      	b.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d10b      	bne.n	8012d82 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2204      	movs	r2, #4
 8012d6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	69db      	ldr	r3, [r3, #28]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d114      	bne.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d80:	e00f      	b.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d10a      	bne.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2208      	movs	r2, #8
 8012d90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	69db      	ldr	r3, [r3, #28]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d103      	bne.n	8012da2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f7ff ff42 	bl	8012c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2200      	movs	r2, #0
 8012dac:	771a      	strb	r2, [r3, #28]
}
 8012dae:	bf00      	nop
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b084      	sub	sp, #16
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d103      	bne.n	8012dd6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	771a      	strb	r2, [r3, #28]
 8012dd4:	e019      	b.n	8012e0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d103      	bne.n	8012de8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2202      	movs	r2, #2
 8012de4:	771a      	strb	r2, [r3, #28]
 8012de6:	e010      	b.n	8012e0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d103      	bne.n	8012dfa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2204      	movs	r2, #4
 8012df6:	771a      	strb	r2, [r3, #28]
 8012df8:	e007      	b.n	8012e0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d102      	bne.n	8012e0a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2208      	movs	r2, #8
 8012e08:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	f7ff ff18 	bl	8012c40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2200      	movs	r2, #0
 8012e14:	771a      	strb	r2, [r3, #28]
}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
	...

08012e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b085      	sub	sp, #20
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	4a4a      	ldr	r2, [pc, #296]	@ (8012f5c <TIM_Base_SetConfig+0x13c>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d013      	beq.n	8012e60 <TIM_Base_SetConfig+0x40>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e3e:	d00f      	beq.n	8012e60 <TIM_Base_SetConfig+0x40>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	4a47      	ldr	r2, [pc, #284]	@ (8012f60 <TIM_Base_SetConfig+0x140>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d00b      	beq.n	8012e60 <TIM_Base_SetConfig+0x40>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4a46      	ldr	r2, [pc, #280]	@ (8012f64 <TIM_Base_SetConfig+0x144>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d007      	beq.n	8012e60 <TIM_Base_SetConfig+0x40>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	4a45      	ldr	r2, [pc, #276]	@ (8012f68 <TIM_Base_SetConfig+0x148>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d003      	beq.n	8012e60 <TIM_Base_SetConfig+0x40>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	4a44      	ldr	r2, [pc, #272]	@ (8012f6c <TIM_Base_SetConfig+0x14c>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d108      	bne.n	8012e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4a39      	ldr	r2, [pc, #228]	@ (8012f5c <TIM_Base_SetConfig+0x13c>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d027      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e80:	d023      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4a36      	ldr	r2, [pc, #216]	@ (8012f60 <TIM_Base_SetConfig+0x140>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d01f      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4a35      	ldr	r2, [pc, #212]	@ (8012f64 <TIM_Base_SetConfig+0x144>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d01b      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4a34      	ldr	r2, [pc, #208]	@ (8012f68 <TIM_Base_SetConfig+0x148>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d017      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4a33      	ldr	r2, [pc, #204]	@ (8012f6c <TIM_Base_SetConfig+0x14c>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d013      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4a32      	ldr	r2, [pc, #200]	@ (8012f70 <TIM_Base_SetConfig+0x150>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d00f      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	4a31      	ldr	r2, [pc, #196]	@ (8012f74 <TIM_Base_SetConfig+0x154>)
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d00b      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	4a30      	ldr	r2, [pc, #192]	@ (8012f78 <TIM_Base_SetConfig+0x158>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d007      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8012f7c <TIM_Base_SetConfig+0x15c>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d003      	beq.n	8012eca <TIM_Base_SetConfig+0xaa>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8012f80 <TIM_Base_SetConfig+0x160>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d108      	bne.n	8012edc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	4313      	orrs	r3, r2
 8012eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	4313      	orrs	r3, r2
 8012ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	68fa      	ldr	r2, [r7, #12]
 8012eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	689a      	ldr	r2, [r3, #8]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	4a16      	ldr	r2, [pc, #88]	@ (8012f5c <TIM_Base_SetConfig+0x13c>)
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d00f      	beq.n	8012f28 <TIM_Base_SetConfig+0x108>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	4a18      	ldr	r2, [pc, #96]	@ (8012f6c <TIM_Base_SetConfig+0x14c>)
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d00b      	beq.n	8012f28 <TIM_Base_SetConfig+0x108>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4a17      	ldr	r2, [pc, #92]	@ (8012f70 <TIM_Base_SetConfig+0x150>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d007      	beq.n	8012f28 <TIM_Base_SetConfig+0x108>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	4a16      	ldr	r2, [pc, #88]	@ (8012f74 <TIM_Base_SetConfig+0x154>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d003      	beq.n	8012f28 <TIM_Base_SetConfig+0x108>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4a15      	ldr	r2, [pc, #84]	@ (8012f78 <TIM_Base_SetConfig+0x158>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d103      	bne.n	8012f30 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	691a      	ldr	r2, [r3, #16]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d105      	bne.n	8012f4e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	f023 0201 	bic.w	r2, r3, #1
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	611a      	str	r2, [r3, #16]
  }
}
 8012f4e:	bf00      	nop
 8012f50:	3714      	adds	r7, #20
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	40010000 	.word	0x40010000
 8012f60:	40000400 	.word	0x40000400
 8012f64:	40000800 	.word	0x40000800
 8012f68:	40000c00 	.word	0x40000c00
 8012f6c:	40010400 	.word	0x40010400
 8012f70:	40014000 	.word	0x40014000
 8012f74:	40014400 	.word	0x40014400
 8012f78:	40014800 	.word	0x40014800
 8012f7c:	4000e000 	.word	0x4000e000
 8012f80:	4000e400 	.word	0x4000e400

08012f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b087      	sub	sp, #28
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6a1b      	ldr	r3, [r3, #32]
 8012f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a1b      	ldr	r3, [r3, #32]
 8012f98:	f023 0201 	bic.w	r2, r3, #1
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	699b      	ldr	r3, [r3, #24]
 8012faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	4b37      	ldr	r3, [pc, #220]	@ (801308c <TIM_OC1_SetConfig+0x108>)
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f023 0303 	bic.w	r3, r3, #3
 8012fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	f023 0302 	bic.w	r3, r3, #2
 8012fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	697a      	ldr	r2, [r7, #20]
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4a2d      	ldr	r2, [pc, #180]	@ (8013090 <TIM_OC1_SetConfig+0x10c>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d00f      	beq.n	8013000 <TIM_OC1_SetConfig+0x7c>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8013094 <TIM_OC1_SetConfig+0x110>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d00b      	beq.n	8013000 <TIM_OC1_SetConfig+0x7c>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4a2b      	ldr	r2, [pc, #172]	@ (8013098 <TIM_OC1_SetConfig+0x114>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d007      	beq.n	8013000 <TIM_OC1_SetConfig+0x7c>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	4a2a      	ldr	r2, [pc, #168]	@ (801309c <TIM_OC1_SetConfig+0x118>)
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d003      	beq.n	8013000 <TIM_OC1_SetConfig+0x7c>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	4a29      	ldr	r2, [pc, #164]	@ (80130a0 <TIM_OC1_SetConfig+0x11c>)
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	d10c      	bne.n	801301a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	f023 0308 	bic.w	r3, r3, #8
 8013006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	697a      	ldr	r2, [r7, #20]
 801300e:	4313      	orrs	r3, r2
 8013010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	f023 0304 	bic.w	r3, r3, #4
 8013018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	4a1c      	ldr	r2, [pc, #112]	@ (8013090 <TIM_OC1_SetConfig+0x10c>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d00f      	beq.n	8013042 <TIM_OC1_SetConfig+0xbe>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	4a1b      	ldr	r2, [pc, #108]	@ (8013094 <TIM_OC1_SetConfig+0x110>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d00b      	beq.n	8013042 <TIM_OC1_SetConfig+0xbe>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	4a1a      	ldr	r2, [pc, #104]	@ (8013098 <TIM_OC1_SetConfig+0x114>)
 801302e:	4293      	cmp	r3, r2
 8013030:	d007      	beq.n	8013042 <TIM_OC1_SetConfig+0xbe>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	4a19      	ldr	r2, [pc, #100]	@ (801309c <TIM_OC1_SetConfig+0x118>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d003      	beq.n	8013042 <TIM_OC1_SetConfig+0xbe>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4a18      	ldr	r2, [pc, #96]	@ (80130a0 <TIM_OC1_SetConfig+0x11c>)
 801303e:	4293      	cmp	r3, r2
 8013040:	d111      	bne.n	8013066 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	695b      	ldr	r3, [r3, #20]
 8013056:	693a      	ldr	r2, [r7, #16]
 8013058:	4313      	orrs	r3, r2
 801305a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	699b      	ldr	r3, [r3, #24]
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	4313      	orrs	r3, r2
 8013064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	685a      	ldr	r2, [r3, #4]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	621a      	str	r2, [r3, #32]
}
 8013080:	bf00      	nop
 8013082:	371c      	adds	r7, #28
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr
 801308c:	fffeff8f 	.word	0xfffeff8f
 8013090:	40010000 	.word	0x40010000
 8013094:	40010400 	.word	0x40010400
 8013098:	40014000 	.word	0x40014000
 801309c:	40014400 	.word	0x40014400
 80130a0:	40014800 	.word	0x40014800

080130a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b087      	sub	sp, #28
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6a1b      	ldr	r3, [r3, #32]
 80130b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a1b      	ldr	r3, [r3, #32]
 80130b8:	f023 0210 	bic.w	r2, r3, #16
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	699b      	ldr	r3, [r3, #24]
 80130ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	4b34      	ldr	r3, [pc, #208]	@ (80131a0 <TIM_OC2_SetConfig+0xfc>)
 80130d0:	4013      	ands	r3, r2
 80130d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80130da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	021b      	lsls	r3, r3, #8
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	4313      	orrs	r3, r2
 80130e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	f023 0320 	bic.w	r3, r3, #32
 80130ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	011b      	lsls	r3, r3, #4
 80130f6:	697a      	ldr	r2, [r7, #20]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	4a29      	ldr	r2, [pc, #164]	@ (80131a4 <TIM_OC2_SetConfig+0x100>)
 8013100:	4293      	cmp	r3, r2
 8013102:	d003      	beq.n	801310c <TIM_OC2_SetConfig+0x68>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	4a28      	ldr	r2, [pc, #160]	@ (80131a8 <TIM_OC2_SetConfig+0x104>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d10d      	bne.n	8013128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	011b      	lsls	r3, r3, #4
 801311a:	697a      	ldr	r2, [r7, #20]
 801311c:	4313      	orrs	r3, r2
 801311e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	4a1e      	ldr	r2, [pc, #120]	@ (80131a4 <TIM_OC2_SetConfig+0x100>)
 801312c:	4293      	cmp	r3, r2
 801312e:	d00f      	beq.n	8013150 <TIM_OC2_SetConfig+0xac>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4a1d      	ldr	r2, [pc, #116]	@ (80131a8 <TIM_OC2_SetConfig+0x104>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d00b      	beq.n	8013150 <TIM_OC2_SetConfig+0xac>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4a1c      	ldr	r2, [pc, #112]	@ (80131ac <TIM_OC2_SetConfig+0x108>)
 801313c:	4293      	cmp	r3, r2
 801313e:	d007      	beq.n	8013150 <TIM_OC2_SetConfig+0xac>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4a1b      	ldr	r2, [pc, #108]	@ (80131b0 <TIM_OC2_SetConfig+0x10c>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d003      	beq.n	8013150 <TIM_OC2_SetConfig+0xac>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	4a1a      	ldr	r2, [pc, #104]	@ (80131b4 <TIM_OC2_SetConfig+0x110>)
 801314c:	4293      	cmp	r3, r2
 801314e:	d113      	bne.n	8013178 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801315e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	695b      	ldr	r3, [r3, #20]
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	693a      	ldr	r2, [r7, #16]
 8013168:	4313      	orrs	r3, r2
 801316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	699b      	ldr	r3, [r3, #24]
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	693a      	ldr	r2, [r7, #16]
 8013174:	4313      	orrs	r3, r2
 8013176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68fa      	ldr	r2, [r7, #12]
 8013182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	685a      	ldr	r2, [r3, #4]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	697a      	ldr	r2, [r7, #20]
 8013190:	621a      	str	r2, [r3, #32]
}
 8013192:	bf00      	nop
 8013194:	371c      	adds	r7, #28
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr
 801319e:	bf00      	nop
 80131a0:	feff8fff 	.word	0xfeff8fff
 80131a4:	40010000 	.word	0x40010000
 80131a8:	40010400 	.word	0x40010400
 80131ac:	40014000 	.word	0x40014000
 80131b0:	40014400 	.word	0x40014400
 80131b4:	40014800 	.word	0x40014800

080131b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b087      	sub	sp, #28
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6a1b      	ldr	r3, [r3, #32]
 80131c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6a1b      	ldr	r3, [r3, #32]
 80131cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	69db      	ldr	r3, [r3, #28]
 80131de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	4b33      	ldr	r3, [pc, #204]	@ (80132b0 <TIM_OC3_SetConfig+0xf8>)
 80131e4:	4013      	ands	r3, r2
 80131e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f023 0303 	bic.w	r3, r3, #3
 80131ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	4313      	orrs	r3, r2
 80131f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	021b      	lsls	r3, r3, #8
 8013208:	697a      	ldr	r2, [r7, #20]
 801320a:	4313      	orrs	r3, r2
 801320c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4a28      	ldr	r2, [pc, #160]	@ (80132b4 <TIM_OC3_SetConfig+0xfc>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d003      	beq.n	801321e <TIM_OC3_SetConfig+0x66>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4a27      	ldr	r2, [pc, #156]	@ (80132b8 <TIM_OC3_SetConfig+0x100>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d10d      	bne.n	801323a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	021b      	lsls	r3, r3, #8
 801322c:	697a      	ldr	r2, [r7, #20]
 801322e:	4313      	orrs	r3, r2
 8013230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4a1d      	ldr	r2, [pc, #116]	@ (80132b4 <TIM_OC3_SetConfig+0xfc>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d00f      	beq.n	8013262 <TIM_OC3_SetConfig+0xaa>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	4a1c      	ldr	r2, [pc, #112]	@ (80132b8 <TIM_OC3_SetConfig+0x100>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d00b      	beq.n	8013262 <TIM_OC3_SetConfig+0xaa>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	4a1b      	ldr	r2, [pc, #108]	@ (80132bc <TIM_OC3_SetConfig+0x104>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d007      	beq.n	8013262 <TIM_OC3_SetConfig+0xaa>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4a1a      	ldr	r2, [pc, #104]	@ (80132c0 <TIM_OC3_SetConfig+0x108>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d003      	beq.n	8013262 <TIM_OC3_SetConfig+0xaa>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4a19      	ldr	r2, [pc, #100]	@ (80132c4 <TIM_OC3_SetConfig+0x10c>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d113      	bne.n	801328a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	695b      	ldr	r3, [r3, #20]
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	693a      	ldr	r2, [r7, #16]
 801327a:	4313      	orrs	r3, r2
 801327c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	699b      	ldr	r3, [r3, #24]
 8013282:	011b      	lsls	r3, r3, #4
 8013284:	693a      	ldr	r2, [r7, #16]
 8013286:	4313      	orrs	r3, r2
 8013288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	693a      	ldr	r2, [r7, #16]
 801328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	68fa      	ldr	r2, [r7, #12]
 8013294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	685a      	ldr	r2, [r3, #4]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	697a      	ldr	r2, [r7, #20]
 80132a2:	621a      	str	r2, [r3, #32]
}
 80132a4:	bf00      	nop
 80132a6:	371c      	adds	r7, #28
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr
 80132b0:	fffeff8f 	.word	0xfffeff8f
 80132b4:	40010000 	.word	0x40010000
 80132b8:	40010400 	.word	0x40010400
 80132bc:	40014000 	.word	0x40014000
 80132c0:	40014400 	.word	0x40014400
 80132c4:	40014800 	.word	0x40014800

080132c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b087      	sub	sp, #28
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a1b      	ldr	r3, [r3, #32]
 80132dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	69db      	ldr	r3, [r3, #28]
 80132ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	4b24      	ldr	r3, [pc, #144]	@ (8013384 <TIM_OC4_SetConfig+0xbc>)
 80132f4:	4013      	ands	r3, r2
 80132f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80132fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	021b      	lsls	r3, r3, #8
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	4313      	orrs	r3, r2
 801330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	031b      	lsls	r3, r3, #12
 801331a:	693a      	ldr	r2, [r7, #16]
 801331c:	4313      	orrs	r3, r2
 801331e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	4a19      	ldr	r2, [pc, #100]	@ (8013388 <TIM_OC4_SetConfig+0xc0>)
 8013324:	4293      	cmp	r3, r2
 8013326:	d00f      	beq.n	8013348 <TIM_OC4_SetConfig+0x80>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4a18      	ldr	r2, [pc, #96]	@ (801338c <TIM_OC4_SetConfig+0xc4>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d00b      	beq.n	8013348 <TIM_OC4_SetConfig+0x80>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4a17      	ldr	r2, [pc, #92]	@ (8013390 <TIM_OC4_SetConfig+0xc8>)
 8013334:	4293      	cmp	r3, r2
 8013336:	d007      	beq.n	8013348 <TIM_OC4_SetConfig+0x80>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4a16      	ldr	r2, [pc, #88]	@ (8013394 <TIM_OC4_SetConfig+0xcc>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d003      	beq.n	8013348 <TIM_OC4_SetConfig+0x80>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	4a15      	ldr	r2, [pc, #84]	@ (8013398 <TIM_OC4_SetConfig+0xd0>)
 8013344:	4293      	cmp	r3, r2
 8013346:	d109      	bne.n	801335c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801334e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	695b      	ldr	r3, [r3, #20]
 8013354:	019b      	lsls	r3, r3, #6
 8013356:	697a      	ldr	r2, [r7, #20]
 8013358:	4313      	orrs	r3, r2
 801335a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	697a      	ldr	r2, [r7, #20]
 8013360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	685a      	ldr	r2, [r3, #4]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	693a      	ldr	r2, [r7, #16]
 8013374:	621a      	str	r2, [r3, #32]
}
 8013376:	bf00      	nop
 8013378:	371c      	adds	r7, #28
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	feff8fff 	.word	0xfeff8fff
 8013388:	40010000 	.word	0x40010000
 801338c:	40010400 	.word	0x40010400
 8013390:	40014000 	.word	0x40014000
 8013394:	40014400 	.word	0x40014400
 8013398:	40014800 	.word	0x40014800

0801339c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801339c:	b480      	push	{r7}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6a1b      	ldr	r3, [r3, #32]
 80133aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6a1b      	ldr	r3, [r3, #32]
 80133b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80133c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	4b21      	ldr	r3, [pc, #132]	@ (801344c <TIM_OC5_SetConfig+0xb0>)
 80133c8:	4013      	ands	r3, r2
 80133ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	4313      	orrs	r3, r2
 80133d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80133dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	041b      	lsls	r3, r3, #16
 80133e4:	693a      	ldr	r2, [r7, #16]
 80133e6:	4313      	orrs	r3, r2
 80133e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4a18      	ldr	r2, [pc, #96]	@ (8013450 <TIM_OC5_SetConfig+0xb4>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d00f      	beq.n	8013412 <TIM_OC5_SetConfig+0x76>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4a17      	ldr	r2, [pc, #92]	@ (8013454 <TIM_OC5_SetConfig+0xb8>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d00b      	beq.n	8013412 <TIM_OC5_SetConfig+0x76>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	4a16      	ldr	r2, [pc, #88]	@ (8013458 <TIM_OC5_SetConfig+0xbc>)
 80133fe:	4293      	cmp	r3, r2
 8013400:	d007      	beq.n	8013412 <TIM_OC5_SetConfig+0x76>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4a15      	ldr	r2, [pc, #84]	@ (801345c <TIM_OC5_SetConfig+0xc0>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d003      	beq.n	8013412 <TIM_OC5_SetConfig+0x76>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	4a14      	ldr	r2, [pc, #80]	@ (8013460 <TIM_OC5_SetConfig+0xc4>)
 801340e:	4293      	cmp	r3, r2
 8013410:	d109      	bne.n	8013426 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	695b      	ldr	r3, [r3, #20]
 801341e:	021b      	lsls	r3, r3, #8
 8013420:	697a      	ldr	r2, [r7, #20]
 8013422:	4313      	orrs	r3, r2
 8013424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	697a      	ldr	r2, [r7, #20]
 801342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	68fa      	ldr	r2, [r7, #12]
 8013430:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	685a      	ldr	r2, [r3, #4]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	693a      	ldr	r2, [r7, #16]
 801343e:	621a      	str	r2, [r3, #32]
}
 8013440:	bf00      	nop
 8013442:	371c      	adds	r7, #28
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr
 801344c:	fffeff8f 	.word	0xfffeff8f
 8013450:	40010000 	.word	0x40010000
 8013454:	40010400 	.word	0x40010400
 8013458:	40014000 	.word	0x40014000
 801345c:	40014400 	.word	0x40014400
 8013460:	40014800 	.word	0x40014800

08013464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013464:	b480      	push	{r7}
 8013466:	b087      	sub	sp, #28
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a1b      	ldr	r3, [r3, #32]
 8013472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6a1b      	ldr	r3, [r3, #32]
 8013478:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	4b22      	ldr	r3, [pc, #136]	@ (8013518 <TIM_OC6_SetConfig+0xb4>)
 8013490:	4013      	ands	r3, r2
 8013492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	021b      	lsls	r3, r3, #8
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	4313      	orrs	r3, r2
 801349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80134a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	051b      	lsls	r3, r3, #20
 80134ae:	693a      	ldr	r2, [r7, #16]
 80134b0:	4313      	orrs	r3, r2
 80134b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4a19      	ldr	r2, [pc, #100]	@ (801351c <TIM_OC6_SetConfig+0xb8>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d00f      	beq.n	80134dc <TIM_OC6_SetConfig+0x78>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	4a18      	ldr	r2, [pc, #96]	@ (8013520 <TIM_OC6_SetConfig+0xbc>)
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d00b      	beq.n	80134dc <TIM_OC6_SetConfig+0x78>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	4a17      	ldr	r2, [pc, #92]	@ (8013524 <TIM_OC6_SetConfig+0xc0>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d007      	beq.n	80134dc <TIM_OC6_SetConfig+0x78>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4a16      	ldr	r2, [pc, #88]	@ (8013528 <TIM_OC6_SetConfig+0xc4>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d003      	beq.n	80134dc <TIM_OC6_SetConfig+0x78>
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4a15      	ldr	r2, [pc, #84]	@ (801352c <TIM_OC6_SetConfig+0xc8>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	d109      	bne.n	80134f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80134e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	695b      	ldr	r3, [r3, #20]
 80134e8:	029b      	lsls	r3, r3, #10
 80134ea:	697a      	ldr	r2, [r7, #20]
 80134ec:	4313      	orrs	r3, r2
 80134ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	697a      	ldr	r2, [r7, #20]
 80134f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	685a      	ldr	r2, [r3, #4]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	693a      	ldr	r2, [r7, #16]
 8013508:	621a      	str	r2, [r3, #32]
}
 801350a:	bf00      	nop
 801350c:	371c      	adds	r7, #28
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr
 8013516:	bf00      	nop
 8013518:	feff8fff 	.word	0xfeff8fff
 801351c:	40010000 	.word	0x40010000
 8013520:	40010400 	.word	0x40010400
 8013524:	40014000 	.word	0x40014000
 8013528:	40014400 	.word	0x40014400
 801352c:	40014800 	.word	0x40014800

08013530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013530:	b480      	push	{r7}
 8013532:	b087      	sub	sp, #28
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6a1b      	ldr	r3, [r3, #32]
 8013540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6a1b      	ldr	r3, [r3, #32]
 8013546:	f023 0201 	bic.w	r2, r3, #1
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	699b      	ldr	r3, [r3, #24]
 8013552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801355a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	011b      	lsls	r3, r3, #4
 8013560:	693a      	ldr	r2, [r7, #16]
 8013562:	4313      	orrs	r3, r2
 8013564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	f023 030a 	bic.w	r3, r3, #10
 801356c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	4313      	orrs	r3, r2
 8013574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	693a      	ldr	r2, [r7, #16]
 801357a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	621a      	str	r2, [r3, #32]
}
 8013582:	bf00      	nop
 8013584:	371c      	adds	r7, #28
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr

0801358e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801358e:	b480      	push	{r7}
 8013590:	b087      	sub	sp, #28
 8013592:	af00      	add	r7, sp, #0
 8013594:	60f8      	str	r0, [r7, #12]
 8013596:	60b9      	str	r1, [r7, #8]
 8013598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6a1b      	ldr	r3, [r3, #32]
 801359e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6a1b      	ldr	r3, [r3, #32]
 80135a4:	f023 0210 	bic.w	r2, r3, #16
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	699b      	ldr	r3, [r3, #24]
 80135b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80135b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	031b      	lsls	r3, r3, #12
 80135be:	693a      	ldr	r2, [r7, #16]
 80135c0:	4313      	orrs	r3, r2
 80135c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80135ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	011b      	lsls	r3, r3, #4
 80135d0:	697a      	ldr	r2, [r7, #20]
 80135d2:	4313      	orrs	r3, r2
 80135d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	693a      	ldr	r2, [r7, #16]
 80135da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	697a      	ldr	r2, [r7, #20]
 80135e0:	621a      	str	r2, [r3, #32]
}
 80135e2:	bf00      	nop
 80135e4:	371c      	adds	r7, #28
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
	...

080135f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	4b09      	ldr	r3, [pc, #36]	@ (8013628 <TIM_ITRx_SetConfig+0x38>)
 8013604:	4013      	ands	r3, r2
 8013606:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013608:	683a      	ldr	r2, [r7, #0]
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4313      	orrs	r3, r2
 801360e:	f043 0307 	orr.w	r3, r3, #7
 8013612:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	609a      	str	r2, [r3, #8]
}
 801361a:	bf00      	nop
 801361c:	3714      	adds	r7, #20
 801361e:	46bd      	mov	sp, r7
 8013620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013624:	4770      	bx	lr
 8013626:	bf00      	nop
 8013628:	ffcfff8f 	.word	0xffcfff8f

0801362c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801362c:	b480      	push	{r7}
 801362e:	b087      	sub	sp, #28
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	021a      	lsls	r2, r3, #8
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	431a      	orrs	r2, r3
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	4313      	orrs	r3, r2
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	4313      	orrs	r3, r2
 8013658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	697a      	ldr	r2, [r7, #20]
 801365e:	609a      	str	r2, [r3, #8]
}
 8013660:	bf00      	nop
 8013662:	371c      	adds	r7, #28
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr

0801366c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801366c:	b480      	push	{r7}
 801366e:	b087      	sub	sp, #28
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	f003 031f 	and.w	r3, r3, #31
 801367e:	2201      	movs	r2, #1
 8013680:	fa02 f303 	lsl.w	r3, r2, r3
 8013684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	6a1a      	ldr	r2, [r3, #32]
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	43db      	mvns	r3, r3
 801368e:	401a      	ands	r2, r3
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	6a1a      	ldr	r2, [r3, #32]
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	f003 031f 	and.w	r3, r3, #31
 801369e:	6879      	ldr	r1, [r7, #4]
 80136a0:	fa01 f303 	lsl.w	r3, r1, r3
 80136a4:	431a      	orrs	r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	621a      	str	r2, [r3, #32]
}
 80136aa:	bf00      	nop
 80136ac:	371c      	adds	r7, #28
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr
	...

080136b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80136b8:	b480      	push	{r7}
 80136ba:	b085      	sub	sp, #20
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d101      	bne.n	80136d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80136cc:	2302      	movs	r3, #2
 80136ce:	e077      	b.n	80137c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2201      	movs	r2, #1
 80136d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2202      	movs	r2, #2
 80136dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	689b      	ldr	r3, [r3, #8]
 80136ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4a35      	ldr	r2, [pc, #212]	@ (80137cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d004      	beq.n	8013704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	4a34      	ldr	r2, [pc, #208]	@ (80137d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013700:	4293      	cmp	r3, r2
 8013702:	d108      	bne.n	8013716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801370a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	4313      	orrs	r3, r2
 8013714:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801371c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	68fa      	ldr	r2, [r7, #12]
 8013724:	4313      	orrs	r3, r2
 8013726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4a25      	ldr	r2, [pc, #148]	@ (80137cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013736:	4293      	cmp	r3, r2
 8013738:	d02c      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013742:	d027      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	4a22      	ldr	r2, [pc, #136]	@ (80137d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801374a:	4293      	cmp	r3, r2
 801374c:	d022      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	4a21      	ldr	r2, [pc, #132]	@ (80137d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d01d      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	4a1f      	ldr	r2, [pc, #124]	@ (80137dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801375e:	4293      	cmp	r3, r2
 8013760:	d018      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4a1a      	ldr	r2, [pc, #104]	@ (80137d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d013      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4a1b      	ldr	r2, [pc, #108]	@ (80137e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d00e      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4a1a      	ldr	r2, [pc, #104]	@ (80137e4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d009      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a18      	ldr	r2, [pc, #96]	@ (80137e8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d004      	beq.n	8013794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	4a17      	ldr	r2, [pc, #92]	@ (80137ec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d10c      	bne.n	80137ae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801379a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	4313      	orrs	r3, r2
 80137a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	68ba      	ldr	r2, [r7, #8]
 80137ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2201      	movs	r2, #1
 80137b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2200      	movs	r2, #0
 80137ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3714      	adds	r7, #20
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	40010000 	.word	0x40010000
 80137d0:	40010400 	.word	0x40010400
 80137d4:	40000400 	.word	0x40000400
 80137d8:	40000800 	.word	0x40000800
 80137dc:	40000c00 	.word	0x40000c00
 80137e0:	40001800 	.word	0x40001800
 80137e4:	40014000 	.word	0x40014000
 80137e8:	4000e000 	.word	0x4000e000
 80137ec:	4000e400 	.word	0x4000e400

080137f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80137f8:	bf00      	nop
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801380c:	bf00      	nop
 801380e:	370c      	adds	r7, #12
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013818:	b480      	push	{r7}
 801381a:	b083      	sub	sp, #12
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013820:	bf00      	nop
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr

0801382c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d101      	bne.n	801383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801383a:	2301      	movs	r3, #1
 801383c:	e042      	b.n	80138c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013844:	2b00      	cmp	r3, #0
 8013846:	d106      	bne.n	8013856 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2200      	movs	r2, #0
 801384c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ef f925 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2224      	movs	r2, #36	@ 0x24
 801385a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f022 0201 	bic.w	r2, r2, #1
 801386c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013872:	2b00      	cmp	r3, #0
 8013874:	d002      	beq.n	801387c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 fe94 	bl	80145a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f000 f825 	bl	80138cc <UART_SetConfig>
 8013882:	4603      	mov	r3, r0
 8013884:	2b01      	cmp	r3, #1
 8013886:	d101      	bne.n	801388c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013888:	2301      	movs	r3, #1
 801388a:	e01b      	b.n	80138c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	685a      	ldr	r2, [r3, #4]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801389a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	689a      	ldr	r2, [r3, #8]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80138aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f042 0201 	orr.w	r2, r2, #1
 80138ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 ff13 	bl	80146e8 <UART_CheckIdleState>
 80138c2:	4603      	mov	r3, r0
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80138cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80138d0:	b092      	sub	sp, #72	@ 0x48
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80138d6:	2300      	movs	r3, #0
 80138d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	689a      	ldr	r2, [r3, #8]
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	691b      	ldr	r3, [r3, #16]
 80138e4:	431a      	orrs	r2, r3
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	695b      	ldr	r3, [r3, #20]
 80138ea:	431a      	orrs	r2, r3
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	69db      	ldr	r3, [r3, #28]
 80138f0:	4313      	orrs	r3, r2
 80138f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	681a      	ldr	r2, [r3, #0]
 80138fa:	4bbe      	ldr	r3, [pc, #760]	@ (8013bf4 <UART_SetConfig+0x328>)
 80138fc:	4013      	ands	r3, r2
 80138fe:	697a      	ldr	r2, [r7, #20]
 8013900:	6812      	ldr	r2, [r2, #0]
 8013902:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013904:	430b      	orrs	r3, r1
 8013906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	68da      	ldr	r2, [r3, #12]
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	430a      	orrs	r2, r1
 801391c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4ab3      	ldr	r2, [pc, #716]	@ (8013bf8 <UART_SetConfig+0x32c>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d004      	beq.n	8013938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	6a1b      	ldr	r3, [r3, #32]
 8013932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013934:	4313      	orrs	r3, r2
 8013936:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	689a      	ldr	r2, [r3, #8]
 801393e:	4baf      	ldr	r3, [pc, #700]	@ (8013bfc <UART_SetConfig+0x330>)
 8013940:	4013      	ands	r3, r2
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	6812      	ldr	r2, [r2, #0]
 8013946:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013948:	430b      	orrs	r3, r1
 801394a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013952:	f023 010f 	bic.w	r1, r3, #15
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	430a      	orrs	r2, r1
 8013960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4aa6      	ldr	r2, [pc, #664]	@ (8013c00 <UART_SetConfig+0x334>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d177      	bne.n	8013a5c <UART_SetConfig+0x190>
 801396c:	4ba5      	ldr	r3, [pc, #660]	@ (8013c04 <UART_SetConfig+0x338>)
 801396e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013970:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013974:	2b28      	cmp	r3, #40	@ 0x28
 8013976:	d86d      	bhi.n	8013a54 <UART_SetConfig+0x188>
 8013978:	a201      	add	r2, pc, #4	@ (adr r2, 8013980 <UART_SetConfig+0xb4>)
 801397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801397e:	bf00      	nop
 8013980:	08013a25 	.word	0x08013a25
 8013984:	08013a55 	.word	0x08013a55
 8013988:	08013a55 	.word	0x08013a55
 801398c:	08013a55 	.word	0x08013a55
 8013990:	08013a55 	.word	0x08013a55
 8013994:	08013a55 	.word	0x08013a55
 8013998:	08013a55 	.word	0x08013a55
 801399c:	08013a55 	.word	0x08013a55
 80139a0:	08013a2d 	.word	0x08013a2d
 80139a4:	08013a55 	.word	0x08013a55
 80139a8:	08013a55 	.word	0x08013a55
 80139ac:	08013a55 	.word	0x08013a55
 80139b0:	08013a55 	.word	0x08013a55
 80139b4:	08013a55 	.word	0x08013a55
 80139b8:	08013a55 	.word	0x08013a55
 80139bc:	08013a55 	.word	0x08013a55
 80139c0:	08013a35 	.word	0x08013a35
 80139c4:	08013a55 	.word	0x08013a55
 80139c8:	08013a55 	.word	0x08013a55
 80139cc:	08013a55 	.word	0x08013a55
 80139d0:	08013a55 	.word	0x08013a55
 80139d4:	08013a55 	.word	0x08013a55
 80139d8:	08013a55 	.word	0x08013a55
 80139dc:	08013a55 	.word	0x08013a55
 80139e0:	08013a3d 	.word	0x08013a3d
 80139e4:	08013a55 	.word	0x08013a55
 80139e8:	08013a55 	.word	0x08013a55
 80139ec:	08013a55 	.word	0x08013a55
 80139f0:	08013a55 	.word	0x08013a55
 80139f4:	08013a55 	.word	0x08013a55
 80139f8:	08013a55 	.word	0x08013a55
 80139fc:	08013a55 	.word	0x08013a55
 8013a00:	08013a45 	.word	0x08013a45
 8013a04:	08013a55 	.word	0x08013a55
 8013a08:	08013a55 	.word	0x08013a55
 8013a0c:	08013a55 	.word	0x08013a55
 8013a10:	08013a55 	.word	0x08013a55
 8013a14:	08013a55 	.word	0x08013a55
 8013a18:	08013a55 	.word	0x08013a55
 8013a1c:	08013a55 	.word	0x08013a55
 8013a20:	08013a4d 	.word	0x08013a4d
 8013a24:	2301      	movs	r3, #1
 8013a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a2a:	e326      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a2c:	2304      	movs	r3, #4
 8013a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a32:	e322      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a34:	2308      	movs	r3, #8
 8013a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a3a:	e31e      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a3c:	2310      	movs	r3, #16
 8013a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a42:	e31a      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a44:	2320      	movs	r3, #32
 8013a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a4a:	e316      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a4c:	2340      	movs	r3, #64	@ 0x40
 8013a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a52:	e312      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a54:	2380      	movs	r3, #128	@ 0x80
 8013a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a5a:	e30e      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	4a69      	ldr	r2, [pc, #420]	@ (8013c08 <UART_SetConfig+0x33c>)
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d130      	bne.n	8013ac8 <UART_SetConfig+0x1fc>
 8013a66:	4b67      	ldr	r3, [pc, #412]	@ (8013c04 <UART_SetConfig+0x338>)
 8013a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a6a:	f003 0307 	and.w	r3, r3, #7
 8013a6e:	2b05      	cmp	r3, #5
 8013a70:	d826      	bhi.n	8013ac0 <UART_SetConfig+0x1f4>
 8013a72:	a201      	add	r2, pc, #4	@ (adr r2, 8013a78 <UART_SetConfig+0x1ac>)
 8013a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a78:	08013a91 	.word	0x08013a91
 8013a7c:	08013a99 	.word	0x08013a99
 8013a80:	08013aa1 	.word	0x08013aa1
 8013a84:	08013aa9 	.word	0x08013aa9
 8013a88:	08013ab1 	.word	0x08013ab1
 8013a8c:	08013ab9 	.word	0x08013ab9
 8013a90:	2300      	movs	r3, #0
 8013a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a96:	e2f0      	b.n	801407a <UART_SetConfig+0x7ae>
 8013a98:	2304      	movs	r3, #4
 8013a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a9e:	e2ec      	b.n	801407a <UART_SetConfig+0x7ae>
 8013aa0:	2308      	movs	r3, #8
 8013aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aa6:	e2e8      	b.n	801407a <UART_SetConfig+0x7ae>
 8013aa8:	2310      	movs	r3, #16
 8013aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aae:	e2e4      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ab0:	2320      	movs	r3, #32
 8013ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ab6:	e2e0      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ab8:	2340      	movs	r3, #64	@ 0x40
 8013aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013abe:	e2dc      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ac0:	2380      	movs	r3, #128	@ 0x80
 8013ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ac6:	e2d8      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4a4f      	ldr	r2, [pc, #316]	@ (8013c0c <UART_SetConfig+0x340>)
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	d130      	bne.n	8013b34 <UART_SetConfig+0x268>
 8013ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8013c04 <UART_SetConfig+0x338>)
 8013ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ad6:	f003 0307 	and.w	r3, r3, #7
 8013ada:	2b05      	cmp	r3, #5
 8013adc:	d826      	bhi.n	8013b2c <UART_SetConfig+0x260>
 8013ade:	a201      	add	r2, pc, #4	@ (adr r2, 8013ae4 <UART_SetConfig+0x218>)
 8013ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae4:	08013afd 	.word	0x08013afd
 8013ae8:	08013b05 	.word	0x08013b05
 8013aec:	08013b0d 	.word	0x08013b0d
 8013af0:	08013b15 	.word	0x08013b15
 8013af4:	08013b1d 	.word	0x08013b1d
 8013af8:	08013b25 	.word	0x08013b25
 8013afc:	2300      	movs	r3, #0
 8013afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b02:	e2ba      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b04:	2304      	movs	r3, #4
 8013b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b0a:	e2b6      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b0c:	2308      	movs	r3, #8
 8013b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b12:	e2b2      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b14:	2310      	movs	r3, #16
 8013b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b1a:	e2ae      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b1c:	2320      	movs	r3, #32
 8013b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b22:	e2aa      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b24:	2340      	movs	r3, #64	@ 0x40
 8013b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b2a:	e2a6      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b2c:	2380      	movs	r3, #128	@ 0x80
 8013b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b32:	e2a2      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a35      	ldr	r2, [pc, #212]	@ (8013c10 <UART_SetConfig+0x344>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d130      	bne.n	8013ba0 <UART_SetConfig+0x2d4>
 8013b3e:	4b31      	ldr	r3, [pc, #196]	@ (8013c04 <UART_SetConfig+0x338>)
 8013b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b42:	f003 0307 	and.w	r3, r3, #7
 8013b46:	2b05      	cmp	r3, #5
 8013b48:	d826      	bhi.n	8013b98 <UART_SetConfig+0x2cc>
 8013b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8013b50 <UART_SetConfig+0x284>)
 8013b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b50:	08013b69 	.word	0x08013b69
 8013b54:	08013b71 	.word	0x08013b71
 8013b58:	08013b79 	.word	0x08013b79
 8013b5c:	08013b81 	.word	0x08013b81
 8013b60:	08013b89 	.word	0x08013b89
 8013b64:	08013b91 	.word	0x08013b91
 8013b68:	2300      	movs	r3, #0
 8013b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b6e:	e284      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b70:	2304      	movs	r3, #4
 8013b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b76:	e280      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b78:	2308      	movs	r3, #8
 8013b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b7e:	e27c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b80:	2310      	movs	r3, #16
 8013b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b86:	e278      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b88:	2320      	movs	r3, #32
 8013b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b8e:	e274      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b90:	2340      	movs	r3, #64	@ 0x40
 8013b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b96:	e270      	b.n	801407a <UART_SetConfig+0x7ae>
 8013b98:	2380      	movs	r3, #128	@ 0x80
 8013b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b9e:	e26c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8013c14 <UART_SetConfig+0x348>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d142      	bne.n	8013c30 <UART_SetConfig+0x364>
 8013baa:	4b16      	ldr	r3, [pc, #88]	@ (8013c04 <UART_SetConfig+0x338>)
 8013bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bae:	f003 0307 	and.w	r3, r3, #7
 8013bb2:	2b05      	cmp	r3, #5
 8013bb4:	d838      	bhi.n	8013c28 <UART_SetConfig+0x35c>
 8013bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8013bbc <UART_SetConfig+0x2f0>)
 8013bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bbc:	08013bd5 	.word	0x08013bd5
 8013bc0:	08013bdd 	.word	0x08013bdd
 8013bc4:	08013be5 	.word	0x08013be5
 8013bc8:	08013bed 	.word	0x08013bed
 8013bcc:	08013c19 	.word	0x08013c19
 8013bd0:	08013c21 	.word	0x08013c21
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013bda:	e24e      	b.n	801407a <UART_SetConfig+0x7ae>
 8013bdc:	2304      	movs	r3, #4
 8013bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013be2:	e24a      	b.n	801407a <UART_SetConfig+0x7ae>
 8013be4:	2308      	movs	r3, #8
 8013be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013bea:	e246      	b.n	801407a <UART_SetConfig+0x7ae>
 8013bec:	2310      	movs	r3, #16
 8013bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013bf2:	e242      	b.n	801407a <UART_SetConfig+0x7ae>
 8013bf4:	cfff69f3 	.word	0xcfff69f3
 8013bf8:	58000c00 	.word	0x58000c00
 8013bfc:	11fff4ff 	.word	0x11fff4ff
 8013c00:	40011000 	.word	0x40011000
 8013c04:	58024400 	.word	0x58024400
 8013c08:	40004400 	.word	0x40004400
 8013c0c:	40004800 	.word	0x40004800
 8013c10:	40004c00 	.word	0x40004c00
 8013c14:	40005000 	.word	0x40005000
 8013c18:	2320      	movs	r3, #32
 8013c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c1e:	e22c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013c20:	2340      	movs	r3, #64	@ 0x40
 8013c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c26:	e228      	b.n	801407a <UART_SetConfig+0x7ae>
 8013c28:	2380      	movs	r3, #128	@ 0x80
 8013c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c2e:	e224      	b.n	801407a <UART_SetConfig+0x7ae>
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4ab1      	ldr	r2, [pc, #708]	@ (8013efc <UART_SetConfig+0x630>)
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d176      	bne.n	8013d28 <UART_SetConfig+0x45c>
 8013c3a:	4bb1      	ldr	r3, [pc, #708]	@ (8013f00 <UART_SetConfig+0x634>)
 8013c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013c42:	2b28      	cmp	r3, #40	@ 0x28
 8013c44:	d86c      	bhi.n	8013d20 <UART_SetConfig+0x454>
 8013c46:	a201      	add	r2, pc, #4	@ (adr r2, 8013c4c <UART_SetConfig+0x380>)
 8013c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4c:	08013cf1 	.word	0x08013cf1
 8013c50:	08013d21 	.word	0x08013d21
 8013c54:	08013d21 	.word	0x08013d21
 8013c58:	08013d21 	.word	0x08013d21
 8013c5c:	08013d21 	.word	0x08013d21
 8013c60:	08013d21 	.word	0x08013d21
 8013c64:	08013d21 	.word	0x08013d21
 8013c68:	08013d21 	.word	0x08013d21
 8013c6c:	08013cf9 	.word	0x08013cf9
 8013c70:	08013d21 	.word	0x08013d21
 8013c74:	08013d21 	.word	0x08013d21
 8013c78:	08013d21 	.word	0x08013d21
 8013c7c:	08013d21 	.word	0x08013d21
 8013c80:	08013d21 	.word	0x08013d21
 8013c84:	08013d21 	.word	0x08013d21
 8013c88:	08013d21 	.word	0x08013d21
 8013c8c:	08013d01 	.word	0x08013d01
 8013c90:	08013d21 	.word	0x08013d21
 8013c94:	08013d21 	.word	0x08013d21
 8013c98:	08013d21 	.word	0x08013d21
 8013c9c:	08013d21 	.word	0x08013d21
 8013ca0:	08013d21 	.word	0x08013d21
 8013ca4:	08013d21 	.word	0x08013d21
 8013ca8:	08013d21 	.word	0x08013d21
 8013cac:	08013d09 	.word	0x08013d09
 8013cb0:	08013d21 	.word	0x08013d21
 8013cb4:	08013d21 	.word	0x08013d21
 8013cb8:	08013d21 	.word	0x08013d21
 8013cbc:	08013d21 	.word	0x08013d21
 8013cc0:	08013d21 	.word	0x08013d21
 8013cc4:	08013d21 	.word	0x08013d21
 8013cc8:	08013d21 	.word	0x08013d21
 8013ccc:	08013d11 	.word	0x08013d11
 8013cd0:	08013d21 	.word	0x08013d21
 8013cd4:	08013d21 	.word	0x08013d21
 8013cd8:	08013d21 	.word	0x08013d21
 8013cdc:	08013d21 	.word	0x08013d21
 8013ce0:	08013d21 	.word	0x08013d21
 8013ce4:	08013d21 	.word	0x08013d21
 8013ce8:	08013d21 	.word	0x08013d21
 8013cec:	08013d19 	.word	0x08013d19
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cf6:	e1c0      	b.n	801407a <UART_SetConfig+0x7ae>
 8013cf8:	2304      	movs	r3, #4
 8013cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cfe:	e1bc      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d00:	2308      	movs	r3, #8
 8013d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d06:	e1b8      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d08:	2310      	movs	r3, #16
 8013d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d0e:	e1b4      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d10:	2320      	movs	r3, #32
 8013d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d16:	e1b0      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d18:	2340      	movs	r3, #64	@ 0x40
 8013d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d1e:	e1ac      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d20:	2380      	movs	r3, #128	@ 0x80
 8013d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d26:	e1a8      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4a75      	ldr	r2, [pc, #468]	@ (8013f04 <UART_SetConfig+0x638>)
 8013d2e:	4293      	cmp	r3, r2
 8013d30:	d130      	bne.n	8013d94 <UART_SetConfig+0x4c8>
 8013d32:	4b73      	ldr	r3, [pc, #460]	@ (8013f00 <UART_SetConfig+0x634>)
 8013d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d36:	f003 0307 	and.w	r3, r3, #7
 8013d3a:	2b05      	cmp	r3, #5
 8013d3c:	d826      	bhi.n	8013d8c <UART_SetConfig+0x4c0>
 8013d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8013d44 <UART_SetConfig+0x478>)
 8013d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d44:	08013d5d 	.word	0x08013d5d
 8013d48:	08013d65 	.word	0x08013d65
 8013d4c:	08013d6d 	.word	0x08013d6d
 8013d50:	08013d75 	.word	0x08013d75
 8013d54:	08013d7d 	.word	0x08013d7d
 8013d58:	08013d85 	.word	0x08013d85
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d62:	e18a      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d64:	2304      	movs	r3, #4
 8013d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d6a:	e186      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d6c:	2308      	movs	r3, #8
 8013d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d72:	e182      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d74:	2310      	movs	r3, #16
 8013d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d7a:	e17e      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d7c:	2320      	movs	r3, #32
 8013d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d82:	e17a      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d84:	2340      	movs	r3, #64	@ 0x40
 8013d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d8a:	e176      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d8c:	2380      	movs	r3, #128	@ 0x80
 8013d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d92:	e172      	b.n	801407a <UART_SetConfig+0x7ae>
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a5b      	ldr	r2, [pc, #364]	@ (8013f08 <UART_SetConfig+0x63c>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d130      	bne.n	8013e00 <UART_SetConfig+0x534>
 8013d9e:	4b58      	ldr	r3, [pc, #352]	@ (8013f00 <UART_SetConfig+0x634>)
 8013da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013da2:	f003 0307 	and.w	r3, r3, #7
 8013da6:	2b05      	cmp	r3, #5
 8013da8:	d826      	bhi.n	8013df8 <UART_SetConfig+0x52c>
 8013daa:	a201      	add	r2, pc, #4	@ (adr r2, 8013db0 <UART_SetConfig+0x4e4>)
 8013dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db0:	08013dc9 	.word	0x08013dc9
 8013db4:	08013dd1 	.word	0x08013dd1
 8013db8:	08013dd9 	.word	0x08013dd9
 8013dbc:	08013de1 	.word	0x08013de1
 8013dc0:	08013de9 	.word	0x08013de9
 8013dc4:	08013df1 	.word	0x08013df1
 8013dc8:	2300      	movs	r3, #0
 8013dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013dce:	e154      	b.n	801407a <UART_SetConfig+0x7ae>
 8013dd0:	2304      	movs	r3, #4
 8013dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013dd6:	e150      	b.n	801407a <UART_SetConfig+0x7ae>
 8013dd8:	2308      	movs	r3, #8
 8013dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013dde:	e14c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013de0:	2310      	movs	r3, #16
 8013de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013de6:	e148      	b.n	801407a <UART_SetConfig+0x7ae>
 8013de8:	2320      	movs	r3, #32
 8013dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013dee:	e144      	b.n	801407a <UART_SetConfig+0x7ae>
 8013df0:	2340      	movs	r3, #64	@ 0x40
 8013df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013df6:	e140      	b.n	801407a <UART_SetConfig+0x7ae>
 8013df8:	2380      	movs	r3, #128	@ 0x80
 8013dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013dfe:	e13c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4a41      	ldr	r2, [pc, #260]	@ (8013f0c <UART_SetConfig+0x640>)
 8013e06:	4293      	cmp	r3, r2
 8013e08:	f040 8082 	bne.w	8013f10 <UART_SetConfig+0x644>
 8013e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8013f00 <UART_SetConfig+0x634>)
 8013e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013e14:	2b28      	cmp	r3, #40	@ 0x28
 8013e16:	d86d      	bhi.n	8013ef4 <UART_SetConfig+0x628>
 8013e18:	a201      	add	r2, pc, #4	@ (adr r2, 8013e20 <UART_SetConfig+0x554>)
 8013e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e1e:	bf00      	nop
 8013e20:	08013ec5 	.word	0x08013ec5
 8013e24:	08013ef5 	.word	0x08013ef5
 8013e28:	08013ef5 	.word	0x08013ef5
 8013e2c:	08013ef5 	.word	0x08013ef5
 8013e30:	08013ef5 	.word	0x08013ef5
 8013e34:	08013ef5 	.word	0x08013ef5
 8013e38:	08013ef5 	.word	0x08013ef5
 8013e3c:	08013ef5 	.word	0x08013ef5
 8013e40:	08013ecd 	.word	0x08013ecd
 8013e44:	08013ef5 	.word	0x08013ef5
 8013e48:	08013ef5 	.word	0x08013ef5
 8013e4c:	08013ef5 	.word	0x08013ef5
 8013e50:	08013ef5 	.word	0x08013ef5
 8013e54:	08013ef5 	.word	0x08013ef5
 8013e58:	08013ef5 	.word	0x08013ef5
 8013e5c:	08013ef5 	.word	0x08013ef5
 8013e60:	08013ed5 	.word	0x08013ed5
 8013e64:	08013ef5 	.word	0x08013ef5
 8013e68:	08013ef5 	.word	0x08013ef5
 8013e6c:	08013ef5 	.word	0x08013ef5
 8013e70:	08013ef5 	.word	0x08013ef5
 8013e74:	08013ef5 	.word	0x08013ef5
 8013e78:	08013ef5 	.word	0x08013ef5
 8013e7c:	08013ef5 	.word	0x08013ef5
 8013e80:	08013edd 	.word	0x08013edd
 8013e84:	08013ef5 	.word	0x08013ef5
 8013e88:	08013ef5 	.word	0x08013ef5
 8013e8c:	08013ef5 	.word	0x08013ef5
 8013e90:	08013ef5 	.word	0x08013ef5
 8013e94:	08013ef5 	.word	0x08013ef5
 8013e98:	08013ef5 	.word	0x08013ef5
 8013e9c:	08013ef5 	.word	0x08013ef5
 8013ea0:	08013ee5 	.word	0x08013ee5
 8013ea4:	08013ef5 	.word	0x08013ef5
 8013ea8:	08013ef5 	.word	0x08013ef5
 8013eac:	08013ef5 	.word	0x08013ef5
 8013eb0:	08013ef5 	.word	0x08013ef5
 8013eb4:	08013ef5 	.word	0x08013ef5
 8013eb8:	08013ef5 	.word	0x08013ef5
 8013ebc:	08013ef5 	.word	0x08013ef5
 8013ec0:	08013eed 	.word	0x08013eed
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013eca:	e0d6      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ecc:	2304      	movs	r3, #4
 8013ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ed2:	e0d2      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ed4:	2308      	movs	r3, #8
 8013ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013eda:	e0ce      	b.n	801407a <UART_SetConfig+0x7ae>
 8013edc:	2310      	movs	r3, #16
 8013ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ee2:	e0ca      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ee4:	2320      	movs	r3, #32
 8013ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013eea:	e0c6      	b.n	801407a <UART_SetConfig+0x7ae>
 8013eec:	2340      	movs	r3, #64	@ 0x40
 8013eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ef2:	e0c2      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ef4:	2380      	movs	r3, #128	@ 0x80
 8013ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013efa:	e0be      	b.n	801407a <UART_SetConfig+0x7ae>
 8013efc:	40011400 	.word	0x40011400
 8013f00:	58024400 	.word	0x58024400
 8013f04:	40007800 	.word	0x40007800
 8013f08:	40007c00 	.word	0x40007c00
 8013f0c:	40011800 	.word	0x40011800
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	4aad      	ldr	r2, [pc, #692]	@ (80141cc <UART_SetConfig+0x900>)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d176      	bne.n	8014008 <UART_SetConfig+0x73c>
 8013f1a:	4bad      	ldr	r3, [pc, #692]	@ (80141d0 <UART_SetConfig+0x904>)
 8013f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013f22:	2b28      	cmp	r3, #40	@ 0x28
 8013f24:	d86c      	bhi.n	8014000 <UART_SetConfig+0x734>
 8013f26:	a201      	add	r2, pc, #4	@ (adr r2, 8013f2c <UART_SetConfig+0x660>)
 8013f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f2c:	08013fd1 	.word	0x08013fd1
 8013f30:	08014001 	.word	0x08014001
 8013f34:	08014001 	.word	0x08014001
 8013f38:	08014001 	.word	0x08014001
 8013f3c:	08014001 	.word	0x08014001
 8013f40:	08014001 	.word	0x08014001
 8013f44:	08014001 	.word	0x08014001
 8013f48:	08014001 	.word	0x08014001
 8013f4c:	08013fd9 	.word	0x08013fd9
 8013f50:	08014001 	.word	0x08014001
 8013f54:	08014001 	.word	0x08014001
 8013f58:	08014001 	.word	0x08014001
 8013f5c:	08014001 	.word	0x08014001
 8013f60:	08014001 	.word	0x08014001
 8013f64:	08014001 	.word	0x08014001
 8013f68:	08014001 	.word	0x08014001
 8013f6c:	08013fe1 	.word	0x08013fe1
 8013f70:	08014001 	.word	0x08014001
 8013f74:	08014001 	.word	0x08014001
 8013f78:	08014001 	.word	0x08014001
 8013f7c:	08014001 	.word	0x08014001
 8013f80:	08014001 	.word	0x08014001
 8013f84:	08014001 	.word	0x08014001
 8013f88:	08014001 	.word	0x08014001
 8013f8c:	08013fe9 	.word	0x08013fe9
 8013f90:	08014001 	.word	0x08014001
 8013f94:	08014001 	.word	0x08014001
 8013f98:	08014001 	.word	0x08014001
 8013f9c:	08014001 	.word	0x08014001
 8013fa0:	08014001 	.word	0x08014001
 8013fa4:	08014001 	.word	0x08014001
 8013fa8:	08014001 	.word	0x08014001
 8013fac:	08013ff1 	.word	0x08013ff1
 8013fb0:	08014001 	.word	0x08014001
 8013fb4:	08014001 	.word	0x08014001
 8013fb8:	08014001 	.word	0x08014001
 8013fbc:	08014001 	.word	0x08014001
 8013fc0:	08014001 	.word	0x08014001
 8013fc4:	08014001 	.word	0x08014001
 8013fc8:	08014001 	.word	0x08014001
 8013fcc:	08013ff9 	.word	0x08013ff9
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fd6:	e050      	b.n	801407a <UART_SetConfig+0x7ae>
 8013fd8:	2304      	movs	r3, #4
 8013fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fde:	e04c      	b.n	801407a <UART_SetConfig+0x7ae>
 8013fe0:	2308      	movs	r3, #8
 8013fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fe6:	e048      	b.n	801407a <UART_SetConfig+0x7ae>
 8013fe8:	2310      	movs	r3, #16
 8013fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fee:	e044      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ff0:	2320      	movs	r3, #32
 8013ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ff6:	e040      	b.n	801407a <UART_SetConfig+0x7ae>
 8013ff8:	2340      	movs	r3, #64	@ 0x40
 8013ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ffe:	e03c      	b.n	801407a <UART_SetConfig+0x7ae>
 8014000:	2380      	movs	r3, #128	@ 0x80
 8014002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014006:	e038      	b.n	801407a <UART_SetConfig+0x7ae>
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4a71      	ldr	r2, [pc, #452]	@ (80141d4 <UART_SetConfig+0x908>)
 801400e:	4293      	cmp	r3, r2
 8014010:	d130      	bne.n	8014074 <UART_SetConfig+0x7a8>
 8014012:	4b6f      	ldr	r3, [pc, #444]	@ (80141d0 <UART_SetConfig+0x904>)
 8014014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014016:	f003 0307 	and.w	r3, r3, #7
 801401a:	2b05      	cmp	r3, #5
 801401c:	d826      	bhi.n	801406c <UART_SetConfig+0x7a0>
 801401e:	a201      	add	r2, pc, #4	@ (adr r2, 8014024 <UART_SetConfig+0x758>)
 8014020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014024:	0801403d 	.word	0x0801403d
 8014028:	08014045 	.word	0x08014045
 801402c:	0801404d 	.word	0x0801404d
 8014030:	08014055 	.word	0x08014055
 8014034:	0801405d 	.word	0x0801405d
 8014038:	08014065 	.word	0x08014065
 801403c:	2302      	movs	r3, #2
 801403e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014042:	e01a      	b.n	801407a <UART_SetConfig+0x7ae>
 8014044:	2304      	movs	r3, #4
 8014046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801404a:	e016      	b.n	801407a <UART_SetConfig+0x7ae>
 801404c:	2308      	movs	r3, #8
 801404e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014052:	e012      	b.n	801407a <UART_SetConfig+0x7ae>
 8014054:	2310      	movs	r3, #16
 8014056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801405a:	e00e      	b.n	801407a <UART_SetConfig+0x7ae>
 801405c:	2320      	movs	r3, #32
 801405e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014062:	e00a      	b.n	801407a <UART_SetConfig+0x7ae>
 8014064:	2340      	movs	r3, #64	@ 0x40
 8014066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801406a:	e006      	b.n	801407a <UART_SetConfig+0x7ae>
 801406c:	2380      	movs	r3, #128	@ 0x80
 801406e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014072:	e002      	b.n	801407a <UART_SetConfig+0x7ae>
 8014074:	2380      	movs	r3, #128	@ 0x80
 8014076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4a55      	ldr	r2, [pc, #340]	@ (80141d4 <UART_SetConfig+0x908>)
 8014080:	4293      	cmp	r3, r2
 8014082:	f040 80f8 	bne.w	8014276 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014086:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801408a:	2b20      	cmp	r3, #32
 801408c:	dc46      	bgt.n	801411c <UART_SetConfig+0x850>
 801408e:	2b02      	cmp	r3, #2
 8014090:	db75      	blt.n	801417e <UART_SetConfig+0x8b2>
 8014092:	3b02      	subs	r3, #2
 8014094:	2b1e      	cmp	r3, #30
 8014096:	d872      	bhi.n	801417e <UART_SetConfig+0x8b2>
 8014098:	a201      	add	r2, pc, #4	@ (adr r2, 80140a0 <UART_SetConfig+0x7d4>)
 801409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801409e:	bf00      	nop
 80140a0:	08014123 	.word	0x08014123
 80140a4:	0801417f 	.word	0x0801417f
 80140a8:	0801412b 	.word	0x0801412b
 80140ac:	0801417f 	.word	0x0801417f
 80140b0:	0801417f 	.word	0x0801417f
 80140b4:	0801417f 	.word	0x0801417f
 80140b8:	0801413b 	.word	0x0801413b
 80140bc:	0801417f 	.word	0x0801417f
 80140c0:	0801417f 	.word	0x0801417f
 80140c4:	0801417f 	.word	0x0801417f
 80140c8:	0801417f 	.word	0x0801417f
 80140cc:	0801417f 	.word	0x0801417f
 80140d0:	0801417f 	.word	0x0801417f
 80140d4:	0801417f 	.word	0x0801417f
 80140d8:	0801414b 	.word	0x0801414b
 80140dc:	0801417f 	.word	0x0801417f
 80140e0:	0801417f 	.word	0x0801417f
 80140e4:	0801417f 	.word	0x0801417f
 80140e8:	0801417f 	.word	0x0801417f
 80140ec:	0801417f 	.word	0x0801417f
 80140f0:	0801417f 	.word	0x0801417f
 80140f4:	0801417f 	.word	0x0801417f
 80140f8:	0801417f 	.word	0x0801417f
 80140fc:	0801417f 	.word	0x0801417f
 8014100:	0801417f 	.word	0x0801417f
 8014104:	0801417f 	.word	0x0801417f
 8014108:	0801417f 	.word	0x0801417f
 801410c:	0801417f 	.word	0x0801417f
 8014110:	0801417f 	.word	0x0801417f
 8014114:	0801417f 	.word	0x0801417f
 8014118:	08014171 	.word	0x08014171
 801411c:	2b40      	cmp	r3, #64	@ 0x40
 801411e:	d02a      	beq.n	8014176 <UART_SetConfig+0x8aa>
 8014120:	e02d      	b.n	801417e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014122:	f7fc f80f 	bl	8010144 <HAL_RCCEx_GetD3PCLK1Freq>
 8014126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014128:	e02f      	b.n	801418a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801412a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801412e:	4618      	mov	r0, r3
 8014130:	f7fc f81e 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014138:	e027      	b.n	801418a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801413a:	f107 0318 	add.w	r3, r7, #24
 801413e:	4618      	mov	r0, r3
 8014140:	f7fc f96a 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014148:	e01f      	b.n	801418a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801414a:	4b21      	ldr	r3, [pc, #132]	@ (80141d0 <UART_SetConfig+0x904>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f003 0320 	and.w	r3, r3, #32
 8014152:	2b00      	cmp	r3, #0
 8014154:	d009      	beq.n	801416a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014156:	4b1e      	ldr	r3, [pc, #120]	@ (80141d0 <UART_SetConfig+0x904>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	08db      	lsrs	r3, r3, #3
 801415c:	f003 0303 	and.w	r3, r3, #3
 8014160:	4a1d      	ldr	r2, [pc, #116]	@ (80141d8 <UART_SetConfig+0x90c>)
 8014162:	fa22 f303 	lsr.w	r3, r2, r3
 8014166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014168:	e00f      	b.n	801418a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801416a:	4b1b      	ldr	r3, [pc, #108]	@ (80141d8 <UART_SetConfig+0x90c>)
 801416c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801416e:	e00c      	b.n	801418a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014170:	4b1a      	ldr	r3, [pc, #104]	@ (80141dc <UART_SetConfig+0x910>)
 8014172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014174:	e009      	b.n	801418a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801417c:	e005      	b.n	801418a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801417e:	2300      	movs	r3, #0
 8014180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801418c:	2b00      	cmp	r3, #0
 801418e:	f000 81ee 	beq.w	801456e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014196:	4a12      	ldr	r2, [pc, #72]	@ (80141e0 <UART_SetConfig+0x914>)
 8014198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801419c:	461a      	mov	r2, r3
 801419e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141a4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	685a      	ldr	r2, [r3, #4]
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d305      	bcc.n	80141c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80141bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141be:	429a      	cmp	r2, r3
 80141c0:	d910      	bls.n	80141e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80141c2:	2301      	movs	r3, #1
 80141c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80141c8:	e1d1      	b.n	801456e <UART_SetConfig+0xca2>
 80141ca:	bf00      	nop
 80141cc:	40011c00 	.word	0x40011c00
 80141d0:	58024400 	.word	0x58024400
 80141d4:	58000c00 	.word	0x58000c00
 80141d8:	03d09000 	.word	0x03d09000
 80141dc:	003d0900 	.word	0x003d0900
 80141e0:	0801e6ec 	.word	0x0801e6ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141e6:	2200      	movs	r2, #0
 80141e8:	60bb      	str	r3, [r7, #8]
 80141ea:	60fa      	str	r2, [r7, #12]
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141f0:	4ac0      	ldr	r2, [pc, #768]	@ (80144f4 <UART_SetConfig+0xc28>)
 80141f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	2200      	movs	r2, #0
 80141fa:	603b      	str	r3, [r7, #0]
 80141fc:	607a      	str	r2, [r7, #4]
 80141fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014206:	f7ec faa7 	bl	8000758 <__aeabi_uldivmod>
 801420a:	4602      	mov	r2, r0
 801420c:	460b      	mov	r3, r1
 801420e:	4610      	mov	r0, r2
 8014210:	4619      	mov	r1, r3
 8014212:	f04f 0200 	mov.w	r2, #0
 8014216:	f04f 0300 	mov.w	r3, #0
 801421a:	020b      	lsls	r3, r1, #8
 801421c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014220:	0202      	lsls	r2, r0, #8
 8014222:	6979      	ldr	r1, [r7, #20]
 8014224:	6849      	ldr	r1, [r1, #4]
 8014226:	0849      	lsrs	r1, r1, #1
 8014228:	2000      	movs	r0, #0
 801422a:	460c      	mov	r4, r1
 801422c:	4605      	mov	r5, r0
 801422e:	eb12 0804 	adds.w	r8, r2, r4
 8014232:	eb43 0905 	adc.w	r9, r3, r5
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	2200      	movs	r2, #0
 801423c:	469a      	mov	sl, r3
 801423e:	4693      	mov	fp, r2
 8014240:	4652      	mov	r2, sl
 8014242:	465b      	mov	r3, fp
 8014244:	4640      	mov	r0, r8
 8014246:	4649      	mov	r1, r9
 8014248:	f7ec fa86 	bl	8000758 <__aeabi_uldivmod>
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	4613      	mov	r3, r2
 8014252:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801425a:	d308      	bcc.n	801426e <UART_SetConfig+0x9a2>
 801425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801425e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014262:	d204      	bcs.n	801426e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801426a:	60da      	str	r2, [r3, #12]
 801426c:	e17f      	b.n	801456e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801426e:	2301      	movs	r3, #1
 8014270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014274:	e17b      	b.n	801456e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	69db      	ldr	r3, [r3, #28]
 801427a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801427e:	f040 80bd 	bne.w	80143fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8014282:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014286:	2b20      	cmp	r3, #32
 8014288:	dc48      	bgt.n	801431c <UART_SetConfig+0xa50>
 801428a:	2b00      	cmp	r3, #0
 801428c:	db7b      	blt.n	8014386 <UART_SetConfig+0xaba>
 801428e:	2b20      	cmp	r3, #32
 8014290:	d879      	bhi.n	8014386 <UART_SetConfig+0xaba>
 8014292:	a201      	add	r2, pc, #4	@ (adr r2, 8014298 <UART_SetConfig+0x9cc>)
 8014294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014298:	08014323 	.word	0x08014323
 801429c:	0801432b 	.word	0x0801432b
 80142a0:	08014387 	.word	0x08014387
 80142a4:	08014387 	.word	0x08014387
 80142a8:	08014333 	.word	0x08014333
 80142ac:	08014387 	.word	0x08014387
 80142b0:	08014387 	.word	0x08014387
 80142b4:	08014387 	.word	0x08014387
 80142b8:	08014343 	.word	0x08014343
 80142bc:	08014387 	.word	0x08014387
 80142c0:	08014387 	.word	0x08014387
 80142c4:	08014387 	.word	0x08014387
 80142c8:	08014387 	.word	0x08014387
 80142cc:	08014387 	.word	0x08014387
 80142d0:	08014387 	.word	0x08014387
 80142d4:	08014387 	.word	0x08014387
 80142d8:	08014353 	.word	0x08014353
 80142dc:	08014387 	.word	0x08014387
 80142e0:	08014387 	.word	0x08014387
 80142e4:	08014387 	.word	0x08014387
 80142e8:	08014387 	.word	0x08014387
 80142ec:	08014387 	.word	0x08014387
 80142f0:	08014387 	.word	0x08014387
 80142f4:	08014387 	.word	0x08014387
 80142f8:	08014387 	.word	0x08014387
 80142fc:	08014387 	.word	0x08014387
 8014300:	08014387 	.word	0x08014387
 8014304:	08014387 	.word	0x08014387
 8014308:	08014387 	.word	0x08014387
 801430c:	08014387 	.word	0x08014387
 8014310:	08014387 	.word	0x08014387
 8014314:	08014387 	.word	0x08014387
 8014318:	08014379 	.word	0x08014379
 801431c:	2b40      	cmp	r3, #64	@ 0x40
 801431e:	d02e      	beq.n	801437e <UART_SetConfig+0xab2>
 8014320:	e031      	b.n	8014386 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014322:	f7fa f871 	bl	800e408 <HAL_RCC_GetPCLK1Freq>
 8014326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014328:	e033      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801432a:	f7fa f883 	bl	800e434 <HAL_RCC_GetPCLK2Freq>
 801432e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014330:	e02f      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014336:	4618      	mov	r0, r3
 8014338:	f7fb ff1a 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801433e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014340:	e027      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014342:	f107 0318 	add.w	r3, r7, #24
 8014346:	4618      	mov	r0, r3
 8014348:	f7fc f866 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014350:	e01f      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014352:	4b69      	ldr	r3, [pc, #420]	@ (80144f8 <UART_SetConfig+0xc2c>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f003 0320 	and.w	r3, r3, #32
 801435a:	2b00      	cmp	r3, #0
 801435c:	d009      	beq.n	8014372 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801435e:	4b66      	ldr	r3, [pc, #408]	@ (80144f8 <UART_SetConfig+0xc2c>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	08db      	lsrs	r3, r3, #3
 8014364:	f003 0303 	and.w	r3, r3, #3
 8014368:	4a64      	ldr	r2, [pc, #400]	@ (80144fc <UART_SetConfig+0xc30>)
 801436a:	fa22 f303 	lsr.w	r3, r2, r3
 801436e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014370:	e00f      	b.n	8014392 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8014372:	4b62      	ldr	r3, [pc, #392]	@ (80144fc <UART_SetConfig+0xc30>)
 8014374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014376:	e00c      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014378:	4b61      	ldr	r3, [pc, #388]	@ (8014500 <UART_SetConfig+0xc34>)
 801437a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801437c:	e009      	b.n	8014392 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801437e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014384:	e005      	b.n	8014392 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8014386:	2300      	movs	r3, #0
 8014388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801438a:	2301      	movs	r3, #1
 801438c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014394:	2b00      	cmp	r3, #0
 8014396:	f000 80ea 	beq.w	801456e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801439e:	4a55      	ldr	r2, [pc, #340]	@ (80144f4 <UART_SetConfig+0xc28>)
 80143a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143a4:	461a      	mov	r2, r3
 80143a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80143ac:	005a      	lsls	r2, r3, #1
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	085b      	lsrs	r3, r3, #1
 80143b4:	441a      	add	r2, r3
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80143be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80143c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143c2:	2b0f      	cmp	r3, #15
 80143c4:	d916      	bls.n	80143f4 <UART_SetConfig+0xb28>
 80143c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143cc:	d212      	bcs.n	80143f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80143ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	f023 030f 	bic.w	r3, r3, #15
 80143d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80143d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143da:	085b      	lsrs	r3, r3, #1
 80143dc:	b29b      	uxth	r3, r3
 80143de:	f003 0307 	and.w	r3, r3, #7
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80143e6:	4313      	orrs	r3, r2
 80143e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80143f0:	60da      	str	r2, [r3, #12]
 80143f2:	e0bc      	b.n	801456e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80143f4:	2301      	movs	r3, #1
 80143f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80143fa:	e0b8      	b.n	801456e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80143fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014400:	2b20      	cmp	r3, #32
 8014402:	dc4b      	bgt.n	801449c <UART_SetConfig+0xbd0>
 8014404:	2b00      	cmp	r3, #0
 8014406:	f2c0 8087 	blt.w	8014518 <UART_SetConfig+0xc4c>
 801440a:	2b20      	cmp	r3, #32
 801440c:	f200 8084 	bhi.w	8014518 <UART_SetConfig+0xc4c>
 8014410:	a201      	add	r2, pc, #4	@ (adr r2, 8014418 <UART_SetConfig+0xb4c>)
 8014412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014416:	bf00      	nop
 8014418:	080144a3 	.word	0x080144a3
 801441c:	080144ab 	.word	0x080144ab
 8014420:	08014519 	.word	0x08014519
 8014424:	08014519 	.word	0x08014519
 8014428:	080144b3 	.word	0x080144b3
 801442c:	08014519 	.word	0x08014519
 8014430:	08014519 	.word	0x08014519
 8014434:	08014519 	.word	0x08014519
 8014438:	080144c3 	.word	0x080144c3
 801443c:	08014519 	.word	0x08014519
 8014440:	08014519 	.word	0x08014519
 8014444:	08014519 	.word	0x08014519
 8014448:	08014519 	.word	0x08014519
 801444c:	08014519 	.word	0x08014519
 8014450:	08014519 	.word	0x08014519
 8014454:	08014519 	.word	0x08014519
 8014458:	080144d3 	.word	0x080144d3
 801445c:	08014519 	.word	0x08014519
 8014460:	08014519 	.word	0x08014519
 8014464:	08014519 	.word	0x08014519
 8014468:	08014519 	.word	0x08014519
 801446c:	08014519 	.word	0x08014519
 8014470:	08014519 	.word	0x08014519
 8014474:	08014519 	.word	0x08014519
 8014478:	08014519 	.word	0x08014519
 801447c:	08014519 	.word	0x08014519
 8014480:	08014519 	.word	0x08014519
 8014484:	08014519 	.word	0x08014519
 8014488:	08014519 	.word	0x08014519
 801448c:	08014519 	.word	0x08014519
 8014490:	08014519 	.word	0x08014519
 8014494:	08014519 	.word	0x08014519
 8014498:	0801450b 	.word	0x0801450b
 801449c:	2b40      	cmp	r3, #64	@ 0x40
 801449e:	d037      	beq.n	8014510 <UART_SetConfig+0xc44>
 80144a0:	e03a      	b.n	8014518 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80144a2:	f7f9 ffb1 	bl	800e408 <HAL_RCC_GetPCLK1Freq>
 80144a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80144a8:	e03c      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80144aa:	f7f9 ffc3 	bl	800e434 <HAL_RCC_GetPCLK2Freq>
 80144ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80144b0:	e038      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80144b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7fb fe5a 	bl	8010170 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80144bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80144c0:	e030      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80144c2:	f107 0318 	add.w	r3, r7, #24
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fb ffa6 	bl	8010418 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80144d0:	e028      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80144d2:	4b09      	ldr	r3, [pc, #36]	@ (80144f8 <UART_SetConfig+0xc2c>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	f003 0320 	and.w	r3, r3, #32
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d012      	beq.n	8014504 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80144de:	4b06      	ldr	r3, [pc, #24]	@ (80144f8 <UART_SetConfig+0xc2c>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	08db      	lsrs	r3, r3, #3
 80144e4:	f003 0303 	and.w	r3, r3, #3
 80144e8:	4a04      	ldr	r2, [pc, #16]	@ (80144fc <UART_SetConfig+0xc30>)
 80144ea:	fa22 f303 	lsr.w	r3, r2, r3
 80144ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80144f0:	e018      	b.n	8014524 <UART_SetConfig+0xc58>
 80144f2:	bf00      	nop
 80144f4:	0801e6ec 	.word	0x0801e6ec
 80144f8:	58024400 	.word	0x58024400
 80144fc:	03d09000 	.word	0x03d09000
 8014500:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014504:	4b24      	ldr	r3, [pc, #144]	@ (8014598 <UART_SetConfig+0xccc>)
 8014506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014508:	e00c      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801450a:	4b24      	ldr	r3, [pc, #144]	@ (801459c <UART_SetConfig+0xcd0>)
 801450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801450e:	e009      	b.n	8014524 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014516:	e005      	b.n	8014524 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014518:	2300      	movs	r3, #0
 801451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801451c:	2301      	movs	r3, #1
 801451e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014522:	bf00      	nop
    }

    if (pclk != 0U)
 8014524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014526:	2b00      	cmp	r3, #0
 8014528:	d021      	beq.n	801456e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801452e:	4a1c      	ldr	r2, [pc, #112]	@ (80145a0 <UART_SetConfig+0xcd4>)
 8014530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014534:	461a      	mov	r2, r3
 8014536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014538:	fbb3 f2f2 	udiv	r2, r3, r2
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	085b      	lsrs	r3, r3, #1
 8014542:	441a      	add	r2, r3
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	fbb2 f3f3 	udiv	r3, r2, r3
 801454c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014550:	2b0f      	cmp	r3, #15
 8014552:	d909      	bls.n	8014568 <UART_SetConfig+0xc9c>
 8014554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801455a:	d205      	bcs.n	8014568 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801455e:	b29a      	uxth	r2, r3
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	60da      	str	r2, [r3, #12]
 8014566:	e002      	b.n	801456e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014568:	2301      	movs	r3, #1
 801456a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2201      	movs	r2, #1
 8014572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	2201      	movs	r2, #1
 801457a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2200      	movs	r2, #0
 8014582:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	2200      	movs	r2, #0
 8014588:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801458a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801458e:	4618      	mov	r0, r3
 8014590:	3748      	adds	r7, #72	@ 0x48
 8014592:	46bd      	mov	sp, r7
 8014594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014598:	03d09000 	.word	0x03d09000
 801459c:	003d0900 	.word	0x003d0900
 80145a0:	0801e6ec 	.word	0x0801e6ec

080145a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145b0:	f003 0308 	and.w	r3, r3, #8
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00a      	beq.n	80145ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	430a      	orrs	r2, r1
 80145cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145d2:	f003 0301 	and.w	r3, r3, #1
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00a      	beq.n	80145f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	430a      	orrs	r2, r1
 80145ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145f4:	f003 0302 	and.w	r3, r3, #2
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00a      	beq.n	8014612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	430a      	orrs	r2, r1
 8014610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014616:	f003 0304 	and.w	r3, r3, #4
 801461a:	2b00      	cmp	r3, #0
 801461c:	d00a      	beq.n	8014634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	430a      	orrs	r2, r1
 8014632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014638:	f003 0310 	and.w	r3, r3, #16
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00a      	beq.n	8014656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	689b      	ldr	r3, [r3, #8]
 8014646:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	430a      	orrs	r2, r1
 8014654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801465a:	f003 0320 	and.w	r3, r3, #32
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00a      	beq.n	8014678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	430a      	orrs	r2, r1
 8014676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014680:	2b00      	cmp	r3, #0
 8014682:	d01a      	beq.n	80146ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	430a      	orrs	r2, r1
 8014698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801469e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80146a2:	d10a      	bne.n	80146ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	430a      	orrs	r2, r1
 80146b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00a      	beq.n	80146dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	430a      	orrs	r2, r1
 80146da:	605a      	str	r2, [r3, #4]
  }
}
 80146dc:	bf00      	nop
 80146de:	370c      	adds	r7, #12
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr

080146e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b098      	sub	sp, #96	@ 0x60
 80146ec:	af02      	add	r7, sp, #8
 80146ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2200      	movs	r2, #0
 80146f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80146f8:	f7f3 f884 	bl	8007804 <HAL_GetTick>
 80146fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	f003 0308 	and.w	r3, r3, #8
 8014708:	2b08      	cmp	r3, #8
 801470a:	d12f      	bne.n	801476c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801470c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014710:	9300      	str	r3, [sp, #0]
 8014712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014714:	2200      	movs	r2, #0
 8014716:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 f88e 	bl	801483c <UART_WaitOnFlagUntilTimeout>
 8014720:	4603      	mov	r3, r0
 8014722:	2b00      	cmp	r3, #0
 8014724:	d022      	beq.n	801476c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801472e:	e853 3f00 	ldrex	r3, [r3]
 8014732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801473a:	653b      	str	r3, [r7, #80]	@ 0x50
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014744:	647b      	str	r3, [r7, #68]	@ 0x44
 8014746:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801474a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801474c:	e841 2300 	strex	r3, r2, [r1]
 8014750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014754:	2b00      	cmp	r3, #0
 8014756:	d1e6      	bne.n	8014726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2220      	movs	r2, #32
 801475c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014768:	2303      	movs	r3, #3
 801476a:	e063      	b.n	8014834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f003 0304 	and.w	r3, r3, #4
 8014776:	2b04      	cmp	r3, #4
 8014778:	d149      	bne.n	801480e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801477a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014782:	2200      	movs	r2, #0
 8014784:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f000 f857 	bl	801483c <UART_WaitOnFlagUntilTimeout>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d03c      	beq.n	801480e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801479c:	e853 3f00 	ldrex	r3, [r3]
 80147a0:	623b      	str	r3, [r7, #32]
   return(result);
 80147a2:	6a3b      	ldr	r3, [r7, #32]
 80147a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80147a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	461a      	mov	r2, r3
 80147b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80147b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80147b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147ba:	e841 2300 	strex	r3, r2, [r1]
 80147be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80147c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d1e6      	bne.n	8014794 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	3308      	adds	r3, #8
 80147cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	e853 3f00 	ldrex	r3, [r3]
 80147d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f023 0301 	bic.w	r3, r3, #1
 80147dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	3308      	adds	r3, #8
 80147e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80147e6:	61fa      	str	r2, [r7, #28]
 80147e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ea:	69b9      	ldr	r1, [r7, #24]
 80147ec:	69fa      	ldr	r2, [r7, #28]
 80147ee:	e841 2300 	strex	r3, r2, [r1]
 80147f2:	617b      	str	r3, [r7, #20]
   return(result);
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1e5      	bne.n	80147c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2220      	movs	r2, #32
 80147fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2200      	movs	r2, #0
 8014806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801480a:	2303      	movs	r3, #3
 801480c:	e012      	b.n	8014834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2220      	movs	r2, #32
 8014812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2220      	movs	r2, #32
 801481a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2200      	movs	r2, #0
 8014822:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2200      	movs	r2, #0
 8014828:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	2200      	movs	r2, #0
 801482e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014832:	2300      	movs	r3, #0
}
 8014834:	4618      	mov	r0, r3
 8014836:	3758      	adds	r7, #88	@ 0x58
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	60b9      	str	r1, [r7, #8]
 8014846:	603b      	str	r3, [r7, #0]
 8014848:	4613      	mov	r3, r2
 801484a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801484c:	e04f      	b.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014854:	d04b      	beq.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014856:	f7f2 ffd5 	bl	8007804 <HAL_GetTick>
 801485a:	4602      	mov	r2, r0
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	69ba      	ldr	r2, [r7, #24]
 8014862:	429a      	cmp	r2, r3
 8014864:	d302      	bcc.n	801486c <UART_WaitOnFlagUntilTimeout+0x30>
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d101      	bne.n	8014870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801486c:	2303      	movs	r3, #3
 801486e:	e04e      	b.n	801490e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f003 0304 	and.w	r3, r3, #4
 801487a:	2b00      	cmp	r3, #0
 801487c:	d037      	beq.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	2b80      	cmp	r3, #128	@ 0x80
 8014882:	d034      	beq.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b40      	cmp	r3, #64	@ 0x40
 8014888:	d031      	beq.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	69db      	ldr	r3, [r3, #28]
 8014890:	f003 0308 	and.w	r3, r3, #8
 8014894:	2b08      	cmp	r3, #8
 8014896:	d110      	bne.n	80148ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2208      	movs	r2, #8
 801489e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f000 f839 	bl	8014918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2208      	movs	r2, #8
 80148aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	2200      	movs	r2, #0
 80148b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	e029      	b.n	801490e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	69db      	ldr	r3, [r3, #28]
 80148c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80148c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80148c8:	d111      	bne.n	80148ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80148d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80148d4:	68f8      	ldr	r0, [r7, #12]
 80148d6:	f000 f81f 	bl	8014918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2220      	movs	r2, #32
 80148de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2200      	movs	r2, #0
 80148e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80148ea:	2303      	movs	r3, #3
 80148ec:	e00f      	b.n	801490e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	69da      	ldr	r2, [r3, #28]
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	4013      	ands	r3, r2
 80148f8:	68ba      	ldr	r2, [r7, #8]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	bf0c      	ite	eq
 80148fe:	2301      	moveq	r3, #1
 8014900:	2300      	movne	r3, #0
 8014902:	b2db      	uxtb	r3, r3
 8014904:	461a      	mov	r2, r3
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	429a      	cmp	r2, r3
 801490a:	d0a0      	beq.n	801484e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801490c:	2300      	movs	r3, #0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
	...

08014918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014918:	b480      	push	{r7}
 801491a:	b095      	sub	sp, #84	@ 0x54
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014928:	e853 3f00 	ldrex	r3, [r3]
 801492c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801493e:	643b      	str	r3, [r7, #64]	@ 0x40
 8014940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014946:	e841 2300 	strex	r3, r2, [r1]
 801494a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801494c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801494e:	2b00      	cmp	r3, #0
 8014950:	d1e6      	bne.n	8014920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	3308      	adds	r3, #8
 8014958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801495a:	6a3b      	ldr	r3, [r7, #32]
 801495c:	e853 3f00 	ldrex	r3, [r3]
 8014960:	61fb      	str	r3, [r7, #28]
   return(result);
 8014962:	69fa      	ldr	r2, [r7, #28]
 8014964:	4b1e      	ldr	r3, [pc, #120]	@ (80149e0 <UART_EndRxTransfer+0xc8>)
 8014966:	4013      	ands	r3, r2
 8014968:	64bb      	str	r3, [r7, #72]	@ 0x48
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	3308      	adds	r3, #8
 8014970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801497a:	e841 2300 	strex	r3, r2, [r1]
 801497e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014982:	2b00      	cmp	r3, #0
 8014984:	d1e5      	bne.n	8014952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801498a:	2b01      	cmp	r3, #1
 801498c:	d118      	bne.n	80149c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	e853 3f00 	ldrex	r3, [r3]
 801499a:	60bb      	str	r3, [r7, #8]
   return(result);
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	f023 0310 	bic.w	r3, r3, #16
 80149a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	461a      	mov	r2, r3
 80149aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149ac:	61bb      	str	r3, [r7, #24]
 80149ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149b0:	6979      	ldr	r1, [r7, #20]
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	e841 2300 	strex	r3, r2, [r1]
 80149b8:	613b      	str	r3, [r7, #16]
   return(result);
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1e6      	bne.n	801498e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2220      	movs	r2, #32
 80149c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2200      	movs	r2, #0
 80149cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2200      	movs	r2, #0
 80149d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80149d4:	bf00      	nop
 80149d6:	3754      	adds	r7, #84	@ 0x54
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr
 80149e0:	effffffe 	.word	0xeffffffe

080149e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80149e4:	b480      	push	{r7}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d101      	bne.n	80149fa <HAL_UARTEx_DisableFifoMode+0x16>
 80149f6:	2302      	movs	r3, #2
 80149f8:	e027      	b.n	8014a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2201      	movs	r2, #1
 80149fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2224      	movs	r2, #36	@ 0x24
 8014a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	f022 0201 	bic.w	r2, r2, #1
 8014a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	68fa      	ldr	r2, [r7, #12]
 8014a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2220      	movs	r2, #32
 8014a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2200      	movs	r2, #0
 8014a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014a48:	2300      	movs	r3, #0
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3714      	adds	r7, #20
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014a56:	b580      	push	{r7, lr}
 8014a58:	b084      	sub	sp, #16
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d101      	bne.n	8014a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014a6a:	2302      	movs	r3, #2
 8014a6c:	e02d      	b.n	8014aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2201      	movs	r2, #1
 8014a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2224      	movs	r2, #36	@ 0x24
 8014a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f022 0201 	bic.w	r2, r2, #1
 8014a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	430a      	orrs	r2, r1
 8014aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f000 f850 	bl	8014b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2220      	movs	r2, #32
 8014abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014ac8:	2300      	movs	r3, #0
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3710      	adds	r7, #16
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014ad2:	b580      	push	{r7, lr}
 8014ad4:	b084      	sub	sp, #16
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	6078      	str	r0, [r7, #4]
 8014ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d101      	bne.n	8014aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	e02d      	b.n	8014b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2201      	movs	r2, #1
 8014aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2224      	movs	r2, #36	@ 0x24
 8014af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f022 0201 	bic.w	r2, r2, #1
 8014b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	689b      	ldr	r3, [r3, #8]
 8014b18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	683a      	ldr	r2, [r7, #0]
 8014b22:	430a      	orrs	r2, r1
 8014b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f000 f812 	bl	8014b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2220      	movs	r2, #32
 8014b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3710      	adds	r7, #16
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
	...

08014b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b085      	sub	sp, #20
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d108      	bne.n	8014b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014b70:	e031      	b.n	8014bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014b72:	2310      	movs	r3, #16
 8014b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014b76:	2310      	movs	r3, #16
 8014b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	689b      	ldr	r3, [r3, #8]
 8014b80:	0e5b      	lsrs	r3, r3, #25
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f003 0307 	and.w	r3, r3, #7
 8014b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	0f5b      	lsrs	r3, r3, #29
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	f003 0307 	and.w	r3, r3, #7
 8014b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014b9a:	7bbb      	ldrb	r3, [r7, #14]
 8014b9c:	7b3a      	ldrb	r2, [r7, #12]
 8014b9e:	4911      	ldr	r1, [pc, #68]	@ (8014be4 <UARTEx_SetNbDataToProcess+0x94>)
 8014ba0:	5c8a      	ldrb	r2, [r1, r2]
 8014ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014ba6:	7b3a      	ldrb	r2, [r7, #12]
 8014ba8:	490f      	ldr	r1, [pc, #60]	@ (8014be8 <UARTEx_SetNbDataToProcess+0x98>)
 8014baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bb0:	b29a      	uxth	r2, r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bb8:	7bfb      	ldrb	r3, [r7, #15]
 8014bba:	7b7a      	ldrb	r2, [r7, #13]
 8014bbc:	4909      	ldr	r1, [pc, #36]	@ (8014be4 <UARTEx_SetNbDataToProcess+0x94>)
 8014bbe:	5c8a      	ldrb	r2, [r1, r2]
 8014bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014bc4:	7b7a      	ldrb	r2, [r7, #13]
 8014bc6:	4908      	ldr	r1, [pc, #32]	@ (8014be8 <UARTEx_SetNbDataToProcess+0x98>)
 8014bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014bd6:	bf00      	nop
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	0801e704 	.word	0x0801e704
 8014be8:	0801e70c 	.word	0x0801e70c

08014bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014bec:	b084      	sub	sp, #16
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b084      	sub	sp, #16
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
 8014bf6:	f107 001c 	add.w	r0, r7, #28
 8014bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014bfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d121      	bne.n	8014c4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	68da      	ldr	r2, [r3, #12]
 8014c16:	4b2c      	ldr	r3, [pc, #176]	@ (8014cc8 <USB_CoreInit+0xdc>)
 8014c18:	4013      	ands	r3, r2
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d105      	bne.n	8014c3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f001 faf6 	bl	8016230 <USB_CoreReset>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]
 8014c48:	e01b      	b.n	8014c82 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f001 faea 	bl	8016230 <USB_CoreReset>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014c60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d106      	bne.n	8014c76 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8014c74:	e005      	b.n	8014c82 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014c82:	7fbb      	ldrb	r3, [r7, #30]
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d116      	bne.n	8014cb6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c96:	4b0d      	ldr	r3, [pc, #52]	@ (8014ccc <USB_CoreInit+0xe0>)
 8014c98:	4313      	orrs	r3, r2
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	689b      	ldr	r3, [r3, #8]
 8014ca2:	f043 0206 	orr.w	r2, r3, #6
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	f043 0220 	orr.w	r2, r3, #32
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014cc2:	b004      	add	sp, #16
 8014cc4:	4770      	bx	lr
 8014cc6:	bf00      	nop
 8014cc8:	ffbdffbf 	.word	0xffbdffbf
 8014ccc:	03ee0000 	.word	0x03ee0000

08014cd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	b087      	sub	sp, #28
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014cde:	79fb      	ldrb	r3, [r7, #7]
 8014ce0:	2b02      	cmp	r3, #2
 8014ce2:	d165      	bne.n	8014db0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	4a41      	ldr	r2, [pc, #260]	@ (8014dec <USB_SetTurnaroundTime+0x11c>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d906      	bls.n	8014cfa <USB_SetTurnaroundTime+0x2a>
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	4a40      	ldr	r2, [pc, #256]	@ (8014df0 <USB_SetTurnaroundTime+0x120>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d202      	bcs.n	8014cfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014cf4:	230f      	movs	r3, #15
 8014cf6:	617b      	str	r3, [r7, #20]
 8014cf8:	e062      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8014df0 <USB_SetTurnaroundTime+0x120>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d306      	bcc.n	8014d10 <USB_SetTurnaroundTime+0x40>
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	4a3b      	ldr	r2, [pc, #236]	@ (8014df4 <USB_SetTurnaroundTime+0x124>)
 8014d06:	4293      	cmp	r3, r2
 8014d08:	d202      	bcs.n	8014d10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014d0a:	230e      	movs	r3, #14
 8014d0c:	617b      	str	r3, [r7, #20]
 8014d0e:	e057      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	4a38      	ldr	r2, [pc, #224]	@ (8014df4 <USB_SetTurnaroundTime+0x124>)
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d306      	bcc.n	8014d26 <USB_SetTurnaroundTime+0x56>
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	4a37      	ldr	r2, [pc, #220]	@ (8014df8 <USB_SetTurnaroundTime+0x128>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d202      	bcs.n	8014d26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014d20:	230d      	movs	r3, #13
 8014d22:	617b      	str	r3, [r7, #20]
 8014d24:	e04c      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	4a33      	ldr	r2, [pc, #204]	@ (8014df8 <USB_SetTurnaroundTime+0x128>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d306      	bcc.n	8014d3c <USB_SetTurnaroundTime+0x6c>
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	4a32      	ldr	r2, [pc, #200]	@ (8014dfc <USB_SetTurnaroundTime+0x12c>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d802      	bhi.n	8014d3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014d36:	230c      	movs	r3, #12
 8014d38:	617b      	str	r3, [r7, #20]
 8014d3a:	e041      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8014dfc <USB_SetTurnaroundTime+0x12c>)
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d906      	bls.n	8014d52 <USB_SetTurnaroundTime+0x82>
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	4a2e      	ldr	r2, [pc, #184]	@ (8014e00 <USB_SetTurnaroundTime+0x130>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d802      	bhi.n	8014d52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014d4c:	230b      	movs	r3, #11
 8014d4e:	617b      	str	r3, [r7, #20]
 8014d50:	e036      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	4a2a      	ldr	r2, [pc, #168]	@ (8014e00 <USB_SetTurnaroundTime+0x130>)
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d906      	bls.n	8014d68 <USB_SetTurnaroundTime+0x98>
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	4a29      	ldr	r2, [pc, #164]	@ (8014e04 <USB_SetTurnaroundTime+0x134>)
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d802      	bhi.n	8014d68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014d62:	230a      	movs	r3, #10
 8014d64:	617b      	str	r3, [r7, #20]
 8014d66:	e02b      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	4a26      	ldr	r2, [pc, #152]	@ (8014e04 <USB_SetTurnaroundTime+0x134>)
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d906      	bls.n	8014d7e <USB_SetTurnaroundTime+0xae>
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	4a25      	ldr	r2, [pc, #148]	@ (8014e08 <USB_SetTurnaroundTime+0x138>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d202      	bcs.n	8014d7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014d78:	2309      	movs	r3, #9
 8014d7a:	617b      	str	r3, [r7, #20]
 8014d7c:	e020      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	4a21      	ldr	r2, [pc, #132]	@ (8014e08 <USB_SetTurnaroundTime+0x138>)
 8014d82:	4293      	cmp	r3, r2
 8014d84:	d306      	bcc.n	8014d94 <USB_SetTurnaroundTime+0xc4>
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	4a20      	ldr	r2, [pc, #128]	@ (8014e0c <USB_SetTurnaroundTime+0x13c>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d802      	bhi.n	8014d94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014d8e:	2308      	movs	r3, #8
 8014d90:	617b      	str	r3, [r7, #20]
 8014d92:	e015      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	4a1d      	ldr	r2, [pc, #116]	@ (8014e0c <USB_SetTurnaroundTime+0x13c>)
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d906      	bls.n	8014daa <USB_SetTurnaroundTime+0xda>
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8014e10 <USB_SetTurnaroundTime+0x140>)
 8014da0:	4293      	cmp	r3, r2
 8014da2:	d202      	bcs.n	8014daa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014da4:	2307      	movs	r3, #7
 8014da6:	617b      	str	r3, [r7, #20]
 8014da8:	e00a      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014daa:	2306      	movs	r3, #6
 8014dac:	617b      	str	r3, [r7, #20]
 8014dae:	e007      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014db0:	79fb      	ldrb	r3, [r7, #7]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d102      	bne.n	8014dbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014db6:	2309      	movs	r3, #9
 8014db8:	617b      	str	r3, [r7, #20]
 8014dba:	e001      	b.n	8014dc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014dbc:	2309      	movs	r3, #9
 8014dbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	68da      	ldr	r2, [r3, #12]
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	029b      	lsls	r3, r3, #10
 8014dd4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014dd8:	431a      	orrs	r2, r3
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	371c      	adds	r7, #28
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr
 8014dec:	00d8acbf 	.word	0x00d8acbf
 8014df0:	00e4e1c0 	.word	0x00e4e1c0
 8014df4:	00f42400 	.word	0x00f42400
 8014df8:	01067380 	.word	0x01067380
 8014dfc:	011a499f 	.word	0x011a499f
 8014e00:	01312cff 	.word	0x01312cff
 8014e04:	014ca43f 	.word	0x014ca43f
 8014e08:	016e3600 	.word	0x016e3600
 8014e0c:	01a6ab1f 	.word	0x01a6ab1f
 8014e10:	01e84800 	.word	0x01e84800

08014e14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b083      	sub	sp, #12
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	689b      	ldr	r3, [r3, #8]
 8014e20:	f043 0201 	orr.w	r2, r3, #1
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014e28:	2300      	movs	r3, #0
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	370c      	adds	r7, #12
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr

08014e36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e36:	b480      	push	{r7}
 8014e38:	b083      	sub	sp, #12
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	f023 0201 	bic.w	r2, r3, #1
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014e4a:	2300      	movs	r3, #0
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	460b      	mov	r3, r1
 8014e62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014e64:	2300      	movs	r3, #0
 8014e66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014e74:	78fb      	ldrb	r3, [r7, #3]
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d115      	bne.n	8014ea6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	68db      	ldr	r3, [r3, #12]
 8014e7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014e86:	200a      	movs	r0, #10
 8014e88:	f7f2 fcc8 	bl	800781c <HAL_Delay>
      ms += 10U;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	330a      	adds	r3, #10
 8014e90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f001 f93b 	bl	801610e <USB_GetMode>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	d01e      	beq.n	8014edc <USB_SetCurrentMode+0x84>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	2bc7      	cmp	r3, #199	@ 0xc7
 8014ea2:	d9f0      	bls.n	8014e86 <USB_SetCurrentMode+0x2e>
 8014ea4:	e01a      	b.n	8014edc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014ea6:	78fb      	ldrb	r3, [r7, #3]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d115      	bne.n	8014ed8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014eb8:	200a      	movs	r0, #10
 8014eba:	f7f2 fcaf 	bl	800781c <HAL_Delay>
      ms += 10U;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	330a      	adds	r3, #10
 8014ec2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f001 f922 	bl	801610e <USB_GetMode>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d005      	beq.n	8014edc <USB_SetCurrentMode+0x84>
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2bc7      	cmp	r3, #199	@ 0xc7
 8014ed4:	d9f0      	bls.n	8014eb8 <USB_SetCurrentMode+0x60>
 8014ed6:	e001      	b.n	8014edc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	e005      	b.n	8014ee8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2bc8      	cmp	r3, #200	@ 0xc8
 8014ee0:	d101      	bne.n	8014ee6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e000      	b.n	8014ee8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014ee6:	2300      	movs	r3, #0
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3710      	adds	r7, #16
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b086      	sub	sp, #24
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
 8014efa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	613b      	str	r3, [r7, #16]
 8014f0e:	e009      	b.n	8014f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014f10:	687a      	ldr	r2, [r7, #4]
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	3340      	adds	r3, #64	@ 0x40
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	4413      	add	r3, r2
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	3301      	adds	r3, #1
 8014f22:	613b      	str	r3, [r7, #16]
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	2b0e      	cmp	r3, #14
 8014f28:	d9f2      	bls.n	8014f10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014f2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d11c      	bne.n	8014f6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	68fa      	ldr	r2, [r7, #12]
 8014f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014f40:	f043 0302 	orr.w	r3, r3, #2
 8014f44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	e005      	b.n	8014f78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014f7e:	461a      	mov	r2, r3
 8014f80:	2300      	movs	r3, #0
 8014f82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014f84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	d10d      	bne.n	8014fa8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d104      	bne.n	8014f9e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014f94:	2100      	movs	r1, #0
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 f968 	bl	801526c <USB_SetDevSpeed>
 8014f9c:	e008      	b.n	8014fb0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014f9e:	2101      	movs	r1, #1
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 f963 	bl	801526c <USB_SetDevSpeed>
 8014fa6:	e003      	b.n	8014fb0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014fa8:	2103      	movs	r1, #3
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 f95e 	bl	801526c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014fb0:	2110      	movs	r1, #16
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f8fa 	bl	80151ac <USB_FlushTxFifo>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d001      	beq.n	8014fc2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f000 f924 	bl	8015210 <USB_FlushRxFifo>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d001      	beq.n	8014fd2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014fce:	2301      	movs	r3, #1
 8014fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014fd8:	461a      	mov	r2, r3
 8014fda:	2300      	movs	r3, #0
 8014fdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	613b      	str	r3, [r7, #16]
 8014ffa:	e043      	b.n	8015084 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	015a      	lsls	r2, r3, #5
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801500e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015012:	d118      	bne.n	8015046 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d10a      	bne.n	8015030 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	015a      	lsls	r2, r3, #5
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	4413      	add	r3, r2
 8015022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015026:	461a      	mov	r2, r3
 8015028:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801502c:	6013      	str	r3, [r2, #0]
 801502e:	e013      	b.n	8015058 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015030:	693b      	ldr	r3, [r7, #16]
 8015032:	015a      	lsls	r2, r3, #5
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	4413      	add	r3, r2
 8015038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801503c:	461a      	mov	r2, r3
 801503e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015042:	6013      	str	r3, [r2, #0]
 8015044:	e008      	b.n	8015058 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	015a      	lsls	r2, r3, #5
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4413      	add	r3, r2
 801504e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015052:	461a      	mov	r2, r3
 8015054:	2300      	movs	r3, #0
 8015056:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	015a      	lsls	r2, r3, #5
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	4413      	add	r3, r2
 8015060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015064:	461a      	mov	r2, r3
 8015066:	2300      	movs	r3, #0
 8015068:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	015a      	lsls	r2, r3, #5
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	4413      	add	r3, r2
 8015072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015076:	461a      	mov	r2, r3
 8015078:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801507c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	3301      	adds	r3, #1
 8015082:	613b      	str	r3, [r7, #16]
 8015084:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015088:	461a      	mov	r2, r3
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	4293      	cmp	r3, r2
 801508e:	d3b5      	bcc.n	8014ffc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015090:	2300      	movs	r3, #0
 8015092:	613b      	str	r3, [r7, #16]
 8015094:	e043      	b.n	801511e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	015a      	lsls	r2, r3, #5
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	4413      	add	r3, r2
 801509e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150ac:	d118      	bne.n	80150e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d10a      	bne.n	80150ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	015a      	lsls	r2, r3, #5
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	4413      	add	r3, r2
 80150bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150c0:	461a      	mov	r2, r3
 80150c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80150c6:	6013      	str	r3, [r2, #0]
 80150c8:	e013      	b.n	80150f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	015a      	lsls	r2, r3, #5
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	4413      	add	r3, r2
 80150d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150d6:	461a      	mov	r2, r3
 80150d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80150dc:	6013      	str	r3, [r2, #0]
 80150de:	e008      	b.n	80150f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	015a      	lsls	r2, r3, #5
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	4413      	add	r3, r2
 80150e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150ec:	461a      	mov	r2, r3
 80150ee:	2300      	movs	r3, #0
 80150f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	015a      	lsls	r2, r3, #5
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	4413      	add	r3, r2
 80150fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150fe:	461a      	mov	r2, r3
 8015100:	2300      	movs	r3, #0
 8015102:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	015a      	lsls	r2, r3, #5
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	4413      	add	r3, r2
 801510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015110:	461a      	mov	r2, r3
 8015112:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	3301      	adds	r3, #1
 801511c:	613b      	str	r3, [r7, #16]
 801511e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015122:	461a      	mov	r2, r3
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	4293      	cmp	r3, r2
 8015128:	d3b5      	bcc.n	8015096 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015130:	691b      	ldr	r3, [r3, #16]
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801513c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2200      	movs	r2, #0
 8015142:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801514a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801514c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015150:	2b00      	cmp	r3, #0
 8015152:	d105      	bne.n	8015160 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	699b      	ldr	r3, [r3, #24]
 8015158:	f043 0210 	orr.w	r2, r3, #16
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	699a      	ldr	r2, [r3, #24]
 8015164:	4b0f      	ldr	r3, [pc, #60]	@ (80151a4 <USB_DevInit+0x2b4>)
 8015166:	4313      	orrs	r3, r2
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801516c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8015170:	2b00      	cmp	r3, #0
 8015172:	d005      	beq.n	8015180 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	f043 0208 	orr.w	r2, r3, #8
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015180:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015184:	2b01      	cmp	r3, #1
 8015186:	d105      	bne.n	8015194 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	699a      	ldr	r2, [r3, #24]
 801518c:	4b06      	ldr	r3, [pc, #24]	@ (80151a8 <USB_DevInit+0x2b8>)
 801518e:	4313      	orrs	r3, r2
 8015190:	687a      	ldr	r2, [r7, #4]
 8015192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015194:	7dfb      	ldrb	r3, [r7, #23]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3718      	adds	r7, #24
 801519a:	46bd      	mov	sp, r7
 801519c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80151a0:	b004      	add	sp, #16
 80151a2:	4770      	bx	lr
 80151a4:	803c3800 	.word	0x803c3800
 80151a8:	40000004 	.word	0x40000004

080151ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80151ac:	b480      	push	{r7}
 80151ae:	b085      	sub	sp, #20
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80151b6:	2300      	movs	r3, #0
 80151b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	3301      	adds	r3, #1
 80151be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80151c6:	d901      	bls.n	80151cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80151c8:	2303      	movs	r3, #3
 80151ca:	e01b      	b.n	8015204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	691b      	ldr	r3, [r3, #16]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	daf2      	bge.n	80151ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80151d4:	2300      	movs	r3, #0
 80151d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	019b      	lsls	r3, r3, #6
 80151dc:	f043 0220 	orr.w	r2, r3, #32
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	3301      	adds	r3, #1
 80151e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80151f0:	d901      	bls.n	80151f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80151f2:	2303      	movs	r3, #3
 80151f4:	e006      	b.n	8015204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	f003 0320 	and.w	r3, r3, #32
 80151fe:	2b20      	cmp	r3, #32
 8015200:	d0f0      	beq.n	80151e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015202:	2300      	movs	r3, #0
}
 8015204:	4618      	mov	r0, r3
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015210:	b480      	push	{r7}
 8015212:	b085      	sub	sp, #20
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015218:	2300      	movs	r3, #0
 801521a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	3301      	adds	r3, #1
 8015220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015228:	d901      	bls.n	801522e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801522a:	2303      	movs	r3, #3
 801522c:	e018      	b.n	8015260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	691b      	ldr	r3, [r3, #16]
 8015232:	2b00      	cmp	r3, #0
 8015234:	daf2      	bge.n	801521c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015236:	2300      	movs	r3, #0
 8015238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2210      	movs	r2, #16
 801523e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	3301      	adds	r3, #1
 8015244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801524c:	d901      	bls.n	8015252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801524e:	2303      	movs	r3, #3
 8015250:	e006      	b.n	8015260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	691b      	ldr	r3, [r3, #16]
 8015256:	f003 0310 	and.w	r3, r3, #16
 801525a:	2b10      	cmp	r3, #16
 801525c:	d0f0      	beq.n	8015240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801525e:	2300      	movs	r3, #0
}
 8015260:	4618      	mov	r0, r3
 8015262:	3714      	adds	r7, #20
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr

0801526c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801526c:	b480      	push	{r7}
 801526e:	b085      	sub	sp, #20
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	460b      	mov	r3, r1
 8015276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	78fb      	ldrb	r3, [r7, #3]
 8015286:	68f9      	ldr	r1, [r7, #12]
 8015288:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801528c:	4313      	orrs	r3, r2
 801528e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015290:	2300      	movs	r3, #0
}
 8015292:	4618      	mov	r0, r3
 8015294:	3714      	adds	r7, #20
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr

0801529e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801529e:	b480      	push	{r7}
 80152a0:	b087      	sub	sp, #28
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	f003 0306 	and.w	r3, r3, #6
 80152b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d102      	bne.n	80152c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80152be:	2300      	movs	r3, #0
 80152c0:	75fb      	strb	r3, [r7, #23]
 80152c2:	e00a      	b.n	80152da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b02      	cmp	r3, #2
 80152c8:	d002      	beq.n	80152d0 <USB_GetDevSpeed+0x32>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2b06      	cmp	r3, #6
 80152ce:	d102      	bne.n	80152d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80152d0:	2302      	movs	r3, #2
 80152d2:	75fb      	strb	r3, [r7, #23]
 80152d4:	e001      	b.n	80152da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80152d6:	230f      	movs	r3, #15
 80152d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80152da:	7dfb      	ldrb	r3, [r7, #23]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	371c      	adds	r7, #28
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152e8:	b480      	push	{r7}
 80152ea:	b085      	sub	sp, #20
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	785b      	ldrb	r3, [r3, #1]
 8015300:	2b01      	cmp	r3, #1
 8015302:	d139      	bne.n	8015378 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801530a:	69da      	ldr	r2, [r3, #28]
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	f003 030f 	and.w	r3, r3, #15
 8015314:	2101      	movs	r1, #1
 8015316:	fa01 f303 	lsl.w	r3, r1, r3
 801531a:	b29b      	uxth	r3, r3
 801531c:	68f9      	ldr	r1, [r7, #12]
 801531e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015322:	4313      	orrs	r3, r2
 8015324:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	015a      	lsls	r2, r3, #5
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	4413      	add	r3, r2
 801532e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015338:	2b00      	cmp	r3, #0
 801533a:	d153      	bne.n	80153e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	015a      	lsls	r2, r3, #5
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	4413      	add	r3, r2
 8015344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	689b      	ldr	r3, [r3, #8]
 801534e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	791b      	ldrb	r3, [r3, #4]
 8015356:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015358:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	059b      	lsls	r3, r3, #22
 801535e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015360:	431a      	orrs	r2, r3
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	0159      	lsls	r1, r3, #5
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	440b      	add	r3, r1
 801536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801536e:	4619      	mov	r1, r3
 8015370:	4b20      	ldr	r3, [pc, #128]	@ (80153f4 <USB_ActivateEndpoint+0x10c>)
 8015372:	4313      	orrs	r3, r2
 8015374:	600b      	str	r3, [r1, #0]
 8015376:	e035      	b.n	80153e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801537e:	69da      	ldr	r2, [r3, #28]
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	f003 030f 	and.w	r3, r3, #15
 8015388:	2101      	movs	r1, #1
 801538a:	fa01 f303 	lsl.w	r3, r1, r3
 801538e:	041b      	lsls	r3, r3, #16
 8015390:	68f9      	ldr	r1, [r7, #12]
 8015392:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015396:	4313      	orrs	r3, r2
 8015398:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	015a      	lsls	r2, r3, #5
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	4413      	add	r3, r2
 80153a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d119      	bne.n	80153e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	015a      	lsls	r2, r3, #5
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	4413      	add	r3, r2
 80153b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	689b      	ldr	r3, [r3, #8]
 80153c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	791b      	ldrb	r3, [r3, #4]
 80153ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80153cc:	430b      	orrs	r3, r1
 80153ce:	431a      	orrs	r2, r3
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	0159      	lsls	r1, r3, #5
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	440b      	add	r3, r1
 80153d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153dc:	4619      	mov	r1, r3
 80153de:	4b05      	ldr	r3, [pc, #20]	@ (80153f4 <USB_ActivateEndpoint+0x10c>)
 80153e0:	4313      	orrs	r3, r2
 80153e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80153e4:	2300      	movs	r3, #0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3714      	adds	r7, #20
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr
 80153f2:	bf00      	nop
 80153f4:	10008000 	.word	0x10008000

080153f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	781b      	ldrb	r3, [r3, #0]
 801540a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	785b      	ldrb	r3, [r3, #1]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d161      	bne.n	80154d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	015a      	lsls	r2, r3, #5
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	4413      	add	r3, r2
 801541c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801542a:	d11f      	bne.n	801546c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	015a      	lsls	r2, r3, #5
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	4413      	add	r3, r2
 8015434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	68ba      	ldr	r2, [r7, #8]
 801543c:	0151      	lsls	r1, r2, #5
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	440a      	add	r2, r1
 8015442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015446:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801544a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	015a      	lsls	r2, r3, #5
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	4413      	add	r3, r2
 8015454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	68ba      	ldr	r2, [r7, #8]
 801545c:	0151      	lsls	r1, r2, #5
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	440a      	add	r2, r1
 8015462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015466:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801546a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	f003 030f 	and.w	r3, r3, #15
 801547c:	2101      	movs	r1, #1
 801547e:	fa01 f303 	lsl.w	r3, r1, r3
 8015482:	b29b      	uxth	r3, r3
 8015484:	43db      	mvns	r3, r3
 8015486:	68f9      	ldr	r1, [r7, #12]
 8015488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801548c:	4013      	ands	r3, r2
 801548e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015496:	69da      	ldr	r2, [r3, #28]
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	f003 030f 	and.w	r3, r3, #15
 80154a0:	2101      	movs	r1, #1
 80154a2:	fa01 f303 	lsl.w	r3, r1, r3
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	43db      	mvns	r3, r3
 80154aa:	68f9      	ldr	r1, [r7, #12]
 80154ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80154b0:	4013      	ands	r3, r2
 80154b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	015a      	lsls	r2, r3, #5
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	4413      	add	r3, r2
 80154bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	0159      	lsls	r1, r3, #5
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	440b      	add	r3, r1
 80154ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154ce:	4619      	mov	r1, r3
 80154d0:	4b35      	ldr	r3, [pc, #212]	@ (80155a8 <USB_DeactivateEndpoint+0x1b0>)
 80154d2:	4013      	ands	r3, r2
 80154d4:	600b      	str	r3, [r1, #0]
 80154d6:	e060      	b.n	801559a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	015a      	lsls	r2, r3, #5
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	4413      	add	r3, r2
 80154e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80154ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80154ee:	d11f      	bne.n	8015530 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	015a      	lsls	r2, r3, #5
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	4413      	add	r3, r2
 80154f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68ba      	ldr	r2, [r7, #8]
 8015500:	0151      	lsls	r1, r2, #5
 8015502:	68fa      	ldr	r2, [r7, #12]
 8015504:	440a      	add	r2, r1
 8015506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801550a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801550e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	015a      	lsls	r2, r3, #5
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	4413      	add	r3, r2
 8015518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	68ba      	ldr	r2, [r7, #8]
 8015520:	0151      	lsls	r1, r2, #5
 8015522:	68fa      	ldr	r2, [r7, #12]
 8015524:	440a      	add	r2, r1
 8015526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801552a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801552e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	f003 030f 	and.w	r3, r3, #15
 8015540:	2101      	movs	r1, #1
 8015542:	fa01 f303 	lsl.w	r3, r1, r3
 8015546:	041b      	lsls	r3, r3, #16
 8015548:	43db      	mvns	r3, r3
 801554a:	68f9      	ldr	r1, [r7, #12]
 801554c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015550:	4013      	ands	r3, r2
 8015552:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801555a:	69da      	ldr	r2, [r3, #28]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	f003 030f 	and.w	r3, r3, #15
 8015564:	2101      	movs	r1, #1
 8015566:	fa01 f303 	lsl.w	r3, r1, r3
 801556a:	041b      	lsls	r3, r3, #16
 801556c:	43db      	mvns	r3, r3
 801556e:	68f9      	ldr	r1, [r7, #12]
 8015570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015574:	4013      	ands	r3, r2
 8015576:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	015a      	lsls	r2, r3, #5
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	4413      	add	r3, r2
 8015580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	0159      	lsls	r1, r3, #5
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	440b      	add	r3, r1
 801558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015592:	4619      	mov	r1, r3
 8015594:	4b05      	ldr	r3, [pc, #20]	@ (80155ac <USB_DeactivateEndpoint+0x1b4>)
 8015596:	4013      	ands	r3, r2
 8015598:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801559a:	2300      	movs	r3, #0
}
 801559c:	4618      	mov	r0, r3
 801559e:	3714      	adds	r7, #20
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr
 80155a8:	ec337800 	.word	0xec337800
 80155ac:	eff37800 	.word	0xeff37800

080155b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08a      	sub	sp, #40	@ 0x28
 80155b4:	af02      	add	r7, sp, #8
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	4613      	mov	r3, r2
 80155bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	785b      	ldrb	r3, [r3, #1]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	f040 8181 	bne.w	80158d4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	691b      	ldr	r3, [r3, #16]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d132      	bne.n	8015640 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	015a      	lsls	r2, r3, #5
 80155de:	69fb      	ldr	r3, [r7, #28]
 80155e0:	4413      	add	r3, r2
 80155e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155e6:	691a      	ldr	r2, [r3, #16]
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	0159      	lsls	r1, r3, #5
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	440b      	add	r3, r1
 80155f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155f4:	4619      	mov	r1, r3
 80155f6:	4ba5      	ldr	r3, [pc, #660]	@ (801588c <USB_EPStartXfer+0x2dc>)
 80155f8:	4013      	ands	r3, r2
 80155fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80155fc:	69bb      	ldr	r3, [r7, #24]
 80155fe:	015a      	lsls	r2, r3, #5
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	4413      	add	r3, r2
 8015604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015608:	691b      	ldr	r3, [r3, #16]
 801560a:	69ba      	ldr	r2, [r7, #24]
 801560c:	0151      	lsls	r1, r2, #5
 801560e:	69fa      	ldr	r2, [r7, #28]
 8015610:	440a      	add	r2, r1
 8015612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015616:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801561a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	015a      	lsls	r2, r3, #5
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	4413      	add	r3, r2
 8015624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015628:	691a      	ldr	r2, [r3, #16]
 801562a:	69bb      	ldr	r3, [r7, #24]
 801562c:	0159      	lsls	r1, r3, #5
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	440b      	add	r3, r1
 8015632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015636:	4619      	mov	r1, r3
 8015638:	4b95      	ldr	r3, [pc, #596]	@ (8015890 <USB_EPStartXfer+0x2e0>)
 801563a:	4013      	ands	r3, r2
 801563c:	610b      	str	r3, [r1, #16]
 801563e:	e092      	b.n	8015766 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	015a      	lsls	r2, r3, #5
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	4413      	add	r3, r2
 8015648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801564c:	691a      	ldr	r2, [r3, #16]
 801564e:	69bb      	ldr	r3, [r7, #24]
 8015650:	0159      	lsls	r1, r3, #5
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	440b      	add	r3, r1
 8015656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801565a:	4619      	mov	r1, r3
 801565c:	4b8c      	ldr	r3, [pc, #560]	@ (8015890 <USB_EPStartXfer+0x2e0>)
 801565e:	4013      	ands	r3, r2
 8015660:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	015a      	lsls	r2, r3, #5
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	4413      	add	r3, r2
 801566a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801566e:	691a      	ldr	r2, [r3, #16]
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	0159      	lsls	r1, r3, #5
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	440b      	add	r3, r1
 8015678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801567c:	4619      	mov	r1, r3
 801567e:	4b83      	ldr	r3, [pc, #524]	@ (801588c <USB_EPStartXfer+0x2dc>)
 8015680:	4013      	ands	r3, r2
 8015682:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d11a      	bne.n	80156c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	691a      	ldr	r2, [r3, #16]
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	429a      	cmp	r2, r3
 8015694:	d903      	bls.n	801569e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	689a      	ldr	r2, [r3, #8]
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	015a      	lsls	r2, r3, #5
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	4413      	add	r3, r2
 80156a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156aa:	691b      	ldr	r3, [r3, #16]
 80156ac:	69ba      	ldr	r2, [r7, #24]
 80156ae:	0151      	lsls	r1, r2, #5
 80156b0:	69fa      	ldr	r2, [r7, #28]
 80156b2:	440a      	add	r2, r1
 80156b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80156b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80156bc:	6113      	str	r3, [r2, #16]
 80156be:	e01b      	b.n	80156f8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	015a      	lsls	r2, r3, #5
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	4413      	add	r3, r2
 80156c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80156cc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	6919      	ldr	r1, [r3, #16]
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	689b      	ldr	r3, [r3, #8]
 80156d6:	440b      	add	r3, r1
 80156d8:	1e59      	subs	r1, r3, #1
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	fbb1 f3f3 	udiv	r3, r1, r3
 80156e2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80156e4:	4b6b      	ldr	r3, [pc, #428]	@ (8015894 <USB_EPStartXfer+0x2e4>)
 80156e6:	400b      	ands	r3, r1
 80156e8:	69b9      	ldr	r1, [r7, #24]
 80156ea:	0148      	lsls	r0, r1, #5
 80156ec:	69f9      	ldr	r1, [r7, #28]
 80156ee:	4401      	add	r1, r0
 80156f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80156f4:	4313      	orrs	r3, r2
 80156f6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	015a      	lsls	r2, r3, #5
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	4413      	add	r3, r2
 8015700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015704:	691a      	ldr	r2, [r3, #16]
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	691b      	ldr	r3, [r3, #16]
 801570a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801570e:	69b9      	ldr	r1, [r7, #24]
 8015710:	0148      	lsls	r0, r1, #5
 8015712:	69f9      	ldr	r1, [r7, #28]
 8015714:	4401      	add	r1, r0
 8015716:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801571a:	4313      	orrs	r3, r2
 801571c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	791b      	ldrb	r3, [r3, #4]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d11f      	bne.n	8015766 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015726:	69bb      	ldr	r3, [r7, #24]
 8015728:	015a      	lsls	r2, r3, #5
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	4413      	add	r3, r2
 801572e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015732:	691b      	ldr	r3, [r3, #16]
 8015734:	69ba      	ldr	r2, [r7, #24]
 8015736:	0151      	lsls	r1, r2, #5
 8015738:	69fa      	ldr	r2, [r7, #28]
 801573a:	440a      	add	r2, r1
 801573c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015740:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8015744:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	015a      	lsls	r2, r3, #5
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	4413      	add	r3, r2
 801574e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015752:	691b      	ldr	r3, [r3, #16]
 8015754:	69ba      	ldr	r2, [r7, #24]
 8015756:	0151      	lsls	r1, r2, #5
 8015758:	69fa      	ldr	r2, [r7, #28]
 801575a:	440a      	add	r2, r1
 801575c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015760:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015764:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015766:	79fb      	ldrb	r3, [r7, #7]
 8015768:	2b01      	cmp	r3, #1
 801576a:	d14b      	bne.n	8015804 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	69db      	ldr	r3, [r3, #28]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d009      	beq.n	8015788 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015774:	69bb      	ldr	r3, [r7, #24]
 8015776:	015a      	lsls	r2, r3, #5
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	4413      	add	r3, r2
 801577c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015780:	461a      	mov	r2, r3
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	69db      	ldr	r3, [r3, #28]
 8015786:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	791b      	ldrb	r3, [r3, #4]
 801578c:	2b01      	cmp	r3, #1
 801578e:	d128      	bne.n	80157e2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801579c:	2b00      	cmp	r3, #0
 801579e:	d110      	bne.n	80157c2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80157a0:	69bb      	ldr	r3, [r7, #24]
 80157a2:	015a      	lsls	r2, r3, #5
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	4413      	add	r3, r2
 80157a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	69ba      	ldr	r2, [r7, #24]
 80157b0:	0151      	lsls	r1, r2, #5
 80157b2:	69fa      	ldr	r2, [r7, #28]
 80157b4:	440a      	add	r2, r1
 80157b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80157be:	6013      	str	r3, [r2, #0]
 80157c0:	e00f      	b.n	80157e2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80157c2:	69bb      	ldr	r3, [r7, #24]
 80157c4:	015a      	lsls	r2, r3, #5
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	4413      	add	r3, r2
 80157ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	69ba      	ldr	r2, [r7, #24]
 80157d2:	0151      	lsls	r1, r2, #5
 80157d4:	69fa      	ldr	r2, [r7, #28]
 80157d6:	440a      	add	r2, r1
 80157d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80157e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80157e2:	69bb      	ldr	r3, [r7, #24]
 80157e4:	015a      	lsls	r2, r3, #5
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	4413      	add	r3, r2
 80157ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	69ba      	ldr	r2, [r7, #24]
 80157f2:	0151      	lsls	r1, r2, #5
 80157f4:	69fa      	ldr	r2, [r7, #28]
 80157f6:	440a      	add	r2, r1
 80157f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	e16a      	b.n	8015ada <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	015a      	lsls	r2, r3, #5
 8015808:	69fb      	ldr	r3, [r7, #28]
 801580a:	4413      	add	r3, r2
 801580c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	69ba      	ldr	r2, [r7, #24]
 8015814:	0151      	lsls	r1, r2, #5
 8015816:	69fa      	ldr	r2, [r7, #28]
 8015818:	440a      	add	r2, r1
 801581a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801581e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015822:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	791b      	ldrb	r3, [r3, #4]
 8015828:	2b01      	cmp	r3, #1
 801582a:	d015      	beq.n	8015858 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	691b      	ldr	r3, [r3, #16]
 8015830:	2b00      	cmp	r3, #0
 8015832:	f000 8152 	beq.w	8015ada <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015836:	69fb      	ldr	r3, [r7, #28]
 8015838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801583c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	f003 030f 	and.w	r3, r3, #15
 8015846:	2101      	movs	r1, #1
 8015848:	fa01 f303 	lsl.w	r3, r1, r3
 801584c:	69f9      	ldr	r1, [r7, #28]
 801584e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015852:	4313      	orrs	r3, r2
 8015854:	634b      	str	r3, [r1, #52]	@ 0x34
 8015856:	e140      	b.n	8015ada <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015864:	2b00      	cmp	r3, #0
 8015866:	d117      	bne.n	8015898 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015868:	69bb      	ldr	r3, [r7, #24]
 801586a:	015a      	lsls	r2, r3, #5
 801586c:	69fb      	ldr	r3, [r7, #28]
 801586e:	4413      	add	r3, r2
 8015870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	69ba      	ldr	r2, [r7, #24]
 8015878:	0151      	lsls	r1, r2, #5
 801587a:	69fa      	ldr	r2, [r7, #28]
 801587c:	440a      	add	r2, r1
 801587e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015882:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015886:	6013      	str	r3, [r2, #0]
 8015888:	e016      	b.n	80158b8 <USB_EPStartXfer+0x308>
 801588a:	bf00      	nop
 801588c:	e007ffff 	.word	0xe007ffff
 8015890:	fff80000 	.word	0xfff80000
 8015894:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	015a      	lsls	r2, r3, #5
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	4413      	add	r3, r2
 80158a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	69ba      	ldr	r2, [r7, #24]
 80158a8:	0151      	lsls	r1, r2, #5
 80158aa:	69fa      	ldr	r2, [r7, #28]
 80158ac:	440a      	add	r2, r1
 80158ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80158b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80158b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	68d9      	ldr	r1, [r3, #12]
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	781a      	ldrb	r2, [r3, #0]
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	691b      	ldr	r3, [r3, #16]
 80158c4:	b298      	uxth	r0, r3
 80158c6:	79fb      	ldrb	r3, [r7, #7]
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	4603      	mov	r3, r0
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f000 f9b9 	bl	8015c44 <USB_WritePacket>
 80158d2:	e102      	b.n	8015ada <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	015a      	lsls	r2, r3, #5
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	4413      	add	r3, r2
 80158dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158e0:	691a      	ldr	r2, [r3, #16]
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	0159      	lsls	r1, r3, #5
 80158e6:	69fb      	ldr	r3, [r7, #28]
 80158e8:	440b      	add	r3, r1
 80158ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158ee:	4619      	mov	r1, r3
 80158f0:	4b7c      	ldr	r3, [pc, #496]	@ (8015ae4 <USB_EPStartXfer+0x534>)
 80158f2:	4013      	ands	r3, r2
 80158f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80158f6:	69bb      	ldr	r3, [r7, #24]
 80158f8:	015a      	lsls	r2, r3, #5
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	4413      	add	r3, r2
 80158fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015902:	691a      	ldr	r2, [r3, #16]
 8015904:	69bb      	ldr	r3, [r7, #24]
 8015906:	0159      	lsls	r1, r3, #5
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	440b      	add	r3, r1
 801590c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015910:	4619      	mov	r1, r3
 8015912:	4b75      	ldr	r3, [pc, #468]	@ (8015ae8 <USB_EPStartXfer+0x538>)
 8015914:	4013      	ands	r3, r2
 8015916:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d12f      	bne.n	801597e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	691b      	ldr	r3, [r3, #16]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d003      	beq.n	801592e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	689a      	ldr	r2, [r3, #8]
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	689a      	ldr	r2, [r3, #8]
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	015a      	lsls	r2, r3, #5
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	4413      	add	r3, r2
 801593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015942:	691a      	ldr	r2, [r3, #16]
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	6a1b      	ldr	r3, [r3, #32]
 8015948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801594c:	69b9      	ldr	r1, [r7, #24]
 801594e:	0148      	lsls	r0, r1, #5
 8015950:	69f9      	ldr	r1, [r7, #28]
 8015952:	4401      	add	r1, r0
 8015954:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015958:	4313      	orrs	r3, r2
 801595a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	015a      	lsls	r2, r3, #5
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	4413      	add	r3, r2
 8015964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015968:	691b      	ldr	r3, [r3, #16]
 801596a:	69ba      	ldr	r2, [r7, #24]
 801596c:	0151      	lsls	r1, r2, #5
 801596e:	69fa      	ldr	r2, [r7, #28]
 8015970:	440a      	add	r2, r1
 8015972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015976:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801597a:	6113      	str	r3, [r2, #16]
 801597c:	e05f      	b.n	8015a3e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	691b      	ldr	r3, [r3, #16]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d123      	bne.n	80159ce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	015a      	lsls	r2, r3, #5
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	4413      	add	r3, r2
 801598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015992:	691a      	ldr	r2, [r3, #16]
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	689b      	ldr	r3, [r3, #8]
 8015998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801599c:	69b9      	ldr	r1, [r7, #24]
 801599e:	0148      	lsls	r0, r1, #5
 80159a0:	69f9      	ldr	r1, [r7, #28]
 80159a2:	4401      	add	r1, r0
 80159a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80159a8:	4313      	orrs	r3, r2
 80159aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80159ac:	69bb      	ldr	r3, [r7, #24]
 80159ae:	015a      	lsls	r2, r3, #5
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	4413      	add	r3, r2
 80159b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80159b8:	691b      	ldr	r3, [r3, #16]
 80159ba:	69ba      	ldr	r2, [r7, #24]
 80159bc:	0151      	lsls	r1, r2, #5
 80159be:	69fa      	ldr	r2, [r7, #28]
 80159c0:	440a      	add	r2, r1
 80159c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80159c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80159ca:	6113      	str	r3, [r2, #16]
 80159cc:	e037      	b.n	8015a3e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	691a      	ldr	r2, [r3, #16]
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	689b      	ldr	r3, [r3, #8]
 80159d6:	4413      	add	r3, r2
 80159d8:	1e5a      	subs	r2, r3, #1
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	fbb2 f3f3 	udiv	r3, r2, r3
 80159e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	689b      	ldr	r3, [r3, #8]
 80159e8:	8afa      	ldrh	r2, [r7, #22]
 80159ea:	fb03 f202 	mul.w	r2, r3, r2
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	015a      	lsls	r2, r3, #5
 80159f6:	69fb      	ldr	r3, [r7, #28]
 80159f8:	4413      	add	r3, r2
 80159fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80159fe:	691a      	ldr	r2, [r3, #16]
 8015a00:	8afb      	ldrh	r3, [r7, #22]
 8015a02:	04d9      	lsls	r1, r3, #19
 8015a04:	4b39      	ldr	r3, [pc, #228]	@ (8015aec <USB_EPStartXfer+0x53c>)
 8015a06:	400b      	ands	r3, r1
 8015a08:	69b9      	ldr	r1, [r7, #24]
 8015a0a:	0148      	lsls	r0, r1, #5
 8015a0c:	69f9      	ldr	r1, [r7, #28]
 8015a0e:	4401      	add	r1, r0
 8015a10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015a14:	4313      	orrs	r3, r2
 8015a16:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015a18:	69bb      	ldr	r3, [r7, #24]
 8015a1a:	015a      	lsls	r2, r3, #5
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	4413      	add	r3, r2
 8015a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a24:	691a      	ldr	r2, [r3, #16]
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	6a1b      	ldr	r3, [r3, #32]
 8015a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015a2e:	69b9      	ldr	r1, [r7, #24]
 8015a30:	0148      	lsls	r0, r1, #5
 8015a32:	69f9      	ldr	r1, [r7, #28]
 8015a34:	4401      	add	r1, r0
 8015a36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015a3a:	4313      	orrs	r3, r2
 8015a3c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8015a3e:	79fb      	ldrb	r3, [r7, #7]
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d10d      	bne.n	8015a60 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d009      	beq.n	8015a60 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	68d9      	ldr	r1, [r3, #12]
 8015a50:	69bb      	ldr	r3, [r7, #24]
 8015a52:	015a      	lsls	r2, r3, #5
 8015a54:	69fb      	ldr	r3, [r7, #28]
 8015a56:	4413      	add	r3, r2
 8015a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a5c:	460a      	mov	r2, r1
 8015a5e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	791b      	ldrb	r3, [r3, #4]
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d128      	bne.n	8015aba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d110      	bne.n	8015a9a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	015a      	lsls	r2, r3, #5
 8015a7c:	69fb      	ldr	r3, [r7, #28]
 8015a7e:	4413      	add	r3, r2
 8015a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	69ba      	ldr	r2, [r7, #24]
 8015a88:	0151      	lsls	r1, r2, #5
 8015a8a:	69fa      	ldr	r2, [r7, #28]
 8015a8c:	440a      	add	r2, r1
 8015a8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015a92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015a96:	6013      	str	r3, [r2, #0]
 8015a98:	e00f      	b.n	8015aba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	015a      	lsls	r2, r3, #5
 8015a9e:	69fb      	ldr	r3, [r7, #28]
 8015aa0:	4413      	add	r3, r2
 8015aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	69ba      	ldr	r2, [r7, #24]
 8015aaa:	0151      	lsls	r1, r2, #5
 8015aac:	69fa      	ldr	r2, [r7, #28]
 8015aae:	440a      	add	r2, r1
 8015ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015ab8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015aba:	69bb      	ldr	r3, [r7, #24]
 8015abc:	015a      	lsls	r2, r3, #5
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	69ba      	ldr	r2, [r7, #24]
 8015aca:	0151      	lsls	r1, r2, #5
 8015acc:	69fa      	ldr	r2, [r7, #28]
 8015ace:	440a      	add	r2, r1
 8015ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ad4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ada:	2300      	movs	r3, #0
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3720      	adds	r7, #32
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	fff80000 	.word	0xfff80000
 8015ae8:	e007ffff 	.word	0xe007ffff
 8015aec:	1ff80000 	.word	0x1ff80000

08015af0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015af0:	b480      	push	{r7}
 8015af2:	b087      	sub	sp, #28
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
 8015af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015afa:	2300      	movs	r3, #0
 8015afc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	785b      	ldrb	r3, [r3, #1]
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	d14a      	bne.n	8015ba4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	015a      	lsls	r2, r3, #5
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	4413      	add	r3, r2
 8015b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015b26:	f040 8086 	bne.w	8015c36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	015a      	lsls	r2, r3, #5
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	4413      	add	r3, r2
 8015b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	7812      	ldrb	r2, [r2, #0]
 8015b3e:	0151      	lsls	r1, r2, #5
 8015b40:	693a      	ldr	r2, [r7, #16]
 8015b42:	440a      	add	r2, r1
 8015b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015b4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	015a      	lsls	r2, r3, #5
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	4413      	add	r3, r2
 8015b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	683a      	ldr	r2, [r7, #0]
 8015b60:	7812      	ldrb	r2, [r2, #0]
 8015b62:	0151      	lsls	r1, r2, #5
 8015b64:	693a      	ldr	r2, [r7, #16]
 8015b66:	440a      	add	r2, r1
 8015b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015b70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	3301      	adds	r3, #1
 8015b76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015b7e:	4293      	cmp	r3, r2
 8015b80:	d902      	bls.n	8015b88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015b82:	2301      	movs	r3, #1
 8015b84:	75fb      	strb	r3, [r7, #23]
          break;
 8015b86:	e056      	b.n	8015c36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	015a      	lsls	r2, r3, #5
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	4413      	add	r3, r2
 8015b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015ba0:	d0e7      	beq.n	8015b72 <USB_EPStopXfer+0x82>
 8015ba2:	e048      	b.n	8015c36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	015a      	lsls	r2, r3, #5
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	4413      	add	r3, r2
 8015bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015bbc:	d13b      	bne.n	8015c36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	015a      	lsls	r2, r3, #5
 8015bc4:	693b      	ldr	r3, [r7, #16]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	683a      	ldr	r2, [r7, #0]
 8015bd0:	7812      	ldrb	r2, [r2, #0]
 8015bd2:	0151      	lsls	r1, r2, #5
 8015bd4:	693a      	ldr	r2, [r7, #16]
 8015bd6:	440a      	add	r2, r1
 8015bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015bdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015be0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	781b      	ldrb	r3, [r3, #0]
 8015be6:	015a      	lsls	r2, r3, #5
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	4413      	add	r3, r2
 8015bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	683a      	ldr	r2, [r7, #0]
 8015bf4:	7812      	ldrb	r2, [r2, #0]
 8015bf6:	0151      	lsls	r1, r2, #5
 8015bf8:	693a      	ldr	r2, [r7, #16]
 8015bfa:	440a      	add	r2, r1
 8015bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015c04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015c12:	4293      	cmp	r3, r2
 8015c14:	d902      	bls.n	8015c1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015c16:	2301      	movs	r3, #1
 8015c18:	75fb      	strb	r3, [r7, #23]
          break;
 8015c1a:	e00c      	b.n	8015c36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	015a      	lsls	r2, r3, #5
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	4413      	add	r3, r2
 8015c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015c34:	d0e7      	beq.n	8015c06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	371c      	adds	r7, #28
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr

08015c44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015c44:	b480      	push	{r7}
 8015c46:	b089      	sub	sp, #36	@ 0x24
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	60f8      	str	r0, [r7, #12]
 8015c4c:	60b9      	str	r1, [r7, #8]
 8015c4e:	4611      	mov	r1, r2
 8015c50:	461a      	mov	r2, r3
 8015c52:	460b      	mov	r3, r1
 8015c54:	71fb      	strb	r3, [r7, #7]
 8015c56:	4613      	mov	r3, r2
 8015c58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015c62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d123      	bne.n	8015cb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015c6a:	88bb      	ldrh	r3, [r7, #4]
 8015c6c:	3303      	adds	r3, #3
 8015c6e:	089b      	lsrs	r3, r3, #2
 8015c70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015c72:	2300      	movs	r3, #0
 8015c74:	61bb      	str	r3, [r7, #24]
 8015c76:	e018      	b.n	8015caa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015c78:	79fb      	ldrb	r3, [r7, #7]
 8015c7a:	031a      	lsls	r2, r3, #12
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	4413      	add	r3, r2
 8015c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015c84:	461a      	mov	r2, r3
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	3301      	adds	r3, #1
 8015c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	3301      	adds	r3, #1
 8015c96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015ca4:	69bb      	ldr	r3, [r7, #24]
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	61bb      	str	r3, [r7, #24]
 8015caa:	69ba      	ldr	r2, [r7, #24]
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d3e2      	bcc.n	8015c78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015cb2:	2300      	movs	r3, #0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3724      	adds	r7, #36	@ 0x24
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr

08015cc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b08b      	sub	sp, #44	@ 0x2c
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	60f8      	str	r0, [r7, #12]
 8015cc8:	60b9      	str	r1, [r7, #8]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015cd6:	88fb      	ldrh	r3, [r7, #6]
 8015cd8:	089b      	lsrs	r3, r3, #2
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015cde:	88fb      	ldrh	r3, [r7, #6]
 8015ce0:	f003 0303 	and.w	r3, r3, #3
 8015ce4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	623b      	str	r3, [r7, #32]
 8015cea:	e014      	b.n	8015d16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015cec:	69bb      	ldr	r3, [r7, #24]
 8015cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015cf2:	681a      	ldr	r2, [r3, #0]
 8015cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8015cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cfa:	3301      	adds	r3, #1
 8015cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d00:	3301      	adds	r3, #1
 8015d02:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d06:	3301      	adds	r3, #1
 8015d08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015d10:	6a3b      	ldr	r3, [r7, #32]
 8015d12:	3301      	adds	r3, #1
 8015d14:	623b      	str	r3, [r7, #32]
 8015d16:	6a3a      	ldr	r2, [r7, #32]
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d3e6      	bcc.n	8015cec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015d1e:	8bfb      	ldrh	r3, [r7, #30]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d01e      	beq.n	8015d62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015d24:	2300      	movs	r3, #0
 8015d26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015d28:	69bb      	ldr	r3, [r7, #24]
 8015d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015d2e:	461a      	mov	r2, r3
 8015d30:	f107 0310 	add.w	r3, r7, #16
 8015d34:	6812      	ldr	r2, [r2, #0]
 8015d36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	6a3b      	ldr	r3, [r7, #32]
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	fa22 f303 	lsr.w	r3, r2, r3
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d48:	701a      	strb	r2, [r3, #0]
      i++;
 8015d4a:	6a3b      	ldr	r3, [r7, #32]
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	3301      	adds	r3, #1
 8015d54:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8015d56:	8bfb      	ldrh	r3, [r7, #30]
 8015d58:	3b01      	subs	r3, #1
 8015d5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015d5c:	8bfb      	ldrh	r3, [r7, #30]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1ea      	bne.n	8015d38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	372c      	adds	r7, #44	@ 0x2c
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr

08015d70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	785b      	ldrb	r3, [r3, #1]
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	d12c      	bne.n	8015de6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	015a      	lsls	r2, r3, #5
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	4413      	add	r3, r2
 8015d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	db12      	blt.n	8015dc4 <USB_EPSetStall+0x54>
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00f      	beq.n	8015dc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	015a      	lsls	r2, r3, #5
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	4413      	add	r3, r2
 8015dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	68ba      	ldr	r2, [r7, #8]
 8015db4:	0151      	lsls	r1, r2, #5
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	440a      	add	r2, r1
 8015dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015dc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	015a      	lsls	r2, r3, #5
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	4413      	add	r3, r2
 8015dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	0151      	lsls	r1, r2, #5
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	440a      	add	r2, r1
 8015dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015de2:	6013      	str	r3, [r2, #0]
 8015de4:	e02b      	b.n	8015e3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	015a      	lsls	r2, r3, #5
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	4413      	add	r3, r2
 8015dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	db12      	blt.n	8015e1e <USB_EPSetStall+0xae>
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00f      	beq.n	8015e1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	015a      	lsls	r2, r3, #5
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	4413      	add	r3, r2
 8015e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	68ba      	ldr	r2, [r7, #8]
 8015e0e:	0151      	lsls	r1, r2, #5
 8015e10:	68fa      	ldr	r2, [r7, #12]
 8015e12:	440a      	add	r2, r1
 8015e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015e1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	015a      	lsls	r2, r3, #5
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	4413      	add	r3, r2
 8015e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	0151      	lsls	r1, r2, #5
 8015e30:	68fa      	ldr	r2, [r7, #12]
 8015e32:	440a      	add	r2, r1
 8015e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015e3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015e3e:	2300      	movs	r3, #0
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3714      	adds	r7, #20
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b085      	sub	sp, #20
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	785b      	ldrb	r3, [r3, #1]
 8015e64:	2b01      	cmp	r3, #1
 8015e66:	d128      	bne.n	8015eba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	015a      	lsls	r2, r3, #5
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	4413      	add	r3, r2
 8015e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	68ba      	ldr	r2, [r7, #8]
 8015e78:	0151      	lsls	r1, r2, #5
 8015e7a:	68fa      	ldr	r2, [r7, #12]
 8015e7c:	440a      	add	r2, r1
 8015e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015e86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	791b      	ldrb	r3, [r3, #4]
 8015e8c:	2b03      	cmp	r3, #3
 8015e8e:	d003      	beq.n	8015e98 <USB_EPClearStall+0x4c>
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	791b      	ldrb	r3, [r3, #4]
 8015e94:	2b02      	cmp	r3, #2
 8015e96:	d138      	bne.n	8015f0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	015a      	lsls	r2, r3, #5
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	68ba      	ldr	r2, [r7, #8]
 8015ea8:	0151      	lsls	r1, r2, #5
 8015eaa:	68fa      	ldr	r2, [r7, #12]
 8015eac:	440a      	add	r2, r1
 8015eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015eb6:	6013      	str	r3, [r2, #0]
 8015eb8:	e027      	b.n	8015f0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	015a      	lsls	r2, r3, #5
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	68ba      	ldr	r2, [r7, #8]
 8015eca:	0151      	lsls	r1, r2, #5
 8015ecc:	68fa      	ldr	r2, [r7, #12]
 8015ece:	440a      	add	r2, r1
 8015ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ed4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015ed8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	791b      	ldrb	r3, [r3, #4]
 8015ede:	2b03      	cmp	r3, #3
 8015ee0:	d003      	beq.n	8015eea <USB_EPClearStall+0x9e>
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	791b      	ldrb	r3, [r3, #4]
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d10f      	bne.n	8015f0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	015a      	lsls	r2, r3, #5
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	0151      	lsls	r1, r2, #5
 8015efc:	68fa      	ldr	r2, [r7, #12]
 8015efe:	440a      	add	r2, r1
 8015f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015f08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015f0a:	2300      	movs	r3, #0
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3714      	adds	r7, #20
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr

08015f18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b085      	sub	sp, #20
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	460b      	mov	r3, r1
 8015f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015f36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015f3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015f42:	681a      	ldr	r2, [r3, #0]
 8015f44:	78fb      	ldrb	r3, [r7, #3]
 8015f46:	011b      	lsls	r3, r3, #4
 8015f48:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015f4c:	68f9      	ldr	r1, [r7, #12]
 8015f4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015f52:	4313      	orrs	r3, r2
 8015f54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3714      	adds	r7, #20
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b085      	sub	sp, #20
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	68fa      	ldr	r2, [r7, #12]
 8015f7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015f7e:	f023 0303 	bic.w	r3, r3, #3
 8015f82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	68fa      	ldr	r2, [r7, #12]
 8015f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015f92:	f023 0302 	bic.w	r3, r3, #2
 8015f96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015f98:	2300      	movs	r3, #0
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3714      	adds	r7, #20
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa4:	4770      	bx	lr

08015fa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015fa6:	b480      	push	{r7}
 8015fa8:	b085      	sub	sp, #20
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	68fa      	ldr	r2, [r7, #12]
 8015fbc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015fc0:	f023 0303 	bic.w	r3, r3, #3
 8015fc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015fd4:	f043 0302 	orr.w	r3, r3, #2
 8015fd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015fda:	2300      	movs	r3, #0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3714      	adds	r7, #20
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr

08015fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	695b      	ldr	r3, [r3, #20]
 8015ff4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	699b      	ldr	r3, [r3, #24]
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	4013      	ands	r3, r2
 8015ffe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016000:	68fb      	ldr	r3, [r7, #12]
}
 8016002:	4618      	mov	r0, r3
 8016004:	3714      	adds	r7, #20
 8016006:	46bd      	mov	sp, r7
 8016008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600c:	4770      	bx	lr

0801600e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801600e:	b480      	push	{r7}
 8016010:	b085      	sub	sp, #20
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016020:	699b      	ldr	r3, [r3, #24]
 8016022:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801602a:	69db      	ldr	r3, [r3, #28]
 801602c:	68ba      	ldr	r2, [r7, #8]
 801602e:	4013      	ands	r3, r2
 8016030:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	0c1b      	lsrs	r3, r3, #16
}
 8016036:	4618      	mov	r0, r3
 8016038:	3714      	adds	r7, #20
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr

08016042 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8016042:	b480      	push	{r7}
 8016044:	b085      	sub	sp, #20
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016054:	699b      	ldr	r3, [r3, #24]
 8016056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801605e:	69db      	ldr	r3, [r3, #28]
 8016060:	68ba      	ldr	r2, [r7, #8]
 8016062:	4013      	ands	r3, r2
 8016064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	b29b      	uxth	r3, r3
}
 801606a:	4618      	mov	r0, r3
 801606c:	3714      	adds	r7, #20
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr

08016076 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016076:	b480      	push	{r7}
 8016078:	b085      	sub	sp, #20
 801607a:	af00      	add	r7, sp, #0
 801607c:	6078      	str	r0, [r7, #4]
 801607e:	460b      	mov	r3, r1
 8016080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016086:	78fb      	ldrb	r3, [r7, #3]
 8016088:	015a      	lsls	r2, r3, #5
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	4413      	add	r3, r2
 801608e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016092:	689b      	ldr	r3, [r3, #8]
 8016094:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801609c:	695b      	ldr	r3, [r3, #20]
 801609e:	68ba      	ldr	r2, [r7, #8]
 80160a0:	4013      	ands	r3, r2
 80160a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80160a4:	68bb      	ldr	r3, [r7, #8]
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3714      	adds	r7, #20
 80160aa:	46bd      	mov	sp, r7
 80160ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b0:	4770      	bx	lr

080160b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80160b2:	b480      	push	{r7}
 80160b4:	b087      	sub	sp, #28
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
 80160ba:	460b      	mov	r3, r1
 80160bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80160c8:	691b      	ldr	r3, [r3, #16]
 80160ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80160d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80160d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80160d6:	78fb      	ldrb	r3, [r7, #3]
 80160d8:	f003 030f 	and.w	r3, r3, #15
 80160dc:	68fa      	ldr	r2, [r7, #12]
 80160de:	fa22 f303 	lsr.w	r3, r2, r3
 80160e2:	01db      	lsls	r3, r3, #7
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	693a      	ldr	r2, [r7, #16]
 80160e8:	4313      	orrs	r3, r2
 80160ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80160ec:	78fb      	ldrb	r3, [r7, #3]
 80160ee:	015a      	lsls	r2, r3, #5
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	4413      	add	r3, r2
 80160f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	693a      	ldr	r2, [r7, #16]
 80160fc:	4013      	ands	r3, r2
 80160fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016100:	68bb      	ldr	r3, [r7, #8]
}
 8016102:	4618      	mov	r0, r3
 8016104:	371c      	adds	r7, #28
 8016106:	46bd      	mov	sp, r7
 8016108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610c:	4770      	bx	lr

0801610e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801610e:	b480      	push	{r7}
 8016110:	b083      	sub	sp, #12
 8016112:	af00      	add	r7, sp, #0
 8016114:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	695b      	ldr	r3, [r3, #20]
 801611a:	f003 0301 	and.w	r3, r3, #1
}
 801611e:	4618      	mov	r0, r3
 8016120:	370c      	adds	r7, #12
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
	...

0801612c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801612c:	b480      	push	{r7}
 801612e:	b085      	sub	sp, #20
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801613e:	681a      	ldr	r2, [r3, #0]
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016146:	4619      	mov	r1, r3
 8016148:	4b09      	ldr	r3, [pc, #36]	@ (8016170 <USB_ActivateSetup+0x44>)
 801614a:	4013      	ands	r3, r2
 801614c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	68fa      	ldr	r2, [r7, #12]
 8016158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016162:	2300      	movs	r3, #0
}
 8016164:	4618      	mov	r0, r3
 8016166:	3714      	adds	r7, #20
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr
 8016170:	fffff800 	.word	0xfffff800

08016174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8016174:	b480      	push	{r7}
 8016176:	b087      	sub	sp, #28
 8016178:	af00      	add	r7, sp, #0
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	460b      	mov	r3, r1
 801617e:	607a      	str	r2, [r7, #4]
 8016180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	333c      	adds	r3, #60	@ 0x3c
 801618a:	3304      	adds	r3, #4
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	4a26      	ldr	r2, [pc, #152]	@ (801622c <USB_EP0_OutStart+0xb8>)
 8016194:	4293      	cmp	r3, r2
 8016196:	d90a      	bls.n	80161ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80161a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80161a8:	d101      	bne.n	80161ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80161aa:	2300      	movs	r3, #0
 80161ac:	e037      	b.n	801621e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161b4:	461a      	mov	r2, r3
 80161b6:	2300      	movs	r3, #0
 80161b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161c0:	691b      	ldr	r3, [r3, #16]
 80161c2:	697a      	ldr	r2, [r7, #20]
 80161c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80161c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80161cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161d4:	691b      	ldr	r3, [r3, #16]
 80161d6:	697a      	ldr	r2, [r7, #20]
 80161d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80161dc:	f043 0318 	orr.w	r3, r3, #24
 80161e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161e8:	691b      	ldr	r3, [r3, #16]
 80161ea:	697a      	ldr	r2, [r7, #20]
 80161ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80161f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80161f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80161f6:	7afb      	ldrb	r3, [r7, #11]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d10f      	bne.n	801621c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016202:	461a      	mov	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	697a      	ldr	r2, [r7, #20]
 8016212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016216:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801621a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801621c:	2300      	movs	r3, #0
}
 801621e:	4618      	mov	r0, r3
 8016220:	371c      	adds	r7, #28
 8016222:	46bd      	mov	sp, r7
 8016224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	4f54300a 	.word	0x4f54300a

08016230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016230:	b480      	push	{r7}
 8016232:	b085      	sub	sp, #20
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016238:	2300      	movs	r3, #0
 801623a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	3301      	adds	r3, #1
 8016240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016248:	d901      	bls.n	801624e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801624a:	2303      	movs	r3, #3
 801624c:	e01b      	b.n	8016286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	691b      	ldr	r3, [r3, #16]
 8016252:	2b00      	cmp	r3, #0
 8016254:	daf2      	bge.n	801623c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016256:	2300      	movs	r3, #0
 8016258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	691b      	ldr	r3, [r3, #16]
 801625e:	f043 0201 	orr.w	r2, r3, #1
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	3301      	adds	r3, #1
 801626a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016272:	d901      	bls.n	8016278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016274:	2303      	movs	r3, #3
 8016276:	e006      	b.n	8016286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	691b      	ldr	r3, [r3, #16]
 801627c:	f003 0301 	and.w	r3, r3, #1
 8016280:	2b01      	cmp	r3, #1
 8016282:	d0f0      	beq.n	8016266 <USB_CoreReset+0x36>

  return HAL_OK;
 8016284:	2300      	movs	r3, #0
}
 8016286:	4618      	mov	r0, r3
 8016288:	3714      	adds	r7, #20
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr
	...

08016294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	460b      	mov	r3, r1
 801629e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80162a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80162a4:	f002 fcca 	bl	8018c3c <USBD_static_malloc>
 80162a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d109      	bne.n	80162c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	32b0      	adds	r2, #176	@ 0xb0
 80162ba:	2100      	movs	r1, #0
 80162bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80162c0:	2302      	movs	r3, #2
 80162c2:	e0d4      	b.n	801646e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80162c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80162c8:	2100      	movs	r1, #0
 80162ca:	68f8      	ldr	r0, [r7, #12]
 80162cc:	f004 f89d 	bl	801a40a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	32b0      	adds	r2, #176	@ 0xb0
 80162da:	68f9      	ldr	r1, [r7, #12]
 80162dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	32b0      	adds	r2, #176	@ 0xb0
 80162ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	7c1b      	ldrb	r3, [r3, #16]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d138      	bne.n	801636e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80162fc:	4b5e      	ldr	r3, [pc, #376]	@ (8016478 <USBD_CDC_Init+0x1e4>)
 80162fe:	7819      	ldrb	r1, [r3, #0]
 8016300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016304:	2202      	movs	r2, #2
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f002 fb75 	bl	80189f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801630c:	4b5a      	ldr	r3, [pc, #360]	@ (8016478 <USBD_CDC_Init+0x1e4>)
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	f003 020f 	and.w	r2, r3, #15
 8016314:	6879      	ldr	r1, [r7, #4]
 8016316:	4613      	mov	r3, r2
 8016318:	009b      	lsls	r3, r3, #2
 801631a:	4413      	add	r3, r2
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	440b      	add	r3, r1
 8016320:	3324      	adds	r3, #36	@ 0x24
 8016322:	2201      	movs	r2, #1
 8016324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016326:	4b55      	ldr	r3, [pc, #340]	@ (801647c <USBD_CDC_Init+0x1e8>)
 8016328:	7819      	ldrb	r1, [r3, #0]
 801632a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801632e:	2202      	movs	r2, #2
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f002 fb60 	bl	80189f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016336:	4b51      	ldr	r3, [pc, #324]	@ (801647c <USBD_CDC_Init+0x1e8>)
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	f003 020f 	and.w	r2, r3, #15
 801633e:	6879      	ldr	r1, [r7, #4]
 8016340:	4613      	mov	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4413      	add	r3, r2
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	440b      	add	r3, r1
 801634a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801634e:	2201      	movs	r2, #1
 8016350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016352:	4b4b      	ldr	r3, [pc, #300]	@ (8016480 <USBD_CDC_Init+0x1ec>)
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	f003 020f 	and.w	r2, r3, #15
 801635a:	6879      	ldr	r1, [r7, #4]
 801635c:	4613      	mov	r3, r2
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	4413      	add	r3, r2
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	440b      	add	r3, r1
 8016366:	3326      	adds	r3, #38	@ 0x26
 8016368:	2210      	movs	r2, #16
 801636a:	801a      	strh	r2, [r3, #0]
 801636c:	e035      	b.n	80163da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801636e:	4b42      	ldr	r3, [pc, #264]	@ (8016478 <USBD_CDC_Init+0x1e4>)
 8016370:	7819      	ldrb	r1, [r3, #0]
 8016372:	2340      	movs	r3, #64	@ 0x40
 8016374:	2202      	movs	r2, #2
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f002 fb3d 	bl	80189f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801637c:	4b3e      	ldr	r3, [pc, #248]	@ (8016478 <USBD_CDC_Init+0x1e4>)
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	f003 020f 	and.w	r2, r3, #15
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	4613      	mov	r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	4413      	add	r3, r2
 801638c:	009b      	lsls	r3, r3, #2
 801638e:	440b      	add	r3, r1
 8016390:	3324      	adds	r3, #36	@ 0x24
 8016392:	2201      	movs	r2, #1
 8016394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016396:	4b39      	ldr	r3, [pc, #228]	@ (801647c <USBD_CDC_Init+0x1e8>)
 8016398:	7819      	ldrb	r1, [r3, #0]
 801639a:	2340      	movs	r3, #64	@ 0x40
 801639c:	2202      	movs	r2, #2
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f002 fb29 	bl	80189f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80163a4:	4b35      	ldr	r3, [pc, #212]	@ (801647c <USBD_CDC_Init+0x1e8>)
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	f003 020f 	and.w	r2, r3, #15
 80163ac:	6879      	ldr	r1, [r7, #4]
 80163ae:	4613      	mov	r3, r2
 80163b0:	009b      	lsls	r3, r3, #2
 80163b2:	4413      	add	r3, r2
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	440b      	add	r3, r1
 80163b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80163bc:	2201      	movs	r2, #1
 80163be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80163c0:	4b2f      	ldr	r3, [pc, #188]	@ (8016480 <USBD_CDC_Init+0x1ec>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 020f 	and.w	r2, r3, #15
 80163c8:	6879      	ldr	r1, [r7, #4]
 80163ca:	4613      	mov	r3, r2
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	4413      	add	r3, r2
 80163d0:	009b      	lsls	r3, r3, #2
 80163d2:	440b      	add	r3, r1
 80163d4:	3326      	adds	r3, #38	@ 0x26
 80163d6:	2210      	movs	r2, #16
 80163d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80163da:	4b29      	ldr	r3, [pc, #164]	@ (8016480 <USBD_CDC_Init+0x1ec>)
 80163dc:	7819      	ldrb	r1, [r3, #0]
 80163de:	2308      	movs	r3, #8
 80163e0:	2203      	movs	r2, #3
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f002 fb07 	bl	80189f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80163e8:	4b25      	ldr	r3, [pc, #148]	@ (8016480 <USBD_CDC_Init+0x1ec>)
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	f003 020f 	and.w	r2, r3, #15
 80163f0:	6879      	ldr	r1, [r7, #4]
 80163f2:	4613      	mov	r3, r2
 80163f4:	009b      	lsls	r3, r3, #2
 80163f6:	4413      	add	r3, r2
 80163f8:	009b      	lsls	r3, r3, #2
 80163fa:	440b      	add	r3, r1
 80163fc:	3324      	adds	r3, #36	@ 0x24
 80163fe:	2201      	movs	r2, #1
 8016400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2200      	movs	r2, #0
 8016406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	33b0      	adds	r3, #176	@ 0xb0
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	4413      	add	r3, r2
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2200      	movs	r2, #0
 8016422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2200      	movs	r2, #0
 801642a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8016434:	2b00      	cmp	r3, #0
 8016436:	d101      	bne.n	801643c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8016438:	2302      	movs	r3, #2
 801643a:	e018      	b.n	801646e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	7c1b      	ldrb	r3, [r3, #16]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d10a      	bne.n	801645a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016444:	4b0d      	ldr	r3, [pc, #52]	@ (801647c <USBD_CDC_Init+0x1e8>)
 8016446:	7819      	ldrb	r1, [r3, #0]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801644e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f002 fbbe 	bl	8018bd4 <USBD_LL_PrepareReceive>
 8016458:	e008      	b.n	801646c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801645a:	4b08      	ldr	r3, [pc, #32]	@ (801647c <USBD_CDC_Init+0x1e8>)
 801645c:	7819      	ldrb	r1, [r3, #0]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016464:	2340      	movs	r3, #64	@ 0x40
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f002 fbb4 	bl	8018bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801646c:	2300      	movs	r3, #0
}
 801646e:	4618      	mov	r0, r3
 8016470:	3710      	adds	r7, #16
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}
 8016476:	bf00      	nop
 8016478:	240000c7 	.word	0x240000c7
 801647c:	240000c8 	.word	0x240000c8
 8016480:	240000c9 	.word	0x240000c9

08016484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	460b      	mov	r3, r1
 801648e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016490:	4b3a      	ldr	r3, [pc, #232]	@ (801657c <USBD_CDC_DeInit+0xf8>)
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	4619      	mov	r1, r3
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f002 fad3 	bl	8018a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801649c:	4b37      	ldr	r3, [pc, #220]	@ (801657c <USBD_CDC_DeInit+0xf8>)
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	f003 020f 	and.w	r2, r3, #15
 80164a4:	6879      	ldr	r1, [r7, #4]
 80164a6:	4613      	mov	r3, r2
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	4413      	add	r3, r2
 80164ac:	009b      	lsls	r3, r3, #2
 80164ae:	440b      	add	r3, r1
 80164b0:	3324      	adds	r3, #36	@ 0x24
 80164b2:	2200      	movs	r2, #0
 80164b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80164b6:	4b32      	ldr	r3, [pc, #200]	@ (8016580 <USBD_CDC_DeInit+0xfc>)
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	4619      	mov	r1, r3
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f002 fac0 	bl	8018a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80164c2:	4b2f      	ldr	r3, [pc, #188]	@ (8016580 <USBD_CDC_DeInit+0xfc>)
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	f003 020f 	and.w	r2, r3, #15
 80164ca:	6879      	ldr	r1, [r7, #4]
 80164cc:	4613      	mov	r3, r2
 80164ce:	009b      	lsls	r3, r3, #2
 80164d0:	4413      	add	r3, r2
 80164d2:	009b      	lsls	r3, r3, #2
 80164d4:	440b      	add	r3, r1
 80164d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80164da:	2200      	movs	r2, #0
 80164dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80164de:	4b29      	ldr	r3, [pc, #164]	@ (8016584 <USBD_CDC_DeInit+0x100>)
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	4619      	mov	r1, r3
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f002 faac 	bl	8018a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80164ea:	4b26      	ldr	r3, [pc, #152]	@ (8016584 <USBD_CDC_DeInit+0x100>)
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	f003 020f 	and.w	r2, r3, #15
 80164f2:	6879      	ldr	r1, [r7, #4]
 80164f4:	4613      	mov	r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	4413      	add	r3, r2
 80164fa:	009b      	lsls	r3, r3, #2
 80164fc:	440b      	add	r3, r1
 80164fe:	3324      	adds	r3, #36	@ 0x24
 8016500:	2200      	movs	r2, #0
 8016502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8016504:	4b1f      	ldr	r3, [pc, #124]	@ (8016584 <USBD_CDC_DeInit+0x100>)
 8016506:	781b      	ldrb	r3, [r3, #0]
 8016508:	f003 020f 	and.w	r2, r3, #15
 801650c:	6879      	ldr	r1, [r7, #4]
 801650e:	4613      	mov	r3, r2
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4413      	add	r3, r2
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	440b      	add	r3, r1
 8016518:	3326      	adds	r3, #38	@ 0x26
 801651a:	2200      	movs	r2, #0
 801651c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	32b0      	adds	r2, #176	@ 0xb0
 8016528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d01f      	beq.n	8016570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	33b0      	adds	r3, #176	@ 0xb0
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	4413      	add	r3, r2
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	32b0      	adds	r2, #176	@ 0xb0
 801654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016552:	4618      	mov	r0, r3
 8016554:	f002 fb80 	bl	8018c58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	32b0      	adds	r2, #176	@ 0xb0
 8016562:	2100      	movs	r1, #0
 8016564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2200      	movs	r2, #0
 801656c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016570:	2300      	movs	r3, #0
}
 8016572:	4618      	mov	r0, r3
 8016574:	3708      	adds	r7, #8
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	240000c7 	.word	0x240000c7
 8016580:	240000c8 	.word	0x240000c8
 8016584:	240000c9 	.word	0x240000c9

08016588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b086      	sub	sp, #24
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	32b0      	adds	r2, #176	@ 0xb0
 801659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80165a2:	2300      	movs	r3, #0
 80165a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80165a6:	2300      	movs	r3, #0
 80165a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80165aa:	2300      	movs	r3, #0
 80165ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d101      	bne.n	80165b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80165b4:	2303      	movs	r3, #3
 80165b6:	e0bf      	b.n	8016738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d050      	beq.n	8016666 <USBD_CDC_Setup+0xde>
 80165c4:	2b20      	cmp	r3, #32
 80165c6:	f040 80af 	bne.w	8016728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	88db      	ldrh	r3, [r3, #6]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d03a      	beq.n	8016648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	b25b      	sxtb	r3, r3
 80165d8:	2b00      	cmp	r3, #0
 80165da:	da1b      	bge.n	8016614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	33b0      	adds	r3, #176	@ 0xb0
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	4413      	add	r3, r2
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	689b      	ldr	r3, [r3, #8]
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80165f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80165f4:	683a      	ldr	r2, [r7, #0]
 80165f6:	88d2      	ldrh	r2, [r2, #6]
 80165f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	88db      	ldrh	r3, [r3, #6]
 80165fe:	2b07      	cmp	r3, #7
 8016600:	bf28      	it	cs
 8016602:	2307      	movcs	r3, #7
 8016604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	89fa      	ldrh	r2, [r7, #14]
 801660a:	4619      	mov	r1, r3
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f001 fdbd 	bl	801818c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016612:	e090      	b.n	8016736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	785a      	ldrb	r2, [r3, #1]
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	88db      	ldrh	r3, [r3, #6]
 8016622:	2b3f      	cmp	r3, #63	@ 0x3f
 8016624:	d803      	bhi.n	801662e <USBD_CDC_Setup+0xa6>
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	88db      	ldrh	r3, [r3, #6]
 801662a:	b2da      	uxtb	r2, r3
 801662c:	e000      	b.n	8016630 <USBD_CDC_Setup+0xa8>
 801662e:	2240      	movs	r2, #64	@ 0x40
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016636:	6939      	ldr	r1, [r7, #16]
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801663e:	461a      	mov	r2, r3
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f001 fdcf 	bl	80181e4 <USBD_CtlPrepareRx>
      break;
 8016646:	e076      	b.n	8016736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	33b0      	adds	r3, #176	@ 0xb0
 8016652:	009b      	lsls	r3, r3, #2
 8016654:	4413      	add	r3, r2
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	689b      	ldr	r3, [r3, #8]
 801665a:	683a      	ldr	r2, [r7, #0]
 801665c:	7850      	ldrb	r0, [r2, #1]
 801665e:	2200      	movs	r2, #0
 8016660:	6839      	ldr	r1, [r7, #0]
 8016662:	4798      	blx	r3
      break;
 8016664:	e067      	b.n	8016736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	785b      	ldrb	r3, [r3, #1]
 801666a:	2b0b      	cmp	r3, #11
 801666c:	d851      	bhi.n	8016712 <USBD_CDC_Setup+0x18a>
 801666e:	a201      	add	r2, pc, #4	@ (adr r2, 8016674 <USBD_CDC_Setup+0xec>)
 8016670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016674:	080166a5 	.word	0x080166a5
 8016678:	08016721 	.word	0x08016721
 801667c:	08016713 	.word	0x08016713
 8016680:	08016713 	.word	0x08016713
 8016684:	08016713 	.word	0x08016713
 8016688:	08016713 	.word	0x08016713
 801668c:	08016713 	.word	0x08016713
 8016690:	08016713 	.word	0x08016713
 8016694:	08016713 	.word	0x08016713
 8016698:	08016713 	.word	0x08016713
 801669c:	080166cf 	.word	0x080166cf
 80166a0:	080166f9 	.word	0x080166f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	2b03      	cmp	r3, #3
 80166ae:	d107      	bne.n	80166c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80166b0:	f107 030a 	add.w	r3, r7, #10
 80166b4:	2202      	movs	r2, #2
 80166b6:	4619      	mov	r1, r3
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f001 fd67 	bl	801818c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80166be:	e032      	b.n	8016726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80166c0:	6839      	ldr	r1, [r7, #0]
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f001 fce5 	bl	8018092 <USBD_CtlError>
            ret = USBD_FAIL;
 80166c8:	2303      	movs	r3, #3
 80166ca:	75fb      	strb	r3, [r7, #23]
          break;
 80166cc:	e02b      	b.n	8016726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b03      	cmp	r3, #3
 80166d8:	d107      	bne.n	80166ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80166da:	f107 030d 	add.w	r3, r7, #13
 80166de:	2201      	movs	r2, #1
 80166e0:	4619      	mov	r1, r3
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f001 fd52 	bl	801818c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80166e8:	e01d      	b.n	8016726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80166ea:	6839      	ldr	r1, [r7, #0]
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f001 fcd0 	bl	8018092 <USBD_CtlError>
            ret = USBD_FAIL;
 80166f2:	2303      	movs	r3, #3
 80166f4:	75fb      	strb	r3, [r7, #23]
          break;
 80166f6:	e016      	b.n	8016726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	2b03      	cmp	r3, #3
 8016702:	d00f      	beq.n	8016724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016704:	6839      	ldr	r1, [r7, #0]
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f001 fcc3 	bl	8018092 <USBD_CtlError>
            ret = USBD_FAIL;
 801670c:	2303      	movs	r3, #3
 801670e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016710:	e008      	b.n	8016724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016712:	6839      	ldr	r1, [r7, #0]
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f001 fcbc 	bl	8018092 <USBD_CtlError>
          ret = USBD_FAIL;
 801671a:	2303      	movs	r3, #3
 801671c:	75fb      	strb	r3, [r7, #23]
          break;
 801671e:	e002      	b.n	8016726 <USBD_CDC_Setup+0x19e>
          break;
 8016720:	bf00      	nop
 8016722:	e008      	b.n	8016736 <USBD_CDC_Setup+0x1ae>
          break;
 8016724:	bf00      	nop
      }
      break;
 8016726:	e006      	b.n	8016736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f001 fcb1 	bl	8018092 <USBD_CtlError>
      ret = USBD_FAIL;
 8016730:	2303      	movs	r3, #3
 8016732:	75fb      	strb	r3, [r7, #23]
      break;
 8016734:	bf00      	nop
  }

  return (uint8_t)ret;
 8016736:	7dfb      	ldrb	r3, [r7, #23]
}
 8016738:	4618      	mov	r0, r3
 801673a:	3718      	adds	r7, #24
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	460b      	mov	r3, r1
 801674a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	32b0      	adds	r2, #176	@ 0xb0
 801675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d101      	bne.n	801676a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016766:	2303      	movs	r3, #3
 8016768:	e065      	b.n	8016836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	32b0      	adds	r2, #176	@ 0xb0
 8016774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801677a:	78fb      	ldrb	r3, [r7, #3]
 801677c:	f003 020f 	and.w	r2, r3, #15
 8016780:	6879      	ldr	r1, [r7, #4]
 8016782:	4613      	mov	r3, r2
 8016784:	009b      	lsls	r3, r3, #2
 8016786:	4413      	add	r3, r2
 8016788:	009b      	lsls	r3, r3, #2
 801678a:	440b      	add	r3, r1
 801678c:	3318      	adds	r3, #24
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d02f      	beq.n	80167f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016794:	78fb      	ldrb	r3, [r7, #3]
 8016796:	f003 020f 	and.w	r2, r3, #15
 801679a:	6879      	ldr	r1, [r7, #4]
 801679c:	4613      	mov	r3, r2
 801679e:	009b      	lsls	r3, r3, #2
 80167a0:	4413      	add	r3, r2
 80167a2:	009b      	lsls	r3, r3, #2
 80167a4:	440b      	add	r3, r1
 80167a6:	3318      	adds	r3, #24
 80167a8:	681a      	ldr	r2, [r3, #0]
 80167aa:	78fb      	ldrb	r3, [r7, #3]
 80167ac:	f003 010f 	and.w	r1, r3, #15
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	460b      	mov	r3, r1
 80167b4:	00db      	lsls	r3, r3, #3
 80167b6:	440b      	add	r3, r1
 80167b8:	009b      	lsls	r3, r3, #2
 80167ba:	4403      	add	r3, r0
 80167bc:	331c      	adds	r3, #28
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80167c4:	fb01 f303 	mul.w	r3, r1, r3
 80167c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d112      	bne.n	80167f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80167ce:	78fb      	ldrb	r3, [r7, #3]
 80167d0:	f003 020f 	and.w	r2, r3, #15
 80167d4:	6879      	ldr	r1, [r7, #4]
 80167d6:	4613      	mov	r3, r2
 80167d8:	009b      	lsls	r3, r3, #2
 80167da:	4413      	add	r3, r2
 80167dc:	009b      	lsls	r3, r3, #2
 80167de:	440b      	add	r3, r1
 80167e0:	3318      	adds	r3, #24
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80167e6:	78f9      	ldrb	r1, [r7, #3]
 80167e8:	2300      	movs	r3, #0
 80167ea:	2200      	movs	r2, #0
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f002 f9d0 	bl	8018b92 <USBD_LL_Transmit>
 80167f2:	e01f      	b.n	8016834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	2200      	movs	r2, #0
 80167f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	33b0      	adds	r3, #176	@ 0xb0
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	4413      	add	r3, r2
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	691b      	ldr	r3, [r3, #16]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d010      	beq.n	8016834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	33b0      	adds	r3, #176	@ 0xb0
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	4413      	add	r3, r2
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	691b      	ldr	r3, [r3, #16]
 8016824:	68ba      	ldr	r2, [r7, #8]
 8016826:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801682a:	68ba      	ldr	r2, [r7, #8]
 801682c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016830:	78fa      	ldrb	r2, [r7, #3]
 8016832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016834:	2300      	movs	r3, #0
}
 8016836:	4618      	mov	r0, r3
 8016838:	3710      	adds	r7, #16
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}

0801683e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801683e:	b580      	push	{r7, lr}
 8016840:	b084      	sub	sp, #16
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]
 8016846:	460b      	mov	r3, r1
 8016848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	32b0      	adds	r2, #176	@ 0xb0
 8016854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	32b0      	adds	r2, #176	@ 0xb0
 8016864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d101      	bne.n	8016870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801686c:	2303      	movs	r3, #3
 801686e:	e01a      	b.n	80168a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016870:	78fb      	ldrb	r3, [r7, #3]
 8016872:	4619      	mov	r1, r3
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	f002 f9ce 	bl	8018c16 <USBD_LL_GetRxDataSize>
 801687a:	4602      	mov	r2, r0
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	33b0      	adds	r3, #176	@ 0xb0
 801688c:	009b      	lsls	r3, r3, #2
 801688e:	4413      	add	r3, r2
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	68db      	ldr	r3, [r3, #12]
 8016894:	68fa      	ldr	r2, [r7, #12]
 8016896:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801689a:	68fa      	ldr	r2, [r7, #12]
 801689c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80168a0:	4611      	mov	r1, r2
 80168a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80168a4:	2300      	movs	r3, #0
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3710      	adds	r7, #16
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b084      	sub	sp, #16
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	32b0      	adds	r2, #176	@ 0xb0
 80168c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d101      	bne.n	80168d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80168cc:	2303      	movs	r3, #3
 80168ce:	e024      	b.n	801691a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80168d6:	687a      	ldr	r2, [r7, #4]
 80168d8:	33b0      	adds	r3, #176	@ 0xb0
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	4413      	add	r3, r2
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d019      	beq.n	8016918 <USBD_CDC_EP0_RxReady+0x6a>
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80168ea:	2bff      	cmp	r3, #255	@ 0xff
 80168ec:	d014      	beq.n	8016918 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	33b0      	adds	r3, #176	@ 0xb0
 80168f8:	009b      	lsls	r3, r3, #2
 80168fa:	4413      	add	r3, r2
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	689b      	ldr	r3, [r3, #8]
 8016900:	68fa      	ldr	r2, [r7, #12]
 8016902:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016908:	68fa      	ldr	r2, [r7, #12]
 801690a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801690e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	22ff      	movs	r2, #255	@ 0xff
 8016914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016918:	2300      	movs	r3, #0
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
	...

08016924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b086      	sub	sp, #24
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801692c:	2182      	movs	r1, #130	@ 0x82
 801692e:	4818      	ldr	r0, [pc, #96]	@ (8016990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016930:	f000 fd4f 	bl	80173d2 <USBD_GetEpDesc>
 8016934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016936:	2101      	movs	r1, #1
 8016938:	4815      	ldr	r0, [pc, #84]	@ (8016990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801693a:	f000 fd4a 	bl	80173d2 <USBD_GetEpDesc>
 801693e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016940:	2181      	movs	r1, #129	@ 0x81
 8016942:	4813      	ldr	r0, [pc, #76]	@ (8016990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016944:	f000 fd45 	bl	80173d2 <USBD_GetEpDesc>
 8016948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d002      	beq.n	8016956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	2210      	movs	r2, #16
 8016954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d006      	beq.n	801696a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	2200      	movs	r2, #0
 8016960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016964:	711a      	strb	r2, [r3, #4]
 8016966:	2200      	movs	r2, #0
 8016968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d006      	beq.n	801697e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2200      	movs	r2, #0
 8016974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016978:	711a      	strb	r2, [r3, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2243      	movs	r2, #67	@ 0x43
 8016982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016984:	4b02      	ldr	r3, [pc, #8]	@ (8016990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016986:	4618      	mov	r0, r3
 8016988:	3718      	adds	r7, #24
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	24000084 	.word	0x24000084

08016994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b086      	sub	sp, #24
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801699c:	2182      	movs	r1, #130	@ 0x82
 801699e:	4818      	ldr	r0, [pc, #96]	@ (8016a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80169a0:	f000 fd17 	bl	80173d2 <USBD_GetEpDesc>
 80169a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80169a6:	2101      	movs	r1, #1
 80169a8:	4815      	ldr	r0, [pc, #84]	@ (8016a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80169aa:	f000 fd12 	bl	80173d2 <USBD_GetEpDesc>
 80169ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80169b0:	2181      	movs	r1, #129	@ 0x81
 80169b2:	4813      	ldr	r0, [pc, #76]	@ (8016a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80169b4:	f000 fd0d 	bl	80173d2 <USBD_GetEpDesc>
 80169b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d002      	beq.n	80169c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	2210      	movs	r2, #16
 80169c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d006      	beq.n	80169da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	2200      	movs	r2, #0
 80169d0:	711a      	strb	r2, [r3, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	f042 0202 	orr.w	r2, r2, #2
 80169d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d006      	beq.n	80169ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	2200      	movs	r2, #0
 80169e4:	711a      	strb	r2, [r3, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f042 0202 	orr.w	r2, r2, #2
 80169ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2243      	movs	r2, #67	@ 0x43
 80169f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80169f4:	4b02      	ldr	r3, [pc, #8]	@ (8016a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3718      	adds	r7, #24
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}
 80169fe:	bf00      	nop
 8016a00:	24000084 	.word	0x24000084

08016a04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016a0c:	2182      	movs	r1, #130	@ 0x82
 8016a0e:	4818      	ldr	r0, [pc, #96]	@ (8016a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016a10:	f000 fcdf 	bl	80173d2 <USBD_GetEpDesc>
 8016a14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016a16:	2101      	movs	r1, #1
 8016a18:	4815      	ldr	r0, [pc, #84]	@ (8016a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016a1a:	f000 fcda 	bl	80173d2 <USBD_GetEpDesc>
 8016a1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016a20:	2181      	movs	r1, #129	@ 0x81
 8016a22:	4813      	ldr	r0, [pc, #76]	@ (8016a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016a24:	f000 fcd5 	bl	80173d2 <USBD_GetEpDesc>
 8016a28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d002      	beq.n	8016a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	2210      	movs	r2, #16
 8016a34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d006      	beq.n	8016a4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016a44:	711a      	strb	r2, [r3, #4]
 8016a46:	2200      	movs	r2, #0
 8016a48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d006      	beq.n	8016a5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	2200      	movs	r2, #0
 8016a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016a58:	711a      	strb	r2, [r3, #4]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2243      	movs	r2, #67	@ 0x43
 8016a62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016a64:	4b02      	ldr	r3, [pc, #8]	@ (8016a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016a66:	4618      	mov	r0, r3
 8016a68:	3718      	adds	r7, #24
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}
 8016a6e:	bf00      	nop
 8016a70:	24000084 	.word	0x24000084

08016a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016a74:	b480      	push	{r7}
 8016a76:	b083      	sub	sp, #12
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	220a      	movs	r2, #10
 8016a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016a82:	4b03      	ldr	r3, [pc, #12]	@ (8016a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr
 8016a90:	24000040 	.word	0x24000040

08016a94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016a94:	b480      	push	{r7}
 8016a96:	b083      	sub	sp, #12
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016aa4:	2303      	movs	r3, #3
 8016aa6:	e009      	b.n	8016abc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	33b0      	adds	r3, #176	@ 0xb0
 8016ab2:	009b      	lsls	r3, r3, #2
 8016ab4:	4413      	add	r3, r2
 8016ab6:	683a      	ldr	r2, [r7, #0]
 8016ab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016aba:	2300      	movs	r3, #0
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b087      	sub	sp, #28
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	60b9      	str	r1, [r7, #8]
 8016ad2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	32b0      	adds	r2, #176	@ 0xb0
 8016ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ae2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d101      	bne.n	8016aee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016aea:	2303      	movs	r3, #3
 8016aec:	e008      	b.n	8016b00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	68ba      	ldr	r2, [r7, #8]
 8016af2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8016afe:	2300      	movs	r3, #0
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	371c      	adds	r7, #28
 8016b04:	46bd      	mov	sp, r7
 8016b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0a:	4770      	bx	lr

08016b0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	b085      	sub	sp, #20
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	32b0      	adds	r2, #176	@ 0xb0
 8016b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d101      	bne.n	8016b30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016b2c:	2303      	movs	r3, #3
 8016b2e:	e004      	b.n	8016b3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	683a      	ldr	r2, [r7, #0]
 8016b34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016b38:	2300      	movs	r3, #0
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3714      	adds	r7, #20
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b44:	4770      	bx	lr
	...

08016b48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	32b0      	adds	r2, #176	@ 0xb0
 8016b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016b60:	2301      	movs	r3, #1
 8016b62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d101      	bne.n	8016b6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016b6a:	2303      	movs	r3, #3
 8016b6c:	e025      	b.n	8016bba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d11f      	bne.n	8016bb8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016b78:	68bb      	ldr	r3, [r7, #8]
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016b80:	4b10      	ldr	r3, [pc, #64]	@ (8016bc4 <USBD_CDC_TransmitPacket+0x7c>)
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	f003 020f 	and.w	r2, r3, #15
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	4613      	mov	r3, r2
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	4413      	add	r3, r2
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	4403      	add	r3, r0
 8016b9a:	3318      	adds	r3, #24
 8016b9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016b9e:	4b09      	ldr	r3, [pc, #36]	@ (8016bc4 <USBD_CDC_TransmitPacket+0x7c>)
 8016ba0:	7819      	ldrb	r1, [r3, #0]
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f001 ffef 	bl	8018b92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	240000c7 	.word	0x240000c7

08016bc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	32b0      	adds	r2, #176	@ 0xb0
 8016bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	32b0      	adds	r2, #176	@ 0xb0
 8016bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d101      	bne.n	8016bf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016bf2:	2303      	movs	r3, #3
 8016bf4:	e018      	b.n	8016c28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	7c1b      	ldrb	r3, [r3, #16]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d10a      	bne.n	8016c14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8016c30 <USBD_CDC_ReceivePacket+0x68>)
 8016c00:	7819      	ldrb	r1, [r3, #0]
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f001 ffe1 	bl	8018bd4 <USBD_LL_PrepareReceive>
 8016c12:	e008      	b.n	8016c26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016c14:	4b06      	ldr	r3, [pc, #24]	@ (8016c30 <USBD_CDC_ReceivePacket+0x68>)
 8016c16:	7819      	ldrb	r1, [r3, #0]
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016c1e:	2340      	movs	r3, #64	@ 0x40
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f001 ffd7 	bl	8018bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016c26:	2300      	movs	r3, #0
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3710      	adds	r7, #16
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	240000c8 	.word	0x240000c8

08016c34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b086      	sub	sp, #24
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	60b9      	str	r1, [r7, #8]
 8016c3e:	4613      	mov	r3, r2
 8016c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d101      	bne.n	8016c4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016c48:	2303      	movs	r3, #3
 8016c4a:	e01f      	b.n	8016c8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2200      	movs	r2, #0
 8016c58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d003      	beq.n	8016c72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	2201      	movs	r2, #1
 8016c76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	79fa      	ldrb	r2, [r7, #7]
 8016c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f001 fe4b 	bl	801891c <USBD_LL_Init>
 8016c86:	4603      	mov	r3, r0
 8016c88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3718      	adds	r7, #24
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b084      	sub	sp, #16
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d101      	bne.n	8016cac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016ca8:	2303      	movs	r3, #3
 8016caa:	e025      	b.n	8016cf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	683a      	ldr	r2, [r7, #0]
 8016cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	32ae      	adds	r2, #174	@ 0xae
 8016cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d00f      	beq.n	8016ce8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	32ae      	adds	r2, #174	@ 0xae
 8016cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cd8:	f107 020e 	add.w	r2, r7, #14
 8016cdc:	4610      	mov	r0, r2
 8016cde:	4798      	blx	r3
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016cee:	1c5a      	adds	r2, r3, #1
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016cf6:	2300      	movs	r3, #0
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3710      	adds	r7, #16
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f001 fe59 	bl	80189c0 <USBD_LL_Start>
 8016d0e:	4603      	mov	r3, r0
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3708      	adds	r7, #8
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b083      	sub	sp, #12
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016d20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016d22:	4618      	mov	r0, r3
 8016d24:	370c      	adds	r7, #12
 8016d26:	46bd      	mov	sp, r7
 8016d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2c:	4770      	bx	lr

08016d2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b084      	sub	sp, #16
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
 8016d36:	460b      	mov	r3, r1
 8016d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d009      	beq.n	8016d5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	78fa      	ldrb	r2, [r7, #3]
 8016d52:	4611      	mov	r1, r2
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	4798      	blx	r3
 8016d58:	4603      	mov	r3, r0
 8016d5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3710      	adds	r7, #16
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b084      	sub	sp, #16
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
 8016d6e:	460b      	mov	r3, r1
 8016d70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d72:	2300      	movs	r3, #0
 8016d74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	78fa      	ldrb	r2, [r7, #3]
 8016d80:	4611      	mov	r1, r2
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	4798      	blx	r3
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016d8c:	2303      	movs	r3, #3
 8016d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	3710      	adds	r7, #16
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b084      	sub	sp, #16
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
 8016da2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016daa:	6839      	ldr	r1, [r7, #0]
 8016dac:	4618      	mov	r0, r3
 8016dae:	f001 f936 	bl	801801e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2201      	movs	r2, #1
 8016db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016dce:	f003 031f 	and.w	r3, r3, #31
 8016dd2:	2b02      	cmp	r3, #2
 8016dd4:	d01a      	beq.n	8016e0c <USBD_LL_SetupStage+0x72>
 8016dd6:	2b02      	cmp	r3, #2
 8016dd8:	d822      	bhi.n	8016e20 <USBD_LL_SetupStage+0x86>
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d002      	beq.n	8016de4 <USBD_LL_SetupStage+0x4a>
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d00a      	beq.n	8016df8 <USBD_LL_SetupStage+0x5e>
 8016de2:	e01d      	b.n	8016e20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016dea:	4619      	mov	r1, r3
 8016dec:	6878      	ldr	r0, [r7, #4]
 8016dee:	f000 fb63 	bl	80174b8 <USBD_StdDevReq>
 8016df2:	4603      	mov	r3, r0
 8016df4:	73fb      	strb	r3, [r7, #15]
      break;
 8016df6:	e020      	b.n	8016e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016dfe:	4619      	mov	r1, r3
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f000 fbcb 	bl	801759c <USBD_StdItfReq>
 8016e06:	4603      	mov	r3, r0
 8016e08:	73fb      	strb	r3, [r7, #15]
      break;
 8016e0a:	e016      	b.n	8016e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016e12:	4619      	mov	r1, r3
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f000 fc2d 	bl	8017674 <USBD_StdEPReq>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8016e1e:	e00c      	b.n	8016e3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016e26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f001 fe26 	bl	8018a80 <USBD_LL_StallEP>
 8016e34:	4603      	mov	r3, r0
 8016e36:	73fb      	strb	r3, [r7, #15]
      break;
 8016e38:	bf00      	nop
  }

  return ret;
 8016e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3710      	adds	r7, #16
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b086      	sub	sp, #24
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	60f8      	str	r0, [r7, #12]
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	607a      	str	r2, [r7, #4]
 8016e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e52:	2300      	movs	r3, #0
 8016e54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016e56:	7afb      	ldrb	r3, [r7, #11]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d16e      	bne.n	8016f3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016e62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016e6a:	2b03      	cmp	r3, #3
 8016e6c:	f040 8098 	bne.w	8016fa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	689a      	ldr	r2, [r3, #8]
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d913      	bls.n	8016ea4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	689a      	ldr	r2, [r3, #8]
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	68db      	ldr	r3, [r3, #12]
 8016e84:	1ad2      	subs	r2, r2, r3
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	68da      	ldr	r2, [r3, #12]
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	689b      	ldr	r3, [r3, #8]
 8016e92:	4293      	cmp	r3, r2
 8016e94:	bf28      	it	cs
 8016e96:	4613      	movcs	r3, r2
 8016e98:	461a      	mov	r2, r3
 8016e9a:	6879      	ldr	r1, [r7, #4]
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f001 f9be 	bl	801821e <USBD_CtlContinueRx>
 8016ea2:	e07d      	b.n	8016fa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016eaa:	f003 031f 	and.w	r3, r3, #31
 8016eae:	2b02      	cmp	r3, #2
 8016eb0:	d014      	beq.n	8016edc <USBD_LL_DataOutStage+0x98>
 8016eb2:	2b02      	cmp	r3, #2
 8016eb4:	d81d      	bhi.n	8016ef2 <USBD_LL_DataOutStage+0xae>
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d002      	beq.n	8016ec0 <USBD_LL_DataOutStage+0x7c>
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d003      	beq.n	8016ec6 <USBD_LL_DataOutStage+0x82>
 8016ebe:	e018      	b.n	8016ef2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8016ec4:	e018      	b.n	8016ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	4619      	mov	r1, r3
 8016ed0:	68f8      	ldr	r0, [r7, #12]
 8016ed2:	f000 fa64 	bl	801739e <USBD_CoreFindIF>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8016eda:	e00d      	b.n	8016ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	f000 fa66 	bl	80173b8 <USBD_CoreFindEP>
 8016eec:	4603      	mov	r3, r0
 8016eee:	75bb      	strb	r3, [r7, #22]
            break;
 8016ef0:	e002      	b.n	8016ef8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	75bb      	strb	r3, [r7, #22]
            break;
 8016ef6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016ef8:	7dbb      	ldrb	r3, [r7, #22]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d119      	bne.n	8016f32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b03      	cmp	r3, #3
 8016f08:	d113      	bne.n	8016f32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016f0a:	7dba      	ldrb	r2, [r7, #22]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	32ae      	adds	r2, #174	@ 0xae
 8016f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f14:	691b      	ldr	r3, [r3, #16]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d00b      	beq.n	8016f32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016f1a:	7dba      	ldrb	r2, [r7, #22]
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016f22:	7dba      	ldrb	r2, [r7, #22]
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	32ae      	adds	r2, #174	@ 0xae
 8016f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f2c:	691b      	ldr	r3, [r3, #16]
 8016f2e:	68f8      	ldr	r0, [r7, #12]
 8016f30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016f32:	68f8      	ldr	r0, [r7, #12]
 8016f34:	f001 f984 	bl	8018240 <USBD_CtlSendStatus>
 8016f38:	e032      	b.n	8016fa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016f3a:	7afb      	ldrb	r3, [r7, #11]
 8016f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	4619      	mov	r1, r3
 8016f44:	68f8      	ldr	r0, [r7, #12]
 8016f46:	f000 fa37 	bl	80173b8 <USBD_CoreFindEP>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f4e:	7dbb      	ldrb	r3, [r7, #22]
 8016f50:	2bff      	cmp	r3, #255	@ 0xff
 8016f52:	d025      	beq.n	8016fa0 <USBD_LL_DataOutStage+0x15c>
 8016f54:	7dbb      	ldrb	r3, [r7, #22]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d122      	bne.n	8016fa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	2b03      	cmp	r3, #3
 8016f64:	d117      	bne.n	8016f96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016f66:	7dba      	ldrb	r2, [r7, #22]
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	32ae      	adds	r2, #174	@ 0xae
 8016f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f70:	699b      	ldr	r3, [r3, #24]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d00f      	beq.n	8016f96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016f76:	7dba      	ldrb	r2, [r7, #22]
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016f7e:	7dba      	ldrb	r2, [r7, #22]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	32ae      	adds	r2, #174	@ 0xae
 8016f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f88:	699b      	ldr	r3, [r3, #24]
 8016f8a:	7afa      	ldrb	r2, [r7, #11]
 8016f8c:	4611      	mov	r1, r2
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	4798      	blx	r3
 8016f92:	4603      	mov	r3, r0
 8016f94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016f96:	7dfb      	ldrb	r3, [r7, #23]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d001      	beq.n	8016fa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016f9c:	7dfb      	ldrb	r3, [r7, #23]
 8016f9e:	e000      	b.n	8016fa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016fa0:	2300      	movs	r3, #0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3718      	adds	r7, #24
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}

08016faa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016faa:	b580      	push	{r7, lr}
 8016fac:	b086      	sub	sp, #24
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	60f8      	str	r0, [r7, #12]
 8016fb2:	460b      	mov	r3, r1
 8016fb4:	607a      	str	r2, [r7, #4]
 8016fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016fb8:	7afb      	ldrb	r3, [r7, #11]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d16f      	bne.n	801709e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	3314      	adds	r3, #20
 8016fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016fca:	2b02      	cmp	r3, #2
 8016fcc:	d15a      	bne.n	8017084 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	689a      	ldr	r2, [r3, #8]
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	68db      	ldr	r3, [r3, #12]
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d914      	bls.n	8017004 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	689a      	ldr	r2, [r3, #8]
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	1ad2      	subs	r2, r2, r3
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	689b      	ldr	r3, [r3, #8]
 8016fec:	461a      	mov	r2, r3
 8016fee:	6879      	ldr	r1, [r7, #4]
 8016ff0:	68f8      	ldr	r0, [r7, #12]
 8016ff2:	f001 f8e6 	bl	80181c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	2100      	movs	r1, #0
 8016ffc:	68f8      	ldr	r0, [r7, #12]
 8016ffe:	f001 fde9 	bl	8018bd4 <USBD_LL_PrepareReceive>
 8017002:	e03f      	b.n	8017084 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	68da      	ldr	r2, [r3, #12]
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	689b      	ldr	r3, [r3, #8]
 801700c:	429a      	cmp	r2, r3
 801700e:	d11c      	bne.n	801704a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	685a      	ldr	r2, [r3, #4]
 8017014:	693b      	ldr	r3, [r7, #16]
 8017016:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017018:	429a      	cmp	r2, r3
 801701a:	d316      	bcc.n	801704a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	685a      	ldr	r2, [r3, #4]
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017026:	429a      	cmp	r2, r3
 8017028:	d20f      	bcs.n	801704a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801702a:	2200      	movs	r2, #0
 801702c:	2100      	movs	r1, #0
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	f001 f8c7 	bl	80181c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2200      	movs	r2, #0
 8017038:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801703c:	2300      	movs	r3, #0
 801703e:	2200      	movs	r2, #0
 8017040:	2100      	movs	r1, #0
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f001 fdc6 	bl	8018bd4 <USBD_LL_PrepareReceive>
 8017048:	e01c      	b.n	8017084 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017050:	b2db      	uxtb	r3, r3
 8017052:	2b03      	cmp	r3, #3
 8017054:	d10f      	bne.n	8017076 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801705c:	68db      	ldr	r3, [r3, #12]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d009      	beq.n	8017076 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	2200      	movs	r2, #0
 8017066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017070:	68db      	ldr	r3, [r3, #12]
 8017072:	68f8      	ldr	r0, [r7, #12]
 8017074:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017076:	2180      	movs	r1, #128	@ 0x80
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f001 fd01 	bl	8018a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	f001 f8f1 	bl	8018266 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d03a      	beq.n	8017104 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801708e:	68f8      	ldr	r0, [r7, #12]
 8017090:	f7ff fe42 	bl	8016d18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	2200      	movs	r2, #0
 8017098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801709c:	e032      	b.n	8017104 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801709e:	7afb      	ldrb	r3, [r7, #11]
 80170a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	4619      	mov	r1, r3
 80170a8:	68f8      	ldr	r0, [r7, #12]
 80170aa:	f000 f985 	bl	80173b8 <USBD_CoreFindEP>
 80170ae:	4603      	mov	r3, r0
 80170b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80170b2:	7dfb      	ldrb	r3, [r7, #23]
 80170b4:	2bff      	cmp	r3, #255	@ 0xff
 80170b6:	d025      	beq.n	8017104 <USBD_LL_DataInStage+0x15a>
 80170b8:	7dfb      	ldrb	r3, [r7, #23]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d122      	bne.n	8017104 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	2b03      	cmp	r3, #3
 80170c8:	d11c      	bne.n	8017104 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80170ca:	7dfa      	ldrb	r2, [r7, #23]
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	32ae      	adds	r2, #174	@ 0xae
 80170d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170d4:	695b      	ldr	r3, [r3, #20]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d014      	beq.n	8017104 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80170da:	7dfa      	ldrb	r2, [r7, #23]
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80170e2:	7dfa      	ldrb	r2, [r7, #23]
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	32ae      	adds	r2, #174	@ 0xae
 80170e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170ec:	695b      	ldr	r3, [r3, #20]
 80170ee:	7afa      	ldrb	r2, [r7, #11]
 80170f0:	4611      	mov	r1, r2
 80170f2:	68f8      	ldr	r0, [r7, #12]
 80170f4:	4798      	blx	r3
 80170f6:	4603      	mov	r3, r0
 80170f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80170fa:	7dbb      	ldrb	r3, [r7, #22]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017100:	7dbb      	ldrb	r3, [r7, #22]
 8017102:	e000      	b.n	8017106 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017104:	2300      	movs	r3, #0
}
 8017106:	4618      	mov	r0, r3
 8017108:	3718      	adds	r7, #24
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}

0801710e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801710e:	b580      	push	{r7, lr}
 8017110:	b084      	sub	sp, #16
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017116:	2300      	movs	r3, #0
 8017118:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	2201      	movs	r2, #1
 801711e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	2200      	movs	r2, #0
 8017126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2200      	movs	r2, #0
 801712e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2200      	movs	r2, #0
 8017134:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2200      	movs	r2, #0
 801713c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017146:	2b00      	cmp	r3, #0
 8017148:	d014      	beq.n	8017174 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d00e      	beq.n	8017174 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	687a      	ldr	r2, [r7, #4]
 8017160:	6852      	ldr	r2, [r2, #4]
 8017162:	b2d2      	uxtb	r2, r2
 8017164:	4611      	mov	r1, r2
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	4798      	blx	r3
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d001      	beq.n	8017174 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8017170:	2303      	movs	r3, #3
 8017172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017174:	2340      	movs	r3, #64	@ 0x40
 8017176:	2200      	movs	r2, #0
 8017178:	2100      	movs	r1, #0
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f001 fc3b 	bl	80189f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2201      	movs	r2, #1
 8017184:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2240      	movs	r2, #64	@ 0x40
 801718c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017190:	2340      	movs	r3, #64	@ 0x40
 8017192:	2200      	movs	r2, #0
 8017194:	2180      	movs	r1, #128	@ 0x80
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	f001 fc2d 	bl	80189f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2201      	movs	r2, #1
 80171a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2240      	movs	r2, #64	@ 0x40
 80171a6:	621a      	str	r2, [r3, #32]

  return ret;
 80171a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}

080171b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80171b2:	b480      	push	{r7}
 80171b4:	b083      	sub	sp, #12
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	6078      	str	r0, [r7, #4]
 80171ba:	460b      	mov	r3, r1
 80171bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	78fa      	ldrb	r2, [r7, #3]
 80171c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80171c4:	2300      	movs	r3, #0
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	370c      	adds	r7, #12
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr

080171d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80171d2:	b480      	push	{r7}
 80171d4:	b083      	sub	sp, #12
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	2b04      	cmp	r3, #4
 80171e4:	d006      	beq.n	80171f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171ec:	b2da      	uxtb	r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2204      	movs	r2, #4
 80171f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80171fc:	2300      	movs	r3, #0
}
 80171fe:	4618      	mov	r0, r3
 8017200:	370c      	adds	r7, #12
 8017202:	46bd      	mov	sp, r7
 8017204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017208:	4770      	bx	lr

0801720a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801720a:	b480      	push	{r7}
 801720c:	b083      	sub	sp, #12
 801720e:	af00      	add	r7, sp, #0
 8017210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017218:	b2db      	uxtb	r3, r3
 801721a:	2b04      	cmp	r3, #4
 801721c:	d106      	bne.n	801722c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8017224:	b2da      	uxtb	r2, r3
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801722c:	2300      	movs	r3, #0
}
 801722e:	4618      	mov	r0, r3
 8017230:	370c      	adds	r7, #12
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr

0801723a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801723a:	b580      	push	{r7, lr}
 801723c:	b082      	sub	sp, #8
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b03      	cmp	r3, #3
 801724c:	d110      	bne.n	8017270 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00b      	beq.n	8017270 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801725e:	69db      	ldr	r3, [r3, #28]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d005      	beq.n	8017270 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801726a:	69db      	ldr	r3, [r3, #28]
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8017270:	2300      	movs	r3, #0
}
 8017272:	4618      	mov	r0, r3
 8017274:	3708      	adds	r7, #8
 8017276:	46bd      	mov	sp, r7
 8017278:	bd80      	pop	{r7, pc}

0801727a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801727a:	b580      	push	{r7, lr}
 801727c:	b082      	sub	sp, #8
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
 8017282:	460b      	mov	r3, r1
 8017284:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	32ae      	adds	r2, #174	@ 0xae
 8017290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d101      	bne.n	801729c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8017298:	2303      	movs	r3, #3
 801729a:	e01c      	b.n	80172d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	2b03      	cmp	r3, #3
 80172a6:	d115      	bne.n	80172d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	32ae      	adds	r2, #174	@ 0xae
 80172b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172b6:	6a1b      	ldr	r3, [r3, #32]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d00b      	beq.n	80172d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	32ae      	adds	r2, #174	@ 0xae
 80172c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172ca:	6a1b      	ldr	r3, [r3, #32]
 80172cc:	78fa      	ldrb	r2, [r7, #3]
 80172ce:	4611      	mov	r1, r2
 80172d0:	6878      	ldr	r0, [r7, #4]
 80172d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80172d4:	2300      	movs	r3, #0
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}

080172de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80172de:	b580      	push	{r7, lr}
 80172e0:	b082      	sub	sp, #8
 80172e2:	af00      	add	r7, sp, #0
 80172e4:	6078      	str	r0, [r7, #4]
 80172e6:	460b      	mov	r3, r1
 80172e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	32ae      	adds	r2, #174	@ 0xae
 80172f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d101      	bne.n	8017300 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80172fc:	2303      	movs	r3, #3
 80172fe:	e01c      	b.n	801733a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017306:	b2db      	uxtb	r3, r3
 8017308:	2b03      	cmp	r3, #3
 801730a:	d115      	bne.n	8017338 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	32ae      	adds	r2, #174	@ 0xae
 8017316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00b      	beq.n	8017338 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	32ae      	adds	r2, #174	@ 0xae
 801732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017330:	78fa      	ldrb	r2, [r7, #3]
 8017332:	4611      	mov	r1, r2
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017338:	2300      	movs	r3, #0
}
 801733a:	4618      	mov	r0, r3
 801733c:	3708      	adds	r7, #8
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}

08017342 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017342:	b480      	push	{r7}
 8017344:	b083      	sub	sp, #12
 8017346:	af00      	add	r7, sp, #0
 8017348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr

08017358 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8017360:	2300      	movs	r3, #0
 8017362:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2201      	movs	r2, #1
 8017368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017372:	2b00      	cmp	r3, #0
 8017374:	d00e      	beq.n	8017394 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	687a      	ldr	r2, [r7, #4]
 8017380:	6852      	ldr	r2, [r2, #4]
 8017382:	b2d2      	uxtb	r2, r2
 8017384:	4611      	mov	r1, r2
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	4798      	blx	r3
 801738a:	4603      	mov	r3, r0
 801738c:	2b00      	cmp	r3, #0
 801738e:	d001      	beq.n	8017394 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8017390:	2303      	movs	r3, #3
 8017392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017394:	7bfb      	ldrb	r3, [r7, #15]
}
 8017396:	4618      	mov	r0, r3
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}

0801739e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801739e:	b480      	push	{r7}
 80173a0:	b083      	sub	sp, #12
 80173a2:	af00      	add	r7, sp, #0
 80173a4:	6078      	str	r0, [r7, #4]
 80173a6:	460b      	mov	r3, r1
 80173a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80173aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	370c      	adds	r7, #12
 80173b0:	46bd      	mov	sp, r7
 80173b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b6:	4770      	bx	lr

080173b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80173b8:	b480      	push	{r7}
 80173ba:	b083      	sub	sp, #12
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	460b      	mov	r3, r1
 80173c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80173c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	370c      	adds	r7, #12
 80173ca:	46bd      	mov	sp, r7
 80173cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d0:	4770      	bx	lr

080173d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b086      	sub	sp, #24
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	6078      	str	r0, [r7, #4]
 80173da:	460b      	mov	r3, r1
 80173dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80173e6:	2300      	movs	r3, #0
 80173e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	885b      	ldrh	r3, [r3, #2]
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	7812      	ldrb	r2, [r2, #0]
 80173f4:	4293      	cmp	r3, r2
 80173f6:	d91f      	bls.n	8017438 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	781b      	ldrb	r3, [r3, #0]
 80173fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80173fe:	e013      	b.n	8017428 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017400:	f107 030a 	add.w	r3, r7, #10
 8017404:	4619      	mov	r1, r3
 8017406:	6978      	ldr	r0, [r7, #20]
 8017408:	f000 f81b 	bl	8017442 <USBD_GetNextDesc>
 801740c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	785b      	ldrb	r3, [r3, #1]
 8017412:	2b05      	cmp	r3, #5
 8017414:	d108      	bne.n	8017428 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8017416:	697b      	ldr	r3, [r7, #20]
 8017418:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	789b      	ldrb	r3, [r3, #2]
 801741e:	78fa      	ldrb	r2, [r7, #3]
 8017420:	429a      	cmp	r2, r3
 8017422:	d008      	beq.n	8017436 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8017424:	2300      	movs	r3, #0
 8017426:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	885b      	ldrh	r3, [r3, #2]
 801742c:	b29a      	uxth	r2, r3
 801742e:	897b      	ldrh	r3, [r7, #10]
 8017430:	429a      	cmp	r2, r3
 8017432:	d8e5      	bhi.n	8017400 <USBD_GetEpDesc+0x2e>
 8017434:	e000      	b.n	8017438 <USBD_GetEpDesc+0x66>
          break;
 8017436:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8017438:	693b      	ldr	r3, [r7, #16]
}
 801743a:	4618      	mov	r0, r3
 801743c:	3718      	adds	r7, #24
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}

08017442 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017442:	b480      	push	{r7}
 8017444:	b085      	sub	sp, #20
 8017446:	af00      	add	r7, sp, #0
 8017448:	6078      	str	r0, [r7, #4]
 801744a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	881b      	ldrh	r3, [r3, #0]
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	7812      	ldrb	r2, [r2, #0]
 8017458:	4413      	add	r3, r2
 801745a:	b29a      	uxth	r2, r3
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	461a      	mov	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	4413      	add	r3, r2
 801746a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801746c:	68fb      	ldr	r3, [r7, #12]
}
 801746e:	4618      	mov	r0, r3
 8017470:	3714      	adds	r7, #20
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr

0801747a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801747a:	b480      	push	{r7}
 801747c:	b087      	sub	sp, #28
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	3301      	adds	r3, #1
 8017490:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017498:	8a3b      	ldrh	r3, [r7, #16]
 801749a:	021b      	lsls	r3, r3, #8
 801749c:	b21a      	sxth	r2, r3
 801749e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174a2:	4313      	orrs	r3, r2
 80174a4:	b21b      	sxth	r3, r3
 80174a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80174a8:	89fb      	ldrh	r3, [r7, #14]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	371c      	adds	r7, #28
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr
	...

080174b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80174ce:	2b40      	cmp	r3, #64	@ 0x40
 80174d0:	d005      	beq.n	80174de <USBD_StdDevReq+0x26>
 80174d2:	2b40      	cmp	r3, #64	@ 0x40
 80174d4:	d857      	bhi.n	8017586 <USBD_StdDevReq+0xce>
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00f      	beq.n	80174fa <USBD_StdDevReq+0x42>
 80174da:	2b20      	cmp	r3, #32
 80174dc:	d153      	bne.n	8017586 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	32ae      	adds	r2, #174	@ 0xae
 80174e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	6839      	ldr	r1, [r7, #0]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	4798      	blx	r3
 80174f4:	4603      	mov	r3, r0
 80174f6:	73fb      	strb	r3, [r7, #15]
      break;
 80174f8:	e04a      	b.n	8017590 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	785b      	ldrb	r3, [r3, #1]
 80174fe:	2b09      	cmp	r3, #9
 8017500:	d83b      	bhi.n	801757a <USBD_StdDevReq+0xc2>
 8017502:	a201      	add	r2, pc, #4	@ (adr r2, 8017508 <USBD_StdDevReq+0x50>)
 8017504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017508:	0801755d 	.word	0x0801755d
 801750c:	08017571 	.word	0x08017571
 8017510:	0801757b 	.word	0x0801757b
 8017514:	08017567 	.word	0x08017567
 8017518:	0801757b 	.word	0x0801757b
 801751c:	0801753b 	.word	0x0801753b
 8017520:	08017531 	.word	0x08017531
 8017524:	0801757b 	.word	0x0801757b
 8017528:	08017553 	.word	0x08017553
 801752c:	08017545 	.word	0x08017545
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017530:	6839      	ldr	r1, [r7, #0]
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f000 fa3c 	bl	80179b0 <USBD_GetDescriptor>
          break;
 8017538:	e024      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801753a:	6839      	ldr	r1, [r7, #0]
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f000 fbcb 	bl	8017cd8 <USBD_SetAddress>
          break;
 8017542:	e01f      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017544:	6839      	ldr	r1, [r7, #0]
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f000 fc0a 	bl	8017d60 <USBD_SetConfig>
 801754c:	4603      	mov	r3, r0
 801754e:	73fb      	strb	r3, [r7, #15]
          break;
 8017550:	e018      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017552:	6839      	ldr	r1, [r7, #0]
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f000 fcad 	bl	8017eb4 <USBD_GetConfig>
          break;
 801755a:	e013      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801755c:	6839      	ldr	r1, [r7, #0]
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f000 fcde 	bl	8017f20 <USBD_GetStatus>
          break;
 8017564:	e00e      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017566:	6839      	ldr	r1, [r7, #0]
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f000 fd0d 	bl	8017f88 <USBD_SetFeature>
          break;
 801756e:	e009      	b.n	8017584 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017570:	6839      	ldr	r1, [r7, #0]
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f000 fd31 	bl	8017fda <USBD_ClrFeature>
          break;
 8017578:	e004      	b.n	8017584 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801757a:	6839      	ldr	r1, [r7, #0]
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f000 fd88 	bl	8018092 <USBD_CtlError>
          break;
 8017582:	bf00      	nop
      }
      break;
 8017584:	e004      	b.n	8017590 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017586:	6839      	ldr	r1, [r7, #0]
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f000 fd82 	bl	8018092 <USBD_CtlError>
      break;
 801758e:	bf00      	nop
  }

  return ret;
 8017590:	7bfb      	ldrb	r3, [r7, #15]
}
 8017592:	4618      	mov	r0, r3
 8017594:	3710      	adds	r7, #16
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop

0801759c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b084      	sub	sp, #16
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80175a6:	2300      	movs	r3, #0
 80175a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80175b2:	2b40      	cmp	r3, #64	@ 0x40
 80175b4:	d005      	beq.n	80175c2 <USBD_StdItfReq+0x26>
 80175b6:	2b40      	cmp	r3, #64	@ 0x40
 80175b8:	d852      	bhi.n	8017660 <USBD_StdItfReq+0xc4>
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <USBD_StdItfReq+0x26>
 80175be:	2b20      	cmp	r3, #32
 80175c0:	d14e      	bne.n	8017660 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	3b01      	subs	r3, #1
 80175cc:	2b02      	cmp	r3, #2
 80175ce:	d840      	bhi.n	8017652 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	889b      	ldrh	r3, [r3, #4]
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	2b01      	cmp	r3, #1
 80175d8:	d836      	bhi.n	8017648 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	889b      	ldrh	r3, [r3, #4]
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	4619      	mov	r1, r3
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7ff fedb 	bl	801739e <USBD_CoreFindIF>
 80175e8:	4603      	mov	r3, r0
 80175ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80175ec:	7bbb      	ldrb	r3, [r7, #14]
 80175ee:	2bff      	cmp	r3, #255	@ 0xff
 80175f0:	d01d      	beq.n	801762e <USBD_StdItfReq+0x92>
 80175f2:	7bbb      	ldrb	r3, [r7, #14]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d11a      	bne.n	801762e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80175f8:	7bba      	ldrb	r2, [r7, #14]
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	32ae      	adds	r2, #174	@ 0xae
 80175fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017602:	689b      	ldr	r3, [r3, #8]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d00f      	beq.n	8017628 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017608:	7bba      	ldrb	r2, [r7, #14]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017610:	7bba      	ldrb	r2, [r7, #14]
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	32ae      	adds	r2, #174	@ 0xae
 8017616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	6839      	ldr	r1, [r7, #0]
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	4798      	blx	r3
 8017622:	4603      	mov	r3, r0
 8017624:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017626:	e004      	b.n	8017632 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017628:	2303      	movs	r3, #3
 801762a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801762c:	e001      	b.n	8017632 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801762e:	2303      	movs	r3, #3
 8017630:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	88db      	ldrh	r3, [r3, #6]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d110      	bne.n	801765c <USBD_StdItfReq+0xc0>
 801763a:	7bfb      	ldrb	r3, [r7, #15]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d10d      	bne.n	801765c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f000 fdfd 	bl	8018240 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017646:	e009      	b.n	801765c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017648:	6839      	ldr	r1, [r7, #0]
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f000 fd21 	bl	8018092 <USBD_CtlError>
          break;
 8017650:	e004      	b.n	801765c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017652:	6839      	ldr	r1, [r7, #0]
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f000 fd1c 	bl	8018092 <USBD_CtlError>
          break;
 801765a:	e000      	b.n	801765e <USBD_StdItfReq+0xc2>
          break;
 801765c:	bf00      	nop
      }
      break;
 801765e:	e004      	b.n	801766a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8017660:	6839      	ldr	r1, [r7, #0]
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f000 fd15 	bl	8018092 <USBD_CtlError>
      break;
 8017668:	bf00      	nop
  }

  return ret;
 801766a:	7bfb      	ldrb	r3, [r7, #15]
}
 801766c:	4618      	mov	r0, r3
 801766e:	3710      	adds	r7, #16
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}

08017674 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801767e:	2300      	movs	r3, #0
 8017680:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	889b      	ldrh	r3, [r3, #4]
 8017686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017690:	2b40      	cmp	r3, #64	@ 0x40
 8017692:	d007      	beq.n	80176a4 <USBD_StdEPReq+0x30>
 8017694:	2b40      	cmp	r3, #64	@ 0x40
 8017696:	f200 817f 	bhi.w	8017998 <USBD_StdEPReq+0x324>
 801769a:	2b00      	cmp	r3, #0
 801769c:	d02a      	beq.n	80176f4 <USBD_StdEPReq+0x80>
 801769e:	2b20      	cmp	r3, #32
 80176a0:	f040 817a 	bne.w	8017998 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80176a4:	7bbb      	ldrb	r3, [r7, #14]
 80176a6:	4619      	mov	r1, r3
 80176a8:	6878      	ldr	r0, [r7, #4]
 80176aa:	f7ff fe85 	bl	80173b8 <USBD_CoreFindEP>
 80176ae:	4603      	mov	r3, r0
 80176b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80176b2:	7b7b      	ldrb	r3, [r7, #13]
 80176b4:	2bff      	cmp	r3, #255	@ 0xff
 80176b6:	f000 8174 	beq.w	80179a2 <USBD_StdEPReq+0x32e>
 80176ba:	7b7b      	ldrb	r3, [r7, #13]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	f040 8170 	bne.w	80179a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80176c2:	7b7a      	ldrb	r2, [r7, #13]
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80176ca:	7b7a      	ldrb	r2, [r7, #13]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	32ae      	adds	r2, #174	@ 0xae
 80176d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176d4:	689b      	ldr	r3, [r3, #8]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	f000 8163 	beq.w	80179a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80176dc:	7b7a      	ldrb	r2, [r7, #13]
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	32ae      	adds	r2, #174	@ 0xae
 80176e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176e6:	689b      	ldr	r3, [r3, #8]
 80176e8:	6839      	ldr	r1, [r7, #0]
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	4798      	blx	r3
 80176ee:	4603      	mov	r3, r0
 80176f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80176f2:	e156      	b.n	80179a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	785b      	ldrb	r3, [r3, #1]
 80176f8:	2b03      	cmp	r3, #3
 80176fa:	d008      	beq.n	801770e <USBD_StdEPReq+0x9a>
 80176fc:	2b03      	cmp	r3, #3
 80176fe:	f300 8145 	bgt.w	801798c <USBD_StdEPReq+0x318>
 8017702:	2b00      	cmp	r3, #0
 8017704:	f000 809b 	beq.w	801783e <USBD_StdEPReq+0x1ca>
 8017708:	2b01      	cmp	r3, #1
 801770a:	d03c      	beq.n	8017786 <USBD_StdEPReq+0x112>
 801770c:	e13e      	b.n	801798c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017714:	b2db      	uxtb	r3, r3
 8017716:	2b02      	cmp	r3, #2
 8017718:	d002      	beq.n	8017720 <USBD_StdEPReq+0xac>
 801771a:	2b03      	cmp	r3, #3
 801771c:	d016      	beq.n	801774c <USBD_StdEPReq+0xd8>
 801771e:	e02c      	b.n	801777a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017720:	7bbb      	ldrb	r3, [r7, #14]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d00d      	beq.n	8017742 <USBD_StdEPReq+0xce>
 8017726:	7bbb      	ldrb	r3, [r7, #14]
 8017728:	2b80      	cmp	r3, #128	@ 0x80
 801772a:	d00a      	beq.n	8017742 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801772c:	7bbb      	ldrb	r3, [r7, #14]
 801772e:	4619      	mov	r1, r3
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f001 f9a5 	bl	8018a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017736:	2180      	movs	r1, #128	@ 0x80
 8017738:	6878      	ldr	r0, [r7, #4]
 801773a:	f001 f9a1 	bl	8018a80 <USBD_LL_StallEP>
 801773e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017740:	e020      	b.n	8017784 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017742:	6839      	ldr	r1, [r7, #0]
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f000 fca4 	bl	8018092 <USBD_CtlError>
              break;
 801774a:	e01b      	b.n	8017784 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	885b      	ldrh	r3, [r3, #2]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d10e      	bne.n	8017772 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017754:	7bbb      	ldrb	r3, [r7, #14]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d00b      	beq.n	8017772 <USBD_StdEPReq+0xfe>
 801775a:	7bbb      	ldrb	r3, [r7, #14]
 801775c:	2b80      	cmp	r3, #128	@ 0x80
 801775e:	d008      	beq.n	8017772 <USBD_StdEPReq+0xfe>
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	88db      	ldrh	r3, [r3, #6]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d104      	bne.n	8017772 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017768:	7bbb      	ldrb	r3, [r7, #14]
 801776a:	4619      	mov	r1, r3
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	f001 f987 	bl	8018a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f000 fd64 	bl	8018240 <USBD_CtlSendStatus>

              break;
 8017778:	e004      	b.n	8017784 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801777a:	6839      	ldr	r1, [r7, #0]
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f000 fc88 	bl	8018092 <USBD_CtlError>
              break;
 8017782:	bf00      	nop
          }
          break;
 8017784:	e107      	b.n	8017996 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801778c:	b2db      	uxtb	r3, r3
 801778e:	2b02      	cmp	r3, #2
 8017790:	d002      	beq.n	8017798 <USBD_StdEPReq+0x124>
 8017792:	2b03      	cmp	r3, #3
 8017794:	d016      	beq.n	80177c4 <USBD_StdEPReq+0x150>
 8017796:	e04b      	b.n	8017830 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017798:	7bbb      	ldrb	r3, [r7, #14]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d00d      	beq.n	80177ba <USBD_StdEPReq+0x146>
 801779e:	7bbb      	ldrb	r3, [r7, #14]
 80177a0:	2b80      	cmp	r3, #128	@ 0x80
 80177a2:	d00a      	beq.n	80177ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80177a4:	7bbb      	ldrb	r3, [r7, #14]
 80177a6:	4619      	mov	r1, r3
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f001 f969 	bl	8018a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80177ae:	2180      	movs	r1, #128	@ 0x80
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	f001 f965 	bl	8018a80 <USBD_LL_StallEP>
 80177b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80177b8:	e040      	b.n	801783c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80177ba:	6839      	ldr	r1, [r7, #0]
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f000 fc68 	bl	8018092 <USBD_CtlError>
              break;
 80177c2:	e03b      	b.n	801783c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80177c4:	683b      	ldr	r3, [r7, #0]
 80177c6:	885b      	ldrh	r3, [r3, #2]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d136      	bne.n	801783a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80177cc:	7bbb      	ldrb	r3, [r7, #14]
 80177ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d004      	beq.n	80177e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80177d6:	7bbb      	ldrb	r3, [r7, #14]
 80177d8:	4619      	mov	r1, r3
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f001 f96f 	bl	8018abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f000 fd2d 	bl	8018240 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80177e6:	7bbb      	ldrb	r3, [r7, #14]
 80177e8:	4619      	mov	r1, r3
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f7ff fde4 	bl	80173b8 <USBD_CoreFindEP>
 80177f0:	4603      	mov	r3, r0
 80177f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80177f4:	7b7b      	ldrb	r3, [r7, #13]
 80177f6:	2bff      	cmp	r3, #255	@ 0xff
 80177f8:	d01f      	beq.n	801783a <USBD_StdEPReq+0x1c6>
 80177fa:	7b7b      	ldrb	r3, [r7, #13]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d11c      	bne.n	801783a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017800:	7b7a      	ldrb	r2, [r7, #13]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017808:	7b7a      	ldrb	r2, [r7, #13]
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	32ae      	adds	r2, #174	@ 0xae
 801780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017812:	689b      	ldr	r3, [r3, #8]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d010      	beq.n	801783a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017818:	7b7a      	ldrb	r2, [r7, #13]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	32ae      	adds	r2, #174	@ 0xae
 801781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017822:	689b      	ldr	r3, [r3, #8]
 8017824:	6839      	ldr	r1, [r7, #0]
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	4798      	blx	r3
 801782a:	4603      	mov	r3, r0
 801782c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801782e:	e004      	b.n	801783a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017830:	6839      	ldr	r1, [r7, #0]
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	f000 fc2d 	bl	8018092 <USBD_CtlError>
              break;
 8017838:	e000      	b.n	801783c <USBD_StdEPReq+0x1c8>
              break;
 801783a:	bf00      	nop
          }
          break;
 801783c:	e0ab      	b.n	8017996 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017844:	b2db      	uxtb	r3, r3
 8017846:	2b02      	cmp	r3, #2
 8017848:	d002      	beq.n	8017850 <USBD_StdEPReq+0x1dc>
 801784a:	2b03      	cmp	r3, #3
 801784c:	d032      	beq.n	80178b4 <USBD_StdEPReq+0x240>
 801784e:	e097      	b.n	8017980 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017850:	7bbb      	ldrb	r3, [r7, #14]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d007      	beq.n	8017866 <USBD_StdEPReq+0x1f2>
 8017856:	7bbb      	ldrb	r3, [r7, #14]
 8017858:	2b80      	cmp	r3, #128	@ 0x80
 801785a:	d004      	beq.n	8017866 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801785c:	6839      	ldr	r1, [r7, #0]
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f000 fc17 	bl	8018092 <USBD_CtlError>
                break;
 8017864:	e091      	b.n	801798a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801786a:	2b00      	cmp	r3, #0
 801786c:	da0b      	bge.n	8017886 <USBD_StdEPReq+0x212>
 801786e:	7bbb      	ldrb	r3, [r7, #14]
 8017870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017874:	4613      	mov	r3, r2
 8017876:	009b      	lsls	r3, r3, #2
 8017878:	4413      	add	r3, r2
 801787a:	009b      	lsls	r3, r3, #2
 801787c:	3310      	adds	r3, #16
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	4413      	add	r3, r2
 8017882:	3304      	adds	r3, #4
 8017884:	e00b      	b.n	801789e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017886:	7bbb      	ldrb	r3, [r7, #14]
 8017888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801788c:	4613      	mov	r3, r2
 801788e:	009b      	lsls	r3, r3, #2
 8017890:	4413      	add	r3, r2
 8017892:	009b      	lsls	r3, r3, #2
 8017894:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	4413      	add	r3, r2
 801789c:	3304      	adds	r3, #4
 801789e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	2200      	movs	r2, #0
 80178a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	2202      	movs	r2, #2
 80178aa:	4619      	mov	r1, r3
 80178ac:	6878      	ldr	r0, [r7, #4]
 80178ae:	f000 fc6d 	bl	801818c <USBD_CtlSendData>
              break;
 80178b2:	e06a      	b.n	801798a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80178b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	da11      	bge.n	80178e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80178bc:	7bbb      	ldrb	r3, [r7, #14]
 80178be:	f003 020f 	and.w	r2, r3, #15
 80178c2:	6879      	ldr	r1, [r7, #4]
 80178c4:	4613      	mov	r3, r2
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	4413      	add	r3, r2
 80178ca:	009b      	lsls	r3, r3, #2
 80178cc:	440b      	add	r3, r1
 80178ce:	3324      	adds	r3, #36	@ 0x24
 80178d0:	881b      	ldrh	r3, [r3, #0]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d117      	bne.n	8017906 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f000 fbda 	bl	8018092 <USBD_CtlError>
                  break;
 80178de:	e054      	b.n	801798a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80178e0:	7bbb      	ldrb	r3, [r7, #14]
 80178e2:	f003 020f 	and.w	r2, r3, #15
 80178e6:	6879      	ldr	r1, [r7, #4]
 80178e8:	4613      	mov	r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	4413      	add	r3, r2
 80178ee:	009b      	lsls	r3, r3, #2
 80178f0:	440b      	add	r3, r1
 80178f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80178f6:	881b      	ldrh	r3, [r3, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d104      	bne.n	8017906 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80178fc:	6839      	ldr	r1, [r7, #0]
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f000 fbc7 	bl	8018092 <USBD_CtlError>
                  break;
 8017904:	e041      	b.n	801798a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801790a:	2b00      	cmp	r3, #0
 801790c:	da0b      	bge.n	8017926 <USBD_StdEPReq+0x2b2>
 801790e:	7bbb      	ldrb	r3, [r7, #14]
 8017910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017914:	4613      	mov	r3, r2
 8017916:	009b      	lsls	r3, r3, #2
 8017918:	4413      	add	r3, r2
 801791a:	009b      	lsls	r3, r3, #2
 801791c:	3310      	adds	r3, #16
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	4413      	add	r3, r2
 8017922:	3304      	adds	r3, #4
 8017924:	e00b      	b.n	801793e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017926:	7bbb      	ldrb	r3, [r7, #14]
 8017928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801792c:	4613      	mov	r3, r2
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	4413      	add	r3, r2
 8017932:	009b      	lsls	r3, r3, #2
 8017934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	4413      	add	r3, r2
 801793c:	3304      	adds	r3, #4
 801793e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017940:	7bbb      	ldrb	r3, [r7, #14]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d002      	beq.n	801794c <USBD_StdEPReq+0x2d8>
 8017946:	7bbb      	ldrb	r3, [r7, #14]
 8017948:	2b80      	cmp	r3, #128	@ 0x80
 801794a:	d103      	bne.n	8017954 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	2200      	movs	r2, #0
 8017950:	601a      	str	r2, [r3, #0]
 8017952:	e00e      	b.n	8017972 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017954:	7bbb      	ldrb	r3, [r7, #14]
 8017956:	4619      	mov	r1, r3
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f001 f8cf 	bl	8018afc <USBD_LL_IsStallEP>
 801795e:	4603      	mov	r3, r0
 8017960:	2b00      	cmp	r3, #0
 8017962:	d003      	beq.n	801796c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	2201      	movs	r2, #1
 8017968:	601a      	str	r2, [r3, #0]
 801796a:	e002      	b.n	8017972 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	2200      	movs	r2, #0
 8017970:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	2202      	movs	r2, #2
 8017976:	4619      	mov	r1, r3
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f000 fc07 	bl	801818c <USBD_CtlSendData>
              break;
 801797e:	e004      	b.n	801798a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017980:	6839      	ldr	r1, [r7, #0]
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f000 fb85 	bl	8018092 <USBD_CtlError>
              break;
 8017988:	bf00      	nop
          }
          break;
 801798a:	e004      	b.n	8017996 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801798c:	6839      	ldr	r1, [r7, #0]
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	f000 fb7f 	bl	8018092 <USBD_CtlError>
          break;
 8017994:	bf00      	nop
      }
      break;
 8017996:	e005      	b.n	80179a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017998:	6839      	ldr	r1, [r7, #0]
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f000 fb79 	bl	8018092 <USBD_CtlError>
      break;
 80179a0:	e000      	b.n	80179a4 <USBD_StdEPReq+0x330>
      break;
 80179a2:	bf00      	nop
  }

  return ret;
 80179a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3710      	adds	r7, #16
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}
	...

080179b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b084      	sub	sp, #16
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80179ba:	2300      	movs	r3, #0
 80179bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80179be:	2300      	movs	r3, #0
 80179c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80179c2:	2300      	movs	r3, #0
 80179c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	885b      	ldrh	r3, [r3, #2]
 80179ca:	0a1b      	lsrs	r3, r3, #8
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	3b01      	subs	r3, #1
 80179d0:	2b0e      	cmp	r3, #14
 80179d2:	f200 8152 	bhi.w	8017c7a <USBD_GetDescriptor+0x2ca>
 80179d6:	a201      	add	r2, pc, #4	@ (adr r2, 80179dc <USBD_GetDescriptor+0x2c>)
 80179d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179dc:	08017a4d 	.word	0x08017a4d
 80179e0:	08017a65 	.word	0x08017a65
 80179e4:	08017aa5 	.word	0x08017aa5
 80179e8:	08017c7b 	.word	0x08017c7b
 80179ec:	08017c7b 	.word	0x08017c7b
 80179f0:	08017c1b 	.word	0x08017c1b
 80179f4:	08017c47 	.word	0x08017c47
 80179f8:	08017c7b 	.word	0x08017c7b
 80179fc:	08017c7b 	.word	0x08017c7b
 8017a00:	08017c7b 	.word	0x08017c7b
 8017a04:	08017c7b 	.word	0x08017c7b
 8017a08:	08017c7b 	.word	0x08017c7b
 8017a0c:	08017c7b 	.word	0x08017c7b
 8017a10:	08017c7b 	.word	0x08017c7b
 8017a14:	08017a19 	.word	0x08017a19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a1e:	69db      	ldr	r3, [r3, #28]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d00b      	beq.n	8017a3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a2a:	69db      	ldr	r3, [r3, #28]
 8017a2c:	687a      	ldr	r2, [r7, #4]
 8017a2e:	7c12      	ldrb	r2, [r2, #16]
 8017a30:	f107 0108 	add.w	r1, r7, #8
 8017a34:	4610      	mov	r0, r2
 8017a36:	4798      	blx	r3
 8017a38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017a3a:	e126      	b.n	8017c8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017a3c:	6839      	ldr	r1, [r7, #0]
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f000 fb27 	bl	8018092 <USBD_CtlError>
        err++;
 8017a44:	7afb      	ldrb	r3, [r7, #11]
 8017a46:	3301      	adds	r3, #1
 8017a48:	72fb      	strb	r3, [r7, #11]
      break;
 8017a4a:	e11e      	b.n	8017c8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	687a      	ldr	r2, [r7, #4]
 8017a56:	7c12      	ldrb	r2, [r2, #16]
 8017a58:	f107 0108 	add.w	r1, r7, #8
 8017a5c:	4610      	mov	r0, r2
 8017a5e:	4798      	blx	r3
 8017a60:	60f8      	str	r0, [r7, #12]
      break;
 8017a62:	e112      	b.n	8017c8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	7c1b      	ldrb	r3, [r3, #16]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d10d      	bne.n	8017a88 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a74:	f107 0208 	add.w	r2, r7, #8
 8017a78:	4610      	mov	r0, r2
 8017a7a:	4798      	blx	r3
 8017a7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	3301      	adds	r3, #1
 8017a82:	2202      	movs	r2, #2
 8017a84:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017a86:	e100      	b.n	8017c8a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a90:	f107 0208 	add.w	r2, r7, #8
 8017a94:	4610      	mov	r0, r2
 8017a96:	4798      	blx	r3
 8017a98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	3301      	adds	r3, #1
 8017a9e:	2202      	movs	r2, #2
 8017aa0:	701a      	strb	r2, [r3, #0]
      break;
 8017aa2:	e0f2      	b.n	8017c8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	885b      	ldrh	r3, [r3, #2]
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	2b05      	cmp	r3, #5
 8017aac:	f200 80ac 	bhi.w	8017c08 <USBD_GetDescriptor+0x258>
 8017ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8017ab8 <USBD_GetDescriptor+0x108>)
 8017ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ab6:	bf00      	nop
 8017ab8:	08017ad1 	.word	0x08017ad1
 8017abc:	08017b05 	.word	0x08017b05
 8017ac0:	08017b39 	.word	0x08017b39
 8017ac4:	08017b6d 	.word	0x08017b6d
 8017ac8:	08017ba1 	.word	0x08017ba1
 8017acc:	08017bd5 	.word	0x08017bd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ad6:	685b      	ldr	r3, [r3, #4]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d00b      	beq.n	8017af4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	7c12      	ldrb	r2, [r2, #16]
 8017ae8:	f107 0108 	add.w	r1, r7, #8
 8017aec:	4610      	mov	r0, r2
 8017aee:	4798      	blx	r3
 8017af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017af2:	e091      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017af4:	6839      	ldr	r1, [r7, #0]
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f000 facb 	bl	8018092 <USBD_CtlError>
            err++;
 8017afc:	7afb      	ldrb	r3, [r7, #11]
 8017afe:	3301      	adds	r3, #1
 8017b00:	72fb      	strb	r3, [r7, #11]
          break;
 8017b02:	e089      	b.n	8017c18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b0a:	689b      	ldr	r3, [r3, #8]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d00b      	beq.n	8017b28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b16:	689b      	ldr	r3, [r3, #8]
 8017b18:	687a      	ldr	r2, [r7, #4]
 8017b1a:	7c12      	ldrb	r2, [r2, #16]
 8017b1c:	f107 0108 	add.w	r1, r7, #8
 8017b20:	4610      	mov	r0, r2
 8017b22:	4798      	blx	r3
 8017b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b26:	e077      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b28:	6839      	ldr	r1, [r7, #0]
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f000 fab1 	bl	8018092 <USBD_CtlError>
            err++;
 8017b30:	7afb      	ldrb	r3, [r7, #11]
 8017b32:	3301      	adds	r3, #1
 8017b34:	72fb      	strb	r3, [r7, #11]
          break;
 8017b36:	e06f      	b.n	8017c18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b3e:	68db      	ldr	r3, [r3, #12]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d00b      	beq.n	8017b5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b4a:	68db      	ldr	r3, [r3, #12]
 8017b4c:	687a      	ldr	r2, [r7, #4]
 8017b4e:	7c12      	ldrb	r2, [r2, #16]
 8017b50:	f107 0108 	add.w	r1, r7, #8
 8017b54:	4610      	mov	r0, r2
 8017b56:	4798      	blx	r3
 8017b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b5a:	e05d      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b5c:	6839      	ldr	r1, [r7, #0]
 8017b5e:	6878      	ldr	r0, [r7, #4]
 8017b60:	f000 fa97 	bl	8018092 <USBD_CtlError>
            err++;
 8017b64:	7afb      	ldrb	r3, [r7, #11]
 8017b66:	3301      	adds	r3, #1
 8017b68:	72fb      	strb	r3, [r7, #11]
          break;
 8017b6a:	e055      	b.n	8017c18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b72:	691b      	ldr	r3, [r3, #16]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d00b      	beq.n	8017b90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017b7e:	691b      	ldr	r3, [r3, #16]
 8017b80:	687a      	ldr	r2, [r7, #4]
 8017b82:	7c12      	ldrb	r2, [r2, #16]
 8017b84:	f107 0108 	add.w	r1, r7, #8
 8017b88:	4610      	mov	r0, r2
 8017b8a:	4798      	blx	r3
 8017b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b8e:	e043      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b90:	6839      	ldr	r1, [r7, #0]
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f000 fa7d 	bl	8018092 <USBD_CtlError>
            err++;
 8017b98:	7afb      	ldrb	r3, [r7, #11]
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8017b9e:	e03b      	b.n	8017c18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ba6:	695b      	ldr	r3, [r3, #20]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d00b      	beq.n	8017bc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017bb2:	695b      	ldr	r3, [r3, #20]
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	7c12      	ldrb	r2, [r2, #16]
 8017bb8:	f107 0108 	add.w	r1, r7, #8
 8017bbc:	4610      	mov	r0, r2
 8017bbe:	4798      	blx	r3
 8017bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017bc2:	e029      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017bc4:	6839      	ldr	r1, [r7, #0]
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f000 fa63 	bl	8018092 <USBD_CtlError>
            err++;
 8017bcc:	7afb      	ldrb	r3, [r7, #11]
 8017bce:	3301      	adds	r3, #1
 8017bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8017bd2:	e021      	b.n	8017c18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017bda:	699b      	ldr	r3, [r3, #24]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d00b      	beq.n	8017bf8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017be6:	699b      	ldr	r3, [r3, #24]
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	7c12      	ldrb	r2, [r2, #16]
 8017bec:	f107 0108 	add.w	r1, r7, #8
 8017bf0:	4610      	mov	r0, r2
 8017bf2:	4798      	blx	r3
 8017bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017bf6:	e00f      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017bf8:	6839      	ldr	r1, [r7, #0]
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f000 fa49 	bl	8018092 <USBD_CtlError>
            err++;
 8017c00:	7afb      	ldrb	r3, [r7, #11]
 8017c02:	3301      	adds	r3, #1
 8017c04:	72fb      	strb	r3, [r7, #11]
          break;
 8017c06:	e007      	b.n	8017c18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017c08:	6839      	ldr	r1, [r7, #0]
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f000 fa41 	bl	8018092 <USBD_CtlError>
          err++;
 8017c10:	7afb      	ldrb	r3, [r7, #11]
 8017c12:	3301      	adds	r3, #1
 8017c14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017c16:	bf00      	nop
      }
      break;
 8017c18:	e037      	b.n	8017c8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	7c1b      	ldrb	r3, [r3, #16]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d109      	bne.n	8017c36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c2a:	f107 0208 	add.w	r2, r7, #8
 8017c2e:	4610      	mov	r0, r2
 8017c30:	4798      	blx	r3
 8017c32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017c34:	e029      	b.n	8017c8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017c36:	6839      	ldr	r1, [r7, #0]
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f000 fa2a 	bl	8018092 <USBD_CtlError>
        err++;
 8017c3e:	7afb      	ldrb	r3, [r7, #11]
 8017c40:	3301      	adds	r3, #1
 8017c42:	72fb      	strb	r3, [r7, #11]
      break;
 8017c44:	e021      	b.n	8017c8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	7c1b      	ldrb	r3, [r3, #16]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d10d      	bne.n	8017c6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c56:	f107 0208 	add.w	r2, r7, #8
 8017c5a:	4610      	mov	r0, r2
 8017c5c:	4798      	blx	r3
 8017c5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	3301      	adds	r3, #1
 8017c64:	2207      	movs	r2, #7
 8017c66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017c68:	e00f      	b.n	8017c8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017c6a:	6839      	ldr	r1, [r7, #0]
 8017c6c:	6878      	ldr	r0, [r7, #4]
 8017c6e:	f000 fa10 	bl	8018092 <USBD_CtlError>
        err++;
 8017c72:	7afb      	ldrb	r3, [r7, #11]
 8017c74:	3301      	adds	r3, #1
 8017c76:	72fb      	strb	r3, [r7, #11]
      break;
 8017c78:	e007      	b.n	8017c8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017c7a:	6839      	ldr	r1, [r7, #0]
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f000 fa08 	bl	8018092 <USBD_CtlError>
      err++;
 8017c82:	7afb      	ldrb	r3, [r7, #11]
 8017c84:	3301      	adds	r3, #1
 8017c86:	72fb      	strb	r3, [r7, #11]
      break;
 8017c88:	bf00      	nop
  }

  if (err != 0U)
 8017c8a:	7afb      	ldrb	r3, [r7, #11]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d11e      	bne.n	8017cce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	88db      	ldrh	r3, [r3, #6]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d016      	beq.n	8017cc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017c98:	893b      	ldrh	r3, [r7, #8]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d00e      	beq.n	8017cbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	88da      	ldrh	r2, [r3, #6]
 8017ca2:	893b      	ldrh	r3, [r7, #8]
 8017ca4:	4293      	cmp	r3, r2
 8017ca6:	bf28      	it	cs
 8017ca8:	4613      	movcs	r3, r2
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017cae:	893b      	ldrh	r3, [r7, #8]
 8017cb0:	461a      	mov	r2, r3
 8017cb2:	68f9      	ldr	r1, [r7, #12]
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f000 fa69 	bl	801818c <USBD_CtlSendData>
 8017cba:	e009      	b.n	8017cd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017cbc:	6839      	ldr	r1, [r7, #0]
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f000 f9e7 	bl	8018092 <USBD_CtlError>
 8017cc4:	e004      	b.n	8017cd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f000 faba 	bl	8018240 <USBD_CtlSendStatus>
 8017ccc:	e000      	b.n	8017cd0 <USBD_GetDescriptor+0x320>
    return;
 8017cce:	bf00      	nop
  }
}
 8017cd0:	3710      	adds	r7, #16
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop

08017cd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	889b      	ldrh	r3, [r3, #4]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d131      	bne.n	8017d4e <USBD_SetAddress+0x76>
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	88db      	ldrh	r3, [r3, #6]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d12d      	bne.n	8017d4e <USBD_SetAddress+0x76>
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	885b      	ldrh	r3, [r3, #2]
 8017cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8017cf8:	d829      	bhi.n	8017d4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	885b      	ldrh	r3, [r3, #2]
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017d04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	2b03      	cmp	r3, #3
 8017d10:	d104      	bne.n	8017d1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017d12:	6839      	ldr	r1, [r7, #0]
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f000 f9bc 	bl	8018092 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d1a:	e01d      	b.n	8017d58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	7bfa      	ldrb	r2, [r7, #15]
 8017d20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017d24:	7bfb      	ldrb	r3, [r7, #15]
 8017d26:	4619      	mov	r1, r3
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f000 ff13 	bl	8018b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f000 fa86 	bl	8018240 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017d34:	7bfb      	ldrb	r3, [r7, #15]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d004      	beq.n	8017d44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2202      	movs	r2, #2
 8017d3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d42:	e009      	b.n	8017d58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2201      	movs	r2, #1
 8017d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d4c:	e004      	b.n	8017d58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f000 f99e 	bl	8018092 <USBD_CtlError>
  }
}
 8017d56:	bf00      	nop
 8017d58:	bf00      	nop
 8017d5a:	3710      	adds	r7, #16
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b084      	sub	sp, #16
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	885b      	ldrh	r3, [r3, #2]
 8017d72:	b2da      	uxtb	r2, r3
 8017d74:	4b4e      	ldr	r3, [pc, #312]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017d78:	4b4d      	ldr	r3, [pc, #308]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	2b01      	cmp	r3, #1
 8017d7e:	d905      	bls.n	8017d8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017d80:	6839      	ldr	r1, [r7, #0]
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f000 f985 	bl	8018092 <USBD_CtlError>
    return USBD_FAIL;
 8017d88:	2303      	movs	r3, #3
 8017d8a:	e08c      	b.n	8017ea6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	d002      	beq.n	8017d9e <USBD_SetConfig+0x3e>
 8017d98:	2b03      	cmp	r3, #3
 8017d9a:	d029      	beq.n	8017df0 <USBD_SetConfig+0x90>
 8017d9c:	e075      	b.n	8017e8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017d9e:	4b44      	ldr	r3, [pc, #272]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d020      	beq.n	8017de8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017da6:	4b42      	ldr	r3, [pc, #264]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017da8:	781b      	ldrb	r3, [r3, #0]
 8017daa:	461a      	mov	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017db0:	4b3f      	ldr	r3, [pc, #252]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	4619      	mov	r1, r3
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7fe ffb9 	bl	8016d2e <USBD_SetClassConfig>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017dc0:	7bfb      	ldrb	r3, [r7, #15]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d008      	beq.n	8017dd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017dc6:	6839      	ldr	r1, [r7, #0]
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f000 f962 	bl	8018092 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2202      	movs	r2, #2
 8017dd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017dd6:	e065      	b.n	8017ea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f000 fa31 	bl	8018240 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2203      	movs	r2, #3
 8017de2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017de6:	e05d      	b.n	8017ea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f000 fa29 	bl	8018240 <USBD_CtlSendStatus>
      break;
 8017dee:	e059      	b.n	8017ea4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017df0:	4b2f      	ldr	r3, [pc, #188]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d112      	bne.n	8017e1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2202      	movs	r2, #2
 8017dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017e00:	4b2b      	ldr	r3, [pc, #172]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	461a      	mov	r2, r3
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017e0a:	4b29      	ldr	r3, [pc, #164]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	4619      	mov	r1, r3
 8017e10:	6878      	ldr	r0, [r7, #4]
 8017e12:	f7fe ffa8 	bl	8016d66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f000 fa12 	bl	8018240 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017e1c:	e042      	b.n	8017ea4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017e1e:	4b24      	ldr	r3, [pc, #144]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	461a      	mov	r2, r3
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d02a      	beq.n	8017e82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	4619      	mov	r1, r3
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	f7fe ff96 	bl	8016d66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	461a      	mov	r2, r3
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017e44:	4b1a      	ldr	r3, [pc, #104]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	4619      	mov	r1, r3
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f7fe ff6f 	bl	8016d2e <USBD_SetClassConfig>
 8017e50:	4603      	mov	r3, r0
 8017e52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017e54:	7bfb      	ldrb	r3, [r7, #15]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d00f      	beq.n	8017e7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017e5a:	6839      	ldr	r1, [r7, #0]
 8017e5c:	6878      	ldr	r0, [r7, #4]
 8017e5e:	f000 f918 	bl	8018092 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	4619      	mov	r1, r3
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7fe ff7b 	bl	8016d66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2202      	movs	r2, #2
 8017e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017e78:	e014      	b.n	8017ea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f000 f9e0 	bl	8018240 <USBD_CtlSendStatus>
      break;
 8017e80:	e010      	b.n	8017ea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f000 f9dc 	bl	8018240 <USBD_CtlSendStatus>
      break;
 8017e88:	e00c      	b.n	8017ea4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017e8a:	6839      	ldr	r1, [r7, #0]
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 f900 	bl	8018092 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017e92:	4b07      	ldr	r3, [pc, #28]	@ (8017eb0 <USBD_SetConfig+0x150>)
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	4619      	mov	r1, r3
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7fe ff64 	bl	8016d66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017e9e:	2303      	movs	r3, #3
 8017ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8017ea2:	bf00      	nop
  }

  return ret;
 8017ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3710      	adds	r7, #16
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}
 8017eae:	bf00      	nop
 8017eb0:	240144e0 	.word	0x240144e0

08017eb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	88db      	ldrh	r3, [r3, #6]
 8017ec2:	2b01      	cmp	r3, #1
 8017ec4:	d004      	beq.n	8017ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017ec6:	6839      	ldr	r1, [r7, #0]
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f000 f8e2 	bl	8018092 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017ece:	e023      	b.n	8017f18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	2b02      	cmp	r3, #2
 8017eda:	dc02      	bgt.n	8017ee2 <USBD_GetConfig+0x2e>
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	dc03      	bgt.n	8017ee8 <USBD_GetConfig+0x34>
 8017ee0:	e015      	b.n	8017f0e <USBD_GetConfig+0x5a>
 8017ee2:	2b03      	cmp	r3, #3
 8017ee4:	d00b      	beq.n	8017efe <USBD_GetConfig+0x4a>
 8017ee6:	e012      	b.n	8017f0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2200      	movs	r2, #0
 8017eec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	3308      	adds	r3, #8
 8017ef2:	2201      	movs	r2, #1
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	f000 f948 	bl	801818c <USBD_CtlSendData>
        break;
 8017efc:	e00c      	b.n	8017f18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	3304      	adds	r3, #4
 8017f02:	2201      	movs	r2, #1
 8017f04:	4619      	mov	r1, r3
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f000 f940 	bl	801818c <USBD_CtlSendData>
        break;
 8017f0c:	e004      	b.n	8017f18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017f0e:	6839      	ldr	r1, [r7, #0]
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f000 f8be 	bl	8018092 <USBD_CtlError>
        break;
 8017f16:	bf00      	nop
}
 8017f18:	bf00      	nop
 8017f1a:	3708      	adds	r7, #8
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017f30:	b2db      	uxtb	r3, r3
 8017f32:	3b01      	subs	r3, #1
 8017f34:	2b02      	cmp	r3, #2
 8017f36:	d81e      	bhi.n	8017f76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	88db      	ldrh	r3, [r3, #6]
 8017f3c:	2b02      	cmp	r3, #2
 8017f3e:	d004      	beq.n	8017f4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017f40:	6839      	ldr	r1, [r7, #0]
 8017f42:	6878      	ldr	r0, [r7, #4]
 8017f44:	f000 f8a5 	bl	8018092 <USBD_CtlError>
        break;
 8017f48:	e01a      	b.n	8017f80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d005      	beq.n	8017f66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	68db      	ldr	r3, [r3, #12]
 8017f5e:	f043 0202 	orr.w	r2, r3, #2
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	330c      	adds	r3, #12
 8017f6a:	2202      	movs	r2, #2
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f000 f90c 	bl	801818c <USBD_CtlSendData>
      break;
 8017f74:	e004      	b.n	8017f80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017f76:	6839      	ldr	r1, [r7, #0]
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f000 f88a 	bl	8018092 <USBD_CtlError>
      break;
 8017f7e:	bf00      	nop
  }
}
 8017f80:	bf00      	nop
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	885b      	ldrh	r3, [r3, #2]
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d107      	bne.n	8017faa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2201      	movs	r2, #1
 8017f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f000 f94c 	bl	8018240 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017fa8:	e013      	b.n	8017fd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	885b      	ldrh	r3, [r3, #2]
 8017fae:	2b02      	cmp	r3, #2
 8017fb0:	d10b      	bne.n	8017fca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	889b      	ldrh	r3, [r3, #4]
 8017fb6:	0a1b      	lsrs	r3, r3, #8
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	b2da      	uxtb	r2, r3
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f000 f93c 	bl	8018240 <USBD_CtlSendStatus>
}
 8017fc8:	e003      	b.n	8017fd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017fca:	6839      	ldr	r1, [r7, #0]
 8017fcc:	6878      	ldr	r0, [r7, #4]
 8017fce:	f000 f860 	bl	8018092 <USBD_CtlError>
}
 8017fd2:	bf00      	nop
 8017fd4:	3708      	adds	r7, #8
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}

08017fda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b082      	sub	sp, #8
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	6078      	str	r0, [r7, #4]
 8017fe2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	3b01      	subs	r3, #1
 8017fee:	2b02      	cmp	r3, #2
 8017ff0:	d80b      	bhi.n	801800a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	885b      	ldrh	r3, [r3, #2]
 8017ff6:	2b01      	cmp	r3, #1
 8017ff8:	d10c      	bne.n	8018014 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f000 f91c 	bl	8018240 <USBD_CtlSendStatus>
      }
      break;
 8018008:	e004      	b.n	8018014 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801800a:	6839      	ldr	r1, [r7, #0]
 801800c:	6878      	ldr	r0, [r7, #4]
 801800e:	f000 f840 	bl	8018092 <USBD_CtlError>
      break;
 8018012:	e000      	b.n	8018016 <USBD_ClrFeature+0x3c>
      break;
 8018014:	bf00      	nop
  }
}
 8018016:	bf00      	nop
 8018018:	3708      	adds	r7, #8
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}

0801801e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801801e:	b580      	push	{r7, lr}
 8018020:	b084      	sub	sp, #16
 8018022:	af00      	add	r7, sp, #0
 8018024:	6078      	str	r0, [r7, #4]
 8018026:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	781a      	ldrb	r2, [r3, #0]
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	3301      	adds	r3, #1
 8018038:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	781a      	ldrb	r2, [r3, #0]
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	3301      	adds	r3, #1
 8018046:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018048:	68f8      	ldr	r0, [r7, #12]
 801804a:	f7ff fa16 	bl	801747a <SWAPBYTE>
 801804e:	4603      	mov	r3, r0
 8018050:	461a      	mov	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	3301      	adds	r3, #1
 801805a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	3301      	adds	r3, #1
 8018060:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018062:	68f8      	ldr	r0, [r7, #12]
 8018064:	f7ff fa09 	bl	801747a <SWAPBYTE>
 8018068:	4603      	mov	r3, r0
 801806a:	461a      	mov	r2, r3
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	3301      	adds	r3, #1
 8018074:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	3301      	adds	r3, #1
 801807a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801807c:	68f8      	ldr	r0, [r7, #12]
 801807e:	f7ff f9fc 	bl	801747a <SWAPBYTE>
 8018082:	4603      	mov	r3, r0
 8018084:	461a      	mov	r2, r3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	80da      	strh	r2, [r3, #6]
}
 801808a:	bf00      	nop
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b082      	sub	sp, #8
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
 801809a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801809c:	2180      	movs	r1, #128	@ 0x80
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f000 fcee 	bl	8018a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80180a4:	2100      	movs	r1, #0
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f000 fcea 	bl	8018a80 <USBD_LL_StallEP>
}
 80180ac:	bf00      	nop
 80180ae:	3708      	adds	r7, #8
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b086      	sub	sp, #24
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80180c0:	2300      	movs	r3, #0
 80180c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d042      	beq.n	8018150 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80180ce:	6938      	ldr	r0, [r7, #16]
 80180d0:	f000 f842 	bl	8018158 <USBD_GetLen>
 80180d4:	4603      	mov	r3, r0
 80180d6:	3301      	adds	r3, #1
 80180d8:	005b      	lsls	r3, r3, #1
 80180da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80180de:	d808      	bhi.n	80180f2 <USBD_GetString+0x3e>
 80180e0:	6938      	ldr	r0, [r7, #16]
 80180e2:	f000 f839 	bl	8018158 <USBD_GetLen>
 80180e6:	4603      	mov	r3, r0
 80180e8:	3301      	adds	r3, #1
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	005b      	lsls	r3, r3, #1
 80180ee:	b29a      	uxth	r2, r3
 80180f0:	e001      	b.n	80180f6 <USBD_GetString+0x42>
 80180f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80180fa:	7dfb      	ldrb	r3, [r7, #23]
 80180fc:	68ba      	ldr	r2, [r7, #8]
 80180fe:	4413      	add	r3, r2
 8018100:	687a      	ldr	r2, [r7, #4]
 8018102:	7812      	ldrb	r2, [r2, #0]
 8018104:	701a      	strb	r2, [r3, #0]
  idx++;
 8018106:	7dfb      	ldrb	r3, [r7, #23]
 8018108:	3301      	adds	r3, #1
 801810a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801810c:	7dfb      	ldrb	r3, [r7, #23]
 801810e:	68ba      	ldr	r2, [r7, #8]
 8018110:	4413      	add	r3, r2
 8018112:	2203      	movs	r2, #3
 8018114:	701a      	strb	r2, [r3, #0]
  idx++;
 8018116:	7dfb      	ldrb	r3, [r7, #23]
 8018118:	3301      	adds	r3, #1
 801811a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801811c:	e013      	b.n	8018146 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801811e:	7dfb      	ldrb	r3, [r7, #23]
 8018120:	68ba      	ldr	r2, [r7, #8]
 8018122:	4413      	add	r3, r2
 8018124:	693a      	ldr	r2, [r7, #16]
 8018126:	7812      	ldrb	r2, [r2, #0]
 8018128:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	3301      	adds	r3, #1
 801812e:	613b      	str	r3, [r7, #16]
    idx++;
 8018130:	7dfb      	ldrb	r3, [r7, #23]
 8018132:	3301      	adds	r3, #1
 8018134:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018136:	7dfb      	ldrb	r3, [r7, #23]
 8018138:	68ba      	ldr	r2, [r7, #8]
 801813a:	4413      	add	r3, r2
 801813c:	2200      	movs	r2, #0
 801813e:	701a      	strb	r2, [r3, #0]
    idx++;
 8018140:	7dfb      	ldrb	r3, [r7, #23]
 8018142:	3301      	adds	r3, #1
 8018144:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d1e7      	bne.n	801811e <USBD_GetString+0x6a>
 801814e:	e000      	b.n	8018152 <USBD_GetString+0x9e>
    return;
 8018150:	bf00      	nop
  }
}
 8018152:	3718      	adds	r7, #24
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018158:	b480      	push	{r7}
 801815a:	b085      	sub	sp, #20
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018160:	2300      	movs	r3, #0
 8018162:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018168:	e005      	b.n	8018176 <USBD_GetLen+0x1e>
  {
    len++;
 801816a:	7bfb      	ldrb	r3, [r7, #15]
 801816c:	3301      	adds	r3, #1
 801816e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	3301      	adds	r3, #1
 8018174:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018176:	68bb      	ldr	r3, [r7, #8]
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1f5      	bne.n	801816a <USBD_GetLen+0x12>
  }

  return len;
 801817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018180:	4618      	mov	r0, r3
 8018182:	3714      	adds	r7, #20
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr

0801818c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b084      	sub	sp, #16
 8018190:	af00      	add	r7, sp, #0
 8018192:	60f8      	str	r0, [r7, #12]
 8018194:	60b9      	str	r1, [r7, #8]
 8018196:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	2202      	movs	r2, #2
 801819c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	687a      	ldr	r2, [r7, #4]
 80181aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	68ba      	ldr	r2, [r7, #8]
 80181b0:	2100      	movs	r1, #0
 80181b2:	68f8      	ldr	r0, [r7, #12]
 80181b4:	f000 fced 	bl	8018b92 <USBD_LL_Transmit>

  return USBD_OK;
 80181b8:	2300      	movs	r3, #0
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	3710      	adds	r7, #16
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}

080181c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80181c2:	b580      	push	{r7, lr}
 80181c4:	b084      	sub	sp, #16
 80181c6:	af00      	add	r7, sp, #0
 80181c8:	60f8      	str	r0, [r7, #12]
 80181ca:	60b9      	str	r1, [r7, #8]
 80181cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	68ba      	ldr	r2, [r7, #8]
 80181d2:	2100      	movs	r1, #0
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f000 fcdc 	bl	8018b92 <USBD_LL_Transmit>

  return USBD_OK;
 80181da:	2300      	movs	r3, #0
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3710      	adds	r7, #16
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}

080181e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	60f8      	str	r0, [r7, #12]
 80181ec:	60b9      	str	r1, [r7, #8]
 80181ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	2203      	movs	r2, #3
 80181f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	687a      	ldr	r2, [r7, #4]
 8018204:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	68ba      	ldr	r2, [r7, #8]
 801820c:	2100      	movs	r1, #0
 801820e:	68f8      	ldr	r0, [r7, #12]
 8018210:	f000 fce0 	bl	8018bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018214:	2300      	movs	r3, #0
}
 8018216:	4618      	mov	r0, r3
 8018218:	3710      	adds	r7, #16
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}

0801821e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801821e:	b580      	push	{r7, lr}
 8018220:	b084      	sub	sp, #16
 8018222:	af00      	add	r7, sp, #0
 8018224:	60f8      	str	r0, [r7, #12]
 8018226:	60b9      	str	r1, [r7, #8]
 8018228:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	68ba      	ldr	r2, [r7, #8]
 801822e:	2100      	movs	r1, #0
 8018230:	68f8      	ldr	r0, [r7, #12]
 8018232:	f000 fccf 	bl	8018bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018236:	2300      	movs	r3, #0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3710      	adds	r7, #16
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}

08018240 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2204      	movs	r2, #4
 801824c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018250:	2300      	movs	r3, #0
 8018252:	2200      	movs	r2, #0
 8018254:	2100      	movs	r1, #0
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f000 fc9b 	bl	8018b92 <USBD_LL_Transmit>

  return USBD_OK;
 801825c:	2300      	movs	r3, #0
}
 801825e:	4618      	mov	r0, r3
 8018260:	3708      	adds	r7, #8
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}

08018266 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018266:	b580      	push	{r7, lr}
 8018268:	b082      	sub	sp, #8
 801826a:	af00      	add	r7, sp, #0
 801826c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	2205      	movs	r2, #5
 8018272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018276:	2300      	movs	r3, #0
 8018278:	2200      	movs	r2, #0
 801827a:	2100      	movs	r1, #0
 801827c:	6878      	ldr	r0, [r7, #4]
 801827e:	f000 fca9 	bl	8018bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018282:	2300      	movs	r3, #0
}
 8018284:	4618      	mov	r0, r3
 8018286:	3708      	adds	r7, #8
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8018290:	2201      	movs	r2, #1
 8018292:	4913      	ldr	r1, [pc, #76]	@ (80182e0 <MX_USB_DEVICE_Init+0x54>)
 8018294:	4813      	ldr	r0, [pc, #76]	@ (80182e4 <MX_USB_DEVICE_Init+0x58>)
 8018296:	f7fe fccd 	bl	8016c34 <USBD_Init>
 801829a:	4603      	mov	r3, r0
 801829c:	2b00      	cmp	r3, #0
 801829e:	d001      	beq.n	80182a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80182a0:	f7e9 ff88 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80182a4:	4910      	ldr	r1, [pc, #64]	@ (80182e8 <MX_USB_DEVICE_Init+0x5c>)
 80182a6:	480f      	ldr	r0, [pc, #60]	@ (80182e4 <MX_USB_DEVICE_Init+0x58>)
 80182a8:	f7fe fcf4 	bl	8016c94 <USBD_RegisterClass>
 80182ac:	4603      	mov	r3, r0
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d001      	beq.n	80182b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80182b2:	f7e9 ff7f 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80182b6:	490d      	ldr	r1, [pc, #52]	@ (80182ec <MX_USB_DEVICE_Init+0x60>)
 80182b8:	480a      	ldr	r0, [pc, #40]	@ (80182e4 <MX_USB_DEVICE_Init+0x58>)
 80182ba:	f7fe fbeb 	bl	8016a94 <USBD_CDC_RegisterInterface>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80182c4:	f7e9 ff76 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80182c8:	4806      	ldr	r0, [pc, #24]	@ (80182e4 <MX_USB_DEVICE_Init+0x58>)
 80182ca:	f7fe fd19 	bl	8016d00 <USBD_Start>
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d001      	beq.n	80182d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80182d4:	f7e9 ff6e 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80182d8:	f7f5 f94c 	bl	800d574 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80182dc:	bf00      	nop
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	240000e0 	.word	0x240000e0
 80182e4:	240144e4 	.word	0x240144e4
 80182e8:	2400004c 	.word	0x2400004c
 80182ec:	240000cc 	.word	0x240000cc

080182f0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80182f4:	2200      	movs	r2, #0
 80182f6:	4905      	ldr	r1, [pc, #20]	@ (801830c <CDC_Init_HS+0x1c>)
 80182f8:	4805      	ldr	r0, [pc, #20]	@ (8018310 <CDC_Init_HS+0x20>)
 80182fa:	f7fe fbe5 	bl	8016ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80182fe:	4905      	ldr	r1, [pc, #20]	@ (8018314 <CDC_Init_HS+0x24>)
 8018300:	4803      	ldr	r0, [pc, #12]	@ (8018310 <CDC_Init_HS+0x20>)
 8018302:	f7fe fc03 	bl	8016b0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018306:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018308:	4618      	mov	r0, r3
 801830a:	bd80      	pop	{r7, pc}
 801830c:	2401c7c0 	.word	0x2401c7c0
 8018310:	240144e4 	.word	0x240144e4
 8018314:	240147c0 	.word	0x240147c0

08018318 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8018318:	b480      	push	{r7}
 801831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801831c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801831e:	4618      	mov	r0, r3
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr

08018328 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018328:	b480      	push	{r7}
 801832a:	b083      	sub	sp, #12
 801832c:	af00      	add	r7, sp, #0
 801832e:	4603      	mov	r3, r0
 8018330:	6039      	str	r1, [r7, #0]
 8018332:	71fb      	strb	r3, [r7, #7]
 8018334:	4613      	mov	r3, r2
 8018336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8018338:	79fb      	ldrb	r3, [r7, #7]
 801833a:	2b23      	cmp	r3, #35	@ 0x23
 801833c:	d84a      	bhi.n	80183d4 <CDC_Control_HS+0xac>
 801833e:	a201      	add	r2, pc, #4	@ (adr r2, 8018344 <CDC_Control_HS+0x1c>)
 8018340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018344:	080183d5 	.word	0x080183d5
 8018348:	080183d5 	.word	0x080183d5
 801834c:	080183d5 	.word	0x080183d5
 8018350:	080183d5 	.word	0x080183d5
 8018354:	080183d5 	.word	0x080183d5
 8018358:	080183d5 	.word	0x080183d5
 801835c:	080183d5 	.word	0x080183d5
 8018360:	080183d5 	.word	0x080183d5
 8018364:	080183d5 	.word	0x080183d5
 8018368:	080183d5 	.word	0x080183d5
 801836c:	080183d5 	.word	0x080183d5
 8018370:	080183d5 	.word	0x080183d5
 8018374:	080183d5 	.word	0x080183d5
 8018378:	080183d5 	.word	0x080183d5
 801837c:	080183d5 	.word	0x080183d5
 8018380:	080183d5 	.word	0x080183d5
 8018384:	080183d5 	.word	0x080183d5
 8018388:	080183d5 	.word	0x080183d5
 801838c:	080183d5 	.word	0x080183d5
 8018390:	080183d5 	.word	0x080183d5
 8018394:	080183d5 	.word	0x080183d5
 8018398:	080183d5 	.word	0x080183d5
 801839c:	080183d5 	.word	0x080183d5
 80183a0:	080183d5 	.word	0x080183d5
 80183a4:	080183d5 	.word	0x080183d5
 80183a8:	080183d5 	.word	0x080183d5
 80183ac:	080183d5 	.word	0x080183d5
 80183b0:	080183d5 	.word	0x080183d5
 80183b4:	080183d5 	.word	0x080183d5
 80183b8:	080183d5 	.word	0x080183d5
 80183bc:	080183d5 	.word	0x080183d5
 80183c0:	080183d5 	.word	0x080183d5
 80183c4:	080183d5 	.word	0x080183d5
 80183c8:	080183d5 	.word	0x080183d5
 80183cc:	080183d5 	.word	0x080183d5
 80183d0:	080183d5 	.word	0x080183d5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80183d4:	bf00      	nop
  }

  return (USBD_OK);
 80183d6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80183d8:	4618      	mov	r0, r3
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr

080183e4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
 80183ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	4808      	ldr	r0, [pc, #32]	@ (8018414 <CDC_Receive_HS+0x30>)
 80183f2:	f7fe fb8b 	bl	8016b0c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80183f6:	4807      	ldr	r0, [pc, #28]	@ (8018414 <CDC_Receive_HS+0x30>)
 80183f8:	f7fe fbe6 	bl	8016bc8 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	461a      	mov	r2, r3
 8018402:	6879      	ldr	r1, [r7, #4]
 8018404:	4804      	ldr	r0, [pc, #16]	@ (8018418 <CDC_Receive_HS+0x34>)
 8018406:	f7ed fc95 	bl	8005d34 <VibeCheckShell_PutInput>

	return (USBD_OK);
 801840a:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801840c:	4618      	mov	r0, r3
 801840e:	3708      	adds	r7, #8
 8018410:	46bd      	mov	sp, r7
 8018412:	bd80      	pop	{r7, pc}
 8018414:	240144e4 	.word	0x240144e4
 8018418:	240009b8 	.word	0x240009b8

0801841c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	460b      	mov	r3, r1
 8018426:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018428:	2300      	movs	r3, #0
 801842a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801842c:	4b0d      	ldr	r3, [pc, #52]	@ (8018464 <CDC_Transmit_HS+0x48>)
 801842e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018432:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801843a:	2b00      	cmp	r3, #0
 801843c:	d001      	beq.n	8018442 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801843e:	2301      	movs	r3, #1
 8018440:	e00b      	b.n	801845a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8018442:	887b      	ldrh	r3, [r7, #2]
 8018444:	461a      	mov	r2, r3
 8018446:	6879      	ldr	r1, [r7, #4]
 8018448:	4806      	ldr	r0, [pc, #24]	@ (8018464 <CDC_Transmit_HS+0x48>)
 801844a:	f7fe fb3d 	bl	8016ac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801844e:	4805      	ldr	r0, [pc, #20]	@ (8018464 <CDC_Transmit_HS+0x48>)
 8018450:	f7fe fb7a 	bl	8016b48 <USBD_CDC_TransmitPacket>
 8018454:	4603      	mov	r3, r0
 8018456:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 8018458:	7bfb      	ldrb	r3, [r7, #15]
}
 801845a:	4618      	mov	r0, r3
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	240144e4 	.word	0x240144e4

08018468 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018468:	b480      	push	{r7}
 801846a:	b087      	sub	sp, #28
 801846c:	af00      	add	r7, sp, #0
 801846e:	60f8      	str	r0, [r7, #12]
 8018470:	60b9      	str	r1, [r7, #8]
 8018472:	4613      	mov	r3, r2
 8018474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018476:	2300      	movs	r3, #0
 8018478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801847a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801847e:	4618      	mov	r0, r3
 8018480:	371c      	adds	r7, #28
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr
	...

0801848c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801848c:	b480      	push	{r7}
 801848e:	b083      	sub	sp, #12
 8018490:	af00      	add	r7, sp, #0
 8018492:	4603      	mov	r3, r0
 8018494:	6039      	str	r1, [r7, #0]
 8018496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	2212      	movs	r2, #18
 801849c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801849e:	4b03      	ldr	r3, [pc, #12]	@ (80184ac <USBD_HS_DeviceDescriptor+0x20>)
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	370c      	adds	r7, #12
 80184a4:	46bd      	mov	sp, r7
 80184a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184aa:	4770      	bx	lr
 80184ac:	24000100 	.word	0x24000100

080184b0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b083      	sub	sp, #12
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	4603      	mov	r3, r0
 80184b8:	6039      	str	r1, [r7, #0]
 80184ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	2204      	movs	r2, #4
 80184c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80184c2:	4b03      	ldr	r3, [pc, #12]	@ (80184d0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	370c      	adds	r7, #12
 80184c8:	46bd      	mov	sp, r7
 80184ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ce:	4770      	bx	lr
 80184d0:	24000114 	.word	0x24000114

080184d4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b082      	sub	sp, #8
 80184d8:	af00      	add	r7, sp, #0
 80184da:	4603      	mov	r3, r0
 80184dc:	6039      	str	r1, [r7, #0]
 80184de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80184e0:	79fb      	ldrb	r3, [r7, #7]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d105      	bne.n	80184f2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80184e6:	683a      	ldr	r2, [r7, #0]
 80184e8:	4907      	ldr	r1, [pc, #28]	@ (8018508 <USBD_HS_ProductStrDescriptor+0x34>)
 80184ea:	4808      	ldr	r0, [pc, #32]	@ (801850c <USBD_HS_ProductStrDescriptor+0x38>)
 80184ec:	f7ff fde2 	bl	80180b4 <USBD_GetString>
 80184f0:	e004      	b.n	80184fc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80184f2:	683a      	ldr	r2, [r7, #0]
 80184f4:	4904      	ldr	r1, [pc, #16]	@ (8018508 <USBD_HS_ProductStrDescriptor+0x34>)
 80184f6:	4805      	ldr	r0, [pc, #20]	@ (801850c <USBD_HS_ProductStrDescriptor+0x38>)
 80184f8:	f7ff fddc 	bl	80180b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80184fc:	4b02      	ldr	r3, [pc, #8]	@ (8018508 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3708      	adds	r7, #8
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	2401cfc0 	.word	0x2401cfc0
 801850c:	0801ddb8 	.word	0x0801ddb8

08018510 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b082      	sub	sp, #8
 8018514:	af00      	add	r7, sp, #0
 8018516:	4603      	mov	r3, r0
 8018518:	6039      	str	r1, [r7, #0]
 801851a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801851c:	683a      	ldr	r2, [r7, #0]
 801851e:	4904      	ldr	r1, [pc, #16]	@ (8018530 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8018520:	4804      	ldr	r0, [pc, #16]	@ (8018534 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8018522:	f7ff fdc7 	bl	80180b4 <USBD_GetString>
  return USBD_StrDesc;
 8018526:	4b02      	ldr	r3, [pc, #8]	@ (8018530 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018528:	4618      	mov	r0, r3
 801852a:	3708      	adds	r7, #8
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}
 8018530:	2401cfc0 	.word	0x2401cfc0
 8018534:	0801ddc4 	.word	0x0801ddc4

08018538 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	4603      	mov	r3, r0
 8018540:	6039      	str	r1, [r7, #0]
 8018542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	221a      	movs	r2, #26
 8018548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801854a:	f000 f843 	bl	80185d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801854e:	4b02      	ldr	r3, [pc, #8]	@ (8018558 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8018550:	4618      	mov	r0, r3
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}
 8018558:	24000118 	.word	0x24000118

0801855c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b082      	sub	sp, #8
 8018560:	af00      	add	r7, sp, #0
 8018562:	4603      	mov	r3, r0
 8018564:	6039      	str	r1, [r7, #0]
 8018566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018568:	79fb      	ldrb	r3, [r7, #7]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d105      	bne.n	801857a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801856e:	683a      	ldr	r2, [r7, #0]
 8018570:	4907      	ldr	r1, [pc, #28]	@ (8018590 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018572:	4808      	ldr	r0, [pc, #32]	@ (8018594 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018574:	f7ff fd9e 	bl	80180b4 <USBD_GetString>
 8018578:	e004      	b.n	8018584 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801857a:	683a      	ldr	r2, [r7, #0]
 801857c:	4904      	ldr	r1, [pc, #16]	@ (8018590 <USBD_HS_ConfigStrDescriptor+0x34>)
 801857e:	4805      	ldr	r0, [pc, #20]	@ (8018594 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018580:	f7ff fd98 	bl	80180b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018584:	4b02      	ldr	r3, [pc, #8]	@ (8018590 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018586:	4618      	mov	r0, r3
 8018588:	3708      	adds	r7, #8
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	2401cfc0 	.word	0x2401cfc0
 8018594:	0801ddd0 	.word	0x0801ddd0

08018598 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	4603      	mov	r3, r0
 80185a0:	6039      	str	r1, [r7, #0]
 80185a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80185a4:	79fb      	ldrb	r3, [r7, #7]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d105      	bne.n	80185b6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80185aa:	683a      	ldr	r2, [r7, #0]
 80185ac:	4907      	ldr	r1, [pc, #28]	@ (80185cc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80185ae:	4808      	ldr	r0, [pc, #32]	@ (80185d0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80185b0:	f7ff fd80 	bl	80180b4 <USBD_GetString>
 80185b4:	e004      	b.n	80185c0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80185b6:	683a      	ldr	r2, [r7, #0]
 80185b8:	4904      	ldr	r1, [pc, #16]	@ (80185cc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80185ba:	4805      	ldr	r0, [pc, #20]	@ (80185d0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80185bc:	f7ff fd7a 	bl	80180b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80185c0:	4b02      	ldr	r3, [pc, #8]	@ (80185cc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80185c2:	4618      	mov	r0, r3
 80185c4:	3708      	adds	r7, #8
 80185c6:	46bd      	mov	sp, r7
 80185c8:	bd80      	pop	{r7, pc}
 80185ca:	bf00      	nop
 80185cc:	2401cfc0 	.word	0x2401cfc0
 80185d0:	0801dddc 	.word	0x0801dddc

080185d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b084      	sub	sp, #16
 80185d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80185da:	4b0f      	ldr	r3, [pc, #60]	@ (8018618 <Get_SerialNum+0x44>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80185e0:	4b0e      	ldr	r3, [pc, #56]	@ (801861c <Get_SerialNum+0x48>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80185e6:	4b0e      	ldr	r3, [pc, #56]	@ (8018620 <Get_SerialNum+0x4c>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	4413      	add	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d009      	beq.n	801860e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80185fa:	2208      	movs	r2, #8
 80185fc:	4909      	ldr	r1, [pc, #36]	@ (8018624 <Get_SerialNum+0x50>)
 80185fe:	68f8      	ldr	r0, [r7, #12]
 8018600:	f000 f814 	bl	801862c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018604:	2204      	movs	r2, #4
 8018606:	4908      	ldr	r1, [pc, #32]	@ (8018628 <Get_SerialNum+0x54>)
 8018608:	68b8      	ldr	r0, [r7, #8]
 801860a:	f000 f80f 	bl	801862c <IntToUnicode>
  }
}
 801860e:	bf00      	nop
 8018610:	3710      	adds	r7, #16
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	1ff1e800 	.word	0x1ff1e800
 801861c:	1ff1e804 	.word	0x1ff1e804
 8018620:	1ff1e808 	.word	0x1ff1e808
 8018624:	2400011a 	.word	0x2400011a
 8018628:	2400012a 	.word	0x2400012a

0801862c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801862c:	b480      	push	{r7}
 801862e:	b087      	sub	sp, #28
 8018630:	af00      	add	r7, sp, #0
 8018632:	60f8      	str	r0, [r7, #12]
 8018634:	60b9      	str	r1, [r7, #8]
 8018636:	4613      	mov	r3, r2
 8018638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801863a:	2300      	movs	r3, #0
 801863c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801863e:	2300      	movs	r3, #0
 8018640:	75fb      	strb	r3, [r7, #23]
 8018642:	e027      	b.n	8018694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	0f1b      	lsrs	r3, r3, #28
 8018648:	2b09      	cmp	r3, #9
 801864a:	d80b      	bhi.n	8018664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	0f1b      	lsrs	r3, r3, #28
 8018650:	b2da      	uxtb	r2, r3
 8018652:	7dfb      	ldrb	r3, [r7, #23]
 8018654:	005b      	lsls	r3, r3, #1
 8018656:	4619      	mov	r1, r3
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	440b      	add	r3, r1
 801865c:	3230      	adds	r2, #48	@ 0x30
 801865e:	b2d2      	uxtb	r2, r2
 8018660:	701a      	strb	r2, [r3, #0]
 8018662:	e00a      	b.n	801867a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	0f1b      	lsrs	r3, r3, #28
 8018668:	b2da      	uxtb	r2, r3
 801866a:	7dfb      	ldrb	r3, [r7, #23]
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4619      	mov	r1, r3
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	440b      	add	r3, r1
 8018674:	3237      	adds	r2, #55	@ 0x37
 8018676:	b2d2      	uxtb	r2, r2
 8018678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	011b      	lsls	r3, r3, #4
 801867e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018680:	7dfb      	ldrb	r3, [r7, #23]
 8018682:	005b      	lsls	r3, r3, #1
 8018684:	3301      	adds	r3, #1
 8018686:	68ba      	ldr	r2, [r7, #8]
 8018688:	4413      	add	r3, r2
 801868a:	2200      	movs	r2, #0
 801868c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801868e:	7dfb      	ldrb	r3, [r7, #23]
 8018690:	3301      	adds	r3, #1
 8018692:	75fb      	strb	r3, [r7, #23]
 8018694:	7dfa      	ldrb	r2, [r7, #23]
 8018696:	79fb      	ldrb	r3, [r7, #7]
 8018698:	429a      	cmp	r2, r3
 801869a:	d3d3      	bcc.n	8018644 <IntToUnicode+0x18>
  }
}
 801869c:	bf00      	nop
 801869e:	bf00      	nop
 80186a0:	371c      	adds	r7, #28
 80186a2:	46bd      	mov	sp, r7
 80186a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a8:	4770      	bx	lr
	...

080186ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b0b2      	sub	sp, #200	@ 0xc8
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80186b4:	f107 0310 	add.w	r3, r7, #16
 80186b8:	22b8      	movs	r2, #184	@ 0xb8
 80186ba:	2100      	movs	r1, #0
 80186bc:	4618      	mov	r0, r3
 80186be:	f001 fea4 	bl	801a40a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	4a1a      	ldr	r2, [pc, #104]	@ (8018730 <HAL_PCD_MspInit+0x84>)
 80186c8:	4293      	cmp	r3, r2
 80186ca:	d12c      	bne.n	8018726 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80186cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80186d0:	f04f 0300 	mov.w	r3, #0
 80186d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80186d8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80186dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80186e0:	f107 0310 	add.w	r3, r7, #16
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7f5 febb 	bl	800e460 <HAL_RCCEx_PeriphCLKConfig>
 80186ea:	4603      	mov	r3, r0
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d001      	beq.n	80186f4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80186f0:	f7e9 fd60 	bl	80021b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80186f4:	f7f4 ff3e 	bl	800d574 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80186f8:	4b0e      	ldr	r3, [pc, #56]	@ (8018734 <HAL_PCD_MspInit+0x88>)
 80186fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80186fe:	4a0d      	ldr	r2, [pc, #52]	@ (8018734 <HAL_PCD_MspInit+0x88>)
 8018700:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018704:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018708:	4b0a      	ldr	r3, [pc, #40]	@ (8018734 <HAL_PCD_MspInit+0x88>)
 801870a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801870e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018712:	60fb      	str	r3, [r7, #12]
 8018714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 8018716:	2201      	movs	r2, #1
 8018718:	2101      	movs	r1, #1
 801871a:	204d      	movs	r0, #77	@ 0x4d
 801871c:	f7f0 fcf1 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018720:	204d      	movs	r0, #77	@ 0x4d
 8018722:	f7f0 fd08 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018726:	bf00      	nop
 8018728:	37c8      	adds	r7, #200	@ 0xc8
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop
 8018730:	40040000 	.word	0x40040000
 8018734:	58024400 	.word	0x58024400

08018738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801874c:	4619      	mov	r1, r3
 801874e:	4610      	mov	r0, r2
 8018750:	f7fe fb23 	bl	8016d9a <USBD_LL_SetupStage>
}
 8018754:	bf00      	nop
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}

0801875c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b082      	sub	sp, #8
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	460b      	mov	r3, r1
 8018766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801876e:	78fa      	ldrb	r2, [r7, #3]
 8018770:	6879      	ldr	r1, [r7, #4]
 8018772:	4613      	mov	r3, r2
 8018774:	00db      	lsls	r3, r3, #3
 8018776:	4413      	add	r3, r2
 8018778:	009b      	lsls	r3, r3, #2
 801877a:	440b      	add	r3, r1
 801877c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018780:	681a      	ldr	r2, [r3, #0]
 8018782:	78fb      	ldrb	r3, [r7, #3]
 8018784:	4619      	mov	r1, r3
 8018786:	f7fe fb5d 	bl	8016e44 <USBD_LL_DataOutStage>
}
 801878a:	bf00      	nop
 801878c:	3708      	adds	r7, #8
 801878e:	46bd      	mov	sp, r7
 8018790:	bd80      	pop	{r7, pc}

08018792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018792:	b580      	push	{r7, lr}
 8018794:	b082      	sub	sp, #8
 8018796:	af00      	add	r7, sp, #0
 8018798:	6078      	str	r0, [r7, #4]
 801879a:	460b      	mov	r3, r1
 801879c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80187a4:	78fa      	ldrb	r2, [r7, #3]
 80187a6:	6879      	ldr	r1, [r7, #4]
 80187a8:	4613      	mov	r3, r2
 80187aa:	00db      	lsls	r3, r3, #3
 80187ac:	4413      	add	r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	440b      	add	r3, r1
 80187b2:	3320      	adds	r3, #32
 80187b4:	681a      	ldr	r2, [r3, #0]
 80187b6:	78fb      	ldrb	r3, [r7, #3]
 80187b8:	4619      	mov	r1, r3
 80187ba:	f7fe fbf6 	bl	8016faa <USBD_LL_DataInStage>
}
 80187be:	bf00      	nop
 80187c0:	3708      	adds	r7, #8
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bd80      	pop	{r7, pc}

080187c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187c6:	b580      	push	{r7, lr}
 80187c8:	b082      	sub	sp, #8
 80187ca:	af00      	add	r7, sp, #0
 80187cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fe fd30 	bl	801723a <USBD_LL_SOF>
}
 80187da:	bf00      	nop
 80187dc:	3708      	adds	r7, #8
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}

080187e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187e2:	b580      	push	{r7, lr}
 80187e4:	b084      	sub	sp, #16
 80187e6:	af00      	add	r7, sp, #0
 80187e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80187ea:	2301      	movs	r3, #1
 80187ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	79db      	ldrb	r3, [r3, #7]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d102      	bne.n	80187fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80187f6:	2300      	movs	r3, #0
 80187f8:	73fb      	strb	r3, [r7, #15]
 80187fa:	e008      	b.n	801880e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	79db      	ldrb	r3, [r3, #7]
 8018800:	2b02      	cmp	r3, #2
 8018802:	d102      	bne.n	801880a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018804:	2301      	movs	r3, #1
 8018806:	73fb      	strb	r3, [r7, #15]
 8018808:	e001      	b.n	801880e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801880a:	f7e9 fcd3 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018814:	7bfa      	ldrb	r2, [r7, #15]
 8018816:	4611      	mov	r1, r2
 8018818:	4618      	mov	r0, r3
 801881a:	f7fe fcca 	bl	80171b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018824:	4618      	mov	r0, r3
 8018826:	f7fe fc72 	bl	801710e <USBD_LL_Reset>
}
 801882a:	bf00      	nop
 801882c:	3710      	adds	r7, #16
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
	...

08018834 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018842:	4618      	mov	r0, r3
 8018844:	f7fe fcc5 	bl	80171d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	687a      	ldr	r2, [r7, #4]
 8018854:	6812      	ldr	r2, [r2, #0]
 8018856:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801885a:	f043 0301 	orr.w	r3, r3, #1
 801885e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	7adb      	ldrb	r3, [r3, #11]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d005      	beq.n	8018874 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018868:	4b04      	ldr	r3, [pc, #16]	@ (801887c <HAL_PCD_SuspendCallback+0x48>)
 801886a:	691b      	ldr	r3, [r3, #16]
 801886c:	4a03      	ldr	r2, [pc, #12]	@ (801887c <HAL_PCD_SuspendCallback+0x48>)
 801886e:	f043 0306 	orr.w	r3, r3, #6
 8018872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018874:	bf00      	nop
 8018876:	3708      	adds	r7, #8
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	e000ed00 	.word	0xe000ed00

08018880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801888e:	4618      	mov	r0, r3
 8018890:	f7fe fcbb 	bl	801720a <USBD_LL_Resume>
}
 8018894:	bf00      	nop
 8018896:	3708      	adds	r7, #8
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}

0801889c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801889c:	b580      	push	{r7, lr}
 801889e:	b082      	sub	sp, #8
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
 80188a4:	460b      	mov	r3, r1
 80188a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80188ae:	78fa      	ldrb	r2, [r7, #3]
 80188b0:	4611      	mov	r1, r2
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7fe fd13 	bl	80172de <USBD_LL_IsoOUTIncomplete>
}
 80188b8:	bf00      	nop
 80188ba:	3708      	adds	r7, #8
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}

080188c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	460b      	mov	r3, r1
 80188ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80188d2:	78fa      	ldrb	r2, [r7, #3]
 80188d4:	4611      	mov	r1, r2
 80188d6:	4618      	mov	r0, r3
 80188d8:	f7fe fccf 	bl	801727a <USBD_LL_IsoINIncomplete>
}
 80188dc:	bf00      	nop
 80188de:	3708      	adds	r7, #8
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7fe fd25 	bl	8017342 <USBD_LL_DevConnected>
}
 80188f8:	bf00      	nop
 80188fa:	3708      	adds	r7, #8
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}

08018900 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801890e:	4618      	mov	r0, r3
 8018910:	f7fe fd22 	bl	8017358 <USBD_LL_DevDisconnected>
}
 8018914:	bf00      	nop
 8018916:	3708      	adds	r7, #8
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	781b      	ldrb	r3, [r3, #0]
 8018928:	2b01      	cmp	r3, #1
 801892a:	d140      	bne.n	80189ae <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801892c:	4a22      	ldr	r2, [pc, #136]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	4a20      	ldr	r2, [pc, #128]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018938:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801893c:	4b1e      	ldr	r3, [pc, #120]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801893e:	4a1f      	ldr	r2, [pc, #124]	@ (80189bc <USBD_LL_Init+0xa0>)
 8018940:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8018942:	4b1d      	ldr	r3, [pc, #116]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018944:	2209      	movs	r2, #9
 8018946:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018948:	4b1b      	ldr	r3, [pc, #108]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801894a:	2202      	movs	r2, #2
 801894c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801894e:	4b1a      	ldr	r3, [pc, #104]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018950:	2200      	movs	r2, #0
 8018952:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018954:	4b18      	ldr	r3, [pc, #96]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018956:	2202      	movs	r2, #2
 8018958:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801895a:	4b17      	ldr	r3, [pc, #92]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801895c:	2200      	movs	r2, #0
 801895e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8018960:	4b15      	ldr	r3, [pc, #84]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018962:	2200      	movs	r2, #0
 8018964:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018966:	4b14      	ldr	r3, [pc, #80]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018968:	2200      	movs	r2, #0
 801896a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801896c:	4b12      	ldr	r3, [pc, #72]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801896e:	2200      	movs	r2, #0
 8018970:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8018972:	4b11      	ldr	r3, [pc, #68]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018974:	2200      	movs	r2, #0
 8018976:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018978:	4b0f      	ldr	r3, [pc, #60]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801897a:	2200      	movs	r2, #0
 801897c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801897e:	480e      	ldr	r0, [pc, #56]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018980:	f7f3 fb1f 	bl	800bfc2 <HAL_PCD_Init>
 8018984:	4603      	mov	r3, r0
 8018986:	2b00      	cmp	r3, #0
 8018988:	d001      	beq.n	801898e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801898a:	f7e9 fc13 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801898e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018992:	4809      	ldr	r0, [pc, #36]	@ (80189b8 <USBD_LL_Init+0x9c>)
 8018994:	f7f4 fd73 	bl	800d47e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8018998:	2280      	movs	r2, #128	@ 0x80
 801899a:	2100      	movs	r1, #0
 801899c:	4806      	ldr	r0, [pc, #24]	@ (80189b8 <USBD_LL_Init+0x9c>)
 801899e:	f7f4 fd27 	bl	800d3f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80189a2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80189a6:	2101      	movs	r1, #1
 80189a8:	4803      	ldr	r0, [pc, #12]	@ (80189b8 <USBD_LL_Init+0x9c>)
 80189aa:	f7f4 fd21 	bl	800d3f0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80189ae:	2300      	movs	r3, #0
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	3708      	adds	r7, #8
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}
 80189b8:	2401d1c0 	.word	0x2401d1c0
 80189bc:	40040000 	.word	0x40040000

080189c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b084      	sub	sp, #16
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189c8:	2300      	movs	r3, #0
 80189ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189cc:	2300      	movs	r3, #0
 80189ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7f3 fbff 	bl	800c1da <HAL_PCD_Start>
 80189dc:	4603      	mov	r3, r0
 80189de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189e0:	7bfb      	ldrb	r3, [r7, #15]
 80189e2:	4618      	mov	r0, r3
 80189e4:	f000 f942 	bl	8018c6c <USBD_Get_USB_Status>
 80189e8:	4603      	mov	r3, r0
 80189ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3710      	adds	r7, #16
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}

080189f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80189f6:	b580      	push	{r7, lr}
 80189f8:	b084      	sub	sp, #16
 80189fa:	af00      	add	r7, sp, #0
 80189fc:	6078      	str	r0, [r7, #4]
 80189fe:	4608      	mov	r0, r1
 8018a00:	4611      	mov	r1, r2
 8018a02:	461a      	mov	r2, r3
 8018a04:	4603      	mov	r3, r0
 8018a06:	70fb      	strb	r3, [r7, #3]
 8018a08:	460b      	mov	r3, r1
 8018a0a:	70bb      	strb	r3, [r7, #2]
 8018a0c:	4613      	mov	r3, r2
 8018a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a10:	2300      	movs	r3, #0
 8018a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a14:	2300      	movs	r3, #0
 8018a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018a1e:	78bb      	ldrb	r3, [r7, #2]
 8018a20:	883a      	ldrh	r2, [r7, #0]
 8018a22:	78f9      	ldrb	r1, [r7, #3]
 8018a24:	f7f4 f900 	bl	800cc28 <HAL_PCD_EP_Open>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a2c:	7bfb      	ldrb	r3, [r7, #15]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f000 f91c 	bl	8018c6c <USBD_Get_USB_Status>
 8018a34:	4603      	mov	r3, r0
 8018a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3710      	adds	r7, #16
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}

08018a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a42:	b580      	push	{r7, lr}
 8018a44:	b084      	sub	sp, #16
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	6078      	str	r0, [r7, #4]
 8018a4a:	460b      	mov	r3, r1
 8018a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a52:	2300      	movs	r3, #0
 8018a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018a5c:	78fa      	ldrb	r2, [r7, #3]
 8018a5e:	4611      	mov	r1, r2
 8018a60:	4618      	mov	r0, r3
 8018a62:	f7f4 f949 	bl	800ccf8 <HAL_PCD_EP_Close>
 8018a66:	4603      	mov	r3, r0
 8018a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a6a:	7bfb      	ldrb	r3, [r7, #15]
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f000 f8fd 	bl	8018c6c <USBD_Get_USB_Status>
 8018a72:	4603      	mov	r3, r0
 8018a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3710      	adds	r7, #16
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}

08018a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	460b      	mov	r3, r1
 8018a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a90:	2300      	movs	r3, #0
 8018a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018a9a:	78fa      	ldrb	r2, [r7, #3]
 8018a9c:	4611      	mov	r1, r2
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7f4 fa01 	bl	800cea6 <HAL_PCD_EP_SetStall>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018aa8:	7bfb      	ldrb	r3, [r7, #15]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f000 f8de 	bl	8018c6c <USBD_Get_USB_Status>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3710      	adds	r7, #16
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}

08018abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018abe:	b580      	push	{r7, lr}
 8018ac0:	b084      	sub	sp, #16
 8018ac2:	af00      	add	r7, sp, #0
 8018ac4:	6078      	str	r0, [r7, #4]
 8018ac6:	460b      	mov	r3, r1
 8018ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aca:	2300      	movs	r3, #0
 8018acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ad8:	78fa      	ldrb	r2, [r7, #3]
 8018ada:	4611      	mov	r1, r2
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7f4 fa45 	bl	800cf6c <HAL_PCD_EP_ClrStall>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ae6:	7bfb      	ldrb	r3, [r7, #15]
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f000 f8bf 	bl	8018c6c <USBD_Get_USB_Status>
 8018aee:	4603      	mov	r3, r0
 8018af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	3710      	adds	r7, #16
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bd80      	pop	{r7, pc}

08018afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018afc:	b480      	push	{r7}
 8018afe:	b085      	sub	sp, #20
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
 8018b04:	460b      	mov	r3, r1
 8018b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	da0b      	bge.n	8018b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018b18:	78fb      	ldrb	r3, [r7, #3]
 8018b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018b1e:	68f9      	ldr	r1, [r7, #12]
 8018b20:	4613      	mov	r3, r2
 8018b22:	00db      	lsls	r3, r3, #3
 8018b24:	4413      	add	r3, r2
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	440b      	add	r3, r1
 8018b2a:	3316      	adds	r3, #22
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	e00b      	b.n	8018b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018b30:	78fb      	ldrb	r3, [r7, #3]
 8018b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018b36:	68f9      	ldr	r1, [r7, #12]
 8018b38:	4613      	mov	r3, r2
 8018b3a:	00db      	lsls	r3, r3, #3
 8018b3c:	4413      	add	r3, r2
 8018b3e:	009b      	lsls	r3, r3, #2
 8018b40:	440b      	add	r3, r1
 8018b42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3714      	adds	r7, #20
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b52:	4770      	bx	lr

08018b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b60:	2300      	movs	r3, #0
 8018b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b64:	2300      	movs	r3, #0
 8018b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018b6e:	78fa      	ldrb	r2, [r7, #3]
 8018b70:	4611      	mov	r1, r2
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7f4 f834 	bl	800cbe0 <HAL_PCD_SetAddress>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b7c:	7bfb      	ldrb	r3, [r7, #15]
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f000 f874 	bl	8018c6c <USBD_Get_USB_Status>
 8018b84:	4603      	mov	r3, r0
 8018b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	3710      	adds	r7, #16
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}

08018b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018b92:	b580      	push	{r7, lr}
 8018b94:	b086      	sub	sp, #24
 8018b96:	af00      	add	r7, sp, #0
 8018b98:	60f8      	str	r0, [r7, #12]
 8018b9a:	607a      	str	r2, [r7, #4]
 8018b9c:	603b      	str	r3, [r7, #0]
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bb0:	7af9      	ldrb	r1, [r7, #11]
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	687a      	ldr	r2, [r7, #4]
 8018bb6:	f7f4 f93c 	bl	800ce32 <HAL_PCD_EP_Transmit>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018bbe:	7dfb      	ldrb	r3, [r7, #23]
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f000 f853 	bl	8018c6c <USBD_Get_USB_Status>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3718      	adds	r7, #24
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}

08018bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b086      	sub	sp, #24
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	60f8      	str	r0, [r7, #12]
 8018bdc:	607a      	str	r2, [r7, #4]
 8018bde:	603b      	str	r3, [r7, #0]
 8018be0:	460b      	mov	r3, r1
 8018be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018be4:	2300      	movs	r3, #0
 8018be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018be8:	2300      	movs	r3, #0
 8018bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bf2:	7af9      	ldrb	r1, [r7, #11]
 8018bf4:	683b      	ldr	r3, [r7, #0]
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	f7f4 f8c8 	bl	800cd8c <HAL_PCD_EP_Receive>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c00:	7dfb      	ldrb	r3, [r7, #23]
 8018c02:	4618      	mov	r0, r3
 8018c04:	f000 f832 	bl	8018c6c <USBD_Get_USB_Status>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3718      	adds	r7, #24
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}

08018c16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c16:	b580      	push	{r7, lr}
 8018c18:	b082      	sub	sp, #8
 8018c1a:	af00      	add	r7, sp, #0
 8018c1c:	6078      	str	r0, [r7, #4]
 8018c1e:	460b      	mov	r3, r1
 8018c20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018c28:	78fa      	ldrb	r2, [r7, #3]
 8018c2a:	4611      	mov	r1, r2
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f7f4 f8e8 	bl	800ce02 <HAL_PCD_EP_GetRxCount>
 8018c32:	4603      	mov	r3, r0
}
 8018c34:	4618      	mov	r0, r3
 8018c36:	3708      	adds	r7, #8
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018c3c:	b480      	push	{r7}
 8018c3e:	b083      	sub	sp, #12
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018c44:	4b03      	ldr	r3, [pc, #12]	@ (8018c54 <USBD_static_malloc+0x18>)
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	370c      	adds	r7, #12
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c50:	4770      	bx	lr
 8018c52:	bf00      	nop
 8018c54:	2401d6a4 	.word	0x2401d6a4

08018c58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018c60:	bf00      	nop
 8018c62:	370c      	adds	r7, #12
 8018c64:	46bd      	mov	sp, r7
 8018c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6a:	4770      	bx	lr

08018c6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b085      	sub	sp, #20
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	4603      	mov	r3, r0
 8018c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c76:	2300      	movs	r3, #0
 8018c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018c7a:	79fb      	ldrb	r3, [r7, #7]
 8018c7c:	2b03      	cmp	r3, #3
 8018c7e:	d817      	bhi.n	8018cb0 <USBD_Get_USB_Status+0x44>
 8018c80:	a201      	add	r2, pc, #4	@ (adr r2, 8018c88 <USBD_Get_USB_Status+0x1c>)
 8018c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c86:	bf00      	nop
 8018c88:	08018c99 	.word	0x08018c99
 8018c8c:	08018c9f 	.word	0x08018c9f
 8018c90:	08018ca5 	.word	0x08018ca5
 8018c94:	08018cab 	.word	0x08018cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8018c9c:	e00b      	b.n	8018cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018c9e:	2303      	movs	r3, #3
 8018ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8018ca2:	e008      	b.n	8018cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ca8:	e005      	b.n	8018cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018caa:	2303      	movs	r3, #3
 8018cac:	73fb      	strb	r3, [r7, #15]
    break;
 8018cae:	e002      	b.n	8018cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018cb0:	2303      	movs	r3, #3
 8018cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8018cb4:	bf00      	nop
  }
  return usb_status;
 8018cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3714      	adds	r7, #20
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc2:	4770      	bx	lr

08018cc4 <atof>:
 8018cc4:	2100      	movs	r1, #0
 8018cc6:	f000 bdb5 	b.w	8019834 <strtod>

08018cca <atoi>:
 8018cca:	220a      	movs	r2, #10
 8018ccc:	2100      	movs	r1, #0
 8018cce:	f000 be37 	b.w	8019940 <strtol>

08018cd2 <sulp>:
 8018cd2:	b570      	push	{r4, r5, r6, lr}
 8018cd4:	4604      	mov	r4, r0
 8018cd6:	460d      	mov	r5, r1
 8018cd8:	4616      	mov	r6, r2
 8018cda:	ec45 4b10 	vmov	d0, r4, r5
 8018cde:	f003 f9e9 	bl	801c0b4 <__ulp>
 8018ce2:	b17e      	cbz	r6, 8018d04 <sulp+0x32>
 8018ce4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	dd09      	ble.n	8018d04 <sulp+0x32>
 8018cf0:	051b      	lsls	r3, r3, #20
 8018cf2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8018cfc:	ec41 0b17 	vmov	d7, r0, r1
 8018d00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08018d08 <_strtod_l>:
 8018d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d0c:	ed2d 8b0a 	vpush	{d8-d12}
 8018d10:	b097      	sub	sp, #92	@ 0x5c
 8018d12:	4688      	mov	r8, r1
 8018d14:	920e      	str	r2, [sp, #56]	@ 0x38
 8018d16:	2200      	movs	r2, #0
 8018d18:	9212      	str	r2, [sp, #72]	@ 0x48
 8018d1a:	9005      	str	r0, [sp, #20]
 8018d1c:	f04f 0a00 	mov.w	sl, #0
 8018d20:	f04f 0b00 	mov.w	fp, #0
 8018d24:	460a      	mov	r2, r1
 8018d26:	9211      	str	r2, [sp, #68]	@ 0x44
 8018d28:	7811      	ldrb	r1, [r2, #0]
 8018d2a:	292b      	cmp	r1, #43	@ 0x2b
 8018d2c:	d04c      	beq.n	8018dc8 <_strtod_l+0xc0>
 8018d2e:	d839      	bhi.n	8018da4 <_strtod_l+0x9c>
 8018d30:	290d      	cmp	r1, #13
 8018d32:	d833      	bhi.n	8018d9c <_strtod_l+0x94>
 8018d34:	2908      	cmp	r1, #8
 8018d36:	d833      	bhi.n	8018da0 <_strtod_l+0x98>
 8018d38:	2900      	cmp	r1, #0
 8018d3a:	d03c      	beq.n	8018db6 <_strtod_l+0xae>
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	9208      	str	r2, [sp, #32]
 8018d40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018d42:	782a      	ldrb	r2, [r5, #0]
 8018d44:	2a30      	cmp	r2, #48	@ 0x30
 8018d46:	f040 80b5 	bne.w	8018eb4 <_strtod_l+0x1ac>
 8018d4a:	786a      	ldrb	r2, [r5, #1]
 8018d4c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018d50:	2a58      	cmp	r2, #88	@ 0x58
 8018d52:	d170      	bne.n	8018e36 <_strtod_l+0x12e>
 8018d54:	9302      	str	r3, [sp, #8]
 8018d56:	9b08      	ldr	r3, [sp, #32]
 8018d58:	9301      	str	r3, [sp, #4]
 8018d5a:	ab12      	add	r3, sp, #72	@ 0x48
 8018d5c:	9300      	str	r3, [sp, #0]
 8018d5e:	4a8b      	ldr	r2, [pc, #556]	@ (8018f8c <_strtod_l+0x284>)
 8018d60:	9805      	ldr	r0, [sp, #20]
 8018d62:	ab13      	add	r3, sp, #76	@ 0x4c
 8018d64:	a911      	add	r1, sp, #68	@ 0x44
 8018d66:	f002 fa97 	bl	801b298 <__gethex>
 8018d6a:	f010 060f 	ands.w	r6, r0, #15
 8018d6e:	4604      	mov	r4, r0
 8018d70:	d005      	beq.n	8018d7e <_strtod_l+0x76>
 8018d72:	2e06      	cmp	r6, #6
 8018d74:	d12a      	bne.n	8018dcc <_strtod_l+0xc4>
 8018d76:	3501      	adds	r5, #1
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9511      	str	r5, [sp, #68]	@ 0x44
 8018d7c:	9308      	str	r3, [sp, #32]
 8018d7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	f040 852f 	bne.w	80197e4 <_strtod_l+0xadc>
 8018d86:	9b08      	ldr	r3, [sp, #32]
 8018d88:	ec4b ab10 	vmov	d0, sl, fp
 8018d8c:	b1cb      	cbz	r3, 8018dc2 <_strtod_l+0xba>
 8018d8e:	eeb1 0b40 	vneg.f64	d0, d0
 8018d92:	b017      	add	sp, #92	@ 0x5c
 8018d94:	ecbd 8b0a 	vpop	{d8-d12}
 8018d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d9c:	2920      	cmp	r1, #32
 8018d9e:	d1cd      	bne.n	8018d3c <_strtod_l+0x34>
 8018da0:	3201      	adds	r2, #1
 8018da2:	e7c0      	b.n	8018d26 <_strtod_l+0x1e>
 8018da4:	292d      	cmp	r1, #45	@ 0x2d
 8018da6:	d1c9      	bne.n	8018d3c <_strtod_l+0x34>
 8018da8:	2101      	movs	r1, #1
 8018daa:	9108      	str	r1, [sp, #32]
 8018dac:	1c51      	adds	r1, r2, #1
 8018dae:	9111      	str	r1, [sp, #68]	@ 0x44
 8018db0:	7852      	ldrb	r2, [r2, #1]
 8018db2:	2a00      	cmp	r2, #0
 8018db4:	d1c4      	bne.n	8018d40 <_strtod_l+0x38>
 8018db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018db8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	f040 850f 	bne.w	80197e0 <_strtod_l+0xad8>
 8018dc2:	ec4b ab10 	vmov	d0, sl, fp
 8018dc6:	e7e4      	b.n	8018d92 <_strtod_l+0x8a>
 8018dc8:	2100      	movs	r1, #0
 8018dca:	e7ee      	b.n	8018daa <_strtod_l+0xa2>
 8018dcc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018dce:	b13a      	cbz	r2, 8018de0 <_strtod_l+0xd8>
 8018dd0:	2135      	movs	r1, #53	@ 0x35
 8018dd2:	a814      	add	r0, sp, #80	@ 0x50
 8018dd4:	f003 fa65 	bl	801c2a2 <__copybits>
 8018dd8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018dda:	9805      	ldr	r0, [sp, #20]
 8018ddc:	f002 fe36 	bl	801ba4c <_Bfree>
 8018de0:	1e73      	subs	r3, r6, #1
 8018de2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018de4:	2b04      	cmp	r3, #4
 8018de6:	d806      	bhi.n	8018df6 <_strtod_l+0xee>
 8018de8:	e8df f003 	tbb	[pc, r3]
 8018dec:	201d0314 	.word	0x201d0314
 8018df0:	14          	.byte	0x14
 8018df1:	00          	.byte	0x00
 8018df2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8018df6:	05e3      	lsls	r3, r4, #23
 8018df8:	bf48      	it	mi
 8018dfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018e02:	0d1b      	lsrs	r3, r3, #20
 8018e04:	051b      	lsls	r3, r3, #20
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d1b9      	bne.n	8018d7e <_strtod_l+0x76>
 8018e0a:	f001 fb6f 	bl	801a4ec <__errno>
 8018e0e:	2322      	movs	r3, #34	@ 0x22
 8018e10:	6003      	str	r3, [r0, #0]
 8018e12:	e7b4      	b.n	8018d7e <_strtod_l+0x76>
 8018e14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018e18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018e1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018e20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018e24:	e7e7      	b.n	8018df6 <_strtod_l+0xee>
 8018e26:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018f94 <_strtod_l+0x28c>
 8018e2a:	e7e4      	b.n	8018df6 <_strtod_l+0xee>
 8018e2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018e30:	f04f 3aff 	mov.w	sl, #4294967295
 8018e34:	e7df      	b.n	8018df6 <_strtod_l+0xee>
 8018e36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e38:	1c5a      	adds	r2, r3, #1
 8018e3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8018e3c:	785b      	ldrb	r3, [r3, #1]
 8018e3e:	2b30      	cmp	r3, #48	@ 0x30
 8018e40:	d0f9      	beq.n	8018e36 <_strtod_l+0x12e>
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d09b      	beq.n	8018d7e <_strtod_l+0x76>
 8018e46:	2301      	movs	r3, #1
 8018e48:	2600      	movs	r6, #0
 8018e4a:	9307      	str	r3, [sp, #28]
 8018e4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018e50:	46b1      	mov	r9, r6
 8018e52:	4635      	mov	r5, r6
 8018e54:	220a      	movs	r2, #10
 8018e56:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018e58:	7804      	ldrb	r4, [r0, #0]
 8018e5a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018e5e:	b2d9      	uxtb	r1, r3
 8018e60:	2909      	cmp	r1, #9
 8018e62:	d929      	bls.n	8018eb8 <_strtod_l+0x1b0>
 8018e64:	494a      	ldr	r1, [pc, #296]	@ (8018f90 <_strtod_l+0x288>)
 8018e66:	2201      	movs	r2, #1
 8018e68:	f001 fae4 	bl	801a434 <strncmp>
 8018e6c:	b378      	cbz	r0, 8018ece <_strtod_l+0x1c6>
 8018e6e:	2000      	movs	r0, #0
 8018e70:	4622      	mov	r2, r4
 8018e72:	462b      	mov	r3, r5
 8018e74:	4607      	mov	r7, r0
 8018e76:	9006      	str	r0, [sp, #24]
 8018e78:	2a65      	cmp	r2, #101	@ 0x65
 8018e7a:	d001      	beq.n	8018e80 <_strtod_l+0x178>
 8018e7c:	2a45      	cmp	r2, #69	@ 0x45
 8018e7e:	d117      	bne.n	8018eb0 <_strtod_l+0x1a8>
 8018e80:	b91b      	cbnz	r3, 8018e8a <_strtod_l+0x182>
 8018e82:	9b07      	ldr	r3, [sp, #28]
 8018e84:	4303      	orrs	r3, r0
 8018e86:	d096      	beq.n	8018db6 <_strtod_l+0xae>
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8018e8e:	f108 0201 	add.w	r2, r8, #1
 8018e92:	9211      	str	r2, [sp, #68]	@ 0x44
 8018e94:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018e98:	2a2b      	cmp	r2, #43	@ 0x2b
 8018e9a:	d06b      	beq.n	8018f74 <_strtod_l+0x26c>
 8018e9c:	2a2d      	cmp	r2, #45	@ 0x2d
 8018e9e:	d071      	beq.n	8018f84 <_strtod_l+0x27c>
 8018ea0:	f04f 0e00 	mov.w	lr, #0
 8018ea4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018ea8:	2c09      	cmp	r4, #9
 8018eaa:	d979      	bls.n	8018fa0 <_strtod_l+0x298>
 8018eac:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018eb0:	2400      	movs	r4, #0
 8018eb2:	e094      	b.n	8018fde <_strtod_l+0x2d6>
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	e7c7      	b.n	8018e48 <_strtod_l+0x140>
 8018eb8:	2d08      	cmp	r5, #8
 8018eba:	f100 0001 	add.w	r0, r0, #1
 8018ebe:	bfd4      	ite	le
 8018ec0:	fb02 3909 	mlale	r9, r2, r9, r3
 8018ec4:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018ec8:	3501      	adds	r5, #1
 8018eca:	9011      	str	r0, [sp, #68]	@ 0x44
 8018ecc:	e7c3      	b.n	8018e56 <_strtod_l+0x14e>
 8018ece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ed0:	1c5a      	adds	r2, r3, #1
 8018ed2:	9211      	str	r2, [sp, #68]	@ 0x44
 8018ed4:	785a      	ldrb	r2, [r3, #1]
 8018ed6:	b375      	cbz	r5, 8018f36 <_strtod_l+0x22e>
 8018ed8:	4607      	mov	r7, r0
 8018eda:	462b      	mov	r3, r5
 8018edc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018ee0:	2909      	cmp	r1, #9
 8018ee2:	d913      	bls.n	8018f0c <_strtod_l+0x204>
 8018ee4:	2101      	movs	r1, #1
 8018ee6:	9106      	str	r1, [sp, #24]
 8018ee8:	e7c6      	b.n	8018e78 <_strtod_l+0x170>
 8018eea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018eec:	1c5a      	adds	r2, r3, #1
 8018eee:	9211      	str	r2, [sp, #68]	@ 0x44
 8018ef0:	785a      	ldrb	r2, [r3, #1]
 8018ef2:	3001      	adds	r0, #1
 8018ef4:	2a30      	cmp	r2, #48	@ 0x30
 8018ef6:	d0f8      	beq.n	8018eea <_strtod_l+0x1e2>
 8018ef8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018efc:	2b08      	cmp	r3, #8
 8018efe:	f200 8476 	bhi.w	80197ee <_strtod_l+0xae6>
 8018f02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f06:	4607      	mov	r7, r0
 8018f08:	2000      	movs	r0, #0
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	3a30      	subs	r2, #48	@ 0x30
 8018f0e:	f100 0101 	add.w	r1, r0, #1
 8018f12:	d023      	beq.n	8018f5c <_strtod_l+0x254>
 8018f14:	440f      	add	r7, r1
 8018f16:	eb00 0c03 	add.w	ip, r0, r3
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	240a      	movs	r4, #10
 8018f1e:	4561      	cmp	r1, ip
 8018f20:	d10b      	bne.n	8018f3a <_strtod_l+0x232>
 8018f22:	1c5c      	adds	r4, r3, #1
 8018f24:	4403      	add	r3, r0
 8018f26:	2b08      	cmp	r3, #8
 8018f28:	4404      	add	r4, r0
 8018f2a:	dc11      	bgt.n	8018f50 <_strtod_l+0x248>
 8018f2c:	230a      	movs	r3, #10
 8018f2e:	fb03 2909 	mla	r9, r3, r9, r2
 8018f32:	2100      	movs	r1, #0
 8018f34:	e013      	b.n	8018f5e <_strtod_l+0x256>
 8018f36:	4628      	mov	r0, r5
 8018f38:	e7dc      	b.n	8018ef4 <_strtod_l+0x1ec>
 8018f3a:	2908      	cmp	r1, #8
 8018f3c:	f101 0101 	add.w	r1, r1, #1
 8018f40:	dc02      	bgt.n	8018f48 <_strtod_l+0x240>
 8018f42:	fb04 f909 	mul.w	r9, r4, r9
 8018f46:	e7ea      	b.n	8018f1e <_strtod_l+0x216>
 8018f48:	2910      	cmp	r1, #16
 8018f4a:	bfd8      	it	le
 8018f4c:	4366      	mulle	r6, r4
 8018f4e:	e7e6      	b.n	8018f1e <_strtod_l+0x216>
 8018f50:	2b0f      	cmp	r3, #15
 8018f52:	dcee      	bgt.n	8018f32 <_strtod_l+0x22a>
 8018f54:	230a      	movs	r3, #10
 8018f56:	fb03 2606 	mla	r6, r3, r6, r2
 8018f5a:	e7ea      	b.n	8018f32 <_strtod_l+0x22a>
 8018f5c:	461c      	mov	r4, r3
 8018f5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018f60:	1c5a      	adds	r2, r3, #1
 8018f62:	9211      	str	r2, [sp, #68]	@ 0x44
 8018f64:	785a      	ldrb	r2, [r3, #1]
 8018f66:	4608      	mov	r0, r1
 8018f68:	4623      	mov	r3, r4
 8018f6a:	e7b7      	b.n	8018edc <_strtod_l+0x1d4>
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	2700      	movs	r7, #0
 8018f70:	9306      	str	r3, [sp, #24]
 8018f72:	e786      	b.n	8018e82 <_strtod_l+0x17a>
 8018f74:	f04f 0e00 	mov.w	lr, #0
 8018f78:	f108 0202 	add.w	r2, r8, #2
 8018f7c:	9211      	str	r2, [sp, #68]	@ 0x44
 8018f7e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018f82:	e78f      	b.n	8018ea4 <_strtod_l+0x19c>
 8018f84:	f04f 0e01 	mov.w	lr, #1
 8018f88:	e7f6      	b.n	8018f78 <_strtod_l+0x270>
 8018f8a:	bf00      	nop
 8018f8c:	0801e72c 	.word	0x0801e72c
 8018f90:	0801e714 	.word	0x0801e714
 8018f94:	7ff00000 	.word	0x7ff00000
 8018f98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018f9a:	1c54      	adds	r4, r2, #1
 8018f9c:	9411      	str	r4, [sp, #68]	@ 0x44
 8018f9e:	7852      	ldrb	r2, [r2, #1]
 8018fa0:	2a30      	cmp	r2, #48	@ 0x30
 8018fa2:	d0f9      	beq.n	8018f98 <_strtod_l+0x290>
 8018fa4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018fa8:	2c08      	cmp	r4, #8
 8018faa:	d881      	bhi.n	8018eb0 <_strtod_l+0x1a8>
 8018fac:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018fb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8018fb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018fb6:	1c51      	adds	r1, r2, #1
 8018fb8:	9111      	str	r1, [sp, #68]	@ 0x44
 8018fba:	7852      	ldrb	r2, [r2, #1]
 8018fbc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018fc0:	2c09      	cmp	r4, #9
 8018fc2:	d938      	bls.n	8019036 <_strtod_l+0x32e>
 8018fc4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018fc6:	1b0c      	subs	r4, r1, r4
 8018fc8:	2c08      	cmp	r4, #8
 8018fca:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018fce:	dc02      	bgt.n	8018fd6 <_strtod_l+0x2ce>
 8018fd0:	4564      	cmp	r4, ip
 8018fd2:	bfa8      	it	ge
 8018fd4:	4664      	movge	r4, ip
 8018fd6:	f1be 0f00 	cmp.w	lr, #0
 8018fda:	d000      	beq.n	8018fde <_strtod_l+0x2d6>
 8018fdc:	4264      	negs	r4, r4
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d14e      	bne.n	8019080 <_strtod_l+0x378>
 8018fe2:	9b07      	ldr	r3, [sp, #28]
 8018fe4:	4318      	orrs	r0, r3
 8018fe6:	f47f aeca 	bne.w	8018d7e <_strtod_l+0x76>
 8018fea:	9b06      	ldr	r3, [sp, #24]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	f47f aee2 	bne.w	8018db6 <_strtod_l+0xae>
 8018ff2:	2a69      	cmp	r2, #105	@ 0x69
 8018ff4:	d027      	beq.n	8019046 <_strtod_l+0x33e>
 8018ff6:	dc24      	bgt.n	8019042 <_strtod_l+0x33a>
 8018ff8:	2a49      	cmp	r2, #73	@ 0x49
 8018ffa:	d024      	beq.n	8019046 <_strtod_l+0x33e>
 8018ffc:	2a4e      	cmp	r2, #78	@ 0x4e
 8018ffe:	f47f aeda 	bne.w	8018db6 <_strtod_l+0xae>
 8019002:	4997      	ldr	r1, [pc, #604]	@ (8019260 <_strtod_l+0x558>)
 8019004:	a811      	add	r0, sp, #68	@ 0x44
 8019006:	f002 fb69 	bl	801b6dc <__match>
 801900a:	2800      	cmp	r0, #0
 801900c:	f43f aed3 	beq.w	8018db6 <_strtod_l+0xae>
 8019010:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019012:	781b      	ldrb	r3, [r3, #0]
 8019014:	2b28      	cmp	r3, #40	@ 0x28
 8019016:	d12d      	bne.n	8019074 <_strtod_l+0x36c>
 8019018:	4992      	ldr	r1, [pc, #584]	@ (8019264 <_strtod_l+0x55c>)
 801901a:	aa14      	add	r2, sp, #80	@ 0x50
 801901c:	a811      	add	r0, sp, #68	@ 0x44
 801901e:	f002 fb71 	bl	801b704 <__hexnan>
 8019022:	2805      	cmp	r0, #5
 8019024:	d126      	bne.n	8019074 <_strtod_l+0x36c>
 8019026:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019028:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801902c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019030:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019034:	e6a3      	b.n	8018d7e <_strtod_l+0x76>
 8019036:	240a      	movs	r4, #10
 8019038:	fb04 2c0c 	mla	ip, r4, ip, r2
 801903c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8019040:	e7b8      	b.n	8018fb4 <_strtod_l+0x2ac>
 8019042:	2a6e      	cmp	r2, #110	@ 0x6e
 8019044:	e7db      	b.n	8018ffe <_strtod_l+0x2f6>
 8019046:	4988      	ldr	r1, [pc, #544]	@ (8019268 <_strtod_l+0x560>)
 8019048:	a811      	add	r0, sp, #68	@ 0x44
 801904a:	f002 fb47 	bl	801b6dc <__match>
 801904e:	2800      	cmp	r0, #0
 8019050:	f43f aeb1 	beq.w	8018db6 <_strtod_l+0xae>
 8019054:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019056:	4985      	ldr	r1, [pc, #532]	@ (801926c <_strtod_l+0x564>)
 8019058:	3b01      	subs	r3, #1
 801905a:	a811      	add	r0, sp, #68	@ 0x44
 801905c:	9311      	str	r3, [sp, #68]	@ 0x44
 801905e:	f002 fb3d 	bl	801b6dc <__match>
 8019062:	b910      	cbnz	r0, 801906a <_strtod_l+0x362>
 8019064:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019066:	3301      	adds	r3, #1
 8019068:	9311      	str	r3, [sp, #68]	@ 0x44
 801906a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8019280 <_strtod_l+0x578>
 801906e:	f04f 0a00 	mov.w	sl, #0
 8019072:	e684      	b.n	8018d7e <_strtod_l+0x76>
 8019074:	487e      	ldr	r0, [pc, #504]	@ (8019270 <_strtod_l+0x568>)
 8019076:	f001 fa77 	bl	801a568 <nan>
 801907a:	ec5b ab10 	vmov	sl, fp, d0
 801907e:	e67e      	b.n	8018d7e <_strtod_l+0x76>
 8019080:	ee07 9a90 	vmov	s15, r9
 8019084:	1be2      	subs	r2, r4, r7
 8019086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801908a:	2d00      	cmp	r5, #0
 801908c:	bf08      	it	eq
 801908e:	461d      	moveq	r5, r3
 8019090:	2b10      	cmp	r3, #16
 8019092:	9209      	str	r2, [sp, #36]	@ 0x24
 8019094:	461a      	mov	r2, r3
 8019096:	bfa8      	it	ge
 8019098:	2210      	movge	r2, #16
 801909a:	2b09      	cmp	r3, #9
 801909c:	ec5b ab17 	vmov	sl, fp, d7
 80190a0:	dc15      	bgt.n	80190ce <_strtod_l+0x3c6>
 80190a2:	1be1      	subs	r1, r4, r7
 80190a4:	2900      	cmp	r1, #0
 80190a6:	f43f ae6a 	beq.w	8018d7e <_strtod_l+0x76>
 80190aa:	eba4 0107 	sub.w	r1, r4, r7
 80190ae:	dd72      	ble.n	8019196 <_strtod_l+0x48e>
 80190b0:	2916      	cmp	r1, #22
 80190b2:	dc59      	bgt.n	8019168 <_strtod_l+0x460>
 80190b4:	4b6f      	ldr	r3, [pc, #444]	@ (8019274 <_strtod_l+0x56c>)
 80190b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80190bc:	ed93 7b00 	vldr	d7, [r3]
 80190c0:	ec4b ab16 	vmov	d6, sl, fp
 80190c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80190c8:	ec5b ab17 	vmov	sl, fp, d7
 80190cc:	e657      	b.n	8018d7e <_strtod_l+0x76>
 80190ce:	4969      	ldr	r1, [pc, #420]	@ (8019274 <_strtod_l+0x56c>)
 80190d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80190d4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80190d8:	ee06 6a90 	vmov	s13, r6
 80190dc:	2b0f      	cmp	r3, #15
 80190de:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80190e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80190e6:	ec5b ab16 	vmov	sl, fp, d6
 80190ea:	ddda      	ble.n	80190a2 <_strtod_l+0x39a>
 80190ec:	1a9a      	subs	r2, r3, r2
 80190ee:	1be1      	subs	r1, r4, r7
 80190f0:	440a      	add	r2, r1
 80190f2:	2a00      	cmp	r2, #0
 80190f4:	f340 8094 	ble.w	8019220 <_strtod_l+0x518>
 80190f8:	f012 000f 	ands.w	r0, r2, #15
 80190fc:	d00a      	beq.n	8019114 <_strtod_l+0x40c>
 80190fe:	495d      	ldr	r1, [pc, #372]	@ (8019274 <_strtod_l+0x56c>)
 8019100:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019104:	ed91 7b00 	vldr	d7, [r1]
 8019108:	ec4b ab16 	vmov	d6, sl, fp
 801910c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019110:	ec5b ab17 	vmov	sl, fp, d7
 8019114:	f032 020f 	bics.w	r2, r2, #15
 8019118:	d073      	beq.n	8019202 <_strtod_l+0x4fa>
 801911a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801911e:	dd47      	ble.n	80191b0 <_strtod_l+0x4a8>
 8019120:	2400      	movs	r4, #0
 8019122:	4625      	mov	r5, r4
 8019124:	9407      	str	r4, [sp, #28]
 8019126:	4626      	mov	r6, r4
 8019128:	9a05      	ldr	r2, [sp, #20]
 801912a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019280 <_strtod_l+0x578>
 801912e:	2322      	movs	r3, #34	@ 0x22
 8019130:	6013      	str	r3, [r2, #0]
 8019132:	f04f 0a00 	mov.w	sl, #0
 8019136:	9b07      	ldr	r3, [sp, #28]
 8019138:	2b00      	cmp	r3, #0
 801913a:	f43f ae20 	beq.w	8018d7e <_strtod_l+0x76>
 801913e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019140:	9805      	ldr	r0, [sp, #20]
 8019142:	f002 fc83 	bl	801ba4c <_Bfree>
 8019146:	9805      	ldr	r0, [sp, #20]
 8019148:	4631      	mov	r1, r6
 801914a:	f002 fc7f 	bl	801ba4c <_Bfree>
 801914e:	9805      	ldr	r0, [sp, #20]
 8019150:	4629      	mov	r1, r5
 8019152:	f002 fc7b 	bl	801ba4c <_Bfree>
 8019156:	9907      	ldr	r1, [sp, #28]
 8019158:	9805      	ldr	r0, [sp, #20]
 801915a:	f002 fc77 	bl	801ba4c <_Bfree>
 801915e:	9805      	ldr	r0, [sp, #20]
 8019160:	4621      	mov	r1, r4
 8019162:	f002 fc73 	bl	801ba4c <_Bfree>
 8019166:	e60a      	b.n	8018d7e <_strtod_l+0x76>
 8019168:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801916c:	1be0      	subs	r0, r4, r7
 801916e:	4281      	cmp	r1, r0
 8019170:	dbbc      	blt.n	80190ec <_strtod_l+0x3e4>
 8019172:	4a40      	ldr	r2, [pc, #256]	@ (8019274 <_strtod_l+0x56c>)
 8019174:	f1c3 030f 	rsb	r3, r3, #15
 8019178:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801917c:	ed91 7b00 	vldr	d7, [r1]
 8019180:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019182:	ec4b ab16 	vmov	d6, sl, fp
 8019186:	1acb      	subs	r3, r1, r3
 8019188:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801918c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019190:	ed92 6b00 	vldr	d6, [r2]
 8019194:	e796      	b.n	80190c4 <_strtod_l+0x3bc>
 8019196:	3116      	adds	r1, #22
 8019198:	dba8      	blt.n	80190ec <_strtod_l+0x3e4>
 801919a:	4b36      	ldr	r3, [pc, #216]	@ (8019274 <_strtod_l+0x56c>)
 801919c:	1b3c      	subs	r4, r7, r4
 801919e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80191a2:	ed94 7b00 	vldr	d7, [r4]
 80191a6:	ec4b ab16 	vmov	d6, sl, fp
 80191aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80191ae:	e78b      	b.n	80190c8 <_strtod_l+0x3c0>
 80191b0:	2000      	movs	r0, #0
 80191b2:	ec4b ab17 	vmov	d7, sl, fp
 80191b6:	4e30      	ldr	r6, [pc, #192]	@ (8019278 <_strtod_l+0x570>)
 80191b8:	1112      	asrs	r2, r2, #4
 80191ba:	4601      	mov	r1, r0
 80191bc:	2a01      	cmp	r2, #1
 80191be:	dc23      	bgt.n	8019208 <_strtod_l+0x500>
 80191c0:	b108      	cbz	r0, 80191c6 <_strtod_l+0x4be>
 80191c2:	ec5b ab17 	vmov	sl, fp, d7
 80191c6:	4a2c      	ldr	r2, [pc, #176]	@ (8019278 <_strtod_l+0x570>)
 80191c8:	482c      	ldr	r0, [pc, #176]	@ (801927c <_strtod_l+0x574>)
 80191ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80191ce:	ed92 7b00 	vldr	d7, [r2]
 80191d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80191d6:	ec4b ab16 	vmov	d6, sl, fp
 80191da:	4a29      	ldr	r2, [pc, #164]	@ (8019280 <_strtod_l+0x578>)
 80191dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80191e0:	ee17 1a90 	vmov	r1, s15
 80191e4:	400a      	ands	r2, r1
 80191e6:	4282      	cmp	r2, r0
 80191e8:	ec5b ab17 	vmov	sl, fp, d7
 80191ec:	d898      	bhi.n	8019120 <_strtod_l+0x418>
 80191ee:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80191f2:	4282      	cmp	r2, r0
 80191f4:	bf86      	itte	hi
 80191f6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8019284 <_strtod_l+0x57c>
 80191fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80191fe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8019202:	2200      	movs	r2, #0
 8019204:	9206      	str	r2, [sp, #24]
 8019206:	e076      	b.n	80192f6 <_strtod_l+0x5ee>
 8019208:	f012 0f01 	tst.w	r2, #1
 801920c:	d004      	beq.n	8019218 <_strtod_l+0x510>
 801920e:	ed96 6b00 	vldr	d6, [r6]
 8019212:	2001      	movs	r0, #1
 8019214:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019218:	3101      	adds	r1, #1
 801921a:	1052      	asrs	r2, r2, #1
 801921c:	3608      	adds	r6, #8
 801921e:	e7cd      	b.n	80191bc <_strtod_l+0x4b4>
 8019220:	d0ef      	beq.n	8019202 <_strtod_l+0x4fa>
 8019222:	4252      	negs	r2, r2
 8019224:	f012 000f 	ands.w	r0, r2, #15
 8019228:	d00a      	beq.n	8019240 <_strtod_l+0x538>
 801922a:	4912      	ldr	r1, [pc, #72]	@ (8019274 <_strtod_l+0x56c>)
 801922c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019230:	ed91 7b00 	vldr	d7, [r1]
 8019234:	ec4b ab16 	vmov	d6, sl, fp
 8019238:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801923c:	ec5b ab17 	vmov	sl, fp, d7
 8019240:	1112      	asrs	r2, r2, #4
 8019242:	d0de      	beq.n	8019202 <_strtod_l+0x4fa>
 8019244:	2a1f      	cmp	r2, #31
 8019246:	dd1f      	ble.n	8019288 <_strtod_l+0x580>
 8019248:	2400      	movs	r4, #0
 801924a:	4625      	mov	r5, r4
 801924c:	9407      	str	r4, [sp, #28]
 801924e:	4626      	mov	r6, r4
 8019250:	9a05      	ldr	r2, [sp, #20]
 8019252:	2322      	movs	r3, #34	@ 0x22
 8019254:	f04f 0a00 	mov.w	sl, #0
 8019258:	f04f 0b00 	mov.w	fp, #0
 801925c:	6013      	str	r3, [r2, #0]
 801925e:	e76a      	b.n	8019136 <_strtod_l+0x42e>
 8019260:	0801e876 	.word	0x0801e876
 8019264:	0801e718 	.word	0x0801e718
 8019268:	0801e86e 	.word	0x0801e86e
 801926c:	0801e8a8 	.word	0x0801e8a8
 8019270:	0801eb34 	.word	0x0801eb34
 8019274:	0801ea20 	.word	0x0801ea20
 8019278:	0801e9f8 	.word	0x0801e9f8
 801927c:	7ca00000 	.word	0x7ca00000
 8019280:	7ff00000 	.word	0x7ff00000
 8019284:	7fefffff 	.word	0x7fefffff
 8019288:	f012 0110 	ands.w	r1, r2, #16
 801928c:	bf18      	it	ne
 801928e:	216a      	movne	r1, #106	@ 0x6a
 8019290:	9106      	str	r1, [sp, #24]
 8019292:	ec4b ab17 	vmov	d7, sl, fp
 8019296:	49b0      	ldr	r1, [pc, #704]	@ (8019558 <_strtod_l+0x850>)
 8019298:	2000      	movs	r0, #0
 801929a:	07d6      	lsls	r6, r2, #31
 801929c:	d504      	bpl.n	80192a8 <_strtod_l+0x5a0>
 801929e:	ed91 6b00 	vldr	d6, [r1]
 80192a2:	2001      	movs	r0, #1
 80192a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80192a8:	1052      	asrs	r2, r2, #1
 80192aa:	f101 0108 	add.w	r1, r1, #8
 80192ae:	d1f4      	bne.n	801929a <_strtod_l+0x592>
 80192b0:	b108      	cbz	r0, 80192b6 <_strtod_l+0x5ae>
 80192b2:	ec5b ab17 	vmov	sl, fp, d7
 80192b6:	9a06      	ldr	r2, [sp, #24]
 80192b8:	b1b2      	cbz	r2, 80192e8 <_strtod_l+0x5e0>
 80192ba:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80192be:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80192c2:	2a00      	cmp	r2, #0
 80192c4:	4658      	mov	r0, fp
 80192c6:	dd0f      	ble.n	80192e8 <_strtod_l+0x5e0>
 80192c8:	2a1f      	cmp	r2, #31
 80192ca:	dd55      	ble.n	8019378 <_strtod_l+0x670>
 80192cc:	2a34      	cmp	r2, #52	@ 0x34
 80192ce:	bfde      	ittt	le
 80192d0:	f04f 32ff 	movle.w	r2, #4294967295
 80192d4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80192d8:	408a      	lslle	r2, r1
 80192da:	f04f 0a00 	mov.w	sl, #0
 80192de:	bfcc      	ite	gt
 80192e0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80192e4:	ea02 0b00 	andle.w	fp, r2, r0
 80192e8:	ec4b ab17 	vmov	d7, sl, fp
 80192ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80192f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f4:	d0a8      	beq.n	8019248 <_strtod_l+0x540>
 80192f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80192f8:	9805      	ldr	r0, [sp, #20]
 80192fa:	f8cd 9000 	str.w	r9, [sp]
 80192fe:	462a      	mov	r2, r5
 8019300:	f002 fc0c 	bl	801bb1c <__s2b>
 8019304:	9007      	str	r0, [sp, #28]
 8019306:	2800      	cmp	r0, #0
 8019308:	f43f af0a 	beq.w	8019120 <_strtod_l+0x418>
 801930c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801930e:	1b3f      	subs	r7, r7, r4
 8019310:	2b00      	cmp	r3, #0
 8019312:	bfb4      	ite	lt
 8019314:	463b      	movlt	r3, r7
 8019316:	2300      	movge	r3, #0
 8019318:	930a      	str	r3, [sp, #40]	@ 0x28
 801931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801931c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019548 <_strtod_l+0x840>
 8019320:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019324:	2400      	movs	r4, #0
 8019326:	930d      	str	r3, [sp, #52]	@ 0x34
 8019328:	4625      	mov	r5, r4
 801932a:	9b07      	ldr	r3, [sp, #28]
 801932c:	9805      	ldr	r0, [sp, #20]
 801932e:	6859      	ldr	r1, [r3, #4]
 8019330:	f002 fb4c 	bl	801b9cc <_Balloc>
 8019334:	4606      	mov	r6, r0
 8019336:	2800      	cmp	r0, #0
 8019338:	f43f aef6 	beq.w	8019128 <_strtod_l+0x420>
 801933c:	9b07      	ldr	r3, [sp, #28]
 801933e:	691a      	ldr	r2, [r3, #16]
 8019340:	ec4b ab19 	vmov	d9, sl, fp
 8019344:	3202      	adds	r2, #2
 8019346:	f103 010c 	add.w	r1, r3, #12
 801934a:	0092      	lsls	r2, r2, #2
 801934c:	300c      	adds	r0, #12
 801934e:	f001 f8fa 	bl	801a546 <memcpy>
 8019352:	eeb0 0b49 	vmov.f64	d0, d9
 8019356:	9805      	ldr	r0, [sp, #20]
 8019358:	aa14      	add	r2, sp, #80	@ 0x50
 801935a:	a913      	add	r1, sp, #76	@ 0x4c
 801935c:	f002 ff1a 	bl	801c194 <__d2b>
 8019360:	9012      	str	r0, [sp, #72]	@ 0x48
 8019362:	2800      	cmp	r0, #0
 8019364:	f43f aee0 	beq.w	8019128 <_strtod_l+0x420>
 8019368:	9805      	ldr	r0, [sp, #20]
 801936a:	2101      	movs	r1, #1
 801936c:	f002 fc6c 	bl	801bc48 <__i2b>
 8019370:	4605      	mov	r5, r0
 8019372:	b940      	cbnz	r0, 8019386 <_strtod_l+0x67e>
 8019374:	2500      	movs	r5, #0
 8019376:	e6d7      	b.n	8019128 <_strtod_l+0x420>
 8019378:	f04f 31ff 	mov.w	r1, #4294967295
 801937c:	fa01 f202 	lsl.w	r2, r1, r2
 8019380:	ea02 0a0a 	and.w	sl, r2, sl
 8019384:	e7b0      	b.n	80192e8 <_strtod_l+0x5e0>
 8019386:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019388:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801938a:	2f00      	cmp	r7, #0
 801938c:	bfab      	itete	ge
 801938e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019390:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8019392:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019396:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801939a:	bfac      	ite	ge
 801939c:	eb07 0903 	addge.w	r9, r7, r3
 80193a0:	eba3 0807 	sublt.w	r8, r3, r7
 80193a4:	9b06      	ldr	r3, [sp, #24]
 80193a6:	1aff      	subs	r7, r7, r3
 80193a8:	4417      	add	r7, r2
 80193aa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80193ae:	4a6b      	ldr	r2, [pc, #428]	@ (801955c <_strtod_l+0x854>)
 80193b0:	3f01      	subs	r7, #1
 80193b2:	4297      	cmp	r7, r2
 80193b4:	da51      	bge.n	801945a <_strtod_l+0x752>
 80193b6:	1bd1      	subs	r1, r2, r7
 80193b8:	291f      	cmp	r1, #31
 80193ba:	eba3 0301 	sub.w	r3, r3, r1
 80193be:	f04f 0201 	mov.w	r2, #1
 80193c2:	dc3e      	bgt.n	8019442 <_strtod_l+0x73a>
 80193c4:	408a      	lsls	r2, r1
 80193c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80193c8:	2200      	movs	r2, #0
 80193ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80193cc:	eb09 0703 	add.w	r7, r9, r3
 80193d0:	4498      	add	r8, r3
 80193d2:	9b06      	ldr	r3, [sp, #24]
 80193d4:	45b9      	cmp	r9, r7
 80193d6:	4498      	add	r8, r3
 80193d8:	464b      	mov	r3, r9
 80193da:	bfa8      	it	ge
 80193dc:	463b      	movge	r3, r7
 80193de:	4543      	cmp	r3, r8
 80193e0:	bfa8      	it	ge
 80193e2:	4643      	movge	r3, r8
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	bfc2      	ittt	gt
 80193e8:	1aff      	subgt	r7, r7, r3
 80193ea:	eba8 0803 	subgt.w	r8, r8, r3
 80193ee:	eba9 0903 	subgt.w	r9, r9, r3
 80193f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	dd16      	ble.n	8019426 <_strtod_l+0x71e>
 80193f8:	4629      	mov	r1, r5
 80193fa:	9805      	ldr	r0, [sp, #20]
 80193fc:	461a      	mov	r2, r3
 80193fe:	f002 fce3 	bl	801bdc8 <__pow5mult>
 8019402:	4605      	mov	r5, r0
 8019404:	2800      	cmp	r0, #0
 8019406:	d0b5      	beq.n	8019374 <_strtod_l+0x66c>
 8019408:	4601      	mov	r1, r0
 801940a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801940c:	9805      	ldr	r0, [sp, #20]
 801940e:	f002 fc31 	bl	801bc74 <__multiply>
 8019412:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019414:	2800      	cmp	r0, #0
 8019416:	f43f ae87 	beq.w	8019128 <_strtod_l+0x420>
 801941a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801941c:	9805      	ldr	r0, [sp, #20]
 801941e:	f002 fb15 	bl	801ba4c <_Bfree>
 8019422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019424:	9312      	str	r3, [sp, #72]	@ 0x48
 8019426:	2f00      	cmp	r7, #0
 8019428:	dc1b      	bgt.n	8019462 <_strtod_l+0x75a>
 801942a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801942c:	2b00      	cmp	r3, #0
 801942e:	dd21      	ble.n	8019474 <_strtod_l+0x76c>
 8019430:	4631      	mov	r1, r6
 8019432:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019434:	9805      	ldr	r0, [sp, #20]
 8019436:	f002 fcc7 	bl	801bdc8 <__pow5mult>
 801943a:	4606      	mov	r6, r0
 801943c:	b9d0      	cbnz	r0, 8019474 <_strtod_l+0x76c>
 801943e:	2600      	movs	r6, #0
 8019440:	e672      	b.n	8019128 <_strtod_l+0x420>
 8019442:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8019446:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801944a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801944e:	37e2      	adds	r7, #226	@ 0xe2
 8019450:	fa02 f107 	lsl.w	r1, r2, r7
 8019454:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019456:	920c      	str	r2, [sp, #48]	@ 0x30
 8019458:	e7b8      	b.n	80193cc <_strtod_l+0x6c4>
 801945a:	2200      	movs	r2, #0
 801945c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801945e:	2201      	movs	r2, #1
 8019460:	e7f9      	b.n	8019456 <_strtod_l+0x74e>
 8019462:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019464:	9805      	ldr	r0, [sp, #20]
 8019466:	463a      	mov	r2, r7
 8019468:	f002 fd08 	bl	801be7c <__lshift>
 801946c:	9012      	str	r0, [sp, #72]	@ 0x48
 801946e:	2800      	cmp	r0, #0
 8019470:	d1db      	bne.n	801942a <_strtod_l+0x722>
 8019472:	e659      	b.n	8019128 <_strtod_l+0x420>
 8019474:	f1b8 0f00 	cmp.w	r8, #0
 8019478:	dd07      	ble.n	801948a <_strtod_l+0x782>
 801947a:	4631      	mov	r1, r6
 801947c:	9805      	ldr	r0, [sp, #20]
 801947e:	4642      	mov	r2, r8
 8019480:	f002 fcfc 	bl	801be7c <__lshift>
 8019484:	4606      	mov	r6, r0
 8019486:	2800      	cmp	r0, #0
 8019488:	d0d9      	beq.n	801943e <_strtod_l+0x736>
 801948a:	f1b9 0f00 	cmp.w	r9, #0
 801948e:	dd08      	ble.n	80194a2 <_strtod_l+0x79a>
 8019490:	4629      	mov	r1, r5
 8019492:	9805      	ldr	r0, [sp, #20]
 8019494:	464a      	mov	r2, r9
 8019496:	f002 fcf1 	bl	801be7c <__lshift>
 801949a:	4605      	mov	r5, r0
 801949c:	2800      	cmp	r0, #0
 801949e:	f43f ae43 	beq.w	8019128 <_strtod_l+0x420>
 80194a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80194a4:	9805      	ldr	r0, [sp, #20]
 80194a6:	4632      	mov	r2, r6
 80194a8:	f002 fd70 	bl	801bf8c <__mdiff>
 80194ac:	4604      	mov	r4, r0
 80194ae:	2800      	cmp	r0, #0
 80194b0:	f43f ae3a 	beq.w	8019128 <_strtod_l+0x420>
 80194b4:	2300      	movs	r3, #0
 80194b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80194ba:	60c3      	str	r3, [r0, #12]
 80194bc:	4629      	mov	r1, r5
 80194be:	f002 fd49 	bl	801bf54 <__mcmp>
 80194c2:	2800      	cmp	r0, #0
 80194c4:	da4e      	bge.n	8019564 <_strtod_l+0x85c>
 80194c6:	ea58 080a 	orrs.w	r8, r8, sl
 80194ca:	d174      	bne.n	80195b6 <_strtod_l+0x8ae>
 80194cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d170      	bne.n	80195b6 <_strtod_l+0x8ae>
 80194d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80194d8:	0d1b      	lsrs	r3, r3, #20
 80194da:	051b      	lsls	r3, r3, #20
 80194dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80194e0:	d969      	bls.n	80195b6 <_strtod_l+0x8ae>
 80194e2:	6963      	ldr	r3, [r4, #20]
 80194e4:	b913      	cbnz	r3, 80194ec <_strtod_l+0x7e4>
 80194e6:	6923      	ldr	r3, [r4, #16]
 80194e8:	2b01      	cmp	r3, #1
 80194ea:	dd64      	ble.n	80195b6 <_strtod_l+0x8ae>
 80194ec:	4621      	mov	r1, r4
 80194ee:	2201      	movs	r2, #1
 80194f0:	9805      	ldr	r0, [sp, #20]
 80194f2:	f002 fcc3 	bl	801be7c <__lshift>
 80194f6:	4629      	mov	r1, r5
 80194f8:	4604      	mov	r4, r0
 80194fa:	f002 fd2b 	bl	801bf54 <__mcmp>
 80194fe:	2800      	cmp	r0, #0
 8019500:	dd59      	ble.n	80195b6 <_strtod_l+0x8ae>
 8019502:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019506:	9a06      	ldr	r2, [sp, #24]
 8019508:	0d1b      	lsrs	r3, r3, #20
 801950a:	051b      	lsls	r3, r3, #20
 801950c:	2a00      	cmp	r2, #0
 801950e:	d070      	beq.n	80195f2 <_strtod_l+0x8ea>
 8019510:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019514:	d86d      	bhi.n	80195f2 <_strtod_l+0x8ea>
 8019516:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801951a:	f67f ae99 	bls.w	8019250 <_strtod_l+0x548>
 801951e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019550 <_strtod_l+0x848>
 8019522:	ec4b ab16 	vmov	d6, sl, fp
 8019526:	4b0e      	ldr	r3, [pc, #56]	@ (8019560 <_strtod_l+0x858>)
 8019528:	ee26 7b07 	vmul.f64	d7, d6, d7
 801952c:	ee17 2a90 	vmov	r2, s15
 8019530:	4013      	ands	r3, r2
 8019532:	ec5b ab17 	vmov	sl, fp, d7
 8019536:	2b00      	cmp	r3, #0
 8019538:	f47f ae01 	bne.w	801913e <_strtod_l+0x436>
 801953c:	9a05      	ldr	r2, [sp, #20]
 801953e:	2322      	movs	r3, #34	@ 0x22
 8019540:	6013      	str	r3, [r2, #0]
 8019542:	e5fc      	b.n	801913e <_strtod_l+0x436>
 8019544:	f3af 8000 	nop.w
 8019548:	ffc00000 	.word	0xffc00000
 801954c:	41dfffff 	.word	0x41dfffff
 8019550:	00000000 	.word	0x00000000
 8019554:	39500000 	.word	0x39500000
 8019558:	0801e740 	.word	0x0801e740
 801955c:	fffffc02 	.word	0xfffffc02
 8019560:	7ff00000 	.word	0x7ff00000
 8019564:	46d9      	mov	r9, fp
 8019566:	d15d      	bne.n	8019624 <_strtod_l+0x91c>
 8019568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801956c:	f1b8 0f00 	cmp.w	r8, #0
 8019570:	d02a      	beq.n	80195c8 <_strtod_l+0x8c0>
 8019572:	4aab      	ldr	r2, [pc, #684]	@ (8019820 <_strtod_l+0xb18>)
 8019574:	4293      	cmp	r3, r2
 8019576:	d12a      	bne.n	80195ce <_strtod_l+0x8c6>
 8019578:	9b06      	ldr	r3, [sp, #24]
 801957a:	4652      	mov	r2, sl
 801957c:	b1fb      	cbz	r3, 80195be <_strtod_l+0x8b6>
 801957e:	4ba9      	ldr	r3, [pc, #676]	@ (8019824 <_strtod_l+0xb1c>)
 8019580:	ea0b 0303 	and.w	r3, fp, r3
 8019584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019588:	f04f 31ff 	mov.w	r1, #4294967295
 801958c:	d81a      	bhi.n	80195c4 <_strtod_l+0x8bc>
 801958e:	0d1b      	lsrs	r3, r3, #20
 8019590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019594:	fa01 f303 	lsl.w	r3, r1, r3
 8019598:	429a      	cmp	r2, r3
 801959a:	d118      	bne.n	80195ce <_strtod_l+0x8c6>
 801959c:	4ba2      	ldr	r3, [pc, #648]	@ (8019828 <_strtod_l+0xb20>)
 801959e:	4599      	cmp	r9, r3
 80195a0:	d102      	bne.n	80195a8 <_strtod_l+0x8a0>
 80195a2:	3201      	adds	r2, #1
 80195a4:	f43f adc0 	beq.w	8019128 <_strtod_l+0x420>
 80195a8:	4b9e      	ldr	r3, [pc, #632]	@ (8019824 <_strtod_l+0xb1c>)
 80195aa:	ea09 0303 	and.w	r3, r9, r3
 80195ae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80195b2:	f04f 0a00 	mov.w	sl, #0
 80195b6:	9b06      	ldr	r3, [sp, #24]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d1b0      	bne.n	801951e <_strtod_l+0x816>
 80195bc:	e5bf      	b.n	801913e <_strtod_l+0x436>
 80195be:	f04f 33ff 	mov.w	r3, #4294967295
 80195c2:	e7e9      	b.n	8019598 <_strtod_l+0x890>
 80195c4:	460b      	mov	r3, r1
 80195c6:	e7e7      	b.n	8019598 <_strtod_l+0x890>
 80195c8:	ea53 030a 	orrs.w	r3, r3, sl
 80195cc:	d099      	beq.n	8019502 <_strtod_l+0x7fa>
 80195ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80195d0:	b1c3      	cbz	r3, 8019604 <_strtod_l+0x8fc>
 80195d2:	ea13 0f09 	tst.w	r3, r9
 80195d6:	d0ee      	beq.n	80195b6 <_strtod_l+0x8ae>
 80195d8:	9a06      	ldr	r2, [sp, #24]
 80195da:	4650      	mov	r0, sl
 80195dc:	4659      	mov	r1, fp
 80195de:	f1b8 0f00 	cmp.w	r8, #0
 80195e2:	d013      	beq.n	801960c <_strtod_l+0x904>
 80195e4:	f7ff fb75 	bl	8018cd2 <sulp>
 80195e8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80195ec:	ec5b ab17 	vmov	sl, fp, d7
 80195f0:	e7e1      	b.n	80195b6 <_strtod_l+0x8ae>
 80195f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80195f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80195fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80195fe:	f04f 3aff 	mov.w	sl, #4294967295
 8019602:	e7d8      	b.n	80195b6 <_strtod_l+0x8ae>
 8019604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019606:	ea13 0f0a 	tst.w	r3, sl
 801960a:	e7e4      	b.n	80195d6 <_strtod_l+0x8ce>
 801960c:	f7ff fb61 	bl	8018cd2 <sulp>
 8019610:	ee39 0b40 	vsub.f64	d0, d9, d0
 8019614:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961c:	ec5b ab10 	vmov	sl, fp, d0
 8019620:	d1c9      	bne.n	80195b6 <_strtod_l+0x8ae>
 8019622:	e615      	b.n	8019250 <_strtod_l+0x548>
 8019624:	4629      	mov	r1, r5
 8019626:	4620      	mov	r0, r4
 8019628:	f002 fe0c 	bl	801c244 <__ratio>
 801962c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019630:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019638:	d85d      	bhi.n	80196f6 <_strtod_l+0x9ee>
 801963a:	f1b8 0f00 	cmp.w	r8, #0
 801963e:	d164      	bne.n	801970a <_strtod_l+0xa02>
 8019640:	f1ba 0f00 	cmp.w	sl, #0
 8019644:	d14b      	bne.n	80196de <_strtod_l+0x9d6>
 8019646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801964a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d160      	bne.n	8019714 <_strtod_l+0xa0c>
 8019652:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019656:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801965e:	d401      	bmi.n	8019664 <_strtod_l+0x95c>
 8019660:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019664:	eeb1 ab48 	vneg.f64	d10, d8
 8019668:	486e      	ldr	r0, [pc, #440]	@ (8019824 <_strtod_l+0xb1c>)
 801966a:	4970      	ldr	r1, [pc, #448]	@ (801982c <_strtod_l+0xb24>)
 801966c:	ea09 0700 	and.w	r7, r9, r0
 8019670:	428f      	cmp	r7, r1
 8019672:	ec53 2b1a 	vmov	r2, r3, d10
 8019676:	d17d      	bne.n	8019774 <_strtod_l+0xa6c>
 8019678:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801967c:	ec4b ab1c 	vmov	d12, sl, fp
 8019680:	eeb0 0b4c 	vmov.f64	d0, d12
 8019684:	f002 fd16 	bl	801c0b4 <__ulp>
 8019688:	4866      	ldr	r0, [pc, #408]	@ (8019824 <_strtod_l+0xb1c>)
 801968a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801968e:	ee1c 3a90 	vmov	r3, s25
 8019692:	4a67      	ldr	r2, [pc, #412]	@ (8019830 <_strtod_l+0xb28>)
 8019694:	ea03 0100 	and.w	r1, r3, r0
 8019698:	4291      	cmp	r1, r2
 801969a:	ec5b ab1c 	vmov	sl, fp, d12
 801969e:	d93c      	bls.n	801971a <_strtod_l+0xa12>
 80196a0:	ee19 2a90 	vmov	r2, s19
 80196a4:	4b60      	ldr	r3, [pc, #384]	@ (8019828 <_strtod_l+0xb20>)
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d104      	bne.n	80196b4 <_strtod_l+0x9ac>
 80196aa:	ee19 3a10 	vmov	r3, s18
 80196ae:	3301      	adds	r3, #1
 80196b0:	f43f ad3a 	beq.w	8019128 <_strtod_l+0x420>
 80196b4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8019828 <_strtod_l+0xb20>
 80196b8:	f04f 3aff 	mov.w	sl, #4294967295
 80196bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80196be:	9805      	ldr	r0, [sp, #20]
 80196c0:	f002 f9c4 	bl	801ba4c <_Bfree>
 80196c4:	9805      	ldr	r0, [sp, #20]
 80196c6:	4631      	mov	r1, r6
 80196c8:	f002 f9c0 	bl	801ba4c <_Bfree>
 80196cc:	9805      	ldr	r0, [sp, #20]
 80196ce:	4629      	mov	r1, r5
 80196d0:	f002 f9bc 	bl	801ba4c <_Bfree>
 80196d4:	9805      	ldr	r0, [sp, #20]
 80196d6:	4621      	mov	r1, r4
 80196d8:	f002 f9b8 	bl	801ba4c <_Bfree>
 80196dc:	e625      	b.n	801932a <_strtod_l+0x622>
 80196de:	f1ba 0f01 	cmp.w	sl, #1
 80196e2:	d103      	bne.n	80196ec <_strtod_l+0x9e4>
 80196e4:	f1bb 0f00 	cmp.w	fp, #0
 80196e8:	f43f adb2 	beq.w	8019250 <_strtod_l+0x548>
 80196ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80196f0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80196f4:	e7b8      	b.n	8019668 <_strtod_l+0x960>
 80196f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80196fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80196fe:	f1b8 0f00 	cmp.w	r8, #0
 8019702:	d0af      	beq.n	8019664 <_strtod_l+0x95c>
 8019704:	eeb0 ab48 	vmov.f64	d10, d8
 8019708:	e7ae      	b.n	8019668 <_strtod_l+0x960>
 801970a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801970e:	eeb0 8b4a 	vmov.f64	d8, d10
 8019712:	e7a9      	b.n	8019668 <_strtod_l+0x960>
 8019714:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019718:	e7a6      	b.n	8019668 <_strtod_l+0x960>
 801971a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801971e:	9b06      	ldr	r3, [sp, #24]
 8019720:	46d9      	mov	r9, fp
 8019722:	2b00      	cmp	r3, #0
 8019724:	d1ca      	bne.n	80196bc <_strtod_l+0x9b4>
 8019726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801972a:	0d1b      	lsrs	r3, r3, #20
 801972c:	051b      	lsls	r3, r3, #20
 801972e:	429f      	cmp	r7, r3
 8019730:	d1c4      	bne.n	80196bc <_strtod_l+0x9b4>
 8019732:	ec51 0b18 	vmov	r0, r1, d8
 8019736:	f7e7 f827 	bl	8000788 <__aeabi_d2lz>
 801973a:	f7e6 ffdf 	bl	80006fc <__aeabi_l2d>
 801973e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019742:	ec41 0b17 	vmov	d7, r0, r1
 8019746:	ea49 090a 	orr.w	r9, r9, sl
 801974a:	ea59 0908 	orrs.w	r9, r9, r8
 801974e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019752:	d03c      	beq.n	80197ce <_strtod_l+0xac6>
 8019754:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019808 <_strtod_l+0xb00>
 8019758:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	f53f aced 	bmi.w	801913e <_strtod_l+0x436>
 8019764:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019810 <_strtod_l+0xb08>
 8019768:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801976c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019770:	dda4      	ble.n	80196bc <_strtod_l+0x9b4>
 8019772:	e4e4      	b.n	801913e <_strtod_l+0x436>
 8019774:	9906      	ldr	r1, [sp, #24]
 8019776:	b1e1      	cbz	r1, 80197b2 <_strtod_l+0xaaa>
 8019778:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801977c:	d819      	bhi.n	80197b2 <_strtod_l+0xaaa>
 801977e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019786:	d811      	bhi.n	80197ac <_strtod_l+0xaa4>
 8019788:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801978c:	ee18 3a10 	vmov	r3, s16
 8019790:	2b01      	cmp	r3, #1
 8019792:	bf38      	it	cc
 8019794:	2301      	movcc	r3, #1
 8019796:	ee08 3a10 	vmov	s16, r3
 801979a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801979e:	f1b8 0f00 	cmp.w	r8, #0
 80197a2:	d111      	bne.n	80197c8 <_strtod_l+0xac0>
 80197a4:	eeb1 7b48 	vneg.f64	d7, d8
 80197a8:	ec53 2b17 	vmov	r2, r3, d7
 80197ac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80197b0:	1bcb      	subs	r3, r1, r7
 80197b2:	eeb0 0b49 	vmov.f64	d0, d9
 80197b6:	ec43 2b1a 	vmov	d10, r2, r3
 80197ba:	f002 fc7b 	bl	801c0b4 <__ulp>
 80197be:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80197c2:	ec5b ab19 	vmov	sl, fp, d9
 80197c6:	e7aa      	b.n	801971e <_strtod_l+0xa16>
 80197c8:	eeb0 7b48 	vmov.f64	d7, d8
 80197cc:	e7ec      	b.n	80197a8 <_strtod_l+0xaa0>
 80197ce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8019818 <_strtod_l+0xb10>
 80197d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80197d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197da:	f57f af6f 	bpl.w	80196bc <_strtod_l+0x9b4>
 80197de:	e4ae      	b.n	801913e <_strtod_l+0x436>
 80197e0:	2300      	movs	r3, #0
 80197e2:	9308      	str	r3, [sp, #32]
 80197e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80197e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80197e8:	6013      	str	r3, [r2, #0]
 80197ea:	f7ff bacc 	b.w	8018d86 <_strtod_l+0x7e>
 80197ee:	2a65      	cmp	r2, #101	@ 0x65
 80197f0:	f43f abbc 	beq.w	8018f6c <_strtod_l+0x264>
 80197f4:	2a45      	cmp	r2, #69	@ 0x45
 80197f6:	f43f abb9 	beq.w	8018f6c <_strtod_l+0x264>
 80197fa:	2301      	movs	r3, #1
 80197fc:	9306      	str	r3, [sp, #24]
 80197fe:	f7ff bbf0 	b.w	8018fe2 <_strtod_l+0x2da>
 8019802:	bf00      	nop
 8019804:	f3af 8000 	nop.w
 8019808:	94a03595 	.word	0x94a03595
 801980c:	3fdfffff 	.word	0x3fdfffff
 8019810:	35afe535 	.word	0x35afe535
 8019814:	3fe00000 	.word	0x3fe00000
 8019818:	94a03595 	.word	0x94a03595
 801981c:	3fcfffff 	.word	0x3fcfffff
 8019820:	000fffff 	.word	0x000fffff
 8019824:	7ff00000 	.word	0x7ff00000
 8019828:	7fefffff 	.word	0x7fefffff
 801982c:	7fe00000 	.word	0x7fe00000
 8019830:	7c9fffff 	.word	0x7c9fffff

08019834 <strtod>:
 8019834:	460a      	mov	r2, r1
 8019836:	4601      	mov	r1, r0
 8019838:	4802      	ldr	r0, [pc, #8]	@ (8019844 <strtod+0x10>)
 801983a:	4b03      	ldr	r3, [pc, #12]	@ (8019848 <strtod+0x14>)
 801983c:	6800      	ldr	r0, [r0, #0]
 801983e:	f7ff ba63 	b.w	8018d08 <_strtod_l>
 8019842:	bf00      	nop
 8019844:	240002ac 	.word	0x240002ac
 8019848:	24000140 	.word	0x24000140

0801984c <_strtol_l.constprop.0>:
 801984c:	2b24      	cmp	r3, #36	@ 0x24
 801984e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019852:	4686      	mov	lr, r0
 8019854:	4690      	mov	r8, r2
 8019856:	d801      	bhi.n	801985c <_strtol_l.constprop.0+0x10>
 8019858:	2b01      	cmp	r3, #1
 801985a:	d106      	bne.n	801986a <_strtol_l.constprop.0+0x1e>
 801985c:	f000 fe46 	bl	801a4ec <__errno>
 8019860:	2316      	movs	r3, #22
 8019862:	6003      	str	r3, [r0, #0]
 8019864:	2000      	movs	r0, #0
 8019866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801986a:	4834      	ldr	r0, [pc, #208]	@ (801993c <_strtol_l.constprop.0+0xf0>)
 801986c:	460d      	mov	r5, r1
 801986e:	462a      	mov	r2, r5
 8019870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019874:	5d06      	ldrb	r6, [r0, r4]
 8019876:	f016 0608 	ands.w	r6, r6, #8
 801987a:	d1f8      	bne.n	801986e <_strtol_l.constprop.0+0x22>
 801987c:	2c2d      	cmp	r4, #45	@ 0x2d
 801987e:	d12d      	bne.n	80198dc <_strtol_l.constprop.0+0x90>
 8019880:	782c      	ldrb	r4, [r5, #0]
 8019882:	2601      	movs	r6, #1
 8019884:	1c95      	adds	r5, r2, #2
 8019886:	f033 0210 	bics.w	r2, r3, #16
 801988a:	d109      	bne.n	80198a0 <_strtol_l.constprop.0+0x54>
 801988c:	2c30      	cmp	r4, #48	@ 0x30
 801988e:	d12a      	bne.n	80198e6 <_strtol_l.constprop.0+0x9a>
 8019890:	782a      	ldrb	r2, [r5, #0]
 8019892:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019896:	2a58      	cmp	r2, #88	@ 0x58
 8019898:	d125      	bne.n	80198e6 <_strtol_l.constprop.0+0x9a>
 801989a:	786c      	ldrb	r4, [r5, #1]
 801989c:	2310      	movs	r3, #16
 801989e:	3502      	adds	r5, #2
 80198a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80198a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80198a8:	2200      	movs	r2, #0
 80198aa:	fbbc f9f3 	udiv	r9, ip, r3
 80198ae:	4610      	mov	r0, r2
 80198b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80198b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80198b8:	2f09      	cmp	r7, #9
 80198ba:	d81b      	bhi.n	80198f4 <_strtol_l.constprop.0+0xa8>
 80198bc:	463c      	mov	r4, r7
 80198be:	42a3      	cmp	r3, r4
 80198c0:	dd27      	ble.n	8019912 <_strtol_l.constprop.0+0xc6>
 80198c2:	1c57      	adds	r7, r2, #1
 80198c4:	d007      	beq.n	80198d6 <_strtol_l.constprop.0+0x8a>
 80198c6:	4581      	cmp	r9, r0
 80198c8:	d320      	bcc.n	801990c <_strtol_l.constprop.0+0xc0>
 80198ca:	d101      	bne.n	80198d0 <_strtol_l.constprop.0+0x84>
 80198cc:	45a2      	cmp	sl, r4
 80198ce:	db1d      	blt.n	801990c <_strtol_l.constprop.0+0xc0>
 80198d0:	fb00 4003 	mla	r0, r0, r3, r4
 80198d4:	2201      	movs	r2, #1
 80198d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80198da:	e7eb      	b.n	80198b4 <_strtol_l.constprop.0+0x68>
 80198dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80198de:	bf04      	itt	eq
 80198e0:	782c      	ldrbeq	r4, [r5, #0]
 80198e2:	1c95      	addeq	r5, r2, #2
 80198e4:	e7cf      	b.n	8019886 <_strtol_l.constprop.0+0x3a>
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d1da      	bne.n	80198a0 <_strtol_l.constprop.0+0x54>
 80198ea:	2c30      	cmp	r4, #48	@ 0x30
 80198ec:	bf0c      	ite	eq
 80198ee:	2308      	moveq	r3, #8
 80198f0:	230a      	movne	r3, #10
 80198f2:	e7d5      	b.n	80198a0 <_strtol_l.constprop.0+0x54>
 80198f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80198f8:	2f19      	cmp	r7, #25
 80198fa:	d801      	bhi.n	8019900 <_strtol_l.constprop.0+0xb4>
 80198fc:	3c37      	subs	r4, #55	@ 0x37
 80198fe:	e7de      	b.n	80198be <_strtol_l.constprop.0+0x72>
 8019900:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019904:	2f19      	cmp	r7, #25
 8019906:	d804      	bhi.n	8019912 <_strtol_l.constprop.0+0xc6>
 8019908:	3c57      	subs	r4, #87	@ 0x57
 801990a:	e7d8      	b.n	80198be <_strtol_l.constprop.0+0x72>
 801990c:	f04f 32ff 	mov.w	r2, #4294967295
 8019910:	e7e1      	b.n	80198d6 <_strtol_l.constprop.0+0x8a>
 8019912:	1c53      	adds	r3, r2, #1
 8019914:	d108      	bne.n	8019928 <_strtol_l.constprop.0+0xdc>
 8019916:	2322      	movs	r3, #34	@ 0x22
 8019918:	f8ce 3000 	str.w	r3, [lr]
 801991c:	4660      	mov	r0, ip
 801991e:	f1b8 0f00 	cmp.w	r8, #0
 8019922:	d0a0      	beq.n	8019866 <_strtol_l.constprop.0+0x1a>
 8019924:	1e69      	subs	r1, r5, #1
 8019926:	e006      	b.n	8019936 <_strtol_l.constprop.0+0xea>
 8019928:	b106      	cbz	r6, 801992c <_strtol_l.constprop.0+0xe0>
 801992a:	4240      	negs	r0, r0
 801992c:	f1b8 0f00 	cmp.w	r8, #0
 8019930:	d099      	beq.n	8019866 <_strtol_l.constprop.0+0x1a>
 8019932:	2a00      	cmp	r2, #0
 8019934:	d1f6      	bne.n	8019924 <_strtol_l.constprop.0+0xd8>
 8019936:	f8c8 1000 	str.w	r1, [r8]
 801993a:	e794      	b.n	8019866 <_strtol_l.constprop.0+0x1a>
 801993c:	0801e769 	.word	0x0801e769

08019940 <strtol>:
 8019940:	4613      	mov	r3, r2
 8019942:	460a      	mov	r2, r1
 8019944:	4601      	mov	r1, r0
 8019946:	4802      	ldr	r0, [pc, #8]	@ (8019950 <strtol+0x10>)
 8019948:	6800      	ldr	r0, [r0, #0]
 801994a:	f7ff bf7f 	b.w	801984c <_strtol_l.constprop.0>
 801994e:	bf00      	nop
 8019950:	240002ac 	.word	0x240002ac

08019954 <__cvt>:
 8019954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019956:	ed2d 8b02 	vpush	{d8}
 801995a:	eeb0 8b40 	vmov.f64	d8, d0
 801995e:	b085      	sub	sp, #20
 8019960:	4617      	mov	r7, r2
 8019962:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019966:	ee18 2a90 	vmov	r2, s17
 801996a:	f025 0520 	bic.w	r5, r5, #32
 801996e:	2a00      	cmp	r2, #0
 8019970:	bfb6      	itet	lt
 8019972:	222d      	movlt	r2, #45	@ 0x2d
 8019974:	2200      	movge	r2, #0
 8019976:	eeb1 8b40 	vneglt.f64	d8, d0
 801997a:	2d46      	cmp	r5, #70	@ 0x46
 801997c:	460c      	mov	r4, r1
 801997e:	701a      	strb	r2, [r3, #0]
 8019980:	d004      	beq.n	801998c <__cvt+0x38>
 8019982:	2d45      	cmp	r5, #69	@ 0x45
 8019984:	d100      	bne.n	8019988 <__cvt+0x34>
 8019986:	3401      	adds	r4, #1
 8019988:	2102      	movs	r1, #2
 801998a:	e000      	b.n	801998e <__cvt+0x3a>
 801998c:	2103      	movs	r1, #3
 801998e:	ab03      	add	r3, sp, #12
 8019990:	9301      	str	r3, [sp, #4]
 8019992:	ab02      	add	r3, sp, #8
 8019994:	9300      	str	r3, [sp, #0]
 8019996:	4622      	mov	r2, r4
 8019998:	4633      	mov	r3, r6
 801999a:	eeb0 0b48 	vmov.f64	d0, d8
 801999e:	f000 fe73 	bl	801a688 <_dtoa_r>
 80199a2:	2d47      	cmp	r5, #71	@ 0x47
 80199a4:	d114      	bne.n	80199d0 <__cvt+0x7c>
 80199a6:	07fb      	lsls	r3, r7, #31
 80199a8:	d50a      	bpl.n	80199c0 <__cvt+0x6c>
 80199aa:	1902      	adds	r2, r0, r4
 80199ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80199b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b4:	bf08      	it	eq
 80199b6:	9203      	streq	r2, [sp, #12]
 80199b8:	2130      	movs	r1, #48	@ 0x30
 80199ba:	9b03      	ldr	r3, [sp, #12]
 80199bc:	4293      	cmp	r3, r2
 80199be:	d319      	bcc.n	80199f4 <__cvt+0xa0>
 80199c0:	9b03      	ldr	r3, [sp, #12]
 80199c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80199c4:	1a1b      	subs	r3, r3, r0
 80199c6:	6013      	str	r3, [r2, #0]
 80199c8:	b005      	add	sp, #20
 80199ca:	ecbd 8b02 	vpop	{d8}
 80199ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d0:	2d46      	cmp	r5, #70	@ 0x46
 80199d2:	eb00 0204 	add.w	r2, r0, r4
 80199d6:	d1e9      	bne.n	80199ac <__cvt+0x58>
 80199d8:	7803      	ldrb	r3, [r0, #0]
 80199da:	2b30      	cmp	r3, #48	@ 0x30
 80199dc:	d107      	bne.n	80199ee <__cvt+0x9a>
 80199de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80199e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e6:	bf1c      	itt	ne
 80199e8:	f1c4 0401 	rsbne	r4, r4, #1
 80199ec:	6034      	strne	r4, [r6, #0]
 80199ee:	6833      	ldr	r3, [r6, #0]
 80199f0:	441a      	add	r2, r3
 80199f2:	e7db      	b.n	80199ac <__cvt+0x58>
 80199f4:	1c5c      	adds	r4, r3, #1
 80199f6:	9403      	str	r4, [sp, #12]
 80199f8:	7019      	strb	r1, [r3, #0]
 80199fa:	e7de      	b.n	80199ba <__cvt+0x66>

080199fc <__exponent>:
 80199fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199fe:	2900      	cmp	r1, #0
 8019a00:	bfba      	itte	lt
 8019a02:	4249      	neglt	r1, r1
 8019a04:	232d      	movlt	r3, #45	@ 0x2d
 8019a06:	232b      	movge	r3, #43	@ 0x2b
 8019a08:	2909      	cmp	r1, #9
 8019a0a:	7002      	strb	r2, [r0, #0]
 8019a0c:	7043      	strb	r3, [r0, #1]
 8019a0e:	dd29      	ble.n	8019a64 <__exponent+0x68>
 8019a10:	f10d 0307 	add.w	r3, sp, #7
 8019a14:	461d      	mov	r5, r3
 8019a16:	270a      	movs	r7, #10
 8019a18:	461a      	mov	r2, r3
 8019a1a:	fbb1 f6f7 	udiv	r6, r1, r7
 8019a1e:	fb07 1416 	mls	r4, r7, r6, r1
 8019a22:	3430      	adds	r4, #48	@ 0x30
 8019a24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019a28:	460c      	mov	r4, r1
 8019a2a:	2c63      	cmp	r4, #99	@ 0x63
 8019a2c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a30:	4631      	mov	r1, r6
 8019a32:	dcf1      	bgt.n	8019a18 <__exponent+0x1c>
 8019a34:	3130      	adds	r1, #48	@ 0x30
 8019a36:	1e94      	subs	r4, r2, #2
 8019a38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019a3c:	1c41      	adds	r1, r0, #1
 8019a3e:	4623      	mov	r3, r4
 8019a40:	42ab      	cmp	r3, r5
 8019a42:	d30a      	bcc.n	8019a5a <__exponent+0x5e>
 8019a44:	f10d 0309 	add.w	r3, sp, #9
 8019a48:	1a9b      	subs	r3, r3, r2
 8019a4a:	42ac      	cmp	r4, r5
 8019a4c:	bf88      	it	hi
 8019a4e:	2300      	movhi	r3, #0
 8019a50:	3302      	adds	r3, #2
 8019a52:	4403      	add	r3, r0
 8019a54:	1a18      	subs	r0, r3, r0
 8019a56:	b003      	add	sp, #12
 8019a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019a5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019a62:	e7ed      	b.n	8019a40 <__exponent+0x44>
 8019a64:	2330      	movs	r3, #48	@ 0x30
 8019a66:	3130      	adds	r1, #48	@ 0x30
 8019a68:	7083      	strb	r3, [r0, #2]
 8019a6a:	70c1      	strb	r1, [r0, #3]
 8019a6c:	1d03      	adds	r3, r0, #4
 8019a6e:	e7f1      	b.n	8019a54 <__exponent+0x58>

08019a70 <_printf_float>:
 8019a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	b08d      	sub	sp, #52	@ 0x34
 8019a76:	460c      	mov	r4, r1
 8019a78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019a7c:	4616      	mov	r6, r2
 8019a7e:	461f      	mov	r7, r3
 8019a80:	4605      	mov	r5, r0
 8019a82:	f000 fce9 	bl	801a458 <_localeconv_r>
 8019a86:	f8d0 b000 	ldr.w	fp, [r0]
 8019a8a:	4658      	mov	r0, fp
 8019a8c:	f7e6 fca0 	bl	80003d0 <strlen>
 8019a90:	2300      	movs	r3, #0
 8019a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a94:	f8d8 3000 	ldr.w	r3, [r8]
 8019a98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019a9c:	6822      	ldr	r2, [r4, #0]
 8019a9e:	9005      	str	r0, [sp, #20]
 8019aa0:	3307      	adds	r3, #7
 8019aa2:	f023 0307 	bic.w	r3, r3, #7
 8019aa6:	f103 0108 	add.w	r1, r3, #8
 8019aaa:	f8c8 1000 	str.w	r1, [r8]
 8019aae:	ed93 0b00 	vldr	d0, [r3]
 8019ab2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019d10 <_printf_float+0x2a0>
 8019ab6:	eeb0 7bc0 	vabs.f64	d7, d0
 8019aba:	eeb4 7b46 	vcmp.f64	d7, d6
 8019abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ac2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019ac6:	dd24      	ble.n	8019b12 <_printf_float+0xa2>
 8019ac8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ad0:	d502      	bpl.n	8019ad8 <_printf_float+0x68>
 8019ad2:	232d      	movs	r3, #45	@ 0x2d
 8019ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ad8:	498f      	ldr	r1, [pc, #572]	@ (8019d18 <_printf_float+0x2a8>)
 8019ada:	4b90      	ldr	r3, [pc, #576]	@ (8019d1c <_printf_float+0x2ac>)
 8019adc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019ae0:	bf94      	ite	ls
 8019ae2:	4688      	movls	r8, r1
 8019ae4:	4698      	movhi	r8, r3
 8019ae6:	f022 0204 	bic.w	r2, r2, #4
 8019aea:	2303      	movs	r3, #3
 8019aec:	6123      	str	r3, [r4, #16]
 8019aee:	6022      	str	r2, [r4, #0]
 8019af0:	f04f 0a00 	mov.w	sl, #0
 8019af4:	9700      	str	r7, [sp, #0]
 8019af6:	4633      	mov	r3, r6
 8019af8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019afa:	4621      	mov	r1, r4
 8019afc:	4628      	mov	r0, r5
 8019afe:	f000 f9d1 	bl	8019ea4 <_printf_common>
 8019b02:	3001      	adds	r0, #1
 8019b04:	f040 8089 	bne.w	8019c1a <_printf_float+0x1aa>
 8019b08:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0c:	b00d      	add	sp, #52	@ 0x34
 8019b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b12:	eeb4 0b40 	vcmp.f64	d0, d0
 8019b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b1a:	d709      	bvc.n	8019b30 <_printf_float+0xc0>
 8019b1c:	ee10 3a90 	vmov	r3, s1
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	bfbc      	itt	lt
 8019b24:	232d      	movlt	r3, #45	@ 0x2d
 8019b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8019b2a:	497d      	ldr	r1, [pc, #500]	@ (8019d20 <_printf_float+0x2b0>)
 8019b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8019d24 <_printf_float+0x2b4>)
 8019b2e:	e7d5      	b.n	8019adc <_printf_float+0x6c>
 8019b30:	6863      	ldr	r3, [r4, #4]
 8019b32:	1c59      	adds	r1, r3, #1
 8019b34:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019b38:	d139      	bne.n	8019bae <_printf_float+0x13e>
 8019b3a:	2306      	movs	r3, #6
 8019b3c:	6063      	str	r3, [r4, #4]
 8019b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019b42:	2300      	movs	r3, #0
 8019b44:	6022      	str	r2, [r4, #0]
 8019b46:	9303      	str	r3, [sp, #12]
 8019b48:	ab0a      	add	r3, sp, #40	@ 0x28
 8019b4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019b4e:	ab09      	add	r3, sp, #36	@ 0x24
 8019b50:	9300      	str	r3, [sp, #0]
 8019b52:	6861      	ldr	r1, [r4, #4]
 8019b54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019b58:	4628      	mov	r0, r5
 8019b5a:	f7ff fefb 	bl	8019954 <__cvt>
 8019b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019b62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019b64:	4680      	mov	r8, r0
 8019b66:	d129      	bne.n	8019bbc <_printf_float+0x14c>
 8019b68:	1cc8      	adds	r0, r1, #3
 8019b6a:	db02      	blt.n	8019b72 <_printf_float+0x102>
 8019b6c:	6863      	ldr	r3, [r4, #4]
 8019b6e:	4299      	cmp	r1, r3
 8019b70:	dd41      	ble.n	8019bf6 <_printf_float+0x186>
 8019b72:	f1a9 0902 	sub.w	r9, r9, #2
 8019b76:	fa5f f989 	uxtb.w	r9, r9
 8019b7a:	3901      	subs	r1, #1
 8019b7c:	464a      	mov	r2, r9
 8019b7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019b82:	9109      	str	r1, [sp, #36]	@ 0x24
 8019b84:	f7ff ff3a 	bl	80199fc <__exponent>
 8019b88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019b8a:	1813      	adds	r3, r2, r0
 8019b8c:	2a01      	cmp	r2, #1
 8019b8e:	4682      	mov	sl, r0
 8019b90:	6123      	str	r3, [r4, #16]
 8019b92:	dc02      	bgt.n	8019b9a <_printf_float+0x12a>
 8019b94:	6822      	ldr	r2, [r4, #0]
 8019b96:	07d2      	lsls	r2, r2, #31
 8019b98:	d501      	bpl.n	8019b9e <_printf_float+0x12e>
 8019b9a:	3301      	adds	r3, #1
 8019b9c:	6123      	str	r3, [r4, #16]
 8019b9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d0a6      	beq.n	8019af4 <_printf_float+0x84>
 8019ba6:	232d      	movs	r3, #45	@ 0x2d
 8019ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019bac:	e7a2      	b.n	8019af4 <_printf_float+0x84>
 8019bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019bb2:	d1c4      	bne.n	8019b3e <_printf_float+0xce>
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d1c2      	bne.n	8019b3e <_printf_float+0xce>
 8019bb8:	2301      	movs	r3, #1
 8019bba:	e7bf      	b.n	8019b3c <_printf_float+0xcc>
 8019bbc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019bc0:	d9db      	bls.n	8019b7a <_printf_float+0x10a>
 8019bc2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019bc6:	d118      	bne.n	8019bfa <_printf_float+0x18a>
 8019bc8:	2900      	cmp	r1, #0
 8019bca:	6863      	ldr	r3, [r4, #4]
 8019bcc:	dd0b      	ble.n	8019be6 <_printf_float+0x176>
 8019bce:	6121      	str	r1, [r4, #16]
 8019bd0:	b913      	cbnz	r3, 8019bd8 <_printf_float+0x168>
 8019bd2:	6822      	ldr	r2, [r4, #0]
 8019bd4:	07d0      	lsls	r0, r2, #31
 8019bd6:	d502      	bpl.n	8019bde <_printf_float+0x16e>
 8019bd8:	3301      	adds	r3, #1
 8019bda:	440b      	add	r3, r1
 8019bdc:	6123      	str	r3, [r4, #16]
 8019bde:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019be0:	f04f 0a00 	mov.w	sl, #0
 8019be4:	e7db      	b.n	8019b9e <_printf_float+0x12e>
 8019be6:	b913      	cbnz	r3, 8019bee <_printf_float+0x17e>
 8019be8:	6822      	ldr	r2, [r4, #0]
 8019bea:	07d2      	lsls	r2, r2, #31
 8019bec:	d501      	bpl.n	8019bf2 <_printf_float+0x182>
 8019bee:	3302      	adds	r3, #2
 8019bf0:	e7f4      	b.n	8019bdc <_printf_float+0x16c>
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	e7f2      	b.n	8019bdc <_printf_float+0x16c>
 8019bf6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8019bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019bfc:	4299      	cmp	r1, r3
 8019bfe:	db05      	blt.n	8019c0c <_printf_float+0x19c>
 8019c00:	6823      	ldr	r3, [r4, #0]
 8019c02:	6121      	str	r1, [r4, #16]
 8019c04:	07d8      	lsls	r0, r3, #31
 8019c06:	d5ea      	bpl.n	8019bde <_printf_float+0x16e>
 8019c08:	1c4b      	adds	r3, r1, #1
 8019c0a:	e7e7      	b.n	8019bdc <_printf_float+0x16c>
 8019c0c:	2900      	cmp	r1, #0
 8019c0e:	bfd4      	ite	le
 8019c10:	f1c1 0202 	rsble	r2, r1, #2
 8019c14:	2201      	movgt	r2, #1
 8019c16:	4413      	add	r3, r2
 8019c18:	e7e0      	b.n	8019bdc <_printf_float+0x16c>
 8019c1a:	6823      	ldr	r3, [r4, #0]
 8019c1c:	055a      	lsls	r2, r3, #21
 8019c1e:	d407      	bmi.n	8019c30 <_printf_float+0x1c0>
 8019c20:	6923      	ldr	r3, [r4, #16]
 8019c22:	4642      	mov	r2, r8
 8019c24:	4631      	mov	r1, r6
 8019c26:	4628      	mov	r0, r5
 8019c28:	47b8      	blx	r7
 8019c2a:	3001      	adds	r0, #1
 8019c2c:	d12a      	bne.n	8019c84 <_printf_float+0x214>
 8019c2e:	e76b      	b.n	8019b08 <_printf_float+0x98>
 8019c30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019c34:	f240 80e0 	bls.w	8019df8 <_printf_float+0x388>
 8019c38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019c3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c44:	d133      	bne.n	8019cae <_printf_float+0x23e>
 8019c46:	4a38      	ldr	r2, [pc, #224]	@ (8019d28 <_printf_float+0x2b8>)
 8019c48:	2301      	movs	r3, #1
 8019c4a:	4631      	mov	r1, r6
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	47b8      	blx	r7
 8019c50:	3001      	adds	r0, #1
 8019c52:	f43f af59 	beq.w	8019b08 <_printf_float+0x98>
 8019c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8019c5a:	4543      	cmp	r3, r8
 8019c5c:	db02      	blt.n	8019c64 <_printf_float+0x1f4>
 8019c5e:	6823      	ldr	r3, [r4, #0]
 8019c60:	07d8      	lsls	r0, r3, #31
 8019c62:	d50f      	bpl.n	8019c84 <_printf_float+0x214>
 8019c64:	9b05      	ldr	r3, [sp, #20]
 8019c66:	465a      	mov	r2, fp
 8019c68:	4631      	mov	r1, r6
 8019c6a:	4628      	mov	r0, r5
 8019c6c:	47b8      	blx	r7
 8019c6e:	3001      	adds	r0, #1
 8019c70:	f43f af4a 	beq.w	8019b08 <_printf_float+0x98>
 8019c74:	f04f 0900 	mov.w	r9, #0
 8019c78:	f108 38ff 	add.w	r8, r8, #4294967295
 8019c7c:	f104 0a1a 	add.w	sl, r4, #26
 8019c80:	45c8      	cmp	r8, r9
 8019c82:	dc09      	bgt.n	8019c98 <_printf_float+0x228>
 8019c84:	6823      	ldr	r3, [r4, #0]
 8019c86:	079b      	lsls	r3, r3, #30
 8019c88:	f100 8107 	bmi.w	8019e9a <_printf_float+0x42a>
 8019c8c:	68e0      	ldr	r0, [r4, #12]
 8019c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c90:	4298      	cmp	r0, r3
 8019c92:	bfb8      	it	lt
 8019c94:	4618      	movlt	r0, r3
 8019c96:	e739      	b.n	8019b0c <_printf_float+0x9c>
 8019c98:	2301      	movs	r3, #1
 8019c9a:	4652      	mov	r2, sl
 8019c9c:	4631      	mov	r1, r6
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	47b8      	blx	r7
 8019ca2:	3001      	adds	r0, #1
 8019ca4:	f43f af30 	beq.w	8019b08 <_printf_float+0x98>
 8019ca8:	f109 0901 	add.w	r9, r9, #1
 8019cac:	e7e8      	b.n	8019c80 <_printf_float+0x210>
 8019cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	dc3b      	bgt.n	8019d2c <_printf_float+0x2bc>
 8019cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8019d28 <_printf_float+0x2b8>)
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	4631      	mov	r1, r6
 8019cba:	4628      	mov	r0, r5
 8019cbc:	47b8      	blx	r7
 8019cbe:	3001      	adds	r0, #1
 8019cc0:	f43f af22 	beq.w	8019b08 <_printf_float+0x98>
 8019cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8019ccc:	d102      	bne.n	8019cd4 <_printf_float+0x264>
 8019cce:	6823      	ldr	r3, [r4, #0]
 8019cd0:	07d9      	lsls	r1, r3, #31
 8019cd2:	d5d7      	bpl.n	8019c84 <_printf_float+0x214>
 8019cd4:	9b05      	ldr	r3, [sp, #20]
 8019cd6:	465a      	mov	r2, fp
 8019cd8:	4631      	mov	r1, r6
 8019cda:	4628      	mov	r0, r5
 8019cdc:	47b8      	blx	r7
 8019cde:	3001      	adds	r0, #1
 8019ce0:	f43f af12 	beq.w	8019b08 <_printf_float+0x98>
 8019ce4:	f04f 0a00 	mov.w	sl, #0
 8019ce8:	f104 0b1a 	add.w	fp, r4, #26
 8019cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cee:	425b      	negs	r3, r3
 8019cf0:	4553      	cmp	r3, sl
 8019cf2:	dc01      	bgt.n	8019cf8 <_printf_float+0x288>
 8019cf4:	464b      	mov	r3, r9
 8019cf6:	e794      	b.n	8019c22 <_printf_float+0x1b2>
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	465a      	mov	r2, fp
 8019cfc:	4631      	mov	r1, r6
 8019cfe:	4628      	mov	r0, r5
 8019d00:	47b8      	blx	r7
 8019d02:	3001      	adds	r0, #1
 8019d04:	f43f af00 	beq.w	8019b08 <_printf_float+0x98>
 8019d08:	f10a 0a01 	add.w	sl, sl, #1
 8019d0c:	e7ee      	b.n	8019cec <_printf_float+0x27c>
 8019d0e:	bf00      	nop
 8019d10:	ffffffff 	.word	0xffffffff
 8019d14:	7fefffff 	.word	0x7fefffff
 8019d18:	0801e869 	.word	0x0801e869
 8019d1c:	0801e86d 	.word	0x0801e86d
 8019d20:	0801e871 	.word	0x0801e871
 8019d24:	0801e875 	.word	0x0801e875
 8019d28:	0801e879 	.word	0x0801e879
 8019d2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019d2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019d32:	4553      	cmp	r3, sl
 8019d34:	bfa8      	it	ge
 8019d36:	4653      	movge	r3, sl
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	4699      	mov	r9, r3
 8019d3c:	dc37      	bgt.n	8019dae <_printf_float+0x33e>
 8019d3e:	2300      	movs	r3, #0
 8019d40:	9307      	str	r3, [sp, #28]
 8019d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d46:	f104 021a 	add.w	r2, r4, #26
 8019d4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019d4c:	9907      	ldr	r1, [sp, #28]
 8019d4e:	9306      	str	r3, [sp, #24]
 8019d50:	eba3 0309 	sub.w	r3, r3, r9
 8019d54:	428b      	cmp	r3, r1
 8019d56:	dc31      	bgt.n	8019dbc <_printf_float+0x34c>
 8019d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d5a:	459a      	cmp	sl, r3
 8019d5c:	dc3b      	bgt.n	8019dd6 <_printf_float+0x366>
 8019d5e:	6823      	ldr	r3, [r4, #0]
 8019d60:	07da      	lsls	r2, r3, #31
 8019d62:	d438      	bmi.n	8019dd6 <_printf_float+0x366>
 8019d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d66:	ebaa 0903 	sub.w	r9, sl, r3
 8019d6a:	9b06      	ldr	r3, [sp, #24]
 8019d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8019d70:	4599      	cmp	r9, r3
 8019d72:	bfa8      	it	ge
 8019d74:	4699      	movge	r9, r3
 8019d76:	f1b9 0f00 	cmp.w	r9, #0
 8019d7a:	dc34      	bgt.n	8019de6 <_printf_float+0x376>
 8019d7c:	f04f 0800 	mov.w	r8, #0
 8019d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d84:	f104 0b1a 	add.w	fp, r4, #26
 8019d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8019d8e:	eba3 0309 	sub.w	r3, r3, r9
 8019d92:	4543      	cmp	r3, r8
 8019d94:	f77f af76 	ble.w	8019c84 <_printf_float+0x214>
 8019d98:	2301      	movs	r3, #1
 8019d9a:	465a      	mov	r2, fp
 8019d9c:	4631      	mov	r1, r6
 8019d9e:	4628      	mov	r0, r5
 8019da0:	47b8      	blx	r7
 8019da2:	3001      	adds	r0, #1
 8019da4:	f43f aeb0 	beq.w	8019b08 <_printf_float+0x98>
 8019da8:	f108 0801 	add.w	r8, r8, #1
 8019dac:	e7ec      	b.n	8019d88 <_printf_float+0x318>
 8019dae:	4642      	mov	r2, r8
 8019db0:	4631      	mov	r1, r6
 8019db2:	4628      	mov	r0, r5
 8019db4:	47b8      	blx	r7
 8019db6:	3001      	adds	r0, #1
 8019db8:	d1c1      	bne.n	8019d3e <_printf_float+0x2ce>
 8019dba:	e6a5      	b.n	8019b08 <_printf_float+0x98>
 8019dbc:	2301      	movs	r3, #1
 8019dbe:	4631      	mov	r1, r6
 8019dc0:	4628      	mov	r0, r5
 8019dc2:	9206      	str	r2, [sp, #24]
 8019dc4:	47b8      	blx	r7
 8019dc6:	3001      	adds	r0, #1
 8019dc8:	f43f ae9e 	beq.w	8019b08 <_printf_float+0x98>
 8019dcc:	9b07      	ldr	r3, [sp, #28]
 8019dce:	9a06      	ldr	r2, [sp, #24]
 8019dd0:	3301      	adds	r3, #1
 8019dd2:	9307      	str	r3, [sp, #28]
 8019dd4:	e7b9      	b.n	8019d4a <_printf_float+0x2da>
 8019dd6:	9b05      	ldr	r3, [sp, #20]
 8019dd8:	465a      	mov	r2, fp
 8019dda:	4631      	mov	r1, r6
 8019ddc:	4628      	mov	r0, r5
 8019dde:	47b8      	blx	r7
 8019de0:	3001      	adds	r0, #1
 8019de2:	d1bf      	bne.n	8019d64 <_printf_float+0x2f4>
 8019de4:	e690      	b.n	8019b08 <_printf_float+0x98>
 8019de6:	9a06      	ldr	r2, [sp, #24]
 8019de8:	464b      	mov	r3, r9
 8019dea:	4442      	add	r2, r8
 8019dec:	4631      	mov	r1, r6
 8019dee:	4628      	mov	r0, r5
 8019df0:	47b8      	blx	r7
 8019df2:	3001      	adds	r0, #1
 8019df4:	d1c2      	bne.n	8019d7c <_printf_float+0x30c>
 8019df6:	e687      	b.n	8019b08 <_printf_float+0x98>
 8019df8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019dfc:	f1b9 0f01 	cmp.w	r9, #1
 8019e00:	dc01      	bgt.n	8019e06 <_printf_float+0x396>
 8019e02:	07db      	lsls	r3, r3, #31
 8019e04:	d536      	bpl.n	8019e74 <_printf_float+0x404>
 8019e06:	2301      	movs	r3, #1
 8019e08:	4642      	mov	r2, r8
 8019e0a:	4631      	mov	r1, r6
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	47b8      	blx	r7
 8019e10:	3001      	adds	r0, #1
 8019e12:	f43f ae79 	beq.w	8019b08 <_printf_float+0x98>
 8019e16:	9b05      	ldr	r3, [sp, #20]
 8019e18:	465a      	mov	r2, fp
 8019e1a:	4631      	mov	r1, r6
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	47b8      	blx	r7
 8019e20:	3001      	adds	r0, #1
 8019e22:	f43f ae71 	beq.w	8019b08 <_printf_float+0x98>
 8019e26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e32:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e36:	d018      	beq.n	8019e6a <_printf_float+0x3fa>
 8019e38:	464b      	mov	r3, r9
 8019e3a:	f108 0201 	add.w	r2, r8, #1
 8019e3e:	4631      	mov	r1, r6
 8019e40:	4628      	mov	r0, r5
 8019e42:	47b8      	blx	r7
 8019e44:	3001      	adds	r0, #1
 8019e46:	d10c      	bne.n	8019e62 <_printf_float+0x3f2>
 8019e48:	e65e      	b.n	8019b08 <_printf_float+0x98>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	465a      	mov	r2, fp
 8019e4e:	4631      	mov	r1, r6
 8019e50:	4628      	mov	r0, r5
 8019e52:	47b8      	blx	r7
 8019e54:	3001      	adds	r0, #1
 8019e56:	f43f ae57 	beq.w	8019b08 <_printf_float+0x98>
 8019e5a:	f108 0801 	add.w	r8, r8, #1
 8019e5e:	45c8      	cmp	r8, r9
 8019e60:	dbf3      	blt.n	8019e4a <_printf_float+0x3da>
 8019e62:	4653      	mov	r3, sl
 8019e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019e68:	e6dc      	b.n	8019c24 <_printf_float+0x1b4>
 8019e6a:	f04f 0800 	mov.w	r8, #0
 8019e6e:	f104 0b1a 	add.w	fp, r4, #26
 8019e72:	e7f4      	b.n	8019e5e <_printf_float+0x3ee>
 8019e74:	2301      	movs	r3, #1
 8019e76:	4642      	mov	r2, r8
 8019e78:	e7e1      	b.n	8019e3e <_printf_float+0x3ce>
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	464a      	mov	r2, r9
 8019e7e:	4631      	mov	r1, r6
 8019e80:	4628      	mov	r0, r5
 8019e82:	47b8      	blx	r7
 8019e84:	3001      	adds	r0, #1
 8019e86:	f43f ae3f 	beq.w	8019b08 <_printf_float+0x98>
 8019e8a:	f108 0801 	add.w	r8, r8, #1
 8019e8e:	68e3      	ldr	r3, [r4, #12]
 8019e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019e92:	1a5b      	subs	r3, r3, r1
 8019e94:	4543      	cmp	r3, r8
 8019e96:	dcf0      	bgt.n	8019e7a <_printf_float+0x40a>
 8019e98:	e6f8      	b.n	8019c8c <_printf_float+0x21c>
 8019e9a:	f04f 0800 	mov.w	r8, #0
 8019e9e:	f104 0919 	add.w	r9, r4, #25
 8019ea2:	e7f4      	b.n	8019e8e <_printf_float+0x41e>

08019ea4 <_printf_common>:
 8019ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ea8:	4616      	mov	r6, r2
 8019eaa:	4698      	mov	r8, r3
 8019eac:	688a      	ldr	r2, [r1, #8]
 8019eae:	690b      	ldr	r3, [r1, #16]
 8019eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019eb4:	4293      	cmp	r3, r2
 8019eb6:	bfb8      	it	lt
 8019eb8:	4613      	movlt	r3, r2
 8019eba:	6033      	str	r3, [r6, #0]
 8019ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019ec0:	4607      	mov	r7, r0
 8019ec2:	460c      	mov	r4, r1
 8019ec4:	b10a      	cbz	r2, 8019eca <_printf_common+0x26>
 8019ec6:	3301      	adds	r3, #1
 8019ec8:	6033      	str	r3, [r6, #0]
 8019eca:	6823      	ldr	r3, [r4, #0]
 8019ecc:	0699      	lsls	r1, r3, #26
 8019ece:	bf42      	ittt	mi
 8019ed0:	6833      	ldrmi	r3, [r6, #0]
 8019ed2:	3302      	addmi	r3, #2
 8019ed4:	6033      	strmi	r3, [r6, #0]
 8019ed6:	6825      	ldr	r5, [r4, #0]
 8019ed8:	f015 0506 	ands.w	r5, r5, #6
 8019edc:	d106      	bne.n	8019eec <_printf_common+0x48>
 8019ede:	f104 0a19 	add.w	sl, r4, #25
 8019ee2:	68e3      	ldr	r3, [r4, #12]
 8019ee4:	6832      	ldr	r2, [r6, #0]
 8019ee6:	1a9b      	subs	r3, r3, r2
 8019ee8:	42ab      	cmp	r3, r5
 8019eea:	dc26      	bgt.n	8019f3a <_printf_common+0x96>
 8019eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019ef0:	6822      	ldr	r2, [r4, #0]
 8019ef2:	3b00      	subs	r3, #0
 8019ef4:	bf18      	it	ne
 8019ef6:	2301      	movne	r3, #1
 8019ef8:	0692      	lsls	r2, r2, #26
 8019efa:	d42b      	bmi.n	8019f54 <_printf_common+0xb0>
 8019efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019f00:	4641      	mov	r1, r8
 8019f02:	4638      	mov	r0, r7
 8019f04:	47c8      	blx	r9
 8019f06:	3001      	adds	r0, #1
 8019f08:	d01e      	beq.n	8019f48 <_printf_common+0xa4>
 8019f0a:	6823      	ldr	r3, [r4, #0]
 8019f0c:	6922      	ldr	r2, [r4, #16]
 8019f0e:	f003 0306 	and.w	r3, r3, #6
 8019f12:	2b04      	cmp	r3, #4
 8019f14:	bf02      	ittt	eq
 8019f16:	68e5      	ldreq	r5, [r4, #12]
 8019f18:	6833      	ldreq	r3, [r6, #0]
 8019f1a:	1aed      	subeq	r5, r5, r3
 8019f1c:	68a3      	ldr	r3, [r4, #8]
 8019f1e:	bf0c      	ite	eq
 8019f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f24:	2500      	movne	r5, #0
 8019f26:	4293      	cmp	r3, r2
 8019f28:	bfc4      	itt	gt
 8019f2a:	1a9b      	subgt	r3, r3, r2
 8019f2c:	18ed      	addgt	r5, r5, r3
 8019f2e:	2600      	movs	r6, #0
 8019f30:	341a      	adds	r4, #26
 8019f32:	42b5      	cmp	r5, r6
 8019f34:	d11a      	bne.n	8019f6c <_printf_common+0xc8>
 8019f36:	2000      	movs	r0, #0
 8019f38:	e008      	b.n	8019f4c <_printf_common+0xa8>
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	4652      	mov	r2, sl
 8019f3e:	4641      	mov	r1, r8
 8019f40:	4638      	mov	r0, r7
 8019f42:	47c8      	blx	r9
 8019f44:	3001      	adds	r0, #1
 8019f46:	d103      	bne.n	8019f50 <_printf_common+0xac>
 8019f48:	f04f 30ff 	mov.w	r0, #4294967295
 8019f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f50:	3501      	adds	r5, #1
 8019f52:	e7c6      	b.n	8019ee2 <_printf_common+0x3e>
 8019f54:	18e1      	adds	r1, r4, r3
 8019f56:	1c5a      	adds	r2, r3, #1
 8019f58:	2030      	movs	r0, #48	@ 0x30
 8019f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019f5e:	4422      	add	r2, r4
 8019f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019f68:	3302      	adds	r3, #2
 8019f6a:	e7c7      	b.n	8019efc <_printf_common+0x58>
 8019f6c:	2301      	movs	r3, #1
 8019f6e:	4622      	mov	r2, r4
 8019f70:	4641      	mov	r1, r8
 8019f72:	4638      	mov	r0, r7
 8019f74:	47c8      	blx	r9
 8019f76:	3001      	adds	r0, #1
 8019f78:	d0e6      	beq.n	8019f48 <_printf_common+0xa4>
 8019f7a:	3601      	adds	r6, #1
 8019f7c:	e7d9      	b.n	8019f32 <_printf_common+0x8e>
	...

08019f80 <_printf_i>:
 8019f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f84:	7e0f      	ldrb	r7, [r1, #24]
 8019f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019f88:	2f78      	cmp	r7, #120	@ 0x78
 8019f8a:	4691      	mov	r9, r2
 8019f8c:	4680      	mov	r8, r0
 8019f8e:	460c      	mov	r4, r1
 8019f90:	469a      	mov	sl, r3
 8019f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019f96:	d807      	bhi.n	8019fa8 <_printf_i+0x28>
 8019f98:	2f62      	cmp	r7, #98	@ 0x62
 8019f9a:	d80a      	bhi.n	8019fb2 <_printf_i+0x32>
 8019f9c:	2f00      	cmp	r7, #0
 8019f9e:	f000 80d2 	beq.w	801a146 <_printf_i+0x1c6>
 8019fa2:	2f58      	cmp	r7, #88	@ 0x58
 8019fa4:	f000 80b9 	beq.w	801a11a <_printf_i+0x19a>
 8019fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019fb0:	e03a      	b.n	801a028 <_printf_i+0xa8>
 8019fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019fb6:	2b15      	cmp	r3, #21
 8019fb8:	d8f6      	bhi.n	8019fa8 <_printf_i+0x28>
 8019fba:	a101      	add	r1, pc, #4	@ (adr r1, 8019fc0 <_printf_i+0x40>)
 8019fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019fc0:	0801a019 	.word	0x0801a019
 8019fc4:	0801a02d 	.word	0x0801a02d
 8019fc8:	08019fa9 	.word	0x08019fa9
 8019fcc:	08019fa9 	.word	0x08019fa9
 8019fd0:	08019fa9 	.word	0x08019fa9
 8019fd4:	08019fa9 	.word	0x08019fa9
 8019fd8:	0801a02d 	.word	0x0801a02d
 8019fdc:	08019fa9 	.word	0x08019fa9
 8019fe0:	08019fa9 	.word	0x08019fa9
 8019fe4:	08019fa9 	.word	0x08019fa9
 8019fe8:	08019fa9 	.word	0x08019fa9
 8019fec:	0801a12d 	.word	0x0801a12d
 8019ff0:	0801a057 	.word	0x0801a057
 8019ff4:	0801a0e7 	.word	0x0801a0e7
 8019ff8:	08019fa9 	.word	0x08019fa9
 8019ffc:	08019fa9 	.word	0x08019fa9
 801a000:	0801a14f 	.word	0x0801a14f
 801a004:	08019fa9 	.word	0x08019fa9
 801a008:	0801a057 	.word	0x0801a057
 801a00c:	08019fa9 	.word	0x08019fa9
 801a010:	08019fa9 	.word	0x08019fa9
 801a014:	0801a0ef 	.word	0x0801a0ef
 801a018:	6833      	ldr	r3, [r6, #0]
 801a01a:	1d1a      	adds	r2, r3, #4
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	6032      	str	r2, [r6, #0]
 801a020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a028:	2301      	movs	r3, #1
 801a02a:	e09d      	b.n	801a168 <_printf_i+0x1e8>
 801a02c:	6833      	ldr	r3, [r6, #0]
 801a02e:	6820      	ldr	r0, [r4, #0]
 801a030:	1d19      	adds	r1, r3, #4
 801a032:	6031      	str	r1, [r6, #0]
 801a034:	0606      	lsls	r6, r0, #24
 801a036:	d501      	bpl.n	801a03c <_printf_i+0xbc>
 801a038:	681d      	ldr	r5, [r3, #0]
 801a03a:	e003      	b.n	801a044 <_printf_i+0xc4>
 801a03c:	0645      	lsls	r5, r0, #25
 801a03e:	d5fb      	bpl.n	801a038 <_printf_i+0xb8>
 801a040:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a044:	2d00      	cmp	r5, #0
 801a046:	da03      	bge.n	801a050 <_printf_i+0xd0>
 801a048:	232d      	movs	r3, #45	@ 0x2d
 801a04a:	426d      	negs	r5, r5
 801a04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a050:	4859      	ldr	r0, [pc, #356]	@ (801a1b8 <_printf_i+0x238>)
 801a052:	230a      	movs	r3, #10
 801a054:	e011      	b.n	801a07a <_printf_i+0xfa>
 801a056:	6821      	ldr	r1, [r4, #0]
 801a058:	6833      	ldr	r3, [r6, #0]
 801a05a:	0608      	lsls	r0, r1, #24
 801a05c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a060:	d402      	bmi.n	801a068 <_printf_i+0xe8>
 801a062:	0649      	lsls	r1, r1, #25
 801a064:	bf48      	it	mi
 801a066:	b2ad      	uxthmi	r5, r5
 801a068:	2f6f      	cmp	r7, #111	@ 0x6f
 801a06a:	4853      	ldr	r0, [pc, #332]	@ (801a1b8 <_printf_i+0x238>)
 801a06c:	6033      	str	r3, [r6, #0]
 801a06e:	bf14      	ite	ne
 801a070:	230a      	movne	r3, #10
 801a072:	2308      	moveq	r3, #8
 801a074:	2100      	movs	r1, #0
 801a076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a07a:	6866      	ldr	r6, [r4, #4]
 801a07c:	60a6      	str	r6, [r4, #8]
 801a07e:	2e00      	cmp	r6, #0
 801a080:	bfa2      	ittt	ge
 801a082:	6821      	ldrge	r1, [r4, #0]
 801a084:	f021 0104 	bicge.w	r1, r1, #4
 801a088:	6021      	strge	r1, [r4, #0]
 801a08a:	b90d      	cbnz	r5, 801a090 <_printf_i+0x110>
 801a08c:	2e00      	cmp	r6, #0
 801a08e:	d04b      	beq.n	801a128 <_printf_i+0x1a8>
 801a090:	4616      	mov	r6, r2
 801a092:	fbb5 f1f3 	udiv	r1, r5, r3
 801a096:	fb03 5711 	mls	r7, r3, r1, r5
 801a09a:	5dc7      	ldrb	r7, [r0, r7]
 801a09c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a0a0:	462f      	mov	r7, r5
 801a0a2:	42bb      	cmp	r3, r7
 801a0a4:	460d      	mov	r5, r1
 801a0a6:	d9f4      	bls.n	801a092 <_printf_i+0x112>
 801a0a8:	2b08      	cmp	r3, #8
 801a0aa:	d10b      	bne.n	801a0c4 <_printf_i+0x144>
 801a0ac:	6823      	ldr	r3, [r4, #0]
 801a0ae:	07df      	lsls	r7, r3, #31
 801a0b0:	d508      	bpl.n	801a0c4 <_printf_i+0x144>
 801a0b2:	6923      	ldr	r3, [r4, #16]
 801a0b4:	6861      	ldr	r1, [r4, #4]
 801a0b6:	4299      	cmp	r1, r3
 801a0b8:	bfde      	ittt	le
 801a0ba:	2330      	movle	r3, #48	@ 0x30
 801a0bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a0c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a0c4:	1b92      	subs	r2, r2, r6
 801a0c6:	6122      	str	r2, [r4, #16]
 801a0c8:	f8cd a000 	str.w	sl, [sp]
 801a0cc:	464b      	mov	r3, r9
 801a0ce:	aa03      	add	r2, sp, #12
 801a0d0:	4621      	mov	r1, r4
 801a0d2:	4640      	mov	r0, r8
 801a0d4:	f7ff fee6 	bl	8019ea4 <_printf_common>
 801a0d8:	3001      	adds	r0, #1
 801a0da:	d14a      	bne.n	801a172 <_printf_i+0x1f2>
 801a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e0:	b004      	add	sp, #16
 801a0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0e6:	6823      	ldr	r3, [r4, #0]
 801a0e8:	f043 0320 	orr.w	r3, r3, #32
 801a0ec:	6023      	str	r3, [r4, #0]
 801a0ee:	4833      	ldr	r0, [pc, #204]	@ (801a1bc <_printf_i+0x23c>)
 801a0f0:	2778      	movs	r7, #120	@ 0x78
 801a0f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a0f6:	6823      	ldr	r3, [r4, #0]
 801a0f8:	6831      	ldr	r1, [r6, #0]
 801a0fa:	061f      	lsls	r7, r3, #24
 801a0fc:	f851 5b04 	ldr.w	r5, [r1], #4
 801a100:	d402      	bmi.n	801a108 <_printf_i+0x188>
 801a102:	065f      	lsls	r7, r3, #25
 801a104:	bf48      	it	mi
 801a106:	b2ad      	uxthmi	r5, r5
 801a108:	6031      	str	r1, [r6, #0]
 801a10a:	07d9      	lsls	r1, r3, #31
 801a10c:	bf44      	itt	mi
 801a10e:	f043 0320 	orrmi.w	r3, r3, #32
 801a112:	6023      	strmi	r3, [r4, #0]
 801a114:	b11d      	cbz	r5, 801a11e <_printf_i+0x19e>
 801a116:	2310      	movs	r3, #16
 801a118:	e7ac      	b.n	801a074 <_printf_i+0xf4>
 801a11a:	4827      	ldr	r0, [pc, #156]	@ (801a1b8 <_printf_i+0x238>)
 801a11c:	e7e9      	b.n	801a0f2 <_printf_i+0x172>
 801a11e:	6823      	ldr	r3, [r4, #0]
 801a120:	f023 0320 	bic.w	r3, r3, #32
 801a124:	6023      	str	r3, [r4, #0]
 801a126:	e7f6      	b.n	801a116 <_printf_i+0x196>
 801a128:	4616      	mov	r6, r2
 801a12a:	e7bd      	b.n	801a0a8 <_printf_i+0x128>
 801a12c:	6833      	ldr	r3, [r6, #0]
 801a12e:	6825      	ldr	r5, [r4, #0]
 801a130:	6961      	ldr	r1, [r4, #20]
 801a132:	1d18      	adds	r0, r3, #4
 801a134:	6030      	str	r0, [r6, #0]
 801a136:	062e      	lsls	r6, r5, #24
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	d501      	bpl.n	801a140 <_printf_i+0x1c0>
 801a13c:	6019      	str	r1, [r3, #0]
 801a13e:	e002      	b.n	801a146 <_printf_i+0x1c6>
 801a140:	0668      	lsls	r0, r5, #25
 801a142:	d5fb      	bpl.n	801a13c <_printf_i+0x1bc>
 801a144:	8019      	strh	r1, [r3, #0]
 801a146:	2300      	movs	r3, #0
 801a148:	6123      	str	r3, [r4, #16]
 801a14a:	4616      	mov	r6, r2
 801a14c:	e7bc      	b.n	801a0c8 <_printf_i+0x148>
 801a14e:	6833      	ldr	r3, [r6, #0]
 801a150:	1d1a      	adds	r2, r3, #4
 801a152:	6032      	str	r2, [r6, #0]
 801a154:	681e      	ldr	r6, [r3, #0]
 801a156:	6862      	ldr	r2, [r4, #4]
 801a158:	2100      	movs	r1, #0
 801a15a:	4630      	mov	r0, r6
 801a15c:	f7e6 f8e8 	bl	8000330 <memchr>
 801a160:	b108      	cbz	r0, 801a166 <_printf_i+0x1e6>
 801a162:	1b80      	subs	r0, r0, r6
 801a164:	6060      	str	r0, [r4, #4]
 801a166:	6863      	ldr	r3, [r4, #4]
 801a168:	6123      	str	r3, [r4, #16]
 801a16a:	2300      	movs	r3, #0
 801a16c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a170:	e7aa      	b.n	801a0c8 <_printf_i+0x148>
 801a172:	6923      	ldr	r3, [r4, #16]
 801a174:	4632      	mov	r2, r6
 801a176:	4649      	mov	r1, r9
 801a178:	4640      	mov	r0, r8
 801a17a:	47d0      	blx	sl
 801a17c:	3001      	adds	r0, #1
 801a17e:	d0ad      	beq.n	801a0dc <_printf_i+0x15c>
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	079b      	lsls	r3, r3, #30
 801a184:	d413      	bmi.n	801a1ae <_printf_i+0x22e>
 801a186:	68e0      	ldr	r0, [r4, #12]
 801a188:	9b03      	ldr	r3, [sp, #12]
 801a18a:	4298      	cmp	r0, r3
 801a18c:	bfb8      	it	lt
 801a18e:	4618      	movlt	r0, r3
 801a190:	e7a6      	b.n	801a0e0 <_printf_i+0x160>
 801a192:	2301      	movs	r3, #1
 801a194:	4632      	mov	r2, r6
 801a196:	4649      	mov	r1, r9
 801a198:	4640      	mov	r0, r8
 801a19a:	47d0      	blx	sl
 801a19c:	3001      	adds	r0, #1
 801a19e:	d09d      	beq.n	801a0dc <_printf_i+0x15c>
 801a1a0:	3501      	adds	r5, #1
 801a1a2:	68e3      	ldr	r3, [r4, #12]
 801a1a4:	9903      	ldr	r1, [sp, #12]
 801a1a6:	1a5b      	subs	r3, r3, r1
 801a1a8:	42ab      	cmp	r3, r5
 801a1aa:	dcf2      	bgt.n	801a192 <_printf_i+0x212>
 801a1ac:	e7eb      	b.n	801a186 <_printf_i+0x206>
 801a1ae:	2500      	movs	r5, #0
 801a1b0:	f104 0619 	add.w	r6, r4, #25
 801a1b4:	e7f5      	b.n	801a1a2 <_printf_i+0x222>
 801a1b6:	bf00      	nop
 801a1b8:	0801e87b 	.word	0x0801e87b
 801a1bc:	0801e88c 	.word	0x0801e88c

0801a1c0 <std>:
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	b510      	push	{r4, lr}
 801a1c4:	4604      	mov	r4, r0
 801a1c6:	e9c0 3300 	strd	r3, r3, [r0]
 801a1ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1ce:	6083      	str	r3, [r0, #8]
 801a1d0:	8181      	strh	r1, [r0, #12]
 801a1d2:	6643      	str	r3, [r0, #100]	@ 0x64
 801a1d4:	81c2      	strh	r2, [r0, #14]
 801a1d6:	6183      	str	r3, [r0, #24]
 801a1d8:	4619      	mov	r1, r3
 801a1da:	2208      	movs	r2, #8
 801a1dc:	305c      	adds	r0, #92	@ 0x5c
 801a1de:	f000 f914 	bl	801a40a <memset>
 801a1e2:	4b0d      	ldr	r3, [pc, #52]	@ (801a218 <std+0x58>)
 801a1e4:	6263      	str	r3, [r4, #36]	@ 0x24
 801a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (801a21c <std+0x5c>)
 801a1e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (801a220 <std+0x60>)
 801a1ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a224 <std+0x64>)
 801a1f0:	6323      	str	r3, [r4, #48]	@ 0x30
 801a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (801a228 <std+0x68>)
 801a1f4:	6224      	str	r4, [r4, #32]
 801a1f6:	429c      	cmp	r4, r3
 801a1f8:	d006      	beq.n	801a208 <std+0x48>
 801a1fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a1fe:	4294      	cmp	r4, r2
 801a200:	d002      	beq.n	801a208 <std+0x48>
 801a202:	33d0      	adds	r3, #208	@ 0xd0
 801a204:	429c      	cmp	r4, r3
 801a206:	d105      	bne.n	801a214 <std+0x54>
 801a208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a210:	f000 b996 	b.w	801a540 <__retarget_lock_init_recursive>
 801a214:	bd10      	pop	{r4, pc}
 801a216:	bf00      	nop
 801a218:	0801a385 	.word	0x0801a385
 801a21c:	0801a3a7 	.word	0x0801a3a7
 801a220:	0801a3df 	.word	0x0801a3df
 801a224:	0801a403 	.word	0x0801a403
 801a228:	2401d8c4 	.word	0x2401d8c4

0801a22c <stdio_exit_handler>:
 801a22c:	4a02      	ldr	r2, [pc, #8]	@ (801a238 <stdio_exit_handler+0xc>)
 801a22e:	4903      	ldr	r1, [pc, #12]	@ (801a23c <stdio_exit_handler+0x10>)
 801a230:	4803      	ldr	r0, [pc, #12]	@ (801a240 <stdio_exit_handler+0x14>)
 801a232:	f000 b869 	b.w	801a308 <_fwalk_sglue>
 801a236:	bf00      	nop
 801a238:	24000134 	.word	0x24000134
 801a23c:	0801c6fd 	.word	0x0801c6fd
 801a240:	240002b0 	.word	0x240002b0

0801a244 <cleanup_stdio>:
 801a244:	6841      	ldr	r1, [r0, #4]
 801a246:	4b0c      	ldr	r3, [pc, #48]	@ (801a278 <cleanup_stdio+0x34>)
 801a248:	4299      	cmp	r1, r3
 801a24a:	b510      	push	{r4, lr}
 801a24c:	4604      	mov	r4, r0
 801a24e:	d001      	beq.n	801a254 <cleanup_stdio+0x10>
 801a250:	f002 fa54 	bl	801c6fc <_fflush_r>
 801a254:	68a1      	ldr	r1, [r4, #8]
 801a256:	4b09      	ldr	r3, [pc, #36]	@ (801a27c <cleanup_stdio+0x38>)
 801a258:	4299      	cmp	r1, r3
 801a25a:	d002      	beq.n	801a262 <cleanup_stdio+0x1e>
 801a25c:	4620      	mov	r0, r4
 801a25e:	f002 fa4d 	bl	801c6fc <_fflush_r>
 801a262:	68e1      	ldr	r1, [r4, #12]
 801a264:	4b06      	ldr	r3, [pc, #24]	@ (801a280 <cleanup_stdio+0x3c>)
 801a266:	4299      	cmp	r1, r3
 801a268:	d004      	beq.n	801a274 <cleanup_stdio+0x30>
 801a26a:	4620      	mov	r0, r4
 801a26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a270:	f002 ba44 	b.w	801c6fc <_fflush_r>
 801a274:	bd10      	pop	{r4, pc}
 801a276:	bf00      	nop
 801a278:	2401d8c4 	.word	0x2401d8c4
 801a27c:	2401d92c 	.word	0x2401d92c
 801a280:	2401d994 	.word	0x2401d994

0801a284 <global_stdio_init.part.0>:
 801a284:	b510      	push	{r4, lr}
 801a286:	4b0b      	ldr	r3, [pc, #44]	@ (801a2b4 <global_stdio_init.part.0+0x30>)
 801a288:	4c0b      	ldr	r4, [pc, #44]	@ (801a2b8 <global_stdio_init.part.0+0x34>)
 801a28a:	4a0c      	ldr	r2, [pc, #48]	@ (801a2bc <global_stdio_init.part.0+0x38>)
 801a28c:	601a      	str	r2, [r3, #0]
 801a28e:	4620      	mov	r0, r4
 801a290:	2200      	movs	r2, #0
 801a292:	2104      	movs	r1, #4
 801a294:	f7ff ff94 	bl	801a1c0 <std>
 801a298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a29c:	2201      	movs	r2, #1
 801a29e:	2109      	movs	r1, #9
 801a2a0:	f7ff ff8e 	bl	801a1c0 <std>
 801a2a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a2a8:	2202      	movs	r2, #2
 801a2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2ae:	2112      	movs	r1, #18
 801a2b0:	f7ff bf86 	b.w	801a1c0 <std>
 801a2b4:	2401d9fc 	.word	0x2401d9fc
 801a2b8:	2401d8c4 	.word	0x2401d8c4
 801a2bc:	0801a22d 	.word	0x0801a22d

0801a2c0 <__sfp_lock_acquire>:
 801a2c0:	4801      	ldr	r0, [pc, #4]	@ (801a2c8 <__sfp_lock_acquire+0x8>)
 801a2c2:	f000 b93e 	b.w	801a542 <__retarget_lock_acquire_recursive>
 801a2c6:	bf00      	nop
 801a2c8:	2401da05 	.word	0x2401da05

0801a2cc <__sfp_lock_release>:
 801a2cc:	4801      	ldr	r0, [pc, #4]	@ (801a2d4 <__sfp_lock_release+0x8>)
 801a2ce:	f000 b939 	b.w	801a544 <__retarget_lock_release_recursive>
 801a2d2:	bf00      	nop
 801a2d4:	2401da05 	.word	0x2401da05

0801a2d8 <__sinit>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	f7ff fff0 	bl	801a2c0 <__sfp_lock_acquire>
 801a2e0:	6a23      	ldr	r3, [r4, #32]
 801a2e2:	b11b      	cbz	r3, 801a2ec <__sinit+0x14>
 801a2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2e8:	f7ff bff0 	b.w	801a2cc <__sfp_lock_release>
 801a2ec:	4b04      	ldr	r3, [pc, #16]	@ (801a300 <__sinit+0x28>)
 801a2ee:	6223      	str	r3, [r4, #32]
 801a2f0:	4b04      	ldr	r3, [pc, #16]	@ (801a304 <__sinit+0x2c>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d1f5      	bne.n	801a2e4 <__sinit+0xc>
 801a2f8:	f7ff ffc4 	bl	801a284 <global_stdio_init.part.0>
 801a2fc:	e7f2      	b.n	801a2e4 <__sinit+0xc>
 801a2fe:	bf00      	nop
 801a300:	0801a245 	.word	0x0801a245
 801a304:	2401d9fc 	.word	0x2401d9fc

0801a308 <_fwalk_sglue>:
 801a308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a30c:	4607      	mov	r7, r0
 801a30e:	4688      	mov	r8, r1
 801a310:	4614      	mov	r4, r2
 801a312:	2600      	movs	r6, #0
 801a314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a318:	f1b9 0901 	subs.w	r9, r9, #1
 801a31c:	d505      	bpl.n	801a32a <_fwalk_sglue+0x22>
 801a31e:	6824      	ldr	r4, [r4, #0]
 801a320:	2c00      	cmp	r4, #0
 801a322:	d1f7      	bne.n	801a314 <_fwalk_sglue+0xc>
 801a324:	4630      	mov	r0, r6
 801a326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a32a:	89ab      	ldrh	r3, [r5, #12]
 801a32c:	2b01      	cmp	r3, #1
 801a32e:	d907      	bls.n	801a340 <_fwalk_sglue+0x38>
 801a330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a334:	3301      	adds	r3, #1
 801a336:	d003      	beq.n	801a340 <_fwalk_sglue+0x38>
 801a338:	4629      	mov	r1, r5
 801a33a:	4638      	mov	r0, r7
 801a33c:	47c0      	blx	r8
 801a33e:	4306      	orrs	r6, r0
 801a340:	3568      	adds	r5, #104	@ 0x68
 801a342:	e7e9      	b.n	801a318 <_fwalk_sglue+0x10>

0801a344 <siprintf>:
 801a344:	b40e      	push	{r1, r2, r3}
 801a346:	b500      	push	{lr}
 801a348:	b09c      	sub	sp, #112	@ 0x70
 801a34a:	ab1d      	add	r3, sp, #116	@ 0x74
 801a34c:	9002      	str	r0, [sp, #8]
 801a34e:	9006      	str	r0, [sp, #24]
 801a350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a354:	4809      	ldr	r0, [pc, #36]	@ (801a37c <siprintf+0x38>)
 801a356:	9107      	str	r1, [sp, #28]
 801a358:	9104      	str	r1, [sp, #16]
 801a35a:	4909      	ldr	r1, [pc, #36]	@ (801a380 <siprintf+0x3c>)
 801a35c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a360:	9105      	str	r1, [sp, #20]
 801a362:	6800      	ldr	r0, [r0, #0]
 801a364:	9301      	str	r3, [sp, #4]
 801a366:	a902      	add	r1, sp, #8
 801a368:	f002 f848 	bl	801c3fc <_svfiprintf_r>
 801a36c:	9b02      	ldr	r3, [sp, #8]
 801a36e:	2200      	movs	r2, #0
 801a370:	701a      	strb	r2, [r3, #0]
 801a372:	b01c      	add	sp, #112	@ 0x70
 801a374:	f85d eb04 	ldr.w	lr, [sp], #4
 801a378:	b003      	add	sp, #12
 801a37a:	4770      	bx	lr
 801a37c:	240002ac 	.word	0x240002ac
 801a380:	ffff0208 	.word	0xffff0208

0801a384 <__sread>:
 801a384:	b510      	push	{r4, lr}
 801a386:	460c      	mov	r4, r1
 801a388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a38c:	f000 f88a 	bl	801a4a4 <_read_r>
 801a390:	2800      	cmp	r0, #0
 801a392:	bfab      	itete	ge
 801a394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a396:	89a3      	ldrhlt	r3, [r4, #12]
 801a398:	181b      	addge	r3, r3, r0
 801a39a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a39e:	bfac      	ite	ge
 801a3a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a3a2:	81a3      	strhlt	r3, [r4, #12]
 801a3a4:	bd10      	pop	{r4, pc}

0801a3a6 <__swrite>:
 801a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3aa:	461f      	mov	r7, r3
 801a3ac:	898b      	ldrh	r3, [r1, #12]
 801a3ae:	05db      	lsls	r3, r3, #23
 801a3b0:	4605      	mov	r5, r0
 801a3b2:	460c      	mov	r4, r1
 801a3b4:	4616      	mov	r6, r2
 801a3b6:	d505      	bpl.n	801a3c4 <__swrite+0x1e>
 801a3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3bc:	2302      	movs	r3, #2
 801a3be:	2200      	movs	r2, #0
 801a3c0:	f000 f85e 	bl	801a480 <_lseek_r>
 801a3c4:	89a3      	ldrh	r3, [r4, #12]
 801a3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a3ce:	81a3      	strh	r3, [r4, #12]
 801a3d0:	4632      	mov	r2, r6
 801a3d2:	463b      	mov	r3, r7
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3da:	f000 b875 	b.w	801a4c8 <_write_r>

0801a3de <__sseek>:
 801a3de:	b510      	push	{r4, lr}
 801a3e0:	460c      	mov	r4, r1
 801a3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3e6:	f000 f84b 	bl	801a480 <_lseek_r>
 801a3ea:	1c43      	adds	r3, r0, #1
 801a3ec:	89a3      	ldrh	r3, [r4, #12]
 801a3ee:	bf15      	itete	ne
 801a3f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a3f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a3f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a3fa:	81a3      	strheq	r3, [r4, #12]
 801a3fc:	bf18      	it	ne
 801a3fe:	81a3      	strhne	r3, [r4, #12]
 801a400:	bd10      	pop	{r4, pc}

0801a402 <__sclose>:
 801a402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a406:	f000 b82b 	b.w	801a460 <_close_r>

0801a40a <memset>:
 801a40a:	4402      	add	r2, r0
 801a40c:	4603      	mov	r3, r0
 801a40e:	4293      	cmp	r3, r2
 801a410:	d100      	bne.n	801a414 <memset+0xa>
 801a412:	4770      	bx	lr
 801a414:	f803 1b01 	strb.w	r1, [r3], #1
 801a418:	e7f9      	b.n	801a40e <memset+0x4>

0801a41a <strchr>:
 801a41a:	b2c9      	uxtb	r1, r1
 801a41c:	4603      	mov	r3, r0
 801a41e:	4618      	mov	r0, r3
 801a420:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a424:	b112      	cbz	r2, 801a42c <strchr+0x12>
 801a426:	428a      	cmp	r2, r1
 801a428:	d1f9      	bne.n	801a41e <strchr+0x4>
 801a42a:	4770      	bx	lr
 801a42c:	2900      	cmp	r1, #0
 801a42e:	bf18      	it	ne
 801a430:	2000      	movne	r0, #0
 801a432:	4770      	bx	lr

0801a434 <strncmp>:
 801a434:	b510      	push	{r4, lr}
 801a436:	b16a      	cbz	r2, 801a454 <strncmp+0x20>
 801a438:	3901      	subs	r1, #1
 801a43a:	1884      	adds	r4, r0, r2
 801a43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a440:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a444:	429a      	cmp	r2, r3
 801a446:	d103      	bne.n	801a450 <strncmp+0x1c>
 801a448:	42a0      	cmp	r0, r4
 801a44a:	d001      	beq.n	801a450 <strncmp+0x1c>
 801a44c:	2a00      	cmp	r2, #0
 801a44e:	d1f5      	bne.n	801a43c <strncmp+0x8>
 801a450:	1ad0      	subs	r0, r2, r3
 801a452:	bd10      	pop	{r4, pc}
 801a454:	4610      	mov	r0, r2
 801a456:	e7fc      	b.n	801a452 <strncmp+0x1e>

0801a458 <_localeconv_r>:
 801a458:	4800      	ldr	r0, [pc, #0]	@ (801a45c <_localeconv_r+0x4>)
 801a45a:	4770      	bx	lr
 801a45c:	24000230 	.word	0x24000230

0801a460 <_close_r>:
 801a460:	b538      	push	{r3, r4, r5, lr}
 801a462:	4d06      	ldr	r5, [pc, #24]	@ (801a47c <_close_r+0x1c>)
 801a464:	2300      	movs	r3, #0
 801a466:	4604      	mov	r4, r0
 801a468:	4608      	mov	r0, r1
 801a46a:	602b      	str	r3, [r5, #0]
 801a46c:	f7e8 fcb8 	bl	8002de0 <_close>
 801a470:	1c43      	adds	r3, r0, #1
 801a472:	d102      	bne.n	801a47a <_close_r+0x1a>
 801a474:	682b      	ldr	r3, [r5, #0]
 801a476:	b103      	cbz	r3, 801a47a <_close_r+0x1a>
 801a478:	6023      	str	r3, [r4, #0]
 801a47a:	bd38      	pop	{r3, r4, r5, pc}
 801a47c:	2401da00 	.word	0x2401da00

0801a480 <_lseek_r>:
 801a480:	b538      	push	{r3, r4, r5, lr}
 801a482:	4d07      	ldr	r5, [pc, #28]	@ (801a4a0 <_lseek_r+0x20>)
 801a484:	4604      	mov	r4, r0
 801a486:	4608      	mov	r0, r1
 801a488:	4611      	mov	r1, r2
 801a48a:	2200      	movs	r2, #0
 801a48c:	602a      	str	r2, [r5, #0]
 801a48e:	461a      	mov	r2, r3
 801a490:	f7e8 fccd 	bl	8002e2e <_lseek>
 801a494:	1c43      	adds	r3, r0, #1
 801a496:	d102      	bne.n	801a49e <_lseek_r+0x1e>
 801a498:	682b      	ldr	r3, [r5, #0]
 801a49a:	b103      	cbz	r3, 801a49e <_lseek_r+0x1e>
 801a49c:	6023      	str	r3, [r4, #0]
 801a49e:	bd38      	pop	{r3, r4, r5, pc}
 801a4a0:	2401da00 	.word	0x2401da00

0801a4a4 <_read_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	4d07      	ldr	r5, [pc, #28]	@ (801a4c4 <_read_r+0x20>)
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	4608      	mov	r0, r1
 801a4ac:	4611      	mov	r1, r2
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	602a      	str	r2, [r5, #0]
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	f7e8 fc5b 	bl	8002d6e <_read>
 801a4b8:	1c43      	adds	r3, r0, #1
 801a4ba:	d102      	bne.n	801a4c2 <_read_r+0x1e>
 801a4bc:	682b      	ldr	r3, [r5, #0]
 801a4be:	b103      	cbz	r3, 801a4c2 <_read_r+0x1e>
 801a4c0:	6023      	str	r3, [r4, #0]
 801a4c2:	bd38      	pop	{r3, r4, r5, pc}
 801a4c4:	2401da00 	.word	0x2401da00

0801a4c8 <_write_r>:
 801a4c8:	b538      	push	{r3, r4, r5, lr}
 801a4ca:	4d07      	ldr	r5, [pc, #28]	@ (801a4e8 <_write_r+0x20>)
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	4608      	mov	r0, r1
 801a4d0:	4611      	mov	r1, r2
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	602a      	str	r2, [r5, #0]
 801a4d6:	461a      	mov	r2, r3
 801a4d8:	f7e8 fc66 	bl	8002da8 <_write>
 801a4dc:	1c43      	adds	r3, r0, #1
 801a4de:	d102      	bne.n	801a4e6 <_write_r+0x1e>
 801a4e0:	682b      	ldr	r3, [r5, #0]
 801a4e2:	b103      	cbz	r3, 801a4e6 <_write_r+0x1e>
 801a4e4:	6023      	str	r3, [r4, #0]
 801a4e6:	bd38      	pop	{r3, r4, r5, pc}
 801a4e8:	2401da00 	.word	0x2401da00

0801a4ec <__errno>:
 801a4ec:	4b01      	ldr	r3, [pc, #4]	@ (801a4f4 <__errno+0x8>)
 801a4ee:	6818      	ldr	r0, [r3, #0]
 801a4f0:	4770      	bx	lr
 801a4f2:	bf00      	nop
 801a4f4:	240002ac 	.word	0x240002ac

0801a4f8 <__libc_init_array>:
 801a4f8:	b570      	push	{r4, r5, r6, lr}
 801a4fa:	4d0d      	ldr	r5, [pc, #52]	@ (801a530 <__libc_init_array+0x38>)
 801a4fc:	4c0d      	ldr	r4, [pc, #52]	@ (801a534 <__libc_init_array+0x3c>)
 801a4fe:	1b64      	subs	r4, r4, r5
 801a500:	10a4      	asrs	r4, r4, #2
 801a502:	2600      	movs	r6, #0
 801a504:	42a6      	cmp	r6, r4
 801a506:	d109      	bne.n	801a51c <__libc_init_array+0x24>
 801a508:	4d0b      	ldr	r5, [pc, #44]	@ (801a538 <__libc_init_array+0x40>)
 801a50a:	4c0c      	ldr	r4, [pc, #48]	@ (801a53c <__libc_init_array+0x44>)
 801a50c:	f003 fb18 	bl	801db40 <_init>
 801a510:	1b64      	subs	r4, r4, r5
 801a512:	10a4      	asrs	r4, r4, #2
 801a514:	2600      	movs	r6, #0
 801a516:	42a6      	cmp	r6, r4
 801a518:	d105      	bne.n	801a526 <__libc_init_array+0x2e>
 801a51a:	bd70      	pop	{r4, r5, r6, pc}
 801a51c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a520:	4798      	blx	r3
 801a522:	3601      	adds	r6, #1
 801a524:	e7ee      	b.n	801a504 <__libc_init_array+0xc>
 801a526:	f855 3b04 	ldr.w	r3, [r5], #4
 801a52a:	4798      	blx	r3
 801a52c:	3601      	adds	r6, #1
 801a52e:	e7f2      	b.n	801a516 <__libc_init_array+0x1e>
 801a530:	0801ee58 	.word	0x0801ee58
 801a534:	0801ee58 	.word	0x0801ee58
 801a538:	0801ee58 	.word	0x0801ee58
 801a53c:	0801ee5c 	.word	0x0801ee5c

0801a540 <__retarget_lock_init_recursive>:
 801a540:	4770      	bx	lr

0801a542 <__retarget_lock_acquire_recursive>:
 801a542:	4770      	bx	lr

0801a544 <__retarget_lock_release_recursive>:
 801a544:	4770      	bx	lr

0801a546 <memcpy>:
 801a546:	440a      	add	r2, r1
 801a548:	4291      	cmp	r1, r2
 801a54a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a54e:	d100      	bne.n	801a552 <memcpy+0xc>
 801a550:	4770      	bx	lr
 801a552:	b510      	push	{r4, lr}
 801a554:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a558:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a55c:	4291      	cmp	r1, r2
 801a55e:	d1f9      	bne.n	801a554 <memcpy+0xe>
 801a560:	bd10      	pop	{r4, pc}
 801a562:	0000      	movs	r0, r0
 801a564:	0000      	movs	r0, r0
	...

0801a568 <nan>:
 801a568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a570 <nan+0x8>
 801a56c:	4770      	bx	lr
 801a56e:	bf00      	nop
 801a570:	00000000 	.word	0x00000000
 801a574:	7ff80000 	.word	0x7ff80000

0801a578 <quorem>:
 801a578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a57c:	6903      	ldr	r3, [r0, #16]
 801a57e:	690c      	ldr	r4, [r1, #16]
 801a580:	42a3      	cmp	r3, r4
 801a582:	4607      	mov	r7, r0
 801a584:	db7e      	blt.n	801a684 <quorem+0x10c>
 801a586:	3c01      	subs	r4, #1
 801a588:	f101 0814 	add.w	r8, r1, #20
 801a58c:	00a3      	lsls	r3, r4, #2
 801a58e:	f100 0514 	add.w	r5, r0, #20
 801a592:	9300      	str	r3, [sp, #0]
 801a594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a598:	9301      	str	r3, [sp, #4]
 801a59a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a59e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a5a2:	3301      	adds	r3, #1
 801a5a4:	429a      	cmp	r2, r3
 801a5a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a5aa:	fbb2 f6f3 	udiv	r6, r2, r3
 801a5ae:	d32e      	bcc.n	801a60e <quorem+0x96>
 801a5b0:	f04f 0a00 	mov.w	sl, #0
 801a5b4:	46c4      	mov	ip, r8
 801a5b6:	46ae      	mov	lr, r5
 801a5b8:	46d3      	mov	fp, sl
 801a5ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a5be:	b298      	uxth	r0, r3
 801a5c0:	fb06 a000 	mla	r0, r6, r0, sl
 801a5c4:	0c02      	lsrs	r2, r0, #16
 801a5c6:	0c1b      	lsrs	r3, r3, #16
 801a5c8:	fb06 2303 	mla	r3, r6, r3, r2
 801a5cc:	f8de 2000 	ldr.w	r2, [lr]
 801a5d0:	b280      	uxth	r0, r0
 801a5d2:	b292      	uxth	r2, r2
 801a5d4:	1a12      	subs	r2, r2, r0
 801a5d6:	445a      	add	r2, fp
 801a5d8:	f8de 0000 	ldr.w	r0, [lr]
 801a5dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5e0:	b29b      	uxth	r3, r3
 801a5e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a5e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a5ea:	b292      	uxth	r2, r2
 801a5ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a5f0:	45e1      	cmp	r9, ip
 801a5f2:	f84e 2b04 	str.w	r2, [lr], #4
 801a5f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a5fa:	d2de      	bcs.n	801a5ba <quorem+0x42>
 801a5fc:	9b00      	ldr	r3, [sp, #0]
 801a5fe:	58eb      	ldr	r3, [r5, r3]
 801a600:	b92b      	cbnz	r3, 801a60e <quorem+0x96>
 801a602:	9b01      	ldr	r3, [sp, #4]
 801a604:	3b04      	subs	r3, #4
 801a606:	429d      	cmp	r5, r3
 801a608:	461a      	mov	r2, r3
 801a60a:	d32f      	bcc.n	801a66c <quorem+0xf4>
 801a60c:	613c      	str	r4, [r7, #16]
 801a60e:	4638      	mov	r0, r7
 801a610:	f001 fca0 	bl	801bf54 <__mcmp>
 801a614:	2800      	cmp	r0, #0
 801a616:	db25      	blt.n	801a664 <quorem+0xec>
 801a618:	4629      	mov	r1, r5
 801a61a:	2000      	movs	r0, #0
 801a61c:	f858 2b04 	ldr.w	r2, [r8], #4
 801a620:	f8d1 c000 	ldr.w	ip, [r1]
 801a624:	fa1f fe82 	uxth.w	lr, r2
 801a628:	fa1f f38c 	uxth.w	r3, ip
 801a62c:	eba3 030e 	sub.w	r3, r3, lr
 801a630:	4403      	add	r3, r0
 801a632:	0c12      	lsrs	r2, r2, #16
 801a634:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a638:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a642:	45c1      	cmp	r9, r8
 801a644:	f841 3b04 	str.w	r3, [r1], #4
 801a648:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a64c:	d2e6      	bcs.n	801a61c <quorem+0xa4>
 801a64e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a656:	b922      	cbnz	r2, 801a662 <quorem+0xea>
 801a658:	3b04      	subs	r3, #4
 801a65a:	429d      	cmp	r5, r3
 801a65c:	461a      	mov	r2, r3
 801a65e:	d30b      	bcc.n	801a678 <quorem+0x100>
 801a660:	613c      	str	r4, [r7, #16]
 801a662:	3601      	adds	r6, #1
 801a664:	4630      	mov	r0, r6
 801a666:	b003      	add	sp, #12
 801a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66c:	6812      	ldr	r2, [r2, #0]
 801a66e:	3b04      	subs	r3, #4
 801a670:	2a00      	cmp	r2, #0
 801a672:	d1cb      	bne.n	801a60c <quorem+0x94>
 801a674:	3c01      	subs	r4, #1
 801a676:	e7c6      	b.n	801a606 <quorem+0x8e>
 801a678:	6812      	ldr	r2, [r2, #0]
 801a67a:	3b04      	subs	r3, #4
 801a67c:	2a00      	cmp	r2, #0
 801a67e:	d1ef      	bne.n	801a660 <quorem+0xe8>
 801a680:	3c01      	subs	r4, #1
 801a682:	e7ea      	b.n	801a65a <quorem+0xe2>
 801a684:	2000      	movs	r0, #0
 801a686:	e7ee      	b.n	801a666 <quorem+0xee>

0801a688 <_dtoa_r>:
 801a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a68c:	ed2d 8b02 	vpush	{d8}
 801a690:	69c7      	ldr	r7, [r0, #28]
 801a692:	b091      	sub	sp, #68	@ 0x44
 801a694:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a698:	ec55 4b10 	vmov	r4, r5, d0
 801a69c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a69e:	9107      	str	r1, [sp, #28]
 801a6a0:	4681      	mov	r9, r0
 801a6a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a6a4:	930d      	str	r3, [sp, #52]	@ 0x34
 801a6a6:	b97f      	cbnz	r7, 801a6c8 <_dtoa_r+0x40>
 801a6a8:	2010      	movs	r0, #16
 801a6aa:	f001 f8c7 	bl	801b83c <malloc>
 801a6ae:	4602      	mov	r2, r0
 801a6b0:	f8c9 001c 	str.w	r0, [r9, #28]
 801a6b4:	b920      	cbnz	r0, 801a6c0 <_dtoa_r+0x38>
 801a6b6:	4ba0      	ldr	r3, [pc, #640]	@ (801a938 <_dtoa_r+0x2b0>)
 801a6b8:	21ef      	movs	r1, #239	@ 0xef
 801a6ba:	48a0      	ldr	r0, [pc, #640]	@ (801a93c <_dtoa_r+0x2b4>)
 801a6bc:	f002 f870 	bl	801c7a0 <__assert_func>
 801a6c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a6c4:	6007      	str	r7, [r0, #0]
 801a6c6:	60c7      	str	r7, [r0, #12]
 801a6c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a6cc:	6819      	ldr	r1, [r3, #0]
 801a6ce:	b159      	cbz	r1, 801a6e8 <_dtoa_r+0x60>
 801a6d0:	685a      	ldr	r2, [r3, #4]
 801a6d2:	604a      	str	r2, [r1, #4]
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	4093      	lsls	r3, r2
 801a6d8:	608b      	str	r3, [r1, #8]
 801a6da:	4648      	mov	r0, r9
 801a6dc:	f001 f9b6 	bl	801ba4c <_Bfree>
 801a6e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	601a      	str	r2, [r3, #0]
 801a6e8:	1e2b      	subs	r3, r5, #0
 801a6ea:	bfbb      	ittet	lt
 801a6ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a6f0:	9303      	strlt	r3, [sp, #12]
 801a6f2:	2300      	movge	r3, #0
 801a6f4:	2201      	movlt	r2, #1
 801a6f6:	bfac      	ite	ge
 801a6f8:	6033      	strge	r3, [r6, #0]
 801a6fa:	6032      	strlt	r2, [r6, #0]
 801a6fc:	4b90      	ldr	r3, [pc, #576]	@ (801a940 <_dtoa_r+0x2b8>)
 801a6fe:	9e03      	ldr	r6, [sp, #12]
 801a700:	43b3      	bics	r3, r6
 801a702:	d110      	bne.n	801a726 <_dtoa_r+0x9e>
 801a704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a706:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a70a:	6013      	str	r3, [r2, #0]
 801a70c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a710:	4323      	orrs	r3, r4
 801a712:	f000 84de 	beq.w	801b0d2 <_dtoa_r+0xa4a>
 801a716:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a718:	4f8a      	ldr	r7, [pc, #552]	@ (801a944 <_dtoa_r+0x2bc>)
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f000 84e0 	beq.w	801b0e0 <_dtoa_r+0xa58>
 801a720:	1cfb      	adds	r3, r7, #3
 801a722:	f000 bcdb 	b.w	801b0dc <_dtoa_r+0xa54>
 801a726:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a72a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a732:	d10a      	bne.n	801a74a <_dtoa_r+0xc2>
 801a734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a736:	2301      	movs	r3, #1
 801a738:	6013      	str	r3, [r2, #0]
 801a73a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a73c:	b113      	cbz	r3, 801a744 <_dtoa_r+0xbc>
 801a73e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a740:	4b81      	ldr	r3, [pc, #516]	@ (801a948 <_dtoa_r+0x2c0>)
 801a742:	6013      	str	r3, [r2, #0]
 801a744:	4f81      	ldr	r7, [pc, #516]	@ (801a94c <_dtoa_r+0x2c4>)
 801a746:	f000 bccb 	b.w	801b0e0 <_dtoa_r+0xa58>
 801a74a:	aa0e      	add	r2, sp, #56	@ 0x38
 801a74c:	a90f      	add	r1, sp, #60	@ 0x3c
 801a74e:	4648      	mov	r0, r9
 801a750:	eeb0 0b48 	vmov.f64	d0, d8
 801a754:	f001 fd1e 	bl	801c194 <__d2b>
 801a758:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a75c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a75e:	9001      	str	r0, [sp, #4]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d045      	beq.n	801a7f0 <_dtoa_r+0x168>
 801a764:	eeb0 7b48 	vmov.f64	d7, d8
 801a768:	ee18 1a90 	vmov	r1, s17
 801a76c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a770:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a774:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a778:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a77c:	2500      	movs	r5, #0
 801a77e:	ee07 1a90 	vmov	s15, r1
 801a782:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a920 <_dtoa_r+0x298>
 801a78a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a78e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a928 <_dtoa_r+0x2a0>
 801a792:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a796:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a930 <_dtoa_r+0x2a8>
 801a79a:	ee07 3a90 	vmov	s15, r3
 801a79e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a7a2:	eeb0 7b46 	vmov.f64	d7, d6
 801a7a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a7aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a7ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b6:	ee16 8a90 	vmov	r8, s13
 801a7ba:	d508      	bpl.n	801a7ce <_dtoa_r+0x146>
 801a7bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a7c0:	eeb4 6b47 	vcmp.f64	d6, d7
 801a7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c8:	bf18      	it	ne
 801a7ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a7ce:	f1b8 0f16 	cmp.w	r8, #22
 801a7d2:	d82b      	bhi.n	801a82c <_dtoa_r+0x1a4>
 801a7d4:	495e      	ldr	r1, [pc, #376]	@ (801a950 <_dtoa_r+0x2c8>)
 801a7d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a7da:	ed91 7b00 	vldr	d7, [r1]
 801a7de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e6:	d501      	bpl.n	801a7ec <_dtoa_r+0x164>
 801a7e8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7ec:	2100      	movs	r1, #0
 801a7ee:	e01e      	b.n	801a82e <_dtoa_r+0x1a6>
 801a7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a7f2:	4413      	add	r3, r2
 801a7f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a7f8:	2920      	cmp	r1, #32
 801a7fa:	bfc1      	itttt	gt
 801a7fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a800:	408e      	lslgt	r6, r1
 801a802:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a806:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a80a:	bfd6      	itet	le
 801a80c:	f1c1 0120 	rsble	r1, r1, #32
 801a810:	4331      	orrgt	r1, r6
 801a812:	fa04 f101 	lslle.w	r1, r4, r1
 801a816:	ee07 1a90 	vmov	s15, r1
 801a81a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a81e:	3b01      	subs	r3, #1
 801a820:	ee17 1a90 	vmov	r1, s15
 801a824:	2501      	movs	r5, #1
 801a826:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a82a:	e7a8      	b.n	801a77e <_dtoa_r+0xf6>
 801a82c:	2101      	movs	r1, #1
 801a82e:	1ad2      	subs	r2, r2, r3
 801a830:	1e53      	subs	r3, r2, #1
 801a832:	9306      	str	r3, [sp, #24]
 801a834:	bf45      	ittet	mi
 801a836:	f1c2 0301 	rsbmi	r3, r2, #1
 801a83a:	9305      	strmi	r3, [sp, #20]
 801a83c:	2300      	movpl	r3, #0
 801a83e:	2300      	movmi	r3, #0
 801a840:	bf4c      	ite	mi
 801a842:	9306      	strmi	r3, [sp, #24]
 801a844:	9305      	strpl	r3, [sp, #20]
 801a846:	f1b8 0f00 	cmp.w	r8, #0
 801a84a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a84c:	db18      	blt.n	801a880 <_dtoa_r+0x1f8>
 801a84e:	9b06      	ldr	r3, [sp, #24]
 801a850:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a854:	4443      	add	r3, r8
 801a856:	9306      	str	r3, [sp, #24]
 801a858:	2300      	movs	r3, #0
 801a85a:	9a07      	ldr	r2, [sp, #28]
 801a85c:	2a09      	cmp	r2, #9
 801a85e:	d849      	bhi.n	801a8f4 <_dtoa_r+0x26c>
 801a860:	2a05      	cmp	r2, #5
 801a862:	bfc4      	itt	gt
 801a864:	3a04      	subgt	r2, #4
 801a866:	9207      	strgt	r2, [sp, #28]
 801a868:	9a07      	ldr	r2, [sp, #28]
 801a86a:	f1a2 0202 	sub.w	r2, r2, #2
 801a86e:	bfcc      	ite	gt
 801a870:	2400      	movgt	r4, #0
 801a872:	2401      	movle	r4, #1
 801a874:	2a03      	cmp	r2, #3
 801a876:	d848      	bhi.n	801a90a <_dtoa_r+0x282>
 801a878:	e8df f002 	tbb	[pc, r2]
 801a87c:	3a2c2e0b 	.word	0x3a2c2e0b
 801a880:	9b05      	ldr	r3, [sp, #20]
 801a882:	2200      	movs	r2, #0
 801a884:	eba3 0308 	sub.w	r3, r3, r8
 801a888:	9305      	str	r3, [sp, #20]
 801a88a:	920a      	str	r2, [sp, #40]	@ 0x28
 801a88c:	f1c8 0300 	rsb	r3, r8, #0
 801a890:	e7e3      	b.n	801a85a <_dtoa_r+0x1d2>
 801a892:	2200      	movs	r2, #0
 801a894:	9208      	str	r2, [sp, #32]
 801a896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a898:	2a00      	cmp	r2, #0
 801a89a:	dc39      	bgt.n	801a910 <_dtoa_r+0x288>
 801a89c:	f04f 0b01 	mov.w	fp, #1
 801a8a0:	46da      	mov	sl, fp
 801a8a2:	465a      	mov	r2, fp
 801a8a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a8a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	2004      	movs	r0, #4
 801a8b0:	f100 0614 	add.w	r6, r0, #20
 801a8b4:	4296      	cmp	r6, r2
 801a8b6:	d930      	bls.n	801a91a <_dtoa_r+0x292>
 801a8b8:	6079      	str	r1, [r7, #4]
 801a8ba:	4648      	mov	r0, r9
 801a8bc:	9304      	str	r3, [sp, #16]
 801a8be:	f001 f885 	bl	801b9cc <_Balloc>
 801a8c2:	9b04      	ldr	r3, [sp, #16]
 801a8c4:	4607      	mov	r7, r0
 801a8c6:	2800      	cmp	r0, #0
 801a8c8:	d146      	bne.n	801a958 <_dtoa_r+0x2d0>
 801a8ca:	4b22      	ldr	r3, [pc, #136]	@ (801a954 <_dtoa_r+0x2cc>)
 801a8cc:	4602      	mov	r2, r0
 801a8ce:	f240 11af 	movw	r1, #431	@ 0x1af
 801a8d2:	e6f2      	b.n	801a6ba <_dtoa_r+0x32>
 801a8d4:	2201      	movs	r2, #1
 801a8d6:	e7dd      	b.n	801a894 <_dtoa_r+0x20c>
 801a8d8:	2200      	movs	r2, #0
 801a8da:	9208      	str	r2, [sp, #32]
 801a8dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a8de:	eb08 0b02 	add.w	fp, r8, r2
 801a8e2:	f10b 0a01 	add.w	sl, fp, #1
 801a8e6:	4652      	mov	r2, sl
 801a8e8:	2a01      	cmp	r2, #1
 801a8ea:	bfb8      	it	lt
 801a8ec:	2201      	movlt	r2, #1
 801a8ee:	e7db      	b.n	801a8a8 <_dtoa_r+0x220>
 801a8f0:	2201      	movs	r2, #1
 801a8f2:	e7f2      	b.n	801a8da <_dtoa_r+0x252>
 801a8f4:	2401      	movs	r4, #1
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a8fc:	f04f 3bff 	mov.w	fp, #4294967295
 801a900:	2100      	movs	r1, #0
 801a902:	46da      	mov	sl, fp
 801a904:	2212      	movs	r2, #18
 801a906:	9109      	str	r1, [sp, #36]	@ 0x24
 801a908:	e7ce      	b.n	801a8a8 <_dtoa_r+0x220>
 801a90a:	2201      	movs	r2, #1
 801a90c:	9208      	str	r2, [sp, #32]
 801a90e:	e7f5      	b.n	801a8fc <_dtoa_r+0x274>
 801a910:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a914:	46da      	mov	sl, fp
 801a916:	465a      	mov	r2, fp
 801a918:	e7c6      	b.n	801a8a8 <_dtoa_r+0x220>
 801a91a:	3101      	adds	r1, #1
 801a91c:	0040      	lsls	r0, r0, #1
 801a91e:	e7c7      	b.n	801a8b0 <_dtoa_r+0x228>
 801a920:	636f4361 	.word	0x636f4361
 801a924:	3fd287a7 	.word	0x3fd287a7
 801a928:	8b60c8b3 	.word	0x8b60c8b3
 801a92c:	3fc68a28 	.word	0x3fc68a28
 801a930:	509f79fb 	.word	0x509f79fb
 801a934:	3fd34413 	.word	0x3fd34413
 801a938:	0801e8b2 	.word	0x0801e8b2
 801a93c:	0801e8c9 	.word	0x0801e8c9
 801a940:	7ff00000 	.word	0x7ff00000
 801a944:	0801e8ae 	.word	0x0801e8ae
 801a948:	0801e87a 	.word	0x0801e87a
 801a94c:	0801e879 	.word	0x0801e879
 801a950:	0801ea20 	.word	0x0801ea20
 801a954:	0801e921 	.word	0x0801e921
 801a958:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a95c:	f1ba 0f0e 	cmp.w	sl, #14
 801a960:	6010      	str	r0, [r2, #0]
 801a962:	d86f      	bhi.n	801aa44 <_dtoa_r+0x3bc>
 801a964:	2c00      	cmp	r4, #0
 801a966:	d06d      	beq.n	801aa44 <_dtoa_r+0x3bc>
 801a968:	f1b8 0f00 	cmp.w	r8, #0
 801a96c:	f340 80c2 	ble.w	801aaf4 <_dtoa_r+0x46c>
 801a970:	4aca      	ldr	r2, [pc, #808]	@ (801ac9c <_dtoa_r+0x614>)
 801a972:	f008 010f 	and.w	r1, r8, #15
 801a976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a97a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a97e:	ed92 7b00 	vldr	d7, [r2]
 801a982:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a986:	f000 80a9 	beq.w	801aadc <_dtoa_r+0x454>
 801a98a:	4ac5      	ldr	r2, [pc, #788]	@ (801aca0 <_dtoa_r+0x618>)
 801a98c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a994:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a998:	f001 010f 	and.w	r1, r1, #15
 801a99c:	2203      	movs	r2, #3
 801a99e:	48c0      	ldr	r0, [pc, #768]	@ (801aca0 <_dtoa_r+0x618>)
 801a9a0:	2900      	cmp	r1, #0
 801a9a2:	f040 809d 	bne.w	801aae0 <_dtoa_r+0x458>
 801a9a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a9aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a9ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a9b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9b8:	2900      	cmp	r1, #0
 801a9ba:	f000 80c1 	beq.w	801ab40 <_dtoa_r+0x4b8>
 801a9be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a9c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9ca:	f140 80b9 	bpl.w	801ab40 <_dtoa_r+0x4b8>
 801a9ce:	f1ba 0f00 	cmp.w	sl, #0
 801a9d2:	f000 80b5 	beq.w	801ab40 <_dtoa_r+0x4b8>
 801a9d6:	f1bb 0f00 	cmp.w	fp, #0
 801a9da:	dd31      	ble.n	801aa40 <_dtoa_r+0x3b8>
 801a9dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a9e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a9e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9e8:	f108 31ff 	add.w	r1, r8, #4294967295
 801a9ec:	9104      	str	r1, [sp, #16]
 801a9ee:	3201      	adds	r2, #1
 801a9f0:	465c      	mov	r4, fp
 801a9f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a9f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a9fa:	ee07 2a90 	vmov	s15, r2
 801a9fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801aa02:	eea7 5b06 	vfma.f64	d5, d7, d6
 801aa06:	ee15 2a90 	vmov	r2, s11
 801aa0a:	ec51 0b15 	vmov	r0, r1, d5
 801aa0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801aa12:	2c00      	cmp	r4, #0
 801aa14:	f040 8098 	bne.w	801ab48 <_dtoa_r+0x4c0>
 801aa18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801aa1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801aa20:	ec41 0b17 	vmov	d7, r0, r1
 801aa24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa2c:	f300 8261 	bgt.w	801aef2 <_dtoa_r+0x86a>
 801aa30:	eeb1 7b47 	vneg.f64	d7, d7
 801aa34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa3c:	f100 80f5 	bmi.w	801ac2a <_dtoa_r+0x5a2>
 801aa40:	ed8d 8b02 	vstr	d8, [sp, #8]
 801aa44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aa46:	2a00      	cmp	r2, #0
 801aa48:	f2c0 812c 	blt.w	801aca4 <_dtoa_r+0x61c>
 801aa4c:	f1b8 0f0e 	cmp.w	r8, #14
 801aa50:	f300 8128 	bgt.w	801aca4 <_dtoa_r+0x61c>
 801aa54:	4b91      	ldr	r3, [pc, #580]	@ (801ac9c <_dtoa_r+0x614>)
 801aa56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aa5a:	ed93 6b00 	vldr	d6, [r3]
 801aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	da03      	bge.n	801aa6c <_dtoa_r+0x3e4>
 801aa64:	f1ba 0f00 	cmp.w	sl, #0
 801aa68:	f340 80d2 	ble.w	801ac10 <_dtoa_r+0x588>
 801aa6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801aa70:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa74:	463e      	mov	r6, r7
 801aa76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801aa7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801aa7e:	ee15 3a10 	vmov	r3, s10
 801aa82:	3330      	adds	r3, #48	@ 0x30
 801aa84:	f806 3b01 	strb.w	r3, [r6], #1
 801aa88:	1bf3      	subs	r3, r6, r7
 801aa8a:	459a      	cmp	sl, r3
 801aa8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801aa90:	eea3 7b46 	vfms.f64	d7, d3, d6
 801aa94:	f040 80f8 	bne.w	801ac88 <_dtoa_r+0x600>
 801aa98:	ee37 7b07 	vadd.f64	d7, d7, d7
 801aa9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaa4:	f300 80dd 	bgt.w	801ac62 <_dtoa_r+0x5da>
 801aaa8:	eeb4 7b46 	vcmp.f64	d7, d6
 801aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab0:	d104      	bne.n	801aabc <_dtoa_r+0x434>
 801aab2:	ee15 3a10 	vmov	r3, s10
 801aab6:	07db      	lsls	r3, r3, #31
 801aab8:	f100 80d3 	bmi.w	801ac62 <_dtoa_r+0x5da>
 801aabc:	9901      	ldr	r1, [sp, #4]
 801aabe:	4648      	mov	r0, r9
 801aac0:	f000 ffc4 	bl	801ba4c <_Bfree>
 801aac4:	2300      	movs	r3, #0
 801aac6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aac8:	7033      	strb	r3, [r6, #0]
 801aaca:	f108 0301 	add.w	r3, r8, #1
 801aace:	6013      	str	r3, [r2, #0]
 801aad0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	f000 8304 	beq.w	801b0e0 <_dtoa_r+0xa58>
 801aad8:	601e      	str	r6, [r3, #0]
 801aada:	e301      	b.n	801b0e0 <_dtoa_r+0xa58>
 801aadc:	2202      	movs	r2, #2
 801aade:	e75e      	b.n	801a99e <_dtoa_r+0x316>
 801aae0:	07cc      	lsls	r4, r1, #31
 801aae2:	d504      	bpl.n	801aaee <_dtoa_r+0x466>
 801aae4:	ed90 6b00 	vldr	d6, [r0]
 801aae8:	3201      	adds	r2, #1
 801aaea:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aaee:	1049      	asrs	r1, r1, #1
 801aaf0:	3008      	adds	r0, #8
 801aaf2:	e755      	b.n	801a9a0 <_dtoa_r+0x318>
 801aaf4:	d022      	beq.n	801ab3c <_dtoa_r+0x4b4>
 801aaf6:	f1c8 0100 	rsb	r1, r8, #0
 801aafa:	4a68      	ldr	r2, [pc, #416]	@ (801ac9c <_dtoa_r+0x614>)
 801aafc:	f001 000f 	and.w	r0, r1, #15
 801ab00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ab04:	ed92 7b00 	vldr	d7, [r2]
 801ab08:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ab0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ab10:	4863      	ldr	r0, [pc, #396]	@ (801aca0 <_dtoa_r+0x618>)
 801ab12:	1109      	asrs	r1, r1, #4
 801ab14:	2400      	movs	r4, #0
 801ab16:	2202      	movs	r2, #2
 801ab18:	b929      	cbnz	r1, 801ab26 <_dtoa_r+0x49e>
 801ab1a:	2c00      	cmp	r4, #0
 801ab1c:	f43f af49 	beq.w	801a9b2 <_dtoa_r+0x32a>
 801ab20:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ab24:	e745      	b.n	801a9b2 <_dtoa_r+0x32a>
 801ab26:	07ce      	lsls	r6, r1, #31
 801ab28:	d505      	bpl.n	801ab36 <_dtoa_r+0x4ae>
 801ab2a:	ed90 6b00 	vldr	d6, [r0]
 801ab2e:	3201      	adds	r2, #1
 801ab30:	2401      	movs	r4, #1
 801ab32:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab36:	1049      	asrs	r1, r1, #1
 801ab38:	3008      	adds	r0, #8
 801ab3a:	e7ed      	b.n	801ab18 <_dtoa_r+0x490>
 801ab3c:	2202      	movs	r2, #2
 801ab3e:	e738      	b.n	801a9b2 <_dtoa_r+0x32a>
 801ab40:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab44:	4654      	mov	r4, sl
 801ab46:	e754      	b.n	801a9f2 <_dtoa_r+0x36a>
 801ab48:	4a54      	ldr	r2, [pc, #336]	@ (801ac9c <_dtoa_r+0x614>)
 801ab4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801ab4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ab52:	9a08      	ldr	r2, [sp, #32]
 801ab54:	ec41 0b17 	vmov	d7, r0, r1
 801ab58:	443c      	add	r4, r7
 801ab5a:	b34a      	cbz	r2, 801abb0 <_dtoa_r+0x528>
 801ab5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801ab60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801ab64:	463e      	mov	r6, r7
 801ab66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ab6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801ab6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ab72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ab76:	ee14 2a90 	vmov	r2, s9
 801ab7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ab7e:	3230      	adds	r2, #48	@ 0x30
 801ab80:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ab84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ab88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab8c:	f806 2b01 	strb.w	r2, [r6], #1
 801ab90:	d438      	bmi.n	801ac04 <_dtoa_r+0x57c>
 801ab92:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ab96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab9e:	d462      	bmi.n	801ac66 <_dtoa_r+0x5de>
 801aba0:	42a6      	cmp	r6, r4
 801aba2:	f43f af4d 	beq.w	801aa40 <_dtoa_r+0x3b8>
 801aba6:	ee27 7b03 	vmul.f64	d7, d7, d3
 801abaa:	ee26 6b03 	vmul.f64	d6, d6, d3
 801abae:	e7e0      	b.n	801ab72 <_dtoa_r+0x4ea>
 801abb0:	4621      	mov	r1, r4
 801abb2:	463e      	mov	r6, r7
 801abb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 801abb8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801abbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801abc0:	ee14 2a90 	vmov	r2, s9
 801abc4:	3230      	adds	r2, #48	@ 0x30
 801abc6:	f806 2b01 	strb.w	r2, [r6], #1
 801abca:	42a6      	cmp	r6, r4
 801abcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801abd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801abd4:	d119      	bne.n	801ac0a <_dtoa_r+0x582>
 801abd6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801abda:	ee37 4b05 	vadd.f64	d4, d7, d5
 801abde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abe6:	dc3e      	bgt.n	801ac66 <_dtoa_r+0x5de>
 801abe8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801abec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801abf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abf4:	f57f af24 	bpl.w	801aa40 <_dtoa_r+0x3b8>
 801abf8:	460e      	mov	r6, r1
 801abfa:	3901      	subs	r1, #1
 801abfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ac00:	2b30      	cmp	r3, #48	@ 0x30
 801ac02:	d0f9      	beq.n	801abf8 <_dtoa_r+0x570>
 801ac04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ac08:	e758      	b.n	801aabc <_dtoa_r+0x434>
 801ac0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ac0e:	e7d5      	b.n	801abbc <_dtoa_r+0x534>
 801ac10:	d10b      	bne.n	801ac2a <_dtoa_r+0x5a2>
 801ac12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ac16:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ac1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ac1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac26:	f2c0 8161 	blt.w	801aeec <_dtoa_r+0x864>
 801ac2a:	2400      	movs	r4, #0
 801ac2c:	4625      	mov	r5, r4
 801ac2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac30:	43db      	mvns	r3, r3
 801ac32:	9304      	str	r3, [sp, #16]
 801ac34:	463e      	mov	r6, r7
 801ac36:	f04f 0800 	mov.w	r8, #0
 801ac3a:	4621      	mov	r1, r4
 801ac3c:	4648      	mov	r0, r9
 801ac3e:	f000 ff05 	bl	801ba4c <_Bfree>
 801ac42:	2d00      	cmp	r5, #0
 801ac44:	d0de      	beq.n	801ac04 <_dtoa_r+0x57c>
 801ac46:	f1b8 0f00 	cmp.w	r8, #0
 801ac4a:	d005      	beq.n	801ac58 <_dtoa_r+0x5d0>
 801ac4c:	45a8      	cmp	r8, r5
 801ac4e:	d003      	beq.n	801ac58 <_dtoa_r+0x5d0>
 801ac50:	4641      	mov	r1, r8
 801ac52:	4648      	mov	r0, r9
 801ac54:	f000 fefa 	bl	801ba4c <_Bfree>
 801ac58:	4629      	mov	r1, r5
 801ac5a:	4648      	mov	r0, r9
 801ac5c:	f000 fef6 	bl	801ba4c <_Bfree>
 801ac60:	e7d0      	b.n	801ac04 <_dtoa_r+0x57c>
 801ac62:	f8cd 8010 	str.w	r8, [sp, #16]
 801ac66:	4633      	mov	r3, r6
 801ac68:	461e      	mov	r6, r3
 801ac6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac6e:	2a39      	cmp	r2, #57	@ 0x39
 801ac70:	d106      	bne.n	801ac80 <_dtoa_r+0x5f8>
 801ac72:	429f      	cmp	r7, r3
 801ac74:	d1f8      	bne.n	801ac68 <_dtoa_r+0x5e0>
 801ac76:	9a04      	ldr	r2, [sp, #16]
 801ac78:	3201      	adds	r2, #1
 801ac7a:	9204      	str	r2, [sp, #16]
 801ac7c:	2230      	movs	r2, #48	@ 0x30
 801ac7e:	703a      	strb	r2, [r7, #0]
 801ac80:	781a      	ldrb	r2, [r3, #0]
 801ac82:	3201      	adds	r2, #1
 801ac84:	701a      	strb	r2, [r3, #0]
 801ac86:	e7bd      	b.n	801ac04 <_dtoa_r+0x57c>
 801ac88:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ac8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac94:	f47f aeef 	bne.w	801aa76 <_dtoa_r+0x3ee>
 801ac98:	e710      	b.n	801aabc <_dtoa_r+0x434>
 801ac9a:	bf00      	nop
 801ac9c:	0801ea20 	.word	0x0801ea20
 801aca0:	0801e9f8 	.word	0x0801e9f8
 801aca4:	9908      	ldr	r1, [sp, #32]
 801aca6:	2900      	cmp	r1, #0
 801aca8:	f000 80e3 	beq.w	801ae72 <_dtoa_r+0x7ea>
 801acac:	9907      	ldr	r1, [sp, #28]
 801acae:	2901      	cmp	r1, #1
 801acb0:	f300 80c8 	bgt.w	801ae44 <_dtoa_r+0x7bc>
 801acb4:	2d00      	cmp	r5, #0
 801acb6:	f000 80c1 	beq.w	801ae3c <_dtoa_r+0x7b4>
 801acba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801acbe:	9e05      	ldr	r6, [sp, #20]
 801acc0:	461c      	mov	r4, r3
 801acc2:	9304      	str	r3, [sp, #16]
 801acc4:	9b05      	ldr	r3, [sp, #20]
 801acc6:	4413      	add	r3, r2
 801acc8:	9305      	str	r3, [sp, #20]
 801acca:	9b06      	ldr	r3, [sp, #24]
 801accc:	2101      	movs	r1, #1
 801acce:	4413      	add	r3, r2
 801acd0:	4648      	mov	r0, r9
 801acd2:	9306      	str	r3, [sp, #24]
 801acd4:	f000 ffb8 	bl	801bc48 <__i2b>
 801acd8:	9b04      	ldr	r3, [sp, #16]
 801acda:	4605      	mov	r5, r0
 801acdc:	b166      	cbz	r6, 801acf8 <_dtoa_r+0x670>
 801acde:	9a06      	ldr	r2, [sp, #24]
 801ace0:	2a00      	cmp	r2, #0
 801ace2:	dd09      	ble.n	801acf8 <_dtoa_r+0x670>
 801ace4:	42b2      	cmp	r2, r6
 801ace6:	9905      	ldr	r1, [sp, #20]
 801ace8:	bfa8      	it	ge
 801acea:	4632      	movge	r2, r6
 801acec:	1a89      	subs	r1, r1, r2
 801acee:	9105      	str	r1, [sp, #20]
 801acf0:	9906      	ldr	r1, [sp, #24]
 801acf2:	1ab6      	subs	r6, r6, r2
 801acf4:	1a8a      	subs	r2, r1, r2
 801acf6:	9206      	str	r2, [sp, #24]
 801acf8:	b1fb      	cbz	r3, 801ad3a <_dtoa_r+0x6b2>
 801acfa:	9a08      	ldr	r2, [sp, #32]
 801acfc:	2a00      	cmp	r2, #0
 801acfe:	f000 80bc 	beq.w	801ae7a <_dtoa_r+0x7f2>
 801ad02:	b19c      	cbz	r4, 801ad2c <_dtoa_r+0x6a4>
 801ad04:	4629      	mov	r1, r5
 801ad06:	4622      	mov	r2, r4
 801ad08:	4648      	mov	r0, r9
 801ad0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad0c:	f001 f85c 	bl	801bdc8 <__pow5mult>
 801ad10:	9a01      	ldr	r2, [sp, #4]
 801ad12:	4601      	mov	r1, r0
 801ad14:	4605      	mov	r5, r0
 801ad16:	4648      	mov	r0, r9
 801ad18:	f000 ffac 	bl	801bc74 <__multiply>
 801ad1c:	9901      	ldr	r1, [sp, #4]
 801ad1e:	9004      	str	r0, [sp, #16]
 801ad20:	4648      	mov	r0, r9
 801ad22:	f000 fe93 	bl	801ba4c <_Bfree>
 801ad26:	9a04      	ldr	r2, [sp, #16]
 801ad28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ad2a:	9201      	str	r2, [sp, #4]
 801ad2c:	1b1a      	subs	r2, r3, r4
 801ad2e:	d004      	beq.n	801ad3a <_dtoa_r+0x6b2>
 801ad30:	9901      	ldr	r1, [sp, #4]
 801ad32:	4648      	mov	r0, r9
 801ad34:	f001 f848 	bl	801bdc8 <__pow5mult>
 801ad38:	9001      	str	r0, [sp, #4]
 801ad3a:	2101      	movs	r1, #1
 801ad3c:	4648      	mov	r0, r9
 801ad3e:	f000 ff83 	bl	801bc48 <__i2b>
 801ad42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad44:	4604      	mov	r4, r0
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	f000 81d0 	beq.w	801b0ec <_dtoa_r+0xa64>
 801ad4c:	461a      	mov	r2, r3
 801ad4e:	4601      	mov	r1, r0
 801ad50:	4648      	mov	r0, r9
 801ad52:	f001 f839 	bl	801bdc8 <__pow5mult>
 801ad56:	9b07      	ldr	r3, [sp, #28]
 801ad58:	2b01      	cmp	r3, #1
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	f300 8095 	bgt.w	801ae8a <_dtoa_r+0x802>
 801ad60:	9b02      	ldr	r3, [sp, #8]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	f040 808b 	bne.w	801ae7e <_dtoa_r+0x7f6>
 801ad68:	9b03      	ldr	r3, [sp, #12]
 801ad6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ad6e:	2a00      	cmp	r2, #0
 801ad70:	f040 8087 	bne.w	801ae82 <_dtoa_r+0x7fa>
 801ad74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801ad78:	0d12      	lsrs	r2, r2, #20
 801ad7a:	0512      	lsls	r2, r2, #20
 801ad7c:	2a00      	cmp	r2, #0
 801ad7e:	f000 8082 	beq.w	801ae86 <_dtoa_r+0x7fe>
 801ad82:	9b05      	ldr	r3, [sp, #20]
 801ad84:	3301      	adds	r3, #1
 801ad86:	9305      	str	r3, [sp, #20]
 801ad88:	9b06      	ldr	r3, [sp, #24]
 801ad8a:	3301      	adds	r3, #1
 801ad8c:	9306      	str	r3, [sp, #24]
 801ad8e:	2301      	movs	r3, #1
 801ad90:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f000 81af 	beq.w	801b0f8 <_dtoa_r+0xa70>
 801ad9a:	6922      	ldr	r2, [r4, #16]
 801ad9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ada0:	6910      	ldr	r0, [r2, #16]
 801ada2:	f000 ff05 	bl	801bbb0 <__hi0bits>
 801ada6:	f1c0 0020 	rsb	r0, r0, #32
 801adaa:	9b06      	ldr	r3, [sp, #24]
 801adac:	4418      	add	r0, r3
 801adae:	f010 001f 	ands.w	r0, r0, #31
 801adb2:	d076      	beq.n	801aea2 <_dtoa_r+0x81a>
 801adb4:	f1c0 0220 	rsb	r2, r0, #32
 801adb8:	2a04      	cmp	r2, #4
 801adba:	dd69      	ble.n	801ae90 <_dtoa_r+0x808>
 801adbc:	9b05      	ldr	r3, [sp, #20]
 801adbe:	f1c0 001c 	rsb	r0, r0, #28
 801adc2:	4403      	add	r3, r0
 801adc4:	9305      	str	r3, [sp, #20]
 801adc6:	9b06      	ldr	r3, [sp, #24]
 801adc8:	4406      	add	r6, r0
 801adca:	4403      	add	r3, r0
 801adcc:	9306      	str	r3, [sp, #24]
 801adce:	9b05      	ldr	r3, [sp, #20]
 801add0:	2b00      	cmp	r3, #0
 801add2:	dd05      	ble.n	801ade0 <_dtoa_r+0x758>
 801add4:	9901      	ldr	r1, [sp, #4]
 801add6:	461a      	mov	r2, r3
 801add8:	4648      	mov	r0, r9
 801adda:	f001 f84f 	bl	801be7c <__lshift>
 801adde:	9001      	str	r0, [sp, #4]
 801ade0:	9b06      	ldr	r3, [sp, #24]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	dd05      	ble.n	801adf2 <_dtoa_r+0x76a>
 801ade6:	4621      	mov	r1, r4
 801ade8:	461a      	mov	r2, r3
 801adea:	4648      	mov	r0, r9
 801adec:	f001 f846 	bl	801be7c <__lshift>
 801adf0:	4604      	mov	r4, r0
 801adf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d056      	beq.n	801aea6 <_dtoa_r+0x81e>
 801adf8:	9801      	ldr	r0, [sp, #4]
 801adfa:	4621      	mov	r1, r4
 801adfc:	f001 f8aa 	bl	801bf54 <__mcmp>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	da50      	bge.n	801aea6 <_dtoa_r+0x81e>
 801ae04:	f108 33ff 	add.w	r3, r8, #4294967295
 801ae08:	9304      	str	r3, [sp, #16]
 801ae0a:	9901      	ldr	r1, [sp, #4]
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	220a      	movs	r2, #10
 801ae10:	4648      	mov	r0, r9
 801ae12:	f000 fe3d 	bl	801ba90 <__multadd>
 801ae16:	9b08      	ldr	r3, [sp, #32]
 801ae18:	9001      	str	r0, [sp, #4]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f000 816e 	beq.w	801b0fc <_dtoa_r+0xa74>
 801ae20:	4629      	mov	r1, r5
 801ae22:	2300      	movs	r3, #0
 801ae24:	220a      	movs	r2, #10
 801ae26:	4648      	mov	r0, r9
 801ae28:	f000 fe32 	bl	801ba90 <__multadd>
 801ae2c:	f1bb 0f00 	cmp.w	fp, #0
 801ae30:	4605      	mov	r5, r0
 801ae32:	dc64      	bgt.n	801aefe <_dtoa_r+0x876>
 801ae34:	9b07      	ldr	r3, [sp, #28]
 801ae36:	2b02      	cmp	r3, #2
 801ae38:	dc3e      	bgt.n	801aeb8 <_dtoa_r+0x830>
 801ae3a:	e060      	b.n	801aefe <_dtoa_r+0x876>
 801ae3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ae3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ae42:	e73c      	b.n	801acbe <_dtoa_r+0x636>
 801ae44:	f10a 34ff 	add.w	r4, sl, #4294967295
 801ae48:	42a3      	cmp	r3, r4
 801ae4a:	bfbf      	itttt	lt
 801ae4c:	1ae2      	sublt	r2, r4, r3
 801ae4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ae50:	189b      	addlt	r3, r3, r2
 801ae52:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801ae54:	bfae      	itee	ge
 801ae56:	1b1c      	subge	r4, r3, r4
 801ae58:	4623      	movlt	r3, r4
 801ae5a:	2400      	movlt	r4, #0
 801ae5c:	f1ba 0f00 	cmp.w	sl, #0
 801ae60:	bfb5      	itete	lt
 801ae62:	9a05      	ldrlt	r2, [sp, #20]
 801ae64:	9e05      	ldrge	r6, [sp, #20]
 801ae66:	eba2 060a 	sublt.w	r6, r2, sl
 801ae6a:	4652      	movge	r2, sl
 801ae6c:	bfb8      	it	lt
 801ae6e:	2200      	movlt	r2, #0
 801ae70:	e727      	b.n	801acc2 <_dtoa_r+0x63a>
 801ae72:	9e05      	ldr	r6, [sp, #20]
 801ae74:	9d08      	ldr	r5, [sp, #32]
 801ae76:	461c      	mov	r4, r3
 801ae78:	e730      	b.n	801acdc <_dtoa_r+0x654>
 801ae7a:	461a      	mov	r2, r3
 801ae7c:	e758      	b.n	801ad30 <_dtoa_r+0x6a8>
 801ae7e:	2300      	movs	r3, #0
 801ae80:	e786      	b.n	801ad90 <_dtoa_r+0x708>
 801ae82:	9b02      	ldr	r3, [sp, #8]
 801ae84:	e784      	b.n	801ad90 <_dtoa_r+0x708>
 801ae86:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ae88:	e783      	b.n	801ad92 <_dtoa_r+0x70a>
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae8e:	e784      	b.n	801ad9a <_dtoa_r+0x712>
 801ae90:	d09d      	beq.n	801adce <_dtoa_r+0x746>
 801ae92:	9b05      	ldr	r3, [sp, #20]
 801ae94:	321c      	adds	r2, #28
 801ae96:	4413      	add	r3, r2
 801ae98:	9305      	str	r3, [sp, #20]
 801ae9a:	9b06      	ldr	r3, [sp, #24]
 801ae9c:	4416      	add	r6, r2
 801ae9e:	4413      	add	r3, r2
 801aea0:	e794      	b.n	801adcc <_dtoa_r+0x744>
 801aea2:	4602      	mov	r2, r0
 801aea4:	e7f5      	b.n	801ae92 <_dtoa_r+0x80a>
 801aea6:	f1ba 0f00 	cmp.w	sl, #0
 801aeaa:	f8cd 8010 	str.w	r8, [sp, #16]
 801aeae:	46d3      	mov	fp, sl
 801aeb0:	dc21      	bgt.n	801aef6 <_dtoa_r+0x86e>
 801aeb2:	9b07      	ldr	r3, [sp, #28]
 801aeb4:	2b02      	cmp	r3, #2
 801aeb6:	dd1e      	ble.n	801aef6 <_dtoa_r+0x86e>
 801aeb8:	f1bb 0f00 	cmp.w	fp, #0
 801aebc:	f47f aeb7 	bne.w	801ac2e <_dtoa_r+0x5a6>
 801aec0:	4621      	mov	r1, r4
 801aec2:	465b      	mov	r3, fp
 801aec4:	2205      	movs	r2, #5
 801aec6:	4648      	mov	r0, r9
 801aec8:	f000 fde2 	bl	801ba90 <__multadd>
 801aecc:	4601      	mov	r1, r0
 801aece:	4604      	mov	r4, r0
 801aed0:	9801      	ldr	r0, [sp, #4]
 801aed2:	f001 f83f 	bl	801bf54 <__mcmp>
 801aed6:	2800      	cmp	r0, #0
 801aed8:	f77f aea9 	ble.w	801ac2e <_dtoa_r+0x5a6>
 801aedc:	463e      	mov	r6, r7
 801aede:	2331      	movs	r3, #49	@ 0x31
 801aee0:	f806 3b01 	strb.w	r3, [r6], #1
 801aee4:	9b04      	ldr	r3, [sp, #16]
 801aee6:	3301      	adds	r3, #1
 801aee8:	9304      	str	r3, [sp, #16]
 801aeea:	e6a4      	b.n	801ac36 <_dtoa_r+0x5ae>
 801aeec:	f8cd 8010 	str.w	r8, [sp, #16]
 801aef0:	4654      	mov	r4, sl
 801aef2:	4625      	mov	r5, r4
 801aef4:	e7f2      	b.n	801aedc <_dtoa_r+0x854>
 801aef6:	9b08      	ldr	r3, [sp, #32]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	f000 8103 	beq.w	801b104 <_dtoa_r+0xa7c>
 801aefe:	2e00      	cmp	r6, #0
 801af00:	dd05      	ble.n	801af0e <_dtoa_r+0x886>
 801af02:	4629      	mov	r1, r5
 801af04:	4632      	mov	r2, r6
 801af06:	4648      	mov	r0, r9
 801af08:	f000 ffb8 	bl	801be7c <__lshift>
 801af0c:	4605      	mov	r5, r0
 801af0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af10:	2b00      	cmp	r3, #0
 801af12:	d058      	beq.n	801afc6 <_dtoa_r+0x93e>
 801af14:	6869      	ldr	r1, [r5, #4]
 801af16:	4648      	mov	r0, r9
 801af18:	f000 fd58 	bl	801b9cc <_Balloc>
 801af1c:	4606      	mov	r6, r0
 801af1e:	b928      	cbnz	r0, 801af2c <_dtoa_r+0x8a4>
 801af20:	4b82      	ldr	r3, [pc, #520]	@ (801b12c <_dtoa_r+0xaa4>)
 801af22:	4602      	mov	r2, r0
 801af24:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801af28:	f7ff bbc7 	b.w	801a6ba <_dtoa_r+0x32>
 801af2c:	692a      	ldr	r2, [r5, #16]
 801af2e:	3202      	adds	r2, #2
 801af30:	0092      	lsls	r2, r2, #2
 801af32:	f105 010c 	add.w	r1, r5, #12
 801af36:	300c      	adds	r0, #12
 801af38:	f7ff fb05 	bl	801a546 <memcpy>
 801af3c:	2201      	movs	r2, #1
 801af3e:	4631      	mov	r1, r6
 801af40:	4648      	mov	r0, r9
 801af42:	f000 ff9b 	bl	801be7c <__lshift>
 801af46:	1c7b      	adds	r3, r7, #1
 801af48:	9305      	str	r3, [sp, #20]
 801af4a:	eb07 030b 	add.w	r3, r7, fp
 801af4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801af50:	9b02      	ldr	r3, [sp, #8]
 801af52:	f003 0301 	and.w	r3, r3, #1
 801af56:	46a8      	mov	r8, r5
 801af58:	9308      	str	r3, [sp, #32]
 801af5a:	4605      	mov	r5, r0
 801af5c:	9b05      	ldr	r3, [sp, #20]
 801af5e:	9801      	ldr	r0, [sp, #4]
 801af60:	4621      	mov	r1, r4
 801af62:	f103 3bff 	add.w	fp, r3, #4294967295
 801af66:	f7ff fb07 	bl	801a578 <quorem>
 801af6a:	4641      	mov	r1, r8
 801af6c:	9002      	str	r0, [sp, #8]
 801af6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801af72:	9801      	ldr	r0, [sp, #4]
 801af74:	f000 ffee 	bl	801bf54 <__mcmp>
 801af78:	462a      	mov	r2, r5
 801af7a:	9006      	str	r0, [sp, #24]
 801af7c:	4621      	mov	r1, r4
 801af7e:	4648      	mov	r0, r9
 801af80:	f001 f804 	bl	801bf8c <__mdiff>
 801af84:	68c2      	ldr	r2, [r0, #12]
 801af86:	4606      	mov	r6, r0
 801af88:	b9fa      	cbnz	r2, 801afca <_dtoa_r+0x942>
 801af8a:	4601      	mov	r1, r0
 801af8c:	9801      	ldr	r0, [sp, #4]
 801af8e:	f000 ffe1 	bl	801bf54 <__mcmp>
 801af92:	4602      	mov	r2, r0
 801af94:	4631      	mov	r1, r6
 801af96:	4648      	mov	r0, r9
 801af98:	920a      	str	r2, [sp, #40]	@ 0x28
 801af9a:	f000 fd57 	bl	801ba4c <_Bfree>
 801af9e:	9b07      	ldr	r3, [sp, #28]
 801afa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801afa2:	9e05      	ldr	r6, [sp, #20]
 801afa4:	ea43 0102 	orr.w	r1, r3, r2
 801afa8:	9b08      	ldr	r3, [sp, #32]
 801afaa:	4319      	orrs	r1, r3
 801afac:	d10f      	bne.n	801afce <_dtoa_r+0x946>
 801afae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801afb2:	d028      	beq.n	801b006 <_dtoa_r+0x97e>
 801afb4:	9b06      	ldr	r3, [sp, #24]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	dd02      	ble.n	801afc0 <_dtoa_r+0x938>
 801afba:	9b02      	ldr	r3, [sp, #8]
 801afbc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801afc0:	f88b a000 	strb.w	sl, [fp]
 801afc4:	e639      	b.n	801ac3a <_dtoa_r+0x5b2>
 801afc6:	4628      	mov	r0, r5
 801afc8:	e7bd      	b.n	801af46 <_dtoa_r+0x8be>
 801afca:	2201      	movs	r2, #1
 801afcc:	e7e2      	b.n	801af94 <_dtoa_r+0x90c>
 801afce:	9b06      	ldr	r3, [sp, #24]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	db04      	blt.n	801afde <_dtoa_r+0x956>
 801afd4:	9907      	ldr	r1, [sp, #28]
 801afd6:	430b      	orrs	r3, r1
 801afd8:	9908      	ldr	r1, [sp, #32]
 801afda:	430b      	orrs	r3, r1
 801afdc:	d120      	bne.n	801b020 <_dtoa_r+0x998>
 801afde:	2a00      	cmp	r2, #0
 801afe0:	ddee      	ble.n	801afc0 <_dtoa_r+0x938>
 801afe2:	9901      	ldr	r1, [sp, #4]
 801afe4:	2201      	movs	r2, #1
 801afe6:	4648      	mov	r0, r9
 801afe8:	f000 ff48 	bl	801be7c <__lshift>
 801afec:	4621      	mov	r1, r4
 801afee:	9001      	str	r0, [sp, #4]
 801aff0:	f000 ffb0 	bl	801bf54 <__mcmp>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	dc03      	bgt.n	801b000 <_dtoa_r+0x978>
 801aff8:	d1e2      	bne.n	801afc0 <_dtoa_r+0x938>
 801affa:	f01a 0f01 	tst.w	sl, #1
 801affe:	d0df      	beq.n	801afc0 <_dtoa_r+0x938>
 801b000:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b004:	d1d9      	bne.n	801afba <_dtoa_r+0x932>
 801b006:	2339      	movs	r3, #57	@ 0x39
 801b008:	f88b 3000 	strb.w	r3, [fp]
 801b00c:	4633      	mov	r3, r6
 801b00e:	461e      	mov	r6, r3
 801b010:	3b01      	subs	r3, #1
 801b012:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b016:	2a39      	cmp	r2, #57	@ 0x39
 801b018:	d053      	beq.n	801b0c2 <_dtoa_r+0xa3a>
 801b01a:	3201      	adds	r2, #1
 801b01c:	701a      	strb	r2, [r3, #0]
 801b01e:	e60c      	b.n	801ac3a <_dtoa_r+0x5b2>
 801b020:	2a00      	cmp	r2, #0
 801b022:	dd07      	ble.n	801b034 <_dtoa_r+0x9ac>
 801b024:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b028:	d0ed      	beq.n	801b006 <_dtoa_r+0x97e>
 801b02a:	f10a 0301 	add.w	r3, sl, #1
 801b02e:	f88b 3000 	strb.w	r3, [fp]
 801b032:	e602      	b.n	801ac3a <_dtoa_r+0x5b2>
 801b034:	9b05      	ldr	r3, [sp, #20]
 801b036:	9a05      	ldr	r2, [sp, #20]
 801b038:	f803 ac01 	strb.w	sl, [r3, #-1]
 801b03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b03e:	4293      	cmp	r3, r2
 801b040:	d029      	beq.n	801b096 <_dtoa_r+0xa0e>
 801b042:	9901      	ldr	r1, [sp, #4]
 801b044:	2300      	movs	r3, #0
 801b046:	220a      	movs	r2, #10
 801b048:	4648      	mov	r0, r9
 801b04a:	f000 fd21 	bl	801ba90 <__multadd>
 801b04e:	45a8      	cmp	r8, r5
 801b050:	9001      	str	r0, [sp, #4]
 801b052:	f04f 0300 	mov.w	r3, #0
 801b056:	f04f 020a 	mov.w	r2, #10
 801b05a:	4641      	mov	r1, r8
 801b05c:	4648      	mov	r0, r9
 801b05e:	d107      	bne.n	801b070 <_dtoa_r+0x9e8>
 801b060:	f000 fd16 	bl	801ba90 <__multadd>
 801b064:	4680      	mov	r8, r0
 801b066:	4605      	mov	r5, r0
 801b068:	9b05      	ldr	r3, [sp, #20]
 801b06a:	3301      	adds	r3, #1
 801b06c:	9305      	str	r3, [sp, #20]
 801b06e:	e775      	b.n	801af5c <_dtoa_r+0x8d4>
 801b070:	f000 fd0e 	bl	801ba90 <__multadd>
 801b074:	4629      	mov	r1, r5
 801b076:	4680      	mov	r8, r0
 801b078:	2300      	movs	r3, #0
 801b07a:	220a      	movs	r2, #10
 801b07c:	4648      	mov	r0, r9
 801b07e:	f000 fd07 	bl	801ba90 <__multadd>
 801b082:	4605      	mov	r5, r0
 801b084:	e7f0      	b.n	801b068 <_dtoa_r+0x9e0>
 801b086:	f1bb 0f00 	cmp.w	fp, #0
 801b08a:	bfcc      	ite	gt
 801b08c:	465e      	movgt	r6, fp
 801b08e:	2601      	movle	r6, #1
 801b090:	443e      	add	r6, r7
 801b092:	f04f 0800 	mov.w	r8, #0
 801b096:	9901      	ldr	r1, [sp, #4]
 801b098:	2201      	movs	r2, #1
 801b09a:	4648      	mov	r0, r9
 801b09c:	f000 feee 	bl	801be7c <__lshift>
 801b0a0:	4621      	mov	r1, r4
 801b0a2:	9001      	str	r0, [sp, #4]
 801b0a4:	f000 ff56 	bl	801bf54 <__mcmp>
 801b0a8:	2800      	cmp	r0, #0
 801b0aa:	dcaf      	bgt.n	801b00c <_dtoa_r+0x984>
 801b0ac:	d102      	bne.n	801b0b4 <_dtoa_r+0xa2c>
 801b0ae:	f01a 0f01 	tst.w	sl, #1
 801b0b2:	d1ab      	bne.n	801b00c <_dtoa_r+0x984>
 801b0b4:	4633      	mov	r3, r6
 801b0b6:	461e      	mov	r6, r3
 801b0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b0bc:	2a30      	cmp	r2, #48	@ 0x30
 801b0be:	d0fa      	beq.n	801b0b6 <_dtoa_r+0xa2e>
 801b0c0:	e5bb      	b.n	801ac3a <_dtoa_r+0x5b2>
 801b0c2:	429f      	cmp	r7, r3
 801b0c4:	d1a3      	bne.n	801b00e <_dtoa_r+0x986>
 801b0c6:	9b04      	ldr	r3, [sp, #16]
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	9304      	str	r3, [sp, #16]
 801b0cc:	2331      	movs	r3, #49	@ 0x31
 801b0ce:	703b      	strb	r3, [r7, #0]
 801b0d0:	e5b3      	b.n	801ac3a <_dtoa_r+0x5b2>
 801b0d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b0d4:	4f16      	ldr	r7, [pc, #88]	@ (801b130 <_dtoa_r+0xaa8>)
 801b0d6:	b11b      	cbz	r3, 801b0e0 <_dtoa_r+0xa58>
 801b0d8:	f107 0308 	add.w	r3, r7, #8
 801b0dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b0de:	6013      	str	r3, [r2, #0]
 801b0e0:	4638      	mov	r0, r7
 801b0e2:	b011      	add	sp, #68	@ 0x44
 801b0e4:	ecbd 8b02 	vpop	{d8}
 801b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ec:	9b07      	ldr	r3, [sp, #28]
 801b0ee:	2b01      	cmp	r3, #1
 801b0f0:	f77f ae36 	ble.w	801ad60 <_dtoa_r+0x6d8>
 801b0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b0f8:	2001      	movs	r0, #1
 801b0fa:	e656      	b.n	801adaa <_dtoa_r+0x722>
 801b0fc:	f1bb 0f00 	cmp.w	fp, #0
 801b100:	f77f aed7 	ble.w	801aeb2 <_dtoa_r+0x82a>
 801b104:	463e      	mov	r6, r7
 801b106:	9801      	ldr	r0, [sp, #4]
 801b108:	4621      	mov	r1, r4
 801b10a:	f7ff fa35 	bl	801a578 <quorem>
 801b10e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b112:	f806 ab01 	strb.w	sl, [r6], #1
 801b116:	1bf2      	subs	r2, r6, r7
 801b118:	4593      	cmp	fp, r2
 801b11a:	ddb4      	ble.n	801b086 <_dtoa_r+0x9fe>
 801b11c:	9901      	ldr	r1, [sp, #4]
 801b11e:	2300      	movs	r3, #0
 801b120:	220a      	movs	r2, #10
 801b122:	4648      	mov	r0, r9
 801b124:	f000 fcb4 	bl	801ba90 <__multadd>
 801b128:	9001      	str	r0, [sp, #4]
 801b12a:	e7ec      	b.n	801b106 <_dtoa_r+0xa7e>
 801b12c:	0801e921 	.word	0x0801e921
 801b130:	0801e8a5 	.word	0x0801e8a5

0801b134 <_free_r>:
 801b134:	b538      	push	{r3, r4, r5, lr}
 801b136:	4605      	mov	r5, r0
 801b138:	2900      	cmp	r1, #0
 801b13a:	d041      	beq.n	801b1c0 <_free_r+0x8c>
 801b13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b140:	1f0c      	subs	r4, r1, #4
 801b142:	2b00      	cmp	r3, #0
 801b144:	bfb8      	it	lt
 801b146:	18e4      	addlt	r4, r4, r3
 801b148:	f000 fc34 	bl	801b9b4 <__malloc_lock>
 801b14c:	4a1d      	ldr	r2, [pc, #116]	@ (801b1c4 <_free_r+0x90>)
 801b14e:	6813      	ldr	r3, [r2, #0]
 801b150:	b933      	cbnz	r3, 801b160 <_free_r+0x2c>
 801b152:	6063      	str	r3, [r4, #4]
 801b154:	6014      	str	r4, [r2, #0]
 801b156:	4628      	mov	r0, r5
 801b158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b15c:	f000 bc30 	b.w	801b9c0 <__malloc_unlock>
 801b160:	42a3      	cmp	r3, r4
 801b162:	d908      	bls.n	801b176 <_free_r+0x42>
 801b164:	6820      	ldr	r0, [r4, #0]
 801b166:	1821      	adds	r1, r4, r0
 801b168:	428b      	cmp	r3, r1
 801b16a:	bf01      	itttt	eq
 801b16c:	6819      	ldreq	r1, [r3, #0]
 801b16e:	685b      	ldreq	r3, [r3, #4]
 801b170:	1809      	addeq	r1, r1, r0
 801b172:	6021      	streq	r1, [r4, #0]
 801b174:	e7ed      	b.n	801b152 <_free_r+0x1e>
 801b176:	461a      	mov	r2, r3
 801b178:	685b      	ldr	r3, [r3, #4]
 801b17a:	b10b      	cbz	r3, 801b180 <_free_r+0x4c>
 801b17c:	42a3      	cmp	r3, r4
 801b17e:	d9fa      	bls.n	801b176 <_free_r+0x42>
 801b180:	6811      	ldr	r1, [r2, #0]
 801b182:	1850      	adds	r0, r2, r1
 801b184:	42a0      	cmp	r0, r4
 801b186:	d10b      	bne.n	801b1a0 <_free_r+0x6c>
 801b188:	6820      	ldr	r0, [r4, #0]
 801b18a:	4401      	add	r1, r0
 801b18c:	1850      	adds	r0, r2, r1
 801b18e:	4283      	cmp	r3, r0
 801b190:	6011      	str	r1, [r2, #0]
 801b192:	d1e0      	bne.n	801b156 <_free_r+0x22>
 801b194:	6818      	ldr	r0, [r3, #0]
 801b196:	685b      	ldr	r3, [r3, #4]
 801b198:	6053      	str	r3, [r2, #4]
 801b19a:	4408      	add	r0, r1
 801b19c:	6010      	str	r0, [r2, #0]
 801b19e:	e7da      	b.n	801b156 <_free_r+0x22>
 801b1a0:	d902      	bls.n	801b1a8 <_free_r+0x74>
 801b1a2:	230c      	movs	r3, #12
 801b1a4:	602b      	str	r3, [r5, #0]
 801b1a6:	e7d6      	b.n	801b156 <_free_r+0x22>
 801b1a8:	6820      	ldr	r0, [r4, #0]
 801b1aa:	1821      	adds	r1, r4, r0
 801b1ac:	428b      	cmp	r3, r1
 801b1ae:	bf04      	itt	eq
 801b1b0:	6819      	ldreq	r1, [r3, #0]
 801b1b2:	685b      	ldreq	r3, [r3, #4]
 801b1b4:	6063      	str	r3, [r4, #4]
 801b1b6:	bf04      	itt	eq
 801b1b8:	1809      	addeq	r1, r1, r0
 801b1ba:	6021      	streq	r1, [r4, #0]
 801b1bc:	6054      	str	r4, [r2, #4]
 801b1be:	e7ca      	b.n	801b156 <_free_r+0x22>
 801b1c0:	bd38      	pop	{r3, r4, r5, pc}
 801b1c2:	bf00      	nop
 801b1c4:	2401da0c 	.word	0x2401da0c

0801b1c8 <rshift>:
 801b1c8:	6903      	ldr	r3, [r0, #16]
 801b1ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b1ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b1d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b1d6:	f100 0414 	add.w	r4, r0, #20
 801b1da:	dd45      	ble.n	801b268 <rshift+0xa0>
 801b1dc:	f011 011f 	ands.w	r1, r1, #31
 801b1e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b1e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b1e8:	d10c      	bne.n	801b204 <rshift+0x3c>
 801b1ea:	f100 0710 	add.w	r7, r0, #16
 801b1ee:	4629      	mov	r1, r5
 801b1f0:	42b1      	cmp	r1, r6
 801b1f2:	d334      	bcc.n	801b25e <rshift+0x96>
 801b1f4:	1a9b      	subs	r3, r3, r2
 801b1f6:	009b      	lsls	r3, r3, #2
 801b1f8:	1eea      	subs	r2, r5, #3
 801b1fa:	4296      	cmp	r6, r2
 801b1fc:	bf38      	it	cc
 801b1fe:	2300      	movcc	r3, #0
 801b200:	4423      	add	r3, r4
 801b202:	e015      	b.n	801b230 <rshift+0x68>
 801b204:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b208:	f1c1 0820 	rsb	r8, r1, #32
 801b20c:	40cf      	lsrs	r7, r1
 801b20e:	f105 0e04 	add.w	lr, r5, #4
 801b212:	46a1      	mov	r9, r4
 801b214:	4576      	cmp	r6, lr
 801b216:	46f4      	mov	ip, lr
 801b218:	d815      	bhi.n	801b246 <rshift+0x7e>
 801b21a:	1a9a      	subs	r2, r3, r2
 801b21c:	0092      	lsls	r2, r2, #2
 801b21e:	3a04      	subs	r2, #4
 801b220:	3501      	adds	r5, #1
 801b222:	42ae      	cmp	r6, r5
 801b224:	bf38      	it	cc
 801b226:	2200      	movcc	r2, #0
 801b228:	18a3      	adds	r3, r4, r2
 801b22a:	50a7      	str	r7, [r4, r2]
 801b22c:	b107      	cbz	r7, 801b230 <rshift+0x68>
 801b22e:	3304      	adds	r3, #4
 801b230:	1b1a      	subs	r2, r3, r4
 801b232:	42a3      	cmp	r3, r4
 801b234:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b238:	bf08      	it	eq
 801b23a:	2300      	moveq	r3, #0
 801b23c:	6102      	str	r2, [r0, #16]
 801b23e:	bf08      	it	eq
 801b240:	6143      	streq	r3, [r0, #20]
 801b242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b246:	f8dc c000 	ldr.w	ip, [ip]
 801b24a:	fa0c fc08 	lsl.w	ip, ip, r8
 801b24e:	ea4c 0707 	orr.w	r7, ip, r7
 801b252:	f849 7b04 	str.w	r7, [r9], #4
 801b256:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b25a:	40cf      	lsrs	r7, r1
 801b25c:	e7da      	b.n	801b214 <rshift+0x4c>
 801b25e:	f851 cb04 	ldr.w	ip, [r1], #4
 801b262:	f847 cf04 	str.w	ip, [r7, #4]!
 801b266:	e7c3      	b.n	801b1f0 <rshift+0x28>
 801b268:	4623      	mov	r3, r4
 801b26a:	e7e1      	b.n	801b230 <rshift+0x68>

0801b26c <__hexdig_fun>:
 801b26c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b270:	2b09      	cmp	r3, #9
 801b272:	d802      	bhi.n	801b27a <__hexdig_fun+0xe>
 801b274:	3820      	subs	r0, #32
 801b276:	b2c0      	uxtb	r0, r0
 801b278:	4770      	bx	lr
 801b27a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b27e:	2b05      	cmp	r3, #5
 801b280:	d801      	bhi.n	801b286 <__hexdig_fun+0x1a>
 801b282:	3847      	subs	r0, #71	@ 0x47
 801b284:	e7f7      	b.n	801b276 <__hexdig_fun+0xa>
 801b286:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b28a:	2b05      	cmp	r3, #5
 801b28c:	d801      	bhi.n	801b292 <__hexdig_fun+0x26>
 801b28e:	3827      	subs	r0, #39	@ 0x27
 801b290:	e7f1      	b.n	801b276 <__hexdig_fun+0xa>
 801b292:	2000      	movs	r0, #0
 801b294:	4770      	bx	lr
	...

0801b298 <__gethex>:
 801b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b29c:	b085      	sub	sp, #20
 801b29e:	468a      	mov	sl, r1
 801b2a0:	9302      	str	r3, [sp, #8]
 801b2a2:	680b      	ldr	r3, [r1, #0]
 801b2a4:	9001      	str	r0, [sp, #4]
 801b2a6:	4690      	mov	r8, r2
 801b2a8:	1c9c      	adds	r4, r3, #2
 801b2aa:	46a1      	mov	r9, r4
 801b2ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b2b0:	2830      	cmp	r0, #48	@ 0x30
 801b2b2:	d0fa      	beq.n	801b2aa <__gethex+0x12>
 801b2b4:	eba9 0303 	sub.w	r3, r9, r3
 801b2b8:	f1a3 0b02 	sub.w	fp, r3, #2
 801b2bc:	f7ff ffd6 	bl	801b26c <__hexdig_fun>
 801b2c0:	4605      	mov	r5, r0
 801b2c2:	2800      	cmp	r0, #0
 801b2c4:	d168      	bne.n	801b398 <__gethex+0x100>
 801b2c6:	49a0      	ldr	r1, [pc, #640]	@ (801b548 <__gethex+0x2b0>)
 801b2c8:	2201      	movs	r2, #1
 801b2ca:	4648      	mov	r0, r9
 801b2cc:	f7ff f8b2 	bl	801a434 <strncmp>
 801b2d0:	4607      	mov	r7, r0
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	d167      	bne.n	801b3a6 <__gethex+0x10e>
 801b2d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b2da:	4626      	mov	r6, r4
 801b2dc:	f7ff ffc6 	bl	801b26c <__hexdig_fun>
 801b2e0:	2800      	cmp	r0, #0
 801b2e2:	d062      	beq.n	801b3aa <__gethex+0x112>
 801b2e4:	4623      	mov	r3, r4
 801b2e6:	7818      	ldrb	r0, [r3, #0]
 801b2e8:	2830      	cmp	r0, #48	@ 0x30
 801b2ea:	4699      	mov	r9, r3
 801b2ec:	f103 0301 	add.w	r3, r3, #1
 801b2f0:	d0f9      	beq.n	801b2e6 <__gethex+0x4e>
 801b2f2:	f7ff ffbb 	bl	801b26c <__hexdig_fun>
 801b2f6:	fab0 f580 	clz	r5, r0
 801b2fa:	096d      	lsrs	r5, r5, #5
 801b2fc:	f04f 0b01 	mov.w	fp, #1
 801b300:	464a      	mov	r2, r9
 801b302:	4616      	mov	r6, r2
 801b304:	3201      	adds	r2, #1
 801b306:	7830      	ldrb	r0, [r6, #0]
 801b308:	f7ff ffb0 	bl	801b26c <__hexdig_fun>
 801b30c:	2800      	cmp	r0, #0
 801b30e:	d1f8      	bne.n	801b302 <__gethex+0x6a>
 801b310:	498d      	ldr	r1, [pc, #564]	@ (801b548 <__gethex+0x2b0>)
 801b312:	2201      	movs	r2, #1
 801b314:	4630      	mov	r0, r6
 801b316:	f7ff f88d 	bl	801a434 <strncmp>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	d13f      	bne.n	801b39e <__gethex+0x106>
 801b31e:	b944      	cbnz	r4, 801b332 <__gethex+0x9a>
 801b320:	1c74      	adds	r4, r6, #1
 801b322:	4622      	mov	r2, r4
 801b324:	4616      	mov	r6, r2
 801b326:	3201      	adds	r2, #1
 801b328:	7830      	ldrb	r0, [r6, #0]
 801b32a:	f7ff ff9f 	bl	801b26c <__hexdig_fun>
 801b32e:	2800      	cmp	r0, #0
 801b330:	d1f8      	bne.n	801b324 <__gethex+0x8c>
 801b332:	1ba4      	subs	r4, r4, r6
 801b334:	00a7      	lsls	r7, r4, #2
 801b336:	7833      	ldrb	r3, [r6, #0]
 801b338:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b33c:	2b50      	cmp	r3, #80	@ 0x50
 801b33e:	d13e      	bne.n	801b3be <__gethex+0x126>
 801b340:	7873      	ldrb	r3, [r6, #1]
 801b342:	2b2b      	cmp	r3, #43	@ 0x2b
 801b344:	d033      	beq.n	801b3ae <__gethex+0x116>
 801b346:	2b2d      	cmp	r3, #45	@ 0x2d
 801b348:	d034      	beq.n	801b3b4 <__gethex+0x11c>
 801b34a:	1c71      	adds	r1, r6, #1
 801b34c:	2400      	movs	r4, #0
 801b34e:	7808      	ldrb	r0, [r1, #0]
 801b350:	f7ff ff8c 	bl	801b26c <__hexdig_fun>
 801b354:	1e43      	subs	r3, r0, #1
 801b356:	b2db      	uxtb	r3, r3
 801b358:	2b18      	cmp	r3, #24
 801b35a:	d830      	bhi.n	801b3be <__gethex+0x126>
 801b35c:	f1a0 0210 	sub.w	r2, r0, #16
 801b360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b364:	f7ff ff82 	bl	801b26c <__hexdig_fun>
 801b368:	f100 3cff 	add.w	ip, r0, #4294967295
 801b36c:	fa5f fc8c 	uxtb.w	ip, ip
 801b370:	f1bc 0f18 	cmp.w	ip, #24
 801b374:	f04f 030a 	mov.w	r3, #10
 801b378:	d91e      	bls.n	801b3b8 <__gethex+0x120>
 801b37a:	b104      	cbz	r4, 801b37e <__gethex+0xe6>
 801b37c:	4252      	negs	r2, r2
 801b37e:	4417      	add	r7, r2
 801b380:	f8ca 1000 	str.w	r1, [sl]
 801b384:	b1ed      	cbz	r5, 801b3c2 <__gethex+0x12a>
 801b386:	f1bb 0f00 	cmp.w	fp, #0
 801b38a:	bf0c      	ite	eq
 801b38c:	2506      	moveq	r5, #6
 801b38e:	2500      	movne	r5, #0
 801b390:	4628      	mov	r0, r5
 801b392:	b005      	add	sp, #20
 801b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b398:	2500      	movs	r5, #0
 801b39a:	462c      	mov	r4, r5
 801b39c:	e7b0      	b.n	801b300 <__gethex+0x68>
 801b39e:	2c00      	cmp	r4, #0
 801b3a0:	d1c7      	bne.n	801b332 <__gethex+0x9a>
 801b3a2:	4627      	mov	r7, r4
 801b3a4:	e7c7      	b.n	801b336 <__gethex+0x9e>
 801b3a6:	464e      	mov	r6, r9
 801b3a8:	462f      	mov	r7, r5
 801b3aa:	2501      	movs	r5, #1
 801b3ac:	e7c3      	b.n	801b336 <__gethex+0x9e>
 801b3ae:	2400      	movs	r4, #0
 801b3b0:	1cb1      	adds	r1, r6, #2
 801b3b2:	e7cc      	b.n	801b34e <__gethex+0xb6>
 801b3b4:	2401      	movs	r4, #1
 801b3b6:	e7fb      	b.n	801b3b0 <__gethex+0x118>
 801b3b8:	fb03 0002 	mla	r0, r3, r2, r0
 801b3bc:	e7ce      	b.n	801b35c <__gethex+0xc4>
 801b3be:	4631      	mov	r1, r6
 801b3c0:	e7de      	b.n	801b380 <__gethex+0xe8>
 801b3c2:	eba6 0309 	sub.w	r3, r6, r9
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	4629      	mov	r1, r5
 801b3ca:	2b07      	cmp	r3, #7
 801b3cc:	dc0a      	bgt.n	801b3e4 <__gethex+0x14c>
 801b3ce:	9801      	ldr	r0, [sp, #4]
 801b3d0:	f000 fafc 	bl	801b9cc <_Balloc>
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	b940      	cbnz	r0, 801b3ea <__gethex+0x152>
 801b3d8:	4b5c      	ldr	r3, [pc, #368]	@ (801b54c <__gethex+0x2b4>)
 801b3da:	4602      	mov	r2, r0
 801b3dc:	21e4      	movs	r1, #228	@ 0xe4
 801b3de:	485c      	ldr	r0, [pc, #368]	@ (801b550 <__gethex+0x2b8>)
 801b3e0:	f001 f9de 	bl	801c7a0 <__assert_func>
 801b3e4:	3101      	adds	r1, #1
 801b3e6:	105b      	asrs	r3, r3, #1
 801b3e8:	e7ef      	b.n	801b3ca <__gethex+0x132>
 801b3ea:	f100 0a14 	add.w	sl, r0, #20
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	4655      	mov	r5, sl
 801b3f2:	469b      	mov	fp, r3
 801b3f4:	45b1      	cmp	r9, r6
 801b3f6:	d337      	bcc.n	801b468 <__gethex+0x1d0>
 801b3f8:	f845 bb04 	str.w	fp, [r5], #4
 801b3fc:	eba5 050a 	sub.w	r5, r5, sl
 801b400:	10ad      	asrs	r5, r5, #2
 801b402:	6125      	str	r5, [r4, #16]
 801b404:	4658      	mov	r0, fp
 801b406:	f000 fbd3 	bl	801bbb0 <__hi0bits>
 801b40a:	016d      	lsls	r5, r5, #5
 801b40c:	f8d8 6000 	ldr.w	r6, [r8]
 801b410:	1a2d      	subs	r5, r5, r0
 801b412:	42b5      	cmp	r5, r6
 801b414:	dd54      	ble.n	801b4c0 <__gethex+0x228>
 801b416:	1bad      	subs	r5, r5, r6
 801b418:	4629      	mov	r1, r5
 801b41a:	4620      	mov	r0, r4
 801b41c:	f000 ff64 	bl	801c2e8 <__any_on>
 801b420:	4681      	mov	r9, r0
 801b422:	b178      	cbz	r0, 801b444 <__gethex+0x1ac>
 801b424:	1e6b      	subs	r3, r5, #1
 801b426:	1159      	asrs	r1, r3, #5
 801b428:	f003 021f 	and.w	r2, r3, #31
 801b42c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b430:	f04f 0901 	mov.w	r9, #1
 801b434:	fa09 f202 	lsl.w	r2, r9, r2
 801b438:	420a      	tst	r2, r1
 801b43a:	d003      	beq.n	801b444 <__gethex+0x1ac>
 801b43c:	454b      	cmp	r3, r9
 801b43e:	dc36      	bgt.n	801b4ae <__gethex+0x216>
 801b440:	f04f 0902 	mov.w	r9, #2
 801b444:	4629      	mov	r1, r5
 801b446:	4620      	mov	r0, r4
 801b448:	f7ff febe 	bl	801b1c8 <rshift>
 801b44c:	442f      	add	r7, r5
 801b44e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b452:	42bb      	cmp	r3, r7
 801b454:	da42      	bge.n	801b4dc <__gethex+0x244>
 801b456:	9801      	ldr	r0, [sp, #4]
 801b458:	4621      	mov	r1, r4
 801b45a:	f000 faf7 	bl	801ba4c <_Bfree>
 801b45e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b460:	2300      	movs	r3, #0
 801b462:	6013      	str	r3, [r2, #0]
 801b464:	25a3      	movs	r5, #163	@ 0xa3
 801b466:	e793      	b.n	801b390 <__gethex+0xf8>
 801b468:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b46c:	2a2e      	cmp	r2, #46	@ 0x2e
 801b46e:	d012      	beq.n	801b496 <__gethex+0x1fe>
 801b470:	2b20      	cmp	r3, #32
 801b472:	d104      	bne.n	801b47e <__gethex+0x1e6>
 801b474:	f845 bb04 	str.w	fp, [r5], #4
 801b478:	f04f 0b00 	mov.w	fp, #0
 801b47c:	465b      	mov	r3, fp
 801b47e:	7830      	ldrb	r0, [r6, #0]
 801b480:	9303      	str	r3, [sp, #12]
 801b482:	f7ff fef3 	bl	801b26c <__hexdig_fun>
 801b486:	9b03      	ldr	r3, [sp, #12]
 801b488:	f000 000f 	and.w	r0, r0, #15
 801b48c:	4098      	lsls	r0, r3
 801b48e:	ea4b 0b00 	orr.w	fp, fp, r0
 801b492:	3304      	adds	r3, #4
 801b494:	e7ae      	b.n	801b3f4 <__gethex+0x15c>
 801b496:	45b1      	cmp	r9, r6
 801b498:	d8ea      	bhi.n	801b470 <__gethex+0x1d8>
 801b49a:	492b      	ldr	r1, [pc, #172]	@ (801b548 <__gethex+0x2b0>)
 801b49c:	9303      	str	r3, [sp, #12]
 801b49e:	2201      	movs	r2, #1
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	f7fe ffc7 	bl	801a434 <strncmp>
 801b4a6:	9b03      	ldr	r3, [sp, #12]
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	d1e1      	bne.n	801b470 <__gethex+0x1d8>
 801b4ac:	e7a2      	b.n	801b3f4 <__gethex+0x15c>
 801b4ae:	1ea9      	subs	r1, r5, #2
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f000 ff19 	bl	801c2e8 <__any_on>
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	d0c2      	beq.n	801b440 <__gethex+0x1a8>
 801b4ba:	f04f 0903 	mov.w	r9, #3
 801b4be:	e7c1      	b.n	801b444 <__gethex+0x1ac>
 801b4c0:	da09      	bge.n	801b4d6 <__gethex+0x23e>
 801b4c2:	1b75      	subs	r5, r6, r5
 801b4c4:	4621      	mov	r1, r4
 801b4c6:	9801      	ldr	r0, [sp, #4]
 801b4c8:	462a      	mov	r2, r5
 801b4ca:	f000 fcd7 	bl	801be7c <__lshift>
 801b4ce:	1b7f      	subs	r7, r7, r5
 801b4d0:	4604      	mov	r4, r0
 801b4d2:	f100 0a14 	add.w	sl, r0, #20
 801b4d6:	f04f 0900 	mov.w	r9, #0
 801b4da:	e7b8      	b.n	801b44e <__gethex+0x1b6>
 801b4dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b4e0:	42bd      	cmp	r5, r7
 801b4e2:	dd6f      	ble.n	801b5c4 <__gethex+0x32c>
 801b4e4:	1bed      	subs	r5, r5, r7
 801b4e6:	42ae      	cmp	r6, r5
 801b4e8:	dc34      	bgt.n	801b554 <__gethex+0x2bc>
 801b4ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b4ee:	2b02      	cmp	r3, #2
 801b4f0:	d022      	beq.n	801b538 <__gethex+0x2a0>
 801b4f2:	2b03      	cmp	r3, #3
 801b4f4:	d024      	beq.n	801b540 <__gethex+0x2a8>
 801b4f6:	2b01      	cmp	r3, #1
 801b4f8:	d115      	bne.n	801b526 <__gethex+0x28e>
 801b4fa:	42ae      	cmp	r6, r5
 801b4fc:	d113      	bne.n	801b526 <__gethex+0x28e>
 801b4fe:	2e01      	cmp	r6, #1
 801b500:	d10b      	bne.n	801b51a <__gethex+0x282>
 801b502:	9a02      	ldr	r2, [sp, #8]
 801b504:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b508:	6013      	str	r3, [r2, #0]
 801b50a:	2301      	movs	r3, #1
 801b50c:	6123      	str	r3, [r4, #16]
 801b50e:	f8ca 3000 	str.w	r3, [sl]
 801b512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b514:	2562      	movs	r5, #98	@ 0x62
 801b516:	601c      	str	r4, [r3, #0]
 801b518:	e73a      	b.n	801b390 <__gethex+0xf8>
 801b51a:	1e71      	subs	r1, r6, #1
 801b51c:	4620      	mov	r0, r4
 801b51e:	f000 fee3 	bl	801c2e8 <__any_on>
 801b522:	2800      	cmp	r0, #0
 801b524:	d1ed      	bne.n	801b502 <__gethex+0x26a>
 801b526:	9801      	ldr	r0, [sp, #4]
 801b528:	4621      	mov	r1, r4
 801b52a:	f000 fa8f 	bl	801ba4c <_Bfree>
 801b52e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b530:	2300      	movs	r3, #0
 801b532:	6013      	str	r3, [r2, #0]
 801b534:	2550      	movs	r5, #80	@ 0x50
 801b536:	e72b      	b.n	801b390 <__gethex+0xf8>
 801b538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d1f3      	bne.n	801b526 <__gethex+0x28e>
 801b53e:	e7e0      	b.n	801b502 <__gethex+0x26a>
 801b540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b542:	2b00      	cmp	r3, #0
 801b544:	d1dd      	bne.n	801b502 <__gethex+0x26a>
 801b546:	e7ee      	b.n	801b526 <__gethex+0x28e>
 801b548:	0801e714 	.word	0x0801e714
 801b54c:	0801e921 	.word	0x0801e921
 801b550:	0801e932 	.word	0x0801e932
 801b554:	1e6f      	subs	r7, r5, #1
 801b556:	f1b9 0f00 	cmp.w	r9, #0
 801b55a:	d130      	bne.n	801b5be <__gethex+0x326>
 801b55c:	b127      	cbz	r7, 801b568 <__gethex+0x2d0>
 801b55e:	4639      	mov	r1, r7
 801b560:	4620      	mov	r0, r4
 801b562:	f000 fec1 	bl	801c2e8 <__any_on>
 801b566:	4681      	mov	r9, r0
 801b568:	117a      	asrs	r2, r7, #5
 801b56a:	2301      	movs	r3, #1
 801b56c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b570:	f007 071f 	and.w	r7, r7, #31
 801b574:	40bb      	lsls	r3, r7
 801b576:	4213      	tst	r3, r2
 801b578:	4629      	mov	r1, r5
 801b57a:	4620      	mov	r0, r4
 801b57c:	bf18      	it	ne
 801b57e:	f049 0902 	orrne.w	r9, r9, #2
 801b582:	f7ff fe21 	bl	801b1c8 <rshift>
 801b586:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b58a:	1b76      	subs	r6, r6, r5
 801b58c:	2502      	movs	r5, #2
 801b58e:	f1b9 0f00 	cmp.w	r9, #0
 801b592:	d047      	beq.n	801b624 <__gethex+0x38c>
 801b594:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b598:	2b02      	cmp	r3, #2
 801b59a:	d015      	beq.n	801b5c8 <__gethex+0x330>
 801b59c:	2b03      	cmp	r3, #3
 801b59e:	d017      	beq.n	801b5d0 <__gethex+0x338>
 801b5a0:	2b01      	cmp	r3, #1
 801b5a2:	d109      	bne.n	801b5b8 <__gethex+0x320>
 801b5a4:	f019 0f02 	tst.w	r9, #2
 801b5a8:	d006      	beq.n	801b5b8 <__gethex+0x320>
 801b5aa:	f8da 3000 	ldr.w	r3, [sl]
 801b5ae:	ea49 0903 	orr.w	r9, r9, r3
 801b5b2:	f019 0f01 	tst.w	r9, #1
 801b5b6:	d10e      	bne.n	801b5d6 <__gethex+0x33e>
 801b5b8:	f045 0510 	orr.w	r5, r5, #16
 801b5bc:	e032      	b.n	801b624 <__gethex+0x38c>
 801b5be:	f04f 0901 	mov.w	r9, #1
 801b5c2:	e7d1      	b.n	801b568 <__gethex+0x2d0>
 801b5c4:	2501      	movs	r5, #1
 801b5c6:	e7e2      	b.n	801b58e <__gethex+0x2f6>
 801b5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b5ca:	f1c3 0301 	rsb	r3, r3, #1
 801b5ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d0f0      	beq.n	801b5b8 <__gethex+0x320>
 801b5d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b5da:	f104 0314 	add.w	r3, r4, #20
 801b5de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b5e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b5e6:	f04f 0c00 	mov.w	ip, #0
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b5f4:	d01b      	beq.n	801b62e <__gethex+0x396>
 801b5f6:	3201      	adds	r2, #1
 801b5f8:	6002      	str	r2, [r0, #0]
 801b5fa:	2d02      	cmp	r5, #2
 801b5fc:	f104 0314 	add.w	r3, r4, #20
 801b600:	d13c      	bne.n	801b67c <__gethex+0x3e4>
 801b602:	f8d8 2000 	ldr.w	r2, [r8]
 801b606:	3a01      	subs	r2, #1
 801b608:	42b2      	cmp	r2, r6
 801b60a:	d109      	bne.n	801b620 <__gethex+0x388>
 801b60c:	1171      	asrs	r1, r6, #5
 801b60e:	2201      	movs	r2, #1
 801b610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b614:	f006 061f 	and.w	r6, r6, #31
 801b618:	fa02 f606 	lsl.w	r6, r2, r6
 801b61c:	421e      	tst	r6, r3
 801b61e:	d13a      	bne.n	801b696 <__gethex+0x3fe>
 801b620:	f045 0520 	orr.w	r5, r5, #32
 801b624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b626:	601c      	str	r4, [r3, #0]
 801b628:	9b02      	ldr	r3, [sp, #8]
 801b62a:	601f      	str	r7, [r3, #0]
 801b62c:	e6b0      	b.n	801b390 <__gethex+0xf8>
 801b62e:	4299      	cmp	r1, r3
 801b630:	f843 cc04 	str.w	ip, [r3, #-4]
 801b634:	d8d9      	bhi.n	801b5ea <__gethex+0x352>
 801b636:	68a3      	ldr	r3, [r4, #8]
 801b638:	459b      	cmp	fp, r3
 801b63a:	db17      	blt.n	801b66c <__gethex+0x3d4>
 801b63c:	6861      	ldr	r1, [r4, #4]
 801b63e:	9801      	ldr	r0, [sp, #4]
 801b640:	3101      	adds	r1, #1
 801b642:	f000 f9c3 	bl	801b9cc <_Balloc>
 801b646:	4681      	mov	r9, r0
 801b648:	b918      	cbnz	r0, 801b652 <__gethex+0x3ba>
 801b64a:	4b1a      	ldr	r3, [pc, #104]	@ (801b6b4 <__gethex+0x41c>)
 801b64c:	4602      	mov	r2, r0
 801b64e:	2184      	movs	r1, #132	@ 0x84
 801b650:	e6c5      	b.n	801b3de <__gethex+0x146>
 801b652:	6922      	ldr	r2, [r4, #16]
 801b654:	3202      	adds	r2, #2
 801b656:	f104 010c 	add.w	r1, r4, #12
 801b65a:	0092      	lsls	r2, r2, #2
 801b65c:	300c      	adds	r0, #12
 801b65e:	f7fe ff72 	bl	801a546 <memcpy>
 801b662:	4621      	mov	r1, r4
 801b664:	9801      	ldr	r0, [sp, #4]
 801b666:	f000 f9f1 	bl	801ba4c <_Bfree>
 801b66a:	464c      	mov	r4, r9
 801b66c:	6923      	ldr	r3, [r4, #16]
 801b66e:	1c5a      	adds	r2, r3, #1
 801b670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b674:	6122      	str	r2, [r4, #16]
 801b676:	2201      	movs	r2, #1
 801b678:	615a      	str	r2, [r3, #20]
 801b67a:	e7be      	b.n	801b5fa <__gethex+0x362>
 801b67c:	6922      	ldr	r2, [r4, #16]
 801b67e:	455a      	cmp	r2, fp
 801b680:	dd0b      	ble.n	801b69a <__gethex+0x402>
 801b682:	2101      	movs	r1, #1
 801b684:	4620      	mov	r0, r4
 801b686:	f7ff fd9f 	bl	801b1c8 <rshift>
 801b68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b68e:	3701      	adds	r7, #1
 801b690:	42bb      	cmp	r3, r7
 801b692:	f6ff aee0 	blt.w	801b456 <__gethex+0x1be>
 801b696:	2501      	movs	r5, #1
 801b698:	e7c2      	b.n	801b620 <__gethex+0x388>
 801b69a:	f016 061f 	ands.w	r6, r6, #31
 801b69e:	d0fa      	beq.n	801b696 <__gethex+0x3fe>
 801b6a0:	4453      	add	r3, sl
 801b6a2:	f1c6 0620 	rsb	r6, r6, #32
 801b6a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b6aa:	f000 fa81 	bl	801bbb0 <__hi0bits>
 801b6ae:	42b0      	cmp	r0, r6
 801b6b0:	dbe7      	blt.n	801b682 <__gethex+0x3ea>
 801b6b2:	e7f0      	b.n	801b696 <__gethex+0x3fe>
 801b6b4:	0801e921 	.word	0x0801e921

0801b6b8 <L_shift>:
 801b6b8:	f1c2 0208 	rsb	r2, r2, #8
 801b6bc:	0092      	lsls	r2, r2, #2
 801b6be:	b570      	push	{r4, r5, r6, lr}
 801b6c0:	f1c2 0620 	rsb	r6, r2, #32
 801b6c4:	6843      	ldr	r3, [r0, #4]
 801b6c6:	6804      	ldr	r4, [r0, #0]
 801b6c8:	fa03 f506 	lsl.w	r5, r3, r6
 801b6cc:	432c      	orrs	r4, r5
 801b6ce:	40d3      	lsrs	r3, r2
 801b6d0:	6004      	str	r4, [r0, #0]
 801b6d2:	f840 3f04 	str.w	r3, [r0, #4]!
 801b6d6:	4288      	cmp	r0, r1
 801b6d8:	d3f4      	bcc.n	801b6c4 <L_shift+0xc>
 801b6da:	bd70      	pop	{r4, r5, r6, pc}

0801b6dc <__match>:
 801b6dc:	b530      	push	{r4, r5, lr}
 801b6de:	6803      	ldr	r3, [r0, #0]
 801b6e0:	3301      	adds	r3, #1
 801b6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6e6:	b914      	cbnz	r4, 801b6ee <__match+0x12>
 801b6e8:	6003      	str	r3, [r0, #0]
 801b6ea:	2001      	movs	r0, #1
 801b6ec:	bd30      	pop	{r4, r5, pc}
 801b6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b6f6:	2d19      	cmp	r5, #25
 801b6f8:	bf98      	it	ls
 801b6fa:	3220      	addls	r2, #32
 801b6fc:	42a2      	cmp	r2, r4
 801b6fe:	d0f0      	beq.n	801b6e2 <__match+0x6>
 801b700:	2000      	movs	r0, #0
 801b702:	e7f3      	b.n	801b6ec <__match+0x10>

0801b704 <__hexnan>:
 801b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b708:	680b      	ldr	r3, [r1, #0]
 801b70a:	6801      	ldr	r1, [r0, #0]
 801b70c:	115e      	asrs	r6, r3, #5
 801b70e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b712:	f013 031f 	ands.w	r3, r3, #31
 801b716:	b087      	sub	sp, #28
 801b718:	bf18      	it	ne
 801b71a:	3604      	addne	r6, #4
 801b71c:	2500      	movs	r5, #0
 801b71e:	1f37      	subs	r7, r6, #4
 801b720:	4682      	mov	sl, r0
 801b722:	4690      	mov	r8, r2
 801b724:	9301      	str	r3, [sp, #4]
 801b726:	f846 5c04 	str.w	r5, [r6, #-4]
 801b72a:	46b9      	mov	r9, r7
 801b72c:	463c      	mov	r4, r7
 801b72e:	9502      	str	r5, [sp, #8]
 801b730:	46ab      	mov	fp, r5
 801b732:	784a      	ldrb	r2, [r1, #1]
 801b734:	1c4b      	adds	r3, r1, #1
 801b736:	9303      	str	r3, [sp, #12]
 801b738:	b342      	cbz	r2, 801b78c <__hexnan+0x88>
 801b73a:	4610      	mov	r0, r2
 801b73c:	9105      	str	r1, [sp, #20]
 801b73e:	9204      	str	r2, [sp, #16]
 801b740:	f7ff fd94 	bl	801b26c <__hexdig_fun>
 801b744:	2800      	cmp	r0, #0
 801b746:	d151      	bne.n	801b7ec <__hexnan+0xe8>
 801b748:	9a04      	ldr	r2, [sp, #16]
 801b74a:	9905      	ldr	r1, [sp, #20]
 801b74c:	2a20      	cmp	r2, #32
 801b74e:	d818      	bhi.n	801b782 <__hexnan+0x7e>
 801b750:	9b02      	ldr	r3, [sp, #8]
 801b752:	459b      	cmp	fp, r3
 801b754:	dd13      	ble.n	801b77e <__hexnan+0x7a>
 801b756:	454c      	cmp	r4, r9
 801b758:	d206      	bcs.n	801b768 <__hexnan+0x64>
 801b75a:	2d07      	cmp	r5, #7
 801b75c:	dc04      	bgt.n	801b768 <__hexnan+0x64>
 801b75e:	462a      	mov	r2, r5
 801b760:	4649      	mov	r1, r9
 801b762:	4620      	mov	r0, r4
 801b764:	f7ff ffa8 	bl	801b6b8 <L_shift>
 801b768:	4544      	cmp	r4, r8
 801b76a:	d952      	bls.n	801b812 <__hexnan+0x10e>
 801b76c:	2300      	movs	r3, #0
 801b76e:	f1a4 0904 	sub.w	r9, r4, #4
 801b772:	f844 3c04 	str.w	r3, [r4, #-4]
 801b776:	f8cd b008 	str.w	fp, [sp, #8]
 801b77a:	464c      	mov	r4, r9
 801b77c:	461d      	mov	r5, r3
 801b77e:	9903      	ldr	r1, [sp, #12]
 801b780:	e7d7      	b.n	801b732 <__hexnan+0x2e>
 801b782:	2a29      	cmp	r2, #41	@ 0x29
 801b784:	d157      	bne.n	801b836 <__hexnan+0x132>
 801b786:	3102      	adds	r1, #2
 801b788:	f8ca 1000 	str.w	r1, [sl]
 801b78c:	f1bb 0f00 	cmp.w	fp, #0
 801b790:	d051      	beq.n	801b836 <__hexnan+0x132>
 801b792:	454c      	cmp	r4, r9
 801b794:	d206      	bcs.n	801b7a4 <__hexnan+0xa0>
 801b796:	2d07      	cmp	r5, #7
 801b798:	dc04      	bgt.n	801b7a4 <__hexnan+0xa0>
 801b79a:	462a      	mov	r2, r5
 801b79c:	4649      	mov	r1, r9
 801b79e:	4620      	mov	r0, r4
 801b7a0:	f7ff ff8a 	bl	801b6b8 <L_shift>
 801b7a4:	4544      	cmp	r4, r8
 801b7a6:	d936      	bls.n	801b816 <__hexnan+0x112>
 801b7a8:	f1a8 0204 	sub.w	r2, r8, #4
 801b7ac:	4623      	mov	r3, r4
 801b7ae:	f853 1b04 	ldr.w	r1, [r3], #4
 801b7b2:	f842 1f04 	str.w	r1, [r2, #4]!
 801b7b6:	429f      	cmp	r7, r3
 801b7b8:	d2f9      	bcs.n	801b7ae <__hexnan+0xaa>
 801b7ba:	1b3b      	subs	r3, r7, r4
 801b7bc:	f023 0303 	bic.w	r3, r3, #3
 801b7c0:	3304      	adds	r3, #4
 801b7c2:	3401      	adds	r4, #1
 801b7c4:	3e03      	subs	r6, #3
 801b7c6:	42b4      	cmp	r4, r6
 801b7c8:	bf88      	it	hi
 801b7ca:	2304      	movhi	r3, #4
 801b7cc:	4443      	add	r3, r8
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	f843 2b04 	str.w	r2, [r3], #4
 801b7d4:	429f      	cmp	r7, r3
 801b7d6:	d2fb      	bcs.n	801b7d0 <__hexnan+0xcc>
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	b91b      	cbnz	r3, 801b7e4 <__hexnan+0xe0>
 801b7dc:	4547      	cmp	r7, r8
 801b7de:	d128      	bne.n	801b832 <__hexnan+0x12e>
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	603b      	str	r3, [r7, #0]
 801b7e4:	2005      	movs	r0, #5
 801b7e6:	b007      	add	sp, #28
 801b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7ec:	3501      	adds	r5, #1
 801b7ee:	2d08      	cmp	r5, #8
 801b7f0:	f10b 0b01 	add.w	fp, fp, #1
 801b7f4:	dd06      	ble.n	801b804 <__hexnan+0x100>
 801b7f6:	4544      	cmp	r4, r8
 801b7f8:	d9c1      	bls.n	801b77e <__hexnan+0x7a>
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	f844 3c04 	str.w	r3, [r4, #-4]
 801b800:	2501      	movs	r5, #1
 801b802:	3c04      	subs	r4, #4
 801b804:	6822      	ldr	r2, [r4, #0]
 801b806:	f000 000f 	and.w	r0, r0, #15
 801b80a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b80e:	6020      	str	r0, [r4, #0]
 801b810:	e7b5      	b.n	801b77e <__hexnan+0x7a>
 801b812:	2508      	movs	r5, #8
 801b814:	e7b3      	b.n	801b77e <__hexnan+0x7a>
 801b816:	9b01      	ldr	r3, [sp, #4]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d0dd      	beq.n	801b7d8 <__hexnan+0xd4>
 801b81c:	f1c3 0320 	rsb	r3, r3, #32
 801b820:	f04f 32ff 	mov.w	r2, #4294967295
 801b824:	40da      	lsrs	r2, r3
 801b826:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b82a:	4013      	ands	r3, r2
 801b82c:	f846 3c04 	str.w	r3, [r6, #-4]
 801b830:	e7d2      	b.n	801b7d8 <__hexnan+0xd4>
 801b832:	3f04      	subs	r7, #4
 801b834:	e7d0      	b.n	801b7d8 <__hexnan+0xd4>
 801b836:	2004      	movs	r0, #4
 801b838:	e7d5      	b.n	801b7e6 <__hexnan+0xe2>
	...

0801b83c <malloc>:
 801b83c:	4b02      	ldr	r3, [pc, #8]	@ (801b848 <malloc+0xc>)
 801b83e:	4601      	mov	r1, r0
 801b840:	6818      	ldr	r0, [r3, #0]
 801b842:	f000 b825 	b.w	801b890 <_malloc_r>
 801b846:	bf00      	nop
 801b848:	240002ac 	.word	0x240002ac

0801b84c <sbrk_aligned>:
 801b84c:	b570      	push	{r4, r5, r6, lr}
 801b84e:	4e0f      	ldr	r6, [pc, #60]	@ (801b88c <sbrk_aligned+0x40>)
 801b850:	460c      	mov	r4, r1
 801b852:	6831      	ldr	r1, [r6, #0]
 801b854:	4605      	mov	r5, r0
 801b856:	b911      	cbnz	r1, 801b85e <sbrk_aligned+0x12>
 801b858:	f000 ff92 	bl	801c780 <_sbrk_r>
 801b85c:	6030      	str	r0, [r6, #0]
 801b85e:	4621      	mov	r1, r4
 801b860:	4628      	mov	r0, r5
 801b862:	f000 ff8d 	bl	801c780 <_sbrk_r>
 801b866:	1c43      	adds	r3, r0, #1
 801b868:	d103      	bne.n	801b872 <sbrk_aligned+0x26>
 801b86a:	f04f 34ff 	mov.w	r4, #4294967295
 801b86e:	4620      	mov	r0, r4
 801b870:	bd70      	pop	{r4, r5, r6, pc}
 801b872:	1cc4      	adds	r4, r0, #3
 801b874:	f024 0403 	bic.w	r4, r4, #3
 801b878:	42a0      	cmp	r0, r4
 801b87a:	d0f8      	beq.n	801b86e <sbrk_aligned+0x22>
 801b87c:	1a21      	subs	r1, r4, r0
 801b87e:	4628      	mov	r0, r5
 801b880:	f000 ff7e 	bl	801c780 <_sbrk_r>
 801b884:	3001      	adds	r0, #1
 801b886:	d1f2      	bne.n	801b86e <sbrk_aligned+0x22>
 801b888:	e7ef      	b.n	801b86a <sbrk_aligned+0x1e>
 801b88a:	bf00      	nop
 801b88c:	2401da08 	.word	0x2401da08

0801b890 <_malloc_r>:
 801b890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b894:	1ccd      	adds	r5, r1, #3
 801b896:	f025 0503 	bic.w	r5, r5, #3
 801b89a:	3508      	adds	r5, #8
 801b89c:	2d0c      	cmp	r5, #12
 801b89e:	bf38      	it	cc
 801b8a0:	250c      	movcc	r5, #12
 801b8a2:	2d00      	cmp	r5, #0
 801b8a4:	4606      	mov	r6, r0
 801b8a6:	db01      	blt.n	801b8ac <_malloc_r+0x1c>
 801b8a8:	42a9      	cmp	r1, r5
 801b8aa:	d904      	bls.n	801b8b6 <_malloc_r+0x26>
 801b8ac:	230c      	movs	r3, #12
 801b8ae:	6033      	str	r3, [r6, #0]
 801b8b0:	2000      	movs	r0, #0
 801b8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b98c <_malloc_r+0xfc>
 801b8ba:	f000 f87b 	bl	801b9b4 <__malloc_lock>
 801b8be:	f8d8 3000 	ldr.w	r3, [r8]
 801b8c2:	461c      	mov	r4, r3
 801b8c4:	bb44      	cbnz	r4, 801b918 <_malloc_r+0x88>
 801b8c6:	4629      	mov	r1, r5
 801b8c8:	4630      	mov	r0, r6
 801b8ca:	f7ff ffbf 	bl	801b84c <sbrk_aligned>
 801b8ce:	1c43      	adds	r3, r0, #1
 801b8d0:	4604      	mov	r4, r0
 801b8d2:	d158      	bne.n	801b986 <_malloc_r+0xf6>
 801b8d4:	f8d8 4000 	ldr.w	r4, [r8]
 801b8d8:	4627      	mov	r7, r4
 801b8da:	2f00      	cmp	r7, #0
 801b8dc:	d143      	bne.n	801b966 <_malloc_r+0xd6>
 801b8de:	2c00      	cmp	r4, #0
 801b8e0:	d04b      	beq.n	801b97a <_malloc_r+0xea>
 801b8e2:	6823      	ldr	r3, [r4, #0]
 801b8e4:	4639      	mov	r1, r7
 801b8e6:	4630      	mov	r0, r6
 801b8e8:	eb04 0903 	add.w	r9, r4, r3
 801b8ec:	f000 ff48 	bl	801c780 <_sbrk_r>
 801b8f0:	4581      	cmp	r9, r0
 801b8f2:	d142      	bne.n	801b97a <_malloc_r+0xea>
 801b8f4:	6821      	ldr	r1, [r4, #0]
 801b8f6:	1a6d      	subs	r5, r5, r1
 801b8f8:	4629      	mov	r1, r5
 801b8fa:	4630      	mov	r0, r6
 801b8fc:	f7ff ffa6 	bl	801b84c <sbrk_aligned>
 801b900:	3001      	adds	r0, #1
 801b902:	d03a      	beq.n	801b97a <_malloc_r+0xea>
 801b904:	6823      	ldr	r3, [r4, #0]
 801b906:	442b      	add	r3, r5
 801b908:	6023      	str	r3, [r4, #0]
 801b90a:	f8d8 3000 	ldr.w	r3, [r8]
 801b90e:	685a      	ldr	r2, [r3, #4]
 801b910:	bb62      	cbnz	r2, 801b96c <_malloc_r+0xdc>
 801b912:	f8c8 7000 	str.w	r7, [r8]
 801b916:	e00f      	b.n	801b938 <_malloc_r+0xa8>
 801b918:	6822      	ldr	r2, [r4, #0]
 801b91a:	1b52      	subs	r2, r2, r5
 801b91c:	d420      	bmi.n	801b960 <_malloc_r+0xd0>
 801b91e:	2a0b      	cmp	r2, #11
 801b920:	d917      	bls.n	801b952 <_malloc_r+0xc2>
 801b922:	1961      	adds	r1, r4, r5
 801b924:	42a3      	cmp	r3, r4
 801b926:	6025      	str	r5, [r4, #0]
 801b928:	bf18      	it	ne
 801b92a:	6059      	strne	r1, [r3, #4]
 801b92c:	6863      	ldr	r3, [r4, #4]
 801b92e:	bf08      	it	eq
 801b930:	f8c8 1000 	streq.w	r1, [r8]
 801b934:	5162      	str	r2, [r4, r5]
 801b936:	604b      	str	r3, [r1, #4]
 801b938:	4630      	mov	r0, r6
 801b93a:	f000 f841 	bl	801b9c0 <__malloc_unlock>
 801b93e:	f104 000b 	add.w	r0, r4, #11
 801b942:	1d23      	adds	r3, r4, #4
 801b944:	f020 0007 	bic.w	r0, r0, #7
 801b948:	1ac2      	subs	r2, r0, r3
 801b94a:	bf1c      	itt	ne
 801b94c:	1a1b      	subne	r3, r3, r0
 801b94e:	50a3      	strne	r3, [r4, r2]
 801b950:	e7af      	b.n	801b8b2 <_malloc_r+0x22>
 801b952:	6862      	ldr	r2, [r4, #4]
 801b954:	42a3      	cmp	r3, r4
 801b956:	bf0c      	ite	eq
 801b958:	f8c8 2000 	streq.w	r2, [r8]
 801b95c:	605a      	strne	r2, [r3, #4]
 801b95e:	e7eb      	b.n	801b938 <_malloc_r+0xa8>
 801b960:	4623      	mov	r3, r4
 801b962:	6864      	ldr	r4, [r4, #4]
 801b964:	e7ae      	b.n	801b8c4 <_malloc_r+0x34>
 801b966:	463c      	mov	r4, r7
 801b968:	687f      	ldr	r7, [r7, #4]
 801b96a:	e7b6      	b.n	801b8da <_malloc_r+0x4a>
 801b96c:	461a      	mov	r2, r3
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	42a3      	cmp	r3, r4
 801b972:	d1fb      	bne.n	801b96c <_malloc_r+0xdc>
 801b974:	2300      	movs	r3, #0
 801b976:	6053      	str	r3, [r2, #4]
 801b978:	e7de      	b.n	801b938 <_malloc_r+0xa8>
 801b97a:	230c      	movs	r3, #12
 801b97c:	6033      	str	r3, [r6, #0]
 801b97e:	4630      	mov	r0, r6
 801b980:	f000 f81e 	bl	801b9c0 <__malloc_unlock>
 801b984:	e794      	b.n	801b8b0 <_malloc_r+0x20>
 801b986:	6005      	str	r5, [r0, #0]
 801b988:	e7d6      	b.n	801b938 <_malloc_r+0xa8>
 801b98a:	bf00      	nop
 801b98c:	2401da0c 	.word	0x2401da0c

0801b990 <__ascii_mbtowc>:
 801b990:	b082      	sub	sp, #8
 801b992:	b901      	cbnz	r1, 801b996 <__ascii_mbtowc+0x6>
 801b994:	a901      	add	r1, sp, #4
 801b996:	b142      	cbz	r2, 801b9aa <__ascii_mbtowc+0x1a>
 801b998:	b14b      	cbz	r3, 801b9ae <__ascii_mbtowc+0x1e>
 801b99a:	7813      	ldrb	r3, [r2, #0]
 801b99c:	600b      	str	r3, [r1, #0]
 801b99e:	7812      	ldrb	r2, [r2, #0]
 801b9a0:	1e10      	subs	r0, r2, #0
 801b9a2:	bf18      	it	ne
 801b9a4:	2001      	movne	r0, #1
 801b9a6:	b002      	add	sp, #8
 801b9a8:	4770      	bx	lr
 801b9aa:	4610      	mov	r0, r2
 801b9ac:	e7fb      	b.n	801b9a6 <__ascii_mbtowc+0x16>
 801b9ae:	f06f 0001 	mvn.w	r0, #1
 801b9b2:	e7f8      	b.n	801b9a6 <__ascii_mbtowc+0x16>

0801b9b4 <__malloc_lock>:
 801b9b4:	4801      	ldr	r0, [pc, #4]	@ (801b9bc <__malloc_lock+0x8>)
 801b9b6:	f7fe bdc4 	b.w	801a542 <__retarget_lock_acquire_recursive>
 801b9ba:	bf00      	nop
 801b9bc:	2401da04 	.word	0x2401da04

0801b9c0 <__malloc_unlock>:
 801b9c0:	4801      	ldr	r0, [pc, #4]	@ (801b9c8 <__malloc_unlock+0x8>)
 801b9c2:	f7fe bdbf 	b.w	801a544 <__retarget_lock_release_recursive>
 801b9c6:	bf00      	nop
 801b9c8:	2401da04 	.word	0x2401da04

0801b9cc <_Balloc>:
 801b9cc:	b570      	push	{r4, r5, r6, lr}
 801b9ce:	69c6      	ldr	r6, [r0, #28]
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	460d      	mov	r5, r1
 801b9d4:	b976      	cbnz	r6, 801b9f4 <_Balloc+0x28>
 801b9d6:	2010      	movs	r0, #16
 801b9d8:	f7ff ff30 	bl	801b83c <malloc>
 801b9dc:	4602      	mov	r2, r0
 801b9de:	61e0      	str	r0, [r4, #28]
 801b9e0:	b920      	cbnz	r0, 801b9ec <_Balloc+0x20>
 801b9e2:	4b18      	ldr	r3, [pc, #96]	@ (801ba44 <_Balloc+0x78>)
 801b9e4:	4818      	ldr	r0, [pc, #96]	@ (801ba48 <_Balloc+0x7c>)
 801b9e6:	216b      	movs	r1, #107	@ 0x6b
 801b9e8:	f000 feda 	bl	801c7a0 <__assert_func>
 801b9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b9f0:	6006      	str	r6, [r0, #0]
 801b9f2:	60c6      	str	r6, [r0, #12]
 801b9f4:	69e6      	ldr	r6, [r4, #28]
 801b9f6:	68f3      	ldr	r3, [r6, #12]
 801b9f8:	b183      	cbz	r3, 801ba1c <_Balloc+0x50>
 801b9fa:	69e3      	ldr	r3, [r4, #28]
 801b9fc:	68db      	ldr	r3, [r3, #12]
 801b9fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ba02:	b9b8      	cbnz	r0, 801ba34 <_Balloc+0x68>
 801ba04:	2101      	movs	r1, #1
 801ba06:	fa01 f605 	lsl.w	r6, r1, r5
 801ba0a:	1d72      	adds	r2, r6, #5
 801ba0c:	0092      	lsls	r2, r2, #2
 801ba0e:	4620      	mov	r0, r4
 801ba10:	f000 fee4 	bl	801c7dc <_calloc_r>
 801ba14:	b160      	cbz	r0, 801ba30 <_Balloc+0x64>
 801ba16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ba1a:	e00e      	b.n	801ba3a <_Balloc+0x6e>
 801ba1c:	2221      	movs	r2, #33	@ 0x21
 801ba1e:	2104      	movs	r1, #4
 801ba20:	4620      	mov	r0, r4
 801ba22:	f000 fedb 	bl	801c7dc <_calloc_r>
 801ba26:	69e3      	ldr	r3, [r4, #28]
 801ba28:	60f0      	str	r0, [r6, #12]
 801ba2a:	68db      	ldr	r3, [r3, #12]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d1e4      	bne.n	801b9fa <_Balloc+0x2e>
 801ba30:	2000      	movs	r0, #0
 801ba32:	bd70      	pop	{r4, r5, r6, pc}
 801ba34:	6802      	ldr	r2, [r0, #0]
 801ba36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ba40:	e7f7      	b.n	801ba32 <_Balloc+0x66>
 801ba42:	bf00      	nop
 801ba44:	0801e8b2 	.word	0x0801e8b2
 801ba48:	0801e992 	.word	0x0801e992

0801ba4c <_Bfree>:
 801ba4c:	b570      	push	{r4, r5, r6, lr}
 801ba4e:	69c6      	ldr	r6, [r0, #28]
 801ba50:	4605      	mov	r5, r0
 801ba52:	460c      	mov	r4, r1
 801ba54:	b976      	cbnz	r6, 801ba74 <_Bfree+0x28>
 801ba56:	2010      	movs	r0, #16
 801ba58:	f7ff fef0 	bl	801b83c <malloc>
 801ba5c:	4602      	mov	r2, r0
 801ba5e:	61e8      	str	r0, [r5, #28]
 801ba60:	b920      	cbnz	r0, 801ba6c <_Bfree+0x20>
 801ba62:	4b09      	ldr	r3, [pc, #36]	@ (801ba88 <_Bfree+0x3c>)
 801ba64:	4809      	ldr	r0, [pc, #36]	@ (801ba8c <_Bfree+0x40>)
 801ba66:	218f      	movs	r1, #143	@ 0x8f
 801ba68:	f000 fe9a 	bl	801c7a0 <__assert_func>
 801ba6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ba70:	6006      	str	r6, [r0, #0]
 801ba72:	60c6      	str	r6, [r0, #12]
 801ba74:	b13c      	cbz	r4, 801ba86 <_Bfree+0x3a>
 801ba76:	69eb      	ldr	r3, [r5, #28]
 801ba78:	6862      	ldr	r2, [r4, #4]
 801ba7a:	68db      	ldr	r3, [r3, #12]
 801ba7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ba80:	6021      	str	r1, [r4, #0]
 801ba82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ba86:	bd70      	pop	{r4, r5, r6, pc}
 801ba88:	0801e8b2 	.word	0x0801e8b2
 801ba8c:	0801e992 	.word	0x0801e992

0801ba90 <__multadd>:
 801ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba94:	690d      	ldr	r5, [r1, #16]
 801ba96:	4607      	mov	r7, r0
 801ba98:	460c      	mov	r4, r1
 801ba9a:	461e      	mov	r6, r3
 801ba9c:	f101 0c14 	add.w	ip, r1, #20
 801baa0:	2000      	movs	r0, #0
 801baa2:	f8dc 3000 	ldr.w	r3, [ip]
 801baa6:	b299      	uxth	r1, r3
 801baa8:	fb02 6101 	mla	r1, r2, r1, r6
 801baac:	0c1e      	lsrs	r6, r3, #16
 801baae:	0c0b      	lsrs	r3, r1, #16
 801bab0:	fb02 3306 	mla	r3, r2, r6, r3
 801bab4:	b289      	uxth	r1, r1
 801bab6:	3001      	adds	r0, #1
 801bab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801babc:	4285      	cmp	r5, r0
 801babe:	f84c 1b04 	str.w	r1, [ip], #4
 801bac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bac6:	dcec      	bgt.n	801baa2 <__multadd+0x12>
 801bac8:	b30e      	cbz	r6, 801bb0e <__multadd+0x7e>
 801baca:	68a3      	ldr	r3, [r4, #8]
 801bacc:	42ab      	cmp	r3, r5
 801bace:	dc19      	bgt.n	801bb04 <__multadd+0x74>
 801bad0:	6861      	ldr	r1, [r4, #4]
 801bad2:	4638      	mov	r0, r7
 801bad4:	3101      	adds	r1, #1
 801bad6:	f7ff ff79 	bl	801b9cc <_Balloc>
 801bada:	4680      	mov	r8, r0
 801badc:	b928      	cbnz	r0, 801baea <__multadd+0x5a>
 801bade:	4602      	mov	r2, r0
 801bae0:	4b0c      	ldr	r3, [pc, #48]	@ (801bb14 <__multadd+0x84>)
 801bae2:	480d      	ldr	r0, [pc, #52]	@ (801bb18 <__multadd+0x88>)
 801bae4:	21ba      	movs	r1, #186	@ 0xba
 801bae6:	f000 fe5b 	bl	801c7a0 <__assert_func>
 801baea:	6922      	ldr	r2, [r4, #16]
 801baec:	3202      	adds	r2, #2
 801baee:	f104 010c 	add.w	r1, r4, #12
 801baf2:	0092      	lsls	r2, r2, #2
 801baf4:	300c      	adds	r0, #12
 801baf6:	f7fe fd26 	bl	801a546 <memcpy>
 801bafa:	4621      	mov	r1, r4
 801bafc:	4638      	mov	r0, r7
 801bafe:	f7ff ffa5 	bl	801ba4c <_Bfree>
 801bb02:	4644      	mov	r4, r8
 801bb04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bb08:	3501      	adds	r5, #1
 801bb0a:	615e      	str	r6, [r3, #20]
 801bb0c:	6125      	str	r5, [r4, #16]
 801bb0e:	4620      	mov	r0, r4
 801bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb14:	0801e921 	.word	0x0801e921
 801bb18:	0801e992 	.word	0x0801e992

0801bb1c <__s2b>:
 801bb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb20:	460c      	mov	r4, r1
 801bb22:	4615      	mov	r5, r2
 801bb24:	461f      	mov	r7, r3
 801bb26:	2209      	movs	r2, #9
 801bb28:	3308      	adds	r3, #8
 801bb2a:	4606      	mov	r6, r0
 801bb2c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb30:	2100      	movs	r1, #0
 801bb32:	2201      	movs	r2, #1
 801bb34:	429a      	cmp	r2, r3
 801bb36:	db09      	blt.n	801bb4c <__s2b+0x30>
 801bb38:	4630      	mov	r0, r6
 801bb3a:	f7ff ff47 	bl	801b9cc <_Balloc>
 801bb3e:	b940      	cbnz	r0, 801bb52 <__s2b+0x36>
 801bb40:	4602      	mov	r2, r0
 801bb42:	4b19      	ldr	r3, [pc, #100]	@ (801bba8 <__s2b+0x8c>)
 801bb44:	4819      	ldr	r0, [pc, #100]	@ (801bbac <__s2b+0x90>)
 801bb46:	21d3      	movs	r1, #211	@ 0xd3
 801bb48:	f000 fe2a 	bl	801c7a0 <__assert_func>
 801bb4c:	0052      	lsls	r2, r2, #1
 801bb4e:	3101      	adds	r1, #1
 801bb50:	e7f0      	b.n	801bb34 <__s2b+0x18>
 801bb52:	9b08      	ldr	r3, [sp, #32]
 801bb54:	6143      	str	r3, [r0, #20]
 801bb56:	2d09      	cmp	r5, #9
 801bb58:	f04f 0301 	mov.w	r3, #1
 801bb5c:	6103      	str	r3, [r0, #16]
 801bb5e:	dd16      	ble.n	801bb8e <__s2b+0x72>
 801bb60:	f104 0909 	add.w	r9, r4, #9
 801bb64:	46c8      	mov	r8, r9
 801bb66:	442c      	add	r4, r5
 801bb68:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bb6c:	4601      	mov	r1, r0
 801bb6e:	3b30      	subs	r3, #48	@ 0x30
 801bb70:	220a      	movs	r2, #10
 801bb72:	4630      	mov	r0, r6
 801bb74:	f7ff ff8c 	bl	801ba90 <__multadd>
 801bb78:	45a0      	cmp	r8, r4
 801bb7a:	d1f5      	bne.n	801bb68 <__s2b+0x4c>
 801bb7c:	f1a5 0408 	sub.w	r4, r5, #8
 801bb80:	444c      	add	r4, r9
 801bb82:	1b2d      	subs	r5, r5, r4
 801bb84:	1963      	adds	r3, r4, r5
 801bb86:	42bb      	cmp	r3, r7
 801bb88:	db04      	blt.n	801bb94 <__s2b+0x78>
 801bb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb8e:	340a      	adds	r4, #10
 801bb90:	2509      	movs	r5, #9
 801bb92:	e7f6      	b.n	801bb82 <__s2b+0x66>
 801bb94:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bb98:	4601      	mov	r1, r0
 801bb9a:	3b30      	subs	r3, #48	@ 0x30
 801bb9c:	220a      	movs	r2, #10
 801bb9e:	4630      	mov	r0, r6
 801bba0:	f7ff ff76 	bl	801ba90 <__multadd>
 801bba4:	e7ee      	b.n	801bb84 <__s2b+0x68>
 801bba6:	bf00      	nop
 801bba8:	0801e921 	.word	0x0801e921
 801bbac:	0801e992 	.word	0x0801e992

0801bbb0 <__hi0bits>:
 801bbb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	bf36      	itet	cc
 801bbb8:	0403      	lslcc	r3, r0, #16
 801bbba:	2000      	movcs	r0, #0
 801bbbc:	2010      	movcc	r0, #16
 801bbbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bbc2:	bf3c      	itt	cc
 801bbc4:	021b      	lslcc	r3, r3, #8
 801bbc6:	3008      	addcc	r0, #8
 801bbc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bbcc:	bf3c      	itt	cc
 801bbce:	011b      	lslcc	r3, r3, #4
 801bbd0:	3004      	addcc	r0, #4
 801bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bbd6:	bf3c      	itt	cc
 801bbd8:	009b      	lslcc	r3, r3, #2
 801bbda:	3002      	addcc	r0, #2
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	db05      	blt.n	801bbec <__hi0bits+0x3c>
 801bbe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bbe4:	f100 0001 	add.w	r0, r0, #1
 801bbe8:	bf08      	it	eq
 801bbea:	2020      	moveq	r0, #32
 801bbec:	4770      	bx	lr

0801bbee <__lo0bits>:
 801bbee:	6803      	ldr	r3, [r0, #0]
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	f013 0007 	ands.w	r0, r3, #7
 801bbf6:	d00b      	beq.n	801bc10 <__lo0bits+0x22>
 801bbf8:	07d9      	lsls	r1, r3, #31
 801bbfa:	d421      	bmi.n	801bc40 <__lo0bits+0x52>
 801bbfc:	0798      	lsls	r0, r3, #30
 801bbfe:	bf49      	itett	mi
 801bc00:	085b      	lsrmi	r3, r3, #1
 801bc02:	089b      	lsrpl	r3, r3, #2
 801bc04:	2001      	movmi	r0, #1
 801bc06:	6013      	strmi	r3, [r2, #0]
 801bc08:	bf5c      	itt	pl
 801bc0a:	6013      	strpl	r3, [r2, #0]
 801bc0c:	2002      	movpl	r0, #2
 801bc0e:	4770      	bx	lr
 801bc10:	b299      	uxth	r1, r3
 801bc12:	b909      	cbnz	r1, 801bc18 <__lo0bits+0x2a>
 801bc14:	0c1b      	lsrs	r3, r3, #16
 801bc16:	2010      	movs	r0, #16
 801bc18:	b2d9      	uxtb	r1, r3
 801bc1a:	b909      	cbnz	r1, 801bc20 <__lo0bits+0x32>
 801bc1c:	3008      	adds	r0, #8
 801bc1e:	0a1b      	lsrs	r3, r3, #8
 801bc20:	0719      	lsls	r1, r3, #28
 801bc22:	bf04      	itt	eq
 801bc24:	091b      	lsreq	r3, r3, #4
 801bc26:	3004      	addeq	r0, #4
 801bc28:	0799      	lsls	r1, r3, #30
 801bc2a:	bf04      	itt	eq
 801bc2c:	089b      	lsreq	r3, r3, #2
 801bc2e:	3002      	addeq	r0, #2
 801bc30:	07d9      	lsls	r1, r3, #31
 801bc32:	d403      	bmi.n	801bc3c <__lo0bits+0x4e>
 801bc34:	085b      	lsrs	r3, r3, #1
 801bc36:	f100 0001 	add.w	r0, r0, #1
 801bc3a:	d003      	beq.n	801bc44 <__lo0bits+0x56>
 801bc3c:	6013      	str	r3, [r2, #0]
 801bc3e:	4770      	bx	lr
 801bc40:	2000      	movs	r0, #0
 801bc42:	4770      	bx	lr
 801bc44:	2020      	movs	r0, #32
 801bc46:	4770      	bx	lr

0801bc48 <__i2b>:
 801bc48:	b510      	push	{r4, lr}
 801bc4a:	460c      	mov	r4, r1
 801bc4c:	2101      	movs	r1, #1
 801bc4e:	f7ff febd 	bl	801b9cc <_Balloc>
 801bc52:	4602      	mov	r2, r0
 801bc54:	b928      	cbnz	r0, 801bc62 <__i2b+0x1a>
 801bc56:	4b05      	ldr	r3, [pc, #20]	@ (801bc6c <__i2b+0x24>)
 801bc58:	4805      	ldr	r0, [pc, #20]	@ (801bc70 <__i2b+0x28>)
 801bc5a:	f240 1145 	movw	r1, #325	@ 0x145
 801bc5e:	f000 fd9f 	bl	801c7a0 <__assert_func>
 801bc62:	2301      	movs	r3, #1
 801bc64:	6144      	str	r4, [r0, #20]
 801bc66:	6103      	str	r3, [r0, #16]
 801bc68:	bd10      	pop	{r4, pc}
 801bc6a:	bf00      	nop
 801bc6c:	0801e921 	.word	0x0801e921
 801bc70:	0801e992 	.word	0x0801e992

0801bc74 <__multiply>:
 801bc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc78:	4614      	mov	r4, r2
 801bc7a:	690a      	ldr	r2, [r1, #16]
 801bc7c:	6923      	ldr	r3, [r4, #16]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	bfa8      	it	ge
 801bc82:	4623      	movge	r3, r4
 801bc84:	460f      	mov	r7, r1
 801bc86:	bfa4      	itt	ge
 801bc88:	460c      	movge	r4, r1
 801bc8a:	461f      	movge	r7, r3
 801bc8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801bc90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801bc94:	68a3      	ldr	r3, [r4, #8]
 801bc96:	6861      	ldr	r1, [r4, #4]
 801bc98:	eb0a 0609 	add.w	r6, sl, r9
 801bc9c:	42b3      	cmp	r3, r6
 801bc9e:	b085      	sub	sp, #20
 801bca0:	bfb8      	it	lt
 801bca2:	3101      	addlt	r1, #1
 801bca4:	f7ff fe92 	bl	801b9cc <_Balloc>
 801bca8:	b930      	cbnz	r0, 801bcb8 <__multiply+0x44>
 801bcaa:	4602      	mov	r2, r0
 801bcac:	4b44      	ldr	r3, [pc, #272]	@ (801bdc0 <__multiply+0x14c>)
 801bcae:	4845      	ldr	r0, [pc, #276]	@ (801bdc4 <__multiply+0x150>)
 801bcb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801bcb4:	f000 fd74 	bl	801c7a0 <__assert_func>
 801bcb8:	f100 0514 	add.w	r5, r0, #20
 801bcbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bcc0:	462b      	mov	r3, r5
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	4543      	cmp	r3, r8
 801bcc6:	d321      	bcc.n	801bd0c <__multiply+0x98>
 801bcc8:	f107 0114 	add.w	r1, r7, #20
 801bccc:	f104 0214 	add.w	r2, r4, #20
 801bcd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801bcd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801bcd8:	9302      	str	r3, [sp, #8]
 801bcda:	1b13      	subs	r3, r2, r4
 801bcdc:	3b15      	subs	r3, #21
 801bcde:	f023 0303 	bic.w	r3, r3, #3
 801bce2:	3304      	adds	r3, #4
 801bce4:	f104 0715 	add.w	r7, r4, #21
 801bce8:	42ba      	cmp	r2, r7
 801bcea:	bf38      	it	cc
 801bcec:	2304      	movcc	r3, #4
 801bcee:	9301      	str	r3, [sp, #4]
 801bcf0:	9b02      	ldr	r3, [sp, #8]
 801bcf2:	9103      	str	r1, [sp, #12]
 801bcf4:	428b      	cmp	r3, r1
 801bcf6:	d80c      	bhi.n	801bd12 <__multiply+0x9e>
 801bcf8:	2e00      	cmp	r6, #0
 801bcfa:	dd03      	ble.n	801bd04 <__multiply+0x90>
 801bcfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d05b      	beq.n	801bdbc <__multiply+0x148>
 801bd04:	6106      	str	r6, [r0, #16]
 801bd06:	b005      	add	sp, #20
 801bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd0c:	f843 2b04 	str.w	r2, [r3], #4
 801bd10:	e7d8      	b.n	801bcc4 <__multiply+0x50>
 801bd12:	f8b1 a000 	ldrh.w	sl, [r1]
 801bd16:	f1ba 0f00 	cmp.w	sl, #0
 801bd1a:	d024      	beq.n	801bd66 <__multiply+0xf2>
 801bd1c:	f104 0e14 	add.w	lr, r4, #20
 801bd20:	46a9      	mov	r9, r5
 801bd22:	f04f 0c00 	mov.w	ip, #0
 801bd26:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bd2a:	f8d9 3000 	ldr.w	r3, [r9]
 801bd2e:	fa1f fb87 	uxth.w	fp, r7
 801bd32:	b29b      	uxth	r3, r3
 801bd34:	fb0a 330b 	mla	r3, sl, fp, r3
 801bd38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801bd3c:	f8d9 7000 	ldr.w	r7, [r9]
 801bd40:	4463      	add	r3, ip
 801bd42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bd46:	fb0a c70b 	mla	r7, sl, fp, ip
 801bd4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801bd4e:	b29b      	uxth	r3, r3
 801bd50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bd54:	4572      	cmp	r2, lr
 801bd56:	f849 3b04 	str.w	r3, [r9], #4
 801bd5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bd5e:	d8e2      	bhi.n	801bd26 <__multiply+0xb2>
 801bd60:	9b01      	ldr	r3, [sp, #4]
 801bd62:	f845 c003 	str.w	ip, [r5, r3]
 801bd66:	9b03      	ldr	r3, [sp, #12]
 801bd68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801bd6c:	3104      	adds	r1, #4
 801bd6e:	f1b9 0f00 	cmp.w	r9, #0
 801bd72:	d021      	beq.n	801bdb8 <__multiply+0x144>
 801bd74:	682b      	ldr	r3, [r5, #0]
 801bd76:	f104 0c14 	add.w	ip, r4, #20
 801bd7a:	46ae      	mov	lr, r5
 801bd7c:	f04f 0a00 	mov.w	sl, #0
 801bd80:	f8bc b000 	ldrh.w	fp, [ip]
 801bd84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801bd88:	fb09 770b 	mla	r7, r9, fp, r7
 801bd8c:	4457      	add	r7, sl
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bd94:	f84e 3b04 	str.w	r3, [lr], #4
 801bd98:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bd9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bda0:	f8be 3000 	ldrh.w	r3, [lr]
 801bda4:	fb09 330a 	mla	r3, r9, sl, r3
 801bda8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801bdac:	4562      	cmp	r2, ip
 801bdae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bdb2:	d8e5      	bhi.n	801bd80 <__multiply+0x10c>
 801bdb4:	9f01      	ldr	r7, [sp, #4]
 801bdb6:	51eb      	str	r3, [r5, r7]
 801bdb8:	3504      	adds	r5, #4
 801bdba:	e799      	b.n	801bcf0 <__multiply+0x7c>
 801bdbc:	3e01      	subs	r6, #1
 801bdbe:	e79b      	b.n	801bcf8 <__multiply+0x84>
 801bdc0:	0801e921 	.word	0x0801e921
 801bdc4:	0801e992 	.word	0x0801e992

0801bdc8 <__pow5mult>:
 801bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdcc:	4615      	mov	r5, r2
 801bdce:	f012 0203 	ands.w	r2, r2, #3
 801bdd2:	4607      	mov	r7, r0
 801bdd4:	460e      	mov	r6, r1
 801bdd6:	d007      	beq.n	801bde8 <__pow5mult+0x20>
 801bdd8:	4c25      	ldr	r4, [pc, #148]	@ (801be70 <__pow5mult+0xa8>)
 801bdda:	3a01      	subs	r2, #1
 801bddc:	2300      	movs	r3, #0
 801bdde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bde2:	f7ff fe55 	bl	801ba90 <__multadd>
 801bde6:	4606      	mov	r6, r0
 801bde8:	10ad      	asrs	r5, r5, #2
 801bdea:	d03d      	beq.n	801be68 <__pow5mult+0xa0>
 801bdec:	69fc      	ldr	r4, [r7, #28]
 801bdee:	b97c      	cbnz	r4, 801be10 <__pow5mult+0x48>
 801bdf0:	2010      	movs	r0, #16
 801bdf2:	f7ff fd23 	bl	801b83c <malloc>
 801bdf6:	4602      	mov	r2, r0
 801bdf8:	61f8      	str	r0, [r7, #28]
 801bdfa:	b928      	cbnz	r0, 801be08 <__pow5mult+0x40>
 801bdfc:	4b1d      	ldr	r3, [pc, #116]	@ (801be74 <__pow5mult+0xac>)
 801bdfe:	481e      	ldr	r0, [pc, #120]	@ (801be78 <__pow5mult+0xb0>)
 801be00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801be04:	f000 fccc 	bl	801c7a0 <__assert_func>
 801be08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801be0c:	6004      	str	r4, [r0, #0]
 801be0e:	60c4      	str	r4, [r0, #12]
 801be10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801be14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801be18:	b94c      	cbnz	r4, 801be2e <__pow5mult+0x66>
 801be1a:	f240 2171 	movw	r1, #625	@ 0x271
 801be1e:	4638      	mov	r0, r7
 801be20:	f7ff ff12 	bl	801bc48 <__i2b>
 801be24:	2300      	movs	r3, #0
 801be26:	f8c8 0008 	str.w	r0, [r8, #8]
 801be2a:	4604      	mov	r4, r0
 801be2c:	6003      	str	r3, [r0, #0]
 801be2e:	f04f 0900 	mov.w	r9, #0
 801be32:	07eb      	lsls	r3, r5, #31
 801be34:	d50a      	bpl.n	801be4c <__pow5mult+0x84>
 801be36:	4631      	mov	r1, r6
 801be38:	4622      	mov	r2, r4
 801be3a:	4638      	mov	r0, r7
 801be3c:	f7ff ff1a 	bl	801bc74 <__multiply>
 801be40:	4631      	mov	r1, r6
 801be42:	4680      	mov	r8, r0
 801be44:	4638      	mov	r0, r7
 801be46:	f7ff fe01 	bl	801ba4c <_Bfree>
 801be4a:	4646      	mov	r6, r8
 801be4c:	106d      	asrs	r5, r5, #1
 801be4e:	d00b      	beq.n	801be68 <__pow5mult+0xa0>
 801be50:	6820      	ldr	r0, [r4, #0]
 801be52:	b938      	cbnz	r0, 801be64 <__pow5mult+0x9c>
 801be54:	4622      	mov	r2, r4
 801be56:	4621      	mov	r1, r4
 801be58:	4638      	mov	r0, r7
 801be5a:	f7ff ff0b 	bl	801bc74 <__multiply>
 801be5e:	6020      	str	r0, [r4, #0]
 801be60:	f8c0 9000 	str.w	r9, [r0]
 801be64:	4604      	mov	r4, r0
 801be66:	e7e4      	b.n	801be32 <__pow5mult+0x6a>
 801be68:	4630      	mov	r0, r6
 801be6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be6e:	bf00      	nop
 801be70:	0801e9ec 	.word	0x0801e9ec
 801be74:	0801e8b2 	.word	0x0801e8b2
 801be78:	0801e992 	.word	0x0801e992

0801be7c <__lshift>:
 801be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be80:	460c      	mov	r4, r1
 801be82:	6849      	ldr	r1, [r1, #4]
 801be84:	6923      	ldr	r3, [r4, #16]
 801be86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801be8a:	68a3      	ldr	r3, [r4, #8]
 801be8c:	4607      	mov	r7, r0
 801be8e:	4691      	mov	r9, r2
 801be90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801be94:	f108 0601 	add.w	r6, r8, #1
 801be98:	42b3      	cmp	r3, r6
 801be9a:	db0b      	blt.n	801beb4 <__lshift+0x38>
 801be9c:	4638      	mov	r0, r7
 801be9e:	f7ff fd95 	bl	801b9cc <_Balloc>
 801bea2:	4605      	mov	r5, r0
 801bea4:	b948      	cbnz	r0, 801beba <__lshift+0x3e>
 801bea6:	4602      	mov	r2, r0
 801bea8:	4b28      	ldr	r3, [pc, #160]	@ (801bf4c <__lshift+0xd0>)
 801beaa:	4829      	ldr	r0, [pc, #164]	@ (801bf50 <__lshift+0xd4>)
 801beac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801beb0:	f000 fc76 	bl	801c7a0 <__assert_func>
 801beb4:	3101      	adds	r1, #1
 801beb6:	005b      	lsls	r3, r3, #1
 801beb8:	e7ee      	b.n	801be98 <__lshift+0x1c>
 801beba:	2300      	movs	r3, #0
 801bebc:	f100 0114 	add.w	r1, r0, #20
 801bec0:	f100 0210 	add.w	r2, r0, #16
 801bec4:	4618      	mov	r0, r3
 801bec6:	4553      	cmp	r3, sl
 801bec8:	db33      	blt.n	801bf32 <__lshift+0xb6>
 801beca:	6920      	ldr	r0, [r4, #16]
 801becc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bed0:	f104 0314 	add.w	r3, r4, #20
 801bed4:	f019 091f 	ands.w	r9, r9, #31
 801bed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bedc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bee0:	d02b      	beq.n	801bf3a <__lshift+0xbe>
 801bee2:	f1c9 0e20 	rsb	lr, r9, #32
 801bee6:	468a      	mov	sl, r1
 801bee8:	2200      	movs	r2, #0
 801beea:	6818      	ldr	r0, [r3, #0]
 801beec:	fa00 f009 	lsl.w	r0, r0, r9
 801bef0:	4310      	orrs	r0, r2
 801bef2:	f84a 0b04 	str.w	r0, [sl], #4
 801bef6:	f853 2b04 	ldr.w	r2, [r3], #4
 801befa:	459c      	cmp	ip, r3
 801befc:	fa22 f20e 	lsr.w	r2, r2, lr
 801bf00:	d8f3      	bhi.n	801beea <__lshift+0x6e>
 801bf02:	ebac 0304 	sub.w	r3, ip, r4
 801bf06:	3b15      	subs	r3, #21
 801bf08:	f023 0303 	bic.w	r3, r3, #3
 801bf0c:	3304      	adds	r3, #4
 801bf0e:	f104 0015 	add.w	r0, r4, #21
 801bf12:	4584      	cmp	ip, r0
 801bf14:	bf38      	it	cc
 801bf16:	2304      	movcc	r3, #4
 801bf18:	50ca      	str	r2, [r1, r3]
 801bf1a:	b10a      	cbz	r2, 801bf20 <__lshift+0xa4>
 801bf1c:	f108 0602 	add.w	r6, r8, #2
 801bf20:	3e01      	subs	r6, #1
 801bf22:	4638      	mov	r0, r7
 801bf24:	612e      	str	r6, [r5, #16]
 801bf26:	4621      	mov	r1, r4
 801bf28:	f7ff fd90 	bl	801ba4c <_Bfree>
 801bf2c:	4628      	mov	r0, r5
 801bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf32:	f842 0f04 	str.w	r0, [r2, #4]!
 801bf36:	3301      	adds	r3, #1
 801bf38:	e7c5      	b.n	801bec6 <__lshift+0x4a>
 801bf3a:	3904      	subs	r1, #4
 801bf3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf40:	f841 2f04 	str.w	r2, [r1, #4]!
 801bf44:	459c      	cmp	ip, r3
 801bf46:	d8f9      	bhi.n	801bf3c <__lshift+0xc0>
 801bf48:	e7ea      	b.n	801bf20 <__lshift+0xa4>
 801bf4a:	bf00      	nop
 801bf4c:	0801e921 	.word	0x0801e921
 801bf50:	0801e992 	.word	0x0801e992

0801bf54 <__mcmp>:
 801bf54:	690a      	ldr	r2, [r1, #16]
 801bf56:	4603      	mov	r3, r0
 801bf58:	6900      	ldr	r0, [r0, #16]
 801bf5a:	1a80      	subs	r0, r0, r2
 801bf5c:	b530      	push	{r4, r5, lr}
 801bf5e:	d10e      	bne.n	801bf7e <__mcmp+0x2a>
 801bf60:	3314      	adds	r3, #20
 801bf62:	3114      	adds	r1, #20
 801bf64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bf68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bf6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bf70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bf74:	4295      	cmp	r5, r2
 801bf76:	d003      	beq.n	801bf80 <__mcmp+0x2c>
 801bf78:	d205      	bcs.n	801bf86 <__mcmp+0x32>
 801bf7a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf7e:	bd30      	pop	{r4, r5, pc}
 801bf80:	42a3      	cmp	r3, r4
 801bf82:	d3f3      	bcc.n	801bf6c <__mcmp+0x18>
 801bf84:	e7fb      	b.n	801bf7e <__mcmp+0x2a>
 801bf86:	2001      	movs	r0, #1
 801bf88:	e7f9      	b.n	801bf7e <__mcmp+0x2a>
	...

0801bf8c <__mdiff>:
 801bf8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf90:	4689      	mov	r9, r1
 801bf92:	4606      	mov	r6, r0
 801bf94:	4611      	mov	r1, r2
 801bf96:	4648      	mov	r0, r9
 801bf98:	4614      	mov	r4, r2
 801bf9a:	f7ff ffdb 	bl	801bf54 <__mcmp>
 801bf9e:	1e05      	subs	r5, r0, #0
 801bfa0:	d112      	bne.n	801bfc8 <__mdiff+0x3c>
 801bfa2:	4629      	mov	r1, r5
 801bfa4:	4630      	mov	r0, r6
 801bfa6:	f7ff fd11 	bl	801b9cc <_Balloc>
 801bfaa:	4602      	mov	r2, r0
 801bfac:	b928      	cbnz	r0, 801bfba <__mdiff+0x2e>
 801bfae:	4b3f      	ldr	r3, [pc, #252]	@ (801c0ac <__mdiff+0x120>)
 801bfb0:	f240 2137 	movw	r1, #567	@ 0x237
 801bfb4:	483e      	ldr	r0, [pc, #248]	@ (801c0b0 <__mdiff+0x124>)
 801bfb6:	f000 fbf3 	bl	801c7a0 <__assert_func>
 801bfba:	2301      	movs	r3, #1
 801bfbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bfc0:	4610      	mov	r0, r2
 801bfc2:	b003      	add	sp, #12
 801bfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc8:	bfbc      	itt	lt
 801bfca:	464b      	movlt	r3, r9
 801bfcc:	46a1      	movlt	r9, r4
 801bfce:	4630      	mov	r0, r6
 801bfd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bfd4:	bfba      	itte	lt
 801bfd6:	461c      	movlt	r4, r3
 801bfd8:	2501      	movlt	r5, #1
 801bfda:	2500      	movge	r5, #0
 801bfdc:	f7ff fcf6 	bl	801b9cc <_Balloc>
 801bfe0:	4602      	mov	r2, r0
 801bfe2:	b918      	cbnz	r0, 801bfec <__mdiff+0x60>
 801bfe4:	4b31      	ldr	r3, [pc, #196]	@ (801c0ac <__mdiff+0x120>)
 801bfe6:	f240 2145 	movw	r1, #581	@ 0x245
 801bfea:	e7e3      	b.n	801bfb4 <__mdiff+0x28>
 801bfec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bff0:	6926      	ldr	r6, [r4, #16]
 801bff2:	60c5      	str	r5, [r0, #12]
 801bff4:	f109 0310 	add.w	r3, r9, #16
 801bff8:	f109 0514 	add.w	r5, r9, #20
 801bffc:	f104 0e14 	add.w	lr, r4, #20
 801c000:	f100 0b14 	add.w	fp, r0, #20
 801c004:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c008:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c00c:	9301      	str	r3, [sp, #4]
 801c00e:	46d9      	mov	r9, fp
 801c010:	f04f 0c00 	mov.w	ip, #0
 801c014:	9b01      	ldr	r3, [sp, #4]
 801c016:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c01a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c01e:	9301      	str	r3, [sp, #4]
 801c020:	fa1f f38a 	uxth.w	r3, sl
 801c024:	4619      	mov	r1, r3
 801c026:	b283      	uxth	r3, r0
 801c028:	1acb      	subs	r3, r1, r3
 801c02a:	0c00      	lsrs	r0, r0, #16
 801c02c:	4463      	add	r3, ip
 801c02e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c032:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c036:	b29b      	uxth	r3, r3
 801c038:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c03c:	4576      	cmp	r6, lr
 801c03e:	f849 3b04 	str.w	r3, [r9], #4
 801c042:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c046:	d8e5      	bhi.n	801c014 <__mdiff+0x88>
 801c048:	1b33      	subs	r3, r6, r4
 801c04a:	3b15      	subs	r3, #21
 801c04c:	f023 0303 	bic.w	r3, r3, #3
 801c050:	3415      	adds	r4, #21
 801c052:	3304      	adds	r3, #4
 801c054:	42a6      	cmp	r6, r4
 801c056:	bf38      	it	cc
 801c058:	2304      	movcc	r3, #4
 801c05a:	441d      	add	r5, r3
 801c05c:	445b      	add	r3, fp
 801c05e:	461e      	mov	r6, r3
 801c060:	462c      	mov	r4, r5
 801c062:	4544      	cmp	r4, r8
 801c064:	d30e      	bcc.n	801c084 <__mdiff+0xf8>
 801c066:	f108 0103 	add.w	r1, r8, #3
 801c06a:	1b49      	subs	r1, r1, r5
 801c06c:	f021 0103 	bic.w	r1, r1, #3
 801c070:	3d03      	subs	r5, #3
 801c072:	45a8      	cmp	r8, r5
 801c074:	bf38      	it	cc
 801c076:	2100      	movcc	r1, #0
 801c078:	440b      	add	r3, r1
 801c07a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c07e:	b191      	cbz	r1, 801c0a6 <__mdiff+0x11a>
 801c080:	6117      	str	r7, [r2, #16]
 801c082:	e79d      	b.n	801bfc0 <__mdiff+0x34>
 801c084:	f854 1b04 	ldr.w	r1, [r4], #4
 801c088:	46e6      	mov	lr, ip
 801c08a:	0c08      	lsrs	r0, r1, #16
 801c08c:	fa1c fc81 	uxtah	ip, ip, r1
 801c090:	4471      	add	r1, lr
 801c092:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c096:	b289      	uxth	r1, r1
 801c098:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c09c:	f846 1b04 	str.w	r1, [r6], #4
 801c0a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c0a4:	e7dd      	b.n	801c062 <__mdiff+0xd6>
 801c0a6:	3f01      	subs	r7, #1
 801c0a8:	e7e7      	b.n	801c07a <__mdiff+0xee>
 801c0aa:	bf00      	nop
 801c0ac:	0801e921 	.word	0x0801e921
 801c0b0:	0801e992 	.word	0x0801e992

0801c0b4 <__ulp>:
 801c0b4:	b082      	sub	sp, #8
 801c0b6:	ed8d 0b00 	vstr	d0, [sp]
 801c0ba:	9a01      	ldr	r2, [sp, #4]
 801c0bc:	4b0f      	ldr	r3, [pc, #60]	@ (801c0fc <__ulp+0x48>)
 801c0be:	4013      	ands	r3, r2
 801c0c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	dc08      	bgt.n	801c0da <__ulp+0x26>
 801c0c8:	425b      	negs	r3, r3
 801c0ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c0ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c0d2:	da04      	bge.n	801c0de <__ulp+0x2a>
 801c0d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c0d8:	4113      	asrs	r3, r2
 801c0da:	2200      	movs	r2, #0
 801c0dc:	e008      	b.n	801c0f0 <__ulp+0x3c>
 801c0de:	f1a2 0314 	sub.w	r3, r2, #20
 801c0e2:	2b1e      	cmp	r3, #30
 801c0e4:	bfda      	itte	le
 801c0e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c0ea:	40da      	lsrle	r2, r3
 801c0ec:	2201      	movgt	r2, #1
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	4619      	mov	r1, r3
 801c0f2:	4610      	mov	r0, r2
 801c0f4:	ec41 0b10 	vmov	d0, r0, r1
 801c0f8:	b002      	add	sp, #8
 801c0fa:	4770      	bx	lr
 801c0fc:	7ff00000 	.word	0x7ff00000

0801c100 <__b2d>:
 801c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c104:	6906      	ldr	r6, [r0, #16]
 801c106:	f100 0814 	add.w	r8, r0, #20
 801c10a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c10e:	1f37      	subs	r7, r6, #4
 801c110:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c114:	4610      	mov	r0, r2
 801c116:	f7ff fd4b 	bl	801bbb0 <__hi0bits>
 801c11a:	f1c0 0320 	rsb	r3, r0, #32
 801c11e:	280a      	cmp	r0, #10
 801c120:	600b      	str	r3, [r1, #0]
 801c122:	491b      	ldr	r1, [pc, #108]	@ (801c190 <__b2d+0x90>)
 801c124:	dc15      	bgt.n	801c152 <__b2d+0x52>
 801c126:	f1c0 0c0b 	rsb	ip, r0, #11
 801c12a:	fa22 f30c 	lsr.w	r3, r2, ip
 801c12e:	45b8      	cmp	r8, r7
 801c130:	ea43 0501 	orr.w	r5, r3, r1
 801c134:	bf34      	ite	cc
 801c136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c13a:	2300      	movcs	r3, #0
 801c13c:	3015      	adds	r0, #21
 801c13e:	fa02 f000 	lsl.w	r0, r2, r0
 801c142:	fa23 f30c 	lsr.w	r3, r3, ip
 801c146:	4303      	orrs	r3, r0
 801c148:	461c      	mov	r4, r3
 801c14a:	ec45 4b10 	vmov	d0, r4, r5
 801c14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c152:	45b8      	cmp	r8, r7
 801c154:	bf3a      	itte	cc
 801c156:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c15a:	f1a6 0708 	subcc.w	r7, r6, #8
 801c15e:	2300      	movcs	r3, #0
 801c160:	380b      	subs	r0, #11
 801c162:	d012      	beq.n	801c18a <__b2d+0x8a>
 801c164:	f1c0 0120 	rsb	r1, r0, #32
 801c168:	fa23 f401 	lsr.w	r4, r3, r1
 801c16c:	4082      	lsls	r2, r0
 801c16e:	4322      	orrs	r2, r4
 801c170:	4547      	cmp	r7, r8
 801c172:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c176:	bf8c      	ite	hi
 801c178:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c17c:	2200      	movls	r2, #0
 801c17e:	4083      	lsls	r3, r0
 801c180:	40ca      	lsrs	r2, r1
 801c182:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c186:	4313      	orrs	r3, r2
 801c188:	e7de      	b.n	801c148 <__b2d+0x48>
 801c18a:	ea42 0501 	orr.w	r5, r2, r1
 801c18e:	e7db      	b.n	801c148 <__b2d+0x48>
 801c190:	3ff00000 	.word	0x3ff00000

0801c194 <__d2b>:
 801c194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c198:	460f      	mov	r7, r1
 801c19a:	2101      	movs	r1, #1
 801c19c:	ec59 8b10 	vmov	r8, r9, d0
 801c1a0:	4616      	mov	r6, r2
 801c1a2:	f7ff fc13 	bl	801b9cc <_Balloc>
 801c1a6:	4604      	mov	r4, r0
 801c1a8:	b930      	cbnz	r0, 801c1b8 <__d2b+0x24>
 801c1aa:	4602      	mov	r2, r0
 801c1ac:	4b23      	ldr	r3, [pc, #140]	@ (801c23c <__d2b+0xa8>)
 801c1ae:	4824      	ldr	r0, [pc, #144]	@ (801c240 <__d2b+0xac>)
 801c1b0:	f240 310f 	movw	r1, #783	@ 0x30f
 801c1b4:	f000 faf4 	bl	801c7a0 <__assert_func>
 801c1b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c1c0:	b10d      	cbz	r5, 801c1c6 <__d2b+0x32>
 801c1c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c1c6:	9301      	str	r3, [sp, #4]
 801c1c8:	f1b8 0300 	subs.w	r3, r8, #0
 801c1cc:	d023      	beq.n	801c216 <__d2b+0x82>
 801c1ce:	4668      	mov	r0, sp
 801c1d0:	9300      	str	r3, [sp, #0]
 801c1d2:	f7ff fd0c 	bl	801bbee <__lo0bits>
 801c1d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c1da:	b1d0      	cbz	r0, 801c212 <__d2b+0x7e>
 801c1dc:	f1c0 0320 	rsb	r3, r0, #32
 801c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 801c1e4:	430b      	orrs	r3, r1
 801c1e6:	40c2      	lsrs	r2, r0
 801c1e8:	6163      	str	r3, [r4, #20]
 801c1ea:	9201      	str	r2, [sp, #4]
 801c1ec:	9b01      	ldr	r3, [sp, #4]
 801c1ee:	61a3      	str	r3, [r4, #24]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	bf0c      	ite	eq
 801c1f4:	2201      	moveq	r2, #1
 801c1f6:	2202      	movne	r2, #2
 801c1f8:	6122      	str	r2, [r4, #16]
 801c1fa:	b1a5      	cbz	r5, 801c226 <__d2b+0x92>
 801c1fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c200:	4405      	add	r5, r0
 801c202:	603d      	str	r5, [r7, #0]
 801c204:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c208:	6030      	str	r0, [r6, #0]
 801c20a:	4620      	mov	r0, r4
 801c20c:	b003      	add	sp, #12
 801c20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c212:	6161      	str	r1, [r4, #20]
 801c214:	e7ea      	b.n	801c1ec <__d2b+0x58>
 801c216:	a801      	add	r0, sp, #4
 801c218:	f7ff fce9 	bl	801bbee <__lo0bits>
 801c21c:	9b01      	ldr	r3, [sp, #4]
 801c21e:	6163      	str	r3, [r4, #20]
 801c220:	3020      	adds	r0, #32
 801c222:	2201      	movs	r2, #1
 801c224:	e7e8      	b.n	801c1f8 <__d2b+0x64>
 801c226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c22a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c22e:	6038      	str	r0, [r7, #0]
 801c230:	6918      	ldr	r0, [r3, #16]
 801c232:	f7ff fcbd 	bl	801bbb0 <__hi0bits>
 801c236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c23a:	e7e5      	b.n	801c208 <__d2b+0x74>
 801c23c:	0801e921 	.word	0x0801e921
 801c240:	0801e992 	.word	0x0801e992

0801c244 <__ratio>:
 801c244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c248:	4688      	mov	r8, r1
 801c24a:	4669      	mov	r1, sp
 801c24c:	4681      	mov	r9, r0
 801c24e:	f7ff ff57 	bl	801c100 <__b2d>
 801c252:	a901      	add	r1, sp, #4
 801c254:	4640      	mov	r0, r8
 801c256:	ec55 4b10 	vmov	r4, r5, d0
 801c25a:	f7ff ff51 	bl	801c100 <__b2d>
 801c25e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c262:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801c266:	1ad2      	subs	r2, r2, r3
 801c268:	e9dd 3100 	ldrd	r3, r1, [sp]
 801c26c:	1a5b      	subs	r3, r3, r1
 801c26e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801c272:	ec57 6b10 	vmov	r6, r7, d0
 801c276:	2b00      	cmp	r3, #0
 801c278:	bfd6      	itet	le
 801c27a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c27e:	462a      	movgt	r2, r5
 801c280:	463a      	movle	r2, r7
 801c282:	46ab      	mov	fp, r5
 801c284:	46a2      	mov	sl, r4
 801c286:	bfce      	itee	gt
 801c288:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801c28c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801c290:	ee00 3a90 	vmovle	s1, r3
 801c294:	ec4b ab17 	vmov	d7, sl, fp
 801c298:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801c29c:	b003      	add	sp, #12
 801c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2a2 <__copybits>:
 801c2a2:	3901      	subs	r1, #1
 801c2a4:	b570      	push	{r4, r5, r6, lr}
 801c2a6:	1149      	asrs	r1, r1, #5
 801c2a8:	6914      	ldr	r4, [r2, #16]
 801c2aa:	3101      	adds	r1, #1
 801c2ac:	f102 0314 	add.w	r3, r2, #20
 801c2b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c2b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c2b8:	1f05      	subs	r5, r0, #4
 801c2ba:	42a3      	cmp	r3, r4
 801c2bc:	d30c      	bcc.n	801c2d8 <__copybits+0x36>
 801c2be:	1aa3      	subs	r3, r4, r2
 801c2c0:	3b11      	subs	r3, #17
 801c2c2:	f023 0303 	bic.w	r3, r3, #3
 801c2c6:	3211      	adds	r2, #17
 801c2c8:	42a2      	cmp	r2, r4
 801c2ca:	bf88      	it	hi
 801c2cc:	2300      	movhi	r3, #0
 801c2ce:	4418      	add	r0, r3
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	4288      	cmp	r0, r1
 801c2d4:	d305      	bcc.n	801c2e2 <__copybits+0x40>
 801c2d6:	bd70      	pop	{r4, r5, r6, pc}
 801c2d8:	f853 6b04 	ldr.w	r6, [r3], #4
 801c2dc:	f845 6f04 	str.w	r6, [r5, #4]!
 801c2e0:	e7eb      	b.n	801c2ba <__copybits+0x18>
 801c2e2:	f840 3b04 	str.w	r3, [r0], #4
 801c2e6:	e7f4      	b.n	801c2d2 <__copybits+0x30>

0801c2e8 <__any_on>:
 801c2e8:	f100 0214 	add.w	r2, r0, #20
 801c2ec:	6900      	ldr	r0, [r0, #16]
 801c2ee:	114b      	asrs	r3, r1, #5
 801c2f0:	4298      	cmp	r0, r3
 801c2f2:	b510      	push	{r4, lr}
 801c2f4:	db11      	blt.n	801c31a <__any_on+0x32>
 801c2f6:	dd0a      	ble.n	801c30e <__any_on+0x26>
 801c2f8:	f011 011f 	ands.w	r1, r1, #31
 801c2fc:	d007      	beq.n	801c30e <__any_on+0x26>
 801c2fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c302:	fa24 f001 	lsr.w	r0, r4, r1
 801c306:	fa00 f101 	lsl.w	r1, r0, r1
 801c30a:	428c      	cmp	r4, r1
 801c30c:	d10b      	bne.n	801c326 <__any_on+0x3e>
 801c30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c312:	4293      	cmp	r3, r2
 801c314:	d803      	bhi.n	801c31e <__any_on+0x36>
 801c316:	2000      	movs	r0, #0
 801c318:	bd10      	pop	{r4, pc}
 801c31a:	4603      	mov	r3, r0
 801c31c:	e7f7      	b.n	801c30e <__any_on+0x26>
 801c31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c322:	2900      	cmp	r1, #0
 801c324:	d0f5      	beq.n	801c312 <__any_on+0x2a>
 801c326:	2001      	movs	r0, #1
 801c328:	e7f6      	b.n	801c318 <__any_on+0x30>

0801c32a <__ascii_wctomb>:
 801c32a:	4603      	mov	r3, r0
 801c32c:	4608      	mov	r0, r1
 801c32e:	b141      	cbz	r1, 801c342 <__ascii_wctomb+0x18>
 801c330:	2aff      	cmp	r2, #255	@ 0xff
 801c332:	d904      	bls.n	801c33e <__ascii_wctomb+0x14>
 801c334:	228a      	movs	r2, #138	@ 0x8a
 801c336:	601a      	str	r2, [r3, #0]
 801c338:	f04f 30ff 	mov.w	r0, #4294967295
 801c33c:	4770      	bx	lr
 801c33e:	700a      	strb	r2, [r1, #0]
 801c340:	2001      	movs	r0, #1
 801c342:	4770      	bx	lr

0801c344 <__ssputs_r>:
 801c344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c348:	688e      	ldr	r6, [r1, #8]
 801c34a:	461f      	mov	r7, r3
 801c34c:	42be      	cmp	r6, r7
 801c34e:	680b      	ldr	r3, [r1, #0]
 801c350:	4682      	mov	sl, r0
 801c352:	460c      	mov	r4, r1
 801c354:	4690      	mov	r8, r2
 801c356:	d82d      	bhi.n	801c3b4 <__ssputs_r+0x70>
 801c358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c35c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c360:	d026      	beq.n	801c3b0 <__ssputs_r+0x6c>
 801c362:	6965      	ldr	r5, [r4, #20]
 801c364:	6909      	ldr	r1, [r1, #16]
 801c366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c36a:	eba3 0901 	sub.w	r9, r3, r1
 801c36e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c372:	1c7b      	adds	r3, r7, #1
 801c374:	444b      	add	r3, r9
 801c376:	106d      	asrs	r5, r5, #1
 801c378:	429d      	cmp	r5, r3
 801c37a:	bf38      	it	cc
 801c37c:	461d      	movcc	r5, r3
 801c37e:	0553      	lsls	r3, r2, #21
 801c380:	d527      	bpl.n	801c3d2 <__ssputs_r+0x8e>
 801c382:	4629      	mov	r1, r5
 801c384:	f7ff fa84 	bl	801b890 <_malloc_r>
 801c388:	4606      	mov	r6, r0
 801c38a:	b360      	cbz	r0, 801c3e6 <__ssputs_r+0xa2>
 801c38c:	6921      	ldr	r1, [r4, #16]
 801c38e:	464a      	mov	r2, r9
 801c390:	f7fe f8d9 	bl	801a546 <memcpy>
 801c394:	89a3      	ldrh	r3, [r4, #12]
 801c396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c39e:	81a3      	strh	r3, [r4, #12]
 801c3a0:	6126      	str	r6, [r4, #16]
 801c3a2:	6165      	str	r5, [r4, #20]
 801c3a4:	444e      	add	r6, r9
 801c3a6:	eba5 0509 	sub.w	r5, r5, r9
 801c3aa:	6026      	str	r6, [r4, #0]
 801c3ac:	60a5      	str	r5, [r4, #8]
 801c3ae:	463e      	mov	r6, r7
 801c3b0:	42be      	cmp	r6, r7
 801c3b2:	d900      	bls.n	801c3b6 <__ssputs_r+0x72>
 801c3b4:	463e      	mov	r6, r7
 801c3b6:	6820      	ldr	r0, [r4, #0]
 801c3b8:	4632      	mov	r2, r6
 801c3ba:	4641      	mov	r1, r8
 801c3bc:	f000 f9c6 	bl	801c74c <memmove>
 801c3c0:	68a3      	ldr	r3, [r4, #8]
 801c3c2:	1b9b      	subs	r3, r3, r6
 801c3c4:	60a3      	str	r3, [r4, #8]
 801c3c6:	6823      	ldr	r3, [r4, #0]
 801c3c8:	4433      	add	r3, r6
 801c3ca:	6023      	str	r3, [r4, #0]
 801c3cc:	2000      	movs	r0, #0
 801c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3d2:	462a      	mov	r2, r5
 801c3d4:	f000 fa16 	bl	801c804 <_realloc_r>
 801c3d8:	4606      	mov	r6, r0
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	d1e0      	bne.n	801c3a0 <__ssputs_r+0x5c>
 801c3de:	6921      	ldr	r1, [r4, #16]
 801c3e0:	4650      	mov	r0, sl
 801c3e2:	f7fe fea7 	bl	801b134 <_free_r>
 801c3e6:	230c      	movs	r3, #12
 801c3e8:	f8ca 3000 	str.w	r3, [sl]
 801c3ec:	89a3      	ldrh	r3, [r4, #12]
 801c3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c3f2:	81a3      	strh	r3, [r4, #12]
 801c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801c3f8:	e7e9      	b.n	801c3ce <__ssputs_r+0x8a>
	...

0801c3fc <_svfiprintf_r>:
 801c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c400:	4698      	mov	r8, r3
 801c402:	898b      	ldrh	r3, [r1, #12]
 801c404:	061b      	lsls	r3, r3, #24
 801c406:	b09d      	sub	sp, #116	@ 0x74
 801c408:	4607      	mov	r7, r0
 801c40a:	460d      	mov	r5, r1
 801c40c:	4614      	mov	r4, r2
 801c40e:	d510      	bpl.n	801c432 <_svfiprintf_r+0x36>
 801c410:	690b      	ldr	r3, [r1, #16]
 801c412:	b973      	cbnz	r3, 801c432 <_svfiprintf_r+0x36>
 801c414:	2140      	movs	r1, #64	@ 0x40
 801c416:	f7ff fa3b 	bl	801b890 <_malloc_r>
 801c41a:	6028      	str	r0, [r5, #0]
 801c41c:	6128      	str	r0, [r5, #16]
 801c41e:	b930      	cbnz	r0, 801c42e <_svfiprintf_r+0x32>
 801c420:	230c      	movs	r3, #12
 801c422:	603b      	str	r3, [r7, #0]
 801c424:	f04f 30ff 	mov.w	r0, #4294967295
 801c428:	b01d      	add	sp, #116	@ 0x74
 801c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c42e:	2340      	movs	r3, #64	@ 0x40
 801c430:	616b      	str	r3, [r5, #20]
 801c432:	2300      	movs	r3, #0
 801c434:	9309      	str	r3, [sp, #36]	@ 0x24
 801c436:	2320      	movs	r3, #32
 801c438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c43c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c440:	2330      	movs	r3, #48	@ 0x30
 801c442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c5e0 <_svfiprintf_r+0x1e4>
 801c446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c44a:	f04f 0901 	mov.w	r9, #1
 801c44e:	4623      	mov	r3, r4
 801c450:	469a      	mov	sl, r3
 801c452:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c456:	b10a      	cbz	r2, 801c45c <_svfiprintf_r+0x60>
 801c458:	2a25      	cmp	r2, #37	@ 0x25
 801c45a:	d1f9      	bne.n	801c450 <_svfiprintf_r+0x54>
 801c45c:	ebba 0b04 	subs.w	fp, sl, r4
 801c460:	d00b      	beq.n	801c47a <_svfiprintf_r+0x7e>
 801c462:	465b      	mov	r3, fp
 801c464:	4622      	mov	r2, r4
 801c466:	4629      	mov	r1, r5
 801c468:	4638      	mov	r0, r7
 801c46a:	f7ff ff6b 	bl	801c344 <__ssputs_r>
 801c46e:	3001      	adds	r0, #1
 801c470:	f000 80a7 	beq.w	801c5c2 <_svfiprintf_r+0x1c6>
 801c474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c476:	445a      	add	r2, fp
 801c478:	9209      	str	r2, [sp, #36]	@ 0x24
 801c47a:	f89a 3000 	ldrb.w	r3, [sl]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	f000 809f 	beq.w	801c5c2 <_svfiprintf_r+0x1c6>
 801c484:	2300      	movs	r3, #0
 801c486:	f04f 32ff 	mov.w	r2, #4294967295
 801c48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c48e:	f10a 0a01 	add.w	sl, sl, #1
 801c492:	9304      	str	r3, [sp, #16]
 801c494:	9307      	str	r3, [sp, #28]
 801c496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c49a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c49c:	4654      	mov	r4, sl
 801c49e:	2205      	movs	r2, #5
 801c4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4a4:	484e      	ldr	r0, [pc, #312]	@ (801c5e0 <_svfiprintf_r+0x1e4>)
 801c4a6:	f7e3 ff43 	bl	8000330 <memchr>
 801c4aa:	9a04      	ldr	r2, [sp, #16]
 801c4ac:	b9d8      	cbnz	r0, 801c4e6 <_svfiprintf_r+0xea>
 801c4ae:	06d0      	lsls	r0, r2, #27
 801c4b0:	bf44      	itt	mi
 801c4b2:	2320      	movmi	r3, #32
 801c4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4b8:	0711      	lsls	r1, r2, #28
 801c4ba:	bf44      	itt	mi
 801c4bc:	232b      	movmi	r3, #43	@ 0x2b
 801c4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4c2:	f89a 3000 	ldrb.w	r3, [sl]
 801c4c6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c4c8:	d015      	beq.n	801c4f6 <_svfiprintf_r+0xfa>
 801c4ca:	9a07      	ldr	r2, [sp, #28]
 801c4cc:	4654      	mov	r4, sl
 801c4ce:	2000      	movs	r0, #0
 801c4d0:	f04f 0c0a 	mov.w	ip, #10
 801c4d4:	4621      	mov	r1, r4
 801c4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4da:	3b30      	subs	r3, #48	@ 0x30
 801c4dc:	2b09      	cmp	r3, #9
 801c4de:	d94b      	bls.n	801c578 <_svfiprintf_r+0x17c>
 801c4e0:	b1b0      	cbz	r0, 801c510 <_svfiprintf_r+0x114>
 801c4e2:	9207      	str	r2, [sp, #28]
 801c4e4:	e014      	b.n	801c510 <_svfiprintf_r+0x114>
 801c4e6:	eba0 0308 	sub.w	r3, r0, r8
 801c4ea:	fa09 f303 	lsl.w	r3, r9, r3
 801c4ee:	4313      	orrs	r3, r2
 801c4f0:	9304      	str	r3, [sp, #16]
 801c4f2:	46a2      	mov	sl, r4
 801c4f4:	e7d2      	b.n	801c49c <_svfiprintf_r+0xa0>
 801c4f6:	9b03      	ldr	r3, [sp, #12]
 801c4f8:	1d19      	adds	r1, r3, #4
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	9103      	str	r1, [sp, #12]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	bfbb      	ittet	lt
 801c502:	425b      	neglt	r3, r3
 801c504:	f042 0202 	orrlt.w	r2, r2, #2
 801c508:	9307      	strge	r3, [sp, #28]
 801c50a:	9307      	strlt	r3, [sp, #28]
 801c50c:	bfb8      	it	lt
 801c50e:	9204      	strlt	r2, [sp, #16]
 801c510:	7823      	ldrb	r3, [r4, #0]
 801c512:	2b2e      	cmp	r3, #46	@ 0x2e
 801c514:	d10a      	bne.n	801c52c <_svfiprintf_r+0x130>
 801c516:	7863      	ldrb	r3, [r4, #1]
 801c518:	2b2a      	cmp	r3, #42	@ 0x2a
 801c51a:	d132      	bne.n	801c582 <_svfiprintf_r+0x186>
 801c51c:	9b03      	ldr	r3, [sp, #12]
 801c51e:	1d1a      	adds	r2, r3, #4
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	9203      	str	r2, [sp, #12]
 801c524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c528:	3402      	adds	r4, #2
 801c52a:	9305      	str	r3, [sp, #20]
 801c52c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c5f0 <_svfiprintf_r+0x1f4>
 801c530:	7821      	ldrb	r1, [r4, #0]
 801c532:	2203      	movs	r2, #3
 801c534:	4650      	mov	r0, sl
 801c536:	f7e3 fefb 	bl	8000330 <memchr>
 801c53a:	b138      	cbz	r0, 801c54c <_svfiprintf_r+0x150>
 801c53c:	9b04      	ldr	r3, [sp, #16]
 801c53e:	eba0 000a 	sub.w	r0, r0, sl
 801c542:	2240      	movs	r2, #64	@ 0x40
 801c544:	4082      	lsls	r2, r0
 801c546:	4313      	orrs	r3, r2
 801c548:	3401      	adds	r4, #1
 801c54a:	9304      	str	r3, [sp, #16]
 801c54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c550:	4824      	ldr	r0, [pc, #144]	@ (801c5e4 <_svfiprintf_r+0x1e8>)
 801c552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c556:	2206      	movs	r2, #6
 801c558:	f7e3 feea 	bl	8000330 <memchr>
 801c55c:	2800      	cmp	r0, #0
 801c55e:	d036      	beq.n	801c5ce <_svfiprintf_r+0x1d2>
 801c560:	4b21      	ldr	r3, [pc, #132]	@ (801c5e8 <_svfiprintf_r+0x1ec>)
 801c562:	bb1b      	cbnz	r3, 801c5ac <_svfiprintf_r+0x1b0>
 801c564:	9b03      	ldr	r3, [sp, #12]
 801c566:	3307      	adds	r3, #7
 801c568:	f023 0307 	bic.w	r3, r3, #7
 801c56c:	3308      	adds	r3, #8
 801c56e:	9303      	str	r3, [sp, #12]
 801c570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c572:	4433      	add	r3, r6
 801c574:	9309      	str	r3, [sp, #36]	@ 0x24
 801c576:	e76a      	b.n	801c44e <_svfiprintf_r+0x52>
 801c578:	fb0c 3202 	mla	r2, ip, r2, r3
 801c57c:	460c      	mov	r4, r1
 801c57e:	2001      	movs	r0, #1
 801c580:	e7a8      	b.n	801c4d4 <_svfiprintf_r+0xd8>
 801c582:	2300      	movs	r3, #0
 801c584:	3401      	adds	r4, #1
 801c586:	9305      	str	r3, [sp, #20]
 801c588:	4619      	mov	r1, r3
 801c58a:	f04f 0c0a 	mov.w	ip, #10
 801c58e:	4620      	mov	r0, r4
 801c590:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c594:	3a30      	subs	r2, #48	@ 0x30
 801c596:	2a09      	cmp	r2, #9
 801c598:	d903      	bls.n	801c5a2 <_svfiprintf_r+0x1a6>
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d0c6      	beq.n	801c52c <_svfiprintf_r+0x130>
 801c59e:	9105      	str	r1, [sp, #20]
 801c5a0:	e7c4      	b.n	801c52c <_svfiprintf_r+0x130>
 801c5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c5a6:	4604      	mov	r4, r0
 801c5a8:	2301      	movs	r3, #1
 801c5aa:	e7f0      	b.n	801c58e <_svfiprintf_r+0x192>
 801c5ac:	ab03      	add	r3, sp, #12
 801c5ae:	9300      	str	r3, [sp, #0]
 801c5b0:	462a      	mov	r2, r5
 801c5b2:	4b0e      	ldr	r3, [pc, #56]	@ (801c5ec <_svfiprintf_r+0x1f0>)
 801c5b4:	a904      	add	r1, sp, #16
 801c5b6:	4638      	mov	r0, r7
 801c5b8:	f7fd fa5a 	bl	8019a70 <_printf_float>
 801c5bc:	1c42      	adds	r2, r0, #1
 801c5be:	4606      	mov	r6, r0
 801c5c0:	d1d6      	bne.n	801c570 <_svfiprintf_r+0x174>
 801c5c2:	89ab      	ldrh	r3, [r5, #12]
 801c5c4:	065b      	lsls	r3, r3, #25
 801c5c6:	f53f af2d 	bmi.w	801c424 <_svfiprintf_r+0x28>
 801c5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c5cc:	e72c      	b.n	801c428 <_svfiprintf_r+0x2c>
 801c5ce:	ab03      	add	r3, sp, #12
 801c5d0:	9300      	str	r3, [sp, #0]
 801c5d2:	462a      	mov	r2, r5
 801c5d4:	4b05      	ldr	r3, [pc, #20]	@ (801c5ec <_svfiprintf_r+0x1f0>)
 801c5d6:	a904      	add	r1, sp, #16
 801c5d8:	4638      	mov	r0, r7
 801c5da:	f7fd fcd1 	bl	8019f80 <_printf_i>
 801c5de:	e7ed      	b.n	801c5bc <_svfiprintf_r+0x1c0>
 801c5e0:	0801eae8 	.word	0x0801eae8
 801c5e4:	0801eaf2 	.word	0x0801eaf2
 801c5e8:	08019a71 	.word	0x08019a71
 801c5ec:	0801c345 	.word	0x0801c345
 801c5f0:	0801eaee 	.word	0x0801eaee

0801c5f4 <__sflush_r>:
 801c5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5fc:	0716      	lsls	r6, r2, #28
 801c5fe:	4605      	mov	r5, r0
 801c600:	460c      	mov	r4, r1
 801c602:	d454      	bmi.n	801c6ae <__sflush_r+0xba>
 801c604:	684b      	ldr	r3, [r1, #4]
 801c606:	2b00      	cmp	r3, #0
 801c608:	dc02      	bgt.n	801c610 <__sflush_r+0x1c>
 801c60a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	dd48      	ble.n	801c6a2 <__sflush_r+0xae>
 801c610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c612:	2e00      	cmp	r6, #0
 801c614:	d045      	beq.n	801c6a2 <__sflush_r+0xae>
 801c616:	2300      	movs	r3, #0
 801c618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c61c:	682f      	ldr	r7, [r5, #0]
 801c61e:	6a21      	ldr	r1, [r4, #32]
 801c620:	602b      	str	r3, [r5, #0]
 801c622:	d030      	beq.n	801c686 <__sflush_r+0x92>
 801c624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c626:	89a3      	ldrh	r3, [r4, #12]
 801c628:	0759      	lsls	r1, r3, #29
 801c62a:	d505      	bpl.n	801c638 <__sflush_r+0x44>
 801c62c:	6863      	ldr	r3, [r4, #4]
 801c62e:	1ad2      	subs	r2, r2, r3
 801c630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c632:	b10b      	cbz	r3, 801c638 <__sflush_r+0x44>
 801c634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c636:	1ad2      	subs	r2, r2, r3
 801c638:	2300      	movs	r3, #0
 801c63a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c63c:	6a21      	ldr	r1, [r4, #32]
 801c63e:	4628      	mov	r0, r5
 801c640:	47b0      	blx	r6
 801c642:	1c43      	adds	r3, r0, #1
 801c644:	89a3      	ldrh	r3, [r4, #12]
 801c646:	d106      	bne.n	801c656 <__sflush_r+0x62>
 801c648:	6829      	ldr	r1, [r5, #0]
 801c64a:	291d      	cmp	r1, #29
 801c64c:	d82b      	bhi.n	801c6a6 <__sflush_r+0xb2>
 801c64e:	4a2a      	ldr	r2, [pc, #168]	@ (801c6f8 <__sflush_r+0x104>)
 801c650:	410a      	asrs	r2, r1
 801c652:	07d6      	lsls	r6, r2, #31
 801c654:	d427      	bmi.n	801c6a6 <__sflush_r+0xb2>
 801c656:	2200      	movs	r2, #0
 801c658:	6062      	str	r2, [r4, #4]
 801c65a:	04d9      	lsls	r1, r3, #19
 801c65c:	6922      	ldr	r2, [r4, #16]
 801c65e:	6022      	str	r2, [r4, #0]
 801c660:	d504      	bpl.n	801c66c <__sflush_r+0x78>
 801c662:	1c42      	adds	r2, r0, #1
 801c664:	d101      	bne.n	801c66a <__sflush_r+0x76>
 801c666:	682b      	ldr	r3, [r5, #0]
 801c668:	b903      	cbnz	r3, 801c66c <__sflush_r+0x78>
 801c66a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c66e:	602f      	str	r7, [r5, #0]
 801c670:	b1b9      	cbz	r1, 801c6a2 <__sflush_r+0xae>
 801c672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c676:	4299      	cmp	r1, r3
 801c678:	d002      	beq.n	801c680 <__sflush_r+0x8c>
 801c67a:	4628      	mov	r0, r5
 801c67c:	f7fe fd5a 	bl	801b134 <_free_r>
 801c680:	2300      	movs	r3, #0
 801c682:	6363      	str	r3, [r4, #52]	@ 0x34
 801c684:	e00d      	b.n	801c6a2 <__sflush_r+0xae>
 801c686:	2301      	movs	r3, #1
 801c688:	4628      	mov	r0, r5
 801c68a:	47b0      	blx	r6
 801c68c:	4602      	mov	r2, r0
 801c68e:	1c50      	adds	r0, r2, #1
 801c690:	d1c9      	bne.n	801c626 <__sflush_r+0x32>
 801c692:	682b      	ldr	r3, [r5, #0]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d0c6      	beq.n	801c626 <__sflush_r+0x32>
 801c698:	2b1d      	cmp	r3, #29
 801c69a:	d001      	beq.n	801c6a0 <__sflush_r+0xac>
 801c69c:	2b16      	cmp	r3, #22
 801c69e:	d11e      	bne.n	801c6de <__sflush_r+0xea>
 801c6a0:	602f      	str	r7, [r5, #0]
 801c6a2:	2000      	movs	r0, #0
 801c6a4:	e022      	b.n	801c6ec <__sflush_r+0xf8>
 801c6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6aa:	b21b      	sxth	r3, r3
 801c6ac:	e01b      	b.n	801c6e6 <__sflush_r+0xf2>
 801c6ae:	690f      	ldr	r7, [r1, #16]
 801c6b0:	2f00      	cmp	r7, #0
 801c6b2:	d0f6      	beq.n	801c6a2 <__sflush_r+0xae>
 801c6b4:	0793      	lsls	r3, r2, #30
 801c6b6:	680e      	ldr	r6, [r1, #0]
 801c6b8:	bf08      	it	eq
 801c6ba:	694b      	ldreq	r3, [r1, #20]
 801c6bc:	600f      	str	r7, [r1, #0]
 801c6be:	bf18      	it	ne
 801c6c0:	2300      	movne	r3, #0
 801c6c2:	eba6 0807 	sub.w	r8, r6, r7
 801c6c6:	608b      	str	r3, [r1, #8]
 801c6c8:	f1b8 0f00 	cmp.w	r8, #0
 801c6cc:	dde9      	ble.n	801c6a2 <__sflush_r+0xae>
 801c6ce:	6a21      	ldr	r1, [r4, #32]
 801c6d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c6d2:	4643      	mov	r3, r8
 801c6d4:	463a      	mov	r2, r7
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	47b0      	blx	r6
 801c6da:	2800      	cmp	r0, #0
 801c6dc:	dc08      	bgt.n	801c6f0 <__sflush_r+0xfc>
 801c6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6e6:	81a3      	strh	r3, [r4, #12]
 801c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6f0:	4407      	add	r7, r0
 801c6f2:	eba8 0800 	sub.w	r8, r8, r0
 801c6f6:	e7e7      	b.n	801c6c8 <__sflush_r+0xd4>
 801c6f8:	dfbffffe 	.word	0xdfbffffe

0801c6fc <_fflush_r>:
 801c6fc:	b538      	push	{r3, r4, r5, lr}
 801c6fe:	690b      	ldr	r3, [r1, #16]
 801c700:	4605      	mov	r5, r0
 801c702:	460c      	mov	r4, r1
 801c704:	b913      	cbnz	r3, 801c70c <_fflush_r+0x10>
 801c706:	2500      	movs	r5, #0
 801c708:	4628      	mov	r0, r5
 801c70a:	bd38      	pop	{r3, r4, r5, pc}
 801c70c:	b118      	cbz	r0, 801c716 <_fflush_r+0x1a>
 801c70e:	6a03      	ldr	r3, [r0, #32]
 801c710:	b90b      	cbnz	r3, 801c716 <_fflush_r+0x1a>
 801c712:	f7fd fde1 	bl	801a2d8 <__sinit>
 801c716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d0f3      	beq.n	801c706 <_fflush_r+0xa>
 801c71e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c720:	07d0      	lsls	r0, r2, #31
 801c722:	d404      	bmi.n	801c72e <_fflush_r+0x32>
 801c724:	0599      	lsls	r1, r3, #22
 801c726:	d402      	bmi.n	801c72e <_fflush_r+0x32>
 801c728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c72a:	f7fd ff0a 	bl	801a542 <__retarget_lock_acquire_recursive>
 801c72e:	4628      	mov	r0, r5
 801c730:	4621      	mov	r1, r4
 801c732:	f7ff ff5f 	bl	801c5f4 <__sflush_r>
 801c736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c738:	07da      	lsls	r2, r3, #31
 801c73a:	4605      	mov	r5, r0
 801c73c:	d4e4      	bmi.n	801c708 <_fflush_r+0xc>
 801c73e:	89a3      	ldrh	r3, [r4, #12]
 801c740:	059b      	lsls	r3, r3, #22
 801c742:	d4e1      	bmi.n	801c708 <_fflush_r+0xc>
 801c744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c746:	f7fd fefd 	bl	801a544 <__retarget_lock_release_recursive>
 801c74a:	e7dd      	b.n	801c708 <_fflush_r+0xc>

0801c74c <memmove>:
 801c74c:	4288      	cmp	r0, r1
 801c74e:	b510      	push	{r4, lr}
 801c750:	eb01 0402 	add.w	r4, r1, r2
 801c754:	d902      	bls.n	801c75c <memmove+0x10>
 801c756:	4284      	cmp	r4, r0
 801c758:	4623      	mov	r3, r4
 801c75a:	d807      	bhi.n	801c76c <memmove+0x20>
 801c75c:	1e43      	subs	r3, r0, #1
 801c75e:	42a1      	cmp	r1, r4
 801c760:	d008      	beq.n	801c774 <memmove+0x28>
 801c762:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c766:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c76a:	e7f8      	b.n	801c75e <memmove+0x12>
 801c76c:	4402      	add	r2, r0
 801c76e:	4601      	mov	r1, r0
 801c770:	428a      	cmp	r2, r1
 801c772:	d100      	bne.n	801c776 <memmove+0x2a>
 801c774:	bd10      	pop	{r4, pc}
 801c776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c77e:	e7f7      	b.n	801c770 <memmove+0x24>

0801c780 <_sbrk_r>:
 801c780:	b538      	push	{r3, r4, r5, lr}
 801c782:	4d06      	ldr	r5, [pc, #24]	@ (801c79c <_sbrk_r+0x1c>)
 801c784:	2300      	movs	r3, #0
 801c786:	4604      	mov	r4, r0
 801c788:	4608      	mov	r0, r1
 801c78a:	602b      	str	r3, [r5, #0]
 801c78c:	f7e6 fb5c 	bl	8002e48 <_sbrk>
 801c790:	1c43      	adds	r3, r0, #1
 801c792:	d102      	bne.n	801c79a <_sbrk_r+0x1a>
 801c794:	682b      	ldr	r3, [r5, #0]
 801c796:	b103      	cbz	r3, 801c79a <_sbrk_r+0x1a>
 801c798:	6023      	str	r3, [r4, #0]
 801c79a:	bd38      	pop	{r3, r4, r5, pc}
 801c79c:	2401da00 	.word	0x2401da00

0801c7a0 <__assert_func>:
 801c7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c7a2:	4614      	mov	r4, r2
 801c7a4:	461a      	mov	r2, r3
 801c7a6:	4b09      	ldr	r3, [pc, #36]	@ (801c7cc <__assert_func+0x2c>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	4605      	mov	r5, r0
 801c7ac:	68d8      	ldr	r0, [r3, #12]
 801c7ae:	b954      	cbnz	r4, 801c7c6 <__assert_func+0x26>
 801c7b0:	4b07      	ldr	r3, [pc, #28]	@ (801c7d0 <__assert_func+0x30>)
 801c7b2:	461c      	mov	r4, r3
 801c7b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c7b8:	9100      	str	r1, [sp, #0]
 801c7ba:	462b      	mov	r3, r5
 801c7bc:	4905      	ldr	r1, [pc, #20]	@ (801c7d4 <__assert_func+0x34>)
 801c7be:	f000 f84f 	bl	801c860 <fiprintf>
 801c7c2:	f000 f85f 	bl	801c884 <abort>
 801c7c6:	4b04      	ldr	r3, [pc, #16]	@ (801c7d8 <__assert_func+0x38>)
 801c7c8:	e7f4      	b.n	801c7b4 <__assert_func+0x14>
 801c7ca:	bf00      	nop
 801c7cc:	240002ac 	.word	0x240002ac
 801c7d0:	0801eb34 	.word	0x0801eb34
 801c7d4:	0801eb06 	.word	0x0801eb06
 801c7d8:	0801eaf9 	.word	0x0801eaf9

0801c7dc <_calloc_r>:
 801c7dc:	b570      	push	{r4, r5, r6, lr}
 801c7de:	fba1 5402 	umull	r5, r4, r1, r2
 801c7e2:	b93c      	cbnz	r4, 801c7f4 <_calloc_r+0x18>
 801c7e4:	4629      	mov	r1, r5
 801c7e6:	f7ff f853 	bl	801b890 <_malloc_r>
 801c7ea:	4606      	mov	r6, r0
 801c7ec:	b928      	cbnz	r0, 801c7fa <_calloc_r+0x1e>
 801c7ee:	2600      	movs	r6, #0
 801c7f0:	4630      	mov	r0, r6
 801c7f2:	bd70      	pop	{r4, r5, r6, pc}
 801c7f4:	220c      	movs	r2, #12
 801c7f6:	6002      	str	r2, [r0, #0]
 801c7f8:	e7f9      	b.n	801c7ee <_calloc_r+0x12>
 801c7fa:	462a      	mov	r2, r5
 801c7fc:	4621      	mov	r1, r4
 801c7fe:	f7fd fe04 	bl	801a40a <memset>
 801c802:	e7f5      	b.n	801c7f0 <_calloc_r+0x14>

0801c804 <_realloc_r>:
 801c804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c808:	4680      	mov	r8, r0
 801c80a:	4615      	mov	r5, r2
 801c80c:	460c      	mov	r4, r1
 801c80e:	b921      	cbnz	r1, 801c81a <_realloc_r+0x16>
 801c810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c814:	4611      	mov	r1, r2
 801c816:	f7ff b83b 	b.w	801b890 <_malloc_r>
 801c81a:	b92a      	cbnz	r2, 801c828 <_realloc_r+0x24>
 801c81c:	f7fe fc8a 	bl	801b134 <_free_r>
 801c820:	2400      	movs	r4, #0
 801c822:	4620      	mov	r0, r4
 801c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c828:	f000 f833 	bl	801c892 <_malloc_usable_size_r>
 801c82c:	4285      	cmp	r5, r0
 801c82e:	4606      	mov	r6, r0
 801c830:	d802      	bhi.n	801c838 <_realloc_r+0x34>
 801c832:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c836:	d8f4      	bhi.n	801c822 <_realloc_r+0x1e>
 801c838:	4629      	mov	r1, r5
 801c83a:	4640      	mov	r0, r8
 801c83c:	f7ff f828 	bl	801b890 <_malloc_r>
 801c840:	4607      	mov	r7, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	d0ec      	beq.n	801c820 <_realloc_r+0x1c>
 801c846:	42b5      	cmp	r5, r6
 801c848:	462a      	mov	r2, r5
 801c84a:	4621      	mov	r1, r4
 801c84c:	bf28      	it	cs
 801c84e:	4632      	movcs	r2, r6
 801c850:	f7fd fe79 	bl	801a546 <memcpy>
 801c854:	4621      	mov	r1, r4
 801c856:	4640      	mov	r0, r8
 801c858:	f7fe fc6c 	bl	801b134 <_free_r>
 801c85c:	463c      	mov	r4, r7
 801c85e:	e7e0      	b.n	801c822 <_realloc_r+0x1e>

0801c860 <fiprintf>:
 801c860:	b40e      	push	{r1, r2, r3}
 801c862:	b503      	push	{r0, r1, lr}
 801c864:	4601      	mov	r1, r0
 801c866:	ab03      	add	r3, sp, #12
 801c868:	4805      	ldr	r0, [pc, #20]	@ (801c880 <fiprintf+0x20>)
 801c86a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c86e:	6800      	ldr	r0, [r0, #0]
 801c870:	9301      	str	r3, [sp, #4]
 801c872:	f000 f83f 	bl	801c8f4 <_vfiprintf_r>
 801c876:	b002      	add	sp, #8
 801c878:	f85d eb04 	ldr.w	lr, [sp], #4
 801c87c:	b003      	add	sp, #12
 801c87e:	4770      	bx	lr
 801c880:	240002ac 	.word	0x240002ac

0801c884 <abort>:
 801c884:	b508      	push	{r3, lr}
 801c886:	2006      	movs	r0, #6
 801c888:	f000 fa08 	bl	801cc9c <raise>
 801c88c:	2001      	movs	r0, #1
 801c88e:	f7e6 fa63 	bl	8002d58 <_exit>

0801c892 <_malloc_usable_size_r>:
 801c892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c896:	1f18      	subs	r0, r3, #4
 801c898:	2b00      	cmp	r3, #0
 801c89a:	bfbc      	itt	lt
 801c89c:	580b      	ldrlt	r3, [r1, r0]
 801c89e:	18c0      	addlt	r0, r0, r3
 801c8a0:	4770      	bx	lr

0801c8a2 <__sfputc_r>:
 801c8a2:	6893      	ldr	r3, [r2, #8]
 801c8a4:	3b01      	subs	r3, #1
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	b410      	push	{r4}
 801c8aa:	6093      	str	r3, [r2, #8]
 801c8ac:	da08      	bge.n	801c8c0 <__sfputc_r+0x1e>
 801c8ae:	6994      	ldr	r4, [r2, #24]
 801c8b0:	42a3      	cmp	r3, r4
 801c8b2:	db01      	blt.n	801c8b8 <__sfputc_r+0x16>
 801c8b4:	290a      	cmp	r1, #10
 801c8b6:	d103      	bne.n	801c8c0 <__sfputc_r+0x1e>
 801c8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8bc:	f000 b932 	b.w	801cb24 <__swbuf_r>
 801c8c0:	6813      	ldr	r3, [r2, #0]
 801c8c2:	1c58      	adds	r0, r3, #1
 801c8c4:	6010      	str	r0, [r2, #0]
 801c8c6:	7019      	strb	r1, [r3, #0]
 801c8c8:	4608      	mov	r0, r1
 801c8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8ce:	4770      	bx	lr

0801c8d0 <__sfputs_r>:
 801c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8d2:	4606      	mov	r6, r0
 801c8d4:	460f      	mov	r7, r1
 801c8d6:	4614      	mov	r4, r2
 801c8d8:	18d5      	adds	r5, r2, r3
 801c8da:	42ac      	cmp	r4, r5
 801c8dc:	d101      	bne.n	801c8e2 <__sfputs_r+0x12>
 801c8de:	2000      	movs	r0, #0
 801c8e0:	e007      	b.n	801c8f2 <__sfputs_r+0x22>
 801c8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8e6:	463a      	mov	r2, r7
 801c8e8:	4630      	mov	r0, r6
 801c8ea:	f7ff ffda 	bl	801c8a2 <__sfputc_r>
 801c8ee:	1c43      	adds	r3, r0, #1
 801c8f0:	d1f3      	bne.n	801c8da <__sfputs_r+0xa>
 801c8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c8f4 <_vfiprintf_r>:
 801c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8f8:	460d      	mov	r5, r1
 801c8fa:	b09d      	sub	sp, #116	@ 0x74
 801c8fc:	4614      	mov	r4, r2
 801c8fe:	4698      	mov	r8, r3
 801c900:	4606      	mov	r6, r0
 801c902:	b118      	cbz	r0, 801c90c <_vfiprintf_r+0x18>
 801c904:	6a03      	ldr	r3, [r0, #32]
 801c906:	b90b      	cbnz	r3, 801c90c <_vfiprintf_r+0x18>
 801c908:	f7fd fce6 	bl	801a2d8 <__sinit>
 801c90c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c90e:	07d9      	lsls	r1, r3, #31
 801c910:	d405      	bmi.n	801c91e <_vfiprintf_r+0x2a>
 801c912:	89ab      	ldrh	r3, [r5, #12]
 801c914:	059a      	lsls	r2, r3, #22
 801c916:	d402      	bmi.n	801c91e <_vfiprintf_r+0x2a>
 801c918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c91a:	f7fd fe12 	bl	801a542 <__retarget_lock_acquire_recursive>
 801c91e:	89ab      	ldrh	r3, [r5, #12]
 801c920:	071b      	lsls	r3, r3, #28
 801c922:	d501      	bpl.n	801c928 <_vfiprintf_r+0x34>
 801c924:	692b      	ldr	r3, [r5, #16]
 801c926:	b99b      	cbnz	r3, 801c950 <_vfiprintf_r+0x5c>
 801c928:	4629      	mov	r1, r5
 801c92a:	4630      	mov	r0, r6
 801c92c:	f000 f938 	bl	801cba0 <__swsetup_r>
 801c930:	b170      	cbz	r0, 801c950 <_vfiprintf_r+0x5c>
 801c932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c934:	07dc      	lsls	r4, r3, #31
 801c936:	d504      	bpl.n	801c942 <_vfiprintf_r+0x4e>
 801c938:	f04f 30ff 	mov.w	r0, #4294967295
 801c93c:	b01d      	add	sp, #116	@ 0x74
 801c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c942:	89ab      	ldrh	r3, [r5, #12]
 801c944:	0598      	lsls	r0, r3, #22
 801c946:	d4f7      	bmi.n	801c938 <_vfiprintf_r+0x44>
 801c948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c94a:	f7fd fdfb 	bl	801a544 <__retarget_lock_release_recursive>
 801c94e:	e7f3      	b.n	801c938 <_vfiprintf_r+0x44>
 801c950:	2300      	movs	r3, #0
 801c952:	9309      	str	r3, [sp, #36]	@ 0x24
 801c954:	2320      	movs	r3, #32
 801c956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c95a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c95e:	2330      	movs	r3, #48	@ 0x30
 801c960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cb10 <_vfiprintf_r+0x21c>
 801c964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c968:	f04f 0901 	mov.w	r9, #1
 801c96c:	4623      	mov	r3, r4
 801c96e:	469a      	mov	sl, r3
 801c970:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c974:	b10a      	cbz	r2, 801c97a <_vfiprintf_r+0x86>
 801c976:	2a25      	cmp	r2, #37	@ 0x25
 801c978:	d1f9      	bne.n	801c96e <_vfiprintf_r+0x7a>
 801c97a:	ebba 0b04 	subs.w	fp, sl, r4
 801c97e:	d00b      	beq.n	801c998 <_vfiprintf_r+0xa4>
 801c980:	465b      	mov	r3, fp
 801c982:	4622      	mov	r2, r4
 801c984:	4629      	mov	r1, r5
 801c986:	4630      	mov	r0, r6
 801c988:	f7ff ffa2 	bl	801c8d0 <__sfputs_r>
 801c98c:	3001      	adds	r0, #1
 801c98e:	f000 80a7 	beq.w	801cae0 <_vfiprintf_r+0x1ec>
 801c992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c994:	445a      	add	r2, fp
 801c996:	9209      	str	r2, [sp, #36]	@ 0x24
 801c998:	f89a 3000 	ldrb.w	r3, [sl]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	f000 809f 	beq.w	801cae0 <_vfiprintf_r+0x1ec>
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 801c9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c9ac:	f10a 0a01 	add.w	sl, sl, #1
 801c9b0:	9304      	str	r3, [sp, #16]
 801c9b2:	9307      	str	r3, [sp, #28]
 801c9b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c9b8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c9ba:	4654      	mov	r4, sl
 801c9bc:	2205      	movs	r2, #5
 801c9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9c2:	4853      	ldr	r0, [pc, #332]	@ (801cb10 <_vfiprintf_r+0x21c>)
 801c9c4:	f7e3 fcb4 	bl	8000330 <memchr>
 801c9c8:	9a04      	ldr	r2, [sp, #16]
 801c9ca:	b9d8      	cbnz	r0, 801ca04 <_vfiprintf_r+0x110>
 801c9cc:	06d1      	lsls	r1, r2, #27
 801c9ce:	bf44      	itt	mi
 801c9d0:	2320      	movmi	r3, #32
 801c9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9d6:	0713      	lsls	r3, r2, #28
 801c9d8:	bf44      	itt	mi
 801c9da:	232b      	movmi	r3, #43	@ 0x2b
 801c9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9e0:	f89a 3000 	ldrb.w	r3, [sl]
 801c9e4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c9e6:	d015      	beq.n	801ca14 <_vfiprintf_r+0x120>
 801c9e8:	9a07      	ldr	r2, [sp, #28]
 801c9ea:	4654      	mov	r4, sl
 801c9ec:	2000      	movs	r0, #0
 801c9ee:	f04f 0c0a 	mov.w	ip, #10
 801c9f2:	4621      	mov	r1, r4
 801c9f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c9f8:	3b30      	subs	r3, #48	@ 0x30
 801c9fa:	2b09      	cmp	r3, #9
 801c9fc:	d94b      	bls.n	801ca96 <_vfiprintf_r+0x1a2>
 801c9fe:	b1b0      	cbz	r0, 801ca2e <_vfiprintf_r+0x13a>
 801ca00:	9207      	str	r2, [sp, #28]
 801ca02:	e014      	b.n	801ca2e <_vfiprintf_r+0x13a>
 801ca04:	eba0 0308 	sub.w	r3, r0, r8
 801ca08:	fa09 f303 	lsl.w	r3, r9, r3
 801ca0c:	4313      	orrs	r3, r2
 801ca0e:	9304      	str	r3, [sp, #16]
 801ca10:	46a2      	mov	sl, r4
 801ca12:	e7d2      	b.n	801c9ba <_vfiprintf_r+0xc6>
 801ca14:	9b03      	ldr	r3, [sp, #12]
 801ca16:	1d19      	adds	r1, r3, #4
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	9103      	str	r1, [sp, #12]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	bfbb      	ittet	lt
 801ca20:	425b      	neglt	r3, r3
 801ca22:	f042 0202 	orrlt.w	r2, r2, #2
 801ca26:	9307      	strge	r3, [sp, #28]
 801ca28:	9307      	strlt	r3, [sp, #28]
 801ca2a:	bfb8      	it	lt
 801ca2c:	9204      	strlt	r2, [sp, #16]
 801ca2e:	7823      	ldrb	r3, [r4, #0]
 801ca30:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca32:	d10a      	bne.n	801ca4a <_vfiprintf_r+0x156>
 801ca34:	7863      	ldrb	r3, [r4, #1]
 801ca36:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca38:	d132      	bne.n	801caa0 <_vfiprintf_r+0x1ac>
 801ca3a:	9b03      	ldr	r3, [sp, #12]
 801ca3c:	1d1a      	adds	r2, r3, #4
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	9203      	str	r2, [sp, #12]
 801ca42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ca46:	3402      	adds	r4, #2
 801ca48:	9305      	str	r3, [sp, #20]
 801ca4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cb20 <_vfiprintf_r+0x22c>
 801ca4e:	7821      	ldrb	r1, [r4, #0]
 801ca50:	2203      	movs	r2, #3
 801ca52:	4650      	mov	r0, sl
 801ca54:	f7e3 fc6c 	bl	8000330 <memchr>
 801ca58:	b138      	cbz	r0, 801ca6a <_vfiprintf_r+0x176>
 801ca5a:	9b04      	ldr	r3, [sp, #16]
 801ca5c:	eba0 000a 	sub.w	r0, r0, sl
 801ca60:	2240      	movs	r2, #64	@ 0x40
 801ca62:	4082      	lsls	r2, r0
 801ca64:	4313      	orrs	r3, r2
 801ca66:	3401      	adds	r4, #1
 801ca68:	9304      	str	r3, [sp, #16]
 801ca6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca6e:	4829      	ldr	r0, [pc, #164]	@ (801cb14 <_vfiprintf_r+0x220>)
 801ca70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ca74:	2206      	movs	r2, #6
 801ca76:	f7e3 fc5b 	bl	8000330 <memchr>
 801ca7a:	2800      	cmp	r0, #0
 801ca7c:	d03f      	beq.n	801cafe <_vfiprintf_r+0x20a>
 801ca7e:	4b26      	ldr	r3, [pc, #152]	@ (801cb18 <_vfiprintf_r+0x224>)
 801ca80:	bb1b      	cbnz	r3, 801caca <_vfiprintf_r+0x1d6>
 801ca82:	9b03      	ldr	r3, [sp, #12]
 801ca84:	3307      	adds	r3, #7
 801ca86:	f023 0307 	bic.w	r3, r3, #7
 801ca8a:	3308      	adds	r3, #8
 801ca8c:	9303      	str	r3, [sp, #12]
 801ca8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca90:	443b      	add	r3, r7
 801ca92:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca94:	e76a      	b.n	801c96c <_vfiprintf_r+0x78>
 801ca96:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca9a:	460c      	mov	r4, r1
 801ca9c:	2001      	movs	r0, #1
 801ca9e:	e7a8      	b.n	801c9f2 <_vfiprintf_r+0xfe>
 801caa0:	2300      	movs	r3, #0
 801caa2:	3401      	adds	r4, #1
 801caa4:	9305      	str	r3, [sp, #20]
 801caa6:	4619      	mov	r1, r3
 801caa8:	f04f 0c0a 	mov.w	ip, #10
 801caac:	4620      	mov	r0, r4
 801caae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cab2:	3a30      	subs	r2, #48	@ 0x30
 801cab4:	2a09      	cmp	r2, #9
 801cab6:	d903      	bls.n	801cac0 <_vfiprintf_r+0x1cc>
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d0c6      	beq.n	801ca4a <_vfiprintf_r+0x156>
 801cabc:	9105      	str	r1, [sp, #20]
 801cabe:	e7c4      	b.n	801ca4a <_vfiprintf_r+0x156>
 801cac0:	fb0c 2101 	mla	r1, ip, r1, r2
 801cac4:	4604      	mov	r4, r0
 801cac6:	2301      	movs	r3, #1
 801cac8:	e7f0      	b.n	801caac <_vfiprintf_r+0x1b8>
 801caca:	ab03      	add	r3, sp, #12
 801cacc:	9300      	str	r3, [sp, #0]
 801cace:	462a      	mov	r2, r5
 801cad0:	4b12      	ldr	r3, [pc, #72]	@ (801cb1c <_vfiprintf_r+0x228>)
 801cad2:	a904      	add	r1, sp, #16
 801cad4:	4630      	mov	r0, r6
 801cad6:	f7fc ffcb 	bl	8019a70 <_printf_float>
 801cada:	4607      	mov	r7, r0
 801cadc:	1c78      	adds	r0, r7, #1
 801cade:	d1d6      	bne.n	801ca8e <_vfiprintf_r+0x19a>
 801cae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cae2:	07d9      	lsls	r1, r3, #31
 801cae4:	d405      	bmi.n	801caf2 <_vfiprintf_r+0x1fe>
 801cae6:	89ab      	ldrh	r3, [r5, #12]
 801cae8:	059a      	lsls	r2, r3, #22
 801caea:	d402      	bmi.n	801caf2 <_vfiprintf_r+0x1fe>
 801caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801caee:	f7fd fd29 	bl	801a544 <__retarget_lock_release_recursive>
 801caf2:	89ab      	ldrh	r3, [r5, #12]
 801caf4:	065b      	lsls	r3, r3, #25
 801caf6:	f53f af1f 	bmi.w	801c938 <_vfiprintf_r+0x44>
 801cafa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cafc:	e71e      	b.n	801c93c <_vfiprintf_r+0x48>
 801cafe:	ab03      	add	r3, sp, #12
 801cb00:	9300      	str	r3, [sp, #0]
 801cb02:	462a      	mov	r2, r5
 801cb04:	4b05      	ldr	r3, [pc, #20]	@ (801cb1c <_vfiprintf_r+0x228>)
 801cb06:	a904      	add	r1, sp, #16
 801cb08:	4630      	mov	r0, r6
 801cb0a:	f7fd fa39 	bl	8019f80 <_printf_i>
 801cb0e:	e7e4      	b.n	801cada <_vfiprintf_r+0x1e6>
 801cb10:	0801eae8 	.word	0x0801eae8
 801cb14:	0801eaf2 	.word	0x0801eaf2
 801cb18:	08019a71 	.word	0x08019a71
 801cb1c:	0801c8d1 	.word	0x0801c8d1
 801cb20:	0801eaee 	.word	0x0801eaee

0801cb24 <__swbuf_r>:
 801cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb26:	460e      	mov	r6, r1
 801cb28:	4614      	mov	r4, r2
 801cb2a:	4605      	mov	r5, r0
 801cb2c:	b118      	cbz	r0, 801cb36 <__swbuf_r+0x12>
 801cb2e:	6a03      	ldr	r3, [r0, #32]
 801cb30:	b90b      	cbnz	r3, 801cb36 <__swbuf_r+0x12>
 801cb32:	f7fd fbd1 	bl	801a2d8 <__sinit>
 801cb36:	69a3      	ldr	r3, [r4, #24]
 801cb38:	60a3      	str	r3, [r4, #8]
 801cb3a:	89a3      	ldrh	r3, [r4, #12]
 801cb3c:	071a      	lsls	r2, r3, #28
 801cb3e:	d501      	bpl.n	801cb44 <__swbuf_r+0x20>
 801cb40:	6923      	ldr	r3, [r4, #16]
 801cb42:	b943      	cbnz	r3, 801cb56 <__swbuf_r+0x32>
 801cb44:	4621      	mov	r1, r4
 801cb46:	4628      	mov	r0, r5
 801cb48:	f000 f82a 	bl	801cba0 <__swsetup_r>
 801cb4c:	b118      	cbz	r0, 801cb56 <__swbuf_r+0x32>
 801cb4e:	f04f 37ff 	mov.w	r7, #4294967295
 801cb52:	4638      	mov	r0, r7
 801cb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb56:	6823      	ldr	r3, [r4, #0]
 801cb58:	6922      	ldr	r2, [r4, #16]
 801cb5a:	1a98      	subs	r0, r3, r2
 801cb5c:	6963      	ldr	r3, [r4, #20]
 801cb5e:	b2f6      	uxtb	r6, r6
 801cb60:	4283      	cmp	r3, r0
 801cb62:	4637      	mov	r7, r6
 801cb64:	dc05      	bgt.n	801cb72 <__swbuf_r+0x4e>
 801cb66:	4621      	mov	r1, r4
 801cb68:	4628      	mov	r0, r5
 801cb6a:	f7ff fdc7 	bl	801c6fc <_fflush_r>
 801cb6e:	2800      	cmp	r0, #0
 801cb70:	d1ed      	bne.n	801cb4e <__swbuf_r+0x2a>
 801cb72:	68a3      	ldr	r3, [r4, #8]
 801cb74:	3b01      	subs	r3, #1
 801cb76:	60a3      	str	r3, [r4, #8]
 801cb78:	6823      	ldr	r3, [r4, #0]
 801cb7a:	1c5a      	adds	r2, r3, #1
 801cb7c:	6022      	str	r2, [r4, #0]
 801cb7e:	701e      	strb	r6, [r3, #0]
 801cb80:	6962      	ldr	r2, [r4, #20]
 801cb82:	1c43      	adds	r3, r0, #1
 801cb84:	429a      	cmp	r2, r3
 801cb86:	d004      	beq.n	801cb92 <__swbuf_r+0x6e>
 801cb88:	89a3      	ldrh	r3, [r4, #12]
 801cb8a:	07db      	lsls	r3, r3, #31
 801cb8c:	d5e1      	bpl.n	801cb52 <__swbuf_r+0x2e>
 801cb8e:	2e0a      	cmp	r6, #10
 801cb90:	d1df      	bne.n	801cb52 <__swbuf_r+0x2e>
 801cb92:	4621      	mov	r1, r4
 801cb94:	4628      	mov	r0, r5
 801cb96:	f7ff fdb1 	bl	801c6fc <_fflush_r>
 801cb9a:	2800      	cmp	r0, #0
 801cb9c:	d0d9      	beq.n	801cb52 <__swbuf_r+0x2e>
 801cb9e:	e7d6      	b.n	801cb4e <__swbuf_r+0x2a>

0801cba0 <__swsetup_r>:
 801cba0:	b538      	push	{r3, r4, r5, lr}
 801cba2:	4b29      	ldr	r3, [pc, #164]	@ (801cc48 <__swsetup_r+0xa8>)
 801cba4:	4605      	mov	r5, r0
 801cba6:	6818      	ldr	r0, [r3, #0]
 801cba8:	460c      	mov	r4, r1
 801cbaa:	b118      	cbz	r0, 801cbb4 <__swsetup_r+0x14>
 801cbac:	6a03      	ldr	r3, [r0, #32]
 801cbae:	b90b      	cbnz	r3, 801cbb4 <__swsetup_r+0x14>
 801cbb0:	f7fd fb92 	bl	801a2d8 <__sinit>
 801cbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbb8:	0719      	lsls	r1, r3, #28
 801cbba:	d422      	bmi.n	801cc02 <__swsetup_r+0x62>
 801cbbc:	06da      	lsls	r2, r3, #27
 801cbbe:	d407      	bmi.n	801cbd0 <__swsetup_r+0x30>
 801cbc0:	2209      	movs	r2, #9
 801cbc2:	602a      	str	r2, [r5, #0]
 801cbc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbc8:	81a3      	strh	r3, [r4, #12]
 801cbca:	f04f 30ff 	mov.w	r0, #4294967295
 801cbce:	e033      	b.n	801cc38 <__swsetup_r+0x98>
 801cbd0:	0758      	lsls	r0, r3, #29
 801cbd2:	d512      	bpl.n	801cbfa <__swsetup_r+0x5a>
 801cbd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cbd6:	b141      	cbz	r1, 801cbea <__swsetup_r+0x4a>
 801cbd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cbdc:	4299      	cmp	r1, r3
 801cbde:	d002      	beq.n	801cbe6 <__swsetup_r+0x46>
 801cbe0:	4628      	mov	r0, r5
 801cbe2:	f7fe faa7 	bl	801b134 <_free_r>
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	6363      	str	r3, [r4, #52]	@ 0x34
 801cbea:	89a3      	ldrh	r3, [r4, #12]
 801cbec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cbf0:	81a3      	strh	r3, [r4, #12]
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	6063      	str	r3, [r4, #4]
 801cbf6:	6923      	ldr	r3, [r4, #16]
 801cbf8:	6023      	str	r3, [r4, #0]
 801cbfa:	89a3      	ldrh	r3, [r4, #12]
 801cbfc:	f043 0308 	orr.w	r3, r3, #8
 801cc00:	81a3      	strh	r3, [r4, #12]
 801cc02:	6923      	ldr	r3, [r4, #16]
 801cc04:	b94b      	cbnz	r3, 801cc1a <__swsetup_r+0x7a>
 801cc06:	89a3      	ldrh	r3, [r4, #12]
 801cc08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cc0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cc10:	d003      	beq.n	801cc1a <__swsetup_r+0x7a>
 801cc12:	4621      	mov	r1, r4
 801cc14:	4628      	mov	r0, r5
 801cc16:	f000 f883 	bl	801cd20 <__smakebuf_r>
 801cc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc1e:	f013 0201 	ands.w	r2, r3, #1
 801cc22:	d00a      	beq.n	801cc3a <__swsetup_r+0x9a>
 801cc24:	2200      	movs	r2, #0
 801cc26:	60a2      	str	r2, [r4, #8]
 801cc28:	6962      	ldr	r2, [r4, #20]
 801cc2a:	4252      	negs	r2, r2
 801cc2c:	61a2      	str	r2, [r4, #24]
 801cc2e:	6922      	ldr	r2, [r4, #16]
 801cc30:	b942      	cbnz	r2, 801cc44 <__swsetup_r+0xa4>
 801cc32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cc36:	d1c5      	bne.n	801cbc4 <__swsetup_r+0x24>
 801cc38:	bd38      	pop	{r3, r4, r5, pc}
 801cc3a:	0799      	lsls	r1, r3, #30
 801cc3c:	bf58      	it	pl
 801cc3e:	6962      	ldrpl	r2, [r4, #20]
 801cc40:	60a2      	str	r2, [r4, #8]
 801cc42:	e7f4      	b.n	801cc2e <__swsetup_r+0x8e>
 801cc44:	2000      	movs	r0, #0
 801cc46:	e7f7      	b.n	801cc38 <__swsetup_r+0x98>
 801cc48:	240002ac 	.word	0x240002ac

0801cc4c <_raise_r>:
 801cc4c:	291f      	cmp	r1, #31
 801cc4e:	b538      	push	{r3, r4, r5, lr}
 801cc50:	4605      	mov	r5, r0
 801cc52:	460c      	mov	r4, r1
 801cc54:	d904      	bls.n	801cc60 <_raise_r+0x14>
 801cc56:	2316      	movs	r3, #22
 801cc58:	6003      	str	r3, [r0, #0]
 801cc5a:	f04f 30ff 	mov.w	r0, #4294967295
 801cc5e:	bd38      	pop	{r3, r4, r5, pc}
 801cc60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cc62:	b112      	cbz	r2, 801cc6a <_raise_r+0x1e>
 801cc64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc68:	b94b      	cbnz	r3, 801cc7e <_raise_r+0x32>
 801cc6a:	4628      	mov	r0, r5
 801cc6c:	f000 f830 	bl	801ccd0 <_getpid_r>
 801cc70:	4622      	mov	r2, r4
 801cc72:	4601      	mov	r1, r0
 801cc74:	4628      	mov	r0, r5
 801cc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc7a:	f000 b817 	b.w	801ccac <_kill_r>
 801cc7e:	2b01      	cmp	r3, #1
 801cc80:	d00a      	beq.n	801cc98 <_raise_r+0x4c>
 801cc82:	1c59      	adds	r1, r3, #1
 801cc84:	d103      	bne.n	801cc8e <_raise_r+0x42>
 801cc86:	2316      	movs	r3, #22
 801cc88:	6003      	str	r3, [r0, #0]
 801cc8a:	2001      	movs	r0, #1
 801cc8c:	e7e7      	b.n	801cc5e <_raise_r+0x12>
 801cc8e:	2100      	movs	r1, #0
 801cc90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cc94:	4620      	mov	r0, r4
 801cc96:	4798      	blx	r3
 801cc98:	2000      	movs	r0, #0
 801cc9a:	e7e0      	b.n	801cc5e <_raise_r+0x12>

0801cc9c <raise>:
 801cc9c:	4b02      	ldr	r3, [pc, #8]	@ (801cca8 <raise+0xc>)
 801cc9e:	4601      	mov	r1, r0
 801cca0:	6818      	ldr	r0, [r3, #0]
 801cca2:	f7ff bfd3 	b.w	801cc4c <_raise_r>
 801cca6:	bf00      	nop
 801cca8:	240002ac 	.word	0x240002ac

0801ccac <_kill_r>:
 801ccac:	b538      	push	{r3, r4, r5, lr}
 801ccae:	4d07      	ldr	r5, [pc, #28]	@ (801cccc <_kill_r+0x20>)
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	4608      	mov	r0, r1
 801ccb6:	4611      	mov	r1, r2
 801ccb8:	602b      	str	r3, [r5, #0]
 801ccba:	f7e6 f83d 	bl	8002d38 <_kill>
 801ccbe:	1c43      	adds	r3, r0, #1
 801ccc0:	d102      	bne.n	801ccc8 <_kill_r+0x1c>
 801ccc2:	682b      	ldr	r3, [r5, #0]
 801ccc4:	b103      	cbz	r3, 801ccc8 <_kill_r+0x1c>
 801ccc6:	6023      	str	r3, [r4, #0]
 801ccc8:	bd38      	pop	{r3, r4, r5, pc}
 801ccca:	bf00      	nop
 801cccc:	2401da00 	.word	0x2401da00

0801ccd0 <_getpid_r>:
 801ccd0:	f7e6 b82a 	b.w	8002d28 <_getpid>

0801ccd4 <__swhatbuf_r>:
 801ccd4:	b570      	push	{r4, r5, r6, lr}
 801ccd6:	460c      	mov	r4, r1
 801ccd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccdc:	2900      	cmp	r1, #0
 801ccde:	b096      	sub	sp, #88	@ 0x58
 801cce0:	4615      	mov	r5, r2
 801cce2:	461e      	mov	r6, r3
 801cce4:	da0d      	bge.n	801cd02 <__swhatbuf_r+0x2e>
 801cce6:	89a3      	ldrh	r3, [r4, #12]
 801cce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ccec:	f04f 0100 	mov.w	r1, #0
 801ccf0:	bf14      	ite	ne
 801ccf2:	2340      	movne	r3, #64	@ 0x40
 801ccf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ccf8:	2000      	movs	r0, #0
 801ccfa:	6031      	str	r1, [r6, #0]
 801ccfc:	602b      	str	r3, [r5, #0]
 801ccfe:	b016      	add	sp, #88	@ 0x58
 801cd00:	bd70      	pop	{r4, r5, r6, pc}
 801cd02:	466a      	mov	r2, sp
 801cd04:	f000 f848 	bl	801cd98 <_fstat_r>
 801cd08:	2800      	cmp	r0, #0
 801cd0a:	dbec      	blt.n	801cce6 <__swhatbuf_r+0x12>
 801cd0c:	9901      	ldr	r1, [sp, #4]
 801cd0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cd12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cd16:	4259      	negs	r1, r3
 801cd18:	4159      	adcs	r1, r3
 801cd1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cd1e:	e7eb      	b.n	801ccf8 <__swhatbuf_r+0x24>

0801cd20 <__smakebuf_r>:
 801cd20:	898b      	ldrh	r3, [r1, #12]
 801cd22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cd24:	079d      	lsls	r5, r3, #30
 801cd26:	4606      	mov	r6, r0
 801cd28:	460c      	mov	r4, r1
 801cd2a:	d507      	bpl.n	801cd3c <__smakebuf_r+0x1c>
 801cd2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cd30:	6023      	str	r3, [r4, #0]
 801cd32:	6123      	str	r3, [r4, #16]
 801cd34:	2301      	movs	r3, #1
 801cd36:	6163      	str	r3, [r4, #20]
 801cd38:	b003      	add	sp, #12
 801cd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd3c:	ab01      	add	r3, sp, #4
 801cd3e:	466a      	mov	r2, sp
 801cd40:	f7ff ffc8 	bl	801ccd4 <__swhatbuf_r>
 801cd44:	9f00      	ldr	r7, [sp, #0]
 801cd46:	4605      	mov	r5, r0
 801cd48:	4639      	mov	r1, r7
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	f7fe fda0 	bl	801b890 <_malloc_r>
 801cd50:	b948      	cbnz	r0, 801cd66 <__smakebuf_r+0x46>
 801cd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd56:	059a      	lsls	r2, r3, #22
 801cd58:	d4ee      	bmi.n	801cd38 <__smakebuf_r+0x18>
 801cd5a:	f023 0303 	bic.w	r3, r3, #3
 801cd5e:	f043 0302 	orr.w	r3, r3, #2
 801cd62:	81a3      	strh	r3, [r4, #12]
 801cd64:	e7e2      	b.n	801cd2c <__smakebuf_r+0xc>
 801cd66:	89a3      	ldrh	r3, [r4, #12]
 801cd68:	6020      	str	r0, [r4, #0]
 801cd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cd6e:	81a3      	strh	r3, [r4, #12]
 801cd70:	9b01      	ldr	r3, [sp, #4]
 801cd72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cd76:	b15b      	cbz	r3, 801cd90 <__smakebuf_r+0x70>
 801cd78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd7c:	4630      	mov	r0, r6
 801cd7e:	f000 f81d 	bl	801cdbc <_isatty_r>
 801cd82:	b128      	cbz	r0, 801cd90 <__smakebuf_r+0x70>
 801cd84:	89a3      	ldrh	r3, [r4, #12]
 801cd86:	f023 0303 	bic.w	r3, r3, #3
 801cd8a:	f043 0301 	orr.w	r3, r3, #1
 801cd8e:	81a3      	strh	r3, [r4, #12]
 801cd90:	89a3      	ldrh	r3, [r4, #12]
 801cd92:	431d      	orrs	r5, r3
 801cd94:	81a5      	strh	r5, [r4, #12]
 801cd96:	e7cf      	b.n	801cd38 <__smakebuf_r+0x18>

0801cd98 <_fstat_r>:
 801cd98:	b538      	push	{r3, r4, r5, lr}
 801cd9a:	4d07      	ldr	r5, [pc, #28]	@ (801cdb8 <_fstat_r+0x20>)
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	4604      	mov	r4, r0
 801cda0:	4608      	mov	r0, r1
 801cda2:	4611      	mov	r1, r2
 801cda4:	602b      	str	r3, [r5, #0]
 801cda6:	f7e6 f827 	bl	8002df8 <_fstat>
 801cdaa:	1c43      	adds	r3, r0, #1
 801cdac:	d102      	bne.n	801cdb4 <_fstat_r+0x1c>
 801cdae:	682b      	ldr	r3, [r5, #0]
 801cdb0:	b103      	cbz	r3, 801cdb4 <_fstat_r+0x1c>
 801cdb2:	6023      	str	r3, [r4, #0]
 801cdb4:	bd38      	pop	{r3, r4, r5, pc}
 801cdb6:	bf00      	nop
 801cdb8:	2401da00 	.word	0x2401da00

0801cdbc <_isatty_r>:
 801cdbc:	b538      	push	{r3, r4, r5, lr}
 801cdbe:	4d06      	ldr	r5, [pc, #24]	@ (801cdd8 <_isatty_r+0x1c>)
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	4604      	mov	r4, r0
 801cdc4:	4608      	mov	r0, r1
 801cdc6:	602b      	str	r3, [r5, #0]
 801cdc8:	f7e6 f826 	bl	8002e18 <_isatty>
 801cdcc:	1c43      	adds	r3, r0, #1
 801cdce:	d102      	bne.n	801cdd6 <_isatty_r+0x1a>
 801cdd0:	682b      	ldr	r3, [r5, #0]
 801cdd2:	b103      	cbz	r3, 801cdd6 <_isatty_r+0x1a>
 801cdd4:	6023      	str	r3, [r4, #0]
 801cdd6:	bd38      	pop	{r3, r4, r5, pc}
 801cdd8:	2401da00 	.word	0x2401da00
 801cddc:	00000000 	.word	0x00000000

0801cde0 <sin>:
 801cde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cde2:	eeb0 7b40 	vmov.f64	d7, d0
 801cde6:	ee17 3a90 	vmov	r3, s15
 801cdea:	4a21      	ldr	r2, [pc, #132]	@ (801ce70 <sin+0x90>)
 801cdec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	d807      	bhi.n	801ce04 <sin+0x24>
 801cdf4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801ce68 <sin+0x88>
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	b005      	add	sp, #20
 801cdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce00:	f000 b986 	b.w	801d110 <__kernel_sin>
 801ce04:	4a1b      	ldr	r2, [pc, #108]	@ (801ce74 <sin+0x94>)
 801ce06:	4293      	cmp	r3, r2
 801ce08:	d904      	bls.n	801ce14 <sin+0x34>
 801ce0a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801ce0e:	b005      	add	sp, #20
 801ce10:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce14:	4668      	mov	r0, sp
 801ce16:	f000 f9d3 	bl	801d1c0 <__ieee754_rem_pio2>
 801ce1a:	f000 0003 	and.w	r0, r0, #3
 801ce1e:	2801      	cmp	r0, #1
 801ce20:	d00a      	beq.n	801ce38 <sin+0x58>
 801ce22:	2802      	cmp	r0, #2
 801ce24:	d00f      	beq.n	801ce46 <sin+0x66>
 801ce26:	b9c0      	cbnz	r0, 801ce5a <sin+0x7a>
 801ce28:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ce2c:	ed9d 0b00 	vldr	d0, [sp]
 801ce30:	2001      	movs	r0, #1
 801ce32:	f000 f96d 	bl	801d110 <__kernel_sin>
 801ce36:	e7ea      	b.n	801ce0e <sin+0x2e>
 801ce38:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ce3c:	ed9d 0b00 	vldr	d0, [sp]
 801ce40:	f000 f8fe 	bl	801d040 <__kernel_cos>
 801ce44:	e7e3      	b.n	801ce0e <sin+0x2e>
 801ce46:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ce4a:	ed9d 0b00 	vldr	d0, [sp]
 801ce4e:	2001      	movs	r0, #1
 801ce50:	f000 f95e 	bl	801d110 <__kernel_sin>
 801ce54:	eeb1 0b40 	vneg.f64	d0, d0
 801ce58:	e7d9      	b.n	801ce0e <sin+0x2e>
 801ce5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ce5e:	ed9d 0b00 	vldr	d0, [sp]
 801ce62:	f000 f8ed 	bl	801d040 <__kernel_cos>
 801ce66:	e7f5      	b.n	801ce54 <sin+0x74>
	...
 801ce70:	3fe921fb 	.word	0x3fe921fb
 801ce74:	7fefffff 	.word	0x7fefffff

0801ce78 <sinf_poly>:
 801ce78:	07cb      	lsls	r3, r1, #31
 801ce7a:	d412      	bmi.n	801cea2 <sinf_poly+0x2a>
 801ce7c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801ce80:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801ce84:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801ce88:	eea6 7b01 	vfma.f64	d7, d6, d1
 801ce8c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801ce90:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ce94:	eea6 0b05 	vfma.f64	d0, d6, d5
 801ce98:	eea7 0b01 	vfma.f64	d0, d7, d1
 801ce9c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cea0:	4770      	bx	lr
 801cea2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801cea6:	ee21 5b01 	vmul.f64	d5, d1, d1
 801ceaa:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801ceae:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801ceb2:	eea1 7b06 	vfma.f64	d7, d1, d6
 801ceb6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801ceba:	eea1 0b06 	vfma.f64	d0, d1, d6
 801cebe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801cec2:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cec6:	eea5 0b06 	vfma.f64	d0, d5, d6
 801ceca:	e7e5      	b.n	801ce98 <sinf_poly+0x20>
 801cecc:	0000      	movs	r0, r0
	...

0801ced0 <sinf>:
 801ced0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ced2:	ee10 4a10 	vmov	r4, s0
 801ced6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ceda:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801cede:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cee2:	eef0 7a40 	vmov.f32	s15, s0
 801cee6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801ceea:	d218      	bcs.n	801cf1e <sinf+0x4e>
 801ceec:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cef0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801cef4:	d20a      	bcs.n	801cf0c <sinf+0x3c>
 801cef6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801cefa:	d103      	bne.n	801cf04 <sinf+0x34>
 801cefc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801cf00:	ed8d 1a01 	vstr	s2, [sp, #4]
 801cf04:	eeb0 0a67 	vmov.f32	s0, s15
 801cf08:	b003      	add	sp, #12
 801cf0a:	bd30      	pop	{r4, r5, pc}
 801cf0c:	483a      	ldr	r0, [pc, #232]	@ (801cff8 <sinf+0x128>)
 801cf0e:	eeb0 0b46 	vmov.f64	d0, d6
 801cf12:	2100      	movs	r1, #0
 801cf14:	b003      	add	sp, #12
 801cf16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cf1a:	f7ff bfad 	b.w	801ce78 <sinf_poly>
 801cf1e:	f240 422e 	movw	r2, #1070	@ 0x42e
 801cf22:	4293      	cmp	r3, r2
 801cf24:	d824      	bhi.n	801cf70 <sinf+0xa0>
 801cf26:	4b34      	ldr	r3, [pc, #208]	@ (801cff8 <sinf+0x128>)
 801cf28:	ed93 7b08 	vldr	d7, [r3, #32]
 801cf2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cf30:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cf34:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cf38:	ee17 1a90 	vmov	r1, s15
 801cf3c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801cf40:	1609      	asrs	r1, r1, #24
 801cf42:	ee07 1a90 	vmov	s15, r1
 801cf46:	f001 0203 	and.w	r2, r1, #3
 801cf4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cf4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cf52:	ed92 0b00 	vldr	d0, [r2]
 801cf56:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801cf5a:	f011 0f02 	tst.w	r1, #2
 801cf5e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801cf62:	bf08      	it	eq
 801cf64:	4618      	moveq	r0, r3
 801cf66:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cf6a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cf6e:	e7d1      	b.n	801cf14 <sinf+0x44>
 801cf70:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801cf74:	d237      	bcs.n	801cfe6 <sinf+0x116>
 801cf76:	4921      	ldr	r1, [pc, #132]	@ (801cffc <sinf+0x12c>)
 801cf78:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801cf7c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801cf80:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801cf84:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801cf88:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801cf8c:	6a10      	ldr	r0, [r2, #32]
 801cf8e:	6912      	ldr	r2, [r2, #16]
 801cf90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801cf94:	40ab      	lsls	r3, r5
 801cf96:	fba0 5003 	umull	r5, r0, r0, r3
 801cf9a:	4359      	muls	r1, r3
 801cf9c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801cfa0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801cfa4:	0f9d      	lsrs	r5, r3, #30
 801cfa6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801cfaa:	1ac9      	subs	r1, r1, r3
 801cfac:	f7e3 fba6 	bl	80006fc <__aeabi_l2d>
 801cfb0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801cfb4:	4b10      	ldr	r3, [pc, #64]	@ (801cff8 <sinf+0x128>)
 801cfb6:	f004 0203 	and.w	r2, r4, #3
 801cfba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cfbe:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801cff0 <sinf+0x120>
 801cfc2:	ed92 0b00 	vldr	d0, [r2]
 801cfc6:	ec41 0b17 	vmov	d7, r0, r1
 801cfca:	f014 0f02 	tst.w	r4, #2
 801cfce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cfd2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cfd6:	4629      	mov	r1, r5
 801cfd8:	bf08      	it	eq
 801cfda:	4618      	moveq	r0, r3
 801cfdc:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cfe0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cfe4:	e796      	b.n	801cf14 <sinf+0x44>
 801cfe6:	b003      	add	sp, #12
 801cfe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cfec:	f000 b816 	b.w	801d01c <__math_invalidf>
 801cff0:	54442d18 	.word	0x54442d18
 801cff4:	3c1921fb 	.word	0x3c1921fb
 801cff8:	0801eb98 	.word	0x0801eb98
 801cffc:	0801eb38 	.word	0x0801eb38

0801d000 <with_errnof>:
 801d000:	b510      	push	{r4, lr}
 801d002:	ed2d 8b02 	vpush	{d8}
 801d006:	eeb0 8a40 	vmov.f32	s16, s0
 801d00a:	4604      	mov	r4, r0
 801d00c:	f7fd fa6e 	bl	801a4ec <__errno>
 801d010:	eeb0 0a48 	vmov.f32	s0, s16
 801d014:	ecbd 8b02 	vpop	{d8}
 801d018:	6004      	str	r4, [r0, #0]
 801d01a:	bd10      	pop	{r4, pc}

0801d01c <__math_invalidf>:
 801d01c:	eef0 7a40 	vmov.f32	s15, s0
 801d020:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d024:	eef4 7a67 	vcmp.f32	s15, s15
 801d028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d02c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d030:	d602      	bvs.n	801d038 <__math_invalidf+0x1c>
 801d032:	2021      	movs	r0, #33	@ 0x21
 801d034:	f7ff bfe4 	b.w	801d000 <with_errnof>
 801d038:	4770      	bx	lr
 801d03a:	0000      	movs	r0, r0
 801d03c:	0000      	movs	r0, r0
	...

0801d040 <__kernel_cos>:
 801d040:	eeb0 5b40 	vmov.f64	d5, d0
 801d044:	ee15 1a90 	vmov	r1, s11
 801d048:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d04c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d050:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801d054:	d204      	bcs.n	801d060 <__kernel_cos+0x20>
 801d056:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801d05a:	ee17 3a90 	vmov	r3, s15
 801d05e:	b343      	cbz	r3, 801d0b2 <__kernel_cos+0x72>
 801d060:	ee25 6b05 	vmul.f64	d6, d5, d5
 801d064:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801d068:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801d0d8 <__kernel_cos+0x98>
 801d06c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d0e0 <__kernel_cos+0xa0>
 801d070:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d074:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d0e8 <__kernel_cos+0xa8>
 801d078:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d07c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d0f0 <__kernel_cos+0xb0>
 801d080:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d084:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d0f8 <__kernel_cos+0xb8>
 801d088:	4b1f      	ldr	r3, [pc, #124]	@ (801d108 <__kernel_cos+0xc8>)
 801d08a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d08e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d100 <__kernel_cos+0xc0>
 801d092:	4299      	cmp	r1, r3
 801d094:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d098:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d09c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801d0a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d0a4:	eea6 1b04 	vfma.f64	d1, d6, d4
 801d0a8:	d804      	bhi.n	801d0b4 <__kernel_cos+0x74>
 801d0aa:	ee37 7b41 	vsub.f64	d7, d7, d1
 801d0ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d0b2:	4770      	bx	lr
 801d0b4:	4b15      	ldr	r3, [pc, #84]	@ (801d10c <__kernel_cos+0xcc>)
 801d0b6:	4299      	cmp	r1, r3
 801d0b8:	d809      	bhi.n	801d0ce <__kernel_cos+0x8e>
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801d0c0:	ec43 2b16 	vmov	d6, r2, r3
 801d0c4:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d0c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d0cc:	e7ed      	b.n	801d0aa <__kernel_cos+0x6a>
 801d0ce:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801d0d2:	e7f7      	b.n	801d0c4 <__kernel_cos+0x84>
 801d0d4:	f3af 8000 	nop.w
 801d0d8:	be8838d4 	.word	0xbe8838d4
 801d0dc:	bda8fae9 	.word	0xbda8fae9
 801d0e0:	bdb4b1c4 	.word	0xbdb4b1c4
 801d0e4:	3e21ee9e 	.word	0x3e21ee9e
 801d0e8:	809c52ad 	.word	0x809c52ad
 801d0ec:	be927e4f 	.word	0xbe927e4f
 801d0f0:	19cb1590 	.word	0x19cb1590
 801d0f4:	3efa01a0 	.word	0x3efa01a0
 801d0f8:	16c15177 	.word	0x16c15177
 801d0fc:	bf56c16c 	.word	0xbf56c16c
 801d100:	5555554c 	.word	0x5555554c
 801d104:	3fa55555 	.word	0x3fa55555
 801d108:	3fd33332 	.word	0x3fd33332
 801d10c:	3fe90000 	.word	0x3fe90000

0801d110 <__kernel_sin>:
 801d110:	ee10 3a90 	vmov	r3, s1
 801d114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d118:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801d11c:	d204      	bcs.n	801d128 <__kernel_sin+0x18>
 801d11e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801d122:	ee17 3a90 	vmov	r3, s15
 801d126:	b35b      	cbz	r3, 801d180 <__kernel_sin+0x70>
 801d128:	ee20 6b00 	vmul.f64	d6, d0, d0
 801d12c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801d130:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801d188 <__kernel_sin+0x78>
 801d134:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d190 <__kernel_sin+0x80>
 801d138:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d13c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d198 <__kernel_sin+0x88>
 801d140:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d144:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d1a0 <__kernel_sin+0x90>
 801d148:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d14c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d1a8 <__kernel_sin+0x98>
 801d150:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d154:	b930      	cbnz	r0, 801d164 <__kernel_sin+0x54>
 801d156:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d1b0 <__kernel_sin+0xa0>
 801d15a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d15e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d162:	4770      	bx	lr
 801d164:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801d168:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801d16c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801d170:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801d174:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d1b8 <__kernel_sin+0xa8>
 801d178:	eea5 1b07 	vfma.f64	d1, d5, d7
 801d17c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d180:	4770      	bx	lr
 801d182:	bf00      	nop
 801d184:	f3af 8000 	nop.w
 801d188:	5acfd57c 	.word	0x5acfd57c
 801d18c:	3de5d93a 	.word	0x3de5d93a
 801d190:	8a2b9ceb 	.word	0x8a2b9ceb
 801d194:	be5ae5e6 	.word	0xbe5ae5e6
 801d198:	57b1fe7d 	.word	0x57b1fe7d
 801d19c:	3ec71de3 	.word	0x3ec71de3
 801d1a0:	19c161d5 	.word	0x19c161d5
 801d1a4:	bf2a01a0 	.word	0xbf2a01a0
 801d1a8:	1110f8a6 	.word	0x1110f8a6
 801d1ac:	3f811111 	.word	0x3f811111
 801d1b0:	55555549 	.word	0x55555549
 801d1b4:	bfc55555 	.word	0xbfc55555
 801d1b8:	55555549 	.word	0x55555549
 801d1bc:	3fc55555 	.word	0x3fc55555

0801d1c0 <__ieee754_rem_pio2>:
 801d1c0:	b570      	push	{r4, r5, r6, lr}
 801d1c2:	eeb0 7b40 	vmov.f64	d7, d0
 801d1c6:	ee17 5a90 	vmov	r5, s15
 801d1ca:	4b99      	ldr	r3, [pc, #612]	@ (801d430 <__ieee754_rem_pio2+0x270>)
 801d1cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d1d0:	429e      	cmp	r6, r3
 801d1d2:	b088      	sub	sp, #32
 801d1d4:	4604      	mov	r4, r0
 801d1d6:	d807      	bhi.n	801d1e8 <__ieee754_rem_pio2+0x28>
 801d1d8:	2200      	movs	r2, #0
 801d1da:	2300      	movs	r3, #0
 801d1dc:	ed84 0b00 	vstr	d0, [r4]
 801d1e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d1e4:	2000      	movs	r0, #0
 801d1e6:	e01b      	b.n	801d220 <__ieee754_rem_pio2+0x60>
 801d1e8:	4b92      	ldr	r3, [pc, #584]	@ (801d434 <__ieee754_rem_pio2+0x274>)
 801d1ea:	429e      	cmp	r6, r3
 801d1ec:	d83b      	bhi.n	801d266 <__ieee754_rem_pio2+0xa6>
 801d1ee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801d1f2:	2d00      	cmp	r5, #0
 801d1f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d3f0 <__ieee754_rem_pio2+0x230>
 801d1f8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801d1fc:	dd19      	ble.n	801d232 <__ieee754_rem_pio2+0x72>
 801d1fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d202:	429e      	cmp	r6, r3
 801d204:	d00e      	beq.n	801d224 <__ieee754_rem_pio2+0x64>
 801d206:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d3f8 <__ieee754_rem_pio2+0x238>
 801d20a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801d20e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d212:	ed84 6b00 	vstr	d6, [r4]
 801d216:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d21a:	ed84 7b02 	vstr	d7, [r4, #8]
 801d21e:	2001      	movs	r0, #1
 801d220:	b008      	add	sp, #32
 801d222:	bd70      	pop	{r4, r5, r6, pc}
 801d224:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d400 <__ieee754_rem_pio2+0x240>
 801d228:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d408 <__ieee754_rem_pio2+0x248>
 801d22c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d230:	e7eb      	b.n	801d20a <__ieee754_rem_pio2+0x4a>
 801d232:	429e      	cmp	r6, r3
 801d234:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d238:	d00e      	beq.n	801d258 <__ieee754_rem_pio2+0x98>
 801d23a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d3f8 <__ieee754_rem_pio2+0x238>
 801d23e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d242:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d246:	ed84 6b00 	vstr	d6, [r4]
 801d24a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d24e:	f04f 30ff 	mov.w	r0, #4294967295
 801d252:	ed84 7b02 	vstr	d7, [r4, #8]
 801d256:	e7e3      	b.n	801d220 <__ieee754_rem_pio2+0x60>
 801d258:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d400 <__ieee754_rem_pio2+0x240>
 801d25c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d408 <__ieee754_rem_pio2+0x248>
 801d260:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d264:	e7eb      	b.n	801d23e <__ieee754_rem_pio2+0x7e>
 801d266:	4b74      	ldr	r3, [pc, #464]	@ (801d438 <__ieee754_rem_pio2+0x278>)
 801d268:	429e      	cmp	r6, r3
 801d26a:	d870      	bhi.n	801d34e <__ieee754_rem_pio2+0x18e>
 801d26c:	f000 f8ec 	bl	801d448 <fabs>
 801d270:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d274:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d410 <__ieee754_rem_pio2+0x250>
 801d278:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d27c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d280:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d284:	ee17 0a90 	vmov	r0, s15
 801d288:	eeb1 4b45 	vneg.f64	d4, d5
 801d28c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d3f0 <__ieee754_rem_pio2+0x230>
 801d290:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d294:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d3f8 <__ieee754_rem_pio2+0x238>
 801d298:	281f      	cmp	r0, #31
 801d29a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d29e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d2a2:	dc05      	bgt.n	801d2b0 <__ieee754_rem_pio2+0xf0>
 801d2a4:	4b65      	ldr	r3, [pc, #404]	@ (801d43c <__ieee754_rem_pio2+0x27c>)
 801d2a6:	1e42      	subs	r2, r0, #1
 801d2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d2ac:	42b3      	cmp	r3, r6
 801d2ae:	d109      	bne.n	801d2c4 <__ieee754_rem_pio2+0x104>
 801d2b0:	ee16 3a90 	vmov	r3, s13
 801d2b4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d2b8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d2bc:	2b10      	cmp	r3, #16
 801d2be:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d2c2:	dc02      	bgt.n	801d2ca <__ieee754_rem_pio2+0x10a>
 801d2c4:	ed84 6b00 	vstr	d6, [r4]
 801d2c8:	e01a      	b.n	801d300 <__ieee754_rem_pio2+0x140>
 801d2ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d400 <__ieee754_rem_pio2+0x240>
 801d2ce:	eeb0 6b40 	vmov.f64	d6, d0
 801d2d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d2d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d2da:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d2de:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d408 <__ieee754_rem_pio2+0x248>
 801d2e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d2e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d2ea:	ee13 3a90 	vmov	r3, s7
 801d2ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d2f2:	1ad3      	subs	r3, r2, r3
 801d2f4:	2b31      	cmp	r3, #49	@ 0x31
 801d2f6:	dc17      	bgt.n	801d328 <__ieee754_rem_pio2+0x168>
 801d2f8:	eeb0 0b46 	vmov.f64	d0, d6
 801d2fc:	ed84 3b00 	vstr	d3, [r4]
 801d300:	ed94 6b00 	vldr	d6, [r4]
 801d304:	2d00      	cmp	r5, #0
 801d306:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d30a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d30e:	ed84 0b02 	vstr	d0, [r4, #8]
 801d312:	da85      	bge.n	801d220 <__ieee754_rem_pio2+0x60>
 801d314:	eeb1 6b46 	vneg.f64	d6, d6
 801d318:	eeb1 0b40 	vneg.f64	d0, d0
 801d31c:	ed84 6b00 	vstr	d6, [r4]
 801d320:	ed84 0b02 	vstr	d0, [r4, #8]
 801d324:	4240      	negs	r0, r0
 801d326:	e77b      	b.n	801d220 <__ieee754_rem_pio2+0x60>
 801d328:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d418 <__ieee754_rem_pio2+0x258>
 801d32c:	eeb0 0b46 	vmov.f64	d0, d6
 801d330:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d334:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d338:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d33c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d420 <__ieee754_rem_pio2+0x260>
 801d340:	eeb0 7b46 	vmov.f64	d7, d6
 801d344:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d348:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d34c:	e7ba      	b.n	801d2c4 <__ieee754_rem_pio2+0x104>
 801d34e:	4b3c      	ldr	r3, [pc, #240]	@ (801d440 <__ieee754_rem_pio2+0x280>)
 801d350:	429e      	cmp	r6, r3
 801d352:	d906      	bls.n	801d362 <__ieee754_rem_pio2+0x1a2>
 801d354:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d358:	ed80 7b02 	vstr	d7, [r0, #8]
 801d35c:	ed80 7b00 	vstr	d7, [r0]
 801d360:	e740      	b.n	801d1e4 <__ieee754_rem_pio2+0x24>
 801d362:	ee10 3a10 	vmov	r3, s0
 801d366:	1532      	asrs	r2, r6, #20
 801d368:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d36c:	4618      	mov	r0, r3
 801d36e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d372:	ec41 0b17 	vmov	d7, r0, r1
 801d376:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d37a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d428 <__ieee754_rem_pio2+0x268>
 801d37e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d382:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d386:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d38a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d38e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d392:	a808      	add	r0, sp, #32
 801d394:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d398:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d39c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d3a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d3a8:	2103      	movs	r1, #3
 801d3aa:	ed30 7b02 	vldmdb	r0!, {d7}
 801d3ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3b6:	460b      	mov	r3, r1
 801d3b8:	f101 31ff 	add.w	r1, r1, #4294967295
 801d3bc:	d0f5      	beq.n	801d3aa <__ieee754_rem_pio2+0x1ea>
 801d3be:	4921      	ldr	r1, [pc, #132]	@ (801d444 <__ieee754_rem_pio2+0x284>)
 801d3c0:	9101      	str	r1, [sp, #4]
 801d3c2:	2102      	movs	r1, #2
 801d3c4:	9100      	str	r1, [sp, #0]
 801d3c6:	a802      	add	r0, sp, #8
 801d3c8:	4621      	mov	r1, r4
 801d3ca:	f000 f845 	bl	801d458 <__kernel_rem_pio2>
 801d3ce:	2d00      	cmp	r5, #0
 801d3d0:	f6bf af26 	bge.w	801d220 <__ieee754_rem_pio2+0x60>
 801d3d4:	ed94 7b00 	vldr	d7, [r4]
 801d3d8:	eeb1 7b47 	vneg.f64	d7, d7
 801d3dc:	ed84 7b00 	vstr	d7, [r4]
 801d3e0:	ed94 7b02 	vldr	d7, [r4, #8]
 801d3e4:	eeb1 7b47 	vneg.f64	d7, d7
 801d3e8:	ed84 7b02 	vstr	d7, [r4, #8]
 801d3ec:	e79a      	b.n	801d324 <__ieee754_rem_pio2+0x164>
 801d3ee:	bf00      	nop
 801d3f0:	54400000 	.word	0x54400000
 801d3f4:	3ff921fb 	.word	0x3ff921fb
 801d3f8:	1a626331 	.word	0x1a626331
 801d3fc:	3dd0b461 	.word	0x3dd0b461
 801d400:	1a600000 	.word	0x1a600000
 801d404:	3dd0b461 	.word	0x3dd0b461
 801d408:	2e037073 	.word	0x2e037073
 801d40c:	3ba3198a 	.word	0x3ba3198a
 801d410:	6dc9c883 	.word	0x6dc9c883
 801d414:	3fe45f30 	.word	0x3fe45f30
 801d418:	2e000000 	.word	0x2e000000
 801d41c:	3ba3198a 	.word	0x3ba3198a
 801d420:	252049c1 	.word	0x252049c1
 801d424:	397b839a 	.word	0x397b839a
 801d428:	00000000 	.word	0x00000000
 801d42c:	41700000 	.word	0x41700000
 801d430:	3fe921fb 	.word	0x3fe921fb
 801d434:	4002d97b 	.word	0x4002d97b
 801d438:	413921fb 	.word	0x413921fb
 801d43c:	0801ec78 	.word	0x0801ec78
 801d440:	7fefffff 	.word	0x7fefffff
 801d444:	0801ecf8 	.word	0x0801ecf8

0801d448 <fabs>:
 801d448:	ec51 0b10 	vmov	r0, r1, d0
 801d44c:	4602      	mov	r2, r0
 801d44e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d452:	ec43 2b10 	vmov	d0, r2, r3
 801d456:	4770      	bx	lr

0801d458 <__kernel_rem_pio2>:
 801d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d45c:	ed2d 8b06 	vpush	{d8-d10}
 801d460:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d464:	469b      	mov	fp, r3
 801d466:	9001      	str	r0, [sp, #4]
 801d468:	4bbb      	ldr	r3, [pc, #748]	@ (801d758 <__kernel_rem_pio2+0x300>)
 801d46a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801d46c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801d470:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801d474:	f112 0f14 	cmn.w	r2, #20
 801d478:	bfa8      	it	ge
 801d47a:	1ed3      	subge	r3, r2, #3
 801d47c:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d480:	bfb8      	it	lt
 801d482:	2300      	movlt	r3, #0
 801d484:	f06f 0517 	mvn.w	r5, #23
 801d488:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d740 <__kernel_rem_pio2+0x2e8>
 801d48c:	bfa4      	itt	ge
 801d48e:	2018      	movge	r0, #24
 801d490:	fb93 f3f0 	sdivge	r3, r3, r0
 801d494:	fb03 5505 	mla	r5, r3, r5, r5
 801d498:	eba3 040a 	sub.w	r4, r3, sl
 801d49c:	4415      	add	r5, r2
 801d49e:	460f      	mov	r7, r1
 801d4a0:	eb09 060a 	add.w	r6, r9, sl
 801d4a4:	a81a      	add	r0, sp, #104	@ 0x68
 801d4a6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801d4aa:	2200      	movs	r2, #0
 801d4ac:	42b2      	cmp	r2, r6
 801d4ae:	dd0e      	ble.n	801d4ce <__kernel_rem_pio2+0x76>
 801d4b0:	aa1a      	add	r2, sp, #104	@ 0x68
 801d4b2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801d4b6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801d4ba:	2600      	movs	r6, #0
 801d4bc:	454e      	cmp	r6, r9
 801d4be:	dc25      	bgt.n	801d50c <__kernel_rem_pio2+0xb4>
 801d4c0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d740 <__kernel_rem_pio2+0x2e8>
 801d4c4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d4c8:	4614      	mov	r4, r2
 801d4ca:	2000      	movs	r0, #0
 801d4cc:	e015      	b.n	801d4fa <__kernel_rem_pio2+0xa2>
 801d4ce:	42d4      	cmn	r4, r2
 801d4d0:	d409      	bmi.n	801d4e6 <__kernel_rem_pio2+0x8e>
 801d4d2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801d4d6:	ee07 1a90 	vmov	s15, r1
 801d4da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d4de:	eca0 7b02 	vstmia	r0!, {d7}
 801d4e2:	3201      	adds	r2, #1
 801d4e4:	e7e2      	b.n	801d4ac <__kernel_rem_pio2+0x54>
 801d4e6:	eeb0 7b46 	vmov.f64	d7, d6
 801d4ea:	e7f8      	b.n	801d4de <__kernel_rem_pio2+0x86>
 801d4ec:	ecbc 5b02 	vldmia	ip!, {d5}
 801d4f0:	ed94 6b00 	vldr	d6, [r4]
 801d4f4:	3001      	adds	r0, #1
 801d4f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d4fa:	4550      	cmp	r0, sl
 801d4fc:	f1a4 0408 	sub.w	r4, r4, #8
 801d500:	ddf4      	ble.n	801d4ec <__kernel_rem_pio2+0x94>
 801d502:	ecae 7b02 	vstmia	lr!, {d7}
 801d506:	3601      	adds	r6, #1
 801d508:	3208      	adds	r2, #8
 801d50a:	e7d7      	b.n	801d4bc <__kernel_rem_pio2+0x64>
 801d50c:	aa06      	add	r2, sp, #24
 801d50e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d748 <__kernel_rem_pio2+0x2f0>
 801d512:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d750 <__kernel_rem_pio2+0x2f8>
 801d516:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801d51a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d51e:	9203      	str	r2, [sp, #12]
 801d520:	9302      	str	r3, [sp, #8]
 801d522:	464c      	mov	r4, r9
 801d524:	00e3      	lsls	r3, r4, #3
 801d526:	9304      	str	r3, [sp, #16]
 801d528:	ab92      	add	r3, sp, #584	@ 0x248
 801d52a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d52e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d532:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d534:	ab06      	add	r3, sp, #24
 801d536:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d53a:	461e      	mov	r6, r3
 801d53c:	4620      	mov	r0, r4
 801d53e:	2800      	cmp	r0, #0
 801d540:	f1a2 0208 	sub.w	r2, r2, #8
 801d544:	dc4a      	bgt.n	801d5dc <__kernel_rem_pio2+0x184>
 801d546:	4628      	mov	r0, r5
 801d548:	9305      	str	r3, [sp, #20]
 801d54a:	f000 fa01 	bl	801d950 <scalbn>
 801d54e:	eeb0 8b40 	vmov.f64	d8, d0
 801d552:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d556:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d55a:	f000 fa79 	bl	801da50 <floor>
 801d55e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d562:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d566:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d56a:	2d00      	cmp	r5, #0
 801d56c:	ee17 8a90 	vmov	r8, s15
 801d570:	9b05      	ldr	r3, [sp, #20]
 801d572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d576:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d57a:	dd41      	ble.n	801d600 <__kernel_rem_pio2+0x1a8>
 801d57c:	1e60      	subs	r0, r4, #1
 801d57e:	aa06      	add	r2, sp, #24
 801d580:	f1c5 0c18 	rsb	ip, r5, #24
 801d584:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d588:	fa46 f20c 	asr.w	r2, r6, ip
 801d58c:	4490      	add	r8, r2
 801d58e:	fa02 f20c 	lsl.w	r2, r2, ip
 801d592:	1ab6      	subs	r6, r6, r2
 801d594:	aa06      	add	r2, sp, #24
 801d596:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d59a:	f1c5 0217 	rsb	r2, r5, #23
 801d59e:	4116      	asrs	r6, r2
 801d5a0:	2e00      	cmp	r6, #0
 801d5a2:	dd3c      	ble.n	801d61e <__kernel_rem_pio2+0x1c6>
 801d5a4:	f04f 0c00 	mov.w	ip, #0
 801d5a8:	f108 0801 	add.w	r8, r8, #1
 801d5ac:	4660      	mov	r0, ip
 801d5ae:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d5b2:	4564      	cmp	r4, ip
 801d5b4:	dc66      	bgt.n	801d684 <__kernel_rem_pio2+0x22c>
 801d5b6:	2d00      	cmp	r5, #0
 801d5b8:	dd03      	ble.n	801d5c2 <__kernel_rem_pio2+0x16a>
 801d5ba:	2d01      	cmp	r5, #1
 801d5bc:	d072      	beq.n	801d6a4 <__kernel_rem_pio2+0x24c>
 801d5be:	2d02      	cmp	r5, #2
 801d5c0:	d07a      	beq.n	801d6b8 <__kernel_rem_pio2+0x260>
 801d5c2:	2e02      	cmp	r6, #2
 801d5c4:	d12b      	bne.n	801d61e <__kernel_rem_pio2+0x1c6>
 801d5c6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d5ca:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d5ce:	b330      	cbz	r0, 801d61e <__kernel_rem_pio2+0x1c6>
 801d5d0:	4628      	mov	r0, r5
 801d5d2:	f000 f9bd 	bl	801d950 <scalbn>
 801d5d6:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d5da:	e020      	b.n	801d61e <__kernel_rem_pio2+0x1c6>
 801d5dc:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d5e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d5e4:	3801      	subs	r0, #1
 801d5e6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d5ea:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d5ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d5f2:	eca6 0a01 	vstmia	r6!, {s0}
 801d5f6:	ed92 0b00 	vldr	d0, [r2]
 801d5fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d5fe:	e79e      	b.n	801d53e <__kernel_rem_pio2+0xe6>
 801d600:	d105      	bne.n	801d60e <__kernel_rem_pio2+0x1b6>
 801d602:	1e62      	subs	r2, r4, #1
 801d604:	a906      	add	r1, sp, #24
 801d606:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d60a:	15f6      	asrs	r6, r6, #23
 801d60c:	e7c8      	b.n	801d5a0 <__kernel_rem_pio2+0x148>
 801d60e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d612:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d61a:	da31      	bge.n	801d680 <__kernel_rem_pio2+0x228>
 801d61c:	2600      	movs	r6, #0
 801d61e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d626:	f040 809b 	bne.w	801d760 <__kernel_rem_pio2+0x308>
 801d62a:	1e62      	subs	r2, r4, #1
 801d62c:	2000      	movs	r0, #0
 801d62e:	454a      	cmp	r2, r9
 801d630:	da49      	bge.n	801d6c6 <__kernel_rem_pio2+0x26e>
 801d632:	2800      	cmp	r0, #0
 801d634:	d062      	beq.n	801d6fc <__kernel_rem_pio2+0x2a4>
 801d636:	3c01      	subs	r4, #1
 801d638:	ab06      	add	r3, sp, #24
 801d63a:	3d18      	subs	r5, #24
 801d63c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d640:	2b00      	cmp	r3, #0
 801d642:	d0f8      	beq.n	801d636 <__kernel_rem_pio2+0x1de>
 801d644:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d648:	4628      	mov	r0, r5
 801d64a:	f000 f981 	bl	801d950 <scalbn>
 801d64e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d748 <__kernel_rem_pio2+0x2f0>
 801d652:	1c62      	adds	r2, r4, #1
 801d654:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d656:	00d3      	lsls	r3, r2, #3
 801d658:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d65c:	4622      	mov	r2, r4
 801d65e:	2a00      	cmp	r2, #0
 801d660:	f280 80a8 	bge.w	801d7b4 <__kernel_rem_pio2+0x35c>
 801d664:	4622      	mov	r2, r4
 801d666:	2a00      	cmp	r2, #0
 801d668:	f2c0 80c6 	blt.w	801d7f8 <__kernel_rem_pio2+0x3a0>
 801d66c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d66e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d672:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d740 <__kernel_rem_pio2+0x2e8>
 801d676:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d75c <__kernel_rem_pio2+0x304>
 801d67a:	2000      	movs	r0, #0
 801d67c:	1aa1      	subs	r1, r4, r2
 801d67e:	e0b0      	b.n	801d7e2 <__kernel_rem_pio2+0x38a>
 801d680:	2602      	movs	r6, #2
 801d682:	e78f      	b.n	801d5a4 <__kernel_rem_pio2+0x14c>
 801d684:	f853 2b04 	ldr.w	r2, [r3], #4
 801d688:	b948      	cbnz	r0, 801d69e <__kernel_rem_pio2+0x246>
 801d68a:	b122      	cbz	r2, 801d696 <__kernel_rem_pio2+0x23e>
 801d68c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d690:	f843 2c04 	str.w	r2, [r3, #-4]
 801d694:	2201      	movs	r2, #1
 801d696:	f10c 0c01 	add.w	ip, ip, #1
 801d69a:	4610      	mov	r0, r2
 801d69c:	e789      	b.n	801d5b2 <__kernel_rem_pio2+0x15a>
 801d69e:	ebae 0202 	sub.w	r2, lr, r2
 801d6a2:	e7f5      	b.n	801d690 <__kernel_rem_pio2+0x238>
 801d6a4:	1e62      	subs	r2, r4, #1
 801d6a6:	ab06      	add	r3, sp, #24
 801d6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d6ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d6b0:	a906      	add	r1, sp, #24
 801d6b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d6b6:	e784      	b.n	801d5c2 <__kernel_rem_pio2+0x16a>
 801d6b8:	1e62      	subs	r2, r4, #1
 801d6ba:	ab06      	add	r3, sp, #24
 801d6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d6c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d6c4:	e7f4      	b.n	801d6b0 <__kernel_rem_pio2+0x258>
 801d6c6:	ab06      	add	r3, sp, #24
 801d6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d6cc:	3a01      	subs	r2, #1
 801d6ce:	4318      	orrs	r0, r3
 801d6d0:	e7ad      	b.n	801d62e <__kernel_rem_pio2+0x1d6>
 801d6d2:	3301      	adds	r3, #1
 801d6d4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d6d8:	2800      	cmp	r0, #0
 801d6da:	d0fa      	beq.n	801d6d2 <__kernel_rem_pio2+0x27a>
 801d6dc:	9a04      	ldr	r2, [sp, #16]
 801d6de:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d6e2:	446a      	add	r2, sp
 801d6e4:	eb04 000b 	add.w	r0, r4, fp
 801d6e8:	a91a      	add	r1, sp, #104	@ 0x68
 801d6ea:	1c66      	adds	r6, r4, #1
 801d6ec:	3a98      	subs	r2, #152	@ 0x98
 801d6ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d6f2:	4423      	add	r3, r4
 801d6f4:	42b3      	cmp	r3, r6
 801d6f6:	da04      	bge.n	801d702 <__kernel_rem_pio2+0x2aa>
 801d6f8:	461c      	mov	r4, r3
 801d6fa:	e713      	b.n	801d524 <__kernel_rem_pio2+0xcc>
 801d6fc:	9a03      	ldr	r2, [sp, #12]
 801d6fe:	2301      	movs	r3, #1
 801d700:	e7e8      	b.n	801d6d4 <__kernel_rem_pio2+0x27c>
 801d702:	9902      	ldr	r1, [sp, #8]
 801d704:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d708:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d70c:	9104      	str	r1, [sp, #16]
 801d70e:	ee07 1a90 	vmov	s15, r1
 801d712:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d716:	2400      	movs	r4, #0
 801d718:	eca0 7b02 	vstmia	r0!, {d7}
 801d71c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d740 <__kernel_rem_pio2+0x2e8>
 801d720:	4686      	mov	lr, r0
 801d722:	4554      	cmp	r4, sl
 801d724:	dd03      	ble.n	801d72e <__kernel_rem_pio2+0x2d6>
 801d726:	eca2 7b02 	vstmia	r2!, {d7}
 801d72a:	3601      	adds	r6, #1
 801d72c:	e7e2      	b.n	801d6f4 <__kernel_rem_pio2+0x29c>
 801d72e:	ecbc 5b02 	vldmia	ip!, {d5}
 801d732:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d736:	3401      	adds	r4, #1
 801d738:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d73c:	e7f1      	b.n	801d722 <__kernel_rem_pio2+0x2ca>
 801d73e:	bf00      	nop
	...
 801d74c:	3e700000 	.word	0x3e700000
 801d750:	00000000 	.word	0x00000000
 801d754:	41700000 	.word	0x41700000
 801d758:	0801ee40 	.word	0x0801ee40
 801d75c:	0801ee00 	.word	0x0801ee00
 801d760:	4268      	negs	r0, r5
 801d762:	eeb0 0b48 	vmov.f64	d0, d8
 801d766:	f000 f8f3 	bl	801d950 <scalbn>
 801d76a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d938 <__kernel_rem_pio2+0x4e0>
 801d76e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d776:	db17      	blt.n	801d7a8 <__kernel_rem_pio2+0x350>
 801d778:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d940 <__kernel_rem_pio2+0x4e8>
 801d77c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d780:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d784:	aa06      	add	r2, sp, #24
 801d786:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d78a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d78e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d792:	3518      	adds	r5, #24
 801d794:	ee10 3a10 	vmov	r3, s0
 801d798:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d79c:	ee17 3a10 	vmov	r3, s14
 801d7a0:	3401      	adds	r4, #1
 801d7a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d7a6:	e74d      	b.n	801d644 <__kernel_rem_pio2+0x1ec>
 801d7a8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d7ac:	aa06      	add	r2, sp, #24
 801d7ae:	ee10 3a10 	vmov	r3, s0
 801d7b2:	e7f6      	b.n	801d7a2 <__kernel_rem_pio2+0x34a>
 801d7b4:	a806      	add	r0, sp, #24
 801d7b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d7ba:	9001      	str	r0, [sp, #4]
 801d7bc:	ee07 0a90 	vmov	s15, r0
 801d7c0:	3a01      	subs	r2, #1
 801d7c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d7c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d7ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d7ce:	ed21 7b02 	vstmdb	r1!, {d7}
 801d7d2:	e744      	b.n	801d65e <__kernel_rem_pio2+0x206>
 801d7d4:	ecbc 5b02 	vldmia	ip!, {d5}
 801d7d8:	ecb5 6b02 	vldmia	r5!, {d6}
 801d7dc:	3001      	adds	r0, #1
 801d7de:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d7e2:	4548      	cmp	r0, r9
 801d7e4:	dc01      	bgt.n	801d7ea <__kernel_rem_pio2+0x392>
 801d7e6:	4281      	cmp	r1, r0
 801d7e8:	daf4      	bge.n	801d7d4 <__kernel_rem_pio2+0x37c>
 801d7ea:	a842      	add	r0, sp, #264	@ 0x108
 801d7ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d7f0:	ed81 7b00 	vstr	d7, [r1]
 801d7f4:	3a01      	subs	r2, #1
 801d7f6:	e736      	b.n	801d666 <__kernel_rem_pio2+0x20e>
 801d7f8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d7fa:	2a02      	cmp	r2, #2
 801d7fc:	dc0a      	bgt.n	801d814 <__kernel_rem_pio2+0x3bc>
 801d7fe:	2a00      	cmp	r2, #0
 801d800:	dc2d      	bgt.n	801d85e <__kernel_rem_pio2+0x406>
 801d802:	d046      	beq.n	801d892 <__kernel_rem_pio2+0x43a>
 801d804:	f008 0007 	and.w	r0, r8, #7
 801d808:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d80c:	ecbd 8b06 	vpop	{d8-d10}
 801d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d814:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d816:	2a03      	cmp	r2, #3
 801d818:	d1f4      	bne.n	801d804 <__kernel_rem_pio2+0x3ac>
 801d81a:	a942      	add	r1, sp, #264	@ 0x108
 801d81c:	f1a3 0208 	sub.w	r2, r3, #8
 801d820:	440a      	add	r2, r1
 801d822:	4611      	mov	r1, r2
 801d824:	4620      	mov	r0, r4
 801d826:	2800      	cmp	r0, #0
 801d828:	f1a1 0108 	sub.w	r1, r1, #8
 801d82c:	dc52      	bgt.n	801d8d4 <__kernel_rem_pio2+0x47c>
 801d82e:	4621      	mov	r1, r4
 801d830:	2901      	cmp	r1, #1
 801d832:	f1a2 0208 	sub.w	r2, r2, #8
 801d836:	dc5d      	bgt.n	801d8f4 <__kernel_rem_pio2+0x49c>
 801d838:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d948 <__kernel_rem_pio2+0x4f0>
 801d83c:	aa42      	add	r2, sp, #264	@ 0x108
 801d83e:	4413      	add	r3, r2
 801d840:	2c01      	cmp	r4, #1
 801d842:	dc67      	bgt.n	801d914 <__kernel_rem_pio2+0x4bc>
 801d844:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d848:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d84c:	2e00      	cmp	r6, #0
 801d84e:	d167      	bne.n	801d920 <__kernel_rem_pio2+0x4c8>
 801d850:	ed87 5b00 	vstr	d5, [r7]
 801d854:	ed87 6b02 	vstr	d6, [r7, #8]
 801d858:	ed87 7b04 	vstr	d7, [r7, #16]
 801d85c:	e7d2      	b.n	801d804 <__kernel_rem_pio2+0x3ac>
 801d85e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d948 <__kernel_rem_pio2+0x4f0>
 801d862:	aa42      	add	r2, sp, #264	@ 0x108
 801d864:	4413      	add	r3, r2
 801d866:	4622      	mov	r2, r4
 801d868:	2a00      	cmp	r2, #0
 801d86a:	da24      	bge.n	801d8b6 <__kernel_rem_pio2+0x45e>
 801d86c:	b34e      	cbz	r6, 801d8c2 <__kernel_rem_pio2+0x46a>
 801d86e:	eeb1 7b46 	vneg.f64	d7, d6
 801d872:	ed87 7b00 	vstr	d7, [r7]
 801d876:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d87a:	aa44      	add	r2, sp, #272	@ 0x110
 801d87c:	2301      	movs	r3, #1
 801d87e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d882:	429c      	cmp	r4, r3
 801d884:	da20      	bge.n	801d8c8 <__kernel_rem_pio2+0x470>
 801d886:	b10e      	cbz	r6, 801d88c <__kernel_rem_pio2+0x434>
 801d888:	eeb1 7b47 	vneg.f64	d7, d7
 801d88c:	ed87 7b02 	vstr	d7, [r7, #8]
 801d890:	e7b8      	b.n	801d804 <__kernel_rem_pio2+0x3ac>
 801d892:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d948 <__kernel_rem_pio2+0x4f0>
 801d896:	aa42      	add	r2, sp, #264	@ 0x108
 801d898:	4413      	add	r3, r2
 801d89a:	2c00      	cmp	r4, #0
 801d89c:	da05      	bge.n	801d8aa <__kernel_rem_pio2+0x452>
 801d89e:	b10e      	cbz	r6, 801d8a4 <__kernel_rem_pio2+0x44c>
 801d8a0:	eeb1 7b47 	vneg.f64	d7, d7
 801d8a4:	ed87 7b00 	vstr	d7, [r7]
 801d8a8:	e7ac      	b.n	801d804 <__kernel_rem_pio2+0x3ac>
 801d8aa:	ed33 6b02 	vldmdb	r3!, {d6}
 801d8ae:	3c01      	subs	r4, #1
 801d8b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d8b4:	e7f1      	b.n	801d89a <__kernel_rem_pio2+0x442>
 801d8b6:	ed33 7b02 	vldmdb	r3!, {d7}
 801d8ba:	3a01      	subs	r2, #1
 801d8bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d8c0:	e7d2      	b.n	801d868 <__kernel_rem_pio2+0x410>
 801d8c2:	eeb0 7b46 	vmov.f64	d7, d6
 801d8c6:	e7d4      	b.n	801d872 <__kernel_rem_pio2+0x41a>
 801d8c8:	ecb2 6b02 	vldmia	r2!, {d6}
 801d8cc:	3301      	adds	r3, #1
 801d8ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d8d2:	e7d6      	b.n	801d882 <__kernel_rem_pio2+0x42a>
 801d8d4:	ed91 7b00 	vldr	d7, [r1]
 801d8d8:	ed91 5b02 	vldr	d5, [r1, #8]
 801d8dc:	3801      	subs	r0, #1
 801d8de:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d8e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8e6:	ed81 6b00 	vstr	d6, [r1]
 801d8ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d8ee:	ed81 7b02 	vstr	d7, [r1, #8]
 801d8f2:	e798      	b.n	801d826 <__kernel_rem_pio2+0x3ce>
 801d8f4:	ed92 7b00 	vldr	d7, [r2]
 801d8f8:	ed92 5b02 	vldr	d5, [r2, #8]
 801d8fc:	3901      	subs	r1, #1
 801d8fe:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d902:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d906:	ed82 6b00 	vstr	d6, [r2]
 801d90a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d90e:	ed82 7b02 	vstr	d7, [r2, #8]
 801d912:	e78d      	b.n	801d830 <__kernel_rem_pio2+0x3d8>
 801d914:	ed33 6b02 	vldmdb	r3!, {d6}
 801d918:	3c01      	subs	r4, #1
 801d91a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d91e:	e78f      	b.n	801d840 <__kernel_rem_pio2+0x3e8>
 801d920:	eeb1 5b45 	vneg.f64	d5, d5
 801d924:	eeb1 6b46 	vneg.f64	d6, d6
 801d928:	ed87 5b00 	vstr	d5, [r7]
 801d92c:	eeb1 7b47 	vneg.f64	d7, d7
 801d930:	ed87 6b02 	vstr	d6, [r7, #8]
 801d934:	e790      	b.n	801d858 <__kernel_rem_pio2+0x400>
 801d936:	bf00      	nop
 801d938:	00000000 	.word	0x00000000
 801d93c:	41700000 	.word	0x41700000
 801d940:	00000000 	.word	0x00000000
 801d944:	3e700000 	.word	0x3e700000
	...

0801d950 <scalbn>:
 801d950:	ee10 1a90 	vmov	r1, s1
 801d954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d958:	b98b      	cbnz	r3, 801d97e <scalbn+0x2e>
 801d95a:	ee10 3a10 	vmov	r3, s0
 801d95e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d962:	4319      	orrs	r1, r3
 801d964:	d00a      	beq.n	801d97c <scalbn+0x2c>
 801d966:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801da18 <scalbn+0xc8>
 801d96a:	4b37      	ldr	r3, [pc, #220]	@ (801da48 <scalbn+0xf8>)
 801d96c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d970:	4298      	cmp	r0, r3
 801d972:	da0b      	bge.n	801d98c <scalbn+0x3c>
 801d974:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801da20 <scalbn+0xd0>
 801d978:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d97c:	4770      	bx	lr
 801d97e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d982:	4293      	cmp	r3, r2
 801d984:	d107      	bne.n	801d996 <scalbn+0x46>
 801d986:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d98a:	4770      	bx	lr
 801d98c:	ee10 1a90 	vmov	r1, s1
 801d990:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d994:	3b36      	subs	r3, #54	@ 0x36
 801d996:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d99a:	4290      	cmp	r0, r2
 801d99c:	dd0d      	ble.n	801d9ba <scalbn+0x6a>
 801d99e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801da28 <scalbn+0xd8>
 801d9a2:	ee10 3a90 	vmov	r3, s1
 801d9a6:	eeb0 6b47 	vmov.f64	d6, d7
 801d9aa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801da30 <scalbn+0xe0>
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d9b4:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d9b8:	4770      	bx	lr
 801d9ba:	4418      	add	r0, r3
 801d9bc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d9c0:	4298      	cmp	r0, r3
 801d9c2:	dcec      	bgt.n	801d99e <scalbn+0x4e>
 801d9c4:	2800      	cmp	r0, #0
 801d9c6:	dd0a      	ble.n	801d9de <scalbn+0x8e>
 801d9c8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d9cc:	ec53 2b10 	vmov	r2, r3, d0
 801d9d0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d9d4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d9d8:	ec43 2b10 	vmov	d0, r2, r3
 801d9dc:	4770      	bx	lr
 801d9de:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d9e2:	da09      	bge.n	801d9f8 <scalbn+0xa8>
 801d9e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801da20 <scalbn+0xd0>
 801d9e8:	ee10 3a90 	vmov	r3, s1
 801d9ec:	eeb0 6b47 	vmov.f64	d6, d7
 801d9f0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801da38 <scalbn+0xe8>
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	e7db      	b.n	801d9b0 <scalbn+0x60>
 801d9f8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d9fc:	ec53 2b10 	vmov	r2, r3, d0
 801da00:	3036      	adds	r0, #54	@ 0x36
 801da02:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801da06:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801da0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801da40 <scalbn+0xf0>
 801da0e:	ec43 2b10 	vmov	d0, r2, r3
 801da12:	e7b1      	b.n	801d978 <scalbn+0x28>
 801da14:	f3af 8000 	nop.w
 801da18:	00000000 	.word	0x00000000
 801da1c:	43500000 	.word	0x43500000
 801da20:	c2f8f359 	.word	0xc2f8f359
 801da24:	01a56e1f 	.word	0x01a56e1f
 801da28:	8800759c 	.word	0x8800759c
 801da2c:	7e37e43c 	.word	0x7e37e43c
 801da30:	8800759c 	.word	0x8800759c
 801da34:	fe37e43c 	.word	0xfe37e43c
 801da38:	c2f8f359 	.word	0xc2f8f359
 801da3c:	81a56e1f 	.word	0x81a56e1f
 801da40:	00000000 	.word	0x00000000
 801da44:	3c900000 	.word	0x3c900000
 801da48:	ffff3cb0 	.word	0xffff3cb0
 801da4c:	00000000 	.word	0x00000000

0801da50 <floor>:
 801da50:	ee10 3a90 	vmov	r3, s1
 801da54:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801da58:	ee10 2a10 	vmov	r2, s0
 801da5c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801da60:	2913      	cmp	r1, #19
 801da62:	b530      	push	{r4, r5, lr}
 801da64:	4615      	mov	r5, r2
 801da66:	dc33      	bgt.n	801dad0 <floor+0x80>
 801da68:	2900      	cmp	r1, #0
 801da6a:	da18      	bge.n	801da9e <floor+0x4e>
 801da6c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801db30 <floor+0xe0>
 801da70:	ee30 0b07 	vadd.f64	d0, d0, d7
 801da74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801da78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da7c:	dd0a      	ble.n	801da94 <floor+0x44>
 801da7e:	2b00      	cmp	r3, #0
 801da80:	da50      	bge.n	801db24 <floor+0xd4>
 801da82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801da86:	4313      	orrs	r3, r2
 801da88:	2200      	movs	r2, #0
 801da8a:	4293      	cmp	r3, r2
 801da8c:	4b2a      	ldr	r3, [pc, #168]	@ (801db38 <floor+0xe8>)
 801da8e:	bf08      	it	eq
 801da90:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801da94:	4619      	mov	r1, r3
 801da96:	4610      	mov	r0, r2
 801da98:	ec41 0b10 	vmov	d0, r0, r1
 801da9c:	e01f      	b.n	801dade <floor+0x8e>
 801da9e:	4827      	ldr	r0, [pc, #156]	@ (801db3c <floor+0xec>)
 801daa0:	4108      	asrs	r0, r1
 801daa2:	ea03 0400 	and.w	r4, r3, r0
 801daa6:	4314      	orrs	r4, r2
 801daa8:	d019      	beq.n	801dade <floor+0x8e>
 801daaa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801db30 <floor+0xe0>
 801daae:	ee30 0b07 	vadd.f64	d0, d0, d7
 801dab2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801dab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daba:	ddeb      	ble.n	801da94 <floor+0x44>
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	bfbe      	ittt	lt
 801dac0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801dac4:	410a      	asrlt	r2, r1
 801dac6:	189b      	addlt	r3, r3, r2
 801dac8:	ea23 0300 	bic.w	r3, r3, r0
 801dacc:	2200      	movs	r2, #0
 801dace:	e7e1      	b.n	801da94 <floor+0x44>
 801dad0:	2933      	cmp	r1, #51	@ 0x33
 801dad2:	dd05      	ble.n	801dae0 <floor+0x90>
 801dad4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801dad8:	d101      	bne.n	801dade <floor+0x8e>
 801dada:	ee30 0b00 	vadd.f64	d0, d0, d0
 801dade:	bd30      	pop	{r4, r5, pc}
 801dae0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801dae4:	f04f 30ff 	mov.w	r0, #4294967295
 801dae8:	40e0      	lsrs	r0, r4
 801daea:	4210      	tst	r0, r2
 801daec:	d0f7      	beq.n	801dade <floor+0x8e>
 801daee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801db30 <floor+0xe0>
 801daf2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801daf6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801dafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dafe:	ddc9      	ble.n	801da94 <floor+0x44>
 801db00:	2b00      	cmp	r3, #0
 801db02:	da02      	bge.n	801db0a <floor+0xba>
 801db04:	2914      	cmp	r1, #20
 801db06:	d103      	bne.n	801db10 <floor+0xc0>
 801db08:	3301      	adds	r3, #1
 801db0a:	ea22 0200 	bic.w	r2, r2, r0
 801db0e:	e7c1      	b.n	801da94 <floor+0x44>
 801db10:	2401      	movs	r4, #1
 801db12:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801db16:	fa04 f101 	lsl.w	r1, r4, r1
 801db1a:	440a      	add	r2, r1
 801db1c:	42aa      	cmp	r2, r5
 801db1e:	bf38      	it	cc
 801db20:	191b      	addcc	r3, r3, r4
 801db22:	e7f2      	b.n	801db0a <floor+0xba>
 801db24:	2200      	movs	r2, #0
 801db26:	4613      	mov	r3, r2
 801db28:	e7b4      	b.n	801da94 <floor+0x44>
 801db2a:	bf00      	nop
 801db2c:	f3af 8000 	nop.w
 801db30:	8800759c 	.word	0x8800759c
 801db34:	7e37e43c 	.word	0x7e37e43c
 801db38:	bff00000 	.word	0xbff00000
 801db3c:	000fffff 	.word	0x000fffff

0801db40 <_init>:
 801db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db42:	bf00      	nop
 801db44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db46:	bc08      	pop	{r3}
 801db48:	469e      	mov	lr, r3
 801db4a:	4770      	bx	lr

0801db4c <_fini>:
 801db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db4e:	bf00      	nop
 801db50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db52:	bc08      	pop	{r3}
 801db54:	469e      	mov	lr, r3
 801db56:	4770      	bx	lr
